# syntax=docker/dockerfile:1
FROM node:21-bookworm-slim@sha256:99afef5df7400a8d118e0504576d32ca700de5034c4f9271d2ff7c91cc12d170 AS base



ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get --fix-broken install -y && apt-get install -y --no-install-recommends busybox ca-certificates dumb-init git openssl && apt-get clean && rm -rf /var/lib/apt/lists/*

FROM base AS build

# Install build dependencies
RUN apt-get update && apt-get install -y --no-install-recommends     python3 make g++ &&     apt-get clean && rm -rf /var/lib/apt/lists/*

USER node
WORKDIR /app

ARG DATABASE_URL
ARG NEXT_PRIVATE_DIRECT_DATABASE_URL

ENV DATABASE_URL=$DATABASE_URL
ENV NEXT_PRIVATE_DIRECT_DATABASE_URL=$NEXT_PRIVATE_DIRECT_DATABASE_URL

ENV NODE_ENV=production
ENV NPM_CONFIG_UPDATE_NOTIFIER=false

COPY --chown=node:node package.json ./
RUN npm i --no-audit --no-fund --no-save --no-package-lock

# Now copy all the files
# IMPORTANT: Do this after running npm install because npm i will wipe out the node_modules directory
COPY --chown=node:node . .

RUN node node_modules/prisma/build/index.js generate --schema=./prisma/schema.prisma --generator=client
RUN node node_modules/prisma/build/index.js migrate deploy

# IMPORTANT: Doing this again to fix an issue with prisma generate removing the files in node_modules/trigger.dev for some reason...
COPY --chown=node:node . .

FROM build AS indexer

USER node
WORKDIR /app

ARG TRIGGER_PROJECT_ID
ARG TRIGGER_DEPLOYMENT_ID
ARG TRIGGER_DEPLOYMENT_VERSION
ARG TRIGGER_CONTENT_HASH
ARG TRIGGER_PROJECT_REF
ARG NODE_EXTRA_CA_CERTS
ARG TRIGGER_SECRET_KEY
ARG TRIGGER_API_URL

ENV TRIGGER_PROJECT_ID=${TRIGGER_PROJECT_ID}     TRIGGER_DEPLOYMENT_ID=${TRIGGER_DEPLOYMENT_ID}     TRIGGER_DEPLOYMENT_VERSION=${TRIGGER_DEPLOYMENT_VERSION}     TRIGGER_PROJECT_REF=${TRIGGER_PROJECT_REF}     TRIGGER_CONTENT_HASH=${TRIGGER_CONTENT_HASH}     TRIGGER_SECRET_KEY=${TRIGGER_SECRET_KEY}     TRIGGER_API_URL=${TRIGGER_API_URL}     TRIGGER_LOG_LEVEL=debug     NODE_EXTRA_CA_CERTS=${NODE_EXTRA_CA_CERTS}     NODE_ENV=production     NODE_OPTIONS="--max_old_space_size=8192"

# Run the indexer
RUN node /app/AppData/Local/npm-cache/_npx/f35930adf21a2162/node_modules/trigger.dev/dist/esm/entryPoints/deploy-index-controller.mjs

# Development or production stage builds upon the base stage
FROM base AS final

USER node
WORKDIR /app

ARG TRIGGER_PROJECT_ID
ARG TRIGGER_DEPLOYMENT_ID
ARG TRIGGER_DEPLOYMENT_VERSION
ARG TRIGGER_CONTENT_HASH
ARG TRIGGER_PROJECT_REF
ARG NODE_EXTRA_CA_CERTS

ENV TRIGGER_PROJECT_ID=${TRIGGER_PROJECT_ID}     TRIGGER_DEPLOYMENT_ID=${TRIGGER_DEPLOYMENT_ID}     TRIGGER_DEPLOYMENT_VERSION=${TRIGGER_DEPLOYMENT_VERSION}     TRIGGER_CONTENT_HASH=${TRIGGER_CONTENT_HASH}     TRIGGER_PROJECT_REF=${TRIGGER_PROJECT_REF}     NODE_EXTRA_CA_CERTS=${NODE_EXTRA_CA_CERTS}     NODE_ENV=production     NODE_OPTIONS="--max_old_space_size=8192"

# Copy the files from the install stage
COPY --from=build --chown=node:node /app ./

# Copy the index.json file from the indexer stage
COPY --from=indexer --chown=node:node /app/index.json ./

ENTRYPOINT [ "dumb-init", "node", "/app/AppData/Local/npm-cache/_npx/f35930adf21a2162/node_modules/trigger.dev/dist/esm/entryPoints/deploy-run-controller.mjs" ]
CMD []
  