import {
  FormData,
  fetch_blob_default,
  formDataToBlob
} from "./chunk-CPIDBU7G.mjs";
import {
  task,
  z
} from "./chunk-MC5LTTK4.mjs";
import {
  __commonJS,
  __require,
  __toESM,
  init_esm
} from "./chunk-GTHMB43D.mjs";

// ../../node_modules/csv-parser/index.js
var require_csv_parser = __commonJS({
  "../../node_modules/csv-parser/index.js"(exports, module) {
    init_esm();
    var { Transform } = __require("stream");
    var [cr2] = Buffer.from("\r");
    var [nl] = Buffer.from("\n");
    var defaults = {
      escape: '"',
      headers: null,
      mapHeaders: ({ header }) => header,
      mapValues: ({ value }) => value,
      newline: "\n",
      quote: '"',
      raw: false,
      separator: ",",
      skipComments: false,
      skipLines: null,
      maxRowBytes: Number.MAX_SAFE_INTEGER,
      strict: false,
      outputByteOffset: false
    };
    var CsvParser = class extends Transform {
      constructor(opts = {}) {
        super({ objectMode: true, highWaterMark: 16 });
        if (Array.isArray(opts)) opts = { headers: opts };
        const options = Object.assign({}, defaults, opts);
        options.customNewline = options.newline !== defaults.newline;
        for (const key of ["newline", "quote", "separator"]) {
          if (typeof options[key] !== "undefined") {
            [options[key]] = Buffer.from(options[key]);
          }
        }
        options.escape = (opts || {}).escape ? Buffer.from(options.escape)[0] : options.quote;
        this.state = {
          empty: options.raw ? Buffer.alloc(0) : "",
          escaped: false,
          first: true,
          lineNumber: 0,
          previousEnd: 0,
          rowLength: 0,
          quoted: false
        };
        this._prev = null;
        if (options.headers === false) {
          options.strict = false;
        }
        if (options.headers || options.headers === false) {
          this.state.first = false;
        }
        this.options = options;
        this.headers = options.headers;
        this.bytesRead = 0;
      }
      parseCell(buffer, start, end) {
        const { escape: escape2, quote } = this.options;
        if (buffer[start] === quote && buffer[end - 1] === quote) {
          start++;
          end--;
        }
        let y3 = start;
        for (let i3 = start; i3 < end; i3++) {
          if (buffer[i3] === escape2 && i3 + 1 < end && buffer[i3 + 1] === quote) {
            i3++;
          }
          if (y3 !== i3) {
            buffer[y3] = buffer[i3];
          }
          y3++;
        }
        return this.parseValue(buffer, start, y3);
      }
      parseLine(buffer, start, end) {
        const { customNewline, escape: escape2, mapHeaders, mapValues, quote, separator, skipComments, skipLines } = this.options;
        end--;
        if (!customNewline && buffer.length && buffer[end - 1] === cr2) {
          end--;
        }
        const comma = separator;
        const cells = [];
        let isQuoted = false;
        let offset = start;
        if (skipComments) {
          const char = typeof skipComments === "string" ? skipComments : "#";
          if (buffer[start] === Buffer.from(char)[0]) {
            return;
          }
        }
        const mapValue = (value) => {
          if (this.state.first) {
            return value;
          }
          const index = cells.length;
          const header = this.headers[index];
          return mapValues({ header, index, value });
        };
        for (let i3 = start; i3 < end; i3++) {
          const isStartingQuote = !isQuoted && buffer[i3] === quote;
          const isEndingQuote = isQuoted && buffer[i3] === quote && i3 + 1 <= end && buffer[i3 + 1] === comma;
          const isEscape = isQuoted && buffer[i3] === escape2 && i3 + 1 < end && buffer[i3 + 1] === quote;
          if (isStartingQuote || isEndingQuote) {
            isQuoted = !isQuoted;
            continue;
          } else if (isEscape) {
            i3++;
            continue;
          }
          if (buffer[i3] === comma && !isQuoted) {
            let value = this.parseCell(buffer, offset, i3);
            value = mapValue(value);
            cells.push(value);
            offset = i3 + 1;
          }
        }
        if (offset < end) {
          let value = this.parseCell(buffer, offset, end);
          value = mapValue(value);
          cells.push(value);
        }
        if (buffer[end - 1] === comma) {
          cells.push(mapValue(this.state.empty));
        }
        const skip = skipLines && skipLines > this.state.lineNumber;
        this.state.lineNumber++;
        if (this.state.first && !skip) {
          this.state.first = false;
          this.headers = cells.map((header, index) => mapHeaders({ header, index }));
          this.emit("headers", this.headers);
          return;
        }
        if (!skip && this.options.strict && cells.length !== this.headers.length) {
          const e3 = new RangeError("Row length does not match headers");
          this.emit("error", e3);
        } else {
          if (!skip) {
            const byteOffset = this.bytesRead - buffer.length + start;
            this.writeRow(cells, byteOffset);
          }
        }
      }
      parseValue(buffer, start, end) {
        if (this.options.raw) {
          return buffer.slice(start, end);
        }
        return buffer.toString("utf-8", start, end);
      }
      writeRow(cells, byteOffset) {
        const headers = this.headers === false ? cells.map((value, index) => index) : this.headers;
        const row = cells.reduce((o3, cell, index) => {
          const header = headers[index];
          if (header === null) return o3;
          if (header !== void 0) {
            o3[header] = cell;
          } else {
            o3[`_${index}`] = cell;
          }
          return o3;
        }, {});
        if (this.options.outputByteOffset) {
          this.push({ row, byteOffset });
        } else {
          this.push(row);
        }
      }
      _flush(cb) {
        if (this.state.escaped || !this._prev) return cb();
        this.parseLine(this._prev, this.state.previousEnd, this._prev.length + 1);
        cb();
      }
      _transform(data, enc, cb) {
        if (typeof data === "string") {
          data = Buffer.from(data);
        }
        const { escape: escape2, quote } = this.options;
        let start = 0;
        let buffer = data;
        this.bytesRead += data.byteLength;
        if (this._prev) {
          start = this._prev.length;
          buffer = Buffer.concat([this._prev, data]);
          this._prev = null;
        }
        const bufferLength = buffer.length;
        for (let i3 = start; i3 < bufferLength; i3++) {
          const chr = buffer[i3];
          const nextChr = i3 + 1 < bufferLength ? buffer[i3 + 1] : null;
          this.state.rowLength++;
          if (this.state.rowLength > this.options.maxRowBytes) {
            return cb(new Error("Row exceeds the maximum size"));
          }
          if (!this.state.escaped && chr === escape2 && nextChr === quote && i3 !== start) {
            this.state.escaped = true;
            continue;
          } else if (chr === quote) {
            if (this.state.escaped) {
              this.state.escaped = false;
            } else {
              this.state.quoted = !this.state.quoted;
            }
            continue;
          }
          if (!this.state.quoted) {
            if (this.state.first && !this.options.customNewline) {
              if (chr === nl) {
                this.options.newline = nl;
              } else if (chr === cr2) {
                if (nextChr !== nl) {
                  this.options.newline = cr2;
                }
              }
            }
            if (chr === this.options.newline) {
              this.parseLine(buffer, this.state.previousEnd, i3 + 1);
              this.state.previousEnd = i3 + 1;
              this.state.rowLength = 0;
            }
          }
        }
        if (this.state.previousEnd === bufferLength) {
          this.state.previousEnd = 0;
          return cb();
        }
        if (bufferLength - this.state.previousEnd < data.length) {
          this._prev = data;
          this.state.previousEnd -= bufferLength - data.length;
          return cb();
        }
        this._prev = buffer;
        cb();
      }
    };
    module.exports = (opts) => new CsvParser(opts);
  }
});

// ../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/conventions.js
var require_conventions = __commonJS({
  "../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/conventions.js"(exports) {
    "use strict";
    init_esm();
    function find(list, predicate, ac) {
      if (ac === void 0) {
        ac = Array.prototype;
      }
      if (list && typeof ac.find === "function") {
        return ac.find.call(list, predicate);
      }
      for (var i3 = 0; i3 < list.length; i3++) {
        if (hasOwn(list, i3)) {
          var item = list[i3];
          if (predicate.call(void 0, item, i3, list)) {
            return item;
          }
        }
      }
    }
    function freeze2(object, oc) {
      if (oc === void 0) {
        oc = Object;
      }
      if (oc && typeof oc.getOwnPropertyDescriptors === "function") {
        object = oc.create(null, oc.getOwnPropertyDescriptors(object));
      }
      return oc && typeof oc.freeze === "function" ? oc.freeze(object) : object;
    }
    function hasOwn(object, key) {
      return Object.prototype.hasOwnProperty.call(object, key);
    }
    function assign(target, source) {
      if (target === null || typeof target !== "object") {
        throw new TypeError("target is not an object");
      }
      for (var key in source) {
        if (hasOwn(source, key)) {
          target[key] = source[key];
        }
      }
      return target;
    }
    var HTML_BOOLEAN_ATTRIBUTES = freeze2({
      allowfullscreen: true,
      async: true,
      autofocus: true,
      autoplay: true,
      checked: true,
      controls: true,
      default: true,
      defer: true,
      disabled: true,
      formnovalidate: true,
      hidden: true,
      ismap: true,
      itemscope: true,
      loop: true,
      multiple: true,
      muted: true,
      nomodule: true,
      novalidate: true,
      open: true,
      playsinline: true,
      readonly: true,
      required: true,
      reversed: true,
      selected: true
    });
    function isHTMLBooleanAttribute(name) {
      return hasOwn(HTML_BOOLEAN_ATTRIBUTES, name.toLowerCase());
    }
    var HTML_VOID_ELEMENTS = freeze2({
      area: true,
      base: true,
      br: true,
      col: true,
      embed: true,
      hr: true,
      img: true,
      input: true,
      link: true,
      meta: true,
      param: true,
      source: true,
      track: true,
      wbr: true
    });
    function isHTMLVoidElement(tagName) {
      return hasOwn(HTML_VOID_ELEMENTS, tagName.toLowerCase());
    }
    var HTML_RAW_TEXT_ELEMENTS = freeze2({
      script: false,
      style: false,
      textarea: true,
      title: true
    });
    function isHTMLRawTextElement(tagName) {
      var key = tagName.toLowerCase();
      return hasOwn(HTML_RAW_TEXT_ELEMENTS, key) && !HTML_RAW_TEXT_ELEMENTS[key];
    }
    function isHTMLEscapableRawTextElement(tagName) {
      var key = tagName.toLowerCase();
      return hasOwn(HTML_RAW_TEXT_ELEMENTS, key) && HTML_RAW_TEXT_ELEMENTS[key];
    }
    function isHTMLMimeType(mimeType) {
      return mimeType === MIME_TYPE.HTML;
    }
    function hasDefaultHTMLNamespace(mimeType) {
      return isHTMLMimeType(mimeType) || mimeType === MIME_TYPE.XML_XHTML_APPLICATION;
    }
    var MIME_TYPE = freeze2({
      /**
       * `text/html`, the only mime type that triggers treating an XML document as HTML.
       *
       * @see https://www.iana.org/assignments/media-types/text/html IANA MimeType registration
       * @see https://en.wikipedia.org/wiki/HTML Wikipedia
       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMParser/parseFromString MDN
       * @see https://html.spec.whatwg.org/multipage/dynamic-markup-insertion.html#dom-domparser-parsefromstring
       *      WHATWG HTML Spec
       */
      HTML: "text/html",
      /**
       * `application/xml`, the standard mime type for XML documents.
       *
       * @see https://www.iana.org/assignments/media-types/application/xml IANA MimeType
       *      registration
       * @see https://tools.ietf.org/html/rfc7303#section-9.1 RFC 7303
       * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
       */
      XML_APPLICATION: "application/xml",
      /**
       * `text/html`, an alias for `application/xml`.
       *
       * @see https://tools.ietf.org/html/rfc7303#section-9.2 RFC 7303
       * @see https://www.iana.org/assignments/media-types/text/xml IANA MimeType registration
       * @see https://en.wikipedia.org/wiki/XML_and_MIME Wikipedia
       */
      XML_TEXT: "text/xml",
      /**
       * `application/xhtml+xml`, indicates an XML document that has the default HTML namespace,
       * but is parsed as an XML document.
       *
       * @see https://www.iana.org/assignments/media-types/application/xhtml+xml IANA MimeType
       *      registration
       * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument WHATWG DOM Spec
       * @see https://en.wikipedia.org/wiki/XHTML Wikipedia
       */
      XML_XHTML_APPLICATION: "application/xhtml+xml",
      /**
       * `image/svg+xml`,
       *
       * @see https://www.iana.org/assignments/media-types/image/svg+xml IANA MimeType registration
       * @see https://www.w3.org/TR/SVG11/ W3C SVG 1.1
       * @see https://en.wikipedia.org/wiki/Scalable_Vector_Graphics Wikipedia
       */
      XML_SVG_IMAGE: "image/svg+xml"
    });
    var _MIME_TYPES = Object.keys(MIME_TYPE).map(function(key) {
      return MIME_TYPE[key];
    });
    function isValidMimeType(mimeType) {
      return _MIME_TYPES.indexOf(mimeType) > -1;
    }
    var NAMESPACE = freeze2({
      /**
       * The XHTML namespace.
       *
       * @see http://www.w3.org/1999/xhtml
       */
      HTML: "http://www.w3.org/1999/xhtml",
      /**
       * The SVG namespace.
       *
       * @see http://www.w3.org/2000/svg
       */
      SVG: "http://www.w3.org/2000/svg",
      /**
       * The `xml:` namespace.
       *
       * @see http://www.w3.org/XML/1998/namespace
       */
      XML: "http://www.w3.org/XML/1998/namespace",
      /**
       * The `xmlns:` namespace.
       *
       * @see https://www.w3.org/2000/xmlns/
       */
      XMLNS: "http://www.w3.org/2000/xmlns/"
    });
    exports.assign = assign;
    exports.find = find;
    exports.freeze = freeze2;
    exports.HTML_BOOLEAN_ATTRIBUTES = HTML_BOOLEAN_ATTRIBUTES;
    exports.HTML_RAW_TEXT_ELEMENTS = HTML_RAW_TEXT_ELEMENTS;
    exports.HTML_VOID_ELEMENTS = HTML_VOID_ELEMENTS;
    exports.hasDefaultHTMLNamespace = hasDefaultHTMLNamespace;
    exports.hasOwn = hasOwn;
    exports.isHTMLBooleanAttribute = isHTMLBooleanAttribute;
    exports.isHTMLRawTextElement = isHTMLRawTextElement;
    exports.isHTMLEscapableRawTextElement = isHTMLEscapableRawTextElement;
    exports.isHTMLMimeType = isHTMLMimeType;
    exports.isHTMLVoidElement = isHTMLVoidElement;
    exports.isValidMimeType = isValidMimeType;
    exports.MIME_TYPE = MIME_TYPE;
    exports.NAMESPACE = NAMESPACE;
  }
});

// ../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/errors.js
var require_errors = __commonJS({
  "../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/errors.js"(exports) {
    "use strict";
    init_esm();
    var conventions = require_conventions();
    function extendError(constructor, writableName) {
      constructor.prototype = Object.create(Error.prototype, {
        constructor: { value: constructor },
        name: { value: constructor.name, enumerable: true, writable: writableName }
      });
    }
    var DOMExceptionName = conventions.freeze({
      /**
       * the default value as defined by the spec
       */
      Error: "Error",
      /**
       * @deprecated
       * Use RangeError instead.
       */
      IndexSizeError: "IndexSizeError",
      /**
       * @deprecated
       * Just to match the related static code, not part of the spec.
       */
      DomstringSizeError: "DomstringSizeError",
      HierarchyRequestError: "HierarchyRequestError",
      WrongDocumentError: "WrongDocumentError",
      InvalidCharacterError: "InvalidCharacterError",
      /**
       * @deprecated
       * Just to match the related static code, not part of the spec.
       */
      NoDataAllowedError: "NoDataAllowedError",
      NoModificationAllowedError: "NoModificationAllowedError",
      NotFoundError: "NotFoundError",
      NotSupportedError: "NotSupportedError",
      InUseAttributeError: "InUseAttributeError",
      InvalidStateError: "InvalidStateError",
      SyntaxError: "SyntaxError",
      InvalidModificationError: "InvalidModificationError",
      NamespaceError: "NamespaceError",
      /**
       * @deprecated
       * Use TypeError for invalid arguments,
       * "NotSupportedError" DOMException for unsupported operations,
       * and "NotAllowedError" DOMException for denied requests instead.
       */
      InvalidAccessError: "InvalidAccessError",
      /**
       * @deprecated
       * Just to match the related static code, not part of the spec.
       */
      ValidationError: "ValidationError",
      /**
       * @deprecated
       * Use TypeError instead.
       */
      TypeMismatchError: "TypeMismatchError",
      SecurityError: "SecurityError",
      NetworkError: "NetworkError",
      AbortError: "AbortError",
      /**
       * @deprecated
       * Just to match the related static code, not part of the spec.
       */
      URLMismatchError: "URLMismatchError",
      QuotaExceededError: "QuotaExceededError",
      TimeoutError: "TimeoutError",
      InvalidNodeTypeError: "InvalidNodeTypeError",
      DataCloneError: "DataCloneError",
      EncodingError: "EncodingError",
      NotReadableError: "NotReadableError",
      UnknownError: "UnknownError",
      ConstraintError: "ConstraintError",
      DataError: "DataError",
      TransactionInactiveError: "TransactionInactiveError",
      ReadOnlyError: "ReadOnlyError",
      VersionError: "VersionError",
      OperationError: "OperationError",
      NotAllowedError: "NotAllowedError",
      OptOutError: "OptOutError"
    });
    var DOMExceptionNames = Object.keys(DOMExceptionName);
    function isValidDomExceptionCode(value) {
      return typeof value === "number" && value >= 1 && value <= 25;
    }
    function endsWithError(value) {
      return typeof value === "string" && value.substring(value.length - DOMExceptionName.Error.length) === DOMExceptionName.Error;
    }
    function DOMException(messageOrCode, nameOrMessage) {
      if (isValidDomExceptionCode(messageOrCode)) {
        this.name = DOMExceptionNames[messageOrCode];
        this.message = nameOrMessage || "";
      } else {
        this.message = messageOrCode;
        this.name = endsWithError(nameOrMessage) ? nameOrMessage : DOMExceptionName.Error;
      }
      if (Error.captureStackTrace) Error.captureStackTrace(this, DOMException);
    }
    extendError(DOMException, true);
    Object.defineProperties(DOMException.prototype, {
      code: {
        enumerable: true,
        get: function() {
          var code = DOMExceptionNames.indexOf(this.name);
          if (isValidDomExceptionCode(code)) return code;
          return 0;
        }
      }
    });
    var ExceptionCode = {
      INDEX_SIZE_ERR: 1,
      DOMSTRING_SIZE_ERR: 2,
      HIERARCHY_REQUEST_ERR: 3,
      WRONG_DOCUMENT_ERR: 4,
      INVALID_CHARACTER_ERR: 5,
      NO_DATA_ALLOWED_ERR: 6,
      NO_MODIFICATION_ALLOWED_ERR: 7,
      NOT_FOUND_ERR: 8,
      NOT_SUPPORTED_ERR: 9,
      INUSE_ATTRIBUTE_ERR: 10,
      INVALID_STATE_ERR: 11,
      SYNTAX_ERR: 12,
      INVALID_MODIFICATION_ERR: 13,
      NAMESPACE_ERR: 14,
      INVALID_ACCESS_ERR: 15,
      VALIDATION_ERR: 16,
      TYPE_MISMATCH_ERR: 17,
      SECURITY_ERR: 18,
      NETWORK_ERR: 19,
      ABORT_ERR: 20,
      URL_MISMATCH_ERR: 21,
      QUOTA_EXCEEDED_ERR: 22,
      TIMEOUT_ERR: 23,
      INVALID_NODE_TYPE_ERR: 24,
      DATA_CLONE_ERR: 25
    };
    var entries = Object.entries(ExceptionCode);
    for (i3 = 0; i3 < entries.length; i3++) {
      key = entries[i3][0];
      DOMException[key] = entries[i3][1];
    }
    var key;
    var i3;
    function ParseError(message, locator) {
      this.message = message;
      this.locator = locator;
      if (Error.captureStackTrace) Error.captureStackTrace(this, ParseError);
    }
    extendError(ParseError);
    exports.DOMException = DOMException;
    exports.DOMExceptionName = DOMExceptionName;
    exports.ExceptionCode = ExceptionCode;
    exports.ParseError = ParseError;
  }
});

// ../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/grammar.js
var require_grammar = __commonJS({
  "../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/grammar.js"(exports) {
    "use strict";
    init_esm();
    function detectUnicodeSupport(RegExpImpl) {
      try {
        if (typeof RegExpImpl !== "function") {
          RegExpImpl = RegExp;
        }
        var match = new RegExpImpl("𝌆", "u").exec("𝌆");
        return !!match && match[0].length === 2;
      } catch (error) {
      }
      return false;
    }
    var UNICODE_SUPPORT = detectUnicodeSupport();
    function chars(regexp) {
      if (regexp.source[0] !== "[") {
        throw new Error(regexp + " can not be used with chars");
      }
      return regexp.source.slice(1, regexp.source.lastIndexOf("]"));
    }
    function chars_without(regexp, search) {
      if (regexp.source[0] !== "[") {
        throw new Error("/" + regexp.source + "/ can not be used with chars_without");
      }
      if (!search || typeof search !== "string") {
        throw new Error(JSON.stringify(search) + " is not a valid search");
      }
      if (regexp.source.indexOf(search) === -1) {
        throw new Error('"' + search + '" is not is /' + regexp.source + "/");
      }
      if (search === "-" && regexp.source.indexOf(search) !== 1) {
        throw new Error('"' + search + '" is not at the first postion of /' + regexp.source + "/");
      }
      return new RegExp(regexp.source.replace(search, ""), UNICODE_SUPPORT ? "u" : "");
    }
    function reg(args) {
      var self = this;
      return new RegExp(
        Array.prototype.slice.call(arguments).map(function(part) {
          var isStr = typeof part === "string";
          if (isStr && self === void 0 && part === "|") {
            throw new Error("use regg instead of reg to wrap expressions with `|`!");
          }
          return isStr ? part : part.source;
        }).join(""),
        UNICODE_SUPPORT ? "mu" : "m"
      );
    }
    function regg(args) {
      if (arguments.length === 0) {
        throw new Error("no parameters provided");
      }
      return reg.apply(regg, ["(?:"].concat(Array.prototype.slice.call(arguments), [")"]));
    }
    var UNICODE_REPLACEMENT_CHARACTER = "�";
    var Char = /[-\x09\x0A\x0D\x20-\x2C\x2E-\uD7FF\uE000-\uFFFD]/;
    if (UNICODE_SUPPORT) {
      Char = reg("[", chars(Char), "\\u{10000}-\\u{10FFFF}", "]");
    }
    var _SChar = /[\x20\x09\x0D\x0A]/;
    var SChar_s = chars(_SChar);
    var S3 = reg(_SChar, "+");
    var S_OPT = reg(_SChar, "*");
    var NameStartChar = /[:_a-zA-Z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
    if (UNICODE_SUPPORT) {
      NameStartChar = reg("[", chars(NameStartChar), "\\u{10000}-\\u{10FFFF}", "]");
    }
    var NameStartChar_s = chars(NameStartChar);
    var NameChar = reg("[", NameStartChar_s, chars(/[-.0-9\xB7]/), chars(/[\u0300-\u036F\u203F-\u2040]/), "]");
    var Name = reg(NameStartChar, NameChar, "*");
    var Nmtoken = reg(NameChar, "+");
    var EntityRef = reg("&", Name, ";");
    var CharRef = regg(/&#[0-9]+;|&#x[0-9a-fA-F]+;/);
    var Reference = regg(EntityRef, "|", CharRef);
    var PEReference = reg("%", Name, ";");
    var EntityValue = regg(
      reg('"', regg(/[^%&"]/, "|", PEReference, "|", Reference), "*", '"'),
      "|",
      reg("'", regg(/[^%&']/, "|", PEReference, "|", Reference), "*", "'")
    );
    var AttValue = regg('"', regg(/[^<&"]/, "|", Reference), "*", '"', "|", "'", regg(/[^<&']/, "|", Reference), "*", "'");
    var NCNameStartChar = chars_without(NameStartChar, ":");
    var NCNameChar = chars_without(NameChar, ":");
    var NCName = reg(NCNameStartChar, NCNameChar, "*");
    var QName = reg(NCName, regg(":", NCName), "?");
    var QName_exact = reg("^", QName, "$");
    var QName_group = reg("(", QName, ")");
    var SystemLiteral = regg(/"[^"]*"|'[^']*'/);
    var PI = reg(/^<\?/, "(", Name, ")", regg(S3, "(", Char, "*?)"), "?", /\?>/);
    var PubidChar = /[\x20\x0D\x0Aa-zA-Z0-9-'()+,./:=?;!*#@$_%]/;
    var PubidLiteral = regg('"', PubidChar, '*"', "|", "'", chars_without(PubidChar, "'"), "*'");
    var COMMENT_START = "<!--";
    var COMMENT_END = "-->";
    var Comment = reg(COMMENT_START, regg(chars_without(Char, "-"), "|", reg("-", chars_without(Char, "-"))), "*", COMMENT_END);
    var PCDATA = "#PCDATA";
    var Mixed = regg(
      reg(/\(/, S_OPT, PCDATA, regg(S_OPT, /\|/, S_OPT, QName), "*", S_OPT, /\)\*/),
      "|",
      reg(/\(/, S_OPT, PCDATA, S_OPT, /\)/)
    );
    var _children_quantity = /[?*+]?/;
    var children2 = reg(
      /\([^>]+\)/,
      _children_quantity
      /*regg(choice, '|', seq), _children_quantity*/
    );
    var contentspec = regg("EMPTY", "|", "ANY", "|", Mixed, "|", children2);
    var ELEMENTDECL_START = "<!ELEMENT";
    var elementdecl = reg(ELEMENTDECL_START, S3, regg(QName, "|", PEReference), S3, regg(contentspec, "|", PEReference), S_OPT, ">");
    var NotationType = reg("NOTATION", S3, /\(/, S_OPT, Name, regg(S_OPT, /\|/, S_OPT, Name), "*", S_OPT, /\)/);
    var Enumeration = reg(/\(/, S_OPT, Nmtoken, regg(S_OPT, /\|/, S_OPT, Nmtoken), "*", S_OPT, /\)/);
    var EnumeratedType = regg(NotationType, "|", Enumeration);
    var AttType = regg(/CDATA|ID|IDREF|IDREFS|ENTITY|ENTITIES|NMTOKEN|NMTOKENS/, "|", EnumeratedType);
    var DefaultDecl = regg(/#REQUIRED|#IMPLIED/, "|", regg(regg("#FIXED", S3), "?", AttValue));
    var AttDef = regg(S3, Name, S3, AttType, S3, DefaultDecl);
    var ATTLIST_DECL_START = "<!ATTLIST";
    var AttlistDecl = reg(ATTLIST_DECL_START, S3, Name, AttDef, "*", S_OPT, ">");
    var SYSTEM = "SYSTEM";
    var PUBLIC = "PUBLIC";
    var ExternalID = regg(regg(SYSTEM, S3, SystemLiteral), "|", regg(PUBLIC, S3, PubidLiteral, S3, SystemLiteral));
    var ExternalID_match = reg(
      "^",
      regg(
        regg(SYSTEM, S3, "(?<SystemLiteralOnly>", SystemLiteral, ")"),
        "|",
        regg(PUBLIC, S3, "(?<PubidLiteral>", PubidLiteral, ")", S3, "(?<SystemLiteral>", SystemLiteral, ")")
      )
    );
    var NDataDecl = regg(S3, "NDATA", S3, Name);
    var EntityDef = regg(EntityValue, "|", regg(ExternalID, NDataDecl, "?"));
    var ENTITY_DECL_START = "<!ENTITY";
    var GEDecl = reg(ENTITY_DECL_START, S3, Name, S3, EntityDef, S_OPT, ">");
    var PEDef = regg(EntityValue, "|", ExternalID);
    var PEDecl = reg(ENTITY_DECL_START, S3, "%", S3, Name, S3, PEDef, S_OPT, ">");
    var EntityDecl = regg(GEDecl, "|", PEDecl);
    var PublicID = reg(PUBLIC, S3, PubidLiteral);
    var NotationDecl = reg("<!NOTATION", S3, Name, S3, regg(ExternalID, "|", PublicID), S_OPT, ">");
    var Eq = reg(S_OPT, "=", S_OPT);
    var VersionNum = /1[.]\d+/;
    var VersionInfo = reg(S3, "version", Eq, regg("'", VersionNum, "'", "|", '"', VersionNum, '"'));
    var EncName = /[A-Za-z][-A-Za-z0-9._]*/;
    var EncodingDecl = regg(S3, "encoding", Eq, regg('"', EncName, '"', "|", "'", EncName, "'"));
    var SDDecl = regg(S3, "standalone", Eq, regg("'", regg("yes", "|", "no"), "'", "|", '"', regg("yes", "|", "no"), '"'));
    var XMLDecl = reg(/^<\?xml/, VersionInfo, EncodingDecl, "?", SDDecl, "?", S_OPT, /\?>/);
    var DOCTYPE_DECL_START = "<!DOCTYPE";
    var CDATA_START = "<![CDATA[";
    var CDATA_END = "]]>";
    var CDStart = /<!\[CDATA\[/;
    var CDEnd = /\]\]>/;
    var CData = reg(Char, "*?", CDEnd);
    var CDSect = reg(CDStart, CData);
    exports.chars = chars;
    exports.chars_without = chars_without;
    exports.detectUnicodeSupport = detectUnicodeSupport;
    exports.reg = reg;
    exports.regg = regg;
    exports.AttlistDecl = AttlistDecl;
    exports.CDATA_START = CDATA_START;
    exports.CDATA_END = CDATA_END;
    exports.CDSect = CDSect;
    exports.Char = Char;
    exports.Comment = Comment;
    exports.COMMENT_START = COMMENT_START;
    exports.COMMENT_END = COMMENT_END;
    exports.DOCTYPE_DECL_START = DOCTYPE_DECL_START;
    exports.elementdecl = elementdecl;
    exports.EntityDecl = EntityDecl;
    exports.EntityValue = EntityValue;
    exports.ExternalID = ExternalID;
    exports.ExternalID_match = ExternalID_match;
    exports.Name = Name;
    exports.NotationDecl = NotationDecl;
    exports.Reference = Reference;
    exports.PEReference = PEReference;
    exports.PI = PI;
    exports.PUBLIC = PUBLIC;
    exports.PubidLiteral = PubidLiteral;
    exports.QName = QName;
    exports.QName_exact = QName_exact;
    exports.QName_group = QName_group;
    exports.S = S3;
    exports.SChar_s = SChar_s;
    exports.S_OPT = S_OPT;
    exports.SYSTEM = SYSTEM;
    exports.SystemLiteral = SystemLiteral;
    exports.UNICODE_REPLACEMENT_CHARACTER = UNICODE_REPLACEMENT_CHARACTER;
    exports.UNICODE_SUPPORT = UNICODE_SUPPORT;
    exports.XMLDecl = XMLDecl;
  }
});

// ../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/dom.js
var require_dom = __commonJS({
  "../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/dom.js"(exports) {
    "use strict";
    init_esm();
    var conventions = require_conventions();
    var find = conventions.find;
    var hasDefaultHTMLNamespace = conventions.hasDefaultHTMLNamespace;
    var hasOwn = conventions.hasOwn;
    var isHTMLMimeType = conventions.isHTMLMimeType;
    var isHTMLRawTextElement = conventions.isHTMLRawTextElement;
    var isHTMLVoidElement = conventions.isHTMLVoidElement;
    var MIME_TYPE = conventions.MIME_TYPE;
    var NAMESPACE = conventions.NAMESPACE;
    var PDC = Symbol();
    var errors = require_errors();
    var DOMException = errors.DOMException;
    var DOMExceptionName = errors.DOMExceptionName;
    var g2 = require_grammar();
    function checkSymbol(symbol) {
      if (symbol !== PDC) {
        throw new TypeError("Illegal constructor");
      }
    }
    function notEmptyString(input) {
      return input !== "";
    }
    function splitOnASCIIWhitespace(input) {
      return input ? input.split(/[\t\n\f\r ]+/).filter(notEmptyString) : [];
    }
    function orderedSetReducer(current, element) {
      if (!hasOwn(current, element)) {
        current[element] = true;
      }
      return current;
    }
    function toOrderedSet(input) {
      if (!input) return [];
      var list = splitOnASCIIWhitespace(input);
      return Object.keys(list.reduce(orderedSetReducer, {}));
    }
    function arrayIncludes(list) {
      return function(element) {
        return list && list.indexOf(element) !== -1;
      };
    }
    function validateQualifiedName(qualifiedName) {
      if (!g2.QName_exact.test(qualifiedName)) {
        throw new DOMException(DOMException.INVALID_CHARACTER_ERR, 'invalid character in qualified name "' + qualifiedName + '"');
      }
    }
    function validateAndExtract(namespace, qualifiedName) {
      validateQualifiedName(qualifiedName);
      namespace = namespace || null;
      var prefix = null;
      var localName = qualifiedName;
      if (qualifiedName.indexOf(":") >= 0) {
        var splitResult = qualifiedName.split(":");
        prefix = splitResult[0];
        localName = splitResult[1];
      }
      if (prefix !== null && namespace === null) {
        throw new DOMException(DOMException.NAMESPACE_ERR, "prefix is non-null and namespace is null");
      }
      if (prefix === "xml" && namespace !== conventions.NAMESPACE.XML) {
        throw new DOMException(DOMException.NAMESPACE_ERR, 'prefix is "xml" and namespace is not the XML namespace');
      }
      if ((prefix === "xmlns" || qualifiedName === "xmlns") && namespace !== conventions.NAMESPACE.XMLNS) {
        throw new DOMException(
          DOMException.NAMESPACE_ERR,
          'either qualifiedName or prefix is "xmlns" and namespace is not the XMLNS namespace'
        );
      }
      if (namespace === conventions.NAMESPACE.XMLNS && prefix !== "xmlns" && qualifiedName !== "xmlns") {
        throw new DOMException(
          DOMException.NAMESPACE_ERR,
          'namespace is the XMLNS namespace and neither qualifiedName nor prefix is "xmlns"'
        );
      }
      return [namespace, prefix, localName];
    }
    function copy(src, dest) {
      for (var p3 in src) {
        if (hasOwn(src, p3)) {
          dest[p3] = src[p3];
        }
      }
    }
    function _extends(Class, Super) {
      var pt2 = Class.prototype;
      if (!(pt2 instanceof Super)) {
        let t3 = function() {
        };
        t3.prototype = Super.prototype;
        t3 = new t3();
        copy(pt2, t3);
        Class.prototype = pt2 = t3;
      }
      if (pt2.constructor != Class) {
        if (typeof Class != "function") {
          console.error("unknown Class:" + Class);
        }
        pt2.constructor = Class;
      }
    }
    var NodeType = {};
    var ELEMENT_NODE = NodeType.ELEMENT_NODE = 1;
    var ATTRIBUTE_NODE = NodeType.ATTRIBUTE_NODE = 2;
    var TEXT_NODE = NodeType.TEXT_NODE = 3;
    var CDATA_SECTION_NODE = NodeType.CDATA_SECTION_NODE = 4;
    var ENTITY_REFERENCE_NODE = NodeType.ENTITY_REFERENCE_NODE = 5;
    var ENTITY_NODE = NodeType.ENTITY_NODE = 6;
    var PROCESSING_INSTRUCTION_NODE = NodeType.PROCESSING_INSTRUCTION_NODE = 7;
    var COMMENT_NODE = NodeType.COMMENT_NODE = 8;
    var DOCUMENT_NODE = NodeType.DOCUMENT_NODE = 9;
    var DOCUMENT_TYPE_NODE = NodeType.DOCUMENT_TYPE_NODE = 10;
    var DOCUMENT_FRAGMENT_NODE = NodeType.DOCUMENT_FRAGMENT_NODE = 11;
    var NOTATION_NODE = NodeType.NOTATION_NODE = 12;
    var DocumentPosition = conventions.freeze({
      DOCUMENT_POSITION_DISCONNECTED: 1,
      DOCUMENT_POSITION_PRECEDING: 2,
      DOCUMENT_POSITION_FOLLOWING: 4,
      DOCUMENT_POSITION_CONTAINS: 8,
      DOCUMENT_POSITION_CONTAINED_BY: 16,
      DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC: 32
    });
    function parentChain(node) {
      var chain = [];
      while (node.parentNode || node.ownerElement) {
        node = node.parentNode || node.ownerElement;
        chain.unshift(node);
      }
      return chain;
    }
    function commonAncestor(a2, b3) {
      if (b3.length < a2.length) return commonAncestor(b3, a2);
      var c3 = null;
      for (var n3 in a2) {
        if (a2[n3] !== b3[n3]) return c3;
        c3 = a2[n3];
      }
      return c3;
    }
    function docGUID(doc) {
      if (!doc.guid) doc.guid = Math.random();
      return doc.guid;
    }
    function NodeList() {
    }
    NodeList.prototype = {
      /**
       * The number of nodes in the list. The range of valid child node indices is 0 to length-1
       * inclusive.
       *
       * @type {number}
       */
      length: 0,
      /**
       * Returns the item at `index`. If index is greater than or equal to the number of nodes in
       * the list, this returns null.
       *
       * @param index
       * Unsigned long Index into the collection.
       * @returns {Node | null}
       * The node at position `index` in the NodeList,
       * or null if that is not a valid index.
       */
      item: function(index) {
        return index >= 0 && index < this.length ? this[index] : null;
      },
      /**
       * Returns a string representation of the NodeList.
       *
       * @param {unknown} nodeFilter
       * __A filter function? Not implemented according to the spec?__.
       * @returns {string}
       * A string representation of the NodeList.
       */
      toString: function(nodeFilter) {
        for (var buf = [], i3 = 0; i3 < this.length; i3++) {
          serializeToString(this[i3], buf, nodeFilter);
        }
        return buf.join("");
      },
      /**
       * Filters the NodeList based on a predicate.
       *
       * @param {function(Node): boolean} predicate
       * - A predicate function to filter the NodeList.
       * @returns {Node[]}
       * An array of nodes that satisfy the predicate.
       * @private
       */
      filter: function(predicate) {
        return Array.prototype.filter.call(this, predicate);
      },
      /**
       * Returns the first index at which a given node can be found in the NodeList, or -1 if it is
       * not present.
       *
       * @param {Node} item
       * - The Node item to locate in the NodeList.
       * @returns {number}
       * The first index of the node in the NodeList; -1 if not found.
       * @private
       */
      indexOf: function(item) {
        return Array.prototype.indexOf.call(this, item);
      }
    };
    NodeList.prototype[Symbol.iterator] = function() {
      var me2 = this;
      var index = 0;
      return {
        next: function() {
          if (index < me2.length) {
            return {
              value: me2[index++],
              done: false
            };
          } else {
            return {
              done: true
            };
          }
        },
        return: function() {
          return {
            done: true
          };
        }
      };
    };
    function LiveNodeList(node, refresh) {
      this._node = node;
      this._refresh = refresh;
      _updateLiveList(this);
    }
    function _updateLiveList(list) {
      var inc = list._node._inc || list._node.ownerDocument._inc;
      if (list._inc !== inc) {
        var ls = list._refresh(list._node);
        __set__(list, "length", ls.length);
        if (!list.$$length || ls.length < list.$$length) {
          for (var i3 = ls.length; i3 in list; i3++) {
            if (hasOwn(list, i3)) {
              delete list[i3];
            }
          }
        }
        copy(ls, list);
        list._inc = inc;
      }
    }
    LiveNodeList.prototype.item = function(i3) {
      _updateLiveList(this);
      return this[i3] || null;
    };
    _extends(LiveNodeList, NodeList);
    function NamedNodeMap() {
    }
    function _findNodeIndex(list, node) {
      var i3 = 0;
      while (i3 < list.length) {
        if (list[i3] === node) {
          return i3;
        }
        i3++;
      }
    }
    function _addNamedNode(el, list, newAttr, oldAttr) {
      if (oldAttr) {
        list[_findNodeIndex(list, oldAttr)] = newAttr;
      } else {
        list[list.length] = newAttr;
        list.length++;
      }
      if (el) {
        newAttr.ownerElement = el;
        var doc = el.ownerDocument;
        if (doc) {
          oldAttr && _onRemoveAttribute(doc, el, oldAttr);
          _onAddAttribute(doc, el, newAttr);
        }
      }
    }
    function _removeNamedNode(el, list, attr) {
      var i3 = _findNodeIndex(list, attr);
      if (i3 >= 0) {
        var lastIndex = list.length - 1;
        while (i3 <= lastIndex) {
          list[i3] = list[++i3];
        }
        list.length = lastIndex;
        if (el) {
          var doc = el.ownerDocument;
          if (doc) {
            _onRemoveAttribute(doc, el, attr);
          }
          attr.ownerElement = null;
        }
      }
    }
    NamedNodeMap.prototype = {
      length: 0,
      item: NodeList.prototype.item,
      /**
       * Get an attribute by name. Note: Name is in lower case in case of HTML namespace and
       * document.
       *
       * @param {string} localName
       * The local name of the attribute.
       * @returns {Attr | null}
       * The attribute with the given local name, or null if no such attribute exists.
       * @see https://dom.spec.whatwg.org/#concept-element-attributes-get-by-name
       */
      getNamedItem: function(localName) {
        if (this._ownerElement && this._ownerElement._isInHTMLDocumentAndNamespace()) {
          localName = localName.toLowerCase();
        }
        var i3 = 0;
        while (i3 < this.length) {
          var attr = this[i3];
          if (attr.nodeName === localName) {
            return attr;
          }
          i3++;
        }
        return null;
      },
      /**
       * Set an attribute.
       *
       * @param {Attr} attr
       * The attribute to set.
       * @returns {Attr | null}
       * The old attribute with the same local name and namespace URI as the new one, or null if no
       * such attribute exists.
       * @throws {DOMException}
       * With code:
       * - {@link INUSE_ATTRIBUTE_ERR} - If the attribute is already an attribute of another
       * element.
       * @see https://dom.spec.whatwg.org/#concept-element-attributes-set
       */
      setNamedItem: function(attr) {
        var el = attr.ownerElement;
        if (el && el !== this._ownerElement) {
          throw new DOMException(DOMException.INUSE_ATTRIBUTE_ERR);
        }
        var oldAttr = this.getNamedItemNS(attr.namespaceURI, attr.localName);
        if (oldAttr === attr) {
          return attr;
        }
        _addNamedNode(this._ownerElement, this, attr, oldAttr);
        return oldAttr;
      },
      /**
       * Set an attribute, replacing an existing attribute with the same local name and namespace
       * URI if one exists.
       *
       * @param {Attr} attr
       * The attribute to set.
       * @returns {Attr | null}
       * The old attribute with the same local name and namespace URI as the new one, or null if no
       * such attribute exists.
       * @throws {DOMException}
       * Throws a DOMException with the name "InUseAttributeError" if the attribute is already an
       * attribute of another element.
       * @see https://dom.spec.whatwg.org/#concept-element-attributes-set
       */
      setNamedItemNS: function(attr) {
        return this.setNamedItem(attr);
      },
      /**
       * Removes an attribute specified by the local name.
       *
       * @param {string} localName
       * The local name of the attribute to be removed.
       * @returns {Attr}
       * The attribute node that was removed.
       * @throws {DOMException}
       * With code:
       * - {@link DOMException.NOT_FOUND_ERR} if no attribute with the given name is found.
       * @see https://dom.spec.whatwg.org/#dom-namednodemap-removenameditem
       * @see https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-name
       */
      removeNamedItem: function(localName) {
        var attr = this.getNamedItem(localName);
        if (!attr) {
          throw new DOMException(DOMException.NOT_FOUND_ERR, localName);
        }
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
      },
      /**
       * Removes an attribute specified by the namespace and local name.
       *
       * @param {string | null} namespaceURI
       * The namespace URI of the attribute to be removed.
       * @param {string} localName
       * The local name of the attribute to be removed.
       * @returns {Attr}
       * The attribute node that was removed.
       * @throws {DOMException}
       * With code:
       * - {@link DOMException.NOT_FOUND_ERR} if no attribute with the given namespace URI and local
       * name is found.
       * @see https://dom.spec.whatwg.org/#dom-namednodemap-removenameditemns
       * @see https://dom.spec.whatwg.org/#concept-element-attributes-remove-by-namespace
       */
      removeNamedItemNS: function(namespaceURI, localName) {
        var attr = this.getNamedItemNS(namespaceURI, localName);
        if (!attr) {
          throw new DOMException(DOMException.NOT_FOUND_ERR, namespaceURI ? namespaceURI + " : " + localName : localName);
        }
        _removeNamedNode(this._ownerElement, this, attr);
        return attr;
      },
      /**
       * Get an attribute by namespace and local name.
       *
       * @param {string | null} namespaceURI
       * The namespace URI of the attribute.
       * @param {string} localName
       * The local name of the attribute.
       * @returns {Attr | null}
       * The attribute with the given namespace URI and local name, or null if no such attribute
       * exists.
       * @see https://dom.spec.whatwg.org/#concept-element-attributes-get-by-namespace
       */
      getNamedItemNS: function(namespaceURI, localName) {
        if (!namespaceURI) {
          namespaceURI = null;
        }
        var i3 = 0;
        while (i3 < this.length) {
          var node = this[i3];
          if (node.localName === localName && node.namespaceURI === namespaceURI) {
            return node;
          }
          i3++;
        }
        return null;
      }
    };
    NamedNodeMap.prototype[Symbol.iterator] = function() {
      var me2 = this;
      var index = 0;
      return {
        next: function() {
          if (index < me2.length) {
            return {
              value: me2[index++],
              done: false
            };
          } else {
            return {
              done: true
            };
          }
        },
        return: function() {
          return {
            done: true
          };
        }
      };
    };
    function DOMImplementation() {
    }
    DOMImplementation.prototype = {
      /**
       * Test if the DOM implementation implements a specific feature and version, as specified in
       * {@link https://www.w3.org/TR/DOM-Level-3-Core/core.html#DOMFeatures DOM Features}.
       *
       * The DOMImplementation.hasFeature() method returns a Boolean flag indicating if a given
       * feature is supported. The different implementations fairly diverged in what kind of
       * features were reported. The latest version of the spec settled to force this method to
       * always return true, where the functionality was accurate and in use.
       *
       * @deprecated
       * It is deprecated and modern browsers return true in all cases.
       * @function DOMImplementation#hasFeature
       * @param {string} feature
       * The name of the feature to test.
       * @param {string} [version]
       * This is the version number of the feature to test.
       * @returns {boolean}
       * Always returns true.
       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/hasFeature MDN
       * @see https://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#ID-5CED94D7 DOM Level 1 Core
       * @see https://dom.spec.whatwg.org/#dom-domimplementation-hasfeature DOM Living Standard
       * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-5CED94D7 DOM Level 3 Core
       */
      hasFeature: function(feature, version) {
        return true;
      },
      /**
       * Creates a DOM Document object of the specified type with its document element. Note that
       * based on the {@link DocumentType}
       * given to create the document, the implementation may instantiate specialized
       * {@link Document} objects that support additional features than the "Core", such as "HTML"
       * {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#DOM2HTML DOM Level 2 HTML}.
       * On the other hand, setting the {@link DocumentType} after the document was created makes
       * this very unlikely to happen. Alternatively, specialized {@link Document} creation methods,
       * such as createHTMLDocument
       * {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#DOM2HTML DOM Level 2 HTML},
       * can be used to obtain specific types of {@link Document} objects.
       *
       * __It behaves slightly different from the description in the living standard__:
       * - There is no interface/class `XMLDocument`, it returns a `Document`
       * instance (with it's `type` set to `'xml'`).
       * - `encoding`, `mode`, `origin`, `url` fields are currently not declared.
       *
       * @function DOMImplementation.createDocument
       * @param {string | null} namespaceURI
       * The
       * {@link https://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-namespaceURI namespace URI}
       * of the document element to create or null.
       * @param {string | null} qualifiedName
       * The
       * {@link https://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-qualifiedname qualified name}
       * of the document element to be created or null.
       * @param {DocumentType | null} [doctype=null]
       * The type of document to be created or null. When doctype is not null, its
       * {@link Node#ownerDocument} attribute is set to the document being created. Default is
       * `null`
       * @returns {Document}
       * A new {@link Document} object with its document element. If the NamespaceURI,
       * qualifiedName, and doctype are null, the returned {@link Document} is empty with no
       * document element.
       * @throws {DOMException}
       * With code:
       *
       * - `INVALID_CHARACTER_ERR`: Raised if the specified qualified name is not an XML name
       * according to {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#XML XML 1.0}.
       * - `NAMESPACE_ERR`: Raised if the qualifiedName is malformed, if the qualifiedName has a
       * prefix and the namespaceURI is null, or if the qualifiedName is null and the namespaceURI
       * is different from null, or if the qualifiedName has a prefix that is "xml" and the
       * namespaceURI is different from "{@link http://www.w3.org/XML/1998/namespace}"
       * {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#Namespaces XML Namespaces},
       * or if the DOM implementation does not support the "XML" feature but a non-null namespace
       * URI was provided, since namespaces were defined by XML.
       * - `WRONG_DOCUMENT_ERR`: Raised if doctype has already been used with a different document
       * or was created from a different implementation.
       * - `NOT_SUPPORTED_ERR`: May be raised if the implementation does not support the feature
       * "XML" and the language exposed through the Document does not support XML Namespaces (such
       * as {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#HTML40 HTML 4.01}).
       * @since DOM Level 2.
       * @see {@link #createHTMLDocument}
       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocument MDN
       * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocument DOM Living Standard
       * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-2-Core-DOM-createDocument DOM
       *      Level 3 Core
       * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocument DOM
       *      Level 2 Core (initial)
       */
      createDocument: function(namespaceURI, qualifiedName, doctype) {
        var contentType = MIME_TYPE.XML_APPLICATION;
        if (namespaceURI === NAMESPACE.HTML) {
          contentType = MIME_TYPE.XML_XHTML_APPLICATION;
        } else if (namespaceURI === NAMESPACE.SVG) {
          contentType = MIME_TYPE.XML_SVG_IMAGE;
        }
        var doc = new Document(PDC, { contentType });
        doc.implementation = this;
        doc.childNodes = new NodeList();
        doc.doctype = doctype || null;
        if (doctype) {
          doc.appendChild(doctype);
        }
        if (qualifiedName) {
          var root = doc.createElementNS(namespaceURI, qualifiedName);
          doc.appendChild(root);
        }
        return doc;
      },
      /**
       * Creates an empty DocumentType node. Entity declarations and notations are not made
       * available. Entity reference expansions and default attribute additions do not occur.
       *
       * **This behavior is slightly different from the one in the specs**:
       * - `encoding`, `mode`, `origin`, `url` fields are currently not declared.
       * - `publicId` and `systemId` contain the raw data including any possible quotes,
       *   so they can always be serialized back to the original value
       * - `internalSubset` contains the raw string between `[` and `]` if present,
       *   but is not parsed or validated in any form.
       *
       * @function DOMImplementation#createDocumentType
       * @param {string} qualifiedName
       * The {@link https://www.w3.org/TR/DOM-Level-3-Core/glossary.html#dt-qualifiedname qualified
       * name} of the document type to be created.
       * @param {string} [publicId]
       * The external subset public identifier.
       * @param {string} [systemId]
       * The external subset system identifier.
       * @param {string} [internalSubset]
       * the internal subset or an empty string if it is not present
       * @returns {DocumentType}
       * A new {@link DocumentType} node with {@link Node#ownerDocument} set to null.
       * @throws {DOMException}
       * With code:
       *
       * - `INVALID_CHARACTER_ERR`: Raised if the specified qualified name is not an XML name
       * according to {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#XML XML 1.0}.
       * - `NAMESPACE_ERR`: Raised if the qualifiedName is malformed.
       * - `NOT_SUPPORTED_ERR`: May be raised if the implementation does not support the feature
       * "XML" and the language exposed through the Document does not support XML Namespaces (such
       * as {@link https://www.w3.org/TR/DOM-Level-3-Core/references.html#HTML40 HTML 4.01}).
       * @since DOM Level 2.
       * @see https://developer.mozilla.org/en-US/docs/Web/API/DOMImplementation/createDocumentType
       *      MDN
       * @see https://dom.spec.whatwg.org/#dom-domimplementation-createdocumenttype DOM Living
       *      Standard
       * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Level-3-Core-DOM-createDocType DOM
       *      Level 3 Core
       * @see https://www.w3.org/TR/DOM-Level-2-Core/core.html#Level-2-Core-DOM-createDocType DOM
       *      Level 2 Core
       * @see https://github.com/xmldom/xmldom/blob/master/CHANGELOG.md#050
       * @see https://www.w3.org/TR/DOM-Level-2-Core/#core-ID-Core-DocType-internalSubset
       * @prettierignore
       */
      createDocumentType: function(qualifiedName, publicId, systemId, internalSubset) {
        validateQualifiedName(qualifiedName);
        var node = new DocumentType(PDC);
        node.name = qualifiedName;
        node.nodeName = qualifiedName;
        node.publicId = publicId || "";
        node.systemId = systemId || "";
        node.internalSubset = internalSubset || "";
        node.childNodes = new NodeList();
        return node;
      },
      /**
       * Returns an HTML document, that might already have a basic DOM structure.
       *
       * __It behaves slightly different from the description in the living standard__:
       * - If the first argument is `false` no initial nodes are added (steps 3-7 in the specs are
       * omitted)
       * - `encoding`, `mode`, `origin`, `url` fields are currently not declared.
       *
       * @param {string | false} [title]
       * A string containing the title to give the new HTML document.
       * @returns {Document}
       * The HTML document.
       * @since WHATWG Living Standard.
       * @see {@link #createDocument}
       * @see https://dom.spec.whatwg.org/#dom-domimplementation-createhtmldocument
       * @see https://dom.spec.whatwg.org/#html-document
       */
      createHTMLDocument: function(title) {
        var doc = new Document(PDC, { contentType: MIME_TYPE.HTML });
        doc.implementation = this;
        doc.childNodes = new NodeList();
        if (title !== false) {
          doc.doctype = this.createDocumentType("html");
          doc.doctype.ownerDocument = doc;
          doc.appendChild(doc.doctype);
          var htmlNode = doc.createElement("html");
          doc.appendChild(htmlNode);
          var headNode = doc.createElement("head");
          htmlNode.appendChild(headNode);
          if (typeof title === "string") {
            var titleNode = doc.createElement("title");
            titleNode.appendChild(doc.createTextNode(title));
            headNode.appendChild(titleNode);
          }
          htmlNode.appendChild(doc.createElement("body"));
        }
        return doc;
      }
    };
    function Node(symbol) {
      checkSymbol(symbol);
    }
    Node.prototype = {
      /**
       * The first child of this node.
       *
       * @type {Node | null}
       */
      firstChild: null,
      /**
       * The last child of this node.
       *
       * @type {Node | null}
       */
      lastChild: null,
      /**
       * The previous sibling of this node.
       *
       * @type {Node | null}
       */
      previousSibling: null,
      /**
       * The next sibling of this node.
       *
       * @type {Node | null}
       */
      nextSibling: null,
      /**
       * The parent node of this node.
       *
       * @type {Node | null}
       */
      parentNode: null,
      /**
       * The parent element of this node.
       *
       * @type {Element | null}
       */
      get parentElement() {
        return this.parentNode && this.parentNode.nodeType === this.ELEMENT_NODE ? this.parentNode : null;
      },
      /**
       * The child nodes of this node.
       *
       * @type {NodeList}
       */
      childNodes: null,
      /**
       * The document object associated with this node.
       *
       * @type {Document | null}
       */
      ownerDocument: null,
      /**
       * The value of this node.
       *
       * @type {string | null}
       */
      nodeValue: null,
      /**
       * The namespace URI of this node.
       *
       * @type {string | null}
       */
      namespaceURI: null,
      /**
       * The prefix of the namespace for this node.
       *
       * @type {string | null}
       */
      prefix: null,
      /**
       * The local part of the qualified name of this node.
       *
       * @type {string | null}
       */
      localName: null,
      /**
       * The baseURI is currently always `about:blank`,
       * since that's what happens when you create a document from scratch.
       *
       * @type {'about:blank'}
       */
      baseURI: "about:blank",
      /**
       * Is true if this node is part of a document.
       *
       * @type {boolean}
       */
      get isConnected() {
        var rootNode = this.getRootNode();
        return rootNode && rootNode.nodeType === rootNode.DOCUMENT_NODE;
      },
      /**
       * Checks whether `other` is an inclusive descendant of this node.
       *
       * @param {Node | null | undefined} other
       * The node to check.
       * @returns {boolean}
       * True if `other` is an inclusive descendant of this node; false otherwise.
       * @see https://dom.spec.whatwg.org/#dom-node-contains
       */
      contains: function(other) {
        if (!other) return false;
        var parent = other;
        do {
          if (this === parent) return true;
          parent = other.parentNode;
        } while (parent);
        return false;
      },
      /**
       * @typedef GetRootNodeOptions
       * @property {boolean} [composed=false]
       */
      /**
       * Searches for the root node of this node.
       *
       * **This behavior is slightly different from the in the specs**:
       * - ignores `options.composed`, since `ShadowRoot`s are unsupported, always returns root.
       *
       * @param {GetRootNodeOptions} [options]
       * @returns {Node}
       * Root node.
       * @see https://dom.spec.whatwg.org/#dom-node-getrootnode
       * @see https://dom.spec.whatwg.org/#concept-shadow-including-root
       */
      getRootNode: function(options) {
        var parent = this;
        do {
          if (!parent.parentNode) {
            return parent;
          }
          parent = parent.parentNode;
        } while (parent);
      },
      /**
       * Checks whether the given node is equal to this node.
       *
       * @param {Node} [otherNode]
       * @see https://dom.spec.whatwg.org/#concept-node-equals
       */
      isEqualNode: function(otherNode) {
        if (!otherNode) return false;
        if (this.nodeType !== otherNode.nodeType) return false;
        switch (this.nodeType) {
          case this.DOCUMENT_TYPE_NODE:
            if (this.name !== otherNode.name) return false;
            if (this.publicId !== otherNode.publicId) return false;
            if (this.systemId !== otherNode.systemId) return false;
            break;
          case this.ELEMENT_NODE:
            if (this.namespaceURI !== otherNode.namespaceURI) return false;
            if (this.prefix !== otherNode.prefix) return false;
            if (this.localName !== otherNode.localName) return false;
            if (this.attributes.length !== otherNode.attributes.length) return false;
            for (var i3 = 0; i3 < this.attributes.length; i3++) {
              var attr = this.attributes.item(i3);
              if (!attr.isEqualNode(otherNode.getAttributeNodeNS(attr.namespaceURI, attr.localName))) {
                return false;
              }
            }
            break;
          case this.ATTRIBUTE_NODE:
            if (this.namespaceURI !== otherNode.namespaceURI) return false;
            if (this.localName !== otherNode.localName) return false;
            if (this.value !== otherNode.value) return false;
            break;
          case this.PROCESSING_INSTRUCTION_NODE:
            if (this.target !== otherNode.target || this.data !== otherNode.data) {
              return false;
            }
            break;
          case this.TEXT_NODE:
          case this.COMMENT_NODE:
            if (this.data !== otherNode.data) return false;
            break;
        }
        if (this.childNodes.length !== otherNode.childNodes.length) {
          return false;
        }
        for (var i3 = 0; i3 < this.childNodes.length; i3++) {
          if (!this.childNodes[i3].isEqualNode(otherNode.childNodes[i3])) {
            return false;
          }
        }
        return true;
      },
      /**
       * Checks whether or not the given node is this node.
       *
       * @param {Node} [otherNode]
       */
      isSameNode: function(otherNode) {
        return this === otherNode;
      },
      /**
       * Inserts a node before a reference node as a child of this node.
       *
       * @param {Node} newChild
       * The new child node to be inserted.
       * @param {Node | null} refChild
       * The reference node before which newChild will be inserted.
       * @returns {Node}
       * The new child node successfully inserted.
       * @throws {DOMException}
       * Throws a DOMException if inserting the node would result in a DOM tree that is not
       * well-formed, or if `child` is provided but is not a child of `parent`.
       * See {@link _insertBefore} for more details.
       * @since Modified in DOM L2
       */
      insertBefore: function(newChild, refChild) {
        return _insertBefore(this, newChild, refChild);
      },
      /**
       * Replaces an old child node with a new child node within this node.
       *
       * @param {Node} newChild
       * The new node that is to replace the old node.
       * If it already exists in the DOM, it is removed from its original position.
       * @param {Node} oldChild
       * The existing child node to be replaced.
       * @returns {Node}
       * Returns the replaced child node.
       * @throws {DOMException}
       * Throws a DOMException if replacing the node would result in a DOM tree that is not
       * well-formed, or if `oldChild` is not a child of `this`.
       * This can also occur if the pre-replacement validity assertion fails.
       * See {@link _insertBefore}, {@link Node.removeChild}, and
       * {@link assertPreReplacementValidityInDocument} for more details.
       * @see https://dom.spec.whatwg.org/#concept-node-replace
       */
      replaceChild: function(newChild, oldChild) {
        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);
        if (oldChild) {
          this.removeChild(oldChild);
        }
      },
      /**
       * Removes an existing child node from this node.
       *
       * @param {Node} oldChild
       * The child node to be removed.
       * @returns {Node}
       * Returns the removed child node.
       * @throws {DOMException}
       * Throws a DOMException if `oldChild` is not a child of `this`.
       * See {@link _removeChild} for more details.
       */
      removeChild: function(oldChild) {
        return _removeChild(this, oldChild);
      },
      /**
       * Appends a child node to this node.
       *
       * @param {Node} newChild
       * The child node to be appended to this node.
       * If it already exists in the DOM, it is removed from its original position.
       * @returns {Node}
       * Returns the appended child node.
       * @throws {DOMException}
       * Throws a DOMException if appending the node would result in a DOM tree that is not
       * well-formed, or if `newChild` is not a valid Node.
       * See {@link insertBefore} for more details.
       */
      appendChild: function(newChild) {
        return this.insertBefore(newChild, null);
      },
      /**
       * Determines whether this node has any child nodes.
       *
       * @returns {boolean}
       * Returns true if this node has any child nodes, and false otherwise.
       */
      hasChildNodes: function() {
        return this.firstChild != null;
      },
      /**
       * Creates a copy of the calling node.
       *
       * @param {boolean} deep
       * If true, the contents of the node are recursively copied.
       * If false, only the node itself (and its attributes, if it is an element) are copied.
       * @returns {Node}
       * Returns the newly created copy of the node.
       * @throws {DOMException}
       * May throw a DOMException if operations within {@link Element#setAttributeNode} or
       * {@link Node#appendChild} (which are potentially invoked in this method) do not meet their
       * specific constraints.
       * @see {@link cloneNode}
       */
      cloneNode: function(deep) {
        return cloneNode(this.ownerDocument || this, this, deep);
      },
      /**
       * Puts the specified node and all of its subtree into a "normalized" form. In a normalized
       * subtree, no text nodes in the subtree are empty and there are no adjacent text nodes.
       *
       * Specifically, this method merges any adjacent text nodes (i.e., nodes for which `nodeType`
       * is `TEXT_NODE`) into a single node with the combined data. It also removes any empty text
       * nodes.
       *
       * This method operates recursively, so it also normalizes any and all descendent nodes within
       * the subtree.
       *
       * @throws {DOMException}
       * May throw a DOMException if operations within removeChild or appendData (which are
       * potentially invoked in this method) do not meet their specific constraints.
       * @since Modified in DOM Level 2
       * @see {@link Node.removeChild}
       * @see {@link CharacterData.appendData}
       */
      normalize: function() {
        var child = this.firstChild;
        while (child) {
          var next = child.nextSibling;
          if (next && next.nodeType == TEXT_NODE && child.nodeType == TEXT_NODE) {
            this.removeChild(next);
            child.appendData(next.data);
          } else {
            child.normalize();
            child = next;
          }
        }
      },
      /**
       * Checks whether the DOM implementation implements a specific feature and its version.
       *
       * @deprecated
       * Since `DOMImplementation.hasFeature` is deprecated and always returns true.
       * @param {string} feature
       * The package name of the feature to test. This is the same name that can be passed to the
       * method `hasFeature` on `DOMImplementation`.
       * @param {string} version
       * This is the version number of the package name to test.
       * @returns {boolean}
       * Returns true in all cases in the current implementation.
       * @since Introduced in DOM Level 2
       * @see {@link DOMImplementation.hasFeature}
       */
      isSupported: function(feature, version) {
        return this.ownerDocument.implementation.hasFeature(feature, version);
      },
      /**
       * Look up the prefix associated to the given namespace URI, starting from this node.
       * **The default namespace declarations are ignored by this method.**
       * See Namespace Prefix Lookup for details on the algorithm used by this method.
       *
       * **This behavior is different from the in the specs**:
       * - no node type specific handling
       * - uses the internal attribute _nsMap for resolving namespaces that is updated when changing attributes
       *
       * @param {string | null} namespaceURI
       * The namespace URI for which to find the associated prefix.
       * @returns {string | null}
       * The associated prefix, if found; otherwise, null.
       * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespacePrefix
       * @see https://www.w3.org/TR/DOM-Level-3-Core/namespaces-algorithms.html#lookupNamespacePrefixAlgo
       * @see https://dom.spec.whatwg.org/#dom-node-lookupprefix
       * @see https://github.com/xmldom/xmldom/issues/322
       * @prettierignore
       */
      lookupPrefix: function(namespaceURI) {
        var el = this;
        while (el) {
          var map = el._nsMap;
          if (map) {
            for (var n3 in map) {
              if (hasOwn(map, n3) && map[n3] === namespaceURI) {
                return n3;
              }
            }
          }
          el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
      },
      /**
       * This function is used to look up the namespace URI associated with the given prefix,
       * starting from this node.
       *
       * **This behavior is different from the in the specs**:
       * - no node type specific handling
       * - uses the internal attribute _nsMap for resolving namespaces that is updated when changing attributes
       *
       * @param {string | null} prefix
       * The prefix for which to find the associated namespace URI.
       * @returns {string | null}
       * The associated namespace URI, if found; otherwise, null.
       * @since DOM Level 3
       * @see https://dom.spec.whatwg.org/#dom-node-lookupnamespaceuri
       * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-lookupNamespaceURI
       * @prettierignore
       */
      lookupNamespaceURI: function(prefix) {
        var el = this;
        while (el) {
          var map = el._nsMap;
          if (map) {
            if (hasOwn(map, prefix)) {
              return map[prefix];
            }
          }
          el = el.nodeType == ATTRIBUTE_NODE ? el.ownerDocument : el.parentNode;
        }
        return null;
      },
      /**
       * Determines whether the given namespace URI is the default namespace.
       *
       * The function works by looking up the prefix associated with the given namespace URI. If no
       * prefix is found (i.e., the namespace URI is not registered in the namespace map of this
       * node or any of its ancestors), it returns `true`, implying the namespace URI is considered
       * the default.
       *
       * **This behavior is different from the in the specs**:
       * - no node type specific handling
       * - uses the internal attribute _nsMap for resolving namespaces that is updated when changing attributes
       *
       * @param {string | null} namespaceURI
       * The namespace URI to be checked.
       * @returns {boolean}
       * Returns true if the given namespace URI is the default namespace, false otherwise.
       * @since DOM Level 3
       * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#Node3-isDefaultNamespace
       * @see https://dom.spec.whatwg.org/#dom-node-isdefaultnamespace
       * @prettierignore
       */
      isDefaultNamespace: function(namespaceURI) {
        var prefix = this.lookupPrefix(namespaceURI);
        return prefix == null;
      },
      /**
       * Compares the reference node with a node with regard to their position in the document and
       * according to the document order.
       *
       * @param {Node} other
       * The node to compare the reference node to.
       * @returns {number}
       * Returns how the node is positioned relatively to the reference node according to the
       * bitmask. 0 if reference node and given node are the same.
       * @since DOM Level 3
       * @see https://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#Node3-compare
       * @see https://dom.spec.whatwg.org/#dom-node-comparedocumentposition
       */
      compareDocumentPosition: function(other) {
        if (this === other) return 0;
        var node1 = other;
        var node2 = this;
        var attr1 = null;
        var attr2 = null;
        if (node1 instanceof Attr) {
          attr1 = node1;
          node1 = attr1.ownerElement;
        }
        if (node2 instanceof Attr) {
          attr2 = node2;
          node2 = attr2.ownerElement;
          if (attr1 && node1 && node2 === node1) {
            for (var i3 = 0, attr; attr = node2.attributes[i3]; i3++) {
              if (attr === attr1)
                return DocumentPosition.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + DocumentPosition.DOCUMENT_POSITION_PRECEDING;
              if (attr === attr2)
                return DocumentPosition.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + DocumentPosition.DOCUMENT_POSITION_FOLLOWING;
            }
          }
        }
        if (!node1 || !node2 || node2.ownerDocument !== node1.ownerDocument) {
          return DocumentPosition.DOCUMENT_POSITION_DISCONNECTED + DocumentPosition.DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC + (docGUID(node2.ownerDocument) > docGUID(node1.ownerDocument) ? DocumentPosition.DOCUMENT_POSITION_FOLLOWING : DocumentPosition.DOCUMENT_POSITION_PRECEDING);
        }
        var chain1 = parentChain(node1);
        var chain2 = parentChain(node2);
        if (!attr1 && chain2.indexOf(node1) >= 0 || attr2 && node1 === node2) {
          return DocumentPosition.DOCUMENT_POSITION_CONTAINS + DocumentPosition.DOCUMENT_POSITION_PRECEDING;
        }
        if (!attr2 && chain1.indexOf(node2) >= 0 || attr1 && node1 === node2) {
          return DocumentPosition.DOCUMENT_POSITION_CONTAINED_BY + DocumentPosition.DOCUMENT_POSITION_FOLLOWING;
        }
        var ca2 = commonAncestor(chain2, chain1);
        for (var n3 in ca2.childNodes) {
          var child = ca2.childNodes[n3];
          if (child === node2) return DocumentPosition.DOCUMENT_POSITION_FOLLOWING;
          if (child === node1) return DocumentPosition.DOCUMENT_POSITION_PRECEDING;
          if (chain2.indexOf(child) >= 0) return DocumentPosition.DOCUMENT_POSITION_FOLLOWING;
          if (chain1.indexOf(child) >= 0) return DocumentPosition.DOCUMENT_POSITION_PRECEDING;
        }
        return 0;
      }
    };
    function _xmlEncoder(c3) {
      return c3 == "<" && "&lt;" || c3 == ">" && "&gt;" || c3 == "&" && "&amp;" || c3 == '"' && "&quot;" || "&#" + c3.charCodeAt() + ";";
    }
    copy(NodeType, Node);
    copy(NodeType, Node.prototype);
    copy(DocumentPosition, Node);
    copy(DocumentPosition, Node.prototype);
    function _visitNode(node, callback) {
      if (callback(node)) {
        return true;
      }
      if (node = node.firstChild) {
        do {
          if (_visitNode(node, callback)) {
            return true;
          }
        } while (node = node.nextSibling);
      }
    }
    function Document(symbol, options) {
      checkSymbol(symbol);
      var opt = options || {};
      this.ownerDocument = this;
      this.contentType = opt.contentType || MIME_TYPE.XML_APPLICATION;
      this.type = isHTMLMimeType(this.contentType) ? "html" : "xml";
    }
    function _onAddAttribute(doc, el, newAttr) {
      doc && doc._inc++;
      var ns = newAttr.namespaceURI;
      if (ns === NAMESPACE.XMLNS) {
        el._nsMap[newAttr.prefix ? newAttr.localName : ""] = newAttr.value;
      }
    }
    function _onRemoveAttribute(doc, el, newAttr, remove) {
      doc && doc._inc++;
      var ns = newAttr.namespaceURI;
      if (ns === NAMESPACE.XMLNS) {
        delete el._nsMap[newAttr.prefix ? newAttr.localName : ""];
      }
    }
    function _onUpdateChild(doc, parent, newChild) {
      if (doc && doc._inc) {
        doc._inc++;
        var childNodes = parent.childNodes;
        if (newChild && !newChild.nextSibling) {
          childNodes[childNodes.length++] = newChild;
        } else {
          var child = parent.firstChild;
          var i3 = 0;
          while (child) {
            childNodes[i3++] = child;
            child = child.nextSibling;
          }
          childNodes.length = i3;
          delete childNodes[childNodes.length];
        }
      }
    }
    function _removeChild(parentNode, child) {
      if (parentNode !== child.parentNode) {
        throw new DOMException(DOMException.NOT_FOUND_ERR, "child's parent is not parent");
      }
      var oldPreviousSibling = child.previousSibling;
      var oldNextSibling = child.nextSibling;
      if (oldPreviousSibling) {
        oldPreviousSibling.nextSibling = oldNextSibling;
      } else {
        parentNode.firstChild = oldNextSibling;
      }
      if (oldNextSibling) {
        oldNextSibling.previousSibling = oldPreviousSibling;
      } else {
        parentNode.lastChild = oldPreviousSibling;
      }
      _onUpdateChild(parentNode.ownerDocument, parentNode);
      child.parentNode = null;
      child.previousSibling = null;
      child.nextSibling = null;
      return child;
    }
    function hasValidParentNodeType(node) {
      return node && (node.nodeType === Node.DOCUMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.ELEMENT_NODE);
    }
    function hasInsertableNodeType(node) {
      return node && (node.nodeType === Node.CDATA_SECTION_NODE || node.nodeType === Node.COMMENT_NODE || node.nodeType === Node.DOCUMENT_FRAGMENT_NODE || node.nodeType === Node.DOCUMENT_TYPE_NODE || node.nodeType === Node.ELEMENT_NODE || node.nodeType === Node.PROCESSING_INSTRUCTION_NODE || node.nodeType === Node.TEXT_NODE);
    }
    function isDocTypeNode(node) {
      return node && node.nodeType === Node.DOCUMENT_TYPE_NODE;
    }
    function isElementNode(node) {
      return node && node.nodeType === Node.ELEMENT_NODE;
    }
    function isTextNode(node) {
      return node && node.nodeType === Node.TEXT_NODE;
    }
    function isElementInsertionPossible(doc, child) {
      var parentChildNodes = doc.childNodes || [];
      if (find(parentChildNodes, isElementNode) || isDocTypeNode(child)) {
        return false;
      }
      var docTypeNode = find(parentChildNodes, isDocTypeNode);
      return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
    }
    function isElementReplacementPossible(doc, child) {
      var parentChildNodes = doc.childNodes || [];
      function hasElementChildThatIsNotChild(node) {
        return isElementNode(node) && node !== child;
      }
      if (find(parentChildNodes, hasElementChildThatIsNotChild)) {
        return false;
      }
      var docTypeNode = find(parentChildNodes, isDocTypeNode);
      return !(child && docTypeNode && parentChildNodes.indexOf(docTypeNode) > parentChildNodes.indexOf(child));
    }
    function assertPreInsertionValidity1to5(parent, node, child) {
      if (!hasValidParentNodeType(parent)) {
        throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Unexpected parent node type " + parent.nodeType);
      }
      if (child && child.parentNode !== parent) {
        throw new DOMException(DOMException.NOT_FOUND_ERR, "child not in parent");
      }
      if (
        // 4. If `node` is not a DocumentFragment, DocumentType, Element, or CharacterData node, then throw a "HierarchyRequestError" DOMException.
        !hasInsertableNodeType(node) || // 5. If either `node` is a Text node and `parent` is a document,
        // the sax parser currently adds top level text nodes, this will be fixed in 0.9.0
        // || (node.nodeType === Node.TEXT_NODE && parent.nodeType === Node.DOCUMENT_NODE)
        // or `node` is a doctype and `parent` is not a document, then throw a "HierarchyRequestError" DOMException.
        isDocTypeNode(node) && parent.nodeType !== Node.DOCUMENT_NODE
      ) {
        throw new DOMException(
          DOMException.HIERARCHY_REQUEST_ERR,
          "Unexpected node type " + node.nodeType + " for parent node type " + parent.nodeType
        );
      }
    }
    function assertPreInsertionValidityInDocument(parent, node, child) {
      var parentChildNodes = parent.childNodes || [];
      var nodeChildNodes = node.childNodes || [];
      if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
        var nodeChildElements = nodeChildNodes.filter(isElementNode);
        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "More than one element or text in fragment");
        }
        if (nodeChildElements.length === 1 && !isElementInsertionPossible(parent, child)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Element in fragment can not be inserted before doctype");
        }
      }
      if (isElementNode(node)) {
        if (!isElementInsertionPossible(parent, child)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Only one element can be added and only after doctype");
        }
      }
      if (isDocTypeNode(node)) {
        if (find(parentChildNodes, isDocTypeNode)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Only one doctype is allowed");
        }
        var parentElementChild = find(parentChildNodes, isElementNode);
        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Doctype can only be inserted before an element");
        }
        if (!child && parentElementChild) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Doctype can not be appended since element is present");
        }
      }
    }
    function assertPreReplacementValidityInDocument(parent, node, child) {
      var parentChildNodes = parent.childNodes || [];
      var nodeChildNodes = node.childNodes || [];
      if (node.nodeType === Node.DOCUMENT_FRAGMENT_NODE) {
        var nodeChildElements = nodeChildNodes.filter(isElementNode);
        if (nodeChildElements.length > 1 || find(nodeChildNodes, isTextNode)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "More than one element or text in fragment");
        }
        if (nodeChildElements.length === 1 && !isElementReplacementPossible(parent, child)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Element in fragment can not be inserted before doctype");
        }
      }
      if (isElementNode(node)) {
        if (!isElementReplacementPossible(parent, child)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Only one element can be added and only after doctype");
        }
      }
      if (isDocTypeNode(node)) {
        let hasDoctypeChildThatIsNotChild = function(node2) {
          return isDocTypeNode(node2) && node2 !== child;
        };
        if (find(parentChildNodes, hasDoctypeChildThatIsNotChild)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Only one doctype is allowed");
        }
        var parentElementChild = find(parentChildNodes, isElementNode);
        if (child && parentChildNodes.indexOf(parentElementChild) < parentChildNodes.indexOf(child)) {
          throw new DOMException(DOMException.HIERARCHY_REQUEST_ERR, "Doctype can only be inserted before an element");
        }
      }
    }
    function _insertBefore(parent, node, child, _inDocumentAssertion) {
      assertPreInsertionValidity1to5(parent, node, child);
      if (parent.nodeType === Node.DOCUMENT_NODE) {
        (_inDocumentAssertion || assertPreInsertionValidityInDocument)(parent, node, child);
      }
      var cp = node.parentNode;
      if (cp) {
        cp.removeChild(node);
      }
      if (node.nodeType === DOCUMENT_FRAGMENT_NODE) {
        var newFirst = node.firstChild;
        if (newFirst == null) {
          return node;
        }
        var newLast = node.lastChild;
      } else {
        newFirst = newLast = node;
      }
      var pre = child ? child.previousSibling : parent.lastChild;
      newFirst.previousSibling = pre;
      newLast.nextSibling = child;
      if (pre) {
        pre.nextSibling = newFirst;
      } else {
        parent.firstChild = newFirst;
      }
      if (child == null) {
        parent.lastChild = newLast;
      } else {
        child.previousSibling = newLast;
      }
      do {
        newFirst.parentNode = parent;
      } while (newFirst !== newLast && (newFirst = newFirst.nextSibling));
      _onUpdateChild(parent.ownerDocument || parent, parent, node);
      if (node.nodeType == DOCUMENT_FRAGMENT_NODE) {
        node.firstChild = node.lastChild = null;
      }
      return node;
    }
    Document.prototype = {
      /**
       * The implementation that created this document.
       *
       * @type DOMImplementation
       * @readonly
       */
      implementation: null,
      nodeName: "#document",
      nodeType: DOCUMENT_NODE,
      /**
       * The DocumentType node of the document.
       *
       * @type DocumentType
       * @readonly
       */
      doctype: null,
      documentElement: null,
      _inc: 1,
      insertBefore: function(newChild, refChild) {
        if (newChild.nodeType === DOCUMENT_FRAGMENT_NODE) {
          var child = newChild.firstChild;
          while (child) {
            var next = child.nextSibling;
            this.insertBefore(child, refChild);
            child = next;
          }
          return newChild;
        }
        _insertBefore(this, newChild, refChild);
        newChild.ownerDocument = this;
        if (this.documentElement === null && newChild.nodeType === ELEMENT_NODE) {
          this.documentElement = newChild;
        }
        return newChild;
      },
      removeChild: function(oldChild) {
        var removed = _removeChild(this, oldChild);
        if (removed === this.documentElement) {
          this.documentElement = null;
        }
        return removed;
      },
      replaceChild: function(newChild, oldChild) {
        _insertBefore(this, newChild, oldChild, assertPreReplacementValidityInDocument);
        newChild.ownerDocument = this;
        if (oldChild) {
          this.removeChild(oldChild);
        }
        if (isElementNode(newChild)) {
          this.documentElement = newChild;
        }
      },
      // Introduced in DOM Level 2:
      importNode: function(importedNode, deep) {
        return importNode(this, importedNode, deep);
      },
      // Introduced in DOM Level 2:
      getElementById: function(id) {
        var rtv = null;
        _visitNode(this.documentElement, function(node) {
          if (node.nodeType == ELEMENT_NODE) {
            if (node.getAttribute("id") == id) {
              rtv = node;
              return true;
            }
          }
        });
        return rtv;
      },
      /**
       * Creates a new `Element` that is owned by this `Document`.
       * In HTML Documents `localName` is the lower cased `tagName`,
       * otherwise no transformation is being applied.
       * When `contentType` implies the HTML namespace, it will be set as `namespaceURI`.
       *
       * __This implementation differs from the specification:__ - The provided name is not checked
       * against the `Name` production,
       * so no related error will be thrown.
       * - There is no interface `HTMLElement`, it is always an `Element`.
       * - There is no support for a second argument to indicate using custom elements.
       *
       * @param {string} tagName
       * @returns {Element}
       * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/createElement
       * @see https://dom.spec.whatwg.org/#dom-document-createelement
       * @see https://dom.spec.whatwg.org/#concept-create-element
       */
      createElement: function(tagName) {
        var node = new Element(PDC);
        node.ownerDocument = this;
        if (this.type === "html") {
          tagName = tagName.toLowerCase();
        }
        if (hasDefaultHTMLNamespace(this.contentType)) {
          node.namespaceURI = NAMESPACE.HTML;
        }
        node.nodeName = tagName;
        node.tagName = tagName;
        node.localName = tagName;
        node.childNodes = new NodeList();
        var attrs = node.attributes = new NamedNodeMap();
        attrs._ownerElement = node;
        return node;
      },
      /**
       * @returns {DocumentFragment}
       */
      createDocumentFragment: function() {
        var node = new DocumentFragment(PDC);
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        return node;
      },
      /**
       * @param {string} data
       * @returns {Text}
       */
      createTextNode: function(data) {
        var node = new Text(PDC);
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        node.appendData(data);
        return node;
      },
      /**
       * @param {string} data
       * @returns {Comment}
       */
      createComment: function(data) {
        var node = new Comment(PDC);
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        node.appendData(data);
        return node;
      },
      /**
       * @param {string} data
       * @returns {CDATASection}
       */
      createCDATASection: function(data) {
        var node = new CDATASection(PDC);
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        node.appendData(data);
        return node;
      },
      /**
       * @param {string} target
       * @param {string} data
       * @returns {ProcessingInstruction}
       */
      createProcessingInstruction: function(target, data) {
        var node = new ProcessingInstruction(PDC);
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        node.nodeName = node.target = target;
        node.nodeValue = node.data = data;
        return node;
      },
      /**
       * Creates an `Attr` node that is owned by this document.
       * In HTML Documents `localName` is the lower cased `name`,
       * otherwise no transformation is being applied.
       *
       * __This implementation differs from the specification:__ - The provided name is not checked
       * against the `Name` production,
       * so no related error will be thrown.
       *
       * @param {string} name
       * @returns {Attr}
       * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/createAttribute
       * @see https://dom.spec.whatwg.org/#dom-document-createattribute
       */
      createAttribute: function(name) {
        if (!g2.QName_exact.test(name)) {
          throw new DOMException(DOMException.INVALID_CHARACTER_ERR, 'invalid character in name "' + name + '"');
        }
        if (this.type === "html") {
          name = name.toLowerCase();
        }
        return this._createAttribute(name);
      },
      _createAttribute: function(name) {
        var node = new Attr(PDC);
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        node.name = name;
        node.nodeName = name;
        node.localName = name;
        node.specified = true;
        return node;
      },
      /**
       * Creates an EntityReference object.
       * The current implementation does not fill the `childNodes` with those of the corresponding
       * `Entity`
       *
       * @deprecated
       * In DOM Level 4.
       * @param {string} name
       * The name of the entity to reference. No namespace well-formedness checks are performed.
       * @returns {EntityReference}
       * @throws {DOMException}
       * With code `INVALID_CHARACTER_ERR` when `name` is not valid.
       * @throws {DOMException}
       * with code `NOT_SUPPORTED_ERR` when the document is of type `html`
       * @see https://www.w3.org/TR/DOM-Level-3-Core/core.html#ID-392B75AE
       */
      createEntityReference: function(name) {
        if (!g2.Name.test(name)) {
          throw new DOMException(DOMException.INVALID_CHARACTER_ERR, 'not a valid xml name "' + name + '"');
        }
        if (this.type === "html") {
          throw new DOMException("document is an html document", DOMExceptionName.NotSupportedError);
        }
        var node = new EntityReference(PDC);
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        node.nodeName = name;
        return node;
      },
      // Introduced in DOM Level 2:
      /**
       * @param {string} namespaceURI
       * @param {string} qualifiedName
       * @returns {Element}
       */
      createElementNS: function(namespaceURI, qualifiedName) {
        var validated = validateAndExtract(namespaceURI, qualifiedName);
        var node = new Element(PDC);
        var attrs = node.attributes = new NamedNodeMap();
        node.childNodes = new NodeList();
        node.ownerDocument = this;
        node.nodeName = qualifiedName;
        node.tagName = qualifiedName;
        node.namespaceURI = validated[0];
        node.prefix = validated[1];
        node.localName = validated[2];
        attrs._ownerElement = node;
        return node;
      },
      // Introduced in DOM Level 2:
      /**
       * @param {string} namespaceURI
       * @param {string} qualifiedName
       * @returns {Attr}
       */
      createAttributeNS: function(namespaceURI, qualifiedName) {
        var validated = validateAndExtract(namespaceURI, qualifiedName);
        var node = new Attr(PDC);
        node.ownerDocument = this;
        node.childNodes = new NodeList();
        node.nodeName = qualifiedName;
        node.name = qualifiedName;
        node.specified = true;
        node.namespaceURI = validated[0];
        node.prefix = validated[1];
        node.localName = validated[2];
        return node;
      }
    };
    _extends(Document, Node);
    function Element(symbol) {
      checkSymbol(symbol);
      this._nsMap = /* @__PURE__ */ Object.create(null);
    }
    Element.prototype = {
      nodeType: ELEMENT_NODE,
      /**
       * The attributes of this element.
       *
       * @type {NamedNodeMap | null}
       */
      attributes: null,
      getQualifiedName: function() {
        return this.prefix ? this.prefix + ":" + this.localName : this.localName;
      },
      _isInHTMLDocumentAndNamespace: function() {
        return this.ownerDocument.type === "html" && this.namespaceURI === NAMESPACE.HTML;
      },
      hasAttribute: function(name) {
        return !!this.getAttributeNode(name);
      },
      /**
       * Returns element’s first attribute whose qualified name is `name`, and `null`
       * if there is no such attribute.
       *
       * @param {string} name
       * @returns {string | null}
       */
      getAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        return attr ? attr.value : null;
      },
      getAttributeNode: function(name) {
        if (this._isInHTMLDocumentAndNamespace()) {
          name = name.toLowerCase();
        }
        return this.attributes.getNamedItem(name);
      },
      /**
       * Sets the value of element’s first attribute whose qualified name is qualifiedName to value.
       *
       * @param {string} name
       * @param {string} value
       */
      setAttribute: function(name, value) {
        if (this._isInHTMLDocumentAndNamespace()) {
          name = name.toLowerCase();
        }
        var attr = this.getAttributeNode(name);
        if (attr) {
          attr.value = attr.nodeValue = "" + value;
        } else {
          attr = this.ownerDocument._createAttribute(name);
          attr.value = attr.nodeValue = "" + value;
          this.setAttributeNode(attr);
        }
      },
      removeAttribute: function(name) {
        var attr = this.getAttributeNode(name);
        attr && this.removeAttributeNode(attr);
      },
      setAttributeNode: function(newAttr) {
        return this.attributes.setNamedItem(newAttr);
      },
      setAttributeNodeNS: function(newAttr) {
        return this.attributes.setNamedItemNS(newAttr);
      },
      removeAttributeNode: function(oldAttr) {
        return this.attributes.removeNamedItem(oldAttr.nodeName);
      },
      //get real attribute name,and remove it by removeAttributeNode
      removeAttributeNS: function(namespaceURI, localName) {
        var old = this.getAttributeNodeNS(namespaceURI, localName);
        old && this.removeAttributeNode(old);
      },
      hasAttributeNS: function(namespaceURI, localName) {
        return this.getAttributeNodeNS(namespaceURI, localName) != null;
      },
      /**
       * Returns element’s attribute whose namespace is `namespaceURI` and local name is
       * `localName`,
       * or `null` if there is no such attribute.
       *
       * @param {string} namespaceURI
       * @param {string} localName
       * @returns {string | null}
       */
      getAttributeNS: function(namespaceURI, localName) {
        var attr = this.getAttributeNodeNS(namespaceURI, localName);
        return attr ? attr.value : null;
      },
      /**
       * Sets the value of element’s attribute whose namespace is `namespaceURI` and local name is
       * `localName` to value.
       *
       * @param {string} namespaceURI
       * @param {string} qualifiedName
       * @param {string} value
       * @see https://dom.spec.whatwg.org/#dom-element-setattributens
       */
      setAttributeNS: function(namespaceURI, qualifiedName, value) {
        var validated = validateAndExtract(namespaceURI, qualifiedName);
        var localName = validated[2];
        var attr = this.getAttributeNodeNS(namespaceURI, localName);
        if (attr) {
          attr.value = attr.nodeValue = "" + value;
        } else {
          attr = this.ownerDocument.createAttributeNS(namespaceURI, qualifiedName);
          attr.value = attr.nodeValue = "" + value;
          this.setAttributeNode(attr);
        }
      },
      getAttributeNodeNS: function(namespaceURI, localName) {
        return this.attributes.getNamedItemNS(namespaceURI, localName);
      },
      /**
       * Returns a LiveNodeList of all child elements which have **all** of the given class name(s).
       *
       * Returns an empty list if `classNames` is an empty string or only contains HTML white space
       * characters.
       *
       * Warning: This returns a live LiveNodeList.
       * Changes in the DOM will reflect in the array as the changes occur.
       * If an element selected by this array no longer qualifies for the selector,
       * it will automatically be removed. Be aware of this for iteration purposes.
       *
       * @param {string} classNames
       * Is a string representing the class name(s) to match; multiple class names are separated by
       * (ASCII-)whitespace.
       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName
       * @see https://developer.mozilla.org/en-US/docs/Web/API/Document/getElementsByClassName
       * @see https://dom.spec.whatwg.org/#concept-getelementsbyclassname
       */
      getElementsByClassName: function(classNames) {
        var classNamesSet = toOrderedSet(classNames);
        return new LiveNodeList(this, function(base) {
          var ls = [];
          if (classNamesSet.length > 0) {
            _visitNode(base, function(node) {
              if (node !== base && node.nodeType === ELEMENT_NODE) {
                var nodeClassNames = node.getAttribute("class");
                if (nodeClassNames) {
                  var matches = classNames === nodeClassNames;
                  if (!matches) {
                    var nodeClassNamesSet = toOrderedSet(nodeClassNames);
                    matches = classNamesSet.every(arrayIncludes(nodeClassNamesSet));
                  }
                  if (matches) {
                    ls.push(node);
                  }
                }
              }
            });
          }
          return ls;
        });
      },
      /**
       * Returns a LiveNodeList of elements with the given qualifiedName.
       * Searching for all descendants can be done by passing `*` as `qualifiedName`.
       *
       * All descendants of the specified element are searched, but not the element itself.
       * The returned list is live, which means it updates itself with the DOM tree automatically.
       * Therefore, there is no need to call `Element.getElementsByTagName()`
       * with the same element and arguments repeatedly if the DOM changes in between calls.
       *
       * When called on an HTML element in an HTML document,
       * `getElementsByTagName` lower-cases the argument before searching for it.
       * This is undesirable when trying to match camel-cased SVG elements (such as
       * `<linearGradient>`) in an HTML document.
       * Instead, use `Element.getElementsByTagNameNS()`,
       * which preserves the capitalization of the tag name.
       *
       * `Element.getElementsByTagName` is similar to `Document.getElementsByTagName()`,
       * except that it only searches for elements that are descendants of the specified element.
       *
       * @param {string} qualifiedName
       * @returns {LiveNodeList}
       * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByTagName
       * @see https://dom.spec.whatwg.org/#concept-getelementsbytagname
       */
      getElementsByTagName: function(qualifiedName) {
        var isHTMLDocument = (this.nodeType === DOCUMENT_NODE ? this : this.ownerDocument).type === "html";
        var lowerQualifiedName = qualifiedName.toLowerCase();
        return new LiveNodeList(this, function(base) {
          var ls = [];
          _visitNode(base, function(node) {
            if (node === base || node.nodeType !== ELEMENT_NODE) {
              return;
            }
            if (qualifiedName === "*") {
              ls.push(node);
            } else {
              var nodeQualifiedName = node.getQualifiedName();
              var matchingQName = isHTMLDocument && node.namespaceURI === NAMESPACE.HTML ? lowerQualifiedName : qualifiedName;
              if (nodeQualifiedName === matchingQName) {
                ls.push(node);
              }
            }
          });
          return ls;
        });
      },
      getElementsByTagNameNS: function(namespaceURI, localName) {
        return new LiveNodeList(this, function(base) {
          var ls = [];
          _visitNode(base, function(node) {
            if (node !== base && node.nodeType === ELEMENT_NODE && (namespaceURI === "*" || node.namespaceURI === namespaceURI) && (localName === "*" || node.localName == localName)) {
              ls.push(node);
            }
          });
          return ls;
        });
      }
    };
    Document.prototype.getElementsByClassName = Element.prototype.getElementsByClassName;
    Document.prototype.getElementsByTagName = Element.prototype.getElementsByTagName;
    Document.prototype.getElementsByTagNameNS = Element.prototype.getElementsByTagNameNS;
    _extends(Element, Node);
    function Attr(symbol) {
      checkSymbol(symbol);
      this.namespaceURI = null;
      this.prefix = null;
      this.ownerElement = null;
    }
    Attr.prototype.nodeType = ATTRIBUTE_NODE;
    _extends(Attr, Node);
    function CharacterData(symbol) {
      checkSymbol(symbol);
    }
    CharacterData.prototype = {
      data: "",
      substringData: function(offset, count) {
        return this.data.substring(offset, offset + count);
      },
      appendData: function(text) {
        text = this.data + text;
        this.nodeValue = this.data = text;
        this.length = text.length;
      },
      insertData: function(offset, text) {
        this.replaceData(offset, 0, text);
      },
      deleteData: function(offset, count) {
        this.replaceData(offset, count, "");
      },
      replaceData: function(offset, count, text) {
        var start = this.data.substring(0, offset);
        var end = this.data.substring(offset + count);
        text = start + text + end;
        this.nodeValue = this.data = text;
        this.length = text.length;
      }
    };
    _extends(CharacterData, Node);
    function Text(symbol) {
      checkSymbol(symbol);
    }
    Text.prototype = {
      nodeName: "#text",
      nodeType: TEXT_NODE,
      splitText: function(offset) {
        var text = this.data;
        var newText = text.substring(offset);
        text = text.substring(0, offset);
        this.data = this.nodeValue = text;
        this.length = text.length;
        var newNode = this.ownerDocument.createTextNode(newText);
        if (this.parentNode) {
          this.parentNode.insertBefore(newNode, this.nextSibling);
        }
        return newNode;
      }
    };
    _extends(Text, CharacterData);
    function Comment(symbol) {
      checkSymbol(symbol);
    }
    Comment.prototype = {
      nodeName: "#comment",
      nodeType: COMMENT_NODE
    };
    _extends(Comment, CharacterData);
    function CDATASection(symbol) {
      checkSymbol(symbol);
    }
    CDATASection.prototype = {
      nodeName: "#cdata-section",
      nodeType: CDATA_SECTION_NODE
    };
    _extends(CDATASection, Text);
    function DocumentType(symbol) {
      checkSymbol(symbol);
    }
    DocumentType.prototype.nodeType = DOCUMENT_TYPE_NODE;
    _extends(DocumentType, Node);
    function Notation(symbol) {
      checkSymbol(symbol);
    }
    Notation.prototype.nodeType = NOTATION_NODE;
    _extends(Notation, Node);
    function Entity(symbol) {
      checkSymbol(symbol);
    }
    Entity.prototype.nodeType = ENTITY_NODE;
    _extends(Entity, Node);
    function EntityReference(symbol) {
      checkSymbol(symbol);
    }
    EntityReference.prototype.nodeType = ENTITY_REFERENCE_NODE;
    _extends(EntityReference, Node);
    function DocumentFragment(symbol) {
      checkSymbol(symbol);
    }
    DocumentFragment.prototype.nodeName = "#document-fragment";
    DocumentFragment.prototype.nodeType = DOCUMENT_FRAGMENT_NODE;
    _extends(DocumentFragment, Node);
    function ProcessingInstruction(symbol) {
      checkSymbol(symbol);
    }
    ProcessingInstruction.prototype.nodeType = PROCESSING_INSTRUCTION_NODE;
    _extends(ProcessingInstruction, CharacterData);
    function XMLSerializer() {
    }
    XMLSerializer.prototype.serializeToString = function(node, nodeFilter) {
      return nodeSerializeToString.call(node, nodeFilter);
    };
    Node.prototype.toString = nodeSerializeToString;
    function nodeSerializeToString(nodeFilter) {
      var buf = [];
      var refNode = this.nodeType === DOCUMENT_NODE && this.documentElement || this;
      var prefix = refNode.prefix;
      var uri = refNode.namespaceURI;
      if (uri && prefix == null) {
        var prefix = refNode.lookupPrefix(uri);
        if (prefix == null) {
          var visibleNamespaces = [
            { namespace: uri, prefix: null }
            //{namespace:uri,prefix:''}
          ];
        }
      }
      serializeToString(this, buf, nodeFilter, visibleNamespaces);
      return buf.join("");
    }
    function needNamespaceDefine(node, isHTML, visibleNamespaces) {
      var prefix = node.prefix || "";
      var uri = node.namespaceURI;
      if (!uri) {
        return false;
      }
      if (prefix === "xml" && uri === NAMESPACE.XML || uri === NAMESPACE.XMLNS) {
        return false;
      }
      var i3 = visibleNamespaces.length;
      while (i3--) {
        var ns = visibleNamespaces[i3];
        if (ns.prefix === prefix) {
          return ns.namespace !== uri;
        }
      }
      return true;
    }
    function addSerializedAttribute(buf, qualifiedName, value) {
      buf.push(" ", qualifiedName, '="', value.replace(/[<>&"\t\n\r]/g, _xmlEncoder), '"');
    }
    function serializeToString(node, buf, nodeFilter, visibleNamespaces) {
      if (!visibleNamespaces) {
        visibleNamespaces = [];
      }
      var doc = node.nodeType === DOCUMENT_NODE ? node : node.ownerDocument;
      var isHTML = doc.type === "html";
      if (nodeFilter) {
        node = nodeFilter(node);
        if (node) {
          if (typeof node == "string") {
            buf.push(node);
            return;
          }
        } else {
          return;
        }
      }
      switch (node.nodeType) {
        case ELEMENT_NODE:
          var attrs = node.attributes;
          var len = attrs.length;
          var child = node.firstChild;
          var nodeName = node.tagName;
          var prefixedNodeName = nodeName;
          if (!isHTML && !node.prefix && node.namespaceURI) {
            var defaultNS;
            for (var ai2 = 0; ai2 < attrs.length; ai2++) {
              if (attrs.item(ai2).name === "xmlns") {
                defaultNS = attrs.item(ai2).value;
                break;
              }
            }
            if (!defaultNS) {
              for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
                var namespace = visibleNamespaces[nsi];
                if (namespace.prefix === "" && namespace.namespace === node.namespaceURI) {
                  defaultNS = namespace.namespace;
                  break;
                }
              }
            }
            if (defaultNS !== node.namespaceURI) {
              for (var nsi = visibleNamespaces.length - 1; nsi >= 0; nsi--) {
                var namespace = visibleNamespaces[nsi];
                if (namespace.namespace === node.namespaceURI) {
                  if (namespace.prefix) {
                    prefixedNodeName = namespace.prefix + ":" + nodeName;
                  }
                  break;
                }
              }
            }
          }
          buf.push("<", prefixedNodeName);
          for (var i3 = 0; i3 < len; i3++) {
            var attr = attrs.item(i3);
            if (attr.prefix == "xmlns") {
              visibleNamespaces.push({
                prefix: attr.localName,
                namespace: attr.value
              });
            } else if (attr.nodeName == "xmlns") {
              visibleNamespaces.push({ prefix: "", namespace: attr.value });
            }
          }
          for (var i3 = 0; i3 < len; i3++) {
            var attr = attrs.item(i3);
            if (needNamespaceDefine(attr, isHTML, visibleNamespaces)) {
              var prefix = attr.prefix || "";
              var uri = attr.namespaceURI;
              addSerializedAttribute(buf, prefix ? "xmlns:" + prefix : "xmlns", uri);
              visibleNamespaces.push({ prefix, namespace: uri });
            }
            serializeToString(attr, buf, nodeFilter, visibleNamespaces);
          }
          if (nodeName === prefixedNodeName && needNamespaceDefine(node, isHTML, visibleNamespaces)) {
            var prefix = node.prefix || "";
            var uri = node.namespaceURI;
            addSerializedAttribute(buf, prefix ? "xmlns:" + prefix : "xmlns", uri);
            visibleNamespaces.push({ prefix, namespace: uri });
          }
          var canCloseTag = !child;
          if (canCloseTag && (isHTML || node.namespaceURI === NAMESPACE.HTML)) {
            canCloseTag = isHTMLVoidElement(nodeName);
          }
          if (canCloseTag) {
            buf.push("/>");
          } else {
            buf.push(">");
            if (isHTML && isHTMLRawTextElement(nodeName)) {
              while (child) {
                if (child.data) {
                  buf.push(child.data);
                } else {
                  serializeToString(child, buf, nodeFilter, visibleNamespaces.slice());
                }
                child = child.nextSibling;
              }
            } else {
              while (child) {
                serializeToString(child, buf, nodeFilter, visibleNamespaces.slice());
                child = child.nextSibling;
              }
            }
            buf.push("</", prefixedNodeName, ">");
          }
          return;
        case DOCUMENT_NODE:
        case DOCUMENT_FRAGMENT_NODE:
          var child = node.firstChild;
          while (child) {
            serializeToString(child, buf, nodeFilter, visibleNamespaces.slice());
            child = child.nextSibling;
          }
          return;
        case ATTRIBUTE_NODE:
          return addSerializedAttribute(buf, node.name, node.value);
        case TEXT_NODE:
          return buf.push(node.data.replace(/[<&>]/g, _xmlEncoder));
        case CDATA_SECTION_NODE:
          return buf.push(g2.CDATA_START, node.data, g2.CDATA_END);
        case COMMENT_NODE:
          return buf.push(g2.COMMENT_START, node.data, g2.COMMENT_END);
        case DOCUMENT_TYPE_NODE:
          var pubid = node.publicId;
          var sysid = node.systemId;
          buf.push(g2.DOCTYPE_DECL_START, " ", node.name);
          if (pubid) {
            buf.push(" ", g2.PUBLIC, " ", pubid);
            if (sysid && sysid !== ".") {
              buf.push(" ", sysid);
            }
          } else if (sysid && sysid !== ".") {
            buf.push(" ", g2.SYSTEM, " ", sysid);
          }
          if (node.internalSubset) {
            buf.push(" [", node.internalSubset, "]");
          }
          buf.push(">");
          return;
        case PROCESSING_INSTRUCTION_NODE:
          return buf.push("<?", node.target, " ", node.data, "?>");
        case ENTITY_REFERENCE_NODE:
          return buf.push("&", node.nodeName, ";");
        //case ENTITY_NODE:
        //case NOTATION_NODE:
        default:
          buf.push("??", node.nodeName);
      }
    }
    function importNode(doc, node, deep) {
      var node2;
      switch (node.nodeType) {
        case ELEMENT_NODE:
          node2 = node.cloneNode(false);
          node2.ownerDocument = doc;
        //var attrs = node2.attributes;
        //var len = attrs.length;
        //for(var i=0;i<len;i++){
        //node2.setAttributeNodeNS(importNode(doc,attrs.item(i),deep));
        //}
        case DOCUMENT_FRAGMENT_NODE:
          break;
        case ATTRIBUTE_NODE:
          deep = true;
          break;
      }
      if (!node2) {
        node2 = node.cloneNode(false);
      }
      node2.ownerDocument = doc;
      node2.parentNode = null;
      if (deep) {
        var child = node.firstChild;
        while (child) {
          node2.appendChild(importNode(doc, child, deep));
          child = child.nextSibling;
        }
      }
      return node2;
    }
    function cloneNode(doc, node, deep) {
      var node2 = new node.constructor(PDC);
      for (var n3 in node) {
        if (hasOwn(node, n3)) {
          var v3 = node[n3];
          if (typeof v3 != "object") {
            if (v3 != node2[n3]) {
              node2[n3] = v3;
            }
          }
        }
      }
      if (node.childNodes) {
        node2.childNodes = new NodeList();
      }
      node2.ownerDocument = doc;
      switch (node2.nodeType) {
        case ELEMENT_NODE:
          var attrs = node.attributes;
          var attrs2 = node2.attributes = new NamedNodeMap();
          var len = attrs.length;
          attrs2._ownerElement = node2;
          for (var i3 = 0; i3 < len; i3++) {
            node2.setAttributeNode(cloneNode(doc, attrs.item(i3), true));
          }
          break;
        case ATTRIBUTE_NODE:
          deep = true;
      }
      if (deep) {
        var child = node.firstChild;
        while (child) {
          node2.appendChild(cloneNode(doc, child, deep));
          child = child.nextSibling;
        }
      }
      return node2;
    }
    function __set__(object, key, value) {
      object[key] = value;
    }
    try {
      if (Object.defineProperty) {
        let getTextContent = function(node) {
          switch (node.nodeType) {
            case ELEMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE:
              var buf = [];
              node = node.firstChild;
              while (node) {
                if (node.nodeType !== 7 && node.nodeType !== 8) {
                  buf.push(getTextContent(node));
                }
                node = node.nextSibling;
              }
              return buf.join("");
            default:
              return node.nodeValue;
          }
        };
        Object.defineProperty(LiveNodeList.prototype, "length", {
          get: function() {
            _updateLiveList(this);
            return this.$$length;
          }
        });
        Object.defineProperty(Node.prototype, "textContent", {
          get: function() {
            return getTextContent(this);
          },
          set: function(data) {
            switch (this.nodeType) {
              case ELEMENT_NODE:
              case DOCUMENT_FRAGMENT_NODE:
                while (this.firstChild) {
                  this.removeChild(this.firstChild);
                }
                if (data || String(data)) {
                  this.appendChild(this.ownerDocument.createTextNode(data));
                }
                break;
              default:
                this.data = data;
                this.value = data;
                this.nodeValue = data;
            }
          }
        });
        __set__ = function(object, key, value) {
          object["$$" + key] = value;
        };
      }
    } catch (e3) {
    }
    exports._updateLiveList = _updateLiveList;
    exports.Attr = Attr;
    exports.CDATASection = CDATASection;
    exports.CharacterData = CharacterData;
    exports.Comment = Comment;
    exports.Document = Document;
    exports.DocumentFragment = DocumentFragment;
    exports.DocumentType = DocumentType;
    exports.DOMImplementation = DOMImplementation;
    exports.Element = Element;
    exports.Entity = Entity;
    exports.EntityReference = EntityReference;
    exports.LiveNodeList = LiveNodeList;
    exports.NamedNodeMap = NamedNodeMap;
    exports.Node = Node;
    exports.NodeList = NodeList;
    exports.Notation = Notation;
    exports.Text = Text;
    exports.ProcessingInstruction = ProcessingInstruction;
    exports.XMLSerializer = XMLSerializer;
  }
});

// ../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/entities.js
var require_entities = __commonJS({
  "../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/entities.js"(exports) {
    "use strict";
    init_esm();
    var freeze2 = require_conventions().freeze;
    exports.XML_ENTITIES = freeze2({
      amp: "&",
      apos: "'",
      gt: ">",
      lt: "<",
      quot: '"'
    });
    exports.HTML_ENTITIES = freeze2({
      Aacute: "Á",
      aacute: "á",
      Abreve: "Ă",
      abreve: "ă",
      ac: "∾",
      acd: "∿",
      acE: "∾̳",
      Acirc: "Â",
      acirc: "â",
      acute: "´",
      Acy: "А",
      acy: "а",
      AElig: "Æ",
      aelig: "æ",
      af: "⁡",
      Afr: "𝔄",
      afr: "𝔞",
      Agrave: "À",
      agrave: "à",
      alefsym: "ℵ",
      aleph: "ℵ",
      Alpha: "Α",
      alpha: "α",
      Amacr: "Ā",
      amacr: "ā",
      amalg: "⨿",
      AMP: "&",
      amp: "&",
      And: "⩓",
      and: "∧",
      andand: "⩕",
      andd: "⩜",
      andslope: "⩘",
      andv: "⩚",
      ang: "∠",
      ange: "⦤",
      angle: "∠",
      angmsd: "∡",
      angmsdaa: "⦨",
      angmsdab: "⦩",
      angmsdac: "⦪",
      angmsdad: "⦫",
      angmsdae: "⦬",
      angmsdaf: "⦭",
      angmsdag: "⦮",
      angmsdah: "⦯",
      angrt: "∟",
      angrtvb: "⊾",
      angrtvbd: "⦝",
      angsph: "∢",
      angst: "Å",
      angzarr: "⍼",
      Aogon: "Ą",
      aogon: "ą",
      Aopf: "𝔸",
      aopf: "𝕒",
      ap: "≈",
      apacir: "⩯",
      apE: "⩰",
      ape: "≊",
      apid: "≋",
      apos: "'",
      ApplyFunction: "⁡",
      approx: "≈",
      approxeq: "≊",
      Aring: "Å",
      aring: "å",
      Ascr: "𝒜",
      ascr: "𝒶",
      Assign: "≔",
      ast: "*",
      asymp: "≈",
      asympeq: "≍",
      Atilde: "Ã",
      atilde: "ã",
      Auml: "Ä",
      auml: "ä",
      awconint: "∳",
      awint: "⨑",
      backcong: "≌",
      backepsilon: "϶",
      backprime: "‵",
      backsim: "∽",
      backsimeq: "⋍",
      Backslash: "∖",
      Barv: "⫧",
      barvee: "⊽",
      Barwed: "⌆",
      barwed: "⌅",
      barwedge: "⌅",
      bbrk: "⎵",
      bbrktbrk: "⎶",
      bcong: "≌",
      Bcy: "Б",
      bcy: "б",
      bdquo: "„",
      becaus: "∵",
      Because: "∵",
      because: "∵",
      bemptyv: "⦰",
      bepsi: "϶",
      bernou: "ℬ",
      Bernoullis: "ℬ",
      Beta: "Β",
      beta: "β",
      beth: "ℶ",
      between: "≬",
      Bfr: "𝔅",
      bfr: "𝔟",
      bigcap: "⋂",
      bigcirc: "◯",
      bigcup: "⋃",
      bigodot: "⨀",
      bigoplus: "⨁",
      bigotimes: "⨂",
      bigsqcup: "⨆",
      bigstar: "★",
      bigtriangledown: "▽",
      bigtriangleup: "△",
      biguplus: "⨄",
      bigvee: "⋁",
      bigwedge: "⋀",
      bkarow: "⤍",
      blacklozenge: "⧫",
      blacksquare: "▪",
      blacktriangle: "▴",
      blacktriangledown: "▾",
      blacktriangleleft: "◂",
      blacktriangleright: "▸",
      blank: "␣",
      blk12: "▒",
      blk14: "░",
      blk34: "▓",
      block: "█",
      bne: "=⃥",
      bnequiv: "≡⃥",
      bNot: "⫭",
      bnot: "⌐",
      Bopf: "𝔹",
      bopf: "𝕓",
      bot: "⊥",
      bottom: "⊥",
      bowtie: "⋈",
      boxbox: "⧉",
      boxDL: "╗",
      boxDl: "╖",
      boxdL: "╕",
      boxdl: "┐",
      boxDR: "╔",
      boxDr: "╓",
      boxdR: "╒",
      boxdr: "┌",
      boxH: "═",
      boxh: "─",
      boxHD: "╦",
      boxHd: "╤",
      boxhD: "╥",
      boxhd: "┬",
      boxHU: "╩",
      boxHu: "╧",
      boxhU: "╨",
      boxhu: "┴",
      boxminus: "⊟",
      boxplus: "⊞",
      boxtimes: "⊠",
      boxUL: "╝",
      boxUl: "╜",
      boxuL: "╛",
      boxul: "┘",
      boxUR: "╚",
      boxUr: "╙",
      boxuR: "╘",
      boxur: "└",
      boxV: "║",
      boxv: "│",
      boxVH: "╬",
      boxVh: "╫",
      boxvH: "╪",
      boxvh: "┼",
      boxVL: "╣",
      boxVl: "╢",
      boxvL: "╡",
      boxvl: "┤",
      boxVR: "╠",
      boxVr: "╟",
      boxvR: "╞",
      boxvr: "├",
      bprime: "‵",
      Breve: "˘",
      breve: "˘",
      brvbar: "¦",
      Bscr: "ℬ",
      bscr: "𝒷",
      bsemi: "⁏",
      bsim: "∽",
      bsime: "⋍",
      bsol: "\\",
      bsolb: "⧅",
      bsolhsub: "⟈",
      bull: "•",
      bullet: "•",
      bump: "≎",
      bumpE: "⪮",
      bumpe: "≏",
      Bumpeq: "≎",
      bumpeq: "≏",
      Cacute: "Ć",
      cacute: "ć",
      Cap: "⋒",
      cap: "∩",
      capand: "⩄",
      capbrcup: "⩉",
      capcap: "⩋",
      capcup: "⩇",
      capdot: "⩀",
      CapitalDifferentialD: "ⅅ",
      caps: "∩︀",
      caret: "⁁",
      caron: "ˇ",
      Cayleys: "ℭ",
      ccaps: "⩍",
      Ccaron: "Č",
      ccaron: "č",
      Ccedil: "Ç",
      ccedil: "ç",
      Ccirc: "Ĉ",
      ccirc: "ĉ",
      Cconint: "∰",
      ccups: "⩌",
      ccupssm: "⩐",
      Cdot: "Ċ",
      cdot: "ċ",
      cedil: "¸",
      Cedilla: "¸",
      cemptyv: "⦲",
      cent: "¢",
      CenterDot: "·",
      centerdot: "·",
      Cfr: "ℭ",
      cfr: "𝔠",
      CHcy: "Ч",
      chcy: "ч",
      check: "✓",
      checkmark: "✓",
      Chi: "Χ",
      chi: "χ",
      cir: "○",
      circ: "ˆ",
      circeq: "≗",
      circlearrowleft: "↺",
      circlearrowright: "↻",
      circledast: "⊛",
      circledcirc: "⊚",
      circleddash: "⊝",
      CircleDot: "⊙",
      circledR: "®",
      circledS: "Ⓢ",
      CircleMinus: "⊖",
      CirclePlus: "⊕",
      CircleTimes: "⊗",
      cirE: "⧃",
      cire: "≗",
      cirfnint: "⨐",
      cirmid: "⫯",
      cirscir: "⧂",
      ClockwiseContourIntegral: "∲",
      CloseCurlyDoubleQuote: "”",
      CloseCurlyQuote: "’",
      clubs: "♣",
      clubsuit: "♣",
      Colon: "∷",
      colon: ":",
      Colone: "⩴",
      colone: "≔",
      coloneq: "≔",
      comma: ",",
      commat: "@",
      comp: "∁",
      compfn: "∘",
      complement: "∁",
      complexes: "ℂ",
      cong: "≅",
      congdot: "⩭",
      Congruent: "≡",
      Conint: "∯",
      conint: "∮",
      ContourIntegral: "∮",
      Copf: "ℂ",
      copf: "𝕔",
      coprod: "∐",
      Coproduct: "∐",
      COPY: "©",
      copy: "©",
      copysr: "℗",
      CounterClockwiseContourIntegral: "∳",
      crarr: "↵",
      Cross: "⨯",
      cross: "✗",
      Cscr: "𝒞",
      cscr: "𝒸",
      csub: "⫏",
      csube: "⫑",
      csup: "⫐",
      csupe: "⫒",
      ctdot: "⋯",
      cudarrl: "⤸",
      cudarrr: "⤵",
      cuepr: "⋞",
      cuesc: "⋟",
      cularr: "↶",
      cularrp: "⤽",
      Cup: "⋓",
      cup: "∪",
      cupbrcap: "⩈",
      CupCap: "≍",
      cupcap: "⩆",
      cupcup: "⩊",
      cupdot: "⊍",
      cupor: "⩅",
      cups: "∪︀",
      curarr: "↷",
      curarrm: "⤼",
      curlyeqprec: "⋞",
      curlyeqsucc: "⋟",
      curlyvee: "⋎",
      curlywedge: "⋏",
      curren: "¤",
      curvearrowleft: "↶",
      curvearrowright: "↷",
      cuvee: "⋎",
      cuwed: "⋏",
      cwconint: "∲",
      cwint: "∱",
      cylcty: "⌭",
      Dagger: "‡",
      dagger: "†",
      daleth: "ℸ",
      Darr: "↡",
      dArr: "⇓",
      darr: "↓",
      dash: "‐",
      Dashv: "⫤",
      dashv: "⊣",
      dbkarow: "⤏",
      dblac: "˝",
      Dcaron: "Ď",
      dcaron: "ď",
      Dcy: "Д",
      dcy: "д",
      DD: "ⅅ",
      dd: "ⅆ",
      ddagger: "‡",
      ddarr: "⇊",
      DDotrahd: "⤑",
      ddotseq: "⩷",
      deg: "°",
      Del: "∇",
      Delta: "Δ",
      delta: "δ",
      demptyv: "⦱",
      dfisht: "⥿",
      Dfr: "𝔇",
      dfr: "𝔡",
      dHar: "⥥",
      dharl: "⇃",
      dharr: "⇂",
      DiacriticalAcute: "´",
      DiacriticalDot: "˙",
      DiacriticalDoubleAcute: "˝",
      DiacriticalGrave: "`",
      DiacriticalTilde: "˜",
      diam: "⋄",
      Diamond: "⋄",
      diamond: "⋄",
      diamondsuit: "♦",
      diams: "♦",
      die: "¨",
      DifferentialD: "ⅆ",
      digamma: "ϝ",
      disin: "⋲",
      div: "÷",
      divide: "÷",
      divideontimes: "⋇",
      divonx: "⋇",
      DJcy: "Ђ",
      djcy: "ђ",
      dlcorn: "⌞",
      dlcrop: "⌍",
      dollar: "$",
      Dopf: "𝔻",
      dopf: "𝕕",
      Dot: "¨",
      dot: "˙",
      DotDot: "⃜",
      doteq: "≐",
      doteqdot: "≑",
      DotEqual: "≐",
      dotminus: "∸",
      dotplus: "∔",
      dotsquare: "⊡",
      doublebarwedge: "⌆",
      DoubleContourIntegral: "∯",
      DoubleDot: "¨",
      DoubleDownArrow: "⇓",
      DoubleLeftArrow: "⇐",
      DoubleLeftRightArrow: "⇔",
      DoubleLeftTee: "⫤",
      DoubleLongLeftArrow: "⟸",
      DoubleLongLeftRightArrow: "⟺",
      DoubleLongRightArrow: "⟹",
      DoubleRightArrow: "⇒",
      DoubleRightTee: "⊨",
      DoubleUpArrow: "⇑",
      DoubleUpDownArrow: "⇕",
      DoubleVerticalBar: "∥",
      DownArrow: "↓",
      Downarrow: "⇓",
      downarrow: "↓",
      DownArrowBar: "⤓",
      DownArrowUpArrow: "⇵",
      DownBreve: "̑",
      downdownarrows: "⇊",
      downharpoonleft: "⇃",
      downharpoonright: "⇂",
      DownLeftRightVector: "⥐",
      DownLeftTeeVector: "⥞",
      DownLeftVector: "↽",
      DownLeftVectorBar: "⥖",
      DownRightTeeVector: "⥟",
      DownRightVector: "⇁",
      DownRightVectorBar: "⥗",
      DownTee: "⊤",
      DownTeeArrow: "↧",
      drbkarow: "⤐",
      drcorn: "⌟",
      drcrop: "⌌",
      Dscr: "𝒟",
      dscr: "𝒹",
      DScy: "Ѕ",
      dscy: "ѕ",
      dsol: "⧶",
      Dstrok: "Đ",
      dstrok: "đ",
      dtdot: "⋱",
      dtri: "▿",
      dtrif: "▾",
      duarr: "⇵",
      duhar: "⥯",
      dwangle: "⦦",
      DZcy: "Џ",
      dzcy: "џ",
      dzigrarr: "⟿",
      Eacute: "É",
      eacute: "é",
      easter: "⩮",
      Ecaron: "Ě",
      ecaron: "ě",
      ecir: "≖",
      Ecirc: "Ê",
      ecirc: "ê",
      ecolon: "≕",
      Ecy: "Э",
      ecy: "э",
      eDDot: "⩷",
      Edot: "Ė",
      eDot: "≑",
      edot: "ė",
      ee: "ⅇ",
      efDot: "≒",
      Efr: "𝔈",
      efr: "𝔢",
      eg: "⪚",
      Egrave: "È",
      egrave: "è",
      egs: "⪖",
      egsdot: "⪘",
      el: "⪙",
      Element: "∈",
      elinters: "⏧",
      ell: "ℓ",
      els: "⪕",
      elsdot: "⪗",
      Emacr: "Ē",
      emacr: "ē",
      empty: "∅",
      emptyset: "∅",
      EmptySmallSquare: "◻",
      emptyv: "∅",
      EmptyVerySmallSquare: "▫",
      emsp: " ",
      emsp13: " ",
      emsp14: " ",
      ENG: "Ŋ",
      eng: "ŋ",
      ensp: " ",
      Eogon: "Ę",
      eogon: "ę",
      Eopf: "𝔼",
      eopf: "𝕖",
      epar: "⋕",
      eparsl: "⧣",
      eplus: "⩱",
      epsi: "ε",
      Epsilon: "Ε",
      epsilon: "ε",
      epsiv: "ϵ",
      eqcirc: "≖",
      eqcolon: "≕",
      eqsim: "≂",
      eqslantgtr: "⪖",
      eqslantless: "⪕",
      Equal: "⩵",
      equals: "=",
      EqualTilde: "≂",
      equest: "≟",
      Equilibrium: "⇌",
      equiv: "≡",
      equivDD: "⩸",
      eqvparsl: "⧥",
      erarr: "⥱",
      erDot: "≓",
      Escr: "ℰ",
      escr: "ℯ",
      esdot: "≐",
      Esim: "⩳",
      esim: "≂",
      Eta: "Η",
      eta: "η",
      ETH: "Ð",
      eth: "ð",
      Euml: "Ë",
      euml: "ë",
      euro: "€",
      excl: "!",
      exist: "∃",
      Exists: "∃",
      expectation: "ℰ",
      ExponentialE: "ⅇ",
      exponentiale: "ⅇ",
      fallingdotseq: "≒",
      Fcy: "Ф",
      fcy: "ф",
      female: "♀",
      ffilig: "ﬃ",
      fflig: "ﬀ",
      ffllig: "ﬄ",
      Ffr: "𝔉",
      ffr: "𝔣",
      filig: "ﬁ",
      FilledSmallSquare: "◼",
      FilledVerySmallSquare: "▪",
      fjlig: "fj",
      flat: "♭",
      fllig: "ﬂ",
      fltns: "▱",
      fnof: "ƒ",
      Fopf: "𝔽",
      fopf: "𝕗",
      ForAll: "∀",
      forall: "∀",
      fork: "⋔",
      forkv: "⫙",
      Fouriertrf: "ℱ",
      fpartint: "⨍",
      frac12: "½",
      frac13: "⅓",
      frac14: "¼",
      frac15: "⅕",
      frac16: "⅙",
      frac18: "⅛",
      frac23: "⅔",
      frac25: "⅖",
      frac34: "¾",
      frac35: "⅗",
      frac38: "⅜",
      frac45: "⅘",
      frac56: "⅚",
      frac58: "⅝",
      frac78: "⅞",
      frasl: "⁄",
      frown: "⌢",
      Fscr: "ℱ",
      fscr: "𝒻",
      gacute: "ǵ",
      Gamma: "Γ",
      gamma: "γ",
      Gammad: "Ϝ",
      gammad: "ϝ",
      gap: "⪆",
      Gbreve: "Ğ",
      gbreve: "ğ",
      Gcedil: "Ģ",
      Gcirc: "Ĝ",
      gcirc: "ĝ",
      Gcy: "Г",
      gcy: "г",
      Gdot: "Ġ",
      gdot: "ġ",
      gE: "≧",
      ge: "≥",
      gEl: "⪌",
      gel: "⋛",
      geq: "≥",
      geqq: "≧",
      geqslant: "⩾",
      ges: "⩾",
      gescc: "⪩",
      gesdot: "⪀",
      gesdoto: "⪂",
      gesdotol: "⪄",
      gesl: "⋛︀",
      gesles: "⪔",
      Gfr: "𝔊",
      gfr: "𝔤",
      Gg: "⋙",
      gg: "≫",
      ggg: "⋙",
      gimel: "ℷ",
      GJcy: "Ѓ",
      gjcy: "ѓ",
      gl: "≷",
      gla: "⪥",
      glE: "⪒",
      glj: "⪤",
      gnap: "⪊",
      gnapprox: "⪊",
      gnE: "≩",
      gne: "⪈",
      gneq: "⪈",
      gneqq: "≩",
      gnsim: "⋧",
      Gopf: "𝔾",
      gopf: "𝕘",
      grave: "`",
      GreaterEqual: "≥",
      GreaterEqualLess: "⋛",
      GreaterFullEqual: "≧",
      GreaterGreater: "⪢",
      GreaterLess: "≷",
      GreaterSlantEqual: "⩾",
      GreaterTilde: "≳",
      Gscr: "𝒢",
      gscr: "ℊ",
      gsim: "≳",
      gsime: "⪎",
      gsiml: "⪐",
      Gt: "≫",
      GT: ">",
      gt: ">",
      gtcc: "⪧",
      gtcir: "⩺",
      gtdot: "⋗",
      gtlPar: "⦕",
      gtquest: "⩼",
      gtrapprox: "⪆",
      gtrarr: "⥸",
      gtrdot: "⋗",
      gtreqless: "⋛",
      gtreqqless: "⪌",
      gtrless: "≷",
      gtrsim: "≳",
      gvertneqq: "≩︀",
      gvnE: "≩︀",
      Hacek: "ˇ",
      hairsp: " ",
      half: "½",
      hamilt: "ℋ",
      HARDcy: "Ъ",
      hardcy: "ъ",
      hArr: "⇔",
      harr: "↔",
      harrcir: "⥈",
      harrw: "↭",
      Hat: "^",
      hbar: "ℏ",
      Hcirc: "Ĥ",
      hcirc: "ĥ",
      hearts: "♥",
      heartsuit: "♥",
      hellip: "…",
      hercon: "⊹",
      Hfr: "ℌ",
      hfr: "𝔥",
      HilbertSpace: "ℋ",
      hksearow: "⤥",
      hkswarow: "⤦",
      hoarr: "⇿",
      homtht: "∻",
      hookleftarrow: "↩",
      hookrightarrow: "↪",
      Hopf: "ℍ",
      hopf: "𝕙",
      horbar: "―",
      HorizontalLine: "─",
      Hscr: "ℋ",
      hscr: "𝒽",
      hslash: "ℏ",
      Hstrok: "Ħ",
      hstrok: "ħ",
      HumpDownHump: "≎",
      HumpEqual: "≏",
      hybull: "⁃",
      hyphen: "‐",
      Iacute: "Í",
      iacute: "í",
      ic: "⁣",
      Icirc: "Î",
      icirc: "î",
      Icy: "И",
      icy: "и",
      Idot: "İ",
      IEcy: "Е",
      iecy: "е",
      iexcl: "¡",
      iff: "⇔",
      Ifr: "ℑ",
      ifr: "𝔦",
      Igrave: "Ì",
      igrave: "ì",
      ii: "ⅈ",
      iiiint: "⨌",
      iiint: "∭",
      iinfin: "⧜",
      iiota: "℩",
      IJlig: "Ĳ",
      ijlig: "ĳ",
      Im: "ℑ",
      Imacr: "Ī",
      imacr: "ī",
      image: "ℑ",
      ImaginaryI: "ⅈ",
      imagline: "ℐ",
      imagpart: "ℑ",
      imath: "ı",
      imof: "⊷",
      imped: "Ƶ",
      Implies: "⇒",
      in: "∈",
      incare: "℅",
      infin: "∞",
      infintie: "⧝",
      inodot: "ı",
      Int: "∬",
      int: "∫",
      intcal: "⊺",
      integers: "ℤ",
      Integral: "∫",
      intercal: "⊺",
      Intersection: "⋂",
      intlarhk: "⨗",
      intprod: "⨼",
      InvisibleComma: "⁣",
      InvisibleTimes: "⁢",
      IOcy: "Ё",
      iocy: "ё",
      Iogon: "Į",
      iogon: "į",
      Iopf: "𝕀",
      iopf: "𝕚",
      Iota: "Ι",
      iota: "ι",
      iprod: "⨼",
      iquest: "¿",
      Iscr: "ℐ",
      iscr: "𝒾",
      isin: "∈",
      isindot: "⋵",
      isinE: "⋹",
      isins: "⋴",
      isinsv: "⋳",
      isinv: "∈",
      it: "⁢",
      Itilde: "Ĩ",
      itilde: "ĩ",
      Iukcy: "І",
      iukcy: "і",
      Iuml: "Ï",
      iuml: "ï",
      Jcirc: "Ĵ",
      jcirc: "ĵ",
      Jcy: "Й",
      jcy: "й",
      Jfr: "𝔍",
      jfr: "𝔧",
      jmath: "ȷ",
      Jopf: "𝕁",
      jopf: "𝕛",
      Jscr: "𝒥",
      jscr: "𝒿",
      Jsercy: "Ј",
      jsercy: "ј",
      Jukcy: "Є",
      jukcy: "є",
      Kappa: "Κ",
      kappa: "κ",
      kappav: "ϰ",
      Kcedil: "Ķ",
      kcedil: "ķ",
      Kcy: "К",
      kcy: "к",
      Kfr: "𝔎",
      kfr: "𝔨",
      kgreen: "ĸ",
      KHcy: "Х",
      khcy: "х",
      KJcy: "Ќ",
      kjcy: "ќ",
      Kopf: "𝕂",
      kopf: "𝕜",
      Kscr: "𝒦",
      kscr: "𝓀",
      lAarr: "⇚",
      Lacute: "Ĺ",
      lacute: "ĺ",
      laemptyv: "⦴",
      lagran: "ℒ",
      Lambda: "Λ",
      lambda: "λ",
      Lang: "⟪",
      lang: "⟨",
      langd: "⦑",
      langle: "⟨",
      lap: "⪅",
      Laplacetrf: "ℒ",
      laquo: "«",
      Larr: "↞",
      lArr: "⇐",
      larr: "←",
      larrb: "⇤",
      larrbfs: "⤟",
      larrfs: "⤝",
      larrhk: "↩",
      larrlp: "↫",
      larrpl: "⤹",
      larrsim: "⥳",
      larrtl: "↢",
      lat: "⪫",
      lAtail: "⤛",
      latail: "⤙",
      late: "⪭",
      lates: "⪭︀",
      lBarr: "⤎",
      lbarr: "⤌",
      lbbrk: "❲",
      lbrace: "{",
      lbrack: "[",
      lbrke: "⦋",
      lbrksld: "⦏",
      lbrkslu: "⦍",
      Lcaron: "Ľ",
      lcaron: "ľ",
      Lcedil: "Ļ",
      lcedil: "ļ",
      lceil: "⌈",
      lcub: "{",
      Lcy: "Л",
      lcy: "л",
      ldca: "⤶",
      ldquo: "“",
      ldquor: "„",
      ldrdhar: "⥧",
      ldrushar: "⥋",
      ldsh: "↲",
      lE: "≦",
      le: "≤",
      LeftAngleBracket: "⟨",
      LeftArrow: "←",
      Leftarrow: "⇐",
      leftarrow: "←",
      LeftArrowBar: "⇤",
      LeftArrowRightArrow: "⇆",
      leftarrowtail: "↢",
      LeftCeiling: "⌈",
      LeftDoubleBracket: "⟦",
      LeftDownTeeVector: "⥡",
      LeftDownVector: "⇃",
      LeftDownVectorBar: "⥙",
      LeftFloor: "⌊",
      leftharpoondown: "↽",
      leftharpoonup: "↼",
      leftleftarrows: "⇇",
      LeftRightArrow: "↔",
      Leftrightarrow: "⇔",
      leftrightarrow: "↔",
      leftrightarrows: "⇆",
      leftrightharpoons: "⇋",
      leftrightsquigarrow: "↭",
      LeftRightVector: "⥎",
      LeftTee: "⊣",
      LeftTeeArrow: "↤",
      LeftTeeVector: "⥚",
      leftthreetimes: "⋋",
      LeftTriangle: "⊲",
      LeftTriangleBar: "⧏",
      LeftTriangleEqual: "⊴",
      LeftUpDownVector: "⥑",
      LeftUpTeeVector: "⥠",
      LeftUpVector: "↿",
      LeftUpVectorBar: "⥘",
      LeftVector: "↼",
      LeftVectorBar: "⥒",
      lEg: "⪋",
      leg: "⋚",
      leq: "≤",
      leqq: "≦",
      leqslant: "⩽",
      les: "⩽",
      lescc: "⪨",
      lesdot: "⩿",
      lesdoto: "⪁",
      lesdotor: "⪃",
      lesg: "⋚︀",
      lesges: "⪓",
      lessapprox: "⪅",
      lessdot: "⋖",
      lesseqgtr: "⋚",
      lesseqqgtr: "⪋",
      LessEqualGreater: "⋚",
      LessFullEqual: "≦",
      LessGreater: "≶",
      lessgtr: "≶",
      LessLess: "⪡",
      lesssim: "≲",
      LessSlantEqual: "⩽",
      LessTilde: "≲",
      lfisht: "⥼",
      lfloor: "⌊",
      Lfr: "𝔏",
      lfr: "𝔩",
      lg: "≶",
      lgE: "⪑",
      lHar: "⥢",
      lhard: "↽",
      lharu: "↼",
      lharul: "⥪",
      lhblk: "▄",
      LJcy: "Љ",
      ljcy: "љ",
      Ll: "⋘",
      ll: "≪",
      llarr: "⇇",
      llcorner: "⌞",
      Lleftarrow: "⇚",
      llhard: "⥫",
      lltri: "◺",
      Lmidot: "Ŀ",
      lmidot: "ŀ",
      lmoust: "⎰",
      lmoustache: "⎰",
      lnap: "⪉",
      lnapprox: "⪉",
      lnE: "≨",
      lne: "⪇",
      lneq: "⪇",
      lneqq: "≨",
      lnsim: "⋦",
      loang: "⟬",
      loarr: "⇽",
      lobrk: "⟦",
      LongLeftArrow: "⟵",
      Longleftarrow: "⟸",
      longleftarrow: "⟵",
      LongLeftRightArrow: "⟷",
      Longleftrightarrow: "⟺",
      longleftrightarrow: "⟷",
      longmapsto: "⟼",
      LongRightArrow: "⟶",
      Longrightarrow: "⟹",
      longrightarrow: "⟶",
      looparrowleft: "↫",
      looparrowright: "↬",
      lopar: "⦅",
      Lopf: "𝕃",
      lopf: "𝕝",
      loplus: "⨭",
      lotimes: "⨴",
      lowast: "∗",
      lowbar: "_",
      LowerLeftArrow: "↙",
      LowerRightArrow: "↘",
      loz: "◊",
      lozenge: "◊",
      lozf: "⧫",
      lpar: "(",
      lparlt: "⦓",
      lrarr: "⇆",
      lrcorner: "⌟",
      lrhar: "⇋",
      lrhard: "⥭",
      lrm: "‎",
      lrtri: "⊿",
      lsaquo: "‹",
      Lscr: "ℒ",
      lscr: "𝓁",
      Lsh: "↰",
      lsh: "↰",
      lsim: "≲",
      lsime: "⪍",
      lsimg: "⪏",
      lsqb: "[",
      lsquo: "‘",
      lsquor: "‚",
      Lstrok: "Ł",
      lstrok: "ł",
      Lt: "≪",
      LT: "<",
      lt: "<",
      ltcc: "⪦",
      ltcir: "⩹",
      ltdot: "⋖",
      lthree: "⋋",
      ltimes: "⋉",
      ltlarr: "⥶",
      ltquest: "⩻",
      ltri: "◃",
      ltrie: "⊴",
      ltrif: "◂",
      ltrPar: "⦖",
      lurdshar: "⥊",
      luruhar: "⥦",
      lvertneqq: "≨︀",
      lvnE: "≨︀",
      macr: "¯",
      male: "♂",
      malt: "✠",
      maltese: "✠",
      Map: "⤅",
      map: "↦",
      mapsto: "↦",
      mapstodown: "↧",
      mapstoleft: "↤",
      mapstoup: "↥",
      marker: "▮",
      mcomma: "⨩",
      Mcy: "М",
      mcy: "м",
      mdash: "—",
      mDDot: "∺",
      measuredangle: "∡",
      MediumSpace: " ",
      Mellintrf: "ℳ",
      Mfr: "𝔐",
      mfr: "𝔪",
      mho: "℧",
      micro: "µ",
      mid: "∣",
      midast: "*",
      midcir: "⫰",
      middot: "·",
      minus: "−",
      minusb: "⊟",
      minusd: "∸",
      minusdu: "⨪",
      MinusPlus: "∓",
      mlcp: "⫛",
      mldr: "…",
      mnplus: "∓",
      models: "⊧",
      Mopf: "𝕄",
      mopf: "𝕞",
      mp: "∓",
      Mscr: "ℳ",
      mscr: "𝓂",
      mstpos: "∾",
      Mu: "Μ",
      mu: "μ",
      multimap: "⊸",
      mumap: "⊸",
      nabla: "∇",
      Nacute: "Ń",
      nacute: "ń",
      nang: "∠⃒",
      nap: "≉",
      napE: "⩰̸",
      napid: "≋̸",
      napos: "ŉ",
      napprox: "≉",
      natur: "♮",
      natural: "♮",
      naturals: "ℕ",
      nbsp: " ",
      nbump: "≎̸",
      nbumpe: "≏̸",
      ncap: "⩃",
      Ncaron: "Ň",
      ncaron: "ň",
      Ncedil: "Ņ",
      ncedil: "ņ",
      ncong: "≇",
      ncongdot: "⩭̸",
      ncup: "⩂",
      Ncy: "Н",
      ncy: "н",
      ndash: "–",
      ne: "≠",
      nearhk: "⤤",
      neArr: "⇗",
      nearr: "↗",
      nearrow: "↗",
      nedot: "≐̸",
      NegativeMediumSpace: "​",
      NegativeThickSpace: "​",
      NegativeThinSpace: "​",
      NegativeVeryThinSpace: "​",
      nequiv: "≢",
      nesear: "⤨",
      nesim: "≂̸",
      NestedGreaterGreater: "≫",
      NestedLessLess: "≪",
      NewLine: "\n",
      nexist: "∄",
      nexists: "∄",
      Nfr: "𝔑",
      nfr: "𝔫",
      ngE: "≧̸",
      nge: "≱",
      ngeq: "≱",
      ngeqq: "≧̸",
      ngeqslant: "⩾̸",
      nges: "⩾̸",
      nGg: "⋙̸",
      ngsim: "≵",
      nGt: "≫⃒",
      ngt: "≯",
      ngtr: "≯",
      nGtv: "≫̸",
      nhArr: "⇎",
      nharr: "↮",
      nhpar: "⫲",
      ni: "∋",
      nis: "⋼",
      nisd: "⋺",
      niv: "∋",
      NJcy: "Њ",
      njcy: "њ",
      nlArr: "⇍",
      nlarr: "↚",
      nldr: "‥",
      nlE: "≦̸",
      nle: "≰",
      nLeftarrow: "⇍",
      nleftarrow: "↚",
      nLeftrightarrow: "⇎",
      nleftrightarrow: "↮",
      nleq: "≰",
      nleqq: "≦̸",
      nleqslant: "⩽̸",
      nles: "⩽̸",
      nless: "≮",
      nLl: "⋘̸",
      nlsim: "≴",
      nLt: "≪⃒",
      nlt: "≮",
      nltri: "⋪",
      nltrie: "⋬",
      nLtv: "≪̸",
      nmid: "∤",
      NoBreak: "⁠",
      NonBreakingSpace: " ",
      Nopf: "ℕ",
      nopf: "𝕟",
      Not: "⫬",
      not: "¬",
      NotCongruent: "≢",
      NotCupCap: "≭",
      NotDoubleVerticalBar: "∦",
      NotElement: "∉",
      NotEqual: "≠",
      NotEqualTilde: "≂̸",
      NotExists: "∄",
      NotGreater: "≯",
      NotGreaterEqual: "≱",
      NotGreaterFullEqual: "≧̸",
      NotGreaterGreater: "≫̸",
      NotGreaterLess: "≹",
      NotGreaterSlantEqual: "⩾̸",
      NotGreaterTilde: "≵",
      NotHumpDownHump: "≎̸",
      NotHumpEqual: "≏̸",
      notin: "∉",
      notindot: "⋵̸",
      notinE: "⋹̸",
      notinva: "∉",
      notinvb: "⋷",
      notinvc: "⋶",
      NotLeftTriangle: "⋪",
      NotLeftTriangleBar: "⧏̸",
      NotLeftTriangleEqual: "⋬",
      NotLess: "≮",
      NotLessEqual: "≰",
      NotLessGreater: "≸",
      NotLessLess: "≪̸",
      NotLessSlantEqual: "⩽̸",
      NotLessTilde: "≴",
      NotNestedGreaterGreater: "⪢̸",
      NotNestedLessLess: "⪡̸",
      notni: "∌",
      notniva: "∌",
      notnivb: "⋾",
      notnivc: "⋽",
      NotPrecedes: "⊀",
      NotPrecedesEqual: "⪯̸",
      NotPrecedesSlantEqual: "⋠",
      NotReverseElement: "∌",
      NotRightTriangle: "⋫",
      NotRightTriangleBar: "⧐̸",
      NotRightTriangleEqual: "⋭",
      NotSquareSubset: "⊏̸",
      NotSquareSubsetEqual: "⋢",
      NotSquareSuperset: "⊐̸",
      NotSquareSupersetEqual: "⋣",
      NotSubset: "⊂⃒",
      NotSubsetEqual: "⊈",
      NotSucceeds: "⊁",
      NotSucceedsEqual: "⪰̸",
      NotSucceedsSlantEqual: "⋡",
      NotSucceedsTilde: "≿̸",
      NotSuperset: "⊃⃒",
      NotSupersetEqual: "⊉",
      NotTilde: "≁",
      NotTildeEqual: "≄",
      NotTildeFullEqual: "≇",
      NotTildeTilde: "≉",
      NotVerticalBar: "∤",
      npar: "∦",
      nparallel: "∦",
      nparsl: "⫽⃥",
      npart: "∂̸",
      npolint: "⨔",
      npr: "⊀",
      nprcue: "⋠",
      npre: "⪯̸",
      nprec: "⊀",
      npreceq: "⪯̸",
      nrArr: "⇏",
      nrarr: "↛",
      nrarrc: "⤳̸",
      nrarrw: "↝̸",
      nRightarrow: "⇏",
      nrightarrow: "↛",
      nrtri: "⋫",
      nrtrie: "⋭",
      nsc: "⊁",
      nsccue: "⋡",
      nsce: "⪰̸",
      Nscr: "𝒩",
      nscr: "𝓃",
      nshortmid: "∤",
      nshortparallel: "∦",
      nsim: "≁",
      nsime: "≄",
      nsimeq: "≄",
      nsmid: "∤",
      nspar: "∦",
      nsqsube: "⋢",
      nsqsupe: "⋣",
      nsub: "⊄",
      nsubE: "⫅̸",
      nsube: "⊈",
      nsubset: "⊂⃒",
      nsubseteq: "⊈",
      nsubseteqq: "⫅̸",
      nsucc: "⊁",
      nsucceq: "⪰̸",
      nsup: "⊅",
      nsupE: "⫆̸",
      nsupe: "⊉",
      nsupset: "⊃⃒",
      nsupseteq: "⊉",
      nsupseteqq: "⫆̸",
      ntgl: "≹",
      Ntilde: "Ñ",
      ntilde: "ñ",
      ntlg: "≸",
      ntriangleleft: "⋪",
      ntrianglelefteq: "⋬",
      ntriangleright: "⋫",
      ntrianglerighteq: "⋭",
      Nu: "Ν",
      nu: "ν",
      num: "#",
      numero: "№",
      numsp: " ",
      nvap: "≍⃒",
      nVDash: "⊯",
      nVdash: "⊮",
      nvDash: "⊭",
      nvdash: "⊬",
      nvge: "≥⃒",
      nvgt: ">⃒",
      nvHarr: "⤄",
      nvinfin: "⧞",
      nvlArr: "⤂",
      nvle: "≤⃒",
      nvlt: "<⃒",
      nvltrie: "⊴⃒",
      nvrArr: "⤃",
      nvrtrie: "⊵⃒",
      nvsim: "∼⃒",
      nwarhk: "⤣",
      nwArr: "⇖",
      nwarr: "↖",
      nwarrow: "↖",
      nwnear: "⤧",
      Oacute: "Ó",
      oacute: "ó",
      oast: "⊛",
      ocir: "⊚",
      Ocirc: "Ô",
      ocirc: "ô",
      Ocy: "О",
      ocy: "о",
      odash: "⊝",
      Odblac: "Ő",
      odblac: "ő",
      odiv: "⨸",
      odot: "⊙",
      odsold: "⦼",
      OElig: "Œ",
      oelig: "œ",
      ofcir: "⦿",
      Ofr: "𝔒",
      ofr: "𝔬",
      ogon: "˛",
      Ograve: "Ò",
      ograve: "ò",
      ogt: "⧁",
      ohbar: "⦵",
      ohm: "Ω",
      oint: "∮",
      olarr: "↺",
      olcir: "⦾",
      olcross: "⦻",
      oline: "‾",
      olt: "⧀",
      Omacr: "Ō",
      omacr: "ō",
      Omega: "Ω",
      omega: "ω",
      Omicron: "Ο",
      omicron: "ο",
      omid: "⦶",
      ominus: "⊖",
      Oopf: "𝕆",
      oopf: "𝕠",
      opar: "⦷",
      OpenCurlyDoubleQuote: "“",
      OpenCurlyQuote: "‘",
      operp: "⦹",
      oplus: "⊕",
      Or: "⩔",
      or: "∨",
      orarr: "↻",
      ord: "⩝",
      order: "ℴ",
      orderof: "ℴ",
      ordf: "ª",
      ordm: "º",
      origof: "⊶",
      oror: "⩖",
      orslope: "⩗",
      orv: "⩛",
      oS: "Ⓢ",
      Oscr: "𝒪",
      oscr: "ℴ",
      Oslash: "Ø",
      oslash: "ø",
      osol: "⊘",
      Otilde: "Õ",
      otilde: "õ",
      Otimes: "⨷",
      otimes: "⊗",
      otimesas: "⨶",
      Ouml: "Ö",
      ouml: "ö",
      ovbar: "⌽",
      OverBar: "‾",
      OverBrace: "⏞",
      OverBracket: "⎴",
      OverParenthesis: "⏜",
      par: "∥",
      para: "¶",
      parallel: "∥",
      parsim: "⫳",
      parsl: "⫽",
      part: "∂",
      PartialD: "∂",
      Pcy: "П",
      pcy: "п",
      percnt: "%",
      period: ".",
      permil: "‰",
      perp: "⊥",
      pertenk: "‱",
      Pfr: "𝔓",
      pfr: "𝔭",
      Phi: "Φ",
      phi: "φ",
      phiv: "ϕ",
      phmmat: "ℳ",
      phone: "☎",
      Pi: "Π",
      pi: "π",
      pitchfork: "⋔",
      piv: "ϖ",
      planck: "ℏ",
      planckh: "ℎ",
      plankv: "ℏ",
      plus: "+",
      plusacir: "⨣",
      plusb: "⊞",
      pluscir: "⨢",
      plusdo: "∔",
      plusdu: "⨥",
      pluse: "⩲",
      PlusMinus: "±",
      plusmn: "±",
      plussim: "⨦",
      plustwo: "⨧",
      pm: "±",
      Poincareplane: "ℌ",
      pointint: "⨕",
      Popf: "ℙ",
      popf: "𝕡",
      pound: "£",
      Pr: "⪻",
      pr: "≺",
      prap: "⪷",
      prcue: "≼",
      prE: "⪳",
      pre: "⪯",
      prec: "≺",
      precapprox: "⪷",
      preccurlyeq: "≼",
      Precedes: "≺",
      PrecedesEqual: "⪯",
      PrecedesSlantEqual: "≼",
      PrecedesTilde: "≾",
      preceq: "⪯",
      precnapprox: "⪹",
      precneqq: "⪵",
      precnsim: "⋨",
      precsim: "≾",
      Prime: "″",
      prime: "′",
      primes: "ℙ",
      prnap: "⪹",
      prnE: "⪵",
      prnsim: "⋨",
      prod: "∏",
      Product: "∏",
      profalar: "⌮",
      profline: "⌒",
      profsurf: "⌓",
      prop: "∝",
      Proportion: "∷",
      Proportional: "∝",
      propto: "∝",
      prsim: "≾",
      prurel: "⊰",
      Pscr: "𝒫",
      pscr: "𝓅",
      Psi: "Ψ",
      psi: "ψ",
      puncsp: " ",
      Qfr: "𝔔",
      qfr: "𝔮",
      qint: "⨌",
      Qopf: "ℚ",
      qopf: "𝕢",
      qprime: "⁗",
      Qscr: "𝒬",
      qscr: "𝓆",
      quaternions: "ℍ",
      quatint: "⨖",
      quest: "?",
      questeq: "≟",
      QUOT: '"',
      quot: '"',
      rAarr: "⇛",
      race: "∽̱",
      Racute: "Ŕ",
      racute: "ŕ",
      radic: "√",
      raemptyv: "⦳",
      Rang: "⟫",
      rang: "⟩",
      rangd: "⦒",
      range: "⦥",
      rangle: "⟩",
      raquo: "»",
      Rarr: "↠",
      rArr: "⇒",
      rarr: "→",
      rarrap: "⥵",
      rarrb: "⇥",
      rarrbfs: "⤠",
      rarrc: "⤳",
      rarrfs: "⤞",
      rarrhk: "↪",
      rarrlp: "↬",
      rarrpl: "⥅",
      rarrsim: "⥴",
      Rarrtl: "⤖",
      rarrtl: "↣",
      rarrw: "↝",
      rAtail: "⤜",
      ratail: "⤚",
      ratio: "∶",
      rationals: "ℚ",
      RBarr: "⤐",
      rBarr: "⤏",
      rbarr: "⤍",
      rbbrk: "❳",
      rbrace: "}",
      rbrack: "]",
      rbrke: "⦌",
      rbrksld: "⦎",
      rbrkslu: "⦐",
      Rcaron: "Ř",
      rcaron: "ř",
      Rcedil: "Ŗ",
      rcedil: "ŗ",
      rceil: "⌉",
      rcub: "}",
      Rcy: "Р",
      rcy: "р",
      rdca: "⤷",
      rdldhar: "⥩",
      rdquo: "”",
      rdquor: "”",
      rdsh: "↳",
      Re: "ℜ",
      real: "ℜ",
      realine: "ℛ",
      realpart: "ℜ",
      reals: "ℝ",
      rect: "▭",
      REG: "®",
      reg: "®",
      ReverseElement: "∋",
      ReverseEquilibrium: "⇋",
      ReverseUpEquilibrium: "⥯",
      rfisht: "⥽",
      rfloor: "⌋",
      Rfr: "ℜ",
      rfr: "𝔯",
      rHar: "⥤",
      rhard: "⇁",
      rharu: "⇀",
      rharul: "⥬",
      Rho: "Ρ",
      rho: "ρ",
      rhov: "ϱ",
      RightAngleBracket: "⟩",
      RightArrow: "→",
      Rightarrow: "⇒",
      rightarrow: "→",
      RightArrowBar: "⇥",
      RightArrowLeftArrow: "⇄",
      rightarrowtail: "↣",
      RightCeiling: "⌉",
      RightDoubleBracket: "⟧",
      RightDownTeeVector: "⥝",
      RightDownVector: "⇂",
      RightDownVectorBar: "⥕",
      RightFloor: "⌋",
      rightharpoondown: "⇁",
      rightharpoonup: "⇀",
      rightleftarrows: "⇄",
      rightleftharpoons: "⇌",
      rightrightarrows: "⇉",
      rightsquigarrow: "↝",
      RightTee: "⊢",
      RightTeeArrow: "↦",
      RightTeeVector: "⥛",
      rightthreetimes: "⋌",
      RightTriangle: "⊳",
      RightTriangleBar: "⧐",
      RightTriangleEqual: "⊵",
      RightUpDownVector: "⥏",
      RightUpTeeVector: "⥜",
      RightUpVector: "↾",
      RightUpVectorBar: "⥔",
      RightVector: "⇀",
      RightVectorBar: "⥓",
      ring: "˚",
      risingdotseq: "≓",
      rlarr: "⇄",
      rlhar: "⇌",
      rlm: "‏",
      rmoust: "⎱",
      rmoustache: "⎱",
      rnmid: "⫮",
      roang: "⟭",
      roarr: "⇾",
      robrk: "⟧",
      ropar: "⦆",
      Ropf: "ℝ",
      ropf: "𝕣",
      roplus: "⨮",
      rotimes: "⨵",
      RoundImplies: "⥰",
      rpar: ")",
      rpargt: "⦔",
      rppolint: "⨒",
      rrarr: "⇉",
      Rrightarrow: "⇛",
      rsaquo: "›",
      Rscr: "ℛ",
      rscr: "𝓇",
      Rsh: "↱",
      rsh: "↱",
      rsqb: "]",
      rsquo: "’",
      rsquor: "’",
      rthree: "⋌",
      rtimes: "⋊",
      rtri: "▹",
      rtrie: "⊵",
      rtrif: "▸",
      rtriltri: "⧎",
      RuleDelayed: "⧴",
      ruluhar: "⥨",
      rx: "℞",
      Sacute: "Ś",
      sacute: "ś",
      sbquo: "‚",
      Sc: "⪼",
      sc: "≻",
      scap: "⪸",
      Scaron: "Š",
      scaron: "š",
      sccue: "≽",
      scE: "⪴",
      sce: "⪰",
      Scedil: "Ş",
      scedil: "ş",
      Scirc: "Ŝ",
      scirc: "ŝ",
      scnap: "⪺",
      scnE: "⪶",
      scnsim: "⋩",
      scpolint: "⨓",
      scsim: "≿",
      Scy: "С",
      scy: "с",
      sdot: "⋅",
      sdotb: "⊡",
      sdote: "⩦",
      searhk: "⤥",
      seArr: "⇘",
      searr: "↘",
      searrow: "↘",
      sect: "§",
      semi: ";",
      seswar: "⤩",
      setminus: "∖",
      setmn: "∖",
      sext: "✶",
      Sfr: "𝔖",
      sfr: "𝔰",
      sfrown: "⌢",
      sharp: "♯",
      SHCHcy: "Щ",
      shchcy: "щ",
      SHcy: "Ш",
      shcy: "ш",
      ShortDownArrow: "↓",
      ShortLeftArrow: "←",
      shortmid: "∣",
      shortparallel: "∥",
      ShortRightArrow: "→",
      ShortUpArrow: "↑",
      shy: "­",
      Sigma: "Σ",
      sigma: "σ",
      sigmaf: "ς",
      sigmav: "ς",
      sim: "∼",
      simdot: "⩪",
      sime: "≃",
      simeq: "≃",
      simg: "⪞",
      simgE: "⪠",
      siml: "⪝",
      simlE: "⪟",
      simne: "≆",
      simplus: "⨤",
      simrarr: "⥲",
      slarr: "←",
      SmallCircle: "∘",
      smallsetminus: "∖",
      smashp: "⨳",
      smeparsl: "⧤",
      smid: "∣",
      smile: "⌣",
      smt: "⪪",
      smte: "⪬",
      smtes: "⪬︀",
      SOFTcy: "Ь",
      softcy: "ь",
      sol: "/",
      solb: "⧄",
      solbar: "⌿",
      Sopf: "𝕊",
      sopf: "𝕤",
      spades: "♠",
      spadesuit: "♠",
      spar: "∥",
      sqcap: "⊓",
      sqcaps: "⊓︀",
      sqcup: "⊔",
      sqcups: "⊔︀",
      Sqrt: "√",
      sqsub: "⊏",
      sqsube: "⊑",
      sqsubset: "⊏",
      sqsubseteq: "⊑",
      sqsup: "⊐",
      sqsupe: "⊒",
      sqsupset: "⊐",
      sqsupseteq: "⊒",
      squ: "□",
      Square: "□",
      square: "□",
      SquareIntersection: "⊓",
      SquareSubset: "⊏",
      SquareSubsetEqual: "⊑",
      SquareSuperset: "⊐",
      SquareSupersetEqual: "⊒",
      SquareUnion: "⊔",
      squarf: "▪",
      squf: "▪",
      srarr: "→",
      Sscr: "𝒮",
      sscr: "𝓈",
      ssetmn: "∖",
      ssmile: "⌣",
      sstarf: "⋆",
      Star: "⋆",
      star: "☆",
      starf: "★",
      straightepsilon: "ϵ",
      straightphi: "ϕ",
      strns: "¯",
      Sub: "⋐",
      sub: "⊂",
      subdot: "⪽",
      subE: "⫅",
      sube: "⊆",
      subedot: "⫃",
      submult: "⫁",
      subnE: "⫋",
      subne: "⊊",
      subplus: "⪿",
      subrarr: "⥹",
      Subset: "⋐",
      subset: "⊂",
      subseteq: "⊆",
      subseteqq: "⫅",
      SubsetEqual: "⊆",
      subsetneq: "⊊",
      subsetneqq: "⫋",
      subsim: "⫇",
      subsub: "⫕",
      subsup: "⫓",
      succ: "≻",
      succapprox: "⪸",
      succcurlyeq: "≽",
      Succeeds: "≻",
      SucceedsEqual: "⪰",
      SucceedsSlantEqual: "≽",
      SucceedsTilde: "≿",
      succeq: "⪰",
      succnapprox: "⪺",
      succneqq: "⪶",
      succnsim: "⋩",
      succsim: "≿",
      SuchThat: "∋",
      Sum: "∑",
      sum: "∑",
      sung: "♪",
      Sup: "⋑",
      sup: "⊃",
      sup1: "¹",
      sup2: "²",
      sup3: "³",
      supdot: "⪾",
      supdsub: "⫘",
      supE: "⫆",
      supe: "⊇",
      supedot: "⫄",
      Superset: "⊃",
      SupersetEqual: "⊇",
      suphsol: "⟉",
      suphsub: "⫗",
      suplarr: "⥻",
      supmult: "⫂",
      supnE: "⫌",
      supne: "⊋",
      supplus: "⫀",
      Supset: "⋑",
      supset: "⊃",
      supseteq: "⊇",
      supseteqq: "⫆",
      supsetneq: "⊋",
      supsetneqq: "⫌",
      supsim: "⫈",
      supsub: "⫔",
      supsup: "⫖",
      swarhk: "⤦",
      swArr: "⇙",
      swarr: "↙",
      swarrow: "↙",
      swnwar: "⤪",
      szlig: "ß",
      Tab: "	",
      target: "⌖",
      Tau: "Τ",
      tau: "τ",
      tbrk: "⎴",
      Tcaron: "Ť",
      tcaron: "ť",
      Tcedil: "Ţ",
      tcedil: "ţ",
      Tcy: "Т",
      tcy: "т",
      tdot: "⃛",
      telrec: "⌕",
      Tfr: "𝔗",
      tfr: "𝔱",
      there4: "∴",
      Therefore: "∴",
      therefore: "∴",
      Theta: "Θ",
      theta: "θ",
      thetasym: "ϑ",
      thetav: "ϑ",
      thickapprox: "≈",
      thicksim: "∼",
      ThickSpace: "  ",
      thinsp: " ",
      ThinSpace: " ",
      thkap: "≈",
      thksim: "∼",
      THORN: "Þ",
      thorn: "þ",
      Tilde: "∼",
      tilde: "˜",
      TildeEqual: "≃",
      TildeFullEqual: "≅",
      TildeTilde: "≈",
      times: "×",
      timesb: "⊠",
      timesbar: "⨱",
      timesd: "⨰",
      tint: "∭",
      toea: "⤨",
      top: "⊤",
      topbot: "⌶",
      topcir: "⫱",
      Topf: "𝕋",
      topf: "𝕥",
      topfork: "⫚",
      tosa: "⤩",
      tprime: "‴",
      TRADE: "™",
      trade: "™",
      triangle: "▵",
      triangledown: "▿",
      triangleleft: "◃",
      trianglelefteq: "⊴",
      triangleq: "≜",
      triangleright: "▹",
      trianglerighteq: "⊵",
      tridot: "◬",
      trie: "≜",
      triminus: "⨺",
      TripleDot: "⃛",
      triplus: "⨹",
      trisb: "⧍",
      tritime: "⨻",
      trpezium: "⏢",
      Tscr: "𝒯",
      tscr: "𝓉",
      TScy: "Ц",
      tscy: "ц",
      TSHcy: "Ћ",
      tshcy: "ћ",
      Tstrok: "Ŧ",
      tstrok: "ŧ",
      twixt: "≬",
      twoheadleftarrow: "↞",
      twoheadrightarrow: "↠",
      Uacute: "Ú",
      uacute: "ú",
      Uarr: "↟",
      uArr: "⇑",
      uarr: "↑",
      Uarrocir: "⥉",
      Ubrcy: "Ў",
      ubrcy: "ў",
      Ubreve: "Ŭ",
      ubreve: "ŭ",
      Ucirc: "Û",
      ucirc: "û",
      Ucy: "У",
      ucy: "у",
      udarr: "⇅",
      Udblac: "Ű",
      udblac: "ű",
      udhar: "⥮",
      ufisht: "⥾",
      Ufr: "𝔘",
      ufr: "𝔲",
      Ugrave: "Ù",
      ugrave: "ù",
      uHar: "⥣",
      uharl: "↿",
      uharr: "↾",
      uhblk: "▀",
      ulcorn: "⌜",
      ulcorner: "⌜",
      ulcrop: "⌏",
      ultri: "◸",
      Umacr: "Ū",
      umacr: "ū",
      uml: "¨",
      UnderBar: "_",
      UnderBrace: "⏟",
      UnderBracket: "⎵",
      UnderParenthesis: "⏝",
      Union: "⋃",
      UnionPlus: "⊎",
      Uogon: "Ų",
      uogon: "ų",
      Uopf: "𝕌",
      uopf: "𝕦",
      UpArrow: "↑",
      Uparrow: "⇑",
      uparrow: "↑",
      UpArrowBar: "⤒",
      UpArrowDownArrow: "⇅",
      UpDownArrow: "↕",
      Updownarrow: "⇕",
      updownarrow: "↕",
      UpEquilibrium: "⥮",
      upharpoonleft: "↿",
      upharpoonright: "↾",
      uplus: "⊎",
      UpperLeftArrow: "↖",
      UpperRightArrow: "↗",
      Upsi: "ϒ",
      upsi: "υ",
      upsih: "ϒ",
      Upsilon: "Υ",
      upsilon: "υ",
      UpTee: "⊥",
      UpTeeArrow: "↥",
      upuparrows: "⇈",
      urcorn: "⌝",
      urcorner: "⌝",
      urcrop: "⌎",
      Uring: "Ů",
      uring: "ů",
      urtri: "◹",
      Uscr: "𝒰",
      uscr: "𝓊",
      utdot: "⋰",
      Utilde: "Ũ",
      utilde: "ũ",
      utri: "▵",
      utrif: "▴",
      uuarr: "⇈",
      Uuml: "Ü",
      uuml: "ü",
      uwangle: "⦧",
      vangrt: "⦜",
      varepsilon: "ϵ",
      varkappa: "ϰ",
      varnothing: "∅",
      varphi: "ϕ",
      varpi: "ϖ",
      varpropto: "∝",
      vArr: "⇕",
      varr: "↕",
      varrho: "ϱ",
      varsigma: "ς",
      varsubsetneq: "⊊︀",
      varsubsetneqq: "⫋︀",
      varsupsetneq: "⊋︀",
      varsupsetneqq: "⫌︀",
      vartheta: "ϑ",
      vartriangleleft: "⊲",
      vartriangleright: "⊳",
      Vbar: "⫫",
      vBar: "⫨",
      vBarv: "⫩",
      Vcy: "В",
      vcy: "в",
      VDash: "⊫",
      Vdash: "⊩",
      vDash: "⊨",
      vdash: "⊢",
      Vdashl: "⫦",
      Vee: "⋁",
      vee: "∨",
      veebar: "⊻",
      veeeq: "≚",
      vellip: "⋮",
      Verbar: "‖",
      verbar: "|",
      Vert: "‖",
      vert: "|",
      VerticalBar: "∣",
      VerticalLine: "|",
      VerticalSeparator: "❘",
      VerticalTilde: "≀",
      VeryThinSpace: " ",
      Vfr: "𝔙",
      vfr: "𝔳",
      vltri: "⊲",
      vnsub: "⊂⃒",
      vnsup: "⊃⃒",
      Vopf: "𝕍",
      vopf: "𝕧",
      vprop: "∝",
      vrtri: "⊳",
      Vscr: "𝒱",
      vscr: "𝓋",
      vsubnE: "⫋︀",
      vsubne: "⊊︀",
      vsupnE: "⫌︀",
      vsupne: "⊋︀",
      Vvdash: "⊪",
      vzigzag: "⦚",
      Wcirc: "Ŵ",
      wcirc: "ŵ",
      wedbar: "⩟",
      Wedge: "⋀",
      wedge: "∧",
      wedgeq: "≙",
      weierp: "℘",
      Wfr: "𝔚",
      wfr: "𝔴",
      Wopf: "𝕎",
      wopf: "𝕨",
      wp: "℘",
      wr: "≀",
      wreath: "≀",
      Wscr: "𝒲",
      wscr: "𝓌",
      xcap: "⋂",
      xcirc: "◯",
      xcup: "⋃",
      xdtri: "▽",
      Xfr: "𝔛",
      xfr: "𝔵",
      xhArr: "⟺",
      xharr: "⟷",
      Xi: "Ξ",
      xi: "ξ",
      xlArr: "⟸",
      xlarr: "⟵",
      xmap: "⟼",
      xnis: "⋻",
      xodot: "⨀",
      Xopf: "𝕏",
      xopf: "𝕩",
      xoplus: "⨁",
      xotime: "⨂",
      xrArr: "⟹",
      xrarr: "⟶",
      Xscr: "𝒳",
      xscr: "𝓍",
      xsqcup: "⨆",
      xuplus: "⨄",
      xutri: "△",
      xvee: "⋁",
      xwedge: "⋀",
      Yacute: "Ý",
      yacute: "ý",
      YAcy: "Я",
      yacy: "я",
      Ycirc: "Ŷ",
      ycirc: "ŷ",
      Ycy: "Ы",
      ycy: "ы",
      yen: "¥",
      Yfr: "𝔜",
      yfr: "𝔶",
      YIcy: "Ї",
      yicy: "ї",
      Yopf: "𝕐",
      yopf: "𝕪",
      Yscr: "𝒴",
      yscr: "𝓎",
      YUcy: "Ю",
      yucy: "ю",
      Yuml: "Ÿ",
      yuml: "ÿ",
      Zacute: "Ź",
      zacute: "ź",
      Zcaron: "Ž",
      zcaron: "ž",
      Zcy: "З",
      zcy: "з",
      Zdot: "Ż",
      zdot: "ż",
      zeetrf: "ℨ",
      ZeroWidthSpace: "​",
      Zeta: "Ζ",
      zeta: "ζ",
      Zfr: "ℨ",
      zfr: "𝔷",
      ZHcy: "Ж",
      zhcy: "ж",
      zigrarr: "⇝",
      Zopf: "ℤ",
      zopf: "𝕫",
      Zscr: "𝒵",
      zscr: "𝓏",
      zwj: "‍",
      zwnj: "‌"
    });
    exports.entityMap = exports.HTML_ENTITIES;
  }
});

// ../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/sax.js
var require_sax = __commonJS({
  "../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/sax.js"(exports) {
    "use strict";
    init_esm();
    var conventions = require_conventions();
    var g2 = require_grammar();
    var errors = require_errors();
    var isHTMLEscapableRawTextElement = conventions.isHTMLEscapableRawTextElement;
    var isHTMLMimeType = conventions.isHTMLMimeType;
    var isHTMLRawTextElement = conventions.isHTMLRawTextElement;
    var hasOwn = conventions.hasOwn;
    var NAMESPACE = conventions.NAMESPACE;
    var ParseError = errors.ParseError;
    var DOMException = errors.DOMException;
    var S_TAG = 0;
    var S_ATTR = 1;
    var S_ATTR_SPACE = 2;
    var S_EQ = 3;
    var S_ATTR_NOQUOT_VALUE = 4;
    var S_ATTR_END = 5;
    var S_TAG_SPACE = 6;
    var S_TAG_CLOSE = 7;
    function XMLReader() {
    }
    XMLReader.prototype = {
      parse: function(source, defaultNSMap, entityMap) {
        var domBuilder = this.domBuilder;
        domBuilder.startDocument();
        _copy(defaultNSMap, defaultNSMap = /* @__PURE__ */ Object.create(null));
        parse(source, defaultNSMap, entityMap, domBuilder, this.errorHandler);
        domBuilder.endDocument();
      }
    };
    var ENTITY_REG = /&#?\w+;?/g;
    function parse(source, defaultNSMapCopy, entityMap, domBuilder, errorHandler) {
      var isHTML = isHTMLMimeType(domBuilder.mimeType);
      if (source.indexOf(g2.UNICODE_REPLACEMENT_CHARACTER) >= 0) {
        errorHandler.warning("Unicode replacement character detected, source encoding issues?");
      }
      function fixedFromCharCode(code) {
        if (code > 65535) {
          code -= 65536;
          var surrogate1 = 55296 + (code >> 10), surrogate2 = 56320 + (code & 1023);
          return String.fromCharCode(surrogate1, surrogate2);
        } else {
          return String.fromCharCode(code);
        }
      }
      function entityReplacer(a3) {
        var complete = a3[a3.length - 1] === ";" ? a3 : a3 + ";";
        if (!isHTML && complete !== a3) {
          errorHandler.error("EntityRef: expecting ;");
          return a3;
        }
        var match = g2.Reference.exec(complete);
        if (!match || match[0].length !== complete.length) {
          errorHandler.error("entity not matching Reference production: " + a3);
          return a3;
        }
        var k3 = complete.slice(1, -1);
        if (hasOwn(entityMap, k3)) {
          return entityMap[k3];
        } else if (k3.charAt(0) === "#") {
          return fixedFromCharCode(parseInt(k3.substr(1).replace("x", "0x")));
        } else {
          errorHandler.error("entity not found:" + a3);
          return a3;
        }
      }
      function appendText(end2) {
        if (end2 > start) {
          var xt2 = source.substring(start, end2).replace(ENTITY_REG, entityReplacer);
          locator && position(start);
          domBuilder.characters(xt2, 0, end2 - start);
          start = end2;
        }
      }
      function position(p3, m3) {
        while (p3 >= lineEnd && (m3 = linePattern.exec(source))) {
          lineStart = m3.index;
          lineEnd = lineStart + m3[0].length;
          locator.lineNumber++;
        }
        locator.columnNumber = p3 - lineStart + 1;
      }
      var lineStart = 0;
      var lineEnd = 0;
      var linePattern = /.*(?:\r\n?|\n)|.*$/g;
      var locator = domBuilder.locator;
      var parseStack = [{ currentNSMap: defaultNSMapCopy }];
      var unclosedTags = [];
      var start = 0;
      while (true) {
        try {
          var tagStart = source.indexOf("<", start);
          if (tagStart < 0) {
            if (!isHTML && unclosedTags.length > 0) {
              return errorHandler.fatalError("unclosed xml tag(s): " + unclosedTags.join(", "));
            }
            if (!source.substring(start).match(/^\s*$/)) {
              var doc = domBuilder.doc;
              var text = doc.createTextNode(source.substr(start));
              if (doc.documentElement) {
                return errorHandler.error("Extra content at the end of the document");
              }
              doc.appendChild(text);
              domBuilder.currentElement = text;
            }
            return;
          }
          if (tagStart > start) {
            var fromSource = source.substring(start, tagStart);
            if (!isHTML && unclosedTags.length === 0) {
              fromSource = fromSource.replace(new RegExp(g2.S_OPT.source, "g"), "");
              fromSource && errorHandler.error("Unexpected content outside root element: '" + fromSource + "'");
            }
            appendText(tagStart);
          }
          switch (source.charAt(tagStart + 1)) {
            case "/":
              var end = source.indexOf(">", tagStart + 2);
              var tagNameRaw = source.substring(tagStart + 2, end > 0 ? end : void 0);
              if (!tagNameRaw) {
                return errorHandler.fatalError("end tag name missing");
              }
              var tagNameMatch = end > 0 && g2.reg("^", g2.QName_group, g2.S_OPT, "$").exec(tagNameRaw);
              if (!tagNameMatch) {
                return errorHandler.fatalError('end tag name contains invalid characters: "' + tagNameRaw + '"');
              }
              if (!domBuilder.currentElement && !domBuilder.doc.documentElement) {
                return;
              }
              var currentTagName = unclosedTags[unclosedTags.length - 1] || domBuilder.currentElement.tagName || domBuilder.doc.documentElement.tagName || "";
              if (currentTagName !== tagNameMatch[1]) {
                var tagNameLower = tagNameMatch[1].toLowerCase();
                if (!isHTML || currentTagName.toLowerCase() !== tagNameLower) {
                  return errorHandler.fatalError('Opening and ending tag mismatch: "' + currentTagName + '" != "' + tagNameRaw + '"');
                }
              }
              var config = parseStack.pop();
              unclosedTags.pop();
              var localNSMap = config.localNSMap;
              domBuilder.endElement(config.uri, config.localName, currentTagName);
              if (localNSMap) {
                for (var prefix in localNSMap) {
                  if (hasOwn(localNSMap, prefix)) {
                    domBuilder.endPrefixMapping(prefix);
                  }
                }
              }
              end++;
              break;
            // end element
            case "?":
              locator && position(tagStart);
              end = parseProcessingInstruction(source, tagStart, domBuilder, errorHandler);
              break;
            case "!":
              locator && position(tagStart);
              end = parseDoctypeCommentOrCData(source, tagStart, domBuilder, errorHandler, isHTML);
              break;
            default:
              locator && position(tagStart);
              var el = new ElementAttributes();
              var currentNSMap = parseStack[parseStack.length - 1].currentNSMap;
              var end = parseElementStartPart(source, tagStart, el, currentNSMap, entityReplacer, errorHandler, isHTML);
              var len = el.length;
              if (!el.closed) {
                if (isHTML && conventions.isHTMLVoidElement(el.tagName)) {
                  el.closed = true;
                } else {
                  unclosedTags.push(el.tagName);
                }
              }
              if (locator && len) {
                var locator2 = copyLocator(locator, {});
                for (var i3 = 0; i3 < len; i3++) {
                  var a2 = el[i3];
                  position(a2.offset);
                  a2.locator = copyLocator(locator, {});
                }
                domBuilder.locator = locator2;
                if (appendElement(el, domBuilder, currentNSMap)) {
                  parseStack.push(el);
                }
                domBuilder.locator = locator;
              } else {
                if (appendElement(el, domBuilder, currentNSMap)) {
                  parseStack.push(el);
                }
              }
              if (isHTML && !el.closed) {
                end = parseHtmlSpecialContent(source, end, el.tagName, entityReplacer, domBuilder);
              } else {
                end++;
              }
          }
        } catch (e3) {
          if (e3 instanceof ParseError) {
            throw e3;
          } else if (e3 instanceof DOMException) {
            throw new ParseError(e3.name + ": " + e3.message, domBuilder.locator, e3);
          }
          errorHandler.error("element parse error: " + e3);
          end = -1;
        }
        if (end > start) {
          start = end;
        } else {
          appendText(Math.max(tagStart, start) + 1);
        }
      }
    }
    function copyLocator(f2, t3) {
      t3.lineNumber = f2.lineNumber;
      t3.columnNumber = f2.columnNumber;
      return t3;
    }
    function parseElementStartPart(source, start, el, currentNSMap, entityReplacer, errorHandler, isHTML) {
      function addAttribute(qname, value2, startIndex) {
        if (hasOwn(el.attributeNames, qname)) {
          return errorHandler.fatalError("Attribute " + qname + " redefined");
        }
        if (!isHTML && value2.indexOf("<") >= 0) {
          return errorHandler.fatalError("Unescaped '<' not allowed in attributes values");
        }
        el.addValue(
          qname,
          // @see https://www.w3.org/TR/xml/#AVNormalize
          // since the xmldom sax parser does not "interpret" DTD the following is not implemented:
          // - recursive replacement of (DTD) entity references
          // - trimming and collapsing multiple spaces into a single one for attributes that are not of type CDATA
          value2.replace(/[\t\n\r]/g, " ").replace(ENTITY_REG, entityReplacer),
          startIndex
        );
      }
      var attrName;
      var value;
      var p3 = ++start;
      var s3 = S_TAG;
      while (true) {
        var c3 = source.charAt(p3);
        switch (c3) {
          case "=":
            if (s3 === S_ATTR) {
              attrName = source.slice(start, p3);
              s3 = S_EQ;
            } else if (s3 === S_ATTR_SPACE) {
              s3 = S_EQ;
            } else {
              throw new Error("attribute equal must after attrName");
            }
            break;
          case "'":
          case '"':
            if (s3 === S_EQ || s3 === S_ATTR) {
              if (s3 === S_ATTR) {
                errorHandler.warning('attribute value must after "="');
                attrName = source.slice(start, p3);
              }
              start = p3 + 1;
              p3 = source.indexOf(c3, start);
              if (p3 > 0) {
                value = source.slice(start, p3);
                addAttribute(attrName, value, start - 1);
                s3 = S_ATTR_END;
              } else {
                throw new Error("attribute value no end '" + c3 + "' match");
              }
            } else if (s3 == S_ATTR_NOQUOT_VALUE) {
              value = source.slice(start, p3);
              addAttribute(attrName, value, start);
              errorHandler.warning('attribute "' + attrName + '" missed start quot(' + c3 + ")!!");
              start = p3 + 1;
              s3 = S_ATTR_END;
            } else {
              throw new Error('attribute value must after "="');
            }
            break;
          case "/":
            switch (s3) {
              case S_TAG:
                el.setTagName(source.slice(start, p3));
              case S_ATTR_END:
              case S_TAG_SPACE:
              case S_TAG_CLOSE:
                s3 = S_TAG_CLOSE;
                el.closed = true;
              case S_ATTR_NOQUOT_VALUE:
              case S_ATTR:
                break;
              case S_ATTR_SPACE:
                el.closed = true;
                break;
              //case S_EQ:
              default:
                throw new Error("attribute invalid close char('/')");
            }
            break;
          case "":
            errorHandler.error("unexpected end of input");
            if (s3 == S_TAG) {
              el.setTagName(source.slice(start, p3));
            }
            return p3;
          case ">":
            switch (s3) {
              case S_TAG:
                el.setTagName(source.slice(start, p3));
              case S_ATTR_END:
              case S_TAG_SPACE:
              case S_TAG_CLOSE:
                break;
              //normal
              case S_ATTR_NOQUOT_VALUE:
              //Compatible state
              case S_ATTR:
                value = source.slice(start, p3);
                if (value.slice(-1) === "/") {
                  el.closed = true;
                  value = value.slice(0, -1);
                }
              case S_ATTR_SPACE:
                if (s3 === S_ATTR_SPACE) {
                  value = attrName;
                }
                if (s3 == S_ATTR_NOQUOT_VALUE) {
                  errorHandler.warning('attribute "' + value + '" missed quot(")!');
                  addAttribute(attrName, value, start);
                } else {
                  if (!isHTML) {
                    errorHandler.warning('attribute "' + value + '" missed value!! "' + value + '" instead!!');
                  }
                  addAttribute(value, value, start);
                }
                break;
              case S_EQ:
                if (!isHTML) {
                  return errorHandler.fatalError(`AttValue: ' or " expected`);
                }
            }
            return p3;
          /*xml space '\x20' | #x9 | #xD | #xA; */
          case "":
            c3 = " ";
          default:
            if (c3 <= " ") {
              switch (s3) {
                case S_TAG:
                  el.setTagName(source.slice(start, p3));
                  s3 = S_TAG_SPACE;
                  break;
                case S_ATTR:
                  attrName = source.slice(start, p3);
                  s3 = S_ATTR_SPACE;
                  break;
                case S_ATTR_NOQUOT_VALUE:
                  var value = source.slice(start, p3);
                  errorHandler.warning('attribute "' + value + '" missed quot(")!!');
                  addAttribute(attrName, value, start);
                case S_ATTR_END:
                  s3 = S_TAG_SPACE;
                  break;
              }
            } else {
              switch (s3) {
                //case S_TAG:void();break;
                //case S_ATTR:void();break;
                //case S_ATTR_NOQUOT_VALUE:void();break;
                case S_ATTR_SPACE:
                  if (!isHTML) {
                    errorHandler.warning('attribute "' + attrName + '" missed value!! "' + attrName + '" instead2!!');
                  }
                  addAttribute(attrName, attrName, start);
                  start = p3;
                  s3 = S_ATTR;
                  break;
                case S_ATTR_END:
                  errorHandler.warning('attribute space is required"' + attrName + '"!!');
                case S_TAG_SPACE:
                  s3 = S_ATTR;
                  start = p3;
                  break;
                case S_EQ:
                  s3 = S_ATTR_NOQUOT_VALUE;
                  start = p3;
                  break;
                case S_TAG_CLOSE:
                  throw new Error("elements closed character '/' and '>' must be connected to");
              }
            }
        }
        p3++;
      }
    }
    function appendElement(el, domBuilder, currentNSMap) {
      var tagName = el.tagName;
      var localNSMap = null;
      var i3 = el.length;
      while (i3--) {
        var a2 = el[i3];
        var qName = a2.qName;
        var value = a2.value;
        var nsp = qName.indexOf(":");
        if (nsp > 0) {
          var prefix = a2.prefix = qName.slice(0, nsp);
          var localName = qName.slice(nsp + 1);
          var nsPrefix = prefix === "xmlns" && localName;
        } else {
          localName = qName;
          prefix = null;
          nsPrefix = qName === "xmlns" && "";
        }
        a2.localName = localName;
        if (nsPrefix !== false) {
          if (localNSMap == null) {
            localNSMap = /* @__PURE__ */ Object.create(null);
            _copy(currentNSMap, currentNSMap = /* @__PURE__ */ Object.create(null));
          }
          currentNSMap[nsPrefix] = localNSMap[nsPrefix] = value;
          a2.uri = NAMESPACE.XMLNS;
          domBuilder.startPrefixMapping(nsPrefix, value);
        }
      }
      var i3 = el.length;
      while (i3--) {
        a2 = el[i3];
        if (a2.prefix) {
          if (a2.prefix === "xml") {
            a2.uri = NAMESPACE.XML;
          }
          if (a2.prefix !== "xmlns") {
            a2.uri = currentNSMap[a2.prefix];
          }
        }
      }
      var nsp = tagName.indexOf(":");
      if (nsp > 0) {
        prefix = el.prefix = tagName.slice(0, nsp);
        localName = el.localName = tagName.slice(nsp + 1);
      } else {
        prefix = null;
        localName = el.localName = tagName;
      }
      var ns = el.uri = currentNSMap[prefix || ""];
      domBuilder.startElement(ns, localName, tagName, el);
      if (el.closed) {
        domBuilder.endElement(ns, localName, tagName);
        if (localNSMap) {
          for (prefix in localNSMap) {
            if (hasOwn(localNSMap, prefix)) {
              domBuilder.endPrefixMapping(prefix);
            }
          }
        }
      } else {
        el.currentNSMap = currentNSMap;
        el.localNSMap = localNSMap;
        return true;
      }
    }
    function parseHtmlSpecialContent(source, elStartEnd, tagName, entityReplacer, domBuilder) {
      var isEscapableRaw = isHTMLEscapableRawTextElement(tagName);
      if (isEscapableRaw || isHTMLRawTextElement(tagName)) {
        var elEndStart = source.indexOf("</" + tagName + ">", elStartEnd);
        var text = source.substring(elStartEnd + 1, elEndStart);
        if (isEscapableRaw) {
          text = text.replace(ENTITY_REG, entityReplacer);
        }
        domBuilder.characters(text, 0, text.length);
        return elEndStart;
      }
      return elStartEnd + 1;
    }
    function _copy(source, target) {
      for (var n3 in source) {
        if (hasOwn(source, n3)) {
          target[n3] = source[n3];
        }
      }
    }
    function parseUtils(source, start) {
      var index = start;
      function char(n3) {
        n3 = n3 || 0;
        return source.charAt(index + n3);
      }
      function skip(n3) {
        n3 = n3 || 1;
        index += n3;
      }
      function skipBlanks() {
        var blanks = 0;
        while (index < source.length) {
          var c3 = char();
          if (c3 !== " " && c3 !== "\n" && c3 !== "	" && c3 !== "\r") {
            return blanks;
          }
          blanks++;
          skip();
        }
        return -1;
      }
      function substringFromIndex() {
        return source.substring(index);
      }
      function substringStartsWith(text) {
        return source.substring(index, index + text.length) === text;
      }
      function getMatch(args) {
        var expr = g2.reg("^", args);
        var match = expr.exec(substringFromIndex());
        if (match) {
          skip(match[0].length);
          return match[0];
        }
        return null;
      }
      return {
        char,
        getIndex: function() {
          return index;
        },
        getMatch,
        getSource: function() {
          return source;
        },
        skip,
        skipBlanks,
        substringFromIndex,
        substringStartsWith
      };
    }
    function parseDoctypeInternalSubset(p3, errorHandler) {
      function parsePI(p4, errorHandler2) {
        var match = g2.PI.exec(p4.substringFromIndex());
        if (!match) {
          return errorHandler2.fatalError("processing instruction is not well-formed at position " + p4.getIndex());
        }
        if (match[1].toLowerCase() === "xml") {
          return errorHandler2.fatalError(
            "xml declaration is only allowed at the start of the document, but found at position " + p4.getIndex()
          );
        }
        p4.skip(match[0].length);
        return match[0];
      }
      var source = p3.getSource();
      if (p3.char() === "[") {
        p3.skip(1);
        var intSubsetStart = p3.getIndex();
        while (p3.getIndex() < source.length) {
          p3.skipBlanks();
          if (p3.char() === "]") {
            var internalSubset = source.substring(intSubsetStart, p3.getIndex());
            p3.skip(1);
            return internalSubset;
          }
          var current = null;
          if (p3.char() === "<" && p3.char(1) === "!") {
            switch (p3.char(2)) {
              case "E":
                if (p3.char(3) === "L") {
                  current = p3.getMatch(g2.elementdecl);
                } else if (p3.char(3) === "N") {
                  current = p3.getMatch(g2.EntityDecl);
                }
                break;
              case "A":
                current = p3.getMatch(g2.AttlistDecl);
                break;
              case "N":
                current = p3.getMatch(g2.NotationDecl);
                break;
              case "-":
                current = p3.getMatch(g2.Comment);
                break;
            }
          } else if (p3.char() === "<" && p3.char(1) === "?") {
            current = parsePI(p3, errorHandler);
          } else if (p3.char() === "%") {
            current = p3.getMatch(g2.PEReference);
          } else {
            return errorHandler.fatalError("Error detected in Markup declaration");
          }
          if (!current) {
            return errorHandler.fatalError("Error in internal subset at position " + p3.getIndex());
          }
        }
        return errorHandler.fatalError("doctype internal subset is not well-formed, missing ]");
      }
    }
    function parseDoctypeCommentOrCData(source, start, domBuilder, errorHandler, isHTML) {
      var p3 = parseUtils(source, start);
      switch (p3.char(2)) {
        case "-":
          var comment = p3.getMatch(g2.Comment);
          if (comment) {
            domBuilder.comment(comment, g2.COMMENT_START.length, comment.length - g2.COMMENT_START.length - g2.COMMENT_END.length);
            return p3.getIndex();
          } else {
            return errorHandler.fatalError("comment is not well-formed at position " + p3.getIndex());
          }
        case "[":
          var cdata = p3.getMatch(g2.CDSect);
          if (cdata) {
            if (!isHTML && !domBuilder.currentElement) {
              return errorHandler.fatalError("CDATA outside of element");
            }
            domBuilder.startCDATA();
            domBuilder.characters(cdata, g2.CDATA_START.length, cdata.length - g2.CDATA_START.length - g2.CDATA_END.length);
            domBuilder.endCDATA();
            return p3.getIndex();
          } else {
            return errorHandler.fatalError("Invalid CDATA starting at position " + start);
          }
        case "D": {
          if (domBuilder.doc && domBuilder.doc.documentElement) {
            return errorHandler.fatalError("Doctype not allowed inside or after documentElement at position " + p3.getIndex());
          }
          if (!p3.substringStartsWith(g2.DOCTYPE_DECL_START)) {
            return errorHandler.fatalError("Expected " + g2.DOCTYPE_DECL_START + " at position " + p3.getIndex());
          }
          p3.skip(g2.DOCTYPE_DECL_START.length);
          if (p3.skipBlanks() < 1) {
            return errorHandler.fatalError("Expected whitespace after " + g2.DOCTYPE_DECL_START + " at position " + p3.getIndex());
          }
          var doctype = {
            name: void 0,
            publicId: void 0,
            systemId: void 0,
            internalSubset: void 0
          };
          doctype.name = p3.getMatch(g2.Name);
          if (!doctype.name)
            return errorHandler.fatalError("doctype name missing or contains unexpected characters at position " + p3.getIndex());
          p3.skipBlanks();
          if (p3.substringStartsWith(g2.PUBLIC) || p3.substringStartsWith(g2.SYSTEM)) {
            var match = g2.ExternalID_match.exec(p3.substringFromIndex());
            if (!match) {
              return errorHandler.fatalError("doctype external id is not well-formed at position " + p3.getIndex());
            }
            if (match.groups.SystemLiteralOnly !== void 0) {
              doctype.systemId = match.groups.SystemLiteralOnly;
            } else {
              doctype.systemId = match.groups.SystemLiteral;
              doctype.publicId = match.groups.PubidLiteral;
            }
            p3.skip(match[0].length);
          }
          p3.skipBlanks();
          doctype.internalSubset = parseDoctypeInternalSubset(p3, errorHandler);
          p3.skipBlanks();
          if (p3.char() !== ">") {
            return errorHandler.fatalError("doctype not terminated with > at position " + p3.getIndex());
          }
          p3.skip(1);
          domBuilder.startDTD(doctype.name, doctype.publicId, doctype.systemId, doctype.internalSubset);
          domBuilder.endDTD();
          return p3.getIndex();
        }
        default:
          return errorHandler.fatalError('Not well-formed XML starting with "<!" at position ' + start);
      }
    }
    function parseProcessingInstruction(source, start, domBuilder, errorHandler) {
      var match = source.substring(start).match(g2.PI);
      if (!match) {
        return errorHandler.fatalError("Invalid processing instruction starting at position " + start);
      }
      if (match[1].toLowerCase() === "xml") {
        if (start > 0) {
          return errorHandler.fatalError(
            "processing instruction at position " + start + " is an xml declaration which is only at the start of the document"
          );
        }
        if (!g2.XMLDecl.test(source.substring(start))) {
          return errorHandler.fatalError("xml declaration is not well-formed");
        }
      }
      domBuilder.processingInstruction(match[1], match[2]);
      return start + match[0].length;
    }
    function ElementAttributes() {
      this.attributeNames = /* @__PURE__ */ Object.create(null);
    }
    ElementAttributes.prototype = {
      setTagName: function(tagName) {
        if (!g2.QName_exact.test(tagName)) {
          throw new Error("invalid tagName:" + tagName);
        }
        this.tagName = tagName;
      },
      addValue: function(qName, value, offset) {
        if (!g2.QName_exact.test(qName)) {
          throw new Error("invalid attribute:" + qName);
        }
        this.attributeNames[qName] = this.length;
        this[this.length++] = { qName, value, offset };
      },
      length: 0,
      getLocalName: function(i3) {
        return this[i3].localName;
      },
      getLocator: function(i3) {
        return this[i3].locator;
      },
      getQName: function(i3) {
        return this[i3].qName;
      },
      getURI: function(i3) {
        return this[i3].uri;
      },
      getValue: function(i3) {
        return this[i3].value;
      }
      //	,getIndex:function(uri, localName)){
      //		if(localName){
      //
      //		}else{
      //			var qName = uri
      //		}
      //	},
      //	getValue:function(){return this.getValue(this.getIndex.apply(this,arguments))},
      //	getType:function(uri,localName){}
      //	getType:function(i){},
    };
    exports.XMLReader = XMLReader;
    exports.parseUtils = parseUtils;
    exports.parseDoctypeCommentOrCData = parseDoctypeCommentOrCData;
  }
});

// ../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/dom-parser.js
var require_dom_parser = __commonJS({
  "../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/dom-parser.js"(exports) {
    "use strict";
    init_esm();
    var conventions = require_conventions();
    var dom = require_dom();
    var errors = require_errors();
    var entities = require_entities();
    var sax = require_sax();
    var DOMImplementation = dom.DOMImplementation;
    var hasDefaultHTMLNamespace = conventions.hasDefaultHTMLNamespace;
    var isHTMLMimeType = conventions.isHTMLMimeType;
    var isValidMimeType = conventions.isValidMimeType;
    var MIME_TYPE = conventions.MIME_TYPE;
    var NAMESPACE = conventions.NAMESPACE;
    var ParseError = errors.ParseError;
    var XMLReader = sax.XMLReader;
    function normalizeLineEndings(input) {
      return input.replace(/\r[\n\u0085]/g, "\n").replace(/[\r\u0085\u2028]/g, "\n");
    }
    function DOMParser(options) {
      options = options || { locator: true };
      this.assign = options.assign || conventions.assign;
      this.domHandler = options.domHandler || DOMHandler;
      this.onError = options.onError || options.errorHandler;
      if (options.errorHandler && typeof options.errorHandler !== "function") {
        throw new TypeError("errorHandler object is no longer supported, switch to onError!");
      } else if (options.errorHandler) {
        options.errorHandler("warning", "The `errorHandler` option has been deprecated, use `onError` instead!", this);
      }
      this.normalizeLineEndings = options.normalizeLineEndings || normalizeLineEndings;
      this.locator = !!options.locator;
      this.xmlns = this.assign(/* @__PURE__ */ Object.create(null), options.xmlns);
    }
    DOMParser.prototype.parseFromString = function(source, mimeType) {
      if (!isValidMimeType(mimeType)) {
        throw new TypeError('DOMParser.parseFromString: the provided mimeType "' + mimeType + '" is not valid.');
      }
      var defaultNSMap = this.assign(/* @__PURE__ */ Object.create(null), this.xmlns);
      var entityMap = entities.XML_ENTITIES;
      var defaultNamespace = defaultNSMap[""] || null;
      if (hasDefaultHTMLNamespace(mimeType)) {
        entityMap = entities.HTML_ENTITIES;
        defaultNamespace = NAMESPACE.HTML;
      } else if (mimeType === MIME_TYPE.XML_SVG_IMAGE) {
        defaultNamespace = NAMESPACE.SVG;
      }
      defaultNSMap[""] = defaultNamespace;
      defaultNSMap.xml = defaultNSMap.xml || NAMESPACE.XML;
      var domBuilder = new this.domHandler({
        mimeType,
        defaultNamespace,
        onError: this.onError
      });
      var locator = this.locator ? {} : void 0;
      if (this.locator) {
        domBuilder.setDocumentLocator(locator);
      }
      var sax2 = new XMLReader();
      sax2.errorHandler = domBuilder;
      sax2.domBuilder = domBuilder;
      var isXml = !conventions.isHTMLMimeType(mimeType);
      if (isXml && typeof source !== "string") {
        sax2.errorHandler.fatalError("source is not a string");
      }
      sax2.parse(this.normalizeLineEndings(String(source)), defaultNSMap, entityMap);
      if (!domBuilder.doc.documentElement) {
        sax2.errorHandler.fatalError("missing root element");
      }
      return domBuilder.doc;
    };
    function DOMHandler(options) {
      var opt = options || {};
      this.mimeType = opt.mimeType || MIME_TYPE.XML_APPLICATION;
      this.defaultNamespace = opt.defaultNamespace || null;
      this.cdata = false;
      this.currentElement = void 0;
      this.doc = void 0;
      this.locator = void 0;
      this.onError = opt.onError;
    }
    function position(locator, node) {
      node.lineNumber = locator.lineNumber;
      node.columnNumber = locator.columnNumber;
    }
    DOMHandler.prototype = {
      /**
       * Either creates an XML or an HTML document and stores it under `this.doc`.
       * If it is an XML document, `this.defaultNamespace` is used to create it,
       * and it will not contain any `childNodes`.
       * If it is an HTML document, it will be created without any `childNodes`.
       *
       * @see http://www.saxproject.org/apidoc/org/xml/sax/ContentHandler.html
       */
      startDocument: function() {
        var impl = new DOMImplementation();
        this.doc = isHTMLMimeType(this.mimeType) ? impl.createHTMLDocument(false) : impl.createDocument(this.defaultNamespace, "");
      },
      startElement: function(namespaceURI, localName, qName, attrs) {
        var doc = this.doc;
        var el = doc.createElementNS(namespaceURI, qName || localName);
        var len = attrs.length;
        appendElement(this, el);
        this.currentElement = el;
        this.locator && position(this.locator, el);
        for (var i3 = 0; i3 < len; i3++) {
          var namespaceURI = attrs.getURI(i3);
          var value = attrs.getValue(i3);
          var qName = attrs.getQName(i3);
          var attr = doc.createAttributeNS(namespaceURI, qName);
          this.locator && position(attrs.getLocator(i3), attr);
          attr.value = attr.nodeValue = value;
          el.setAttributeNode(attr);
        }
      },
      endElement: function(namespaceURI, localName, qName) {
        this.currentElement = this.currentElement.parentNode;
      },
      startPrefixMapping: function(prefix, uri) {
      },
      endPrefixMapping: function(prefix) {
      },
      processingInstruction: function(target, data) {
        var ins = this.doc.createProcessingInstruction(target, data);
        this.locator && position(this.locator, ins);
        appendElement(this, ins);
      },
      ignorableWhitespace: function(ch, start, length) {
      },
      characters: function(chars, start, length) {
        chars = _toString.apply(this, arguments);
        if (chars) {
          if (this.cdata) {
            var charNode = this.doc.createCDATASection(chars);
          } else {
            var charNode = this.doc.createTextNode(chars);
          }
          if (this.currentElement) {
            this.currentElement.appendChild(charNode);
          } else if (/^\s*$/.test(chars)) {
            this.doc.appendChild(charNode);
          }
          this.locator && position(this.locator, charNode);
        }
      },
      skippedEntity: function(name) {
      },
      endDocument: function() {
        this.doc.normalize();
      },
      /**
       * Stores the locator to be able to set the `columnNumber` and `lineNumber`
       * on the created DOM nodes.
       *
       * @param {Locator} locator
       */
      setDocumentLocator: function(locator) {
        if (locator) {
          locator.lineNumber = 0;
        }
        this.locator = locator;
      },
      //LexicalHandler
      comment: function(chars, start, length) {
        chars = _toString.apply(this, arguments);
        var comm = this.doc.createComment(chars);
        this.locator && position(this.locator, comm);
        appendElement(this, comm);
      },
      startCDATA: function() {
        this.cdata = true;
      },
      endCDATA: function() {
        this.cdata = false;
      },
      startDTD: function(name, publicId, systemId, internalSubset) {
        var impl = this.doc.implementation;
        if (impl && impl.createDocumentType) {
          var dt2 = impl.createDocumentType(name, publicId, systemId, internalSubset);
          this.locator && position(this.locator, dt2);
          appendElement(this, dt2);
          this.doc.doctype = dt2;
        }
      },
      reportError: function(level, message) {
        if (typeof this.onError === "function") {
          try {
            this.onError(level, message, this);
          } catch (e3) {
            throw new ParseError("Reporting " + level + ' "' + message + '" caused ' + e3, this.locator);
          }
        } else {
          console.error("[xmldom " + level + "]	" + message, _locator(this.locator));
        }
      },
      /**
       * @see http://www.saxproject.org/apidoc/org/xml/sax/ErrorHandler.html
       */
      warning: function(message) {
        this.reportError("warning", message);
      },
      error: function(message) {
        this.reportError("error", message);
      },
      /**
       * This function reports a fatal error and throws a ParseError.
       *
       * @param {string} message
       * - The message to be used for reporting and throwing the error.
       * @returns {never}
       * This function always throws an error and never returns a value.
       * @throws {ParseError}
       * Always throws a ParseError with the provided message.
       */
      fatalError: function(message) {
        this.reportError("fatalError", message);
        throw new ParseError(message, this.locator);
      }
    };
    function _locator(l2) {
      if (l2) {
        return "\n@#[line:" + l2.lineNumber + ",col:" + l2.columnNumber + "]";
      }
    }
    function _toString(chars, start, length) {
      if (typeof chars == "string") {
        return chars.substr(start, length);
      } else {
        if (chars.length >= start + length || start) {
          return new java.lang.String(chars, start, length) + "";
        }
        return chars;
      }
    }
    "endDTD,startEntity,endEntity,attributeDecl,elementDecl,externalEntityDecl,internalEntityDecl,resolveEntity,getExternalSubset,notationDecl,unparsedEntityDecl".replace(
      /\w+/g,
      function(key) {
        DOMHandler.prototype[key] = function() {
          return null;
        };
      }
    );
    function appendElement(handler, node) {
      if (!handler.currentElement) {
        handler.doc.appendChild(node);
      } else {
        handler.currentElement.appendChild(node);
      }
    }
    function onErrorStopParsing(level) {
      if (level === "error") throw "onErrorStopParsing";
    }
    function onWarningStopParsing() {
      throw "onWarningStopParsing";
    }
    exports.__DOMHandler = DOMHandler;
    exports.DOMParser = DOMParser;
    exports.normalizeLineEndings = normalizeLineEndings;
    exports.onErrorStopParsing = onErrorStopParsing;
    exports.onWarningStopParsing = onWarningStopParsing;
  }
});

// ../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/index.js
var require_lib = __commonJS({
  "../../node_modules/pdf2json/node_modules/@xmldom/xmldom/lib/index.js"(exports) {
    "use strict";
    init_esm();
    var conventions = require_conventions();
    exports.assign = conventions.assign;
    exports.hasDefaultHTMLNamespace = conventions.hasDefaultHTMLNamespace;
    exports.isHTMLMimeType = conventions.isHTMLMimeType;
    exports.isValidMimeType = conventions.isValidMimeType;
    exports.MIME_TYPE = conventions.MIME_TYPE;
    exports.NAMESPACE = conventions.NAMESPACE;
    var errors = require_errors();
    exports.DOMException = errors.DOMException;
    exports.DOMExceptionName = errors.DOMExceptionName;
    exports.ExceptionCode = errors.ExceptionCode;
    exports.ParseError = errors.ParseError;
    var dom = require_dom();
    exports.Attr = dom.Attr;
    exports.CDATASection = dom.CDATASection;
    exports.CharacterData = dom.CharacterData;
    exports.Comment = dom.Comment;
    exports.Document = dom.Document;
    exports.DocumentFragment = dom.DocumentFragment;
    exports.DocumentType = dom.DocumentType;
    exports.DOMImplementation = dom.DOMImplementation;
    exports.Element = dom.Element;
    exports.Entity = dom.Entity;
    exports.EntityReference = dom.EntityReference;
    exports.LiveNodeList = dom.LiveNodeList;
    exports.NamedNodeMap = dom.NamedNodeMap;
    exports.Node = dom.Node;
    exports.NodeList = dom.NodeList;
    exports.Notation = dom.Notation;
    exports.ProcessingInstruction = dom.ProcessingInstruction;
    exports.Text = dom.Text;
    exports.XMLSerializer = dom.XMLSerializer;
    var domParser = require_dom_parser();
    exports.DOMParser = domParser.DOMParser;
    exports.onErrorStopParsing = domParser.onErrorStopParsing;
    exports.onWarningStopParsing = domParser.onWarningStopParsing;
  }
});

// ../../node_modules/xlsx/dist/cpexcel.js
var require_cpexcel = __commonJS({
  "../../node_modules/xlsx/dist/cpexcel.js"(exports, module) {
    init_esm();
    var cptable2 = { version: "1.15.0" };
    cptable2[437] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜ¢£¥₧ƒáíóúñÑªº¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[620] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàąçêëèïîćÄĄĘęłôöĆûùŚÖÜ¢Ł¥śƒŹŻóÓńŃźż¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[737] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρσςτυφχψ░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀ωάέήϊίόύϋώΆΈΉΊΌΎΏ±≥≤ΪΫ÷≈°∙·√ⁿ²■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[850] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø×ƒáíóúñÑªº¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ðÐÊËÈıÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµþÞÚÛÙýÝ¯´­±‗¾¶§÷¸°¨·¹³²■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[852] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäůćçłëŐőîŹÄĆÉĹĺôöĽľŚśÖÜŤťŁ×čáíóúĄąŽžĘę¬źČş«»░▒▓│┤ÁÂĚŞ╣║╗╝Żż┐└┴┬├─┼Ăă╚╔╩╦╠═╬¤đĐĎËďŇÍÎě┘┌█▄ŢŮ▀ÓßÔŃńňŠšŔÚŕŰýÝţ´­˝˛ˇ˘§÷¸°¨˙űŘř■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[857] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîıÄÅÉæÆôöòûùİÖÜø£ØŞşáíóúñÑĞğ¿®¬½¼¡«»░▒▓│┤ÁÂÀ©╣║╗╝¢¥┐└┴┬├─┼ãÃ╚╔╩╦╠═╬¤ºªÊËÈ�ÍÎÏ┘┌█▄¦Ì▀ÓßÔÒõÕµ�×ÚÛÙìÿ¯´­±�¾¶§÷¸°¨·¹³²■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[861] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèÐðÞÄÅÉæÆôöþûÝýÖÜø£Ø₧ƒáíóúÁÍÓÚ¿⌐¬½¼¡«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[865] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÇüéâäàåçêëèïîìÄÅÉæÆôöòûùÿÖÜø£Ø₧ƒáíóúñÑªº¿⌐¬½¼¡«¤░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[866] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмноп░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀рстуфхцчшщъыьэюяЁёЄєЇїЎў°∙·√№¤■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[874] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€����…�����������‘’“”•–—�������� กขฃคฅฆงจฉชซฌญฎฏฐฑฒณดตถทธนบปผฝพฟภมยรฤลฦวศษสหฬอฮฯะัาำิีึืฺุู����฿เแโใไๅๆ็่้๊๋์ํ๎๏๐๑๒๓๔๕๖๗๘๙๚๛����", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[895] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ČüéďäĎŤčěĚĹÍľǪÄÁÉžŽôöÓůÚýÖÜŠĽÝŘťáíóúňŇŮÔšřŕŔ¼§«»░▒▓│┤╡╢╖╕╣║╗╝╜╛┐└┴┬├─┼╞╟╚╔╩╦╠═╬╧╨╤╥╙╘╒╓╫╪┘┌█▄▌▐▀αßΓπΣσµτΦΘΩδ∞φε∩≡±≥≤⌠⌡÷≈°∙·√ⁿ²■ ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[932] = function() {
      var d3 = [], e3 = {}, D2 = [], j3;
      D2[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~���������������������������������｡｢｣､･ｦｧｨｩｪｫｬｭｮｯｰｱｲｳｴｵｶｷｸｹｺｻｼｽｾｿﾀﾁﾂﾃﾄﾅﾆﾇﾈﾉﾊﾋﾌﾍﾎﾏﾐﾑﾒﾓﾔﾕﾖﾗﾘﾙﾚﾛﾜﾝﾞﾟ��������������������������������".split("");
      for (j3 = 0; j3 != D2[0].length; ++j3) if (D2[0][j3].charCodeAt(0) !== 65533) {
        e3[D2[0][j3]] = 0 + j3;
        d3[0 + j3] = D2[0][j3];
      }
      D2[129] = "����������������������������������������������������������������　、。，．・：；？！゛゜´｀¨＾￣＿ヽヾゝゞ〃仝々〆〇ー―‐／＼～∥｜…‥‘’“”（）〔〕［］｛｝〈〉《》「」『』【】＋－±×�÷＝≠＜＞≦≧∞∴♂♀°′″℃￥＄￠￡％＃＆＊＠§☆★○●◎◇◆□■△▲▽▼※〒→←↑↓〓�����������∈∋⊆⊇⊂⊃∪∩��������∧∨￢⇒⇔∀∃�����������∠⊥⌒∂∇≡≒≪≫√∽∝∵∫∬�������Å‰♯♭♪†‡¶����◯���".split("");
      for (j3 = 0; j3 != D2[129].length; ++j3) if (D2[129][j3].charCodeAt(0) !== 65533) {
        e3[D2[129][j3]] = 33024 + j3;
        d3[33024 + j3] = D2[129][j3];
      }
      D2[130] = "�������������������������������������������������������������������������������０１２３４５６７８９�������ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ�������ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ����ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん��������������".split("");
      for (j3 = 0; j3 != D2[130].length; ++j3) if (D2[130][j3].charCodeAt(0) !== 65533) {
        e3[D2[130][j3]] = 33280 + j3;
        d3[33280 + j3] = D2[130][j3];
      }
      D2[131] = "����������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミ�ムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ��������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�����������������������������������������".split("");
      for (j3 = 0; j3 != D2[131].length; ++j3) if (D2[131][j3].charCodeAt(0) !== 65533) {
        e3[D2[131][j3]] = 33536 + j3;
        d3[33536 + j3] = D2[131][j3];
      }
      D2[132] = "����������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмн�опрстуфхцчшщъыьэюя�������������─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂�����������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[132].length; ++j3) if (D2[132][j3].charCodeAt(0) !== 65533) {
        e3[D2[132][j3]] = 33792 + j3;
        d3[33792 + j3] = D2[132][j3];
      }
      D2[135] = "����������������������������������������������������������������①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�㍉㌔㌢㍍㌘㌧㌃㌶㍑㍗㌍㌦㌣㌫㍊㌻㎜㎝㎞㎎㎏㏄㎡��������㍻�〝〟№㏍℡㊤㊥㊦㊧㊨㈱㈲㈹㍾㍽㍼≒≡∫∮∑√⊥∠∟⊿∵∩∪���������������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[135].length; ++j3) if (D2[135][j3].charCodeAt(0) !== 65533) {
        e3[D2[135][j3]] = 34560 + j3;
        d3[34560 + j3] = D2[135][j3];
      }
      D2[136] = "���������������������������������������������������������������������������������������������������������������������������������������������������������������亜唖娃阿哀愛挨姶逢葵茜穐悪握渥旭葦芦鯵梓圧斡扱宛姐虻飴絢綾鮎或粟袷安庵按暗案闇鞍杏以伊位依偉囲夷委威尉惟意慰易椅為畏異移維緯胃萎衣謂違遺医井亥域育郁磯一壱溢逸稲茨芋鰯允印咽員因姻引飲淫胤蔭���".split("");
      for (j3 = 0; j3 != D2[136].length; ++j3) if (D2[136][j3].charCodeAt(0) !== 65533) {
        e3[D2[136][j3]] = 34816 + j3;
        d3[34816 + j3] = D2[136][j3];
      }
      D2[137] = "����������������������������������������������������������������院陰隠韻吋右宇烏羽迂雨卯鵜窺丑碓臼渦嘘唄欝蔚鰻姥厩浦瓜閏噂云運雲荏餌叡営嬰影映曳栄永泳洩瑛盈穎頴英衛詠鋭液疫益駅悦謁越閲榎厭円�園堰奄宴延怨掩援沿演炎焔煙燕猿縁艶苑薗遠鉛鴛塩於汚甥凹央奥往応押旺横欧殴王翁襖鴬鴎黄岡沖荻億屋憶臆桶牡乙俺卸恩温穏音下化仮何伽価佳加可嘉夏嫁家寡科暇果架歌河火珂禍禾稼箇花苛茄荷華菓蝦課嘩貨迦過霞蚊俄峨我牙画臥芽蛾賀雅餓駕介会解回塊壊廻快怪悔恢懐戒拐改���".split("");
      for (j3 = 0; j3 != D2[137].length; ++j3) if (D2[137][j3].charCodeAt(0) !== 65533) {
        e3[D2[137][j3]] = 35072 + j3;
        d3[35072 + j3] = D2[137][j3];
      }
      D2[138] = "����������������������������������������������������������������魁晦械海灰界皆絵芥蟹開階貝凱劾外咳害崖慨概涯碍蓋街該鎧骸浬馨蛙垣柿蛎鈎劃嚇各廓拡撹格核殻獲確穫覚角赫較郭閣隔革学岳楽額顎掛笠樫�橿梶鰍潟割喝恰括活渇滑葛褐轄且鰹叶椛樺鞄株兜竃蒲釜鎌噛鴨栢茅萱粥刈苅瓦乾侃冠寒刊勘勧巻喚堪姦完官寛干幹患感慣憾換敢柑桓棺款歓汗漢澗潅環甘監看竿管簡緩缶翰肝艦莞観諌貫還鑑間閑関陥韓館舘丸含岸巌玩癌眼岩翫贋雁頑顔願企伎危喜器基奇嬉寄岐希幾忌揮机旗既期棋棄���".split("");
      for (j3 = 0; j3 != D2[138].length; ++j3) if (D2[138][j3].charCodeAt(0) !== 65533) {
        e3[D2[138][j3]] = 35328 + j3;
        d3[35328 + j3] = D2[138][j3];
      }
      D2[139] = "����������������������������������������������������������������機帰毅気汽畿祈季稀紀徽規記貴起軌輝飢騎鬼亀偽儀妓宜戯技擬欺犠疑祇義蟻誼議掬菊鞠吉吃喫桔橘詰砧杵黍却客脚虐逆丘久仇休及吸宮弓急救�朽求汲泣灸球究窮笈級糾給旧牛去居巨拒拠挙渠虚許距鋸漁禦魚亨享京供侠僑兇競共凶協匡卿叫喬境峡強彊怯恐恭挟教橋況狂狭矯胸脅興蕎郷鏡響饗驚仰凝尭暁業局曲極玉桐粁僅勤均巾錦斤欣欽琴禁禽筋緊芹菌衿襟謹近金吟銀九倶句区狗玖矩苦躯駆駈駒具愚虞喰空偶寓遇隅串櫛釧屑屈���".split("");
      for (j3 = 0; j3 != D2[139].length; ++j3) if (D2[139][j3].charCodeAt(0) !== 65533) {
        e3[D2[139][j3]] = 35584 + j3;
        d3[35584 + j3] = D2[139][j3];
      }
      D2[140] = "����������������������������������������������������������������掘窟沓靴轡窪熊隈粂栗繰桑鍬勲君薫訓群軍郡卦袈祁係傾刑兄啓圭珪型契形径恵慶慧憩掲携敬景桂渓畦稽系経継繋罫茎荊蛍計詣警軽頚鶏芸迎鯨�劇戟撃激隙桁傑欠決潔穴結血訣月件倹倦健兼券剣喧圏堅嫌建憲懸拳捲検権牽犬献研硯絹県肩見謙賢軒遣鍵険顕験鹸元原厳幻弦減源玄現絃舷言諺限乎個古呼固姑孤己庫弧戸故枯湖狐糊袴股胡菰虎誇跨鈷雇顧鼓五互伍午呉吾娯後御悟梧檎瑚碁語誤護醐乞鯉交佼侯候倖光公功効勾厚口向���".split("");
      for (j3 = 0; j3 != D2[140].length; ++j3) if (D2[140][j3].charCodeAt(0) !== 65533) {
        e3[D2[140][j3]] = 35840 + j3;
        d3[35840 + j3] = D2[140][j3];
      }
      D2[141] = "����������������������������������������������������������������后喉坑垢好孔孝宏工巧巷幸広庚康弘恒慌抗拘控攻昂晃更杭校梗構江洪浩港溝甲皇硬稿糠紅紘絞綱耕考肯肱腔膏航荒行衡講貢購郊酵鉱砿鋼閤降�項香高鴻剛劫号合壕拷濠豪轟麹克刻告国穀酷鵠黒獄漉腰甑忽惚骨狛込此頃今困坤墾婚恨懇昏昆根梱混痕紺艮魂些佐叉唆嵯左差査沙瑳砂詐鎖裟坐座挫債催再最哉塞妻宰彩才採栽歳済災采犀砕砦祭斎細菜裁載際剤在材罪財冴坂阪堺榊肴咲崎埼碕鷺作削咋搾昨朔柵窄策索錯桜鮭笹匙冊刷���".split("");
      for (j3 = 0; j3 != D2[141].length; ++j3) if (D2[141][j3].charCodeAt(0) !== 65533) {
        e3[D2[141][j3]] = 36096 + j3;
        d3[36096 + j3] = D2[141][j3];
      }
      D2[142] = "����������������������������������������������������������������察拶撮擦札殺薩雑皐鯖捌錆鮫皿晒三傘参山惨撒散桟燦珊産算纂蚕讃賛酸餐斬暫残仕仔伺使刺司史嗣四士始姉姿子屍市師志思指支孜斯施旨枝止�死氏獅祉私糸紙紫肢脂至視詞詩試誌諮資賜雌飼歯事似侍児字寺慈持時次滋治爾璽痔磁示而耳自蒔辞汐鹿式識鴫竺軸宍雫七叱執失嫉室悉湿漆疾質実蔀篠偲柴芝屡蕊縞舎写射捨赦斜煮社紗者謝車遮蛇邪借勺尺杓灼爵酌釈錫若寂弱惹主取守手朱殊狩珠種腫趣酒首儒受呪寿授樹綬需囚収周���".split("");
      for (j3 = 0; j3 != D2[142].length; ++j3) if (D2[142][j3].charCodeAt(0) !== 65533) {
        e3[D2[142][j3]] = 36352 + j3;
        d3[36352 + j3] = D2[142][j3];
      }
      D2[143] = "����������������������������������������������������������������宗就州修愁拾洲秀秋終繍習臭舟蒐衆襲讐蹴輯週酋酬集醜什住充十従戎柔汁渋獣縦重銃叔夙宿淑祝縮粛塾熟出術述俊峻春瞬竣舜駿准循旬楯殉淳�準潤盾純巡遵醇順処初所暑曙渚庶緒署書薯藷諸助叙女序徐恕鋤除傷償勝匠升召哨商唱嘗奨妾娼宵将小少尚庄床廠彰承抄招掌捷昇昌昭晶松梢樟樵沼消渉湘焼焦照症省硝礁祥称章笑粧紹肖菖蒋蕉衝裳訟証詔詳象賞醤鉦鍾鐘障鞘上丈丞乗冗剰城場壌嬢常情擾条杖浄状畳穣蒸譲醸錠嘱埴飾���".split("");
      for (j3 = 0; j3 != D2[143].length; ++j3) if (D2[143][j3].charCodeAt(0) !== 65533) {
        e3[D2[143][j3]] = 36608 + j3;
        d3[36608 + j3] = D2[143][j3];
      }
      D2[144] = "����������������������������������������������������������������拭植殖燭織職色触食蝕辱尻伸信侵唇娠寝審心慎振新晋森榛浸深申疹真神秦紳臣芯薪親診身辛進針震人仁刃塵壬尋甚尽腎訊迅陣靭笥諏須酢図厨�逗吹垂帥推水炊睡粋翠衰遂酔錐錘随瑞髄崇嵩数枢趨雛据杉椙菅頗雀裾澄摺寸世瀬畝是凄制勢姓征性成政整星晴棲栖正清牲生盛精聖声製西誠誓請逝醒青静斉税脆隻席惜戚斥昔析石積籍績脊責赤跡蹟碩切拙接摂折設窃節説雪絶舌蝉仙先千占宣専尖川戦扇撰栓栴泉浅洗染潜煎煽旋穿箭線���".split("");
      for (j3 = 0; j3 != D2[144].length; ++j3) if (D2[144][j3].charCodeAt(0) !== 65533) {
        e3[D2[144][j3]] = 36864 + j3;
        d3[36864 + j3] = D2[144][j3];
      }
      D2[145] = "����������������������������������������������������������������繊羨腺舛船薦詮賎践選遷銭銑閃鮮前善漸然全禅繕膳糎噌塑岨措曾曽楚狙疏疎礎祖租粗素組蘇訴阻遡鼠僧創双叢倉喪壮奏爽宋層匝惣想捜掃挿掻�操早曹巣槍槽漕燥争痩相窓糟総綜聡草荘葬蒼藻装走送遭鎗霜騒像増憎臓蔵贈造促側則即息捉束測足速俗属賊族続卒袖其揃存孫尊損村遜他多太汰詑唾堕妥惰打柁舵楕陀駄騨体堆対耐岱帯待怠態戴替泰滞胎腿苔袋貸退逮隊黛鯛代台大第醍題鷹滝瀧卓啄宅托択拓沢濯琢託鐸濁諾茸凧蛸只���".split("");
      for (j3 = 0; j3 != D2[145].length; ++j3) if (D2[145][j3].charCodeAt(0) !== 65533) {
        e3[D2[145][j3]] = 37120 + j3;
        d3[37120 + j3] = D2[145][j3];
      }
      D2[146] = "����������������������������������������������������������������叩但達辰奪脱巽竪辿棚谷狸鱈樽誰丹単嘆坦担探旦歎淡湛炭短端箪綻耽胆蛋誕鍛団壇弾断暖檀段男談値知地弛恥智池痴稚置致蜘遅馳築畜竹筑蓄�逐秩窒茶嫡着中仲宙忠抽昼柱注虫衷註酎鋳駐樗瀦猪苧著貯丁兆凋喋寵帖帳庁弔張彫徴懲挑暢朝潮牒町眺聴脹腸蝶調諜超跳銚長頂鳥勅捗直朕沈珍賃鎮陳津墜椎槌追鎚痛通塚栂掴槻佃漬柘辻蔦綴鍔椿潰坪壷嬬紬爪吊釣鶴亭低停偵剃貞呈堤定帝底庭廷弟悌抵挺提梯汀碇禎程締艇訂諦蹄逓���".split("");
      for (j3 = 0; j3 != D2[146].length; ++j3) if (D2[146][j3].charCodeAt(0) !== 65533) {
        e3[D2[146][j3]] = 37376 + j3;
        d3[37376 + j3] = D2[146][j3];
      }
      D2[147] = "����������������������������������������������������������������邸鄭釘鼎泥摘擢敵滴的笛適鏑溺哲徹撤轍迭鉄典填天展店添纏甜貼転顛点伝殿澱田電兎吐堵塗妬屠徒斗杜渡登菟賭途都鍍砥砺努度土奴怒倒党冬�凍刀唐塔塘套宕島嶋悼投搭東桃梼棟盗淘湯涛灯燈当痘祷等答筒糖統到董蕩藤討謄豆踏逃透鐙陶頭騰闘働動同堂導憧撞洞瞳童胴萄道銅峠鴇匿得徳涜特督禿篤毒独読栃橡凸突椴届鳶苫寅酉瀞噸屯惇敦沌豚遁頓呑曇鈍奈那内乍凪薙謎灘捺鍋楢馴縄畷南楠軟難汝二尼弐迩匂賑肉虹廿日乳入���".split("");
      for (j3 = 0; j3 != D2[147].length; ++j3) if (D2[147][j3].charCodeAt(0) !== 65533) {
        e3[D2[147][j3]] = 37632 + j3;
        d3[37632 + j3] = D2[147][j3];
      }
      D2[148] = "����������������������������������������������������������������如尿韮任妊忍認濡禰祢寧葱猫熱年念捻撚燃粘乃廼之埜嚢悩濃納能脳膿農覗蚤巴把播覇杷波派琶破婆罵芭馬俳廃拝排敗杯盃牌背肺輩配倍培媒梅�楳煤狽買売賠陪這蝿秤矧萩伯剥博拍柏泊白箔粕舶薄迫曝漠爆縛莫駁麦函箱硲箸肇筈櫨幡肌畑畠八鉢溌発醗髪伐罰抜筏閥鳩噺塙蛤隼伴判半反叛帆搬斑板氾汎版犯班畔繁般藩販範釆煩頒飯挽晩番盤磐蕃蛮匪卑否妃庇彼悲扉批披斐比泌疲皮碑秘緋罷肥被誹費避非飛樋簸備尾微枇毘琵眉美���".split("");
      for (j3 = 0; j3 != D2[148].length; ++j3) if (D2[148][j3].charCodeAt(0) !== 65533) {
        e3[D2[148][j3]] = 37888 + j3;
        d3[37888 + j3] = D2[148][j3];
      }
      D2[149] = "����������������������������������������������������������������鼻柊稗匹疋髭彦膝菱肘弼必畢筆逼桧姫媛紐百謬俵彪標氷漂瓢票表評豹廟描病秒苗錨鋲蒜蛭鰭品彬斌浜瀕貧賓頻敏瓶不付埠夫婦富冨布府怖扶敷�斧普浮父符腐膚芙譜負賦赴阜附侮撫武舞葡蕪部封楓風葺蕗伏副復幅服福腹複覆淵弗払沸仏物鮒分吻噴墳憤扮焚奮粉糞紛雰文聞丙併兵塀幣平弊柄並蔽閉陛米頁僻壁癖碧別瞥蔑箆偏変片篇編辺返遍便勉娩弁鞭保舗鋪圃捕歩甫補輔穂募墓慕戊暮母簿菩倣俸包呆報奉宝峰峯崩庖抱捧放方朋���".split("");
      for (j3 = 0; j3 != D2[149].length; ++j3) if (D2[149][j3].charCodeAt(0) !== 65533) {
        e3[D2[149][j3]] = 38144 + j3;
        d3[38144 + j3] = D2[149][j3];
      }
      D2[150] = "����������������������������������������������������������������法泡烹砲縫胞芳萌蓬蜂褒訪豊邦鋒飽鳳鵬乏亡傍剖坊妨帽忘忙房暴望某棒冒紡肪膨謀貌貿鉾防吠頬北僕卜墨撲朴牧睦穆釦勃没殆堀幌奔本翻凡盆�摩磨魔麻埋妹昧枚毎哩槙幕膜枕鮪柾鱒桝亦俣又抹末沫迄侭繭麿万慢満漫蔓味未魅巳箕岬密蜜湊蓑稔脈妙粍民眠務夢無牟矛霧鵡椋婿娘冥名命明盟迷銘鳴姪牝滅免棉綿緬面麺摸模茂妄孟毛猛盲網耗蒙儲木黙目杢勿餅尤戻籾貰問悶紋門匁也冶夜爺耶野弥矢厄役約薬訳躍靖柳薮鑓愉愈油癒���".split("");
      for (j3 = 0; j3 != D2[150].length; ++j3) if (D2[150][j3].charCodeAt(0) !== 65533) {
        e3[D2[150][j3]] = 38400 + j3;
        d3[38400 + j3] = D2[150][j3];
      }
      D2[151] = "����������������������������������������������������������������諭輸唯佑優勇友宥幽悠憂揖有柚湧涌猶猷由祐裕誘遊邑郵雄融夕予余与誉輿預傭幼妖容庸揚揺擁曜楊様洋溶熔用窯羊耀葉蓉要謡踊遥陽養慾抑欲�沃浴翌翼淀羅螺裸来莱頼雷洛絡落酪乱卵嵐欄濫藍蘭覧利吏履李梨理璃痢裏裡里離陸律率立葎掠略劉流溜琉留硫粒隆竜龍侶慮旅虜了亮僚両凌寮料梁涼猟療瞭稜糧良諒遼量陵領力緑倫厘林淋燐琳臨輪隣鱗麟瑠塁涙累類令伶例冷励嶺怜玲礼苓鈴隷零霊麗齢暦歴列劣烈裂廉恋憐漣煉簾練聯���".split("");
      for (j3 = 0; j3 != D2[151].length; ++j3) if (D2[151][j3].charCodeAt(0) !== 65533) {
        e3[D2[151][j3]] = 38656 + j3;
        d3[38656 + j3] = D2[151][j3];
      }
      D2[152] = "����������������������������������������������������������������蓮連錬呂魯櫓炉賂路露労婁廊弄朗楼榔浪漏牢狼篭老聾蝋郎六麓禄肋録論倭和話歪賄脇惑枠鷲亙亘鰐詫藁蕨椀湾碗腕��������������������������������������������弌丐丕个丱丶丼丿乂乖乘亂亅豫亊舒弍于亞亟亠亢亰亳亶从仍仄仆仂仗仞仭仟价伉佚估佛佝佗佇佶侈侏侘佻佩佰侑佯來侖儘俔俟俎俘俛俑俚俐俤俥倚倨倔倪倥倅伜俶倡倩倬俾俯們倆偃假會偕偐偈做偖偬偸傀傚傅傴傲���".split("");
      for (j3 = 0; j3 != D2[152].length; ++j3) if (D2[152][j3].charCodeAt(0) !== 65533) {
        e3[D2[152][j3]] = 38912 + j3;
        d3[38912 + j3] = D2[152][j3];
      }
      D2[153] = "����������������������������������������������������������������僉僊傳僂僖僞僥僭僣僮價僵儉儁儂儖儕儔儚儡儺儷儼儻儿兀兒兌兔兢竸兩兪兮冀冂囘册冉冏冑冓冕冖冤冦冢冩冪冫决冱冲冰况冽凅凉凛几處凩凭�凰凵凾刄刋刔刎刧刪刮刳刹剏剄剋剌剞剔剪剴剩剳剿剽劍劔劒剱劈劑辨辧劬劭劼劵勁勍勗勞勣勦飭勠勳勵勸勹匆匈甸匍匐匏匕匚匣匯匱匳匸區卆卅丗卉卍凖卞卩卮夘卻卷厂厖厠厦厥厮厰厶參簒雙叟曼燮叮叨叭叺吁吽呀听吭吼吮吶吩吝呎咏呵咎呟呱呷呰咒呻咀呶咄咐咆哇咢咸咥咬哄哈咨���".split("");
      for (j3 = 0; j3 != D2[153].length; ++j3) if (D2[153][j3].charCodeAt(0) !== 65533) {
        e3[D2[153][j3]] = 39168 + j3;
        d3[39168 + j3] = D2[153][j3];
      }
      D2[154] = "����������������������������������������������������������������咫哂咤咾咼哘哥哦唏唔哽哮哭哺哢唹啀啣啌售啜啅啖啗唸唳啝喙喀咯喊喟啻啾喘喞單啼喃喩喇喨嗚嗅嗟嗄嗜嗤嗔嘔嗷嘖嗾嗽嘛嗹噎噐營嘴嘶嘲嘸�噫噤嘯噬噪嚆嚀嚊嚠嚔嚏嚥嚮嚶嚴囂嚼囁囃囀囈囎囑囓囗囮囹圀囿圄圉圈國圍圓團圖嗇圜圦圷圸坎圻址坏坩埀垈坡坿垉垓垠垳垤垪垰埃埆埔埒埓堊埖埣堋堙堝塲堡塢塋塰毀塒堽塹墅墹墟墫墺壞墻墸墮壅壓壑壗壙壘壥壜壤壟壯壺壹壻壼壽夂夊夐夛梦夥夬夭夲夸夾竒奕奐奎奚奘奢奠奧奬奩���".split("");
      for (j3 = 0; j3 != D2[154].length; ++j3) if (D2[154][j3].charCodeAt(0) !== 65533) {
        e3[D2[154][j3]] = 39424 + j3;
        d3[39424 + j3] = D2[154][j3];
      }
      D2[155] = "����������������������������������������������������������������奸妁妝佞侫妣妲姆姨姜妍姙姚娥娟娑娜娉娚婀婬婉娵娶婢婪媚媼媾嫋嫂媽嫣嫗嫦嫩嫖嫺嫻嬌嬋嬖嬲嫐嬪嬶嬾孃孅孀孑孕孚孛孥孩孰孳孵學斈孺宀�它宦宸寃寇寉寔寐寤實寢寞寥寫寰寶寳尅將專對尓尠尢尨尸尹屁屆屎屓屐屏孱屬屮乢屶屹岌岑岔妛岫岻岶岼岷峅岾峇峙峩峽峺峭嶌峪崋崕崗嵜崟崛崑崔崢崚崙崘嵌嵒嵎嵋嵬嵳嵶嶇嶄嶂嶢嶝嶬嶮嶽嶐嶷嶼巉巍巓巒巖巛巫已巵帋帚帙帑帛帶帷幄幃幀幎幗幔幟幢幤幇幵并幺麼广庠廁廂廈廐廏���".split("");
      for (j3 = 0; j3 != D2[155].length; ++j3) if (D2[155][j3].charCodeAt(0) !== 65533) {
        e3[D2[155][j3]] = 39680 + j3;
        d3[39680 + j3] = D2[155][j3];
      }
      D2[156] = "����������������������������������������������������������������廖廣廝廚廛廢廡廨廩廬廱廳廰廴廸廾弃弉彝彜弋弑弖弩弭弸彁彈彌彎弯彑彖彗彙彡彭彳彷徃徂彿徊很徑徇從徙徘徠徨徭徼忖忻忤忸忱忝悳忿怡恠�怙怐怩怎怱怛怕怫怦怏怺恚恁恪恷恟恊恆恍恣恃恤恂恬恫恙悁悍惧悃悚悄悛悖悗悒悧悋惡悸惠惓悴忰悽惆悵惘慍愕愆惶惷愀惴惺愃愡惻惱愍愎慇愾愨愧慊愿愼愬愴愽慂慄慳慷慘慙慚慫慴慯慥慱慟慝慓慵憙憖憇憬憔憚憊憑憫憮懌懊應懷懈懃懆憺懋罹懍懦懣懶懺懴懿懽懼懾戀戈戉戍戌戔戛���".split("");
      for (j3 = 0; j3 != D2[156].length; ++j3) if (D2[156][j3].charCodeAt(0) !== 65533) {
        e3[D2[156][j3]] = 39936 + j3;
        d3[39936 + j3] = D2[156][j3];
      }
      D2[157] = "����������������������������������������������������������������戞戡截戮戰戲戳扁扎扞扣扛扠扨扼抂抉找抒抓抖拔抃抔拗拑抻拏拿拆擔拈拜拌拊拂拇抛拉挌拮拱挧挂挈拯拵捐挾捍搜捏掖掎掀掫捶掣掏掉掟掵捫�捩掾揩揀揆揣揉插揶揄搖搴搆搓搦搶攝搗搨搏摧摯摶摎攪撕撓撥撩撈撼據擒擅擇撻擘擂擱擧舉擠擡抬擣擯攬擶擴擲擺攀擽攘攜攅攤攣攫攴攵攷收攸畋效敖敕敍敘敞敝敲數斂斃變斛斟斫斷旃旆旁旄旌旒旛旙无旡旱杲昊昃旻杳昵昶昴昜晏晄晉晁晞晝晤晧晨晟晢晰暃暈暎暉暄暘暝曁暹曉暾暼���".split("");
      for (j3 = 0; j3 != D2[157].length; ++j3) if (D2[157][j3].charCodeAt(0) !== 65533) {
        e3[D2[157][j3]] = 40192 + j3;
        d3[40192 + j3] = D2[157][j3];
      }
      D2[158] = "����������������������������������������������������������������曄暸曖曚曠昿曦曩曰曵曷朏朖朞朦朧霸朮朿朶杁朸朷杆杞杠杙杣杤枉杰枩杼杪枌枋枦枡枅枷柯枴柬枳柩枸柤柞柝柢柮枹柎柆柧檜栞框栩桀桍栲桎�梳栫桙档桷桿梟梏梭梔條梛梃檮梹桴梵梠梺椏梍桾椁棊椈棘椢椦棡椌棍棔棧棕椶椒椄棗棣椥棹棠棯椨椪椚椣椡棆楹楷楜楸楫楔楾楮椹楴椽楙椰楡楞楝榁楪榲榮槐榿槁槓榾槎寨槊槝榻槃榧樮榑榠榜榕榴槞槨樂樛槿權槹槲槧樅榱樞槭樔槫樊樒櫁樣樓橄樌橲樶橸橇橢橙橦橈樸樢檐檍檠檄檢檣���".split("");
      for (j3 = 0; j3 != D2[158].length; ++j3) if (D2[158][j3].charCodeAt(0) !== 65533) {
        e3[D2[158][j3]] = 40448 + j3;
        d3[40448 + j3] = D2[158][j3];
      }
      D2[159] = "����������������������������������������������������������������檗蘗檻櫃櫂檸檳檬櫞櫑櫟檪櫚櫪櫻欅蘖櫺欒欖鬱欟欸欷盜欹飮歇歃歉歐歙歔歛歟歡歸歹歿殀殄殃殍殘殕殞殤殪殫殯殲殱殳殷殼毆毋毓毟毬毫毳毯�麾氈氓气氛氤氣汞汕汢汪沂沍沚沁沛汾汨汳沒沐泄泱泓沽泗泅泝沮沱沾沺泛泯泙泪洟衍洶洫洽洸洙洵洳洒洌浣涓浤浚浹浙涎涕濤涅淹渕渊涵淇淦涸淆淬淞淌淨淒淅淺淙淤淕淪淮渭湮渮渙湲湟渾渣湫渫湶湍渟湃渺湎渤滿渝游溂溪溘滉溷滓溽溯滄溲滔滕溏溥滂溟潁漑灌滬滸滾漿滲漱滯漲滌���".split("");
      for (j3 = 0; j3 != D2[159].length; ++j3) if (D2[159][j3].charCodeAt(0) !== 65533) {
        e3[D2[159][j3]] = 40704 + j3;
        d3[40704 + j3] = D2[159][j3];
      }
      D2[224] = "����������������������������������������������������������������漾漓滷澆潺潸澁澀潯潛濳潭澂潼潘澎澑濂潦澳澣澡澤澹濆澪濟濕濬濔濘濱濮濛瀉瀋濺瀑瀁瀏濾瀛瀚潴瀝瀘瀟瀰瀾瀲灑灣炙炒炯烱炬炸炳炮烟烋烝�烙焉烽焜焙煥煕熈煦煢煌煖煬熏燻熄熕熨熬燗熹熾燒燉燔燎燠燬燧燵燼燹燿爍爐爛爨爭爬爰爲爻爼爿牀牆牋牘牴牾犂犁犇犒犖犢犧犹犲狃狆狄狎狒狢狠狡狹狷倏猗猊猜猖猝猴猯猩猥猾獎獏默獗獪獨獰獸獵獻獺珈玳珎玻珀珥珮珞璢琅瑯琥珸琲琺瑕琿瑟瑙瑁瑜瑩瑰瑣瑪瑶瑾璋璞璧瓊瓏瓔珱���".split("");
      for (j3 = 0; j3 != D2[224].length; ++j3) if (D2[224][j3].charCodeAt(0) !== 65533) {
        e3[D2[224][j3]] = 57344 + j3;
        d3[57344 + j3] = D2[224][j3];
      }
      D2[225] = "����������������������������������������������������������������瓠瓣瓧瓩瓮瓲瓰瓱瓸瓷甄甃甅甌甎甍甕甓甞甦甬甼畄畍畊畉畛畆畚畩畤畧畫畭畸當疆疇畴疊疉疂疔疚疝疥疣痂疳痃疵疽疸疼疱痍痊痒痙痣痞痾痿�痼瘁痰痺痲痳瘋瘍瘉瘟瘧瘠瘡瘢瘤瘴瘰瘻癇癈癆癜癘癡癢癨癩癪癧癬癰癲癶癸發皀皃皈皋皎皖皓皙皚皰皴皸皹皺盂盍盖盒盞盡盥盧盪蘯盻眈眇眄眩眤眞眥眦眛眷眸睇睚睨睫睛睥睿睾睹瞎瞋瞑瞠瞞瞰瞶瞹瞿瞼瞽瞻矇矍矗矚矜矣矮矼砌砒礦砠礪硅碎硴碆硼碚碌碣碵碪碯磑磆磋磔碾碼磅磊磬���".split("");
      for (j3 = 0; j3 != D2[225].length; ++j3) if (D2[225][j3].charCodeAt(0) !== 65533) {
        e3[D2[225][j3]] = 57600 + j3;
        d3[57600 + j3] = D2[225][j3];
      }
      D2[226] = "����������������������������������������������������������������磧磚磽磴礇礒礑礙礬礫祀祠祗祟祚祕祓祺祿禊禝禧齋禪禮禳禹禺秉秕秧秬秡秣稈稍稘稙稠稟禀稱稻稾稷穃穗穉穡穢穩龝穰穹穽窈窗窕窘窖窩竈窰�窶竅竄窿邃竇竊竍竏竕竓站竚竝竡竢竦竭竰笂笏笊笆笳笘笙笞笵笨笶筐筺笄筍笋筌筅筵筥筴筧筰筱筬筮箝箘箟箍箜箚箋箒箏筝箙篋篁篌篏箴篆篝篩簑簔篦篥籠簀簇簓篳篷簗簍篶簣簧簪簟簷簫簽籌籃籔籏籀籐籘籟籤籖籥籬籵粃粐粤粭粢粫粡粨粳粲粱粮粹粽糀糅糂糘糒糜糢鬻糯糲糴糶糺紆���".split("");
      for (j3 = 0; j3 != D2[226].length; ++j3) if (D2[226][j3].charCodeAt(0) !== 65533) {
        e3[D2[226][j3]] = 57856 + j3;
        d3[57856 + j3] = D2[226][j3];
      }
      D2[227] = "����������������������������������������������������������������紂紜紕紊絅絋紮紲紿紵絆絳絖絎絲絨絮絏絣經綉絛綏絽綛綺綮綣綵緇綽綫總綢綯緜綸綟綰緘緝緤緞緻緲緡縅縊縣縡縒縱縟縉縋縢繆繦縻縵縹繃縷�縲縺繧繝繖繞繙繚繹繪繩繼繻纃緕繽辮繿纈纉續纒纐纓纔纖纎纛纜缸缺罅罌罍罎罐网罕罔罘罟罠罨罩罧罸羂羆羃羈羇羌羔羞羝羚羣羯羲羹羮羶羸譱翅翆翊翕翔翡翦翩翳翹飜耆耄耋耒耘耙耜耡耨耿耻聊聆聒聘聚聟聢聨聳聲聰聶聹聽聿肄肆肅肛肓肚肭冐肬胛胥胙胝胄胚胖脉胯胱脛脩脣脯腋���".split("");
      for (j3 = 0; j3 != D2[227].length; ++j3) if (D2[227][j3].charCodeAt(0) !== 65533) {
        e3[D2[227][j3]] = 58112 + j3;
        d3[58112 + j3] = D2[227][j3];
      }
      D2[228] = "����������������������������������������������������������������隋腆脾腓腑胼腱腮腥腦腴膃膈膊膀膂膠膕膤膣腟膓膩膰膵膾膸膽臀臂膺臉臍臑臙臘臈臚臟臠臧臺臻臾舁舂舅與舊舍舐舖舩舫舸舳艀艙艘艝艚艟艤�艢艨艪艫舮艱艷艸艾芍芒芫芟芻芬苡苣苟苒苴苳苺莓范苻苹苞茆苜茉苙茵茴茖茲茱荀茹荐荅茯茫茗茘莅莚莪莟莢莖茣莎莇莊荼莵荳荵莠莉莨菴萓菫菎菽萃菘萋菁菷萇菠菲萍萢萠莽萸蔆菻葭萪萼蕚蒄葷葫蒭葮蒂葩葆萬葯葹萵蓊葢蒹蒿蒟蓙蓍蒻蓚蓐蓁蓆蓖蒡蔡蓿蓴蔗蔘蔬蔟蔕蔔蓼蕀蕣蕘蕈���".split("");
      for (j3 = 0; j3 != D2[228].length; ++j3) if (D2[228][j3].charCodeAt(0) !== 65533) {
        e3[D2[228][j3]] = 58368 + j3;
        d3[58368 + j3] = D2[228][j3];
      }
      D2[229] = "����������������������������������������������������������������蕁蘂蕋蕕薀薤薈薑薊薨蕭薔薛藪薇薜蕷蕾薐藉薺藏薹藐藕藝藥藜藹蘊蘓蘋藾藺蘆蘢蘚蘰蘿虍乕虔號虧虱蚓蚣蚩蚪蚋蚌蚶蚯蛄蛆蚰蛉蠣蚫蛔蛞蛩蛬�蛟蛛蛯蜒蜆蜈蜀蜃蛻蜑蜉蜍蛹蜊蜴蜿蜷蜻蜥蜩蜚蝠蝟蝸蝌蝎蝴蝗蝨蝮蝙蝓蝣蝪蠅螢螟螂螯蟋螽蟀蟐雖螫蟄螳蟇蟆螻蟯蟲蟠蠏蠍蟾蟶蟷蠎蟒蠑蠖蠕蠢蠡蠱蠶蠹蠧蠻衄衂衒衙衞衢衫袁衾袞衵衽袵衲袂袗袒袮袙袢袍袤袰袿袱裃裄裔裘裙裝裹褂裼裴裨裲褄褌褊褓襃褞褥褪褫襁襄褻褶褸襌褝襠襞���".split("");
      for (j3 = 0; j3 != D2[229].length; ++j3) if (D2[229][j3].charCodeAt(0) !== 65533) {
        e3[D2[229][j3]] = 58624 + j3;
        d3[58624 + j3] = D2[229][j3];
      }
      D2[230] = "����������������������������������������������������������������襦襤襭襪襯襴襷襾覃覈覊覓覘覡覩覦覬覯覲覺覽覿觀觚觜觝觧觴觸訃訖訐訌訛訝訥訶詁詛詒詆詈詼詭詬詢誅誂誄誨誡誑誥誦誚誣諄諍諂諚諫諳諧�諤諱謔諠諢諷諞諛謌謇謚諡謖謐謗謠謳鞫謦謫謾謨譁譌譏譎證譖譛譚譫譟譬譯譴譽讀讌讎讒讓讖讙讚谺豁谿豈豌豎豐豕豢豬豸豺貂貉貅貊貍貎貔豼貘戝貭貪貽貲貳貮貶賈賁賤賣賚賽賺賻贄贅贊贇贏贍贐齎贓賍贔贖赧赭赱赳趁趙跂趾趺跏跚跖跌跛跋跪跫跟跣跼踈踉跿踝踞踐踟蹂踵踰踴蹊���".split("");
      for (j3 = 0; j3 != D2[230].length; ++j3) if (D2[230][j3].charCodeAt(0) !== 65533) {
        e3[D2[230][j3]] = 58880 + j3;
        d3[58880 + j3] = D2[230][j3];
      }
      D2[231] = "����������������������������������������������������������������蹇蹉蹌蹐蹈蹙蹤蹠踪蹣蹕蹶蹲蹼躁躇躅躄躋躊躓躑躔躙躪躡躬躰軆躱躾軅軈軋軛軣軼軻軫軾輊輅輕輒輙輓輜輟輛輌輦輳輻輹轅轂輾轌轉轆轎轗轜�轢轣轤辜辟辣辭辯辷迚迥迢迪迯邇迴逅迹迺逑逕逡逍逞逖逋逧逶逵逹迸遏遐遑遒逎遉逾遖遘遞遨遯遶隨遲邂遽邁邀邊邉邏邨邯邱邵郢郤扈郛鄂鄒鄙鄲鄰酊酖酘酣酥酩酳酲醋醉醂醢醫醯醪醵醴醺釀釁釉釋釐釖釟釡釛釼釵釶鈞釿鈔鈬鈕鈑鉞鉗鉅鉉鉤鉈銕鈿鉋鉐銜銖銓銛鉚鋏銹銷鋩錏鋺鍄錮���".split("");
      for (j3 = 0; j3 != D2[231].length; ++j3) if (D2[231][j3].charCodeAt(0) !== 65533) {
        e3[D2[231][j3]] = 59136 + j3;
        d3[59136 + j3] = D2[231][j3];
      }
      D2[232] = "����������������������������������������������������������������錙錢錚錣錺錵錻鍜鍠鍼鍮鍖鎰鎬鎭鎔鎹鏖鏗鏨鏥鏘鏃鏝鏐鏈鏤鐚鐔鐓鐃鐇鐐鐶鐫鐵鐡鐺鑁鑒鑄鑛鑠鑢鑞鑪鈩鑰鑵鑷鑽鑚鑼鑾钁鑿閂閇閊閔閖閘閙�閠閨閧閭閼閻閹閾闊濶闃闍闌闕闔闖關闡闥闢阡阨阮阯陂陌陏陋陷陜陞陝陟陦陲陬隍隘隕隗險隧隱隲隰隴隶隸隹雎雋雉雍襍雜霍雕雹霄霆霈霓霎霑霏霖霙霤霪霰霹霽霾靄靆靈靂靉靜靠靤靦靨勒靫靱靹鞅靼鞁靺鞆鞋鞏鞐鞜鞨鞦鞣鞳鞴韃韆韈韋韜韭齏韲竟韶韵頏頌頸頤頡頷頽顆顏顋顫顯顰���".split("");
      for (j3 = 0; j3 != D2[232].length; ++j3) if (D2[232][j3].charCodeAt(0) !== 65533) {
        e3[D2[232][j3]] = 59392 + j3;
        d3[59392 + j3] = D2[232][j3];
      }
      D2[233] = "����������������������������������������������������������������顱顴顳颪颯颱颶飄飃飆飩飫餃餉餒餔餘餡餝餞餤餠餬餮餽餾饂饉饅饐饋饑饒饌饕馗馘馥馭馮馼駟駛駝駘駑駭駮駱駲駻駸騁騏騅駢騙騫騷驅驂驀驃�騾驕驍驛驗驟驢驥驤驩驫驪骭骰骼髀髏髑髓體髞髟髢髣髦髯髫髮髴髱髷髻鬆鬘鬚鬟鬢鬣鬥鬧鬨鬩鬪鬮鬯鬲魄魃魏魍魎魑魘魴鮓鮃鮑鮖鮗鮟鮠鮨鮴鯀鯊鮹鯆鯏鯑鯒鯣鯢鯤鯔鯡鰺鯲鯱鯰鰕鰔鰉鰓鰌鰆鰈鰒鰊鰄鰮鰛鰥鰤鰡鰰鱇鰲鱆鰾鱚鱠鱧鱶鱸鳧鳬鳰鴉鴈鳫鴃鴆鴪鴦鶯鴣鴟鵄鴕鴒鵁鴿鴾鵆鵈���".split("");
      for (j3 = 0; j3 != D2[233].length; ++j3) if (D2[233][j3].charCodeAt(0) !== 65533) {
        e3[D2[233][j3]] = 59648 + j3;
        d3[59648 + j3] = D2[233][j3];
      }
      D2[234] = "����������������������������������������������������������������鵝鵞鵤鵑鵐鵙鵲鶉鶇鶫鵯鵺鶚鶤鶩鶲鷄鷁鶻鶸鶺鷆鷏鷂鷙鷓鷸鷦鷭鷯鷽鸚鸛鸞鹵鹹鹽麁麈麋麌麒麕麑麝麥麩麸麪麭靡黌黎黏黐黔黜點黝黠黥黨黯�黴黶黷黹黻黼黽鼇鼈皷鼕鼡鼬鼾齊齒齔齣齟齠齡齦齧齬齪齷齲齶龕龜龠堯槇遙瑤凜熙�������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[234].length; ++j3) if (D2[234][j3].charCodeAt(0) !== 65533) {
        e3[D2[234][j3]] = 59904 + j3;
        d3[59904 + j3] = D2[234][j3];
      }
      D2[237] = "����������������������������������������������������������������纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏�塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱���".split("");
      for (j3 = 0; j3 != D2[237].length; ++j3) if (D2[237][j3].charCodeAt(0) !== 65533) {
        e3[D2[237][j3]] = 60672 + j3;
        d3[60672 + j3] = D2[237][j3];
      }
      D2[238] = "����������������������������������������������������������������犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙�蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑��ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ￢￤＇＂���".split("");
      for (j3 = 0; j3 != D2[238].length; ++j3) if (D2[238][j3].charCodeAt(0) !== 65533) {
        e3[D2[238][j3]] = 60928 + j3;
        d3[60928 + j3] = D2[238][j3];
      }
      D2[250] = "����������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ￢￤＇＂㈱№℡∵纊褜鍈銈蓜俉炻昱棈鋹曻彅丨仡仼伀伃伹佖侒侊侚侔俍偀倢俿倞偆偰偂傔僴僘兊�兤冝冾凬刕劜劦勀勛匀匇匤卲厓厲叝﨎咜咊咩哿喆坙坥垬埈埇﨏塚增墲夋奓奛奝奣妤妺孖寀甯寘寬尞岦岺峵崧嵓﨑嵂嵭嶸嶹巐弡弴彧德忞恝悅悊惞惕愠惲愑愷愰憘戓抦揵摠撝擎敎昀昕昻昉昮昞昤晥晗晙晴晳暙暠暲暿曺朎朗杦枻桒柀栁桄棏﨓楨﨔榘槢樰橫橆橳橾櫢櫤毖氿汜沆汯泚洄涇浯���".split("");
      for (j3 = 0; j3 != D2[250].length; ++j3) if (D2[250][j3].charCodeAt(0) !== 65533) {
        e3[D2[250][j3]] = 64e3 + j3;
        d3[64e3 + j3] = D2[250][j3];
      }
      D2[251] = "����������������������������������������������������������������涖涬淏淸淲淼渹湜渧渼溿澈澵濵瀅瀇瀨炅炫焏焄煜煆煇凞燁燾犱犾猤猪獷玽珉珖珣珒琇珵琦琪琩琮瑢璉璟甁畯皂皜皞皛皦益睆劯砡硎硤硺礰礼神�祥禔福禛竑竧靖竫箞精絈絜綷綠緖繒罇羡羽茁荢荿菇菶葈蒴蕓蕙蕫﨟薰蘒﨡蠇裵訒訷詹誧誾諟諸諶譓譿賰賴贒赶﨣軏﨤逸遧郞都鄕鄧釚釗釞釭釮釤釥鈆鈐鈊鈺鉀鈼鉎鉙鉑鈹鉧銧鉷鉸鋧鋗鋙鋐﨧鋕鋠鋓錥錡鋻﨨錞鋿錝錂鍰鍗鎤鏆鏞鏸鐱鑅鑈閒隆﨩隝隯霳霻靃靍靏靑靕顗顥飯飼餧館馞驎髙���".split("");
      for (j3 = 0; j3 != D2[251].length; ++j3) if (D2[251][j3].charCodeAt(0) !== 65533) {
        e3[D2[251][j3]] = 64256 + j3;
        d3[64256 + j3] = D2[251][j3];
      }
      D2[252] = "����������������������������������������������������������������髜魵魲鮏鮱鮻鰀鵰鵫鶴鸙黑������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[252].length; ++j3) if (D2[252][j3].charCodeAt(0) !== 65533) {
        e3[D2[252][j3]] = 64512 + j3;
        d3[64512 + j3] = D2[252][j3];
      }
      return { "enc": e3, "dec": d3 };
    }();
    cptable2[936] = function() {
      var d3 = [], e3 = {}, D2 = [], j3;
      D2[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�������������������������������������������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[0].length; ++j3) if (D2[0][j3].charCodeAt(0) !== 65533) {
        e3[D2[0][j3]] = 0 + j3;
        d3[0 + j3] = D2[0][j3];
      }
      D2[129] = "����������������������������������������������������������������丂丄丅丆丏丒丗丟丠両丣並丩丮丯丱丳丵丷丼乀乁乂乄乆乊乑乕乗乚乛乢乣乤乥乧乨乪乫乬乭乮乯乲乴乵乶乷乸乹乺乻乼乽乿亀亁亂亃亄亅亇亊�亐亖亗亙亜亝亞亣亪亯亰亱亴亶亷亸亹亼亽亾仈仌仏仐仒仚仛仜仠仢仦仧仩仭仮仯仱仴仸仹仺仼仾伀伂伃伄伅伆伇伈伋伌伒伓伔伕伖伜伝伡伣伨伩伬伭伮伱伳伵伷伹伻伾伿佀佁佂佄佅佇佈佉佊佋佌佒佔佖佡佢佦佨佪佫佭佮佱佲併佷佸佹佺佽侀侁侂侅來侇侊侌侎侐侒侓侕侖侘侙侚侜侞侟価侢�".split("");
      for (j3 = 0; j3 != D2[129].length; ++j3) if (D2[129][j3].charCodeAt(0) !== 65533) {
        e3[D2[129][j3]] = 33024 + j3;
        d3[33024 + j3] = D2[129][j3];
      }
      D2[130] = "����������������������������������������������������������������侤侫侭侰侱侲侳侴侶侷侸侹侺侻侼侽侾俀俁係俆俇俈俉俋俌俍俒俓俔俕俖俙俛俠俢俤俥俧俫俬俰俲俴俵俶俷俹俻俼俽俿倀倁倂倃倄倅倆倇倈倉倊�個倎倐們倓倕倖倗倛倝倞倠倢倣値倧倫倯倰倱倲倳倴倵倶倷倸倹倻倽倿偀偁偂偄偅偆偉偊偋偍偐偑偒偓偔偖偗偘偙偛偝偞偟偠偡偢偣偤偦偧偨偩偪偫偭偮偯偰偱偲偳側偵偸偹偺偼偽傁傂傃傄傆傇傉傊傋傌傎傏傐傑傒傓傔傕傖傗傘備傚傛傜傝傞傟傠傡傢傤傦傪傫傭傮傯傰傱傳傴債傶傷傸傹傼�".split("");
      for (j3 = 0; j3 != D2[130].length; ++j3) if (D2[130][j3].charCodeAt(0) !== 65533) {
        e3[D2[130][j3]] = 33280 + j3;
        d3[33280 + j3] = D2[130][j3];
      }
      D2[131] = "����������������������������������������������������������������傽傾傿僀僁僂僃僄僅僆僇僈僉僊僋僌働僎僐僑僒僓僔僕僗僘僙僛僜僝僞僟僠僡僢僣僤僥僨僩僪僫僯僰僱僲僴僶僷僸價僺僼僽僾僿儀儁儂儃億儅儈�儉儊儌儍儎儏儐儑儓儔儕儖儗儘儙儚儛儜儝儞償儠儢儣儤儥儦儧儨儩優儫儬儭儮儯儰儱儲儳儴儵儶儷儸儹儺儻儼儽儾兂兇兊兌兎兏児兒兓兗兘兙兛兝兞兟兠兡兣兤兦內兩兪兯兲兺兾兿冃冄円冇冊冋冎冏冐冑冓冔冘冚冝冞冟冡冣冦冧冨冩冪冭冮冴冸冹冺冾冿凁凂凃凅凈凊凍凎凐凒凓凔凕凖凗�".split("");
      for (j3 = 0; j3 != D2[131].length; ++j3) if (D2[131][j3].charCodeAt(0) !== 65533) {
        e3[D2[131][j3]] = 33536 + j3;
        d3[33536 + j3] = D2[131][j3];
      }
      D2[132] = "����������������������������������������������������������������凘凙凚凜凞凟凢凣凥処凧凨凩凪凬凮凱凲凴凷凾刄刅刉刋刌刏刐刓刔刕刜刞刟刡刢刣別刦刧刪刬刯刱刲刴刵刼刾剄剅剆則剈剉剋剎剏剒剓剕剗剘�剙剚剛剝剟剠剢剣剤剦剨剫剬剭剮剰剱剳剴創剶剷剸剹剺剻剼剾劀劃劄劅劆劇劉劊劋劌劍劎劏劑劒劔劕劖劗劘劙劚劜劤劥劦劧劮劯劰労劵劶劷劸効劺劻劼劽勀勁勂勄勅勆勈勊勌勍勎勏勑勓勔動勗務勚勛勜勝勞勠勡勢勣勥勦勧勨勩勪勫勬勭勮勯勱勲勳勴勵勶勷勸勻勼勽匁匂匃匄匇匉匊匋匌匎�".split("");
      for (j3 = 0; j3 != D2[132].length; ++j3) if (D2[132][j3].charCodeAt(0) !== 65533) {
        e3[D2[132][j3]] = 33792 + j3;
        d3[33792 + j3] = D2[132][j3];
      }
      D2[133] = "����������������������������������������������������������������匑匒匓匔匘匛匜匞匟匢匤匥匧匨匩匫匬匭匯匰匱匲匳匴匵匶匷匸匼匽區卂卄卆卋卌卍卐協単卙卛卝卥卨卪卬卭卲卶卹卻卼卽卾厀厁厃厇厈厊厎厏�厐厑厒厓厔厖厗厙厛厜厞厠厡厤厧厪厫厬厭厯厰厱厲厳厴厵厷厸厹厺厼厽厾叀參叄叅叆叇収叏叐叒叓叕叚叜叝叞叡叢叧叴叺叾叿吀吂吅吇吋吔吘吙吚吜吢吤吥吪吰吳吶吷吺吽吿呁呂呄呅呇呉呌呍呎呏呑呚呝呞呟呠呡呣呥呧呩呪呫呬呭呮呯呰呴呹呺呾呿咁咃咅咇咈咉咊咍咑咓咗咘咜咞咟咠咡�".split("");
      for (j3 = 0; j3 != D2[133].length; ++j3) if (D2[133][j3].charCodeAt(0) !== 65533) {
        e3[D2[133][j3]] = 34048 + j3;
        d3[34048 + j3] = D2[133][j3];
      }
      D2[134] = "����������������������������������������������������������������咢咥咮咰咲咵咶咷咹咺咼咾哃哅哊哋哖哘哛哠員哢哣哤哫哬哯哰哱哴哵哶哷哸哹哻哾唀唂唃唄唅唈唊唋唌唍唎唒唓唕唖唗唘唙唚唜唝唞唟唡唥唦�唨唩唫唭唲唴唵唶唸唹唺唻唽啀啂啅啇啈啋啌啍啎問啑啒啓啔啗啘啙啚啛啝啞啟啠啢啣啨啩啫啯啰啱啲啳啴啹啺啽啿喅喆喌喍喎喐喒喓喕喖喗喚喛喞喠喡喢喣喤喥喦喨喩喪喫喬喭單喯喰喲喴営喸喺喼喿嗀嗁嗂嗃嗆嗇嗈嗊嗋嗎嗏嗐嗕嗗嗘嗙嗚嗛嗞嗠嗢嗧嗩嗭嗮嗰嗱嗴嗶嗸嗹嗺嗻嗼嗿嘂嘃嘄嘅�".split("");
      for (j3 = 0; j3 != D2[134].length; ++j3) if (D2[134][j3].charCodeAt(0) !== 65533) {
        e3[D2[134][j3]] = 34304 + j3;
        d3[34304 + j3] = D2[134][j3];
      }
      D2[135] = "����������������������������������������������������������������嘆嘇嘊嘋嘍嘐嘑嘒嘓嘔嘕嘖嘗嘙嘚嘜嘝嘠嘡嘢嘥嘦嘨嘩嘪嘫嘮嘯嘰嘳嘵嘷嘸嘺嘼嘽嘾噀噁噂噃噄噅噆噇噈噉噊噋噏噐噑噒噓噕噖噚噛噝噞噟噠噡�噣噥噦噧噭噮噯噰噲噳噴噵噷噸噹噺噽噾噿嚀嚁嚂嚃嚄嚇嚈嚉嚊嚋嚌嚍嚐嚑嚒嚔嚕嚖嚗嚘嚙嚚嚛嚜嚝嚞嚟嚠嚡嚢嚤嚥嚦嚧嚨嚩嚪嚫嚬嚭嚮嚰嚱嚲嚳嚴嚵嚶嚸嚹嚺嚻嚽嚾嚿囀囁囂囃囄囅囆囇囈囉囋囌囍囎囏囐囑囒囓囕囖囘囙囜団囥囦囧囨囩囪囬囮囯囲図囶囷囸囻囼圀圁圂圅圇國圌圍圎圏圐圑�".split("");
      for (j3 = 0; j3 != D2[135].length; ++j3) if (D2[135][j3].charCodeAt(0) !== 65533) {
        e3[D2[135][j3]] = 34560 + j3;
        d3[34560 + j3] = D2[135][j3];
      }
      D2[136] = "����������������������������������������������������������������園圓圔圕圖圗團圙圚圛圝圞圠圡圢圤圥圦圧圫圱圲圴圵圶圷圸圼圽圿坁坃坄坅坆坈坉坋坒坓坔坕坖坘坙坢坣坥坧坬坮坰坱坲坴坵坸坹坺坽坾坿垀�垁垇垈垉垊垍垎垏垐垑垔垕垖垗垘垙垚垜垝垞垟垥垨垪垬垯垰垱垳垵垶垷垹垺垻垼垽垾垿埀埁埄埅埆埇埈埉埊埌埍埐埑埓埖埗埛埜埞埡埢埣埥埦埧埨埩埪埫埬埮埰埱埲埳埵埶執埻埼埾埿堁堃堄堅堈堉堊堌堎堏堐堒堓堔堖堗堘堚堛堜堝堟堢堣堥堦堧堨堩堫堬堭堮堯報堲堳場堶堷堸堹堺堻堼堽�".split("");
      for (j3 = 0; j3 != D2[136].length; ++j3) if (D2[136][j3].charCodeAt(0) !== 65533) {
        e3[D2[136][j3]] = 34816 + j3;
        d3[34816 + j3] = D2[136][j3];
      }
      D2[137] = "����������������������������������������������������������������堾堿塀塁塂塃塅塆塇塈塉塊塋塎塏塐塒塓塕塖塗塙塚塛塜塝塟塠塡塢塣塤塦塧塨塩塪塭塮塯塰塱塲塳塴塵塶塷塸塹塺塻塼塽塿墂墄墆墇墈墊墋墌�墍墎墏墐墑墔墕墖増墘墛墜墝墠墡墢墣墤墥墦墧墪墫墬墭墮墯墰墱墲墳墴墵墶墷墸墹墺墻墽墾墿壀壂壃壄壆壇壈壉壊壋壌壍壎壏壐壒壓壔壖壗壘壙壚壛壜壝壞壟壠壡壢壣壥壦壧壨壩壪壭壯壱売壴壵壷壸壺壻壼壽壾壿夀夁夃夅夆夈変夊夋夌夎夐夑夒夓夗夘夛夝夞夠夡夢夣夦夨夬夰夲夳夵夶夻�".split("");
      for (j3 = 0; j3 != D2[137].length; ++j3) if (D2[137][j3].charCodeAt(0) !== 65533) {
        e3[D2[137][j3]] = 35072 + j3;
        d3[35072 + j3] = D2[137][j3];
      }
      D2[138] = "����������������������������������������������������������������夽夾夿奀奃奅奆奊奌奍奐奒奓奙奛奜奝奞奟奡奣奤奦奧奨奩奪奫奬奭奮奯奰奱奲奵奷奺奻奼奾奿妀妅妉妋妌妎妏妐妑妔妕妘妚妛妜妝妟妠妡妢妦�妧妬妭妰妱妳妴妵妶妷妸妺妼妽妿姀姁姂姃姄姅姇姈姉姌姍姎姏姕姖姙姛姞姟姠姡姢姤姦姧姩姪姫姭姮姯姰姱姲姳姴姵姶姷姸姺姼姽姾娀娂娊娋娍娎娏娐娒娔娕娖娗娙娚娛娝娞娡娢娤娦娧娨娪娫娬娭娮娯娰娳娵娷娸娹娺娻娽娾娿婁婂婃婄婅婇婈婋婌婍婎婏婐婑婒婓婔婖婗婘婙婛婜婝婞婟婠�".split("");
      for (j3 = 0; j3 != D2[138].length; ++j3) if (D2[138][j3].charCodeAt(0) !== 65533) {
        e3[D2[138][j3]] = 35328 + j3;
        d3[35328 + j3] = D2[138][j3];
      }
      D2[139] = "����������������������������������������������������������������婡婣婤婥婦婨婩婫婬婭婮婯婰婱婲婳婸婹婻婼婽婾媀媁媂媃媄媅媆媇媈媉媊媋媌媍媎媏媐媑媓媔媕媖媗媘媙媜媝媞媟媠媡媢媣媤媥媦媧媨媩媫媬�媭媮媯媰媱媴媶媷媹媺媻媼媽媿嫀嫃嫄嫅嫆嫇嫈嫊嫋嫍嫎嫏嫐嫑嫓嫕嫗嫙嫚嫛嫝嫞嫟嫢嫤嫥嫧嫨嫪嫬嫭嫮嫯嫰嫲嫳嫴嫵嫶嫷嫸嫹嫺嫻嫼嫽嫾嫿嬀嬁嬂嬃嬄嬅嬆嬇嬈嬊嬋嬌嬍嬎嬏嬐嬑嬒嬓嬔嬕嬘嬙嬚嬛嬜嬝嬞嬟嬠嬡嬢嬣嬤嬥嬦嬧嬨嬩嬪嬫嬬嬭嬮嬯嬰嬱嬳嬵嬶嬸嬹嬺嬻嬼嬽嬾嬿孁孂孃孄孅孆孇�".split("");
      for (j3 = 0; j3 != D2[139].length; ++j3) if (D2[139][j3].charCodeAt(0) !== 65533) {
        e3[D2[139][j3]] = 35584 + j3;
        d3[35584 + j3] = D2[139][j3];
      }
      D2[140] = "����������������������������������������������������������������孈孉孊孋孌孍孎孏孒孖孞孠孡孧孨孫孭孮孯孲孴孶孷學孹孻孼孾孿宂宆宊宍宎宐宑宒宔宖実宧宨宩宬宭宮宯宱宲宷宺宻宼寀寁寃寈寉寊寋寍寎寏�寑寔寕寖寗寘寙寚寛寜寠寢寣實寧審寪寫寬寭寯寱寲寳寴寵寶寷寽対尀専尃尅將專尋尌對導尐尒尓尗尙尛尞尟尠尡尣尦尨尩尪尫尭尮尯尰尲尳尵尶尷屃屄屆屇屌屍屒屓屔屖屗屘屚屛屜屝屟屢層屧屨屩屪屫屬屭屰屲屳屴屵屶屷屸屻屼屽屾岀岃岄岅岆岇岉岊岋岎岏岒岓岕岝岞岟岠岡岤岥岦岧岨�".split("");
      for (j3 = 0; j3 != D2[140].length; ++j3) if (D2[140][j3].charCodeAt(0) !== 65533) {
        e3[D2[140][j3]] = 35840 + j3;
        d3[35840 + j3] = D2[140][j3];
      }
      D2[141] = "����������������������������������������������������������������岪岮岯岰岲岴岶岹岺岻岼岾峀峂峃峅峆峇峈峉峊峌峍峎峏峐峑峓峔峕峖峗峘峚峛峜峝峞峟峠峢峣峧峩峫峬峮峯峱峲峳峴峵島峷峸峹峺峼峽峾峿崀�崁崄崅崈崉崊崋崌崍崏崐崑崒崓崕崗崘崙崚崜崝崟崠崡崢崣崥崨崪崫崬崯崰崱崲崳崵崶崷崸崹崺崻崼崿嵀嵁嵂嵃嵄嵅嵆嵈嵉嵍嵎嵏嵐嵑嵒嵓嵔嵕嵖嵗嵙嵚嵜嵞嵟嵠嵡嵢嵣嵤嵥嵦嵧嵨嵪嵭嵮嵰嵱嵲嵳嵵嵶嵷嵸嵹嵺嵻嵼嵽嵾嵿嶀嶁嶃嶄嶅嶆嶇嶈嶉嶊嶋嶌嶍嶎嶏嶐嶑嶒嶓嶔嶕嶖嶗嶘嶚嶛嶜嶞嶟嶠�".split("");
      for (j3 = 0; j3 != D2[141].length; ++j3) if (D2[141][j3].charCodeAt(0) !== 65533) {
        e3[D2[141][j3]] = 36096 + j3;
        d3[36096 + j3] = D2[141][j3];
      }
      D2[142] = "����������������������������������������������������������������嶡嶢嶣嶤嶥嶦嶧嶨嶩嶪嶫嶬嶭嶮嶯嶰嶱嶲嶳嶴嶵嶶嶸嶹嶺嶻嶼嶽嶾嶿巀巁巂巃巄巆巇巈巉巊巋巌巎巏巐巑巒巓巔巕巖巗巘巙巚巜巟巠巣巤巪巬巭�巰巵巶巸巹巺巻巼巿帀帄帇帉帊帋帍帎帒帓帗帞帟帠帡帢帣帤帥帨帩帪師帬帯帰帲帳帴帵帶帹帺帾帿幀幁幃幆幇幈幉幊幋幍幎幏幐幑幒幓幖幗幘幙幚幜幝幟幠幣幤幥幦幧幨幩幪幫幬幭幮幯幰幱幵幷幹幾庁庂広庅庈庉庌庍庎庒庘庛庝庡庢庣庤庨庩庪庫庬庮庯庰庱庲庴庺庻庼庽庿廀廁廂廃廄廅�".split("");
      for (j3 = 0; j3 != D2[142].length; ++j3) if (D2[142][j3].charCodeAt(0) !== 65533) {
        e3[D2[142][j3]] = 36352 + j3;
        d3[36352 + j3] = D2[142][j3];
      }
      D2[143] = "����������������������������������������������������������������廆廇廈廋廌廍廎廏廐廔廕廗廘廙廚廜廝廞廟廠廡廢廣廤廥廦廧廩廫廬廭廮廯廰廱廲廳廵廸廹廻廼廽弅弆弇弉弌弍弎弐弒弔弖弙弚弜弝弞弡弢弣弤�弨弫弬弮弰弲弳弴張弶強弸弻弽弾弿彁彂彃彄彅彆彇彈彉彊彋彌彍彎彏彑彔彙彚彛彜彞彟彠彣彥彧彨彫彮彯彲彴彵彶彸彺彽彾彿徃徆徍徎徏徑従徔徖徚徛徝從徟徠徢徣徤徥徦徧復徫徬徯徰徱徲徳徴徶徸徹徺徻徾徿忀忁忂忇忈忊忋忎忓忔忕忚忛応忞忟忢忣忥忦忨忩忬忯忰忲忳忴忶忷忹忺忼怇�".split("");
      for (j3 = 0; j3 != D2[143].length; ++j3) if (D2[143][j3].charCodeAt(0) !== 65533) {
        e3[D2[143][j3]] = 36608 + j3;
        d3[36608 + j3] = D2[143][j3];
      }
      D2[144] = "����������������������������������������������������������������怈怉怋怌怐怑怓怗怘怚怞怟怢怣怤怬怭怮怰怱怲怳怴怶怷怸怹怺怽怾恀恄恅恆恇恈恉恊恌恎恏恑恓恔恖恗恘恛恜恞恟恠恡恥恦恮恱恲恴恵恷恾悀�悁悂悅悆悇悈悊悋悎悏悐悑悓悕悗悘悙悜悞悡悢悤悥悧悩悪悮悰悳悵悶悷悹悺悽悾悿惀惁惂惃惄惇惈惉惌惍惎惏惐惒惓惔惖惗惙惛惞惡惢惣惤惥惪惱惲惵惷惸惻惼惽惾惿愂愃愄愅愇愊愋愌愐愑愒愓愔愖愗愘愙愛愜愝愞愡愢愥愨愩愪愬愭愮愯愰愱愲愳愴愵愶愷愸愹愺愻愼愽愾慀慁慂慃慄慅慆�".split("");
      for (j3 = 0; j3 != D2[144].length; ++j3) if (D2[144][j3].charCodeAt(0) !== 65533) {
        e3[D2[144][j3]] = 36864 + j3;
        d3[36864 + j3] = D2[144][j3];
      }
      D2[145] = "����������������������������������������������������������������慇慉態慍慏慐慒慓慔慖慗慘慙慚慛慜慞慟慠慡慣慤慥慦慩慪慫慬慭慮慯慱慲慳慴慶慸慹慺慻慼慽慾慿憀憁憂憃憄憅憆憇憈憉憊憌憍憏憐憑憒憓憕�憖憗憘憙憚憛憜憞憟憠憡憢憣憤憥憦憪憫憭憮憯憰憱憲憳憴憵憶憸憹憺憻憼憽憿懀懁懃懄懅懆懇應懌懍懎懏懐懓懕懖懗懘懙懚懛懜懝懞懟懠懡懢懣懤懥懧懨懩懪懫懬懭懮懯懰懱懲懳懴懶懷懸懹懺懻懼懽懾戀戁戂戃戄戅戇戉戓戔戙戜戝戞戠戣戦戧戨戩戫戭戯戰戱戲戵戶戸戹戺戻戼扂扄扅扆扊�".split("");
      for (j3 = 0; j3 != D2[145].length; ++j3) if (D2[145][j3].charCodeAt(0) !== 65533) {
        e3[D2[145][j3]] = 37120 + j3;
        d3[37120 + j3] = D2[145][j3];
      }
      D2[146] = "����������������������������������������������������������������扏扐払扖扗扙扚扜扝扞扟扠扡扢扤扥扨扱扲扴扵扷扸扺扻扽抁抂抃抅抆抇抈抋抌抍抎抏抐抔抙抜抝択抣抦抧抩抪抭抮抯抰抲抳抴抶抷抸抺抾拀拁�拃拋拏拑拕拝拞拠拡拤拪拫拰拲拵拸拹拺拻挀挃挄挅挆挊挋挌挍挏挐挒挓挔挕挗挘挙挜挦挧挩挬挭挮挰挱挳挴挵挶挷挸挻挼挾挿捀捁捄捇捈捊捑捒捓捔捖捗捘捙捚捛捜捝捠捤捥捦捨捪捫捬捯捰捲捳捴捵捸捹捼捽捾捿掁掃掄掅掆掋掍掑掓掔掕掗掙掚掛掜掝掞掟採掤掦掫掯掱掲掵掶掹掻掽掿揀�".split("");
      for (j3 = 0; j3 != D2[146].length; ++j3) if (D2[146][j3].charCodeAt(0) !== 65533) {
        e3[D2[146][j3]] = 37376 + j3;
        d3[37376 + j3] = D2[146][j3];
      }
      D2[147] = "����������������������������������������������������������������揁揂揃揅揇揈揊揋揌揑揓揔揕揗揘揙揚換揜揝揟揢揤揥揦揧揨揫揬揮揯揰揱揳揵揷揹揺揻揼揾搃搄搆搇搈搉搊損搎搑搒搕搖搗搘搙搚搝搟搢搣搤�搥搧搨搩搫搮搯搰搱搲搳搵搶搷搸搹搻搼搾摀摂摃摉摋摌摍摎摏摐摑摓摕摖摗摙摚摛摜摝摟摠摡摢摣摤摥摦摨摪摫摬摮摯摰摱摲摳摴摵摶摷摻摼摽摾摿撀撁撃撆撈撉撊撋撌撍撎撏撐撓撔撗撘撚撛撜撝撟撠撡撢撣撥撦撧撨撪撫撯撱撲撳撴撶撹撻撽撾撿擁擃擄擆擇擈擉擊擋擌擏擑擓擔擕擖擙據�".split("");
      for (j3 = 0; j3 != D2[147].length; ++j3) if (D2[147][j3].charCodeAt(0) !== 65533) {
        e3[D2[147][j3]] = 37632 + j3;
        d3[37632 + j3] = D2[147][j3];
      }
      D2[148] = "����������������������������������������������������������������擛擜擝擟擠擡擣擥擧擨擩擪擫擬擭擮擯擰擱擲擳擴擵擶擷擸擹擺擻擼擽擾擿攁攂攃攄攅攆攇攈攊攋攌攍攎攏攐攑攓攔攕攖攗攙攚攛攜攝攞攟攠攡�攢攣攤攦攧攨攩攪攬攭攰攱攲攳攷攺攼攽敀敁敂敃敄敆敇敊敋敍敎敐敒敓敔敗敘敚敜敟敠敡敤敥敧敨敩敪敭敮敯敱敳敵敶數敹敺敻敼敽敾敿斀斁斂斃斄斅斆斈斉斊斍斎斏斒斔斕斖斘斚斝斞斠斢斣斦斨斪斬斮斱斲斳斴斵斶斷斸斺斻斾斿旀旂旇旈旉旊旍旐旑旓旔旕旘旙旚旛旜旝旞旟旡旣旤旪旫�".split("");
      for (j3 = 0; j3 != D2[148].length; ++j3) if (D2[148][j3].charCodeAt(0) !== 65533) {
        e3[D2[148][j3]] = 37888 + j3;
        d3[37888 + j3] = D2[148][j3];
      }
      D2[149] = "����������������������������������������������������������������旲旳旴旵旸旹旻旼旽旾旿昁昄昅昇昈昉昋昍昐昑昒昖昗昘昚昛昜昞昡昢昣昤昦昩昪昫昬昮昰昲昳昷昸昹昺昻昽昿晀時晄晅晆晇晈晉晊晍晎晐晑晘�晙晛晜晝晞晠晢晣晥晧晩晪晫晬晭晱晲晳晵晸晹晻晼晽晿暀暁暃暅暆暈暉暊暋暍暎暏暐暒暓暔暕暘暙暚暛暜暞暟暠暡暢暣暤暥暦暩暪暫暬暭暯暰暱暲暳暵暶暷暸暺暻暼暽暿曀曁曂曃曄曅曆曇曈曉曊曋曌曍曎曏曐曑曒曓曔曕曖曗曘曚曞曟曠曡曢曣曤曥曧曨曪曫曬曭曮曯曱曵曶書曺曻曽朁朂會�".split("");
      for (j3 = 0; j3 != D2[149].length; ++j3) if (D2[149][j3].charCodeAt(0) !== 65533) {
        e3[D2[149][j3]] = 38144 + j3;
        d3[38144 + j3] = D2[149][j3];
      }
      D2[150] = "����������������������������������������������������������������朄朅朆朇朌朎朏朑朒朓朖朘朙朚朜朞朠朡朢朣朤朥朧朩朮朰朲朳朶朷朸朹朻朼朾朿杁杄杅杇杊杋杍杒杔杕杗杘杙杚杛杝杢杣杤杦杧杫杬杮東杴杶�杸杹杺杻杽枀枂枃枅枆枈枊枌枍枎枏枑枒枓枔枖枙枛枟枠枡枤枦枩枬枮枱枲枴枹枺枻枼枽枾枿柀柂柅柆柇柈柉柊柋柌柍柎柕柖柗柛柟柡柣柤柦柧柨柪柫柭柮柲柵柶柷柸柹柺査柼柾栁栂栃栄栆栍栐栒栔栕栘栙栚栛栜栞栟栠栢栣栤栥栦栧栨栫栬栭栮栯栰栱栴栵栶栺栻栿桇桋桍桏桒桖桗桘桙桚桛�".split("");
      for (j3 = 0; j3 != D2[150].length; ++j3) if (D2[150][j3].charCodeAt(0) !== 65533) {
        e3[D2[150][j3]] = 38400 + j3;
        d3[38400 + j3] = D2[150][j3];
      }
      D2[151] = "����������������������������������������������������������������桜桝桞桟桪桬桭桮桯桰桱桲桳桵桸桹桺桻桼桽桾桿梀梂梄梇梈梉梊梋梌梍梎梐梑梒梔梕梖梘梙梚梛梜條梞梟梠梡梣梤梥梩梪梫梬梮梱梲梴梶梷梸�梹梺梻梼梽梾梿棁棃棄棅棆棇棈棊棌棎棏棐棑棓棔棖棗棙棛棜棝棞棟棡棢棤棥棦棧棨棩棪棫棬棭棯棲棳棴棶棷棸棻棽棾棿椀椂椃椄椆椇椈椉椊椌椏椑椓椔椕椖椗椘椙椚椛検椝椞椡椢椣椥椦椧椨椩椪椫椬椮椯椱椲椳椵椶椷椸椺椻椼椾楀楁楃楄楅楆楇楈楉楊楋楌楍楎楏楐楑楒楓楕楖楘楙楛楜楟�".split("");
      for (j3 = 0; j3 != D2[151].length; ++j3) if (D2[151][j3].charCodeAt(0) !== 65533) {
        e3[D2[151][j3]] = 38656 + j3;
        d3[38656 + j3] = D2[151][j3];
      }
      D2[152] = "����������������������������������������������������������������楡楢楤楥楧楨楩楪楬業楯楰楲楳楴極楶楺楻楽楾楿榁榃榅榊榋榌榎榏榐榑榒榓榖榗榙榚榝榞榟榠榡榢榣榤榥榦榩榪榬榮榯榰榲榳榵榶榸榹榺榼榽�榾榿槀槂槃槄槅槆槇槈槉構槍槏槑槒槓槕槖槗様槙槚槜槝槞槡槢槣槤槥槦槧槨槩槪槫槬槮槯槰槱槳槴槵槶槷槸槹槺槻槼槾樀樁樂樃樄樅樆樇樈樉樋樌樍樎樏樐樑樒樓樔樕樖標樚樛樜樝樞樠樢樣樤樥樦樧権樫樬樭樮樰樲樳樴樶樷樸樹樺樻樼樿橀橁橂橃橅橆橈橉橊橋橌橍橎橏橑橒橓橔橕橖橗橚�".split("");
      for (j3 = 0; j3 != D2[152].length; ++j3) if (D2[152][j3].charCodeAt(0) !== 65533) {
        e3[D2[152][j3]] = 38912 + j3;
        d3[38912 + j3] = D2[152][j3];
      }
      D2[153] = "����������������������������������������������������������������橜橝橞機橠橢橣橤橦橧橨橩橪橫橬橭橮橯橰橲橳橴橵橶橷橸橺橻橽橾橿檁檂檃檅檆檇檈檉檊檋檌檍檏檒檓檔檕檖檘檙檚檛檜檝檞檟檡檢檣檤檥檦�檧檨檪檭檮檯檰檱檲檳檴檵檶檷檸檹檺檻檼檽檾檿櫀櫁櫂櫃櫄櫅櫆櫇櫈櫉櫊櫋櫌櫍櫎櫏櫐櫑櫒櫓櫔櫕櫖櫗櫘櫙櫚櫛櫜櫝櫞櫟櫠櫡櫢櫣櫤櫥櫦櫧櫨櫩櫪櫫櫬櫭櫮櫯櫰櫱櫲櫳櫴櫵櫶櫷櫸櫹櫺櫻櫼櫽櫾櫿欀欁欂欃欄欅欆欇欈欉權欋欌欍欎欏欐欑欒欓欔欕欖欗欘欙欚欛欜欝欞欟欥欦欨欩欪欫欬欭欮�".split("");
      for (j3 = 0; j3 != D2[153].length; ++j3) if (D2[153][j3].charCodeAt(0) !== 65533) {
        e3[D2[153][j3]] = 39168 + j3;
        d3[39168 + j3] = D2[153][j3];
      }
      D2[154] = "����������������������������������������������������������������欯欰欱欳欴欵欶欸欻欼欽欿歀歁歂歄歅歈歊歋歍歎歏歐歑歒歓歔歕歖歗歘歚歛歜歝歞歟歠歡歨歩歫歬歭歮歯歰歱歲歳歴歵歶歷歸歺歽歾歿殀殅殈�殌殎殏殐殑殔殕殗殘殙殜殝殞殟殠殢殣殤殥殦殧殨殩殫殬殭殮殯殰殱殲殶殸殹殺殻殼殽殾毀毃毄毆毇毈毉毊毌毎毐毑毘毚毜毝毞毟毠毢毣毤毥毦毧毨毩毬毭毮毰毱毲毴毶毷毸毺毻毼毾毿氀氁氂氃氄氈氉氊氋氌氎氒気氜氝氞氠氣氥氫氬氭氱氳氶氷氹氺氻氼氾氿汃汄汅汈汋汌汍汎汏汑汒汓汖汘�".split("");
      for (j3 = 0; j3 != D2[154].length; ++j3) if (D2[154][j3].charCodeAt(0) !== 65533) {
        e3[D2[154][j3]] = 39424 + j3;
        d3[39424 + j3] = D2[154][j3];
      }
      D2[155] = "����������������������������������������������������������������汙汚汢汣汥汦汧汫汬汭汮汯汱汳汵汷汸決汻汼汿沀沄沇沊沋沍沎沑沒沕沖沗沘沚沜沝沞沠沢沨沬沯沰沴沵沶沷沺泀況泂泃泆泇泈泋泍泎泏泑泒泘�泙泚泜泝泟泤泦泧泩泬泭泲泴泹泿洀洂洃洅洆洈洉洊洍洏洐洑洓洔洕洖洘洜洝洟洠洡洢洣洤洦洨洩洬洭洯洰洴洶洷洸洺洿浀浂浄浉浌浐浕浖浗浘浛浝浟浡浢浤浥浧浨浫浬浭浰浱浲浳浵浶浹浺浻浽浾浿涀涁涃涄涆涇涊涋涍涏涐涒涖涗涘涙涚涜涢涥涬涭涰涱涳涴涶涷涹涺涻涼涽涾淁淂淃淈淉淊�".split("");
      for (j3 = 0; j3 != D2[155].length; ++j3) if (D2[155][j3].charCodeAt(0) !== 65533) {
        e3[D2[155][j3]] = 39680 + j3;
        d3[39680 + j3] = D2[155][j3];
      }
      D2[156] = "����������������������������������������������������������������淍淎淏淐淒淓淔淕淗淚淛淜淟淢淣淥淧淨淩淪淭淯淰淲淴淵淶淸淺淽淾淿渀渁渂渃渄渆渇済渉渋渏渒渓渕渘渙減渜渞渟渢渦渧渨渪測渮渰渱渳渵�渶渷渹渻渼渽渾渿湀湁湂湅湆湇湈湉湊湋湌湏湐湑湒湕湗湙湚湜湝湞湠湡湢湣湤湥湦湧湨湩湪湬湭湯湰湱湲湳湴湵湶湷湸湹湺湻湼湽満溁溂溄溇溈溊溋溌溍溎溑溒溓溔溕準溗溙溚溛溝溞溠溡溣溤溦溨溩溫溬溭溮溰溳溵溸溹溼溾溿滀滃滄滅滆滈滉滊滌滍滎滐滒滖滘滙滛滜滝滣滧滪滫滬滭滮滯�".split("");
      for (j3 = 0; j3 != D2[156].length; ++j3) if (D2[156][j3].charCodeAt(0) !== 65533) {
        e3[D2[156][j3]] = 39936 + j3;
        d3[39936 + j3] = D2[156][j3];
      }
      D2[157] = "����������������������������������������������������������������滰滱滲滳滵滶滷滸滺滻滼滽滾滿漀漁漃漄漅漇漈漊漋漌漍漎漐漑漒漖漗漘漙漚漛漜漝漞漟漡漢漣漥漦漧漨漬漮漰漲漴漵漷漸漹漺漻漼漽漿潀潁潂�潃潄潅潈潉潊潌潎潏潐潑潒潓潔潕潖潗潙潚潛潝潟潠潡潣潤潥潧潨潩潪潫潬潯潰潱潳潵潶潷潹潻潽潾潿澀澁澂澃澅澆澇澊澋澏澐澑澒澓澔澕澖澗澘澙澚澛澝澞澟澠澢澣澤澥澦澨澩澪澫澬澭澮澯澰澱澲澴澵澷澸澺澻澼澽澾澿濁濃濄濅濆濇濈濊濋濌濍濎濏濐濓濔濕濖濗濘濙濚濛濜濝濟濢濣濤濥�".split("");
      for (j3 = 0; j3 != D2[157].length; ++j3) if (D2[157][j3].charCodeAt(0) !== 65533) {
        e3[D2[157][j3]] = 40192 + j3;
        d3[40192 + j3] = D2[157][j3];
      }
      D2[158] = "����������������������������������������������������������������濦濧濨濩濪濫濬濭濰濱濲濳濴濵濶濷濸濹濺濻濼濽濾濿瀀瀁瀂瀃瀄瀅瀆瀇瀈瀉瀊瀋瀌瀍瀎瀏瀐瀒瀓瀔瀕瀖瀗瀘瀙瀜瀝瀞瀟瀠瀡瀢瀤瀥瀦瀧瀨瀩瀪�瀫瀬瀭瀮瀯瀰瀱瀲瀳瀴瀶瀷瀸瀺瀻瀼瀽瀾瀿灀灁灂灃灄灅灆灇灈灉灊灋灍灎灐灑灒灓灔灕灖灗灘灙灚灛灜灝灟灠灡灢灣灤灥灦灧灨灩灪灮灱灲灳灴灷灹灺灻災炁炂炃炄炆炇炈炋炌炍炏炐炑炓炗炘炚炛炞炟炠炡炢炣炤炥炦炧炨炩炪炰炲炴炵炶為炾炿烄烅烆烇烉烋烌烍烎烏烐烑烒烓烔烕烖烗烚�".split("");
      for (j3 = 0; j3 != D2[158].length; ++j3) if (D2[158][j3].charCodeAt(0) !== 65533) {
        e3[D2[158][j3]] = 40448 + j3;
        d3[40448 + j3] = D2[158][j3];
      }
      D2[159] = "����������������������������������������������������������������烜烝烞烠烡烢烣烥烪烮烰烱烲烳烴烵烶烸烺烻烼烾烿焀焁焂焃焄焅焆焇焈焋焌焍焎焏焑焒焔焗焛焜焝焞焟焠無焢焣焤焥焧焨焩焪焫焬焭焮焲焳焴�焵焷焸焹焺焻焼焽焾焿煀煁煂煃煄煆煇煈煉煋煍煏煐煑煒煓煔煕煖煗煘煙煚煛煝煟煠煡煢煣煥煩煪煫煬煭煯煰煱煴煵煶煷煹煻煼煾煿熀熁熂熃熅熆熇熈熉熋熌熍熎熐熑熒熓熕熖熗熚熛熜熝熞熡熢熣熤熥熦熧熩熪熫熭熮熯熰熱熲熴熶熷熸熺熻熼熽熾熿燀燁燂燄燅燆燇燈燉燊燋燌燍燏燐燑燒燓�".split("");
      for (j3 = 0; j3 != D2[159].length; ++j3) if (D2[159][j3].charCodeAt(0) !== 65533) {
        e3[D2[159][j3]] = 40704 + j3;
        d3[40704 + j3] = D2[159][j3];
      }
      D2[160] = "����������������������������������������������������������������燖燗燘燙燚燛燜燝燞營燡燢燣燤燦燨燩燪燫燬燭燯燰燱燲燳燴燵燶燷燸燺燻燼燽燾燿爀爁爂爃爄爅爇爈爉爊爋爌爍爎爏爐爑爒爓爔爕爖爗爘爙爚�爛爜爞爟爠爡爢爣爤爥爦爧爩爫爭爮爯爲爳爴爺爼爾牀牁牂牃牄牅牆牉牊牋牎牏牐牑牓牔牕牗牘牚牜牞牠牣牤牥牨牪牫牬牭牰牱牳牴牶牷牸牻牼牽犂犃犅犆犇犈犉犌犎犐犑犓犔犕犖犗犘犙犚犛犜犝犞犠犡犢犣犤犥犦犧犨犩犪犫犮犱犲犳犵犺犻犼犽犾犿狀狅狆狇狉狊狋狌狏狑狓狔狕狖狘狚狛�".split("");
      for (j3 = 0; j3 != D2[160].length; ++j3) if (D2[160][j3].charCodeAt(0) !== 65533) {
        e3[D2[160][j3]] = 40960 + j3;
        d3[40960 + j3] = D2[160][j3];
      }
      D2[161] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������　、。·ˉˇ¨〃々—～‖…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓�".split("");
      for (j3 = 0; j3 != D2[161].length; ++j3) if (D2[161][j3].charCodeAt(0) !== 65533) {
        e3[D2[161][j3]] = 41216 + j3;
        d3[41216 + j3] = D2[161][j3];
      }
      D2[162] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ������⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩��㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩��ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ���".split("");
      for (j3 = 0; j3 != D2[162].length; ++j3) if (D2[162][j3].charCodeAt(0) !== 65533) {
        e3[D2[162][j3]] = 41472 + j3;
        d3[41472 + j3] = D2[162][j3];
      }
      D2[163] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split("");
      for (j3 = 0; j3 != D2[163].length; ++j3) if (D2[163][j3].charCodeAt(0) !== 65533) {
        e3[D2[163][j3]] = 41728 + j3;
        d3[41728 + j3] = D2[163][j3];
      }
      D2[164] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split("");
      for (j3 = 0; j3 != D2[164].length; ++j3) if (D2[164][j3].charCodeAt(0) !== 65533) {
        e3[D2[164][j3]] = 41984 + j3;
        d3[41984 + j3] = D2[164][j3];
      }
      D2[165] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split("");
      for (j3 = 0; j3 != D2[165].length; ++j3) if (D2[165][j3].charCodeAt(0) !== 65533) {
        e3[D2[165][j3]] = 42240 + j3;
        d3[42240 + j3] = D2[165][j3];
      }
      D2[166] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������︵︶︹︺︿﹀︽︾﹁﹂﹃﹄��︻︼︷︸︱�︳︴����������".split("");
      for (j3 = 0; j3 != D2[166].length; ++j3) if (D2[166][j3].charCodeAt(0) !== 65533) {
        e3[D2[166][j3]] = 42496 + j3;
        d3[42496 + j3] = D2[166][j3];
      }
      D2[167] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split("");
      for (j3 = 0; j3 != D2[167].length; ++j3) if (D2[167][j3].charCodeAt(0) !== 65533) {
        e3[D2[167][j3]] = 42752 + j3;
        d3[42752 + j3] = D2[167][j3];
      }
      D2[168] = "����������������������������������������������������������������ˊˋ˙–―‥‵℅℉↖↗↘↙∕∟∣≒≦≧⊿═║╒╓╔╕╖╗╘╙╚╛╜╝╞╟╠╡╢╣╤╥╦╧╨╩╪╫╬╭╮╯╰╱╲╳▁▂▃▄▅▆▇�█▉▊▋▌▍▎▏▓▔▕▼▽◢◣◤◥☉⊕〒〝〞�����������āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüêɑ�ńň�ɡ����ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ����������������������".split("");
      for (j3 = 0; j3 != D2[168].length; ++j3) if (D2[168][j3].charCodeAt(0) !== 65533) {
        e3[D2[168][j3]] = 43008 + j3;
        d3[43008 + j3] = D2[168][j3];
      }
      D2[169] = "����������������������������������������������������������������〡〢〣〤〥〦〧〨〩㊣㎎㎏㎜㎝㎞㎡㏄㏎㏑㏒㏕︰￢￤�℡㈱�‐���ー゛゜ヽヾ〆ゝゞ﹉﹊﹋﹌﹍﹎﹏﹐﹑﹒﹔﹕﹖﹗﹙﹚﹛﹜﹝﹞﹟﹠﹡�﹢﹣﹤﹥﹦﹨﹩﹪﹫�������������〇�������������─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋����������������".split("");
      for (j3 = 0; j3 != D2[169].length; ++j3) if (D2[169][j3].charCodeAt(0) !== 65533) {
        e3[D2[169][j3]] = 43264 + j3;
        d3[43264 + j3] = D2[169][j3];
      }
      D2[170] = "����������������������������������������������������������������狜狝狟狢狣狤狥狦狧狪狫狵狶狹狽狾狿猀猂猄猅猆猇猈猉猋猌猍猏猐猑猒猔猘猙猚猟猠猣猤猦猧猨猭猯猰猲猳猵猶猺猻猼猽獀獁獂獃獄獅獆獇獈�獉獊獋獌獎獏獑獓獔獕獖獘獙獚獛獜獝獞獟獡獢獣獤獥獦獧獨獩獪獫獮獰獱�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[170].length; ++j3) if (D2[170][j3].charCodeAt(0) !== 65533) {
        e3[D2[170][j3]] = 43520 + j3;
        d3[43520 + j3] = D2[170][j3];
      }
      D2[171] = "����������������������������������������������������������������獲獳獴獵獶獷獸獹獺獻獼獽獿玀玁玂玃玅玆玈玊玌玍玏玐玒玓玔玕玗玘玙玚玜玝玞玠玡玣玤玥玦玧玨玪玬玭玱玴玵玶玸玹玼玽玾玿珁珃珄珅珆珇�珋珌珎珒珓珔珕珖珗珘珚珛珜珝珟珡珢珣珤珦珨珪珫珬珮珯珰珱珳珴珵珶珷�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[171].length; ++j3) if (D2[171][j3].charCodeAt(0) !== 65533) {
        e3[D2[171][j3]] = 43776 + j3;
        d3[43776 + j3] = D2[171][j3];
      }
      D2[172] = "����������������������������������������������������������������珸珹珺珻珼珽現珿琀琁琂琄琇琈琋琌琍琎琑琒琓琔琕琖琗琘琙琜琝琞琟琠琡琣琤琧琩琫琭琯琱琲琷琸琹琺琻琽琾琿瑀瑂瑃瑄瑅瑆瑇瑈瑉瑊瑋瑌瑍�瑎瑏瑐瑑瑒瑓瑔瑖瑘瑝瑠瑡瑢瑣瑤瑥瑦瑧瑨瑩瑪瑫瑬瑮瑯瑱瑲瑳瑴瑵瑸瑹瑺�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[172].length; ++j3) if (D2[172][j3].charCodeAt(0) !== 65533) {
        e3[D2[172][j3]] = 44032 + j3;
        d3[44032 + j3] = D2[172][j3];
      }
      D2[173] = "����������������������������������������������������������������瑻瑼瑽瑿璂璄璅璆璈璉璊璌璍璏璑璒璓璔璕璖璗璘璙璚璛璝璟璠璡璢璣璤璥璦璪璫璬璭璮璯環璱璲璳璴璵璶璷璸璹璻璼璽璾璿瓀瓁瓂瓃瓄瓅瓆瓇�瓈瓉瓊瓋瓌瓍瓎瓏瓐瓑瓓瓔瓕瓖瓗瓘瓙瓚瓛瓝瓟瓡瓥瓧瓨瓩瓪瓫瓬瓭瓰瓱瓲�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[173].length; ++j3) if (D2[173][j3].charCodeAt(0) !== 65533) {
        e3[D2[173][j3]] = 44288 + j3;
        d3[44288 + j3] = D2[173][j3];
      }
      D2[174] = "����������������������������������������������������������������瓳瓵瓸瓹瓺瓻瓼瓽瓾甀甁甂甃甅甆甇甈甉甊甋甌甎甐甒甔甕甖甗甛甝甞甠甡產産甤甦甧甪甮甴甶甹甼甽甿畁畂畃畄畆畇畉畊畍畐畑畒畓畕畖畗畘�畝畞畟畠畡畢畣畤畧畨畩畫畬畭畮畯異畱畳畵當畷畺畻畼畽畾疀疁疂疄疅疇�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[174].length; ++j3) if (D2[174][j3].charCodeAt(0) !== 65533) {
        e3[D2[174][j3]] = 44544 + j3;
        d3[44544 + j3] = D2[174][j3];
      }
      D2[175] = "����������������������������������������������������������������疈疉疊疌疍疎疐疓疕疘疛疜疞疢疦疧疨疩疪疭疶疷疺疻疿痀痁痆痋痌痎痏痐痑痓痗痙痚痜痝痟痠痡痥痩痬痭痮痯痲痳痵痶痷痸痺痻痽痾瘂瘄瘆瘇�瘈瘉瘋瘍瘎瘏瘑瘒瘓瘔瘖瘚瘜瘝瘞瘡瘣瘧瘨瘬瘮瘯瘱瘲瘶瘷瘹瘺瘻瘽癁療癄�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[175].length; ++j3) if (D2[175][j3].charCodeAt(0) !== 65533) {
        e3[D2[175][j3]] = 44800 + j3;
        d3[44800 + j3] = D2[175][j3];
      }
      D2[176] = "����������������������������������������������������������������癅癆癇癈癉癊癋癎癏癐癑癒癓癕癗癘癙癚癛癝癟癠癡癢癤癥癦癧癨癩癪癬癭癮癰癱癲癳癴癵癶癷癹発發癿皀皁皃皅皉皊皌皍皏皐皒皔皕皗皘皚皛�皜皝皞皟皠皡皢皣皥皦皧皨皩皪皫皬皭皯皰皳皵皶皷皸皹皺皻皼皽皾盀盁盃啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥�".split("");
      for (j3 = 0; j3 != D2[176].length; ++j3) if (D2[176][j3].charCodeAt(0) !== 65533) {
        e3[D2[176][j3]] = 45056 + j3;
        d3[45056 + j3] = D2[176][j3];
      }
      D2[177] = "����������������������������������������������������������������盄盇盉盋盌盓盕盙盚盜盝盞盠盡盢監盤盦盧盨盩盪盫盬盭盰盳盵盶盷盺盻盽盿眀眂眃眅眆眊県眎眏眐眑眒眓眔眕眖眗眘眛眜眝眞眡眣眤眥眧眪眫�眬眮眰眱眲眳眴眹眻眽眾眿睂睄睅睆睈睉睊睋睌睍睎睏睒睓睔睕睖睗睘睙睜薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳�".split("");
      for (j3 = 0; j3 != D2[177].length; ++j3) if (D2[177][j3].charCodeAt(0) !== 65533) {
        e3[D2[177][j3]] = 45312 + j3;
        d3[45312 + j3] = D2[177][j3];
      }
      D2[178] = "����������������������������������������������������������������睝睞睟睠睤睧睩睪睭睮睯睰睱睲睳睴睵睶睷睸睺睻睼瞁瞂瞃瞆瞇瞈瞉瞊瞋瞏瞐瞓瞔瞕瞖瞗瞘瞙瞚瞛瞜瞝瞞瞡瞣瞤瞦瞨瞫瞭瞮瞯瞱瞲瞴瞶瞷瞸瞹瞺�瞼瞾矀矁矂矃矄矅矆矇矈矉矊矋矌矎矏矐矑矒矓矔矕矖矘矙矚矝矞矟矠矡矤病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖�".split("");
      for (j3 = 0; j3 != D2[178].length; ++j3) if (D2[178][j3].charCodeAt(0) !== 65533) {
        e3[D2[178][j3]] = 45568 + j3;
        d3[45568 + j3] = D2[178][j3];
      }
      D2[179] = "����������������������������������������������������������������矦矨矪矯矰矱矲矴矵矷矹矺矻矼砃砄砅砆砇砈砊砋砎砏砐砓砕砙砛砞砠砡砢砤砨砪砫砮砯砱砲砳砵砶砽砿硁硂硃硄硆硈硉硊硋硍硏硑硓硔硘硙硚�硛硜硞硟硠硡硢硣硤硥硦硧硨硩硯硰硱硲硳硴硵硶硸硹硺硻硽硾硿碀碁碂碃场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚�".split("");
      for (j3 = 0; j3 != D2[179].length; ++j3) if (D2[179][j3].charCodeAt(0) !== 65533) {
        e3[D2[179][j3]] = 45824 + j3;
        d3[45824 + j3] = D2[179][j3];
      }
      D2[180] = "����������������������������������������������������������������碄碅碆碈碊碋碏碐碒碔碕碖碙碝碞碠碢碤碦碨碩碪碫碬碭碮碯碵碶碷碸確碻碼碽碿磀磂磃磄磆磇磈磌磍磎磏磑磒磓磖磗磘磚磛磜磝磞磟磠磡磢磣�磤磥磦磧磩磪磫磭磮磯磰磱磳磵磶磸磹磻磼磽磾磿礀礂礃礄礆礇礈礉礊礋礌础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮�".split("");
      for (j3 = 0; j3 != D2[180].length; ++j3) if (D2[180][j3].charCodeAt(0) !== 65533) {
        e3[D2[180][j3]] = 46080 + j3;
        d3[46080 + j3] = D2[180][j3];
      }
      D2[181] = "����������������������������������������������������������������礍礎礏礐礑礒礔礕礖礗礘礙礚礛礜礝礟礠礡礢礣礥礦礧礨礩礪礫礬礭礮礯礰礱礲礳礵礶礷礸礹礽礿祂祃祄祅祇祊祋祌祍祎祏祐祑祒祔祕祘祙祡祣�祤祦祩祪祫祬祮祰祱祲祳祴祵祶祹祻祼祽祾祿禂禃禆禇禈禉禋禌禍禎禐禑禒怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠�".split("");
      for (j3 = 0; j3 != D2[181].length; ++j3) if (D2[181][j3].charCodeAt(0) !== 65533) {
        e3[D2[181][j3]] = 46336 + j3;
        d3[46336 + j3] = D2[181][j3];
      }
      D2[182] = "����������������������������������������������������������������禓禔禕禖禗禘禙禛禜禝禞禟禠禡禢禣禤禥禦禨禩禪禫禬禭禮禯禰禱禲禴禵禶禷禸禼禿秂秄秅秇秈秊秌秎秏秐秓秔秖秗秙秚秛秜秝秞秠秡秢秥秨秪�秬秮秱秲秳秴秵秶秷秹秺秼秾秿稁稄稅稇稈稉稊稌稏稐稑稒稓稕稖稘稙稛稜丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二�".split("");
      for (j3 = 0; j3 != D2[182].length; ++j3) if (D2[182][j3].charCodeAt(0) !== 65533) {
        e3[D2[182][j3]] = 46592 + j3;
        d3[46592 + j3] = D2[182][j3];
      }
      D2[183] = "����������������������������������������������������������������稝稟稡稢稤稥稦稧稨稩稪稫稬稭種稯稰稱稲稴稵稶稸稺稾穀穁穂穃穄穅穇穈穉穊穋穌積穎穏穐穒穓穔穕穖穘穙穚穛穜穝穞穟穠穡穢穣穤穥穦穧穨�穩穪穫穬穭穮穯穱穲穳穵穻穼穽穾窂窅窇窉窊窋窌窎窏窐窓窔窙窚窛窞窡窢贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服�".split("");
      for (j3 = 0; j3 != D2[183].length; ++j3) if (D2[183][j3].charCodeAt(0) !== 65533) {
        e3[D2[183][j3]] = 46848 + j3;
        d3[46848 + j3] = D2[183][j3];
      }
      D2[184] = "����������������������������������������������������������������窣窤窧窩窪窫窮窯窰窱窲窴窵窶窷窸窹窺窻窼窽窾竀竁竂竃竄竅竆竇竈竉竊竌竍竎竏竐竑竒竓竔竕竗竘竚竛竜竝竡竢竤竧竨竩竪竫竬竮竰竱竲竳�竴竵競竷竸竻竼竾笀笁笂笅笇笉笌笍笎笐笒笓笖笗笘笚笜笝笟笡笢笣笧笩笭浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹�".split("");
      for (j3 = 0; j3 != D2[184].length; ++j3) if (D2[184][j3].charCodeAt(0) !== 65533) {
        e3[D2[184][j3]] = 47104 + j3;
        d3[47104 + j3] = D2[184][j3];
      }
      D2[185] = "����������������������������������������������������������������笯笰笲笴笵笶笷笹笻笽笿筀筁筂筃筄筆筈筊筍筎筓筕筗筙筜筞筟筡筣筤筥筦筧筨筩筪筫筬筭筯筰筳筴筶筸筺筼筽筿箁箂箃箄箆箇箈箉箊箋箌箎箏�箑箒箓箖箘箙箚箛箞箟箠箣箤箥箮箯箰箲箳箵箶箷箹箺箻箼箽箾箿節篂篃範埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈�".split("");
      for (j3 = 0; j3 != D2[185].length; ++j3) if (D2[185][j3].charCodeAt(0) !== 65533) {
        e3[D2[185][j3]] = 47360 + j3;
        d3[47360 + j3] = D2[185][j3];
      }
      D2[186] = "����������������������������������������������������������������篅篈築篊篋篍篎篏篐篒篔篕篖篗篘篛篜篞篟篠篢篣篤篧篨篩篫篬篭篯篰篲篳篴篵篶篸篹篺篻篽篿簀簁簂簃簄簅簆簈簉簊簍簎簐簑簒簓簔簕簗簘簙�簚簛簜簝簞簠簡簢簣簤簥簨簩簫簬簭簮簯簰簱簲簳簴簵簶簷簹簺簻簼簽簾籂骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖�".split("");
      for (j3 = 0; j3 != D2[186].length; ++j3) if (D2[186][j3].charCodeAt(0) !== 65533) {
        e3[D2[186][j3]] = 47616 + j3;
        d3[47616 + j3] = D2[186][j3];
      }
      D2[187] = "����������������������������������������������������������������籃籄籅籆籇籈籉籊籋籌籎籏籐籑籒籓籔籕籖籗籘籙籚籛籜籝籞籟籠籡籢籣籤籥籦籧籨籩籪籫籬籭籮籯籰籱籲籵籶籷籸籹籺籾籿粀粁粂粃粄粅粆粇�粈粊粋粌粍粎粏粐粓粔粖粙粚粛粠粡粣粦粧粨粩粫粬粭粯粰粴粵粶粷粸粺粻弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕�".split("");
      for (j3 = 0; j3 != D2[187].length; ++j3) if (D2[187][j3].charCodeAt(0) !== 65533) {
        e3[D2[187][j3]] = 47872 + j3;
        d3[47872 + j3] = D2[187][j3];
      }
      D2[188] = "����������������������������������������������������������������粿糀糂糃糄糆糉糋糎糏糐糑糒糓糔糘糚糛糝糞糡糢糣糤糥糦糧糩糪糫糬糭糮糰糱糲糳糴糵糶糷糹糺糼糽糾糿紀紁紂紃約紅紆紇紈紉紋紌納紎紏紐�紑紒紓純紕紖紗紘紙級紛紜紝紞紟紡紣紤紥紦紨紩紪紬紭紮細紱紲紳紴紵紶肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件�".split("");
      for (j3 = 0; j3 != D2[188].length; ++j3) if (D2[188][j3].charCodeAt(0) !== 65533) {
        e3[D2[188][j3]] = 48128 + j3;
        d3[48128 + j3] = D2[188][j3];
      }
      D2[189] = "����������������������������������������������������������������紷紸紹紺紻紼紽紾紿絀絁終絃組絅絆絇絈絉絊絋経絍絎絏結絑絒絓絔絕絖絗絘絙絚絛絜絝絞絟絠絡絢絣絤絥給絧絨絩絪絫絬絭絯絰統絲絳絴絵絶�絸絹絺絻絼絽絾絿綀綁綂綃綄綅綆綇綈綉綊綋綌綍綎綏綐綑綒經綔綕綖綗綘健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸�".split("");
      for (j3 = 0; j3 != D2[189].length; ++j3) if (D2[189][j3].charCodeAt(0) !== 65533) {
        e3[D2[189][j3]] = 48384 + j3;
        d3[48384 + j3] = D2[189][j3];
      }
      D2[190] = "����������������������������������������������������������������継続綛綜綝綞綟綠綡綢綣綤綥綧綨綩綪綫綬維綯綰綱網綳綴綵綶綷綸綹綺綻綼綽綾綿緀緁緂緃緄緅緆緇緈緉緊緋緌緍緎総緐緑緒緓緔緕緖緗緘緙�線緛緜緝緞緟締緡緢緣緤緥緦緧編緩緪緫緬緭緮緯緰緱緲緳練緵緶緷緸緹緺尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻�".split("");
      for (j3 = 0; j3 != D2[190].length; ++j3) if (D2[190][j3].charCodeAt(0) !== 65533) {
        e3[D2[190][j3]] = 48640 + j3;
        d3[48640 + j3] = D2[190][j3];
      }
      D2[191] = "����������������������������������������������������������������緻緼緽緾緿縀縁縂縃縄縅縆縇縈縉縊縋縌縍縎縏縐縑縒縓縔縕縖縗縘縙縚縛縜縝縞縟縠縡縢縣縤縥縦縧縨縩縪縫縬縭縮縯縰縱縲縳縴縵縶縷縸縹�縺縼總績縿繀繂繃繄繅繆繈繉繊繋繌繍繎繏繐繑繒繓織繕繖繗繘繙繚繛繜繝俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀�".split("");
      for (j3 = 0; j3 != D2[191].length; ++j3) if (D2[191][j3].charCodeAt(0) !== 65533) {
        e3[D2[191][j3]] = 48896 + j3;
        d3[48896 + j3] = D2[191][j3];
      }
      D2[192] = "����������������������������������������������������������������繞繟繠繡繢繣繤繥繦繧繨繩繪繫繬繭繮繯繰繱繲繳繴繵繶繷繸繹繺繻繼繽繾繿纀纁纃纄纅纆纇纈纉纊纋續纍纎纏纐纑纒纓纔纕纖纗纘纙纚纜纝纞�纮纴纻纼绖绤绬绹缊缐缞缷缹缻缼缽缾缿罀罁罃罆罇罈罉罊罋罌罍罎罏罒罓馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐�".split("");
      for (j3 = 0; j3 != D2[192].length; ++j3) if (D2[192][j3].charCodeAt(0) !== 65533) {
        e3[D2[192][j3]] = 49152 + j3;
        d3[49152 + j3] = D2[192][j3];
      }
      D2[193] = "����������������������������������������������������������������罖罙罛罜罝罞罠罣罤罥罦罧罫罬罭罯罰罳罵罶罷罸罺罻罼罽罿羀羂羃羄羅羆羇羈羉羋羍羏羐羑羒羓羕羖羗羘羙羛羜羠羢羣羥羦羨義羪羫羬羭羮羱�羳羴羵羶羷羺羻羾翀翂翃翄翆翇翈翉翋翍翏翐翑習翓翖翗翙翚翛翜翝翞翢翣痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿�".split("");
      for (j3 = 0; j3 != D2[193].length; ++j3) if (D2[193][j3].charCodeAt(0) !== 65533) {
        e3[D2[193][j3]] = 49408 + j3;
        d3[49408 + j3] = D2[193][j3];
      }
      D2[194] = "����������������������������������������������������������������翤翧翨翪翫翬翭翯翲翴翵翶翷翸翹翺翽翾翿耂耇耈耉耊耎耏耑耓耚耛耝耞耟耡耣耤耫耬耭耮耯耰耲耴耹耺耼耾聀聁聄聅聇聈聉聎聏聐聑聓聕聖聗�聙聛聜聝聞聟聠聡聢聣聤聥聦聧聨聫聬聭聮聯聰聲聳聴聵聶職聸聹聺聻聼聽隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫�".split("");
      for (j3 = 0; j3 != D2[194].length; ++j3) if (D2[194][j3].charCodeAt(0) !== 65533) {
        e3[D2[194][j3]] = 49664 + j3;
        d3[49664 + j3] = D2[194][j3];
      }
      D2[195] = "����������������������������������������������������������������聾肁肂肅肈肊肍肎肏肐肑肒肔肕肗肙肞肣肦肧肨肬肰肳肵肶肸肹肻胅胇胈胉胊胋胏胐胑胒胓胔胕胘胟胠胢胣胦胮胵胷胹胻胾胿脀脁脃脄脅脇脈脋�脌脕脗脙脛脜脝脟脠脡脢脣脤脥脦脧脨脩脪脫脭脮脰脳脴脵脷脹脺脻脼脽脿谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸�".split("");
      for (j3 = 0; j3 != D2[195].length; ++j3) if (D2[195][j3].charCodeAt(0) !== 65533) {
        e3[D2[195][j3]] = 49920 + j3;
        d3[49920 + j3] = D2[195][j3];
      }
      D2[196] = "����������������������������������������������������������������腀腁腂腃腄腅腇腉腍腎腏腒腖腗腘腛腜腝腞腟腡腢腣腤腦腨腪腫腬腯腲腳腵腶腷腸膁膃膄膅膆膇膉膋膌膍膎膐膒膓膔膕膖膗膙膚膞膟膠膡膢膤膥�膧膩膫膬膭膮膯膰膱膲膴膵膶膷膸膹膼膽膾膿臄臅臇臈臉臋臍臎臏臐臑臒臓摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁�".split("");
      for (j3 = 0; j3 != D2[196].length; ++j3) if (D2[196][j3].charCodeAt(0) !== 65533) {
        e3[D2[196][j3]] = 50176 + j3;
        d3[50176 + j3] = D2[196][j3];
      }
      D2[197] = "����������������������������������������������������������������臔臕臖臗臘臙臚臛臜臝臞臟臠臡臢臤臥臦臨臩臫臮臯臰臱臲臵臶臷臸臹臺臽臿舃與興舉舊舋舎舏舑舓舕舖舗舘舙舚舝舠舤舥舦舧舩舮舲舺舼舽舿�艀艁艂艃艅艆艈艊艌艍艎艐艑艒艓艔艕艖艗艙艛艜艝艞艠艡艢艣艤艥艦艧艩拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗�".split("");
      for (j3 = 0; j3 != D2[197].length; ++j3) if (D2[197][j3].charCodeAt(0) !== 65533) {
        e3[D2[197][j3]] = 50432 + j3;
        d3[50432 + j3] = D2[197][j3];
      }
      D2[198] = "����������������������������������������������������������������艪艫艬艭艱艵艶艷艸艻艼芀芁芃芅芆芇芉芌芐芓芔芕芖芚芛芞芠芢芣芧芲芵芶芺芻芼芿苀苂苃苅苆苉苐苖苙苚苝苢苧苨苩苪苬苭苮苰苲苳苵苶苸�苺苼苽苾苿茀茊茋茍茐茒茓茖茘茙茝茞茟茠茡茢茣茤茥茦茩茪茮茰茲茷茻茽啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐�".split("");
      for (j3 = 0; j3 != D2[198].length; ++j3) if (D2[198][j3].charCodeAt(0) !== 65533) {
        e3[D2[198][j3]] = 50688 + j3;
        d3[50688 + j3] = D2[198][j3];
      }
      D2[199] = "����������������������������������������������������������������茾茿荁荂荄荅荈荊荋荌荍荎荓荕荖荗荘荙荝荢荰荱荲荳荴荵荶荹荺荾荿莀莁莂莃莄莇莈莊莋莌莍莏莐莑莔莕莖莗莙莚莝莟莡莢莣莤莥莦莧莬莭莮�莯莵莻莾莿菂菃菄菆菈菉菋菍菎菐菑菒菓菕菗菙菚菛菞菢菣菤菦菧菨菫菬菭恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠�".split("");
      for (j3 = 0; j3 != D2[199].length; ++j3) if (D2[199][j3].charCodeAt(0) !== 65533) {
        e3[D2[199][j3]] = 50944 + j3;
        d3[50944 + j3] = D2[199][j3];
      }
      D2[200] = "����������������������������������������������������������������菮華菳菴菵菶菷菺菻菼菾菿萀萂萅萇萈萉萊萐萒萓萔萕萖萗萙萚萛萞萟萠萡萢萣萩萪萫萬萭萮萯萰萲萳萴萵萶萷萹萺萻萾萿葀葁葂葃葄葅葇葈葉�葊葋葌葍葎葏葐葒葓葔葕葖葘葝葞葟葠葢葤葥葦葧葨葪葮葯葰葲葴葷葹葻葼取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁�".split("");
      for (j3 = 0; j3 != D2[200].length; ++j3) if (D2[200][j3].charCodeAt(0) !== 65533) {
        e3[D2[200][j3]] = 51200 + j3;
        d3[51200 + j3] = D2[200][j3];
      }
      D2[201] = "����������������������������������������������������������������葽葾葿蒀蒁蒃蒄蒅蒆蒊蒍蒏蒐蒑蒒蒓蒔蒕蒖蒘蒚蒛蒝蒞蒟蒠蒢蒣蒤蒥蒦蒧蒨蒩蒪蒫蒬蒭蒮蒰蒱蒳蒵蒶蒷蒻蒼蒾蓀蓂蓃蓅蓆蓇蓈蓋蓌蓎蓏蓒蓔蓕蓗�蓘蓙蓚蓛蓜蓞蓡蓢蓤蓧蓨蓩蓪蓫蓭蓮蓯蓱蓲蓳蓴蓵蓶蓷蓸蓹蓺蓻蓽蓾蔀蔁蔂伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳�".split("");
      for (j3 = 0; j3 != D2[201].length; ++j3) if (D2[201][j3].charCodeAt(0) !== 65533) {
        e3[D2[201][j3]] = 51456 + j3;
        d3[51456 + j3] = D2[201][j3];
      }
      D2[202] = "����������������������������������������������������������������蔃蔄蔅蔆蔇蔈蔉蔊蔋蔍蔎蔏蔐蔒蔔蔕蔖蔘蔙蔛蔜蔝蔞蔠蔢蔣蔤蔥蔦蔧蔨蔩蔪蔭蔮蔯蔰蔱蔲蔳蔴蔵蔶蔾蔿蕀蕁蕂蕄蕅蕆蕇蕋蕌蕍蕎蕏蕐蕑蕒蕓蕔蕕�蕗蕘蕚蕛蕜蕝蕟蕠蕡蕢蕣蕥蕦蕧蕩蕪蕫蕬蕭蕮蕯蕰蕱蕳蕵蕶蕷蕸蕼蕽蕿薀薁省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱�".split("");
      for (j3 = 0; j3 != D2[202].length; ++j3) if (D2[202][j3].charCodeAt(0) !== 65533) {
        e3[D2[202][j3]] = 51712 + j3;
        d3[51712 + j3] = D2[202][j3];
      }
      D2[203] = "����������������������������������������������������������������薂薃薆薈薉薊薋薌薍薎薐薑薒薓薔薕薖薗薘薙薚薝薞薟薠薡薢薣薥薦薧薩薫薬薭薱薲薳薴薵薶薸薺薻薼薽薾薿藀藂藃藄藅藆藇藈藊藋藌藍藎藑藒�藔藖藗藘藙藚藛藝藞藟藠藡藢藣藥藦藧藨藪藫藬藭藮藯藰藱藲藳藴藵藶藷藸恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔�".split("");
      for (j3 = 0; j3 != D2[203].length; ++j3) if (D2[203][j3].charCodeAt(0) !== 65533) {
        e3[D2[203][j3]] = 51968 + j3;
        d3[51968 + j3] = D2[203][j3];
      }
      D2[204] = "����������������������������������������������������������������藹藺藼藽藾蘀蘁蘂蘃蘄蘆蘇蘈蘉蘊蘋蘌蘍蘎蘏蘐蘒蘓蘔蘕蘗蘘蘙蘚蘛蘜蘝蘞蘟蘠蘡蘢蘣蘤蘥蘦蘨蘪蘫蘬蘭蘮蘯蘰蘱蘲蘳蘴蘵蘶蘷蘹蘺蘻蘽蘾蘿虀�虁虂虃虄虅虆虇虈虉虊虋虌虒虓處虖虗虘虙虛虜虝號虠虡虣虤虥虦虧虨虩虪獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃�".split("");
      for (j3 = 0; j3 != D2[204].length; ++j3) if (D2[204][j3].charCodeAt(0) !== 65533) {
        e3[D2[204][j3]] = 52224 + j3;
        d3[52224 + j3] = D2[204][j3];
      }
      D2[205] = "����������������������������������������������������������������虭虯虰虲虳虴虵虶虷虸蚃蚄蚅蚆蚇蚈蚉蚎蚏蚐蚑蚒蚔蚖蚗蚘蚙蚚蚛蚞蚟蚠蚡蚢蚥蚦蚫蚭蚮蚲蚳蚷蚸蚹蚻蚼蚽蚾蚿蛁蛂蛃蛅蛈蛌蛍蛒蛓蛕蛖蛗蛚蛜�蛝蛠蛡蛢蛣蛥蛦蛧蛨蛪蛫蛬蛯蛵蛶蛷蛺蛻蛼蛽蛿蜁蜄蜅蜆蜋蜌蜎蜏蜐蜑蜔蜖汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威�".split("");
      for (j3 = 0; j3 != D2[205].length; ++j3) if (D2[205][j3].charCodeAt(0) !== 65533) {
        e3[D2[205][j3]] = 52480 + j3;
        d3[52480 + j3] = D2[205][j3];
      }
      D2[206] = "����������������������������������������������������������������蜙蜛蜝蜟蜠蜤蜦蜧蜨蜪蜫蜬蜭蜯蜰蜲蜳蜵蜶蜸蜹蜺蜼蜽蝀蝁蝂蝃蝄蝅蝆蝊蝋蝍蝏蝐蝑蝒蝔蝕蝖蝘蝚蝛蝜蝝蝞蝟蝡蝢蝦蝧蝨蝩蝪蝫蝬蝭蝯蝱蝲蝳蝵�蝷蝸蝹蝺蝿螀螁螄螆螇螉螊螌螎螏螐螑螒螔螕螖螘螙螚螛螜螝螞螠螡螢螣螤巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺�".split("");
      for (j3 = 0; j3 != D2[206].length; ++j3) if (D2[206][j3].charCodeAt(0) !== 65533) {
        e3[D2[206][j3]] = 52736 + j3;
        d3[52736 + j3] = D2[206][j3];
      }
      D2[207] = "����������������������������������������������������������������螥螦螧螩螪螮螰螱螲螴螶螷螸螹螻螼螾螿蟁蟂蟃蟄蟅蟇蟈蟉蟌蟍蟎蟏蟐蟔蟕蟖蟗蟘蟙蟚蟜蟝蟞蟟蟡蟢蟣蟤蟦蟧蟨蟩蟫蟬蟭蟯蟰蟱蟲蟳蟴蟵蟶蟷蟸�蟺蟻蟼蟽蟿蠀蠁蠂蠄蠅蠆蠇蠈蠉蠋蠌蠍蠎蠏蠐蠑蠒蠔蠗蠘蠙蠚蠜蠝蠞蠟蠠蠣稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓�".split("");
      for (j3 = 0; j3 != D2[207].length; ++j3) if (D2[207][j3].charCodeAt(0) !== 65533) {
        e3[D2[207][j3]] = 52992 + j3;
        d3[52992 + j3] = D2[207][j3];
      }
      D2[208] = "����������������������������������������������������������������蠤蠥蠦蠧蠨蠩蠪蠫蠬蠭蠮蠯蠰蠱蠳蠴蠵蠶蠷蠸蠺蠻蠽蠾蠿衁衂衃衆衇衈衉衊衋衎衏衐衑衒術衕衖衘衚衛衜衝衞衟衠衦衧衪衭衯衱衳衴衵衶衸衹衺�衻衼袀袃袆袇袉袊袌袎袏袐袑袓袔袕袗袘袙袚袛袝袞袟袠袡袣袥袦袧袨袩袪小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄�".split("");
      for (j3 = 0; j3 != D2[208].length; ++j3) if (D2[208][j3].charCodeAt(0) !== 65533) {
        e3[D2[208][j3]] = 53248 + j3;
        d3[53248 + j3] = D2[208][j3];
      }
      D2[209] = "����������������������������������������������������������������袬袮袯袰袲袳袴袵袶袸袹袺袻袽袾袿裀裃裄裇裈裊裋裌裍裏裐裑裓裖裗裚裛補裝裞裠裡裦裧裩裪裫裬裭裮裯裲裵裶裷裺裻製裿褀褁褃褄褅褆複褈�褉褋褌褍褎褏褑褔褕褖褗褘褜褝褞褟褠褢褣褤褦褧褨褩褬褭褮褯褱褲褳褵褷选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶�".split("");
      for (j3 = 0; j3 != D2[209].length; ++j3) if (D2[209][j3].charCodeAt(0) !== 65533) {
        e3[D2[209][j3]] = 53504 + j3;
        d3[53504 + j3] = D2[209][j3];
      }
      D2[210] = "����������������������������������������������������������������褸褹褺褻褼褽褾褿襀襂襃襅襆襇襈襉襊襋襌襍襎襏襐襑襒襓襔襕襖襗襘襙襚襛襜襝襠襡襢襣襤襥襧襨襩襪襫襬襭襮襯襰襱襲襳襴襵襶襷襸襹襺襼�襽襾覀覂覄覅覇覈覉覊見覌覍覎規覐覑覒覓覔覕視覗覘覙覚覛覜覝覞覟覠覡摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐�".split("");
      for (j3 = 0; j3 != D2[210].length; ++j3) if (D2[210][j3].charCodeAt(0) !== 65533) {
        e3[D2[210][j3]] = 53760 + j3;
        d3[53760 + j3] = D2[210][j3];
      }
      D2[211] = "����������������������������������������������������������������覢覣覤覥覦覧覨覩親覫覬覭覮覯覰覱覲観覴覵覶覷覸覹覺覻覼覽覾覿觀觃觍觓觔觕觗觘觙觛觝觟觠觡觢觤觧觨觩觪觬觭觮觰觱觲觴觵觶觷觸觹觺�觻觼觽觾觿訁訂訃訄訅訆計訉訊訋訌訍討訏訐訑訒訓訔訕訖託記訙訚訛訜訝印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉�".split("");
      for (j3 = 0; j3 != D2[211].length; ++j3) if (D2[211][j3].charCodeAt(0) !== 65533) {
        e3[D2[211][j3]] = 54016 + j3;
        d3[54016 + j3] = D2[211][j3];
      }
      D2[212] = "����������������������������������������������������������������訞訟訠訡訢訣訤訥訦訧訨訩訪訫訬設訮訯訰許訲訳訴訵訶訷訸訹診註証訽訿詀詁詂詃詄詅詆詇詉詊詋詌詍詎詏詐詑詒詓詔評詖詗詘詙詚詛詜詝詞�詟詠詡詢詣詤詥試詧詨詩詪詫詬詭詮詯詰話該詳詴詵詶詷詸詺詻詼詽詾詿誀浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧�".split("");
      for (j3 = 0; j3 != D2[212].length; ++j3) if (D2[212][j3].charCodeAt(0) !== 65533) {
        e3[D2[212][j3]] = 54272 + j3;
        d3[54272 + j3] = D2[212][j3];
      }
      D2[213] = "����������������������������������������������������������������誁誂誃誄誅誆誇誈誋誌認誎誏誐誑誒誔誕誖誗誘誙誚誛誜誝語誟誠誡誢誣誤誥誦誧誨誩說誫説読誮誯誰誱課誳誴誵誶誷誸誹誺誻誼誽誾調諀諁諂�諃諄諅諆談諈諉諊請諌諍諎諏諐諑諒諓諔諕論諗諘諙諚諛諜諝諞諟諠諡諢諣铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政�".split("");
      for (j3 = 0; j3 != D2[213].length; ++j3) if (D2[213][j3].charCodeAt(0) !== 65533) {
        e3[D2[213][j3]] = 54528 + j3;
        d3[54528 + j3] = D2[213][j3];
      }
      D2[214] = "����������������������������������������������������������������諤諥諦諧諨諩諪諫諬諭諮諯諰諱諲諳諴諵諶諷諸諹諺諻諼諽諾諿謀謁謂謃謄謅謆謈謉謊謋謌謍謎謏謐謑謒謓謔謕謖謗謘謙謚講謜謝謞謟謠謡謢謣�謤謥謧謨謩謪謫謬謭謮謯謰謱謲謳謴謵謶謷謸謹謺謻謼謽謾謿譀譁譂譃譄譅帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑�".split("");
      for (j3 = 0; j3 != D2[214].length; ++j3) if (D2[214][j3].charCodeAt(0) !== 65533) {
        e3[D2[214][j3]] = 54784 + j3;
        d3[54784 + j3] = D2[214][j3];
      }
      D2[215] = "����������������������������������������������������������������譆譇譈證譊譋譌譍譎譏譐譑譒譓譔譕譖譗識譙譚譛譜譝譞譟譠譡譢譣譤譥譧譨譩譪譫譭譮譯議譱譲譳譴譵譶護譸譹譺譻譼譽譾譿讀讁讂讃讄讅讆�讇讈讉變讋讌讍讎讏讐讑讒讓讔讕讖讗讘讙讚讛讜讝讞讟讬讱讻诇诐诪谉谞住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座������".split("");
      for (j3 = 0; j3 != D2[215].length; ++j3) if (D2[215][j3].charCodeAt(0) !== 65533) {
        e3[D2[215][j3]] = 55040 + j3;
        d3[55040 + j3] = D2[215][j3];
      }
      D2[216] = "����������������������������������������������������������������谸谹谺谻谼谽谾谿豀豂豃豄豅豈豊豋豍豎豏豐豑豒豓豔豖豗豘豙豛豜豝豞豟豠豣豤豥豦豧豨豩豬豭豮豯豰豱豲豴豵豶豷豻豼豽豾豿貀貁貃貄貆貇�貈貋貍貎貏貐貑貒貓貕貖貗貙貚貛貜貝貞貟負財貢貣貤貥貦貧貨販貪貫責貭亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝�".split("");
      for (j3 = 0; j3 != D2[216].length; ++j3) if (D2[216][j3].charCodeAt(0) !== 65533) {
        e3[D2[216][j3]] = 55296 + j3;
        d3[55296 + j3] = D2[216][j3];
      }
      D2[217] = "����������������������������������������������������������������貮貯貰貱貲貳貴貵貶買貸貹貺費貼貽貾貿賀賁賂賃賄賅賆資賈賉賊賋賌賍賎賏賐賑賒賓賔賕賖賗賘賙賚賛賜賝賞賟賠賡賢賣賤賥賦賧賨賩質賫賬�賭賮賯賰賱賲賳賴賵賶賷賸賹賺賻購賽賾賿贀贁贂贃贄贅贆贇贈贉贊贋贌贍佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼�".split("");
      for (j3 = 0; j3 != D2[217].length; ++j3) if (D2[217][j3].charCodeAt(0) !== 65533) {
        e3[D2[217][j3]] = 55552 + j3;
        d3[55552 + j3] = D2[217][j3];
      }
      D2[218] = "����������������������������������������������������������������贎贏贐贑贒贓贔贕贖贗贘贙贚贛贜贠赑赒赗赟赥赨赩赪赬赮赯赱赲赸赹赺赻赼赽赾赿趀趂趃趆趇趈趉趌趍趎趏趐趒趓趕趖趗趘趙趚趛趜趝趞趠趡�趢趤趥趦趧趨趩趪趫趬趭趮趯趰趲趶趷趹趻趽跀跁跂跅跇跈跉跊跍跐跒跓跔凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺�".split("");
      for (j3 = 0; j3 != D2[218].length; ++j3) if (D2[218][j3].charCodeAt(0) !== 65533) {
        e3[D2[218][j3]] = 55808 + j3;
        d3[55808 + j3] = D2[218][j3];
      }
      D2[219] = "����������������������������������������������������������������跕跘跙跜跠跡跢跥跦跧跩跭跮跰跱跲跴跶跼跾跿踀踁踂踃踄踆踇踈踋踍踎踐踑踒踓踕踖踗踘踙踚踛踜踠踡踤踥踦踧踨踫踭踰踲踳踴踶踷踸踻踼踾�踿蹃蹅蹆蹌蹍蹎蹏蹐蹓蹔蹕蹖蹗蹘蹚蹛蹜蹝蹞蹟蹠蹡蹢蹣蹤蹥蹧蹨蹪蹫蹮蹱邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝�".split("");
      for (j3 = 0; j3 != D2[219].length; ++j3) if (D2[219][j3].charCodeAt(0) !== 65533) {
        e3[D2[219][j3]] = 56064 + j3;
        d3[56064 + j3] = D2[219][j3];
      }
      D2[220] = "����������������������������������������������������������������蹳蹵蹷蹸蹹蹺蹻蹽蹾躀躂躃躄躆躈躉躊躋躌躍躎躑躒躓躕躖躗躘躙躚躛躝躟躠躡躢躣躤躥躦躧躨躩躪躭躮躰躱躳躴躵躶躷躸躹躻躼躽躾躿軀軁軂�軃軄軅軆軇軈軉車軋軌軍軏軐軑軒軓軔軕軖軗軘軙軚軛軜軝軞軟軠軡転軣軤堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥�".split("");
      for (j3 = 0; j3 != D2[220].length; ++j3) if (D2[220][j3].charCodeAt(0) !== 65533) {
        e3[D2[220][j3]] = 56320 + j3;
        d3[56320 + j3] = D2[220][j3];
      }
      D2[221] = "����������������������������������������������������������������軥軦軧軨軩軪軫軬軭軮軯軰軱軲軳軴軵軶軷軸軹軺軻軼軽軾軿輀輁輂較輄輅輆輇輈載輊輋輌輍輎輏輐輑輒輓輔輕輖輗輘輙輚輛輜輝輞輟輠輡輢輣�輤輥輦輧輨輩輪輫輬輭輮輯輰輱輲輳輴輵輶輷輸輹輺輻輼輽輾輿轀轁轂轃轄荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺�".split("");
      for (j3 = 0; j3 != D2[221].length; ++j3) if (D2[221][j3].charCodeAt(0) !== 65533) {
        e3[D2[221][j3]] = 56576 + j3;
        d3[56576 + j3] = D2[221][j3];
      }
      D2[222] = "����������������������������������������������������������������轅轆轇轈轉轊轋轌轍轎轏轐轑轒轓轔轕轖轗轘轙轚轛轜轝轞轟轠轡轢轣轤轥轪辀辌辒辝辠辡辢辤辥辦辧辪辬辭辮辯農辳辴辵辷辸辺辻込辿迀迃迆�迉迊迋迌迍迏迒迖迗迚迠迡迣迧迬迯迱迲迴迵迶迺迻迼迾迿逇逈逌逎逓逕逘蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖�".split("");
      for (j3 = 0; j3 != D2[222].length; ++j3) if (D2[222][j3].charCodeAt(0) !== 65533) {
        e3[D2[222][j3]] = 56832 + j3;
        d3[56832 + j3] = D2[222][j3];
      }
      D2[223] = "����������������������������������������������������������������這逜連逤逥逧逨逩逪逫逬逰週進逳逴逷逹逺逽逿遀遃遅遆遈遉遊運遌過達違遖遙遚遜遝遞遟遠遡遤遦遧適遪遫遬遯遰遱遲遳遶遷選遹遺遻遼遾邁�還邅邆邇邉邊邌邍邎邏邐邒邔邖邘邚邜邞邟邠邤邥邧邨邩邫邭邲邷邼邽邿郀摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼�".split("");
      for (j3 = 0; j3 != D2[223].length; ++j3) if (D2[223][j3].charCodeAt(0) !== 65533) {
        e3[D2[223][j3]] = 57088 + j3;
        d3[57088 + j3] = D2[223][j3];
      }
      D2[224] = "����������������������������������������������������������������郂郃郆郈郉郋郌郍郒郔郕郖郘郙郚郞郟郠郣郤郥郩郪郬郮郰郱郲郳郵郶郷郹郺郻郼郿鄀鄁鄃鄅鄆鄇鄈鄉鄊鄋鄌鄍鄎鄏鄐鄑鄒鄓鄔鄕鄖鄗鄘鄚鄛鄜�鄝鄟鄠鄡鄤鄥鄦鄧鄨鄩鄪鄫鄬鄭鄮鄰鄲鄳鄴鄵鄶鄷鄸鄺鄻鄼鄽鄾鄿酀酁酂酄唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼�".split("");
      for (j3 = 0; j3 != D2[224].length; ++j3) if (D2[224][j3].charCodeAt(0) !== 65533) {
        e3[D2[224][j3]] = 57344 + j3;
        d3[57344 + j3] = D2[224][j3];
      }
      D2[225] = "����������������������������������������������������������������酅酇酈酑酓酔酕酖酘酙酛酜酟酠酦酧酨酫酭酳酺酻酼醀醁醂醃醄醆醈醊醎醏醓醔醕醖醗醘醙醜醝醞醟醠醡醤醥醦醧醨醩醫醬醰醱醲醳醶醷醸醹醻�醼醽醾醿釀釁釂釃釄釅釆釈釋釐釒釓釔釕釖釗釘釙釚釛針釞釟釠釡釢釣釤釥帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺�".split("");
      for (j3 = 0; j3 != D2[225].length; ++j3) if (D2[225][j3].charCodeAt(0) !== 65533) {
        e3[D2[225][j3]] = 57600 + j3;
        d3[57600 + j3] = D2[225][j3];
      }
      D2[226] = "����������������������������������������������������������������釦釧釨釩釪釫釬釭釮釯釰釱釲釳釴釵釶釷釸釹釺釻釼釽釾釿鈀鈁鈂鈃鈄鈅鈆鈇鈈鈉鈊鈋鈌鈍鈎鈏鈐鈑鈒鈓鈔鈕鈖鈗鈘鈙鈚鈛鈜鈝鈞鈟鈠鈡鈢鈣鈤�鈥鈦鈧鈨鈩鈪鈫鈬鈭鈮鈯鈰鈱鈲鈳鈴鈵鈶鈷鈸鈹鈺鈻鈼鈽鈾鈿鉀鉁鉂鉃鉄鉅狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂�".split("");
      for (j3 = 0; j3 != D2[226].length; ++j3) if (D2[226][j3].charCodeAt(0) !== 65533) {
        e3[D2[226][j3]] = 57856 + j3;
        d3[57856 + j3] = D2[226][j3];
      }
      D2[227] = "����������������������������������������������������������������鉆鉇鉈鉉鉊鉋鉌鉍鉎鉏鉐鉑鉒鉓鉔鉕鉖鉗鉘鉙鉚鉛鉜鉝鉞鉟鉠鉡鉢鉣鉤鉥鉦鉧鉨鉩鉪鉫鉬鉭鉮鉯鉰鉱鉲鉳鉵鉶鉷鉸鉹鉺鉻鉼鉽鉾鉿銀銁銂銃銄銅�銆銇銈銉銊銋銌銍銏銐銑銒銓銔銕銖銗銘銙銚銛銜銝銞銟銠銡銢銣銤銥銦銧恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾�".split("");
      for (j3 = 0; j3 != D2[227].length; ++j3) if (D2[227][j3].charCodeAt(0) !== 65533) {
        e3[D2[227][j3]] = 58112 + j3;
        d3[58112 + j3] = D2[227][j3];
      }
      D2[228] = "����������������������������������������������������������������銨銩銪銫銬銭銯銰銱銲銳銴銵銶銷銸銹銺銻銼銽銾銿鋀鋁鋂鋃鋄鋅鋆鋇鋉鋊鋋鋌鋍鋎鋏鋐鋑鋒鋓鋔鋕鋖鋗鋘鋙鋚鋛鋜鋝鋞鋟鋠鋡鋢鋣鋤鋥鋦鋧鋨�鋩鋪鋫鋬鋭鋮鋯鋰鋱鋲鋳鋴鋵鋶鋷鋸鋹鋺鋻鋼鋽鋾鋿錀錁錂錃錄錅錆錇錈錉洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑�".split("");
      for (j3 = 0; j3 != D2[228].length; ++j3) if (D2[228][j3].charCodeAt(0) !== 65533) {
        e3[D2[228][j3]] = 58368 + j3;
        d3[58368 + j3] = D2[228][j3];
      }
      D2[229] = "����������������������������������������������������������������錊錋錌錍錎錏錐錑錒錓錔錕錖錗錘錙錚錛錜錝錞錟錠錡錢錣錤錥錦錧錨錩錪錫錬錭錮錯錰錱録錳錴錵錶錷錸錹錺錻錼錽錿鍀鍁鍂鍃鍄鍅鍆鍇鍈鍉�鍊鍋鍌鍍鍎鍏鍐鍑鍒鍓鍔鍕鍖鍗鍘鍙鍚鍛鍜鍝鍞鍟鍠鍡鍢鍣鍤鍥鍦鍧鍨鍩鍫濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣�".split("");
      for (j3 = 0; j3 != D2[229].length; ++j3) if (D2[229][j3].charCodeAt(0) !== 65533) {
        e3[D2[229][j3]] = 58624 + j3;
        d3[58624 + j3] = D2[229][j3];
      }
      D2[230] = "����������������������������������������������������������������鍬鍭鍮鍯鍰鍱鍲鍳鍴鍵鍶鍷鍸鍹鍺鍻鍼鍽鍾鍿鎀鎁鎂鎃鎄鎅鎆鎇鎈鎉鎊鎋鎌鎍鎎鎐鎑鎒鎓鎔鎕鎖鎗鎘鎙鎚鎛鎜鎝鎞鎟鎠鎡鎢鎣鎤鎥鎦鎧鎨鎩鎪鎫�鎬鎭鎮鎯鎰鎱鎲鎳鎴鎵鎶鎷鎸鎹鎺鎻鎼鎽鎾鎿鏀鏁鏂鏃鏄鏅鏆鏇鏈鏉鏋鏌鏍妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩�".split("");
      for (j3 = 0; j3 != D2[230].length; ++j3) if (D2[230][j3].charCodeAt(0) !== 65533) {
        e3[D2[230][j3]] = 58880 + j3;
        d3[58880 + j3] = D2[230][j3];
      }
      D2[231] = "����������������������������������������������������������������鏎鏏鏐鏑鏒鏓鏔鏕鏗鏘鏙鏚鏛鏜鏝鏞鏟鏠鏡鏢鏣鏤鏥鏦鏧鏨鏩鏪鏫鏬鏭鏮鏯鏰鏱鏲鏳鏴鏵鏶鏷鏸鏹鏺鏻鏼鏽鏾鏿鐀鐁鐂鐃鐄鐅鐆鐇鐈鐉鐊鐋鐌鐍�鐎鐏鐐鐑鐒鐓鐔鐕鐖鐗鐘鐙鐚鐛鐜鐝鐞鐟鐠鐡鐢鐣鐤鐥鐦鐧鐨鐩鐪鐫鐬鐭鐮纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬�".split("");
      for (j3 = 0; j3 != D2[231].length; ++j3) if (D2[231][j3].charCodeAt(0) !== 65533) {
        e3[D2[231][j3]] = 59136 + j3;
        d3[59136 + j3] = D2[231][j3];
      }
      D2[232] = "����������������������������������������������������������������鐯鐰鐱鐲鐳鐴鐵鐶鐷鐸鐹鐺鐻鐼鐽鐿鑀鑁鑂鑃鑄鑅鑆鑇鑈鑉鑊鑋鑌鑍鑎鑏鑐鑑鑒鑓鑔鑕鑖鑗鑘鑙鑚鑛鑜鑝鑞鑟鑠鑡鑢鑣鑤鑥鑦鑧鑨鑩鑪鑬鑭鑮鑯�鑰鑱鑲鑳鑴鑵鑶鑷鑸鑹鑺鑻鑼鑽鑾鑿钀钁钂钃钄钑钖钘铇铏铓铔铚铦铻锜锠琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹�".split("");
      for (j3 = 0; j3 != D2[232].length; ++j3) if (D2[232][j3].charCodeAt(0) !== 65533) {
        e3[D2[232][j3]] = 59392 + j3;
        d3[59392 + j3] = D2[232][j3];
      }
      D2[233] = "����������������������������������������������������������������锧锳锽镃镈镋镕镚镠镮镴镵長镸镹镺镻镼镽镾門閁閂閃閄閅閆閇閈閉閊開閌閍閎閏閐閑閒間閔閕閖閗閘閙閚閛閜閝閞閟閠閡関閣閤閥閦閧閨閩閪�閫閬閭閮閯閰閱閲閳閴閵閶閷閸閹閺閻閼閽閾閿闀闁闂闃闄闅闆闇闈闉闊闋椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋�".split("");
      for (j3 = 0; j3 != D2[233].length; ++j3) if (D2[233][j3].charCodeAt(0) !== 65533) {
        e3[D2[233][j3]] = 59648 + j3;
        d3[59648 + j3] = D2[233][j3];
      }
      D2[234] = "����������������������������������������������������������������闌闍闎闏闐闑闒闓闔闕闖闗闘闙闚闛關闝闞闟闠闡闢闣闤闥闦闧闬闿阇阓阘阛阞阠阣阤阥阦阧阨阩阫阬阭阯阰阷阸阹阺阾陁陃陊陎陏陑陒陓陖陗�陘陙陚陜陝陞陠陣陥陦陫陭陮陯陰陱陳陸陹険陻陼陽陾陿隀隁隂隃隄隇隉隊辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰�".split("");
      for (j3 = 0; j3 != D2[234].length; ++j3) if (D2[234][j3].charCodeAt(0) !== 65533) {
        e3[D2[234][j3]] = 59904 + j3;
        d3[59904 + j3] = D2[234][j3];
      }
      D2[235] = "����������������������������������������������������������������隌階隑隒隓隕隖隚際隝隞隟隠隡隢隣隤隥隦隨隩險隫隬隭隮隯隱隲隴隵隷隸隺隻隿雂雃雈雊雋雐雑雓雔雖雗雘雙雚雛雜雝雞雟雡離難雤雥雦雧雫�雬雭雮雰雱雲雴雵雸雺電雼雽雿霂霃霅霊霋霌霐霑霒霔霕霗霘霙霚霛霝霟霠搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻�".split("");
      for (j3 = 0; j3 != D2[235].length; ++j3) if (D2[235][j3].charCodeAt(0) !== 65533) {
        e3[D2[235][j3]] = 60160 + j3;
        d3[60160 + j3] = D2[235][j3];
      }
      D2[236] = "����������������������������������������������������������������霡霢霣霤霥霦霧霨霩霫霬霮霯霱霳霴霵霶霷霺霻霼霽霿靀靁靂靃靄靅靆靇靈靉靊靋靌靍靎靏靐靑靔靕靗靘靚靜靝靟靣靤靦靧靨靪靫靬靭靮靯靰靱�靲靵靷靸靹靺靻靽靾靿鞀鞁鞂鞃鞄鞆鞇鞈鞉鞊鞌鞎鞏鞐鞓鞕鞖鞗鞙鞚鞛鞜鞝臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐�".split("");
      for (j3 = 0; j3 != D2[236].length; ++j3) if (D2[236][j3].charCodeAt(0) !== 65533) {
        e3[D2[236][j3]] = 60416 + j3;
        d3[60416 + j3] = D2[236][j3];
      }
      D2[237] = "����������������������������������������������������������������鞞鞟鞡鞢鞤鞥鞦鞧鞨鞩鞪鞬鞮鞰鞱鞳鞵鞶鞷鞸鞹鞺鞻鞼鞽鞾鞿韀韁韂韃韄韅韆韇韈韉韊韋韌韍韎韏韐韑韒韓韔韕韖韗韘韙韚韛韜韝韞韟韠韡韢韣�韤韥韨韮韯韰韱韲韴韷韸韹韺韻韼韽韾響頀頁頂頃頄項順頇須頉頊頋頌頍頎怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨�".split("");
      for (j3 = 0; j3 != D2[237].length; ++j3) if (D2[237][j3].charCodeAt(0) !== 65533) {
        e3[D2[237][j3]] = 60672 + j3;
        d3[60672 + j3] = D2[237][j3];
      }
      D2[238] = "����������������������������������������������������������������頏預頑頒頓頔頕頖頗領頙頚頛頜頝頞頟頠頡頢頣頤頥頦頧頨頩頪頫頬頭頮頯頰頱頲頳頴頵頶頷頸頹頺頻頼頽頾頿顀顁顂顃顄顅顆顇顈顉顊顋題額�顎顏顐顑顒顓顔顕顖顗願顙顚顛顜顝類顟顠顡顢顣顤顥顦顧顨顩顪顫顬顭顮睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪�".split("");
      for (j3 = 0; j3 != D2[238].length; ++j3) if (D2[238][j3].charCodeAt(0) !== 65533) {
        e3[D2[238][j3]] = 60928 + j3;
        d3[60928 + j3] = D2[238][j3];
      }
      D2[239] = "����������������������������������������������������������������顯顰顱顲顳顴颋颎颒颕颙颣風颩颪颫颬颭颮颯颰颱颲颳颴颵颶颷颸颹颺颻颼颽颾颿飀飁飂飃飄飅飆飇飈飉飊飋飌飍飏飐飔飖飗飛飜飝飠飡飢飣飤�飥飦飩飪飫飬飭飮飯飰飱飲飳飴飵飶飷飸飹飺飻飼飽飾飿餀餁餂餃餄餅餆餇铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔�".split("");
      for (j3 = 0; j3 != D2[239].length; ++j3) if (D2[239][j3].charCodeAt(0) !== 65533) {
        e3[D2[239][j3]] = 61184 + j3;
        d3[61184 + j3] = D2[239][j3];
      }
      D2[240] = "����������������������������������������������������������������餈餉養餋餌餎餏餑餒餓餔餕餖餗餘餙餚餛餜餝餞餟餠餡餢餣餤餥餦餧館餩餪餫餬餭餯餰餱餲餳餴餵餶餷餸餹餺餻餼餽餾餿饀饁饂饃饄饅饆饇饈饉�饊饋饌饍饎饏饐饑饒饓饖饗饘饙饚饛饜饝饞饟饠饡饢饤饦饳饸饹饻饾馂馃馉稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙�".split("");
      for (j3 = 0; j3 != D2[240].length; ++j3) if (D2[240][j3].charCodeAt(0) !== 65533) {
        e3[D2[240][j3]] = 61440 + j3;
        d3[61440 + j3] = D2[240][j3];
      }
      D2[241] = "����������������������������������������������������������������馌馎馚馛馜馝馞馟馠馡馢馣馤馦馧馩馪馫馬馭馮馯馰馱馲馳馴馵馶馷馸馹馺馻馼馽馾馿駀駁駂駃駄駅駆駇駈駉駊駋駌駍駎駏駐駑駒駓駔駕駖駗駘�駙駚駛駜駝駞駟駠駡駢駣駤駥駦駧駨駩駪駫駬駭駮駯駰駱駲駳駴駵駶駷駸駹瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃�".split("");
      for (j3 = 0; j3 != D2[241].length; ++j3) if (D2[241][j3].charCodeAt(0) !== 65533) {
        e3[D2[241][j3]] = 61696 + j3;
        d3[61696 + j3] = D2[241][j3];
      }
      D2[242] = "����������������������������������������������������������������駺駻駼駽駾駿騀騁騂騃騄騅騆騇騈騉騊騋騌騍騎騏騐騑騒験騔騕騖騗騘騙騚騛騜騝騞騟騠騡騢騣騤騥騦騧騨騩騪騫騬騭騮騯騰騱騲騳騴騵騶騷騸�騹騺騻騼騽騾騿驀驁驂驃驄驅驆驇驈驉驊驋驌驍驎驏驐驑驒驓驔驕驖驗驘驙颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒�".split("");
      for (j3 = 0; j3 != D2[242].length; ++j3) if (D2[242][j3].charCodeAt(0) !== 65533) {
        e3[D2[242][j3]] = 61952 + j3;
        d3[61952 + j3] = D2[242][j3];
      }
      D2[243] = "����������������������������������������������������������������驚驛驜驝驞驟驠驡驢驣驤驥驦驧驨驩驪驫驲骃骉骍骎骔骕骙骦骩骪骫骬骭骮骯骲骳骴骵骹骻骽骾骿髃髄髆髇髈髉髊髍髎髏髐髒體髕髖髗髙髚髛髜�髝髞髠髢髣髤髥髧髨髩髪髬髮髰髱髲髳髴髵髶髷髸髺髼髽髾髿鬀鬁鬂鬄鬅鬆蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋�".split("");
      for (j3 = 0; j3 != D2[243].length; ++j3) if (D2[243][j3].charCodeAt(0) !== 65533) {
        e3[D2[243][j3]] = 62208 + j3;
        d3[62208 + j3] = D2[243][j3];
      }
      D2[244] = "����������������������������������������������������������������鬇鬉鬊鬋鬌鬍鬎鬐鬑鬒鬔鬕鬖鬗鬘鬙鬚鬛鬜鬝鬞鬠鬡鬢鬤鬥鬦鬧鬨鬩鬪鬫鬬鬭鬮鬰鬱鬳鬴鬵鬶鬷鬸鬹鬺鬽鬾鬿魀魆魊魋魌魎魐魒魓魕魖魗魘魙魚�魛魜魝魞魟魠魡魢魣魤魥魦魧魨魩魪魫魬魭魮魯魰魱魲魳魴魵魶魷魸魹魺魻簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤�".split("");
      for (j3 = 0; j3 != D2[244].length; ++j3) if (D2[244][j3].charCodeAt(0) !== 65533) {
        e3[D2[244][j3]] = 62464 + j3;
        d3[62464 + j3] = D2[244][j3];
      }
      D2[245] = "����������������������������������������������������������������魼魽魾魿鮀鮁鮂鮃鮄鮅鮆鮇鮈鮉鮊鮋鮌鮍鮎鮏鮐鮑鮒鮓鮔鮕鮖鮗鮘鮙鮚鮛鮜鮝鮞鮟鮠鮡鮢鮣鮤鮥鮦鮧鮨鮩鮪鮫鮬鮭鮮鮯鮰鮱鮲鮳鮴鮵鮶鮷鮸鮹鮺�鮻鮼鮽鮾鮿鯀鯁鯂鯃鯄鯅鯆鯇鯈鯉鯊鯋鯌鯍鯎鯏鯐鯑鯒鯓鯔鯕鯖鯗鯘鯙鯚鯛酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜�".split("");
      for (j3 = 0; j3 != D2[245].length; ++j3) if (D2[245][j3].charCodeAt(0) !== 65533) {
        e3[D2[245][j3]] = 62720 + j3;
        d3[62720 + j3] = D2[245][j3];
      }
      D2[246] = "����������������������������������������������������������������鯜鯝鯞鯟鯠鯡鯢鯣鯤鯥鯦鯧鯨鯩鯪鯫鯬鯭鯮鯯鯰鯱鯲鯳鯴鯵鯶鯷鯸鯹鯺鯻鯼鯽鯾鯿鰀鰁鰂鰃鰄鰅鰆鰇鰈鰉鰊鰋鰌鰍鰎鰏鰐鰑鰒鰓鰔鰕鰖鰗鰘鰙鰚�鰛鰜鰝鰞鰟鰠鰡鰢鰣鰤鰥鰦鰧鰨鰩鰪鰫鰬鰭鰮鰯鰰鰱鰲鰳鰴鰵鰶鰷鰸鰹鰺鰻觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋�".split("");
      for (j3 = 0; j3 != D2[246].length; ++j3) if (D2[246][j3].charCodeAt(0) !== 65533) {
        e3[D2[246][j3]] = 62976 + j3;
        d3[62976 + j3] = D2[246][j3];
      }
      D2[247] = "����������������������������������������������������������������鰼鰽鰾鰿鱀鱁鱂鱃鱄鱅鱆鱇鱈鱉鱊鱋鱌鱍鱎鱏鱐鱑鱒鱓鱔鱕鱖鱗鱘鱙鱚鱛鱜鱝鱞鱟鱠鱡鱢鱣鱤鱥鱦鱧鱨鱩鱪鱫鱬鱭鱮鱯鱰鱱鱲鱳鱴鱵鱶鱷鱸鱹鱺�鱻鱽鱾鲀鲃鲄鲉鲊鲌鲏鲓鲖鲗鲘鲙鲝鲪鲬鲯鲹鲾鲿鳀鳁鳂鳈鳉鳑鳒鳚鳛鳠鳡鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄�".split("");
      for (j3 = 0; j3 != D2[247].length; ++j3) if (D2[247][j3].charCodeAt(0) !== 65533) {
        e3[D2[247][j3]] = 63232 + j3;
        d3[63232 + j3] = D2[247][j3];
      }
      D2[248] = "����������������������������������������������������������������鳣鳤鳥鳦鳧鳨鳩鳪鳫鳬鳭鳮鳯鳰鳱鳲鳳鳴鳵鳶鳷鳸鳹鳺鳻鳼鳽鳾鳿鴀鴁鴂鴃鴄鴅鴆鴇鴈鴉鴊鴋鴌鴍鴎鴏鴐鴑鴒鴓鴔鴕鴖鴗鴘鴙鴚鴛鴜鴝鴞鴟鴠鴡�鴢鴣鴤鴥鴦鴧鴨鴩鴪鴫鴬鴭鴮鴯鴰鴱鴲鴳鴴鴵鴶鴷鴸鴹鴺鴻鴼鴽鴾鴿鵀鵁鵂�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[248].length; ++j3) if (D2[248][j3].charCodeAt(0) !== 65533) {
        e3[D2[248][j3]] = 63488 + j3;
        d3[63488 + j3] = D2[248][j3];
      }
      D2[249] = "����������������������������������������������������������������鵃鵄鵅鵆鵇鵈鵉鵊鵋鵌鵍鵎鵏鵐鵑鵒鵓鵔鵕鵖鵗鵘鵙鵚鵛鵜鵝鵞鵟鵠鵡鵢鵣鵤鵥鵦鵧鵨鵩鵪鵫鵬鵭鵮鵯鵰鵱鵲鵳鵴鵵鵶鵷鵸鵹鵺鵻鵼鵽鵾鵿鶀鶁�鶂鶃鶄鶅鶆鶇鶈鶉鶊鶋鶌鶍鶎鶏鶐鶑鶒鶓鶔鶕鶖鶗鶘鶙鶚鶛鶜鶝鶞鶟鶠鶡鶢�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[249].length; ++j3) if (D2[249][j3].charCodeAt(0) !== 65533) {
        e3[D2[249][j3]] = 63744 + j3;
        d3[63744 + j3] = D2[249][j3];
      }
      D2[250] = "����������������������������������������������������������������鶣鶤鶥鶦鶧鶨鶩鶪鶫鶬鶭鶮鶯鶰鶱鶲鶳鶴鶵鶶鶷鶸鶹鶺鶻鶼鶽鶾鶿鷀鷁鷂鷃鷄鷅鷆鷇鷈鷉鷊鷋鷌鷍鷎鷏鷐鷑鷒鷓鷔鷕鷖鷗鷘鷙鷚鷛鷜鷝鷞鷟鷠鷡�鷢鷣鷤鷥鷦鷧鷨鷩鷪鷫鷬鷭鷮鷯鷰鷱鷲鷳鷴鷵鷶鷷鷸鷹鷺鷻鷼鷽鷾鷿鸀鸁鸂�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[250].length; ++j3) if (D2[250][j3].charCodeAt(0) !== 65533) {
        e3[D2[250][j3]] = 64e3 + j3;
        d3[64e3 + j3] = D2[250][j3];
      }
      D2[251] = "����������������������������������������������������������������鸃鸄鸅鸆鸇鸈鸉鸊鸋鸌鸍鸎鸏鸐鸑鸒鸓鸔鸕鸖鸗鸘鸙鸚鸛鸜鸝鸞鸤鸧鸮鸰鸴鸻鸼鹀鹍鹐鹒鹓鹔鹖鹙鹝鹟鹠鹡鹢鹥鹮鹯鹲鹴鹵鹶鹷鹸鹹鹺鹻鹼鹽麀�麁麃麄麅麆麉麊麌麍麎麏麐麑麔麕麖麗麘麙麚麛麜麞麠麡麢麣麤麥麧麨麩麪�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[251].length; ++j3) if (D2[251][j3].charCodeAt(0) !== 65533) {
        e3[D2[251][j3]] = 64256 + j3;
        d3[64256 + j3] = D2[251][j3];
      }
      D2[252] = "����������������������������������������������������������������麫麬麭麮麯麰麱麲麳麵麶麷麹麺麼麿黀黁黂黃黅黆黇黈黊黋黌黐黒黓黕黖黗黙黚點黡黣黤黦黨黫黬黭黮黰黱黲黳黴黵黶黷黸黺黽黿鼀鼁鼂鼃鼄鼅�鼆鼇鼈鼉鼊鼌鼏鼑鼒鼔鼕鼖鼘鼚鼛鼜鼝鼞鼟鼡鼣鼤鼥鼦鼧鼨鼩鼪鼫鼭鼮鼰鼱�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[252].length; ++j3) if (D2[252][j3].charCodeAt(0) !== 65533) {
        e3[D2[252][j3]] = 64512 + j3;
        d3[64512 + j3] = D2[252][j3];
      }
      D2[253] = "����������������������������������������������������������������鼲鼳鼴鼵鼶鼸鼺鼼鼿齀齁齂齃齅齆齇齈齉齊齋齌齍齎齏齒齓齔齕齖齗齘齙齚齛齜齝齞齟齠齡齢齣齤齥齦齧齨齩齪齫齬齭齮齯齰齱齲齳齴齵齶齷齸�齹齺齻齼齽齾龁龂龍龎龏龐龑龒龓龔龕龖龗龘龜龝龞龡龢龣龤龥郎凉秊裏隣�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[253].length; ++j3) if (D2[253][j3].charCodeAt(0) !== 65533) {
        e3[D2[253][j3]] = 64768 + j3;
        d3[64768 + j3] = D2[253][j3];
      }
      D2[254] = "����������������������������������������������������������������兀嗀﨎﨏﨑﨓﨔礼﨟蘒﨡﨣﨤﨧﨨﨩��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[254].length; ++j3) if (D2[254][j3].charCodeAt(0) !== 65533) {
        e3[D2[254][j3]] = 65024 + j3;
        d3[65024 + j3] = D2[254][j3];
      }
      return { "enc": e3, "dec": d3 };
    }();
    cptable2[949] = function() {
      var d3 = [], e3 = {}, D2 = [], j3;
      D2[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[0].length; ++j3) if (D2[0][j3].charCodeAt(0) !== 65533) {
        e3[D2[0][j3]] = 0 + j3;
        d3[0 + j3] = D2[0][j3];
      }
      D2[129] = "�����������������������������������������������������������������갂갃갅갆갋갌갍갎갏갘갞갟갡갢갣갥갦갧갨갩갪갫갮갲갳갴������갵갶갷갺갻갽갾갿걁걂걃걄걅걆걇걈걉걊걌걎걏걐걑걒걓걕������걖걗걙걚걛걝걞걟걠걡걢걣걤걥걦걧걨걩걪걫걬걭걮걯걲걳걵걶걹걻걼걽걾걿겂겇겈겍겎겏겑겒겓겕겖겗겘겙겚겛겞겢겣겤겥겦겧겫겭겮겱겲겳겴겵겶겷겺겾겿곀곂곃곅곆곇곉곊곋곍곎곏곐곑곒곓곔곖곘곙곚곛곜곝곞곟곢곣곥곦곩곫곭곮곲곴곷곸곹곺곻곾곿괁괂괃괅괇괈괉괊괋괎괐괒괓�".split("");
      for (j3 = 0; j3 != D2[129].length; ++j3) if (D2[129][j3].charCodeAt(0) !== 65533) {
        e3[D2[129][j3]] = 33024 + j3;
        d3[33024 + j3] = D2[129][j3];
      }
      D2[130] = "�����������������������������������������������������������������괔괕괖괗괙괚괛괝괞괟괡괢괣괤괥괦괧괨괪괫괮괯괰괱괲괳������괶괷괹괺괻괽괾괿굀굁굂굃굆굈굊굋굌굍굎굏굑굒굓굕굖굗������굙굚굛굜굝굞굟굠굢굤굥굦굧굨굩굪굫굮굯굱굲굷굸굹굺굾궀궃궄궅궆궇궊궋궍궎궏궑궒궓궔궕궖궗궘궙궚궛궞궟궠궡궢궣궥궦궧궨궩궪궫궬궭궮궯궰궱궲궳궴궵궶궸궹궺궻궼궽궾궿귂귃귅귆귇귉귊귋귌귍귎귏귒귔귕귖귗귘귙귚귛귝귞귟귡귢귣귥귦귧귨귩귪귫귬귭귮귯귰귱귲귳귴귵귶귷�".split("");
      for (j3 = 0; j3 != D2[130].length; ++j3) if (D2[130][j3].charCodeAt(0) !== 65533) {
        e3[D2[130][j3]] = 33280 + j3;
        d3[33280 + j3] = D2[130][j3];
      }
      D2[131] = "�����������������������������������������������������������������귺귻귽귾긂긃긄긅긆긇긊긌긎긏긐긑긒긓긕긖긗긘긙긚긛긜������긝긞긟긠긡긢긣긤긥긦긧긨긩긪긫긬긭긮긯긲긳긵긶긹긻긼������긽긾긿깂깄깇깈깉깋깏깑깒깓깕깗깘깙깚깛깞깢깣깤깦깧깪깫깭깮깯깱깲깳깴깵깶깷깺깾깿꺀꺁꺂꺃꺆꺇꺈꺉꺊꺋꺍꺎꺏꺐꺑꺒꺓꺔꺕꺖꺗꺘꺙꺚꺛꺜꺝꺞꺟꺠꺡꺢꺣꺤꺥꺦꺧꺨꺩꺪꺫꺬꺭꺮꺯꺰꺱꺲꺳꺴꺵꺶꺷꺸꺹꺺꺻꺿껁껂껃껅껆껇껈껉껊껋껎껒껓껔껕껖껗껚껛껝껞껟껠껡껢껣껤껥�".split("");
      for (j3 = 0; j3 != D2[131].length; ++j3) if (D2[131][j3].charCodeAt(0) !== 65533) {
        e3[D2[131][j3]] = 33536 + j3;
        d3[33536 + j3] = D2[131][j3];
      }
      D2[132] = "�����������������������������������������������������������������껦껧껩껪껬껮껯껰껱껲껳껵껶껷껹껺껻껽껾껿꼀꼁꼂꼃꼄꼅������꼆꼉꼊꼋꼌꼎꼏꼑꼒꼓꼔꼕꼖꼗꼘꼙꼚꼛꼜꼝꼞꼟꼠꼡꼢꼣������꼤꼥꼦꼧꼨꼩꼪꼫꼮꼯꼱꼳꼵꼶꼷꼸꼹꼺꼻꼾꽀꽄꽅꽆꽇꽊꽋꽌꽍꽎꽏꽑꽒꽓꽔꽕꽖꽗꽘꽙꽚꽛꽞꽟꽠꽡꽢꽣꽦꽧꽨꽩꽪꽫꽬꽭꽮꽯꽰꽱꽲꽳꽴꽵꽶꽷꽸꽺꽻꽼꽽꽾꽿꾁꾂꾃꾅꾆꾇꾉꾊꾋꾌꾍꾎꾏꾒꾓꾔꾖꾗꾘꾙꾚꾛꾝꾞꾟꾠꾡꾢꾣꾤꾥꾦꾧꾨꾩꾪꾫꾬꾭꾮꾯꾰꾱꾲꾳꾴꾵꾶꾷꾺꾻꾽꾾�".split("");
      for (j3 = 0; j3 != D2[132].length; ++j3) if (D2[132][j3].charCodeAt(0) !== 65533) {
        e3[D2[132][j3]] = 33792 + j3;
        d3[33792 + j3] = D2[132][j3];
      }
      D2[133] = "�����������������������������������������������������������������꾿꿁꿂꿃꿄꿅꿆꿊꿌꿏꿐꿑꿒꿓꿕꿖꿗꿘꿙꿚꿛꿝꿞꿟꿠꿡������꿢꿣꿤꿥꿦꿧꿪꿫꿬꿭꿮꿯꿲꿳꿵꿶꿷꿹꿺꿻꿼꿽꿾꿿뀂뀃������뀅뀆뀇뀈뀉뀊뀋뀍뀎뀏뀑뀒뀓뀕뀖뀗뀘뀙뀚뀛뀞뀟뀠뀡뀢뀣뀤뀥뀦뀧뀩뀪뀫뀬뀭뀮뀯뀰뀱뀲뀳뀴뀵뀶뀷뀸뀹뀺뀻뀼뀽뀾뀿끀끁끂끃끆끇끉끋끍끏끐끑끒끖끘끚끛끜끞끟끠끡끢끣끤끥끦끧끨끩끪끫끬끭끮끯끰끱끲끳끴끵끶끷끸끹끺끻끾끿낁낂낃낅낆낇낈낉낊낋낎낐낒낓낔낕낖낗낛낝낞낣낤�".split("");
      for (j3 = 0; j3 != D2[133].length; ++j3) if (D2[133][j3].charCodeAt(0) !== 65533) {
        e3[D2[133][j3]] = 34048 + j3;
        d3[34048 + j3] = D2[133][j3];
      }
      D2[134] = "�����������������������������������������������������������������낥낦낧낪낰낲낶낷낹낺낻낽낾낿냀냁냂냃냆냊냋냌냍냎냏냒������냓냕냖냗냙냚냛냜냝냞냟냡냢냣냤냦냧냨냩냪냫냬냭냮냯냰������냱냲냳냴냵냶냷냸냹냺냻냼냽냾냿넀넁넂넃넄넅넆넇넊넍넎넏넑넔넕넖넗넚넞넟넠넡넢넦넧넩넪넫넭넮넯넰넱넲넳넶넺넻넼넽넾넿녂녃녅녆녇녉녊녋녌녍녎녏녒녓녖녗녙녚녛녝녞녟녡녢녣녤녥녦녧녨녩녪녫녬녭녮녯녰녱녲녳녴녵녶녷녺녻녽녾녿놁놃놄놅놆놇놊놌놎놏놐놑놕놖놗놙놚놛놝�".split("");
      for (j3 = 0; j3 != D2[134].length; ++j3) if (D2[134][j3].charCodeAt(0) !== 65533) {
        e3[D2[134][j3]] = 34304 + j3;
        d3[34304 + j3] = D2[134][j3];
      }
      D2[135] = "�����������������������������������������������������������������놞놟놠놡놢놣놤놥놦놧놩놪놫놬놭놮놯놰놱놲놳놴놵놶놷놸������놹놺놻놼놽놾놿뇀뇁뇂뇃뇄뇅뇆뇇뇈뇉뇊뇋뇍뇎뇏뇑뇒뇓뇕������뇖뇗뇘뇙뇚뇛뇞뇠뇡뇢뇣뇤뇥뇦뇧뇪뇫뇭뇮뇯뇱뇲뇳뇴뇵뇶뇷뇸뇺뇼뇾뇿눀눁눂눃눆눇눉눊눍눎눏눐눑눒눓눖눘눚눛눜눝눞눟눡눢눣눤눥눦눧눨눩눪눫눬눭눮눯눰눱눲눳눵눶눷눸눹눺눻눽눾눿뉀뉁뉂뉃뉄뉅뉆뉇뉈뉉뉊뉋뉌뉍뉎뉏뉐뉑뉒뉓뉔뉕뉖뉗뉙뉚뉛뉝뉞뉟뉡뉢뉣뉤뉥뉦뉧뉪뉫뉬뉭뉮�".split("");
      for (j3 = 0; j3 != D2[135].length; ++j3) if (D2[135][j3].charCodeAt(0) !== 65533) {
        e3[D2[135][j3]] = 34560 + j3;
        d3[34560 + j3] = D2[135][j3];
      }
      D2[136] = "�����������������������������������������������������������������뉯뉰뉱뉲뉳뉶뉷뉸뉹뉺뉻뉽뉾뉿늀늁늂늃늆늇늈늊늋늌늍늎������늏늒늓늕늖늗늛늜늝늞늟늢늤늧늨늩늫늭늮늯늱늲늳늵늶늷������늸늹늺늻늼늽늾늿닀닁닂닃닄닅닆닇닊닋닍닎닏닑닓닔닕닖닗닚닜닞닟닠닡닣닧닩닪닰닱닲닶닼닽닾댂댃댅댆댇댉댊댋댌댍댎댏댒댖댗댘댙댚댛댝댞댟댠댡댢댣댤댥댦댧댨댩댪댫댬댭댮댯댰댱댲댳댴댵댶댷댸댹댺댻댼댽댾댿덀덁덂덃덄덅덆덇덈덉덊덋덌덍덎덏덐덑덒덓덗덙덚덝덠덡덢덣�".split("");
      for (j3 = 0; j3 != D2[136].length; ++j3) if (D2[136][j3].charCodeAt(0) !== 65533) {
        e3[D2[136][j3]] = 34816 + j3;
        d3[34816 + j3] = D2[136][j3];
      }
      D2[137] = "�����������������������������������������������������������������덦덨덪덬덭덯덲덳덵덶덷덹덺덻덼덽덾덿뎂뎆뎇뎈뎉뎊뎋뎍������뎎뎏뎑뎒뎓뎕뎖뎗뎘뎙뎚뎛뎜뎝뎞뎟뎢뎣뎤뎥뎦뎧뎩뎪뎫뎭������뎮뎯뎰뎱뎲뎳뎴뎵뎶뎷뎸뎹뎺뎻뎼뎽뎾뎿돀돁돂돃돆돇돉돊돍돏돑돒돓돖돘돚돜돞돟돡돢돣돥돦돧돩돪돫돬돭돮돯돰돱돲돳돴돵돶돷돸돹돺돻돽돾돿됀됁됂됃됄됅됆됇됈됉됊됋됌됍됎됏됑됒됓됔됕됖됗됙됚됛됝됞됟됡됢됣됤됥됦됧됪됬됭됮됯됰됱됲됳됵됶됷됸됹됺됻됼됽됾됿둀둁둂둃둄�".split("");
      for (j3 = 0; j3 != D2[137].length; ++j3) if (D2[137][j3].charCodeAt(0) !== 65533) {
        e3[D2[137][j3]] = 35072 + j3;
        d3[35072 + j3] = D2[137][j3];
      }
      D2[138] = "�����������������������������������������������������������������둅둆둇둈둉둊둋둌둍둎둏둒둓둕둖둗둙둚둛둜둝둞둟둢둤둦������둧둨둩둪둫둭둮둯둰둱둲둳둴둵둶둷둸둹둺둻둼둽둾둿뒁뒂������뒃뒄뒅뒆뒇뒉뒊뒋뒌뒍뒎뒏뒐뒑뒒뒓뒔뒕뒖뒗뒘뒙뒚뒛뒜뒞뒟뒠뒡뒢뒣뒥뒦뒧뒩뒪뒫뒭뒮뒯뒰뒱뒲뒳뒴뒶뒸뒺뒻뒼뒽뒾뒿듁듂듃듅듆듇듉듊듋듌듍듎듏듑듒듓듔듖듗듘듙듚듛듞듟듡듢듥듧듨듩듪듫듮듰듲듳듴듵듶듷듹듺듻듼듽듾듿딀딁딂딃딄딅딆딇딈딉딊딋딌딍딎딏딐딑딒딓딖딗딙딚딝�".split("");
      for (j3 = 0; j3 != D2[138].length; ++j3) if (D2[138][j3].charCodeAt(0) !== 65533) {
        e3[D2[138][j3]] = 35328 + j3;
        d3[35328 + j3] = D2[138][j3];
      }
      D2[139] = "�����������������������������������������������������������������딞딟딠딡딢딣딦딫딬딭딮딯딲딳딵딶딷딹딺딻딼딽딾딿땂땆������땇땈땉땊땎땏땑땒땓땕땖땗땘땙땚땛땞땢땣땤땥땦땧땨땩땪������땫땬땭땮땯땰땱땲땳땴땵땶땷땸땹땺땻땼땽땾땿떀떁떂떃떄떅떆떇떈떉떊떋떌떍떎떏떐떑떒떓떔떕떖떗떘떙떚떛떜떝떞떟떢떣떥떦떧떩떬떭떮떯떲떶떷떸떹떺떾떿뗁뗂뗃뗅뗆뗇뗈뗉뗊뗋뗎뗒뗓뗔뗕뗖뗗뗙뗚뗛뗜뗝뗞뗟뗠뗡뗢뗣뗤뗥뗦뗧뗨뗩뗪뗫뗭뗮뗯뗰뗱뗲뗳뗴뗵뗶뗷뗸뗹뗺뗻뗼뗽뗾뗿�".split("");
      for (j3 = 0; j3 != D2[139].length; ++j3) if (D2[139][j3].charCodeAt(0) !== 65533) {
        e3[D2[139][j3]] = 35584 + j3;
        d3[35584 + j3] = D2[139][j3];
      }
      D2[140] = "�����������������������������������������������������������������똀똁똂똃똄똅똆똇똈똉똊똋똌똍똎똏똒똓똕똖똗똙똚똛똜똝������똞똟똠똡똢똣똤똦똧똨똩똪똫똭똮똯똰똱똲똳똵똶똷똸똹똺������똻똼똽똾똿뙀뙁뙂뙃뙄뙅뙆뙇뙉뙊뙋뙌뙍뙎뙏뙐뙑뙒뙓뙔뙕뙖뙗뙘뙙뙚뙛뙜뙝뙞뙟뙠뙡뙢뙣뙥뙦뙧뙩뙪뙫뙬뙭뙮뙯뙰뙱뙲뙳뙴뙵뙶뙷뙸뙹뙺뙻뙼뙽뙾뙿뚀뚁뚂뚃뚄뚅뚆뚇뚈뚉뚊뚋뚌뚍뚎뚏뚐뚑뚒뚓뚔뚕뚖뚗뚘뚙뚚뚛뚞뚟뚡뚢뚣뚥뚦뚧뚨뚩뚪뚭뚮뚯뚰뚲뚳뚴뚵뚶뚷뚸뚹뚺뚻뚼뚽뚾뚿뛀뛁뛂�".split("");
      for (j3 = 0; j3 != D2[140].length; ++j3) if (D2[140][j3].charCodeAt(0) !== 65533) {
        e3[D2[140][j3]] = 35840 + j3;
        d3[35840 + j3] = D2[140][j3];
      }
      D2[141] = "�����������������������������������������������������������������뛃뛄뛅뛆뛇뛈뛉뛊뛋뛌뛍뛎뛏뛐뛑뛒뛓뛕뛖뛗뛘뛙뛚뛛뛜뛝������뛞뛟뛠뛡뛢뛣뛤뛥뛦뛧뛨뛩뛪뛫뛬뛭뛮뛯뛱뛲뛳뛵뛶뛷뛹뛺������뛻뛼뛽뛾뛿뜂뜃뜄뜆뜇뜈뜉뜊뜋뜌뜍뜎뜏뜐뜑뜒뜓뜔뜕뜖뜗뜘뜙뜚뜛뜜뜝뜞뜟뜠뜡뜢뜣뜤뜥뜦뜧뜪뜫뜭뜮뜱뜲뜳뜴뜵뜶뜷뜺뜼뜽뜾뜿띀띁띂띃띅띆띇띉띊띋띍띎띏띐띑띒띓띖띗띘띙띚띛띜띝띞띟띡띢띣띥띦띧띩띪띫띬띭띮띯띲띴띶띷띸띹띺띻띾띿랁랂랃랅랆랇랈랉랊랋랎랓랔랕랚랛랝랞�".split("");
      for (j3 = 0; j3 != D2[141].length; ++j3) if (D2[141][j3].charCodeAt(0) !== 65533) {
        e3[D2[141][j3]] = 36096 + j3;
        d3[36096 + j3] = D2[141][j3];
      }
      D2[142] = "�����������������������������������������������������������������랟랡랢랣랤랥랦랧랪랮랯랰랱랲랳랶랷랹랺랻랼랽랾랿럀럁������럂럃럄럅럆럈럊럋럌럍럎럏럐럑럒럓럔럕럖럗럘럙럚럛럜럝������럞럟럠럡럢럣럤럥럦럧럨럩럪럫럮럯럱럲럳럵럶럷럸럹럺럻럾렂렃렄렅렆렊렋렍렎렏렑렒렓렔렕렖렗렚렜렞렟렠렡렢렣렦렧렩렪렫렭렮렯렰렱렲렳렶렺렻렼렽렾렿롁롂롃롅롆롇롈롉롊롋롌롍롎롏롐롒롔롕롖롗롘롙롚롛롞롟롡롢롣롥롦롧롨롩롪롫롮롰롲롳롴롵롶롷롹롺롻롽롾롿뢀뢁뢂뢃뢄�".split("");
      for (j3 = 0; j3 != D2[142].length; ++j3) if (D2[142][j3].charCodeAt(0) !== 65533) {
        e3[D2[142][j3]] = 36352 + j3;
        d3[36352 + j3] = D2[142][j3];
      }
      D2[143] = "�����������������������������������������������������������������뢅뢆뢇뢈뢉뢊뢋뢌뢎뢏뢐뢑뢒뢓뢔뢕뢖뢗뢘뢙뢚뢛뢜뢝뢞뢟������뢠뢡뢢뢣뢤뢥뢦뢧뢩뢪뢫뢬뢭뢮뢯뢱뢲뢳뢵뢶뢷뢹뢺뢻뢼뢽������뢾뢿룂룄룆룇룈룉룊룋룍룎룏룑룒룓룕룖룗룘룙룚룛룜룞룠룢룣룤룥룦룧룪룫룭룮룯룱룲룳룴룵룶룷룺룼룾룿뤀뤁뤂뤃뤅뤆뤇뤈뤉뤊뤋뤌뤍뤎뤏뤐뤑뤒뤓뤔뤕뤖뤗뤙뤚뤛뤜뤝뤞뤟뤡뤢뤣뤤뤥뤦뤧뤨뤩뤪뤫뤬뤭뤮뤯뤰뤱뤲뤳뤴뤵뤶뤷뤸뤹뤺뤻뤾뤿륁륂륃륅륆륇륈륉륊륋륍륎륐륒륓륔륕륖륗�".split("");
      for (j3 = 0; j3 != D2[143].length; ++j3) if (D2[143][j3].charCodeAt(0) !== 65533) {
        e3[D2[143][j3]] = 36608 + j3;
        d3[36608 + j3] = D2[143][j3];
      }
      D2[144] = "�����������������������������������������������������������������륚륛륝륞륟륡륢륣륤륥륦륧륪륬륮륯륰륱륲륳륶륷륹륺륻륽������륾륿릀릁릂릃릆릈릋릌릏릐릑릒릓릔릕릖릗릘릙릚릛릜릝릞������릟릠릡릢릣릤릥릦릧릨릩릪릫릮릯릱릲릳릵릶릷릸릹릺릻릾맀맂맃맄맅맆맇맊맋맍맓맔맕맖맗맚맜맟맠맢맦맧맩맪맫맭맮맯맰맱맲맳맶맻맼맽맾맿먂먃먄먅먆먇먉먊먋먌먍먎먏먐먑먒먓먔먖먗먘먙먚먛먜먝먞먟먠먡먢먣먤먥먦먧먨먩먪먫먬먭먮먯먰먱먲먳먴먵먶먷먺먻먽먾먿멁멃멄멅멆�".split("");
      for (j3 = 0; j3 != D2[144].length; ++j3) if (D2[144][j3].charCodeAt(0) !== 65533) {
        e3[D2[144][j3]] = 36864 + j3;
        d3[36864 + j3] = D2[144][j3];
      }
      D2[145] = "�����������������������������������������������������������������멇멊멌멏멐멑멒멖멗멙멚멛멝멞멟멠멡멢멣멦멪멫멬멭멮멯������멲멳멵멶멷멹멺멻멼멽멾멿몀몁몂몆몈몉몊몋몍몎몏몐몑몒������몓몔몕몖몗몘몙몚몛몜몝몞몟몠몡몢몣몤몥몦몧몪몭몮몯몱몳몴몵몶몷몺몼몾몿뫀뫁뫂뫃뫅뫆뫇뫉뫊뫋뫌뫍뫎뫏뫐뫑뫒뫓뫔뫕뫖뫗뫚뫛뫜뫝뫞뫟뫠뫡뫢뫣뫤뫥뫦뫧뫨뫩뫪뫫뫬뫭뫮뫯뫰뫱뫲뫳뫴뫵뫶뫷뫸뫹뫺뫻뫽뫾뫿묁묂묃묅묆묇묈묉묊묋묌묎묐묒묓묔묕묖묗묙묚묛묝묞묟묡묢묣묤묥묦묧�".split("");
      for (j3 = 0; j3 != D2[145].length; ++j3) if (D2[145][j3].charCodeAt(0) !== 65533) {
        e3[D2[145][j3]] = 37120 + j3;
        d3[37120 + j3] = D2[145][j3];
      }
      D2[146] = "�����������������������������������������������������������������묨묪묬묭묮묯묰묱묲묳묷묹묺묿뭀뭁뭂뭃뭆뭈뭊뭋뭌뭎뭑뭒������뭓뭕뭖뭗뭙뭚뭛뭜뭝뭞뭟뭠뭢뭤뭥뭦뭧뭨뭩뭪뭫뭭뭮뭯뭰뭱������뭲뭳뭴뭵뭶뭷뭸뭹뭺뭻뭼뭽뭾뭿뮀뮁뮂뮃뮄뮅뮆뮇뮉뮊뮋뮍뮎뮏뮑뮒뮓뮔뮕뮖뮗뮘뮙뮚뮛뮜뮝뮞뮟뮠뮡뮢뮣뮥뮦뮧뮩뮪뮫뮭뮮뮯뮰뮱뮲뮳뮵뮶뮸뮹뮺뮻뮼뮽뮾뮿믁믂믃믅믆믇믉믊믋믌믍믎믏믑믒믔믕믖믗믘믙믚믛믜믝믞믟믠믡믢믣믤믥믦믧믨믩믪믫믬믭믮믯믰믱믲믳믴믵믶믷믺믻믽믾밁�".split("");
      for (j3 = 0; j3 != D2[146].length; ++j3) if (D2[146][j3].charCodeAt(0) !== 65533) {
        e3[D2[146][j3]] = 37376 + j3;
        d3[37376 + j3] = D2[146][j3];
      }
      D2[147] = "�����������������������������������������������������������������밃밄밅밆밇밊밎밐밒밓밙밚밠밡밢밣밦밨밪밫밬밮밯밲밳밵������밶밷밹밺밻밼밽밾밿뱂뱆뱇뱈뱊뱋뱎뱏뱑뱒뱓뱔뱕뱖뱗뱘뱙������뱚뱛뱜뱞뱟뱠뱡뱢뱣뱤뱥뱦뱧뱨뱩뱪뱫뱬뱭뱮뱯뱰뱱뱲뱳뱴뱵뱶뱷뱸뱹뱺뱻뱼뱽뱾뱿벀벁벂벃벆벇벉벊벍벏벐벑벒벓벖벘벛벜벝벞벟벢벣벥벦벩벪벫벬벭벮벯벲벶벷벸벹벺벻벾벿볁볂볃볅볆볇볈볉볊볋볌볎볒볓볔볖볗볙볚볛볝볞볟볠볡볢볣볤볥볦볧볨볩볪볫볬볭볮볯볰볱볲볳볷볹볺볻볽�".split("");
      for (j3 = 0; j3 != D2[147].length; ++j3) if (D2[147][j3].charCodeAt(0) !== 65533) {
        e3[D2[147][j3]] = 37632 + j3;
        d3[37632 + j3] = D2[147][j3];
      }
      D2[148] = "�����������������������������������������������������������������볾볿봀봁봂봃봆봈봊봋봌봍봎봏봑봒봓봕봖봗봘봙봚봛봜봝������봞봟봠봡봢봣봥봦봧봨봩봪봫봭봮봯봰봱봲봳봴봵봶봷봸봹������봺봻봼봽봾봿뵁뵂뵃뵄뵅뵆뵇뵊뵋뵍뵎뵏뵑뵒뵓뵔뵕뵖뵗뵚뵛뵜뵝뵞뵟뵠뵡뵢뵣뵥뵦뵧뵩뵪뵫뵬뵭뵮뵯뵰뵱뵲뵳뵴뵵뵶뵷뵸뵹뵺뵻뵼뵽뵾뵿붂붃붅붆붋붌붍붎붏붒붔붖붗붘붛붝붞붟붠붡붢붣붥붦붧붨붩붪붫붬붭붮붯붱붲붳붴붵붶붷붹붺붻붼붽붾붿뷀뷁뷂뷃뷄뷅뷆뷇뷈뷉뷊뷋뷌뷍뷎뷏뷐뷑�".split("");
      for (j3 = 0; j3 != D2[148].length; ++j3) if (D2[148][j3].charCodeAt(0) !== 65533) {
        e3[D2[148][j3]] = 37888 + j3;
        d3[37888 + j3] = D2[148][j3];
      }
      D2[149] = "�����������������������������������������������������������������뷒뷓뷖뷗뷙뷚뷛뷝뷞뷟뷠뷡뷢뷣뷤뷥뷦뷧뷨뷪뷫뷬뷭뷮뷯뷱������뷲뷳뷵뷶뷷뷹뷺뷻뷼뷽뷾뷿븁븂븄븆븇븈븉븊븋븎븏븑븒븓������븕븖븗븘븙븚븛븞븠븡븢븣븤븥븦븧븨븩븪븫븬븭븮븯븰븱븲븳븴븵븶븷븸븹븺븻븼븽븾븿빀빁빂빃빆빇빉빊빋빍빏빐빑빒빓빖빘빜빝빞빟빢빣빥빦빧빩빫빬빭빮빯빲빶빷빸빹빺빾빿뺁뺂뺃뺅뺆뺇뺈뺉뺊뺋뺎뺒뺓뺔뺕뺖뺗뺚뺛뺜뺝뺞뺟뺠뺡뺢뺣뺤뺥뺦뺧뺩뺪뺫뺬뺭뺮뺯뺰뺱뺲뺳뺴뺵뺶뺷�".split("");
      for (j3 = 0; j3 != D2[149].length; ++j3) if (D2[149][j3].charCodeAt(0) !== 65533) {
        e3[D2[149][j3]] = 38144 + j3;
        d3[38144 + j3] = D2[149][j3];
      }
      D2[150] = "�����������������������������������������������������������������뺸뺹뺺뺻뺼뺽뺾뺿뻀뻁뻂뻃뻄뻅뻆뻇뻈뻉뻊뻋뻌뻍뻎뻏뻒뻓������뻕뻖뻙뻚뻛뻜뻝뻞뻟뻡뻢뻦뻧뻨뻩뻪뻫뻭뻮뻯뻰뻱뻲뻳뻴뻵������뻶뻷뻸뻹뻺뻻뻼뻽뻾뻿뼀뼂뼃뼄뼅뼆뼇뼊뼋뼌뼍뼎뼏뼐뼑뼒뼓뼔뼕뼖뼗뼚뼞뼟뼠뼡뼢뼣뼤뼥뼦뼧뼨뼩뼪뼫뼬뼭뼮뼯뼰뼱뼲뼳뼴뼵뼶뼷뼸뼹뼺뼻뼼뼽뼾뼿뽂뽃뽅뽆뽇뽉뽊뽋뽌뽍뽎뽏뽒뽓뽔뽖뽗뽘뽙뽚뽛뽜뽝뽞뽟뽠뽡뽢뽣뽤뽥뽦뽧뽨뽩뽪뽫뽬뽭뽮뽯뽰뽱뽲뽳뽴뽵뽶뽷뽸뽹뽺뽻뽼뽽뽾뽿뾀뾁뾂�".split("");
      for (j3 = 0; j3 != D2[150].length; ++j3) if (D2[150][j3].charCodeAt(0) !== 65533) {
        e3[D2[150][j3]] = 38400 + j3;
        d3[38400 + j3] = D2[150][j3];
      }
      D2[151] = "�����������������������������������������������������������������뾃뾄뾅뾆뾇뾈뾉뾊뾋뾌뾍뾎뾏뾐뾑뾒뾓뾕뾖뾗뾘뾙뾚뾛뾜뾝������뾞뾟뾠뾡뾢뾣뾤뾥뾦뾧뾨뾩뾪뾫뾬뾭뾮뾯뾱뾲뾳뾴뾵뾶뾷뾸������뾹뾺뾻뾼뾽뾾뾿뿀뿁뿂뿃뿄뿆뿇뿈뿉뿊뿋뿎뿏뿑뿒뿓뿕뿖뿗뿘뿙뿚뿛뿝뿞뿠뿢뿣뿤뿥뿦뿧뿨뿩뿪뿫뿬뿭뿮뿯뿰뿱뿲뿳뿴뿵뿶뿷뿸뿹뿺뿻뿼뿽뿾뿿쀀쀁쀂쀃쀄쀅쀆쀇쀈쀉쀊쀋쀌쀍쀎쀏쀐쀑쀒쀓쀔쀕쀖쀗쀘쀙쀚쀛쀜쀝쀞쀟쀠쀡쀢쀣쀤쀥쀦쀧쀨쀩쀪쀫쀬쀭쀮쀯쀰쀱쀲쀳쀴쀵쀶쀷쀸쀹쀺쀻쀽쀾쀿�".split("");
      for (j3 = 0; j3 != D2[151].length; ++j3) if (D2[151][j3].charCodeAt(0) !== 65533) {
        e3[D2[151][j3]] = 38656 + j3;
        d3[38656 + j3] = D2[151][j3];
      }
      D2[152] = "�����������������������������������������������������������������쁀쁁쁂쁃쁄쁅쁆쁇쁈쁉쁊쁋쁌쁍쁎쁏쁐쁒쁓쁔쁕쁖쁗쁙쁚쁛������쁝쁞쁟쁡쁢쁣쁤쁥쁦쁧쁪쁫쁬쁭쁮쁯쁰쁱쁲쁳쁴쁵쁶쁷쁸쁹������쁺쁻쁼쁽쁾쁿삀삁삂삃삄삅삆삇삈삉삊삋삌삍삎삏삒삓삕삖삗삙삚삛삜삝삞삟삢삤삦삧삨삩삪삫삮삱삲삷삸삹삺삻삾샂샃샄샆샇샊샋샍샎샏샑샒샓샔샕샖샗샚샞샟샠샡샢샣샦샧샩샪샫샭샮샯샰샱샲샳샶샸샺샻샼샽샾샿섁섂섃섅섆섇섉섊섋섌섍섎섏섑섒섓섔섖섗섘섙섚섛섡섢섥섨섩섪섫섮�".split("");
      for (j3 = 0; j3 != D2[152].length; ++j3) if (D2[152][j3].charCodeAt(0) !== 65533) {
        e3[D2[152][j3]] = 38912 + j3;
        d3[38912 + j3] = D2[152][j3];
      }
      D2[153] = "�����������������������������������������������������������������섲섳섴섵섷섺섻섽섾섿셁셂셃셄셅셆셇셊셎셏셐셑셒셓셖셗������셙셚셛셝셞셟셠셡셢셣셦셪셫셬셭셮셯셱셲셳셵셶셷셹셺셻������셼셽셾셿솀솁솂솃솄솆솇솈솉솊솋솏솑솒솓솕솗솘솙솚솛솞솠솢솣솤솦솧솪솫솭솮솯솱솲솳솴솵솶솷솸솹솺솻솼솾솿쇀쇁쇂쇃쇅쇆쇇쇉쇊쇋쇍쇎쇏쇐쇑쇒쇓쇕쇖쇙쇚쇛쇜쇝쇞쇟쇡쇢쇣쇥쇦쇧쇩쇪쇫쇬쇭쇮쇯쇲쇴쇵쇶쇷쇸쇹쇺쇻쇾쇿숁숂숃숅숆숇숈숉숊숋숎숐숒숓숔숕숖숗숚숛숝숞숡숢숣�".split("");
      for (j3 = 0; j3 != D2[153].length; ++j3) if (D2[153][j3].charCodeAt(0) !== 65533) {
        e3[D2[153][j3]] = 39168 + j3;
        d3[39168 + j3] = D2[153][j3];
      }
      D2[154] = "�����������������������������������������������������������������숤숥숦숧숪숬숮숰숳숵숶숷숸숹숺숻숼숽숾숿쉀쉁쉂쉃쉄쉅������쉆쉇쉉쉊쉋쉌쉍쉎쉏쉒쉓쉕쉖쉗쉙쉚쉛쉜쉝쉞쉟쉡쉢쉣쉤쉦������쉧쉨쉩쉪쉫쉮쉯쉱쉲쉳쉵쉶쉷쉸쉹쉺쉻쉾슀슂슃슄슅슆슇슊슋슌슍슎슏슑슒슓슔슕슖슗슙슚슜슞슟슠슡슢슣슦슧슩슪슫슮슯슰슱슲슳슶슸슺슻슼슽슾슿싀싁싂싃싄싅싆싇싈싉싊싋싌싍싎싏싐싑싒싓싔싕싖싗싘싙싚싛싞싟싡싢싥싦싧싨싩싪싮싰싲싳싴싵싷싺싽싾싿쌁쌂쌃쌄쌅쌆쌇쌊쌋쌎쌏�".split("");
      for (j3 = 0; j3 != D2[154].length; ++j3) if (D2[154][j3].charCodeAt(0) !== 65533) {
        e3[D2[154][j3]] = 39424 + j3;
        d3[39424 + j3] = D2[154][j3];
      }
      D2[155] = "�����������������������������������������������������������������쌐쌑쌒쌖쌗쌙쌚쌛쌝쌞쌟쌠쌡쌢쌣쌦쌧쌪쌫쌬쌭쌮쌯쌰쌱쌲������쌳쌴쌵쌶쌷쌸쌹쌺쌻쌼쌽쌾쌿썀썁썂썃썄썆썇썈썉썊썋썌썍������썎썏썐썑썒썓썔썕썖썗썘썙썚썛썜썝썞썟썠썡썢썣썤썥썦썧썪썫썭썮썯썱썳썴썵썶썷썺썻썾썿쎀쎁쎂쎃쎅쎆쎇쎉쎊쎋쎍쎎쎏쎐쎑쎒쎓쎔쎕쎖쎗쎘쎙쎚쎛쎜쎝쎞쎟쎠쎡쎢쎣쎤쎥쎦쎧쎨쎩쎪쎫쎬쎭쎮쎯쎰쎱쎲쎳쎴쎵쎶쎷쎸쎹쎺쎻쎼쎽쎾쎿쏁쏂쏃쏄쏅쏆쏇쏈쏉쏊쏋쏌쏍쏎쏏쏐쏑쏒쏓쏔쏕쏖쏗쏚�".split("");
      for (j3 = 0; j3 != D2[155].length; ++j3) if (D2[155][j3].charCodeAt(0) !== 65533) {
        e3[D2[155][j3]] = 39680 + j3;
        d3[39680 + j3] = D2[155][j3];
      }
      D2[156] = "�����������������������������������������������������������������쏛쏝쏞쏡쏣쏤쏥쏦쏧쏪쏫쏬쏮쏯쏰쏱쏲쏳쏶쏷쏹쏺쏻쏼쏽쏾������쏿쐀쐁쐂쐃쐄쐅쐆쐇쐉쐊쐋쐌쐍쐎쐏쐑쐒쐓쐔쐕쐖쐗쐘쐙쐚������쐛쐜쐝쐞쐟쐠쐡쐢쐣쐥쐦쐧쐨쐩쐪쐫쐭쐮쐯쐱쐲쐳쐵쐶쐷쐸쐹쐺쐻쐾쐿쑀쑁쑂쑃쑄쑅쑆쑇쑉쑊쑋쑌쑍쑎쑏쑐쑑쑒쑓쑔쑕쑖쑗쑘쑙쑚쑛쑜쑝쑞쑟쑠쑡쑢쑣쑦쑧쑩쑪쑫쑭쑮쑯쑰쑱쑲쑳쑶쑷쑸쑺쑻쑼쑽쑾쑿쒁쒂쒃쒄쒅쒆쒇쒈쒉쒊쒋쒌쒍쒎쒏쒐쒑쒒쒓쒕쒖쒗쒘쒙쒚쒛쒝쒞쒟쒠쒡쒢쒣쒤쒥쒦쒧쒨쒩�".split("");
      for (j3 = 0; j3 != D2[156].length; ++j3) if (D2[156][j3].charCodeAt(0) !== 65533) {
        e3[D2[156][j3]] = 39936 + j3;
        d3[39936 + j3] = D2[156][j3];
      }
      D2[157] = "�����������������������������������������������������������������쒪쒫쒬쒭쒮쒯쒰쒱쒲쒳쒴쒵쒶쒷쒹쒺쒻쒽쒾쒿쓀쓁쓂쓃쓄쓅������쓆쓇쓈쓉쓊쓋쓌쓍쓎쓏쓐쓑쓒쓓쓔쓕쓖쓗쓘쓙쓚쓛쓜쓝쓞쓟������쓠쓡쓢쓣쓤쓥쓦쓧쓨쓪쓫쓬쓭쓮쓯쓲쓳쓵쓶쓷쓹쓻쓼쓽쓾씂씃씄씅씆씇씈씉씊씋씍씎씏씑씒씓씕씖씗씘씙씚씛씝씞씟씠씡씢씣씤씥씦씧씪씫씭씮씯씱씲씳씴씵씶씷씺씼씾씿앀앁앂앃앆앇앋앏앐앑앒앖앚앛앜앟앢앣앥앦앧앩앪앫앬앭앮앯앲앶앷앸앹앺앻앾앿얁얂얃얅얆얈얉얊얋얎얐얒얓얔�".split("");
      for (j3 = 0; j3 != D2[157].length; ++j3) if (D2[157][j3].charCodeAt(0) !== 65533) {
        e3[D2[157][j3]] = 40192 + j3;
        d3[40192 + j3] = D2[157][j3];
      }
      D2[158] = "�����������������������������������������������������������������얖얙얚얛얝얞얟얡얢얣얤얥얦얧얨얪얫얬얭얮얯얰얱얲얳얶������얷얺얿엀엁엂엃엋엍엏엒엓엕엖엗엙엚엛엜엝엞엟엢엤엦엧������엨엩엪엫엯엱엲엳엵엸엹엺엻옂옃옄옉옊옋옍옎옏옑옒옓옔옕옖옗옚옝옞옟옠옡옢옣옦옧옩옪옫옯옱옲옶옸옺옼옽옾옿왂왃왅왆왇왉왊왋왌왍왎왏왒왖왗왘왙왚왛왞왟왡왢왣왤왥왦왧왨왩왪왫왭왮왰왲왳왴왵왶왷왺왻왽왾왿욁욂욃욄욅욆욇욊욌욎욏욐욑욒욓욖욗욙욚욛욝욞욟욠욡욢욣욦�".split("");
      for (j3 = 0; j3 != D2[158].length; ++j3) if (D2[158][j3].charCodeAt(0) !== 65533) {
        e3[D2[158][j3]] = 40448 + j3;
        d3[40448 + j3] = D2[158][j3];
      }
      D2[159] = "�����������������������������������������������������������������욨욪욫욬욭욮욯욲욳욵욶욷욻욼욽욾욿웂웄웆웇웈웉웊웋웎������웏웑웒웓웕웖웗웘웙웚웛웞웟웢웣웤웥웦웧웪웫웭웮웯웱웲������웳웴웵웶웷웺웻웼웾웿윀윁윂윃윆윇윉윊윋윍윎윏윐윑윒윓윖윘윚윛윜윝윞윟윢윣윥윦윧윩윪윫윬윭윮윯윲윴윶윸윹윺윻윾윿읁읂읃읅읆읇읈읉읋읎읐읙읚읛읝읞읟읡읢읣읤읥읦읧읩읪읬읭읮읯읰읱읲읳읶읷읹읺읻읿잀잁잂잆잋잌잍잏잒잓잕잙잛잜잝잞잟잢잧잨잩잪잫잮잯잱잲잳잵잶잷�".split("");
      for (j3 = 0; j3 != D2[159].length; ++j3) if (D2[159][j3].charCodeAt(0) !== 65533) {
        e3[D2[159][j3]] = 40704 + j3;
        d3[40704 + j3] = D2[159][j3];
      }
      D2[160] = "�����������������������������������������������������������������잸잹잺잻잾쟂쟃쟄쟅쟆쟇쟊쟋쟍쟏쟑쟒쟓쟔쟕쟖쟗쟙쟚쟛쟜������쟞쟟쟠쟡쟢쟣쟥쟦쟧쟩쟪쟫쟭쟮쟯쟰쟱쟲쟳쟴쟵쟶쟷쟸쟹쟺������쟻쟼쟽쟾쟿젂젃젅젆젇젉젋젌젍젎젏젒젔젗젘젙젚젛젞젟젡젢젣젥젦젧젨젩젪젫젮젰젲젳젴젵젶젷젹젺젻젽젾젿졁졂졃졄졅졆졇졊졋졎졏졐졑졒졓졕졖졗졘졙졚졛졜졝졞졟졠졡졢졣졤졥졦졧졨졩졪졫졬졭졮졯졲졳졵졶졷졹졻졼졽졾졿좂좄좈좉좊좎좏좐좑좒좓좕좖좗좘좙좚좛좜좞좠좢좣좤�".split("");
      for (j3 = 0; j3 != D2[160].length; ++j3) if (D2[160][j3].charCodeAt(0) !== 65533) {
        e3[D2[160][j3]] = 40960 + j3;
        d3[40960 + j3] = D2[160][j3];
      }
      D2[161] = "�����������������������������������������������������������������좥좦좧좩좪좫좬좭좮좯좰좱좲좳좴좵좶좷좸좹좺좻좾좿죀죁������죂죃죅죆죇죉죊죋죍죎죏죐죑죒죓죖죘죚죛죜죝죞죟죢죣죥������죦죧죨죩죪죫죬죭죮죯죰죱죲죳죴죶죷죸죹죺죻죾죿줁줂줃줇줈줉줊줋줎　、。·‥…¨〃­―∥＼∼‘’“”〔〕〈〉《》「」『』【】±×÷≠≤≥∞∴°′″℃Å￠￡￥♂♀∠⊥⌒∂∇≡≒§※☆★○●◎◇◆□■△▲▽▼→←↑↓↔〓≪≫√∽∝∵∫∬∈∋⊆⊇⊂⊃∪∩∧∨￢�".split("");
      for (j3 = 0; j3 != D2[161].length; ++j3) if (D2[161][j3].charCodeAt(0) !== 65533) {
        e3[D2[161][j3]] = 41216 + j3;
        d3[41216 + j3] = D2[161][j3];
      }
      D2[162] = "�����������������������������������������������������������������줐줒줓줔줕줖줗줙줚줛줜줝줞줟줠줡줢줣줤줥줦줧줨줩줪줫������줭줮줯줰줱줲줳줵줶줷줸줹줺줻줼줽줾줿쥀쥁쥂쥃쥄쥅쥆쥇������쥈쥉쥊쥋쥌쥍쥎쥏쥒쥓쥕쥖쥗쥙쥚쥛쥜쥝쥞쥟쥢쥤쥥쥦쥧쥨쥩쥪쥫쥭쥮쥯⇒⇔∀∃´～ˇ˘˝˚˙¸˛¡¿ː∮∑∏¤℉‰◁◀▷▶♤♠♡♥♧♣⊙◈▣◐◑▒▤▥▨▧▦▩♨☏☎☜☞¶†‡↕↗↙↖↘♭♩♪♬㉿㈜№㏇™㏂㏘℡€®������������������������".split("");
      for (j3 = 0; j3 != D2[162].length; ++j3) if (D2[162][j3].charCodeAt(0) !== 65533) {
        e3[D2[162][j3]] = 41472 + j3;
        d3[41472 + j3] = D2[162][j3];
      }
      D2[163] = "�����������������������������������������������������������������쥱쥲쥳쥵쥶쥷쥸쥹쥺쥻쥽쥾쥿즀즁즂즃즄즅즆즇즊즋즍즎즏������즑즒즓즔즕즖즗즚즜즞즟즠즡즢즣즤즥즦즧즨즩즪즫즬즭즮������즯즰즱즲즳즴즵즶즷즸즹즺즻즼즽즾즿짂짃짅짆짉짋짌짍짎짏짒짔짗짘짛！＂＃＄％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［￦］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split("");
      for (j3 = 0; j3 != D2[163].length; ++j3) if (D2[163][j3].charCodeAt(0) !== 65533) {
        e3[D2[163][j3]] = 41728 + j3;
        d3[41728 + j3] = D2[163][j3];
      }
      D2[164] = "�����������������������������������������������������������������짞짟짡짣짥짦짨짩짪짫짮짲짳짴짵짶짷짺짻짽짾짿쨁쨂쨃쨄������쨅쨆쨇쨊쨎쨏쨐쨑쨒쨓쨕쨖쨗쨙쨚쨛쨜쨝쨞쨟쨠쨡쨢쨣쨤쨥������쨦쨧쨨쨪쨫쨬쨭쨮쨯쨰쨱쨲쨳쨴쨵쨶쨷쨸쨹쨺쨻쨼쨽쨾쨿쩀쩁쩂쩃쩄쩅쩆ㄱㄲㄳㄴㄵㄶㄷㄸㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅃㅄㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣㅤㅥㅦㅧㅨㅩㅪㅫㅬㅭㅮㅯㅰㅱㅲㅳㅴㅵㅶㅷㅸㅹㅺㅻㅼㅽㅾㅿㆀㆁㆂㆃㆄㆅㆆㆇㆈㆉㆊㆋㆌㆍㆎ�".split("");
      for (j3 = 0; j3 != D2[164].length; ++j3) if (D2[164][j3].charCodeAt(0) !== 65533) {
        e3[D2[164][j3]] = 41984 + j3;
        d3[41984 + j3] = D2[164][j3];
      }
      D2[165] = "�����������������������������������������������������������������쩇쩈쩉쩊쩋쩎쩏쩑쩒쩓쩕쩖쩗쩘쩙쩚쩛쩞쩢쩣쩤쩥쩦쩧쩩쩪������쩫쩬쩭쩮쩯쩰쩱쩲쩳쩴쩵쩶쩷쩸쩹쩺쩻쩼쩾쩿쪀쪁쪂쪃쪅쪆������쪇쪈쪉쪊쪋쪌쪍쪎쪏쪐쪑쪒쪓쪔쪕쪖쪗쪙쪚쪛쪜쪝쪞쪟쪠쪡쪢쪣쪤쪥쪦쪧ⅰⅱⅲⅳⅴⅵⅶⅷⅸⅹ�����ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ�������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω�������".split("");
      for (j3 = 0; j3 != D2[165].length; ++j3) if (D2[165][j3].charCodeAt(0) !== 65533) {
        e3[D2[165][j3]] = 42240 + j3;
        d3[42240 + j3] = D2[165][j3];
      }
      D2[166] = "�����������������������������������������������������������������쪨쪩쪪쪫쪬쪭쪮쪯쪰쪱쪲쪳쪴쪵쪶쪷쪸쪹쪺쪻쪾쪿쫁쫂쫃쫅������쫆쫇쫈쫉쫊쫋쫎쫐쫒쫔쫕쫖쫗쫚쫛쫜쫝쫞쫟쫡쫢쫣쫤쫥쫦쫧������쫨쫩쫪쫫쫭쫮쫯쫰쫱쫲쫳쫵쫶쫷쫸쫹쫺쫻쫼쫽쫾쫿쬀쬁쬂쬃쬄쬅쬆쬇쬉쬊─│┌┐┘└├┬┤┴┼━┃┏┓┛┗┣┳┫┻╋┠┯┨┷┿┝┰┥┸╂┒┑┚┙┖┕┎┍┞┟┡┢┦┧┩┪┭┮┱┲┵┶┹┺┽┾╀╁╃╄╅╆╇╈╉╊���������������������������".split("");
      for (j3 = 0; j3 != D2[166].length; ++j3) if (D2[166][j3].charCodeAt(0) !== 65533) {
        e3[D2[166][j3]] = 42496 + j3;
        d3[42496 + j3] = D2[166][j3];
      }
      D2[167] = "�����������������������������������������������������������������쬋쬌쬍쬎쬏쬑쬒쬓쬕쬖쬗쬙쬚쬛쬜쬝쬞쬟쬢쬣쬤쬥쬦쬧쬨쬩������쬪쬫쬬쬭쬮쬯쬰쬱쬲쬳쬴쬵쬶쬷쬸쬹쬺쬻쬼쬽쬾쬿쭀쭂쭃쭄������쭅쭆쭇쭊쭋쭍쭎쭏쭑쭒쭓쭔쭕쭖쭗쭚쭛쭜쭞쭟쭠쭡쭢쭣쭥쭦쭧쭨쭩쭪쭫쭬㎕㎖㎗ℓ㎘㏄㎣㎤㎥㎦㎙㎚㎛㎜㎝㎞㎟㎠㎡㎢㏊㎍㎎㎏㏏㎈㎉㏈㎧㎨㎰㎱㎲㎳㎴㎵㎶㎷㎸㎹㎀㎁㎂㎃㎄㎺㎻㎼㎽㎾㎿㎐㎑㎒㎓㎔Ω㏀㏁㎊㎋㎌㏖㏅㎭㎮㎯㏛㎩㎪㎫㎬㏝㏐㏓㏃㏉㏜㏆����������������".split("");
      for (j3 = 0; j3 != D2[167].length; ++j3) if (D2[167][j3].charCodeAt(0) !== 65533) {
        e3[D2[167][j3]] = 42752 + j3;
        d3[42752 + j3] = D2[167][j3];
      }
      D2[168] = "�����������������������������������������������������������������쭭쭮쭯쭰쭱쭲쭳쭴쭵쭶쭷쭺쭻쭼쭽쭾쭿쮀쮁쮂쮃쮄쮅쮆쮇쮈������쮉쮊쮋쮌쮍쮎쮏쮐쮑쮒쮓쮔쮕쮖쮗쮘쮙쮚쮛쮝쮞쮟쮠쮡쮢쮣������쮤쮥쮦쮧쮨쮩쮪쮫쮬쮭쮮쮯쮰쮱쮲쮳쮴쮵쮶쮷쮹쮺쮻쮼쮽쮾쮿쯀쯁쯂쯃쯄ÆÐªĦ�Ĳ�ĿŁØŒºÞŦŊ�㉠㉡㉢㉣㉤㉥㉦㉧㉨㉩㉪㉫㉬㉭㉮㉯㉰㉱㉲㉳㉴㉵㉶㉷㉸㉹㉺㉻ⓐⓑⓒⓓⓔⓕⓖⓗⓘⓙⓚⓛⓜⓝⓞⓟⓠⓡⓢⓣⓤⓥⓦⓧⓨⓩ①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮½⅓⅔¼¾⅛⅜⅝⅞�".split("");
      for (j3 = 0; j3 != D2[168].length; ++j3) if (D2[168][j3].charCodeAt(0) !== 65533) {
        e3[D2[168][j3]] = 43008 + j3;
        d3[43008 + j3] = D2[168][j3];
      }
      D2[169] = "�����������������������������������������������������������������쯅쯆쯇쯈쯉쯊쯋쯌쯍쯎쯏쯐쯑쯒쯓쯕쯖쯗쯘쯙쯚쯛쯜쯝쯞쯟������쯠쯡쯢쯣쯥쯦쯨쯪쯫쯬쯭쯮쯯쯰쯱쯲쯳쯴쯵쯶쯷쯸쯹쯺쯻쯼������쯽쯾쯿찀찁찂찃찄찅찆찇찈찉찊찋찎찏찑찒찓찕찖찗찘찙찚찛찞찟찠찣찤æđðħıĳĸŀłøœßþŧŋŉ㈀㈁㈂㈃㈄㈅㈆㈇㈈㈉㈊㈋㈌㈍㈎㈏㈐㈑㈒㈓㈔㈕㈖㈗㈘㈙㈚㈛⒜⒝⒞⒟⒠⒡⒢⒣⒤⒥⒦⒧⒨⒩⒪⒫⒬⒭⒮⒯⒰⒱⒲⒳⒴⒵⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂¹²³⁴ⁿ₁₂₃₄�".split("");
      for (j3 = 0; j3 != D2[169].length; ++j3) if (D2[169][j3].charCodeAt(0) !== 65533) {
        e3[D2[169][j3]] = 43264 + j3;
        d3[43264 + j3] = D2[169][j3];
      }
      D2[170] = "�����������������������������������������������������������������찥찦찪찫찭찯찱찲찳찴찵찶찷찺찿챀챁챂챃챆챇챉챊챋챍챎������챏챐챑챒챓챖챚챛챜챝챞챟챡챢챣챥챧챩챪챫챬챭챮챯챱챲������챳챴챶챷챸챹챺챻챼챽챾챿첀첁첂첃첄첅첆첇첈첉첊첋첌첍첎첏첐첑첒첓ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split("");
      for (j3 = 0; j3 != D2[170].length; ++j3) if (D2[170][j3].charCodeAt(0) !== 65533) {
        e3[D2[170][j3]] = 43520 + j3;
        d3[43520 + j3] = D2[170][j3];
      }
      D2[171] = "�����������������������������������������������������������������첔첕첖첗첚첛첝첞첟첡첢첣첤첥첦첧첪첮첯첰첱첲첳첶첷첹������첺첻첽첾첿쳀쳁쳂쳃쳆쳈쳊쳋쳌쳍쳎쳏쳑쳒쳓쳕쳖쳗쳘쳙쳚������쳛쳜쳝쳞쳟쳠쳡쳢쳣쳥쳦쳧쳨쳩쳪쳫쳭쳮쳯쳱쳲쳳쳴쳵쳶쳷쳸쳹쳺쳻쳼쳽ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split("");
      for (j3 = 0; j3 != D2[171].length; ++j3) if (D2[171][j3].charCodeAt(0) !== 65533) {
        e3[D2[171][j3]] = 43776 + j3;
        d3[43776 + j3] = D2[171][j3];
      }
      D2[172] = "�����������������������������������������������������������������쳾쳿촀촂촃촄촅촆촇촊촋촍촎촏촑촒촓촔촕촖촗촚촜촞촟촠������촡촢촣촥촦촧촩촪촫촭촮촯촰촱촲촳촴촵촶촷촸촺촻촼촽촾������촿쵀쵁쵂쵃쵄쵅쵆쵇쵈쵉쵊쵋쵌쵍쵎쵏쵐쵑쵒쵓쵔쵕쵖쵗쵘쵙쵚쵛쵝쵞쵟АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split("");
      for (j3 = 0; j3 != D2[172].length; ++j3) if (D2[172][j3].charCodeAt(0) !== 65533) {
        e3[D2[172][j3]] = 44032 + j3;
        d3[44032 + j3] = D2[172][j3];
      }
      D2[173] = "�����������������������������������������������������������������쵡쵢쵣쵥쵦쵧쵨쵩쵪쵫쵮쵰쵲쵳쵴쵵쵶쵷쵹쵺쵻쵼쵽쵾쵿춀������춁춂춃춄춅춆춇춉춊춋춌춍춎춏춐춑춒춓춖춗춙춚춛춝춞춟������춠춡춢춣춦춨춪춫춬춭춮춯춱춲춳춴춵춶춷춸춹춺춻춼춽춾춿췀췁췂췃췅�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[173].length; ++j3) if (D2[173][j3].charCodeAt(0) !== 65533) {
        e3[D2[173][j3]] = 44288 + j3;
        d3[44288 + j3] = D2[173][j3];
      }
      D2[174] = "�����������������������������������������������������������������췆췇췈췉췊췋췍췎췏췑췒췓췔췕췖췗췘췙췚췛췜췝췞췟췠췡������췢췣췤췥췦췧췩췪췫췭췮췯췱췲췳췴췵췶췷췺췼췾췿츀츁츂������츃츅츆츇츉츊츋츍츎츏츐츑츒츓츕츖츗츘츚츛츜츝츞츟츢츣츥츦츧츩츪츫�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[174].length; ++j3) if (D2[174][j3].charCodeAt(0) !== 65533) {
        e3[D2[174][j3]] = 44544 + j3;
        d3[44544 + j3] = D2[174][j3];
      }
      D2[175] = "�����������������������������������������������������������������츬츭츮츯츲츴츶츷츸츹츺츻츼츽츾츿칀칁칂칃칄칅칆칇칈칉������칊칋칌칍칎칏칐칑칒칓칔칕칖칗칚칛칝칞칢칣칤칥칦칧칪칬������칮칯칰칱칲칳칶칷칹칺칻칽칾칿캀캁캂캃캆캈캊캋캌캍캎캏캒캓캕캖캗캙�����������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[175].length; ++j3) if (D2[175][j3].charCodeAt(0) !== 65533) {
        e3[D2[175][j3]] = 44800 + j3;
        d3[44800 + j3] = D2[175][j3];
      }
      D2[176] = "�����������������������������������������������������������������캚캛캜캝캞캟캢캦캧캨캩캪캫캮캯캰캱캲캳캴캵캶캷캸캹캺������캻캼캽캾캿컀컂컃컄컅컆컇컈컉컊컋컌컍컎컏컐컑컒컓컔컕������컖컗컘컙컚컛컜컝컞컟컠컡컢컣컦컧컩컪컭컮컯컰컱컲컳컶컺컻컼컽컾컿가각간갇갈갉갊감갑값갓갔강갖갗같갚갛개객갠갤갬갭갯갰갱갸갹갼걀걋걍걔걘걜거걱건걷걸걺검겁것겄겅겆겉겊겋게겐겔겜겝겟겠겡겨격겪견겯결겸겹겻겼경곁계곈곌곕곗고곡곤곧골곪곬곯곰곱곳공곶과곽관괄괆�".split("");
      for (j3 = 0; j3 != D2[176].length; ++j3) if (D2[176][j3].charCodeAt(0) !== 65533) {
        e3[D2[176][j3]] = 45056 + j3;
        d3[45056 + j3] = D2[176][j3];
      }
      D2[177] = "�����������������������������������������������������������������켂켃켅켆켇켉켊켋켌켍켎켏켒켔켖켗켘켙켚켛켝켞켟켡켢켣������켥켦켧켨켩켪켫켮켲켳켴켵켶켷켹켺켻켼켽켾켿콀콁콂콃콄������콅콆콇콈콉콊콋콌콍콎콏콐콑콒콓콖콗콙콚콛콝콞콟콠콡콢콣콦콨콪콫콬괌괍괏광괘괜괠괩괬괭괴괵괸괼굄굅굇굉교굔굘굡굣구국군굳굴굵굶굻굼굽굿궁궂궈궉권궐궜궝궤궷귀귁귄귈귐귑귓규균귤그극근귿글긁금급긋긍긔기긱긴긷길긺김깁깃깅깆깊까깍깎깐깔깖깜깝깟깠깡깥깨깩깬깰깸�".split("");
      for (j3 = 0; j3 != D2[177].length; ++j3) if (D2[177][j3].charCodeAt(0) !== 65533) {
        e3[D2[177][j3]] = 45312 + j3;
        d3[45312 + j3] = D2[177][j3];
      }
      D2[178] = "�����������������������������������������������������������������콭콮콯콲콳콵콶콷콹콺콻콼콽콾콿쾁쾂쾃쾄쾆쾇쾈쾉쾊쾋쾍������쾎쾏쾐쾑쾒쾓쾔쾕쾖쾗쾘쾙쾚쾛쾜쾝쾞쾟쾠쾢쾣쾤쾥쾦쾧쾩������쾪쾫쾬쾭쾮쾯쾱쾲쾳쾴쾵쾶쾷쾸쾹쾺쾻쾼쾽쾾쾿쿀쿁쿂쿃쿅쿆쿇쿈쿉쿊쿋깹깻깼깽꺄꺅꺌꺼꺽꺾껀껄껌껍껏껐껑께껙껜껨껫껭껴껸껼꼇꼈꼍꼐꼬꼭꼰꼲꼴꼼꼽꼿꽁꽂꽃꽈꽉꽐꽜꽝꽤꽥꽹꾀꾄꾈꾐꾑꾕꾜꾸꾹꾼꿀꿇꿈꿉꿋꿍꿎꿔꿜꿨꿩꿰꿱꿴꿸뀀뀁뀄뀌뀐뀔뀜뀝뀨끄끅끈끊끌끎끓끔끕끗끙�".split("");
      for (j3 = 0; j3 != D2[178].length; ++j3) if (D2[178][j3].charCodeAt(0) !== 65533) {
        e3[D2[178][j3]] = 45568 + j3;
        d3[45568 + j3] = D2[178][j3];
      }
      D2[179] = "�����������������������������������������������������������������쿌쿍쿎쿏쿐쿑쿒쿓쿔쿕쿖쿗쿘쿙쿚쿛쿜쿝쿞쿟쿢쿣쿥쿦쿧쿩������쿪쿫쿬쿭쿮쿯쿲쿴쿶쿷쿸쿹쿺쿻쿽쿾쿿퀁퀂퀃퀅퀆퀇퀈퀉퀊������퀋퀌퀍퀎퀏퀐퀒퀓퀔퀕퀖퀗퀙퀚퀛퀜퀝퀞퀟퀠퀡퀢퀣퀤퀥퀦퀧퀨퀩퀪퀫퀬끝끼끽낀낄낌낍낏낑나낙낚난낟날낡낢남납낫났낭낮낯낱낳내낵낸낼냄냅냇냈냉냐냑냔냘냠냥너넉넋넌널넒넓넘넙넛넜넝넣네넥넨넬넴넵넷넸넹녀녁년녈념녑녔녕녘녜녠노녹논놀놂놈놉놋농높놓놔놘놜놨뇌뇐뇔뇜뇝�".split("");
      for (j3 = 0; j3 != D2[179].length; ++j3) if (D2[179][j3].charCodeAt(0) !== 65533) {
        e3[D2[179][j3]] = 45824 + j3;
        d3[45824 + j3] = D2[179][j3];
      }
      D2[180] = "�����������������������������������������������������������������퀮퀯퀰퀱퀲퀳퀶퀷퀹퀺퀻퀽퀾퀿큀큁큂큃큆큈큊큋큌큍큎큏������큑큒큓큕큖큗큙큚큛큜큝큞큟큡큢큣큤큥큦큧큨큩큪큫큮큯������큱큲큳큵큶큷큸큹큺큻큾큿킀킂킃킄킅킆킇킈킉킊킋킌킍킎킏킐킑킒킓킔뇟뇨뇩뇬뇰뇹뇻뇽누눅눈눋눌눔눕눗눙눠눴눼뉘뉜뉠뉨뉩뉴뉵뉼늄늅늉느늑는늘늙늚늠늡늣능늦늪늬늰늴니닉닌닐닒님닙닛닝닢다닥닦단닫달닭닮닯닳담답닷닸당닺닻닿대댁댄댈댐댑댓댔댕댜더덕덖던덛덜덞덟덤덥�".split("");
      for (j3 = 0; j3 != D2[180].length; ++j3) if (D2[180][j3].charCodeAt(0) !== 65533) {
        e3[D2[180][j3]] = 46080 + j3;
        d3[46080 + j3] = D2[180][j3];
      }
      D2[181] = "�����������������������������������������������������������������킕킖킗킘킙킚킛킜킝킞킟킠킡킢킣킦킧킩킪킫킭킮킯킰킱킲������킳킶킸킺킻킼킽킾킿탂탃탅탆탇탊탋탌탍탎탏탒탖탗탘탙탚������탛탞탟탡탢탣탥탦탧탨탩탪탫탮탲탳탴탵탶탷탹탺탻탼탽탾탿턀턁턂턃턄덧덩덫덮데덱덴델뎀뎁뎃뎄뎅뎌뎐뎔뎠뎡뎨뎬도독돈돋돌돎돐돔돕돗동돛돝돠돤돨돼됐되된될됨됩됫됴두둑둔둘둠둡둣둥둬뒀뒈뒝뒤뒨뒬뒵뒷뒹듀듄듈듐듕드득든듣들듦듬듭듯등듸디딕딘딛딜딤딥딧딨딩딪따딱딴딸�".split("");
      for (j3 = 0; j3 != D2[181].length; ++j3) if (D2[181][j3].charCodeAt(0) !== 65533) {
        e3[D2[181][j3]] = 46336 + j3;
        d3[46336 + j3] = D2[181][j3];
      }
      D2[182] = "�����������������������������������������������������������������턅턆턇턈턉턊턋턌턎턏턐턑턒턓턔턕턖턗턘턙턚턛턜턝턞턟������턠턡턢턣턤턥턦턧턨턩턪턫턬턭턮턯턲턳턵턶턷턹턻턼턽턾������턿텂텆텇텈텉텊텋텎텏텑텒텓텕텖텗텘텙텚텛텞텠텢텣텤텥텦텧텩텪텫텭땀땁땃땄땅땋때땍땐땔땜땝땟땠땡떠떡떤떨떪떫떰떱떳떴떵떻떼떽뗀뗄뗌뗍뗏뗐뗑뗘뗬또똑똔똘똥똬똴뙈뙤뙨뚜뚝뚠뚤뚫뚬뚱뛔뛰뛴뛸뜀뜁뜅뜨뜩뜬뜯뜰뜸뜹뜻띄띈띌띔띕띠띤띨띰띱띳띵라락란랄람랍랏랐랑랒랖랗�".split("");
      for (j3 = 0; j3 != D2[182].length; ++j3) if (D2[182][j3].charCodeAt(0) !== 65533) {
        e3[D2[182][j3]] = 46592 + j3;
        d3[46592 + j3] = D2[182][j3];
      }
      D2[183] = "�����������������������������������������������������������������텮텯텰텱텲텳텴텵텶텷텸텹텺텻텽텾텿톀톁톂톃톅톆톇톉톊������톋톌톍톎톏톐톑톒톓톔톕톖톗톘톙톚톛톜톝톞톟톢톣톥톦톧������톩톪톫톬톭톮톯톲톴톶톷톸톹톻톽톾톿퇁퇂퇃퇄퇅퇆퇇퇈퇉퇊퇋퇌퇍퇎퇏래랙랜랠램랩랫랬랭랴략랸럇량러럭런럴럼럽럿렀렁렇레렉렌렐렘렙렛렝려력련렬렴렵렷렸령례롄롑롓로록론롤롬롭롯롱롸롼뢍뢨뢰뢴뢸룀룁룃룅료룐룔룝룟룡루룩룬룰룸룹룻룽뤄뤘뤠뤼뤽륀륄륌륏륑류륙륜률륨륩�".split("");
      for (j3 = 0; j3 != D2[183].length; ++j3) if (D2[183][j3].charCodeAt(0) !== 65533) {
        e3[D2[183][j3]] = 46848 + j3;
        d3[46848 + j3] = D2[183][j3];
      }
      D2[184] = "�����������������������������������������������������������������퇐퇑퇒퇓퇔퇕퇖퇗퇙퇚퇛퇜퇝퇞퇟퇠퇡퇢퇣퇤퇥퇦퇧퇨퇩퇪������퇫퇬퇭퇮퇯퇰퇱퇲퇳퇵퇶퇷퇹퇺퇻퇼퇽퇾퇿툀툁툂툃툄툅툆������툈툊툋툌툍툎툏툑툒툓툔툕툖툗툘툙툚툛툜툝툞툟툠툡툢툣툤툥툦툧툨툩륫륭르륵른를름릅릇릉릊릍릎리릭린릴림립릿링마막만많맏말맑맒맘맙맛망맞맡맣매맥맨맬맴맵맷맸맹맺먀먁먈먕머먹먼멀멂멈멉멋멍멎멓메멕멘멜멤멥멧멨멩며멱면멸몃몄명몇몌모목몫몬몰몲몸몹못몽뫄뫈뫘뫙뫼�".split("");
      for (j3 = 0; j3 != D2[184].length; ++j3) if (D2[184][j3].charCodeAt(0) !== 65533) {
        e3[D2[184][j3]] = 47104 + j3;
        d3[47104 + j3] = D2[184][j3];
      }
      D2[185] = "�����������������������������������������������������������������툪툫툮툯툱툲툳툵툶툷툸툹툺툻툾퉀퉂퉃퉄퉅퉆퉇퉉퉊퉋퉌������퉍퉎퉏퉐퉑퉒퉓퉔퉕퉖퉗퉘퉙퉚퉛퉝퉞퉟퉠퉡퉢퉣퉥퉦퉧퉨������퉩퉪퉫퉬퉭퉮퉯퉰퉱퉲퉳퉴퉵퉶퉷퉸퉹퉺퉻퉼퉽퉾퉿튂튃튅튆튇튉튊튋튌묀묄묍묏묑묘묜묠묩묫무묵묶문묻물묽묾뭄뭅뭇뭉뭍뭏뭐뭔뭘뭡뭣뭬뮈뮌뮐뮤뮨뮬뮴뮷므믄믈믐믓미믹민믿밀밂밈밉밋밌밍및밑바박밖밗반받발밝밞밟밤밥밧방밭배백밴밸뱀뱁뱃뱄뱅뱉뱌뱍뱐뱝버벅번벋벌벎범법벗�".split("");
      for (j3 = 0; j3 != D2[185].length; ++j3) if (D2[185][j3].charCodeAt(0) !== 65533) {
        e3[D2[185][j3]] = 47360 + j3;
        d3[47360 + j3] = D2[185][j3];
      }
      D2[186] = "�����������������������������������������������������������������튍튎튏튒튓튔튖튗튘튙튚튛튝튞튟튡튢튣튥튦튧튨튩튪튫튭������튮튯튰튲튳튴튵튶튷튺튻튽튾틁틃틄틅틆틇틊틌틍틎틏틐틑������틒틓틕틖틗틙틚틛틝틞틟틠틡틢틣틦틧틨틩틪틫틬틭틮틯틲틳틵틶틷틹틺벙벚베벡벤벧벨벰벱벳벴벵벼벽변별볍볏볐병볕볘볜보복볶본볼봄봅봇봉봐봔봤봬뵀뵈뵉뵌뵐뵘뵙뵤뵨부북분붇불붉붊붐붑붓붕붙붚붜붤붰붸뷔뷕뷘뷜뷩뷰뷴뷸븀븃븅브븍븐블븜븝븟비빅빈빌빎빔빕빗빙빚빛빠빡빤�".split("");
      for (j3 = 0; j3 != D2[186].length; ++j3) if (D2[186][j3].charCodeAt(0) !== 65533) {
        e3[D2[186][j3]] = 47616 + j3;
        d3[47616 + j3] = D2[186][j3];
      }
      D2[187] = "�����������������������������������������������������������������틻틼틽틾틿팂팄팆팇팈팉팊팋팏팑팒팓팕팗팘팙팚팛팞팢팣������팤팦팧팪팫팭팮팯팱팲팳팴팵팶팷팺팾팿퍀퍁퍂퍃퍆퍇퍈퍉������퍊퍋퍌퍍퍎퍏퍐퍑퍒퍓퍔퍕퍖퍗퍘퍙퍚퍛퍜퍝퍞퍟퍠퍡퍢퍣퍤퍥퍦퍧퍨퍩빨빪빰빱빳빴빵빻빼빽뺀뺄뺌뺍뺏뺐뺑뺘뺙뺨뻐뻑뻔뻗뻘뻠뻣뻤뻥뻬뼁뼈뼉뼘뼙뼛뼜뼝뽀뽁뽄뽈뽐뽑뽕뾔뾰뿅뿌뿍뿐뿔뿜뿟뿡쀼쁑쁘쁜쁠쁨쁩삐삑삔삘삠삡삣삥사삭삯산삳살삵삶삼삽삿샀상샅새색샌샐샘샙샛샜생샤�".split("");
      for (j3 = 0; j3 != D2[187].length; ++j3) if (D2[187][j3].charCodeAt(0) !== 65533) {
        e3[D2[187][j3]] = 47872 + j3;
        d3[47872 + j3] = D2[187][j3];
      }
      D2[188] = "�����������������������������������������������������������������퍪퍫퍬퍭퍮퍯퍰퍱퍲퍳퍴퍵퍶퍷퍸퍹퍺퍻퍾퍿펁펂펃펅펆펇������펈펉펊펋펎펒펓펔펕펖펗펚펛펝펞펟펡펢펣펤펥펦펧펪펬펮������펯펰펱펲펳펵펶펷펹펺펻펽펾펿폀폁폂폃폆폇폊폋폌폍폎폏폑폒폓폔폕폖샥샨샬샴샵샷샹섀섄섈섐섕서석섞섟선섣설섦섧섬섭섯섰성섶세섹센셀셈셉셋셌셍셔셕션셜셤셥셧셨셩셰셴셸솅소속솎손솔솖솜솝솟송솥솨솩솬솰솽쇄쇈쇌쇔쇗쇘쇠쇤쇨쇰쇱쇳쇼쇽숀숄숌숍숏숑수숙순숟술숨숩숫숭�".split("");
      for (j3 = 0; j3 != D2[188].length; ++j3) if (D2[188][j3].charCodeAt(0) !== 65533) {
        e3[D2[188][j3]] = 48128 + j3;
        d3[48128 + j3] = D2[188][j3];
      }
      D2[189] = "�����������������������������������������������������������������폗폙폚폛폜폝폞폟폠폢폤폥폦폧폨폩폪폫폮폯폱폲폳폵폶폷������폸폹폺폻폾퐀퐂퐃퐄퐅퐆퐇퐉퐊퐋퐌퐍퐎퐏퐐퐑퐒퐓퐔퐕퐖������퐗퐘퐙퐚퐛퐜퐞퐟퐠퐡퐢퐣퐤퐥퐦퐧퐨퐩퐪퐫퐬퐭퐮퐯퐰퐱퐲퐳퐴퐵퐶퐷숯숱숲숴쉈쉐쉑쉔쉘쉠쉥쉬쉭쉰쉴쉼쉽쉿슁슈슉슐슘슛슝스슥슨슬슭슴습슷승시식신싣실싫심십싯싱싶싸싹싻싼쌀쌈쌉쌌쌍쌓쌔쌕쌘쌜쌤쌥쌨쌩썅써썩썬썰썲썸썹썼썽쎄쎈쎌쏀쏘쏙쏜쏟쏠쏢쏨쏩쏭쏴쏵쏸쐈쐐쐤쐬쐰�".split("");
      for (j3 = 0; j3 != D2[189].length; ++j3) if (D2[189][j3].charCodeAt(0) !== 65533) {
        e3[D2[189][j3]] = 48384 + j3;
        d3[48384 + j3] = D2[189][j3];
      }
      D2[190] = "�����������������������������������������������������������������퐸퐹퐺퐻퐼퐽퐾퐿푁푂푃푅푆푇푈푉푊푋푌푍푎푏푐푑푒푓������푔푕푖푗푘푙푚푛푝푞푟푡푢푣푥푦푧푨푩푪푫푬푮푰푱푲������푳푴푵푶푷푺푻푽푾풁풃풄풅풆풇풊풌풎풏풐풑풒풓풕풖풗풘풙풚풛풜풝쐴쐼쐽쑈쑤쑥쑨쑬쑴쑵쑹쒀쒔쒜쒸쒼쓩쓰쓱쓴쓸쓺쓿씀씁씌씐씔씜씨씩씬씰씸씹씻씽아악안앉않알앍앎앓암압앗았앙앝앞애액앤앨앰앱앳앴앵야약얀얄얇얌얍얏양얕얗얘얜얠얩어억언얹얻얼얽얾엄업없엇었엉엊엌엎�".split("");
      for (j3 = 0; j3 != D2[190].length; ++j3) if (D2[190][j3].charCodeAt(0) !== 65533) {
        e3[D2[190][j3]] = 48640 + j3;
        d3[48640 + j3] = D2[190][j3];
      }
      D2[191] = "�����������������������������������������������������������������풞풟풠풡풢풣풤풥풦풧풨풪풫풬풭풮풯풰풱풲풳풴풵풶풷풸������풹풺풻풼풽풾풿퓀퓁퓂퓃퓄퓅퓆퓇퓈퓉퓊퓋퓍퓎퓏퓑퓒퓓퓕������퓖퓗퓘퓙퓚퓛퓝퓞퓠퓡퓢퓣퓤퓥퓦퓧퓩퓪퓫퓭퓮퓯퓱퓲퓳퓴퓵퓶퓷퓹퓺퓼에엑엔엘엠엡엣엥여역엮연열엶엷염엽엾엿였영옅옆옇예옌옐옘옙옛옜오옥온올옭옮옰옳옴옵옷옹옻와왁완왈왐왑왓왔왕왜왝왠왬왯왱외왹왼욀욈욉욋욍요욕욘욜욤욥욧용우욱운울욹욺움웁웃웅워웍원월웜웝웠웡웨�".split("");
      for (j3 = 0; j3 != D2[191].length; ++j3) if (D2[191][j3].charCodeAt(0) !== 65533) {
        e3[D2[191][j3]] = 48896 + j3;
        d3[48896 + j3] = D2[191][j3];
      }
      D2[192] = "�����������������������������������������������������������������퓾퓿픀픁픂픃픅픆픇픉픊픋픍픎픏픐픑픒픓픖픘픙픚픛픜픝������픞픟픠픡픢픣픤픥픦픧픨픩픪픫픬픭픮픯픰픱픲픳픴픵픶픷������픸픹픺픻픾픿핁핂핃핅핆핇핈핉핊핋핎핐핒핓핔핕핖핗핚핛핝핞핟핡핢핣웩웬웰웸웹웽위윅윈윌윔윕윗윙유육윤율윰윱윳융윷으윽은을읊음읍읏응읒읓읔읕읖읗의읜읠읨읫이익인일읽읾잃임입잇있잉잊잎자작잔잖잗잘잚잠잡잣잤장잦재잭잰잴잼잽잿쟀쟁쟈쟉쟌쟎쟐쟘쟝쟤쟨쟬저적전절젊�".split("");
      for (j3 = 0; j3 != D2[192].length; ++j3) if (D2[192][j3].charCodeAt(0) !== 65533) {
        e3[D2[192][j3]] = 49152 + j3;
        d3[49152 + j3] = D2[192][j3];
      }
      D2[193] = "�����������������������������������������������������������������핤핦핧핪핬핮핯핰핱핲핳핶핷핹핺핻핽핾핿햀햁햂햃햆햊햋������햌햍햎햏햑햒햓햔햕햖햗햘햙햚햛햜햝햞햟햠햡햢햣햤햦햧������햨햩햪햫햬햭햮햯햰햱햲햳햴햵햶햷햸햹햺햻햼햽햾햿헀헁헂헃헄헅헆헇점접젓정젖제젝젠젤젬젭젯젱져젼졀졈졉졌졍졔조족존졸졺좀좁좃종좆좇좋좌좍좔좝좟좡좨좼좽죄죈죌죔죕죗죙죠죡죤죵주죽준줄줅줆줌줍줏중줘줬줴쥐쥑쥔쥘쥠쥡쥣쥬쥰쥴쥼즈즉즌즐즘즙즛증지직진짇질짊짐집짓�".split("");
      for (j3 = 0; j3 != D2[193].length; ++j3) if (D2[193][j3].charCodeAt(0) !== 65533) {
        e3[D2[193][j3]] = 49408 + j3;
        d3[49408 + j3] = D2[193][j3];
      }
      D2[194] = "�����������������������������������������������������������������헊헋헍헎헏헑헓헔헕헖헗헚헜헞헟헠헡헢헣헦헧헩헪헫헭헮������헯헰헱헲헳헶헸헺헻헼헽헾헿혂혃혅혆혇혉혊혋혌혍혎혏혒������혖혗혘혙혚혛혝혞혟혡혢혣혥혦혧혨혩혪혫혬혮혯혰혱혲혳혴혵혶혷혺혻징짖짙짚짜짝짠짢짤짧짬짭짯짰짱째짹짼쨀쨈쨉쨋쨌쨍쨔쨘쨩쩌쩍쩐쩔쩜쩝쩟쩠쩡쩨쩽쪄쪘쪼쪽쫀쫄쫌쫍쫏쫑쫓쫘쫙쫠쫬쫴쬈쬐쬔쬘쬠쬡쭁쭈쭉쭌쭐쭘쭙쭝쭤쭸쭹쮜쮸쯔쯤쯧쯩찌찍찐찔찜찝찡찢찧차착찬찮찰참찹찻�".split("");
      for (j3 = 0; j3 != D2[194].length; ++j3) if (D2[194][j3].charCodeAt(0) !== 65533) {
        e3[D2[194][j3]] = 49664 + j3;
        d3[49664 + j3] = D2[194][j3];
      }
      D2[195] = "�����������������������������������������������������������������혽혾혿홁홂홃홄홆홇홊홌홎홏홐홒홓홖홗홙홚홛홝홞홟홠홡������홢홣홤홥홦홨홪홫홬홭홮홯홲홳홵홶홷홸홹홺홻홼홽홾홿횀������횁횂횄횆횇횈횉횊횋횎횏횑횒횓횕횖횗횘횙횚횛횜횞횠횢횣횤횥횦횧횩횪찼창찾채책챈챌챔챕챗챘챙챠챤챦챨챰챵처척천철첨첩첫첬청체첵첸첼쳄쳅쳇쳉쳐쳔쳤쳬쳰촁초촉촌촐촘촙촛총촤촨촬촹최쵠쵤쵬쵭쵯쵱쵸춈추축춘출춤춥춧충춰췄췌췐취췬췰췸췹췻췽츄츈츌츔츙츠측츤츨츰츱츳층�".split("");
      for (j3 = 0; j3 != D2[195].length; ++j3) if (D2[195][j3].charCodeAt(0) !== 65533) {
        e3[D2[195][j3]] = 49920 + j3;
        d3[49920 + j3] = D2[195][j3];
      }
      D2[196] = "�����������������������������������������������������������������횫횭횮횯횱횲횳횴횵횶횷횸횺횼횽횾횿훀훁훂훃훆훇훉훊훋������훍훎훏훐훒훓훕훖훘훚훛훜훝훞훟훡훢훣훥훦훧훩훪훫훬훭������훮훯훱훲훳훴훶훷훸훹훺훻훾훿휁휂휃휅휆휇휈휉휊휋휌휍휎휏휐휒휓휔치칙친칟칠칡침칩칫칭카칵칸칼캄캅캇캉캐캑캔캘캠캡캣캤캥캬캭컁커컥컨컫컬컴컵컷컸컹케켁켄켈켐켑켓켕켜켠켤켬켭켯켰켱켸코콕콘콜콤콥콧콩콰콱콴콸쾀쾅쾌쾡쾨쾰쿄쿠쿡쿤쿨쿰쿱쿳쿵쿼퀀퀄퀑퀘퀭퀴퀵퀸퀼�".split("");
      for (j3 = 0; j3 != D2[196].length; ++j3) if (D2[196][j3].charCodeAt(0) !== 65533) {
        e3[D2[196][j3]] = 50176 + j3;
        d3[50176 + j3] = D2[196][j3];
      }
      D2[197] = "�����������������������������������������������������������������휕휖휗휚휛휝휞휟휡휢휣휤휥휦휧휪휬휮휯휰휱휲휳휶휷휹������휺휻휽휾휿흀흁흂흃흅흆흈흊흋흌흍흎흏흒흓흕흚흛흜흝흞������흟흢흤흦흧흨흪흫흭흮흯흱흲흳흵흶흷흸흹흺흻흾흿힀힂힃힄힅힆힇힊힋큄큅큇큉큐큔큘큠크큭큰클큼큽킁키킥킨킬킴킵킷킹타탁탄탈탉탐탑탓탔탕태택탠탤탬탭탯탰탱탸턍터턱턴털턺텀텁텃텄텅테텍텐텔템텝텟텡텨텬텼톄톈토톡톤톨톰톱톳통톺톼퇀퇘퇴퇸툇툉툐투툭툰툴툼툽툿퉁퉈퉜�".split("");
      for (j3 = 0; j3 != D2[197].length; ++j3) if (D2[197][j3].charCodeAt(0) !== 65533) {
        e3[D2[197][j3]] = 50432 + j3;
        d3[50432 + j3] = D2[197][j3];
      }
      D2[198] = "�����������������������������������������������������������������힍힎힏힑힒힓힔힕힖힗힚힜힞힟힠힡힢힣������������������������������������������������������������������������������퉤튀튁튄튈튐튑튕튜튠튤튬튱트특튼튿틀틂틈틉틋틔틘틜틤틥티틱틴틸팀팁팃팅파팍팎판팔팖팜팝팟팠팡팥패팩팬팰팸팹팻팼팽퍄퍅퍼퍽펀펄펌펍펏펐펑페펙펜펠펨펩펫펭펴편펼폄폅폈평폐폘폡폣포폭폰폴폼폽폿퐁�".split("");
      for (j3 = 0; j3 != D2[198].length; ++j3) if (D2[198][j3].charCodeAt(0) !== 65533) {
        e3[D2[198][j3]] = 50688 + j3;
        d3[50688 + j3] = D2[198][j3];
      }
      D2[199] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������퐈퐝푀푄표푠푤푭푯푸푹푼푿풀풂품풉풋풍풔풩퓌퓐퓔퓜퓟퓨퓬퓰퓸퓻퓽프픈플픔픕픗피픽핀필핌핍핏핑하학한할핥함합핫항해핵핸핼햄햅햇했행햐향허헉헌헐헒험헙헛헝헤헥헨헬헴헵헷헹혀혁현혈혐협혓혔형혜혠�".split("");
      for (j3 = 0; j3 != D2[199].length; ++j3) if (D2[199][j3].charCodeAt(0) !== 65533) {
        e3[D2[199][j3]] = 50944 + j3;
        d3[50944 + j3] = D2[199][j3];
      }
      D2[200] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������혤혭호혹혼홀홅홈홉홋홍홑화확환활홧황홰홱홴횃횅회획횐횔횝횟횡효횬횰횹횻후훅훈훌훑훔훗훙훠훤훨훰훵훼훽휀휄휑휘휙휜휠휨휩휫휭휴휵휸휼흄흇흉흐흑흔흖흗흘흙흠흡흣흥흩희흰흴흼흽힁히힉힌힐힘힙힛힝�".split("");
      for (j3 = 0; j3 != D2[200].length; ++j3) if (D2[200][j3].charCodeAt(0) !== 65533) {
        e3[D2[200][j3]] = 51200 + j3;
        d3[51200 + j3] = D2[200][j3];
      }
      D2[202] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������伽佳假價加可呵哥嘉嫁家暇架枷柯歌珂痂稼苛茄街袈訶賈跏軻迦駕刻却各恪慤殼珏脚覺角閣侃刊墾奸姦干幹懇揀杆柬桿澗癎看磵稈竿簡肝艮艱諫間乫喝曷渴碣竭葛褐蝎鞨勘坎堪嵌感憾戡敢柑橄減甘疳監瞰紺邯鑑鑒龕�".split("");
      for (j3 = 0; j3 != D2[202].length; ++j3) if (D2[202][j3].charCodeAt(0) !== 65533) {
        e3[D2[202][j3]] = 51712 + j3;
        d3[51712 + j3] = D2[202][j3];
      }
      D2[203] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������匣岬甲胛鉀閘剛堈姜岡崗康强彊慷江畺疆糠絳綱羌腔舡薑襁講鋼降鱇介价個凱塏愷愾慨改槪漑疥皆盖箇芥蓋豈鎧開喀客坑更粳羹醵倨去居巨拒据據擧渠炬祛距踞車遽鉅鋸乾件健巾建愆楗腱虔蹇鍵騫乞傑杰桀儉劍劒檢�".split("");
      for (j3 = 0; j3 != D2[203].length; ++j3) if (D2[203][j3].charCodeAt(0) !== 65533) {
        e3[D2[203][j3]] = 51968 + j3;
        d3[51968 + j3] = D2[203][j3];
      }
      D2[204] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������瞼鈐黔劫怯迲偈憩揭擊格檄激膈覡隔堅牽犬甄絹繭肩見譴遣鵑抉決潔結缺訣兼慊箝謙鉗鎌京俓倞傾儆勁勍卿坰境庚徑慶憬擎敬景暻更梗涇炅烱璟璥瓊痙硬磬竟競絅經耕耿脛莖警輕逕鏡頃頸驚鯨係啓堺契季屆悸戒桂械�".split("");
      for (j3 = 0; j3 != D2[204].length; ++j3) if (D2[204][j3].charCodeAt(0) !== 65533) {
        e3[D2[204][j3]] = 52224 + j3;
        d3[52224 + j3] = D2[204][j3];
      }
      D2[205] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������棨溪界癸磎稽系繫繼計誡谿階鷄古叩告呱固姑孤尻庫拷攷故敲暠枯槁沽痼皐睾稿羔考股膏苦苽菰藁蠱袴誥賈辜錮雇顧高鼓哭斛曲梏穀谷鵠困坤崑昆梱棍滾琨袞鯤汨滑骨供公共功孔工恐恭拱控攻珙空蚣貢鞏串寡戈果瓜�".split("");
      for (j3 = 0; j3 != D2[205].length; ++j3) if (D2[205][j3].charCodeAt(0) !== 65533) {
        e3[D2[205][j3]] = 52480 + j3;
        d3[52480 + j3] = D2[205][j3];
      }
      D2[206] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������科菓誇課跨過鍋顆廓槨藿郭串冠官寬慣棺款灌琯瓘管罐菅觀貫關館刮恝括适侊光匡壙廣曠洸炚狂珖筐胱鑛卦掛罫乖傀塊壞怪愧拐槐魁宏紘肱轟交僑咬喬嬌嶠巧攪敎校橋狡皎矯絞翹膠蕎蛟較轎郊餃驕鮫丘久九仇俱具勾�".split("");
      for (j3 = 0; j3 != D2[206].length; ++j3) if (D2[206][j3].charCodeAt(0) !== 65533) {
        e3[D2[206][j3]] = 52736 + j3;
        d3[52736 + j3] = D2[206][j3];
      }
      D2[207] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������區口句咎嘔坵垢寇嶇廐懼拘救枸柩構歐毆毬求溝灸狗玖球瞿矩究絿耉臼舅舊苟衢謳購軀逑邱鉤銶駒驅鳩鷗龜國局菊鞠鞫麴君窘群裙軍郡堀屈掘窟宮弓穹窮芎躬倦券勸卷圈拳捲權淃眷厥獗蕨蹶闕机櫃潰詭軌饋句晷歸貴�".split("");
      for (j3 = 0; j3 != D2[207].length; ++j3) if (D2[207][j3].charCodeAt(0) !== 65533) {
        e3[D2[207][j3]] = 52992 + j3;
        d3[52992 + j3] = D2[207][j3];
      }
      D2[208] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鬼龜叫圭奎揆槻珪硅窺竅糾葵規赳逵閨勻均畇筠菌鈞龜橘克剋劇戟棘極隙僅劤勤懃斤根槿瑾筋芹菫覲謹近饉契今妗擒昑檎琴禁禽芩衾衿襟金錦伋及急扱汲級給亘兢矜肯企伎其冀嗜器圻基埼夔奇妓寄岐崎己幾忌技旗旣�".split("");
      for (j3 = 0; j3 != D2[208].length; ++j3) if (D2[208][j3].charCodeAt(0) !== 65533) {
        e3[D2[208][j3]] = 53248 + j3;
        d3[53248 + j3] = D2[208][j3];
      }
      D2[209] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������朞期杞棋棄機欺氣汽沂淇玘琦琪璂璣畸畿碁磯祁祇祈祺箕紀綺羈耆耭肌記譏豈起錡錤飢饑騎騏驥麒緊佶吉拮桔金喫儺喇奈娜懦懶拏拿癩羅蘿螺裸邏那樂洛烙珞落諾酪駱亂卵暖欄煖爛蘭難鸞捏捺南嵐枏楠湳濫男藍襤拉�".split("");
      for (j3 = 0; j3 != D2[209].length; ++j3) if (D2[209][j3].charCodeAt(0) !== 65533) {
        e3[D2[209][j3]] = 53504 + j3;
        d3[53504 + j3] = D2[209][j3];
      }
      D2[210] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������納臘蠟衲囊娘廊朗浪狼郎乃來內奈柰耐冷女年撚秊念恬拈捻寧寗努勞奴弩怒擄櫓爐瑙盧老蘆虜路露駑魯鷺碌祿綠菉錄鹿論壟弄濃籠聾膿農惱牢磊腦賂雷尿壘屢樓淚漏累縷陋嫩訥杻紐勒肋凜凌稜綾能菱陵尼泥匿溺多茶�".split("");
      for (j3 = 0; j3 != D2[210].length; ++j3) if (D2[210][j3].charCodeAt(0) !== 65533) {
        e3[D2[210][j3]] = 53760 + j3;
        d3[53760 + j3] = D2[210][j3];
      }
      D2[211] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������丹亶但單團壇彖斷旦檀段湍短端簞緞蛋袒鄲鍛撻澾獺疸達啖坍憺擔曇淡湛潭澹痰聃膽蕁覃談譚錟沓畓答踏遝唐堂塘幢戇撞棠當糖螳黨代垈坮大對岱帶待戴擡玳臺袋貸隊黛宅德悳倒刀到圖堵塗導屠島嶋度徒悼挑掉搗桃�".split("");
      for (j3 = 0; j3 != D2[211].length; ++j3) if (D2[211][j3].charCodeAt(0) !== 65533) {
        e3[D2[211][j3]] = 54016 + j3;
        d3[54016 + j3] = D2[211][j3];
      }
      D2[212] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������棹櫂淘渡滔濤燾盜睹禱稻萄覩賭跳蹈逃途道都鍍陶韜毒瀆牘犢獨督禿篤纛讀墩惇敦旽暾沌焞燉豚頓乭突仝冬凍動同憧東桐棟洞潼疼瞳童胴董銅兜斗杜枓痘竇荳讀豆逗頭屯臀芚遁遯鈍得嶝橙燈登等藤謄鄧騰喇懶拏癩羅�".split("");
      for (j3 = 0; j3 != D2[212].length; ++j3) if (D2[212][j3].charCodeAt(0) !== 65533) {
        e3[D2[212][j3]] = 54272 + j3;
        d3[54272 + j3] = D2[212][j3];
      }
      D2[213] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蘿螺裸邏樂洛烙珞絡落諾酪駱丹亂卵欄欒瀾爛蘭鸞剌辣嵐擥攬欖濫籃纜藍襤覽拉臘蠟廊朗浪狼琅瑯螂郞來崍徠萊冷掠略亮倆兩凉梁樑粮粱糧良諒輛量侶儷勵呂廬慮戾旅櫚濾礪藜蠣閭驢驪麗黎力曆歷瀝礫轢靂憐戀攣漣�".split("");
      for (j3 = 0; j3 != D2[213].length; ++j3) if (D2[213][j3].charCodeAt(0) !== 65533) {
        e3[D2[213][j3]] = 54528 + j3;
        d3[54528 + j3] = D2[213][j3];
      }
      D2[214] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������煉璉練聯蓮輦連鍊冽列劣洌烈裂廉斂殮濂簾獵令伶囹寧岺嶺怜玲笭羚翎聆逞鈴零靈領齡例澧禮醴隷勞怒撈擄櫓潞瀘爐盧老蘆虜路輅露魯鷺鹵碌祿綠菉錄鹿麓論壟弄朧瀧瓏籠聾儡瀨牢磊賂賚賴雷了僚寮廖料燎療瞭聊蓼�".split("");
      for (j3 = 0; j3 != D2[214].length; ++j3) if (D2[214][j3].charCodeAt(0) !== 65533) {
        e3[D2[214][j3]] = 54784 + j3;
        d3[54784 + j3] = D2[214][j3];
      }
      D2[215] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������遼鬧龍壘婁屢樓淚漏瘻累縷蔞褸鏤陋劉旒柳榴流溜瀏琉瑠留瘤硫謬類六戮陸侖倫崙淪綸輪律慄栗率隆勒肋凜凌楞稜綾菱陵俚利厘吏唎履悧李梨浬犁狸理璃異痢籬罹羸莉裏裡里釐離鯉吝潾燐璘藺躪隣鱗麟林淋琳臨霖砬�".split("");
      for (j3 = 0; j3 != D2[215].length; ++j3) if (D2[215][j3].charCodeAt(0) !== 65533) {
        e3[D2[215][j3]] = 55040 + j3;
        d3[55040 + j3] = D2[215][j3];
      }
      D2[216] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒摩瑪痲碼磨馬魔麻寞幕漠膜莫邈万卍娩巒彎慢挽晩曼滿漫灣瞞萬蔓蠻輓饅鰻唜抹末沫茉襪靺亡妄忘忙望網罔芒茫莽輞邙埋妹媒寐昧枚梅每煤罵買賣邁魅脈貊陌驀麥孟氓猛盲盟萌冪覓免冕勉棉沔眄眠綿緬面麵滅�".split("");
      for (j3 = 0; j3 != D2[216].length; ++j3) if (D2[216][j3].charCodeAt(0) !== 65533) {
        e3[D2[216][j3]] = 55296 + j3;
        d3[55296 + j3] = D2[216][j3];
      }
      D2[217] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蔑冥名命明暝椧溟皿瞑茗蓂螟酩銘鳴袂侮冒募姆帽慕摸摹暮某模母毛牟牡瑁眸矛耗芼茅謀謨貌木沐牧目睦穆鶩歿沒夢朦蒙卯墓妙廟描昴杳渺猫竗苗錨務巫憮懋戊拇撫无楙武毋無珷畝繆舞茂蕪誣貿霧鵡墨默們刎吻問文�".split("");
      for (j3 = 0; j3 != D2[217].length; ++j3) if (D2[217][j3].charCodeAt(0) !== 65533) {
        e3[D2[217][j3]] = 55552 + j3;
        d3[55552 + j3] = D2[217][j3];
      }
      D2[218] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������汶紊紋聞蚊門雯勿沕物味媚尾嵋彌微未梶楣渼湄眉米美薇謎迷靡黴岷悶愍憫敏旻旼民泯玟珉緡閔密蜜謐剝博拍搏撲朴樸泊珀璞箔粕縛膊舶薄迫雹駁伴半反叛拌搬攀斑槃泮潘班畔瘢盤盼磐磻礬絆般蟠返頒飯勃拔撥渤潑�".split("");
      for (j3 = 0; j3 != D2[218].length; ++j3) if (D2[218][j3].charCodeAt(0) !== 65533) {
        e3[D2[218][j3]] = 55808 + j3;
        d3[55808 + j3] = D2[218][j3];
      }
      D2[219] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������發跋醱鉢髮魃倣傍坊妨尨幇彷房放方旁昉枋榜滂磅紡肪膀舫芳蒡蚌訪謗邦防龐倍俳北培徘拜排杯湃焙盃背胚裴裵褙賠輩配陪伯佰帛柏栢白百魄幡樊煩燔番磻繁蕃藩飜伐筏罰閥凡帆梵氾汎泛犯範范法琺僻劈壁擘檗璧癖�".split("");
      for (j3 = 0; j3 != D2[219].length; ++j3) if (D2[219][j3].charCodeAt(0) !== 65533) {
        e3[D2[219][j3]] = 56064 + j3;
        d3[56064 + j3] = D2[219][j3];
      }
      D2[220] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������碧蘗闢霹便卞弁變辨辯邊別瞥鱉鼈丙倂兵屛幷昞昺柄棅炳甁病秉竝輧餠騈保堡報寶普步洑湺潽珤甫菩補褓譜輔伏僕匐卜宓復服福腹茯蔔複覆輹輻馥鰒本乶俸奉封峯峰捧棒烽熢琫縫蓬蜂逢鋒鳳不付俯傅剖副否咐埠夫婦�".split("");
      for (j3 = 0; j3 != D2[220].length; ++j3) if (D2[220][j3].charCodeAt(0) !== 65533) {
        e3[D2[220][j3]] = 56320 + j3;
        d3[56320 + j3] = D2[220][j3];
      }
      D2[221] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������孚孵富府復扶敷斧浮溥父符簿缶腐腑膚艀芙莩訃負賦賻赴趺部釜阜附駙鳧北分吩噴墳奔奮忿憤扮昐汾焚盆粉糞紛芬賁雰不佛弗彿拂崩朋棚硼繃鵬丕備匕匪卑妃婢庇悲憊扉批斐枇榧比毖毗毘沸泌琵痺砒碑秕秘粃緋翡肥�".split("");
      for (j3 = 0; j3 != D2[221].length; ++j3) if (D2[221][j3].charCodeAt(0) !== 65533) {
        e3[D2[221][j3]] = 56576 + j3;
        d3[56576 + j3] = D2[221][j3];
      }
      D2[222] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������脾臂菲蜚裨誹譬費鄙非飛鼻嚬嬪彬斌檳殯浜濱瀕牝玭貧賓頻憑氷聘騁乍事些仕伺似使俟僿史司唆嗣四士奢娑寫寺射巳師徙思捨斜斯柶査梭死沙泗渣瀉獅砂社祀祠私篩紗絲肆舍莎蓑蛇裟詐詞謝賜赦辭邪飼駟麝削數朔索�".split("");
      for (j3 = 0; j3 != D2[222].length; ++j3) if (D2[222][j3].charCodeAt(0) !== 65533) {
        e3[D2[222][j3]] = 56832 + j3;
        d3[56832 + j3] = D2[222][j3];
      }
      D2[223] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������傘刪山散汕珊産疝算蒜酸霰乷撒殺煞薩三參杉森渗芟蔘衫揷澁鈒颯上傷像償商喪嘗孀尙峠常床庠廂想桑橡湘爽牀狀相祥箱翔裳觴詳象賞霜塞璽賽嗇塞穡索色牲生甥省笙墅壻嶼序庶徐恕抒捿敍暑曙書栖棲犀瑞筮絮緖署�".split("");
      for (j3 = 0; j3 != D2[223].length; ++j3) if (D2[223][j3].charCodeAt(0) !== 65533) {
        e3[D2[223][j3]] = 57088 + j3;
        d3[57088 + j3] = D2[223][j3];
      }
      D2[224] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������胥舒薯西誓逝鋤黍鼠夕奭席惜昔晳析汐淅潟石碩蓆釋錫仙僊先善嬋宣扇敾旋渲煽琁瑄璇璿癬禪線繕羨腺膳船蘚蟬詵跣選銑鐥饍鮮卨屑楔泄洩渫舌薛褻設說雪齧剡暹殲纖蟾贍閃陝攝涉燮葉城姓宬性惺成星晟猩珹盛省筬�".split("");
      for (j3 = 0; j3 != D2[224].length; ++j3) if (D2[224][j3].charCodeAt(0) !== 65533) {
        e3[D2[224][j3]] = 57344 + j3;
        d3[57344 + j3] = D2[224][j3];
      }
      D2[225] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������聖聲腥誠醒世勢歲洗稅笹細說貰召嘯塑宵小少巢所掃搔昭梳沼消溯瀟炤燒甦疏疎瘙笑篠簫素紹蔬蕭蘇訴逍遡邵銷韶騷俗屬束涑粟續謖贖速孫巽損蓀遜飡率宋悚松淞訟誦送頌刷殺灑碎鎖衰釗修受嗽囚垂壽嫂守岫峀帥愁�".split("");
      for (j3 = 0; j3 != D2[225].length; ++j3) if (D2[225][j3].charCodeAt(0) !== 65533) {
        e3[D2[225][j3]] = 57600 + j3;
        d3[57600 + j3] = D2[225][j3];
      }
      D2[226] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������戍手授搜收數樹殊水洙漱燧狩獸琇璲瘦睡秀穗竪粹綏綬繡羞脩茱蒐蓚藪袖誰讐輸遂邃酬銖銹隋隧隨雖需須首髓鬚叔塾夙孰宿淑潚熟琡璹肅菽巡徇循恂旬栒楯橓殉洵淳珣盾瞬筍純脣舜荀蓴蕣詢諄醇錞順馴戌術述鉥崇崧�".split("");
      for (j3 = 0; j3 != D2[226].length; ++j3) if (D2[226][j3].charCodeAt(0) !== 65533) {
        e3[D2[226][j3]] = 57856 + j3;
        d3[57856 + j3] = D2[226][j3];
      }
      D2[227] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������嵩瑟膝蝨濕拾習褶襲丞乘僧勝升承昇繩蠅陞侍匙嘶始媤尸屎屍市弑恃施是時枾柴猜矢示翅蒔蓍視試詩諡豕豺埴寔式息拭植殖湜熄篒蝕識軾食飾伸侁信呻娠宸愼新晨燼申神紳腎臣莘薪藎蜃訊身辛辰迅失室實悉審尋心沁�".split("");
      for (j3 = 0; j3 != D2[227].length; ++j3) if (D2[227][j3].charCodeAt(0) !== 65533) {
        e3[D2[227][j3]] = 58112 + j3;
        d3[58112 + j3] = D2[227][j3];
      }
      D2[228] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������沈深瀋甚芯諶什十拾雙氏亞俄兒啞娥峨我牙芽莪蛾衙訝阿雅餓鴉鵝堊岳嶽幄惡愕握樂渥鄂鍔顎鰐齷安岸按晏案眼雁鞍顔鮟斡謁軋閼唵岩巖庵暗癌菴闇壓押狎鴨仰央怏昻殃秧鴦厓哀埃崖愛曖涯碍艾隘靄厄扼掖液縊腋額�".split("");
      for (j3 = 0; j3 != D2[228].length; ++j3) if (D2[228][j3].charCodeAt(0) !== 65533) {
        e3[D2[228][j3]] = 58368 + j3;
        d3[58368 + j3] = D2[228][j3];
      }
      D2[229] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������櫻罌鶯鸚也倻冶夜惹揶椰爺耶若野弱掠略約若葯蒻藥躍亮佯兩凉壤孃恙揚攘敭暘梁楊樣洋瀁煬痒瘍禳穰糧羊良襄諒讓釀陽量養圄御於漁瘀禦語馭魚齬億憶抑檍臆偃堰彦焉言諺孼蘖俺儼嚴奄掩淹嶪業円予余勵呂女如廬�".split("");
      for (j3 = 0; j3 != D2[229].length; ++j3) if (D2[229][j3].charCodeAt(0) !== 65533) {
        e3[D2[229][j3]] = 58624 + j3;
        d3[58624 + j3] = D2[229][j3];
      }
      D2[230] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������旅歟汝濾璵礖礪與艅茹輿轝閭餘驪麗黎亦力域役易曆歷疫繹譯轢逆驛嚥堧姸娟宴年延憐戀捐挻撚椽沇沿涎涓淵演漣烟然煙煉燃燕璉硏硯秊筵緣練縯聯衍軟輦蓮連鉛鍊鳶列劣咽悅涅烈熱裂說閱厭廉念捻染殮炎焰琰艶苒�".split("");
      for (j3 = 0; j3 != D2[230].length; ++j3) if (D2[230][j3].charCodeAt(0) !== 65533) {
        e3[D2[230][j3]] = 58880 + j3;
        d3[58880 + j3] = D2[230][j3];
      }
      D2[231] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������簾閻髥鹽曄獵燁葉令囹塋寧嶺嶸影怜映暎楹榮永泳渶潁濚瀛瀯煐營獰玲瑛瑩瓔盈穎纓羚聆英詠迎鈴鍈零霙靈領乂倪例刈叡曳汭濊猊睿穢芮藝蘂禮裔詣譽豫醴銳隸霓預五伍俉傲午吾吳嗚塢墺奧娛寤悟惡懊敖旿晤梧汚澳�".split("");
      for (j3 = 0; j3 != D2[231].length; ++j3) if (D2[231][j3].charCodeAt(0) !== 65533) {
        e3[D2[231][j3]] = 59136 + j3;
        d3[59136 + j3] = D2[231][j3];
      }
      D2[232] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������烏熬獒筽蜈誤鰲鼇屋沃獄玉鈺溫瑥瘟穩縕蘊兀壅擁瓮甕癰翁邕雍饔渦瓦窩窪臥蛙蝸訛婉完宛梡椀浣玩琓琬碗緩翫脘腕莞豌阮頑曰往旺枉汪王倭娃歪矮外嵬巍猥畏了僚僥凹堯夭妖姚寥寮尿嶢拗搖撓擾料曜樂橈燎燿瑤療�".split("");
      for (j3 = 0; j3 != D2[232].length; ++j3) if (D2[232][j3].charCodeAt(0) !== 65533) {
        e3[D2[232][j3]] = 59392 + j3;
        d3[59392 + j3] = D2[232][j3];
      }
      D2[233] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������窈窯繇繞耀腰蓼蟯要謠遙遼邀饒慾欲浴縟褥辱俑傭冗勇埇墉容庸慂榕涌湧溶熔瑢用甬聳茸蓉踊鎔鏞龍于佑偶優又友右宇寓尤愚憂旴牛玗瑀盂祐禑禹紆羽芋藕虞迂遇郵釪隅雨雩勖彧旭昱栯煜稶郁頊云暈橒殞澐熉耘芸蕓�".split("");
      for (j3 = 0; j3 != D2[233].length; ++j3) if (D2[233][j3].charCodeAt(0) !== 65533) {
        e3[D2[233][j3]] = 59648 + j3;
        d3[59648 + j3] = D2[233][j3];
      }
      D2[234] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������運隕雲韻蔚鬱亐熊雄元原員圓園垣媛嫄寃怨愿援沅洹湲源爰猿瑗苑袁轅遠阮院願鴛月越鉞位偉僞危圍委威尉慰暐渭爲瑋緯胃萎葦蔿蝟衛褘謂違韋魏乳侑儒兪劉唯喩孺宥幼幽庾悠惟愈愉揄攸有杻柔柚柳楡楢油洧流游溜�".split("");
      for (j3 = 0; j3 != D2[234].length; ++j3) if (D2[234][j3].charCodeAt(0) !== 65533) {
        e3[D2[234][j3]] = 59904 + j3;
        d3[59904 + j3] = D2[234][j3];
      }
      D2[235] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������濡猶猷琉瑜由留癒硫紐維臾萸裕誘諛諭踰蹂遊逾遺酉釉鍮類六堉戮毓肉育陸倫允奫尹崙淪潤玧胤贇輪鈗閏律慄栗率聿戎瀜絨融隆垠恩慇殷誾銀隱乙吟淫蔭陰音飮揖泣邑凝應膺鷹依倚儀宜意懿擬椅毅疑矣義艤薏蟻衣誼�".split("");
      for (j3 = 0; j3 != D2[235].length; ++j3) if (D2[235][j3].charCodeAt(0) !== 65533) {
        e3[D2[235][j3]] = 60160 + j3;
        d3[60160 + j3] = D2[235][j3];
      }
      D2[236] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������議醫二以伊利吏夷姨履已弛彛怡易李梨泥爾珥理異痍痢移罹而耳肄苡荑裏裡貽貳邇里離飴餌匿溺瀷益翊翌翼謚人仁刃印吝咽因姻寅引忍湮燐璘絪茵藺蚓認隣靭靷鱗麟一佚佾壹日溢逸鎰馹任壬妊姙恁林淋稔臨荏賃入卄�".split("");
      for (j3 = 0; j3 != D2[236].length; ++j3) if (D2[236][j3].charCodeAt(0) !== 65533) {
        e3[D2[236][j3]] = 60416 + j3;
        d3[60416 + j3] = D2[236][j3];
      }
      D2[237] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������立笠粒仍剩孕芿仔刺咨姉姿子字孜恣慈滋炙煮玆瓷疵磁紫者自茨蔗藉諮資雌作勺嚼斫昨灼炸爵綽芍酌雀鵲孱棧殘潺盞岑暫潛箴簪蠶雜丈仗匠場墻壯奬將帳庄張掌暲杖樟檣欌漿牆狀獐璋章粧腸臟臧莊葬蔣薔藏裝贓醬長�".split("");
      for (j3 = 0; j3 != D2[237].length; ++j3) if (D2[237][j3].charCodeAt(0) !== 65533) {
        e3[D2[237][j3]] = 60672 + j3;
        d3[60672 + j3] = D2[237][j3];
      }
      D2[238] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������障再哉在宰才材栽梓渽滓災縡裁財載齋齎爭箏諍錚佇低儲咀姐底抵杵楮樗沮渚狙猪疽箸紵苧菹著藷詛貯躇這邸雎齟勣吊嫡寂摘敵滴狄炙的積笛籍績翟荻謫賊赤跡蹟迪迹適鏑佃佺傳全典前剪塡塼奠專展廛悛戰栓殿氈澱�".split("");
      for (j3 = 0; j3 != D2[238].length; ++j3) if (D2[238][j3].charCodeAt(0) !== 65533) {
        e3[D2[238][j3]] = 60928 + j3;
        d3[60928 + j3] = D2[238][j3];
      }
      D2[239] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������煎琠田甸畑癲筌箋箭篆纏詮輾轉鈿銓錢鐫電顚顫餞切截折浙癤竊節絶占岾店漸点粘霑鮎點接摺蝶丁井亭停偵呈姃定幀庭廷征情挺政整旌晶晸柾楨檉正汀淀淨渟湞瀞炡玎珽町睛碇禎程穽精綎艇訂諪貞鄭酊釘鉦鋌錠霆靖�".split("");
      for (j3 = 0; j3 != D2[239].length; ++j3) if (D2[239][j3].charCodeAt(0) !== 65533) {
        e3[D2[239][j3]] = 61184 + j3;
        d3[61184 + j3] = D2[239][j3];
      }
      D2[240] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������靜頂鼎制劑啼堤帝弟悌提梯濟祭第臍薺製諸蹄醍除際霽題齊俎兆凋助嘲弔彫措操早晁曺曹朝條棗槽漕潮照燥爪璪眺祖祚租稠窕粗糟組繰肇藻蚤詔調趙躁造遭釣阻雕鳥族簇足鏃存尊卒拙猝倧宗從悰慫棕淙琮種終綜縱腫�".split("");
      for (j3 = 0; j3 != D2[240].length; ++j3) if (D2[240][j3].charCodeAt(0) !== 65533) {
        e3[D2[240][j3]] = 61440 + j3;
        d3[61440 + j3] = D2[240][j3];
      }
      D2[241] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������踪踵鍾鐘佐坐左座挫罪主住侏做姝胄呪周嗾奏宙州廚晝朱柱株注洲湊澍炷珠疇籌紂紬綢舟蛛註誅走躊輳週酎酒鑄駐竹粥俊儁准埈寯峻晙樽浚準濬焌畯竣蠢逡遵雋駿茁中仲衆重卽櫛楫汁葺增憎曾拯烝甑症繒蒸證贈之只�".split("");
      for (j3 = 0; j3 != D2[241].length; ++j3) if (D2[241][j3].charCodeAt(0) !== 65533) {
        e3[D2[241][j3]] = 61696 + j3;
        d3[61696 + j3] = D2[241][j3];
      }
      D2[242] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������咫地址志持指摯支旨智枝枳止池沚漬知砥祉祗紙肢脂至芝芷蜘誌識贄趾遲直稙稷織職唇嗔塵振搢晉晋桭榛殄津溱珍瑨璡畛疹盡眞瞋秦縉縝臻蔯袗診賑軫辰進鎭陣陳震侄叱姪嫉帙桎瓆疾秩窒膣蛭質跌迭斟朕什執潗緝輯�".split("");
      for (j3 = 0; j3 != D2[242].length; ++j3) if (D2[242][j3].charCodeAt(0) !== 65533) {
        e3[D2[242][j3]] = 61952 + j3;
        d3[61952 + j3] = D2[242][j3];
      }
      D2[243] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鏶集徵懲澄且侘借叉嗟嵯差次此磋箚茶蹉車遮捉搾着窄錯鑿齪撰澯燦璨瓚竄簒纂粲纘讚贊鑽餐饌刹察擦札紮僭參塹慘慙懺斬站讒讖倉倡創唱娼廠彰愴敞昌昶暢槍滄漲猖瘡窓脹艙菖蒼債埰寀寨彩採砦綵菜蔡采釵冊柵策�".split("");
      for (j3 = 0; j3 != D2[243].length; ++j3) if (D2[243][j3].charCodeAt(0) !== 65533) {
        e3[D2[243][j3]] = 62208 + j3;
        d3[62208 + j3] = D2[243][j3];
      }
      D2[244] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������責凄妻悽處倜刺剔尺慽戚拓擲斥滌瘠脊蹠陟隻仟千喘天川擅泉淺玔穿舛薦賤踐遷釧闡阡韆凸哲喆徹撤澈綴輟轍鐵僉尖沾添甛瞻簽籤詹諂堞妾帖捷牒疊睫諜貼輒廳晴淸聽菁請靑鯖切剃替涕滯締諦逮遞體初剿哨憔抄招梢�".split("");
      for (j3 = 0; j3 != D2[244].length; ++j3) if (D2[244][j3].charCodeAt(0) !== 65533) {
        e3[D2[244][j3]] = 62464 + j3;
        d3[62464 + j3] = D2[244][j3];
      }
      D2[245] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������椒楚樵炒焦硝礁礎秒稍肖艸苕草蕉貂超酢醋醮促囑燭矗蜀觸寸忖村邨叢塚寵悤憁摠總聰蔥銃撮催崔最墜抽推椎楸樞湫皺秋芻萩諏趨追鄒酋醜錐錘鎚雛騶鰍丑畜祝竺筑築縮蓄蹙蹴軸逐春椿瑃出朮黜充忠沖蟲衝衷悴膵萃�".split("");
      for (j3 = 0; j3 != D2[245].length; ++j3) if (D2[245][j3].charCodeAt(0) !== 65533) {
        e3[D2[245][j3]] = 62720 + j3;
        d3[62720 + j3] = D2[245][j3];
      }
      D2[246] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������贅取吹嘴娶就炊翠聚脆臭趣醉驟鷲側仄厠惻測層侈値嗤峙幟恥梔治淄熾痔痴癡稚穉緇緻置致蚩輜雉馳齒則勅飭親七柒漆侵寢枕沈浸琛砧針鍼蟄秤稱快他咤唾墮妥惰打拖朶楕舵陀馱駝倬卓啄坼度托拓擢晫柝濁濯琢琸託�".split("");
      for (j3 = 0; j3 != D2[246].length; ++j3) if (D2[246][j3].charCodeAt(0) !== 65533) {
        e3[D2[246][j3]] = 62976 + j3;
        d3[62976 + j3] = D2[246][j3];
      }
      D2[247] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鐸呑嘆坦彈憚歎灘炭綻誕奪脫探眈耽貪塔搭榻宕帑湯糖蕩兌台太怠態殆汰泰笞胎苔跆邰颱宅擇澤撑攄兎吐土討慟桶洞痛筒統通堆槌腿褪退頹偸套妬投透鬪慝特闖坡婆巴把播擺杷波派爬琶破罷芭跛頗判坂板版瓣販辦鈑�".split("");
      for (j3 = 0; j3 != D2[247].length; ++j3) if (D2[247][j3].charCodeAt(0) !== 65533) {
        e3[D2[247][j3]] = 63232 + j3;
        d3[63232 + j3] = D2[247][j3];
      }
      D2[248] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������阪八叭捌佩唄悖敗沛浿牌狽稗覇貝彭澎烹膨愎便偏扁片篇編翩遍鞭騙貶坪平枰萍評吠嬖幣廢弊斃肺蔽閉陛佈包匍匏咆哺圃布怖抛抱捕暴泡浦疱砲胞脯苞葡蒲袍褒逋鋪飽鮑幅暴曝瀑爆輻俵剽彪慓杓標漂瓢票表豹飇飄驃�".split("");
      for (j3 = 0; j3 != D2[248].length; ++j3) if (D2[248][j3].charCodeAt(0) !== 65533) {
        e3[D2[248][j3]] = 63488 + j3;
        d3[63488 + j3] = D2[248][j3];
      }
      D2[249] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������品稟楓諷豊風馮彼披疲皮被避陂匹弼必泌珌畢疋筆苾馝乏逼下何厦夏廈昰河瑕荷蝦賀遐霞鰕壑學虐謔鶴寒恨悍旱汗漢澣瀚罕翰閑閒限韓割轄函含咸啣喊檻涵緘艦銜陷鹹合哈盒蛤閤闔陜亢伉姮嫦巷恒抗杭桁沆港缸肛航�".split("");
      for (j3 = 0; j3 != D2[249].length; ++j3) if (D2[249][j3].charCodeAt(0) !== 65533) {
        e3[D2[249][j3]] = 63744 + j3;
        d3[63744 + j3] = D2[249][j3];
      }
      D2[250] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������行降項亥偕咳垓奚孩害懈楷海瀣蟹解該諧邂駭骸劾核倖幸杏荇行享向嚮珦鄕響餉饗香噓墟虛許憲櫶獻軒歇險驗奕爀赫革俔峴弦懸晛泫炫玄玹現眩睍絃絢縣舷衒見賢鉉顯孑穴血頁嫌俠協夾峽挾浹狹脅脇莢鋏頰亨兄刑型�".split("");
      for (j3 = 0; j3 != D2[250].length; ++j3) if (D2[250][j3].charCodeAt(0) !== 65533) {
        e3[D2[250][j3]] = 64e3 + j3;
        d3[64e3 + j3] = D2[250][j3];
      }
      D2[251] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������形泂滎瀅灐炯熒珩瑩荊螢衡逈邢鎣馨兮彗惠慧暳蕙蹊醯鞋乎互呼壕壺好岵弧戶扈昊晧毫浩淏湖滸澔濠濩灝狐琥瑚瓠皓祜糊縞胡芦葫蒿虎號蝴護豪鎬頀顥惑或酷婚昏混渾琿魂忽惚笏哄弘汞泓洪烘紅虹訌鴻化和嬅樺火畵�".split("");
      for (j3 = 0; j3 != D2[251].length; ++j3) if (D2[251][j3].charCodeAt(0) !== 65533) {
        e3[D2[251][j3]] = 64256 + j3;
        d3[64256 + j3] = D2[251][j3];
      }
      D2[252] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������禍禾花華話譁貨靴廓擴攫確碻穫丸喚奐宦幻患換歡晥桓渙煥環紈還驩鰥活滑猾豁闊凰幌徨恍惶愰慌晃晄榥況湟滉潢煌璜皇篁簧荒蝗遑隍黃匯回廻徊恢悔懷晦會檜淮澮灰獪繪膾茴蛔誨賄劃獲宖橫鐄哮嚆孝效斅曉梟涍淆�".split("");
      for (j3 = 0; j3 != D2[252].length; ++j3) if (D2[252][j3].charCodeAt(0) !== 65533) {
        e3[D2[252][j3]] = 64512 + j3;
        d3[64512 + j3] = D2[252][j3];
      }
      D2[253] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������爻肴酵驍侯候厚后吼喉嗅帿後朽煦珝逅勛勳塤壎焄熏燻薰訓暈薨喧暄煊萱卉喙毁彙徽揮暉煇諱輝麾休携烋畦虧恤譎鷸兇凶匈洶胸黑昕欣炘痕吃屹紇訖欠欽歆吸恰洽翕興僖凞喜噫囍姬嬉希憙憘戱晞曦熙熹熺犧禧稀羲詰�".split("");
      for (j3 = 0; j3 != D2[253].length; ++j3) if (D2[253][j3].charCodeAt(0) !== 65533) {
        e3[D2[253][j3]] = 64768 + j3;
        d3[64768 + j3] = D2[253][j3];
      }
      return { "enc": e3, "dec": d3 };
    }();
    cptable2[950] = function() {
      var d3 = [], e3 = {}, D2 = [], j3;
      D2[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~��������������������������������������������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[0].length; ++j3) if (D2[0][j3].charCodeAt(0) !== 65533) {
        e3[D2[0][j3]] = 0 + j3;
        d3[0 + j3] = D2[0][j3];
      }
      D2[161] = "����������������������������������������������������������������　，、。．‧；：？！︰…‥﹐﹑﹒·﹔﹕﹖﹗｜–︱—︳╴︴﹏（）︵︶｛｝︷︸〔〕︹︺【】︻︼《》︽︾〈〉︿﹀「」﹁﹂『』﹃﹄﹙﹚����������������������������������﹛﹜﹝﹞‘’“”〝〞‵′＃＆＊※§〃○●△▲◎☆★◇◆□■▽▼㊣℅¯￣＿ˍ﹉﹊﹍﹎﹋﹌﹟﹠﹡＋－×÷±√＜＞＝≦≧≠∞≒≡﹢﹣﹤﹥﹦～∩∪⊥∠∟⊿㏒㏑∫∮∵∴♀♂⊕⊙↑↓←→↖↗↙↘∥∣／�".split("");
      for (j3 = 0; j3 != D2[161].length; ++j3) if (D2[161][j3].charCodeAt(0) !== 65533) {
        e3[D2[161][j3]] = 41216 + j3;
        d3[41216 + j3] = D2[161][j3];
      }
      D2[162] = "����������������������������������������������������������������＼∕﹨＄￥〒￠￡％＠℃℉﹩﹪﹫㏕㎜㎝㎞㏎㎡㎎㎏㏄°兙兛兞兝兡兣嗧瓩糎▁▂▃▄▅▆▇█▏▎▍▌▋▊▉┼┴┬┤├▔─│▕┌┐└┘╭����������������������������������╮╰╯═╞╪╡◢◣◥◤╱╲╳０１２３４５６７８９ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩ〡〢〣〤〥〦〧〨〩十卄卅ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖ�".split("");
      for (j3 = 0; j3 != D2[162].length; ++j3) if (D2[162][j3].charCodeAt(0) !== 65533) {
        e3[D2[162][j3]] = 41472 + j3;
        d3[41472 + j3] = D2[162][j3];
      }
      D2[163] = "����������������������������������������������������������������ｗｘｙｚΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩαβγδεζηθικλμνξοπρστυφχψωㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏ����������������������������������ㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ˙ˉˊˇˋ���������������������������������€������������������������������".split("");
      for (j3 = 0; j3 != D2[163].length; ++j3) if (D2[163][j3].charCodeAt(0) !== 65533) {
        e3[D2[163][j3]] = 41728 + j3;
        d3[41728 + j3] = D2[163][j3];
      }
      D2[164] = "����������������������������������������������������������������一乙丁七乃九了二人儿入八几刀刁力匕十卜又三下丈上丫丸凡久么也乞于亡兀刃勺千叉口土士夕大女子孑孓寸小尢尸山川工己已巳巾干廾弋弓才����������������������������������丑丐不中丰丹之尹予云井互五亢仁什仃仆仇仍今介仄元允內六兮公冗凶分切刈勻勾勿化匹午升卅卞厄友及反壬天夫太夭孔少尤尺屯巴幻廿弔引心戈戶手扎支文斗斤方日曰月木欠止歹毋比毛氏水火爪父爻片牙牛犬王丙�".split("");
      for (j3 = 0; j3 != D2[164].length; ++j3) if (D2[164][j3].charCodeAt(0) !== 65533) {
        e3[D2[164][j3]] = 41984 + j3;
        d3[41984 + j3] = D2[164][j3];
      }
      D2[165] = "����������������������������������������������������������������世丕且丘主乍乏乎以付仔仕他仗代令仙仞充兄冉冊冬凹出凸刊加功包匆北匝仟半卉卡占卯卮去可古右召叮叩叨叼司叵叫另只史叱台句叭叻四囚外����������������������������������央失奴奶孕它尼巨巧左市布平幼弁弘弗必戊打扔扒扑斥旦朮本未末札正母民氐永汁汀氾犯玄玉瓜瓦甘生用甩田由甲申疋白皮皿目矛矢石示禾穴立丞丟乒乓乩亙交亦亥仿伉伙伊伕伍伐休伏仲件任仰仳份企伋光兇兆先全�".split("");
      for (j3 = 0; j3 != D2[165].length; ++j3) if (D2[165][j3].charCodeAt(0) !== 65533) {
        e3[D2[165][j3]] = 42240 + j3;
        d3[42240 + j3] = D2[165][j3];
      }
      D2[166] = "����������������������������������������������������������������共再冰列刑划刎刖劣匈匡匠印危吉吏同吊吐吁吋各向名合吃后吆吒因回囝圳地在圭圬圯圩夙多夷夸妄奸妃好她如妁字存宇守宅安寺尖屹州帆并年����������������������������������式弛忙忖戎戌戍成扣扛托收早旨旬旭曲曳有朽朴朱朵次此死氖汝汗汙江池汐汕污汛汍汎灰牟牝百竹米糸缶羊羽老考而耒耳聿肉肋肌臣自至臼舌舛舟艮色艾虫血行衣西阡串亨位住佇佗佞伴佛何估佐佑伽伺伸佃佔似但佣�".split("");
      for (j3 = 0; j3 != D2[166].length; ++j3) if (D2[166][j3].charCodeAt(0) !== 65533) {
        e3[D2[166][j3]] = 42496 + j3;
        d3[42496 + j3] = D2[166][j3];
      }
      D2[167] = "����������������������������������������������������������������作你伯低伶余佝佈佚兌克免兵冶冷別判利刪刨劫助努劬匣即卵吝吭吞吾否呎吧呆呃吳呈呂君吩告吹吻吸吮吵吶吠吼呀吱含吟听囪困囤囫坊坑址坍����������������������������������均坎圾坐坏圻壯夾妝妒妨妞妣妙妖妍妤妓妊妥孝孜孚孛完宋宏尬局屁尿尾岐岑岔岌巫希序庇床廷弄弟彤形彷役忘忌志忍忱快忸忪戒我抄抗抖技扶抉扭把扼找批扳抒扯折扮投抓抑抆改攻攸旱更束李杏材村杜杖杞杉杆杠�".split("");
      for (j3 = 0; j3 != D2[167].length; ++j3) if (D2[167][j3].charCodeAt(0) !== 65533) {
        e3[D2[167][j3]] = 42752 + j3;
        d3[42752 + j3] = D2[167][j3];
      }
      D2[168] = "����������������������������������������������������������������杓杗步每求汞沙沁沈沉沅沛汪決沐汰沌汨沖沒汽沃汲汾汴沆汶沍沔沘沂灶灼災灸牢牡牠狄狂玖甬甫男甸皂盯矣私秀禿究系罕肖肓肝肘肛肚育良芒����������������������������������芋芍見角言谷豆豕貝赤走足身車辛辰迂迆迅迄巡邑邢邪邦那酉釆里防阮阱阪阬並乖乳事些亞享京佯依侍佳使佬供例來侃佰併侈佩佻侖佾侏侑佺兔兒兕兩具其典冽函刻券刷刺到刮制剁劾劻卒協卓卑卦卷卸卹取叔受味呵�".split("");
      for (j3 = 0; j3 != D2[168].length; ++j3) if (D2[168][j3].charCodeAt(0) !== 65533) {
        e3[D2[168][j3]] = 43008 + j3;
        d3[43008 + j3] = D2[168][j3];
      }
      D2[169] = "����������������������������������������������������������������咖呸咕咀呻呷咄咒咆呼咐呱呶和咚呢周咋命咎固垃坷坪坩坡坦坤坼夜奉奇奈奄奔妾妻委妹妮姑姆姐姍始姓姊妯妳姒姅孟孤季宗定官宜宙宛尚屈居����������������������������������屆岷岡岸岩岫岱岳帘帚帖帕帛帑幸庚店府底庖延弦弧弩往征彿彼忝忠忽念忿怏怔怯怵怖怪怕怡性怩怫怛或戕房戾所承拉拌拄抿拂抹拒招披拓拔拋拈抨抽押拐拙拇拍抵拚抱拘拖拗拆抬拎放斧於旺昔易昌昆昂明昀昏昕昊�".split("");
      for (j3 = 0; j3 != D2[169].length; ++j3) if (D2[169][j3].charCodeAt(0) !== 65533) {
        e3[D2[169][j3]] = 43264 + j3;
        d3[43264 + j3] = D2[169][j3];
      }
      D2[170] = "����������������������������������������������������������������昇服朋杭枋枕東果杳杷枇枝林杯杰板枉松析杵枚枓杼杪杲欣武歧歿氓氛泣注泳沱泌泥河沽沾沼波沫法泓沸泄油況沮泗泅泱沿治泡泛泊沬泯泜泖泠����������������������������������炕炎炒炊炙爬爭爸版牧物狀狎狙狗狐玩玨玟玫玥甽疝疙疚的盂盲直知矽社祀祁秉秈空穹竺糾罔羌羋者肺肥肢肱股肫肩肴肪肯臥臾舍芳芝芙芭芽芟芹花芬芥芯芸芣芰芾芷虎虱初表軋迎返近邵邸邱邶采金長門阜陀阿阻附�".split("");
      for (j3 = 0; j3 != D2[170].length; ++j3) if (D2[170][j3].charCodeAt(0) !== 65533) {
        e3[D2[170][j3]] = 43520 + j3;
        d3[43520 + j3] = D2[170][j3];
      }
      D2[171] = "����������������������������������������������������������������陂隹雨青非亟亭亮信侵侯便俠俑俏保促侶俘俟俊俗侮俐俄係俚俎俞侷兗冒冑冠剎剃削前剌剋則勇勉勃勁匍南卻厚叛咬哀咨哎哉咸咦咳哇哂咽咪品����������������������������������哄哈咯咫咱咻咩咧咿囿垂型垠垣垢城垮垓奕契奏奎奐姜姘姿姣姨娃姥姪姚姦威姻孩宣宦室客宥封屎屏屍屋峙峒巷帝帥帟幽庠度建弈弭彥很待徊律徇後徉怒思怠急怎怨恍恰恨恢恆恃恬恫恪恤扁拜挖按拼拭持拮拽指拱拷�".split("");
      for (j3 = 0; j3 != D2[171].length; ++j3) if (D2[171][j3].charCodeAt(0) !== 65533) {
        e3[D2[171][j3]] = 43776 + j3;
        d3[43776 + j3] = D2[171][j3];
      }
      D2[172] = "����������������������������������������������������������������拯括拾拴挑挂政故斫施既春昭映昧是星昨昱昤曷柿染柱柔某柬架枯柵柩柯柄柑枴柚查枸柏柞柳枰柙柢柝柒歪殃殆段毒毗氟泉洋洲洪流津洌洱洞洗����������������������������������活洽派洶洛泵洹洧洸洩洮洵洎洫炫為炳炬炯炭炸炮炤爰牲牯牴狩狠狡玷珊玻玲珍珀玳甚甭畏界畎畋疫疤疥疢疣癸皆皇皈盈盆盃盅省盹相眉看盾盼眇矜砂研砌砍祆祉祈祇禹禺科秒秋穿突竿竽籽紂紅紀紉紇約紆缸美羿耄�".split("");
      for (j3 = 0; j3 != D2[172].length; ++j3) if (D2[172][j3].charCodeAt(0) !== 65533) {
        e3[D2[172][j3]] = 44032 + j3;
        d3[44032 + j3] = D2[172][j3];
      }
      D2[173] = "����������������������������������������������������������������耐耍耑耶胖胥胚胃胄背胡胛胎胞胤胝致舢苧范茅苣苛苦茄若茂茉苒苗英茁苜苔苑苞苓苟苯茆虐虹虻虺衍衫要觔計訂訃貞負赴赳趴軍軌述迦迢迪迥����������������������������������迭迫迤迨郊郎郁郃酋酊重閂限陋陌降面革韋韭音頁風飛食首香乘亳倌倍倣俯倦倥俸倩倖倆值借倚倒們俺倀倔倨俱倡個候倘俳修倭倪俾倫倉兼冤冥冢凍凌准凋剖剜剔剛剝匪卿原厝叟哨唐唁唷哼哥哲唆哺唔哩哭員唉哮哪�".split("");
      for (j3 = 0; j3 != D2[173].length; ++j3) if (D2[173][j3].charCodeAt(0) !== 65533) {
        e3[D2[173][j3]] = 44288 + j3;
        d3[44288 + j3] = D2[173][j3];
      }
      D2[174] = "����������������������������������������������������������������哦唧唇哽唏圃圄埂埔埋埃堉夏套奘奚娑娘娜娟娛娓姬娠娣娩娥娌娉孫屘宰害家宴宮宵容宸射屑展屐峭峽峻峪峨峰島崁峴差席師庫庭座弱徒徑徐恙����������������������������������恣恥恐恕恭恩息悄悟悚悍悔悌悅悖扇拳挈拿捎挾振捕捂捆捏捉挺捐挽挪挫挨捍捌效敉料旁旅時晉晏晃晒晌晅晁書朔朕朗校核案框桓根桂桔栩梳栗桌桑栽柴桐桀格桃株桅栓栘桁殊殉殷氣氧氨氦氤泰浪涕消涇浦浸海浙涓�".split("");
      for (j3 = 0; j3 != D2[174].length; ++j3) if (D2[174][j3].charCodeAt(0) !== 65533) {
        e3[D2[174][j3]] = 44544 + j3;
        d3[44544 + j3] = D2[174][j3];
      }
      D2[175] = "����������������������������������������������������������������浬涉浮浚浴浩涌涊浹涅浥涔烊烘烤烙烈烏爹特狼狹狽狸狷玆班琉珮珠珪珞畔畝畜畚留疾病症疲疳疽疼疹痂疸皋皰益盍盎眩真眠眨矩砰砧砸砝破砷����������������������������������砥砭砠砟砲祕祐祠祟祖神祝祗祚秤秣秧租秦秩秘窄窈站笆笑粉紡紗紋紊素索純紐紕級紜納紙紛缺罟羔翅翁耆耘耕耙耗耽耿胱脂胰脅胭胴脆胸胳脈能脊胼胯臭臬舀舐航舫舨般芻茫荒荔荊茸荐草茵茴荏茲茹茶茗荀茱茨荃�".split("");
      for (j3 = 0; j3 != D2[175].length; ++j3) if (D2[175][j3].charCodeAt(0) !== 65533) {
        e3[D2[175][j3]] = 44800 + j3;
        d3[44800 + j3] = D2[175][j3];
      }
      D2[176] = "����������������������������������������������������������������虔蚊蚪蚓蚤蚩蚌蚣蚜衰衷袁袂衽衹記訐討訌訕訊託訓訖訏訑豈豺豹財貢起躬軒軔軏辱送逆迷退迺迴逃追逅迸邕郡郝郢酒配酌釘針釗釜釙閃院陣陡����������������������������������陛陝除陘陞隻飢馬骨高鬥鬲鬼乾偺偽停假偃偌做偉健偶偎偕偵側偷偏倏偯偭兜冕凰剪副勒務勘動匐匏匙匿區匾參曼商啪啦啄啞啡啃啊唱啖問啕唯啤唸售啜唬啣唳啁啗圈國圉域堅堊堆埠埤基堂堵執培夠奢娶婁婉婦婪婀�".split("");
      for (j3 = 0; j3 != D2[176].length; ++j3) if (D2[176][j3].charCodeAt(0) !== 65533) {
        e3[D2[176][j3]] = 45056 + j3;
        d3[45056 + j3] = D2[176][j3];
      }
      D2[177] = "����������������������������������������������������������������娼婢婚婆婊孰寇寅寄寂宿密尉專將屠屜屝崇崆崎崛崖崢崑崩崔崙崤崧崗巢常帶帳帷康庸庶庵庾張強彗彬彩彫得徙從徘御徠徜恿患悉悠您惋悴惦悽����������������������������������情悻悵惜悼惘惕惆惟悸惚惇戚戛扈掠控捲掖探接捷捧掘措捱掩掉掃掛捫推掄授掙採掬排掏掀捻捩捨捺敝敖救教敗啟敏敘敕敔斜斛斬族旋旌旎晝晚晤晨晦晞曹勗望梁梯梢梓梵桿桶梱梧梗械梃棄梭梆梅梔條梨梟梡梂欲殺�".split("");
      for (j3 = 0; j3 != D2[177].length; ++j3) if (D2[177][j3].charCodeAt(0) !== 65533) {
        e3[D2[177][j3]] = 45312 + j3;
        d3[45312 + j3] = D2[177][j3];
      }
      D2[178] = "����������������������������������������������������������������毫毬氫涎涼淳淙液淡淌淤添淺清淇淋涯淑涮淞淹涸混淵淅淒渚涵淚淫淘淪深淮淨淆淄涪淬涿淦烹焉焊烽烯爽牽犁猜猛猖猓猙率琅琊球理現琍瓠瓶����������������������������������瓷甜產略畦畢異疏痔痕疵痊痍皎盔盒盛眷眾眼眶眸眺硫硃硎祥票祭移窒窕笠笨笛第符笙笞笮粒粗粕絆絃統紮紹紼絀細紳組累終紲紱缽羞羚翌翎習耜聊聆脯脖脣脫脩脰脤舂舵舷舶船莎莞莘荸莢莖莽莫莒莊莓莉莠荷荻荼�".split("");
      for (j3 = 0; j3 != D2[178].length; ++j3) if (D2[178][j3].charCodeAt(0) !== 65533) {
        e3[D2[178][j3]] = 45568 + j3;
        d3[45568 + j3] = D2[178][j3];
      }
      D2[179] = "����������������������������������������������������������������莆莧處彪蛇蛀蚶蛄蚵蛆蛋蚱蚯蛉術袞袈被袒袖袍袋覓規訪訝訣訥許設訟訛訢豉豚販責貫貨貪貧赧赦趾趺軛軟這逍通逗連速逝逐逕逞造透逢逖逛途����������������������������������部郭都酗野釵釦釣釧釭釩閉陪陵陳陸陰陴陶陷陬雀雪雩章竟頂頃魚鳥鹵鹿麥麻傢傍傅備傑傀傖傘傚最凱割剴創剩勞勝勛博厥啻喀喧啼喊喝喘喂喜喪喔喇喋喃喳單喟唾喲喚喻喬喱啾喉喫喙圍堯堪場堤堰報堡堝堠壹壺奠�".split("");
      for (j3 = 0; j3 != D2[179].length; ++j3) if (D2[179][j3].charCodeAt(0) !== 65533) {
        e3[D2[179][j3]] = 45824 + j3;
        d3[45824 + j3] = D2[179][j3];
      }
      D2[180] = "����������������������������������������������������������������婷媚婿媒媛媧孳孱寒富寓寐尊尋就嵌嵐崴嵇巽幅帽幀幃幾廊廁廂廄弼彭復循徨惑惡悲悶惠愜愣惺愕惰惻惴慨惱愎惶愉愀愒戟扉掣掌描揀揩揉揆揍����������������������������������插揣提握揖揭揮捶援揪換摒揚揹敞敦敢散斑斐斯普晰晴晶景暑智晾晷曾替期朝棺棕棠棘棗椅棟棵森棧棹棒棲棣棋棍植椒椎棉棚楮棻款欺欽殘殖殼毯氮氯氬港游湔渡渲湧湊渠渥渣減湛湘渤湖湮渭渦湯渴湍渺測湃渝渾滋�".split("");
      for (j3 = 0; j3 != D2[180].length; ++j3) if (D2[180][j3].charCodeAt(0) !== 65533) {
        e3[D2[180][j3]] = 46080 + j3;
        d3[46080 + j3] = D2[180][j3];
      }
      D2[181] = "����������������������������������������������������������������溉渙湎湣湄湲湩湟焙焚焦焰無然煮焜牌犄犀猶猥猴猩琺琪琳琢琥琵琶琴琯琛琦琨甥甦畫番痢痛痣痙痘痞痠登發皖皓皴盜睏短硝硬硯稍稈程稅稀窘����������������������������������窗窖童竣等策筆筐筒答筍筋筏筑粟粥絞結絨絕紫絮絲絡給絢絰絳善翔翕耋聒肅腕腔腋腑腎脹腆脾腌腓腴舒舜菩萃菸萍菠菅萋菁華菱菴著萊菰萌菌菽菲菊萸萎萄菜萇菔菟虛蛟蛙蛭蛔蛛蛤蛐蛞街裁裂袱覃視註詠評詞証詁�".split("");
      for (j3 = 0; j3 != D2[181].length; ++j3) if (D2[181][j3].charCodeAt(0) !== 65533) {
        e3[D2[181][j3]] = 46336 + j3;
        d3[46336 + j3] = D2[181][j3];
      }
      D2[182] = "����������������������������������������������������������������詔詛詐詆訴診訶詖象貂貯貼貳貽賁費賀貴買貶貿貸越超趁跎距跋跚跑跌跛跆軻軸軼辜逮逵週逸進逶鄂郵鄉郾酣酥量鈔鈕鈣鈉鈞鈍鈐鈇鈑閔閏開閑����������������������������������間閒閎隊階隋陽隅隆隍陲隄雁雅雄集雇雯雲韌項順須飧飪飯飩飲飭馮馭黃黍黑亂傭債傲傳僅傾催傷傻傯僇剿剷剽募勦勤勢勣匯嗟嗨嗓嗦嗎嗜嗇嗑嗣嗤嗯嗚嗡嗅嗆嗥嗉園圓塞塑塘塗塚塔填塌塭塊塢塒塋奧嫁嫉嫌媾媽媼�".split("");
      for (j3 = 0; j3 != D2[182].length; ++j3) if (D2[182][j3].charCodeAt(0) !== 65533) {
        e3[D2[182][j3]] = 46592 + j3;
        d3[46592 + j3] = D2[182][j3];
      }
      D2[183] = "����������������������������������������������������������������媳嫂媲嵩嵯幌幹廉廈弒彙徬微愚意慈感想愛惹愁愈慎慌慄慍愾愴愧愍愆愷戡戢搓搾搞搪搭搽搬搏搜搔損搶搖搗搆敬斟新暗暉暇暈暖暄暘暍會榔業����������������������������������楚楷楠楔極椰概楊楨楫楞楓楹榆楝楣楛歇歲毀殿毓毽溢溯滓溶滂源溝滇滅溥溘溼溺溫滑準溜滄滔溪溧溴煎煙煩煤煉照煜煬煦煌煥煞煆煨煖爺牒猷獅猿猾瑯瑚瑕瑟瑞瑁琿瑙瑛瑜當畸瘀痰瘁痲痱痺痿痴痳盞盟睛睫睦睞督�".split("");
      for (j3 = 0; j3 != D2[183].length; ++j3) if (D2[183][j3].charCodeAt(0) !== 65533) {
        e3[D2[183][j3]] = 46848 + j3;
        d3[46848 + j3] = D2[183][j3];
      }
      D2[184] = "����������������������������������������������������������������睹睪睬睜睥睨睢矮碎碰碗碘碌碉硼碑碓硿祺祿禁萬禽稜稚稠稔稟稞窟窠筷節筠筮筧粱粳粵經絹綑綁綏絛置罩罪署義羨群聖聘肆肄腱腰腸腥腮腳腫����������������������������������腹腺腦舅艇蒂葷落萱葵葦葫葉葬葛萼萵葡董葩葭葆虞虜號蛹蜓蜈蜇蜀蛾蛻蜂蜃蜆蜊衙裟裔裙補裘裝裡裊裕裒覜解詫該詳試詩詰誇詼詣誠話誅詭詢詮詬詹詻訾詨豢貊貉賊資賈賄貲賃賂賅跡跟跨路跳跺跪跤跦躲較載軾輊�".split("");
      for (j3 = 0; j3 != D2[184].length; ++j3) if (D2[184][j3].charCodeAt(0) !== 65533) {
        e3[D2[184][j3]] = 47104 + j3;
        d3[47104 + j3] = D2[184][j3];
      }
      D2[185] = "����������������������������������������������������������������辟農運遊道遂達逼違遐遇遏過遍遑逾遁鄒鄗酬酪酩釉鈷鉗鈸鈽鉀鈾鉛鉋鉤鉑鈴鉉鉍鉅鈹鈿鉚閘隘隔隕雍雋雉雊雷電雹零靖靴靶預頑頓頊頒頌飼飴����������������������������������飽飾馳馱馴髡鳩麂鼎鼓鼠僧僮僥僖僭僚僕像僑僱僎僩兢凳劃劂匱厭嗾嘀嘛嘗嗽嘔嘆嘉嘍嘎嗷嘖嘟嘈嘐嗶團圖塵塾境墓墊塹墅塽壽夥夢夤奪奩嫡嫦嫩嫗嫖嫘嫣孵寞寧寡寥實寨寢寤察對屢嶄嶇幛幣幕幗幔廓廖弊彆彰徹慇�".split("");
      for (j3 = 0; j3 != D2[185].length; ++j3) if (D2[185][j3].charCodeAt(0) !== 65533) {
        e3[D2[185][j3]] = 47360 + j3;
        d3[47360 + j3] = D2[185][j3];
      }
      D2[186] = "����������������������������������������������������������������愿態慷慢慣慟慚慘慵截撇摘摔撤摸摟摺摑摧搴摭摻敲斡旗旖暢暨暝榜榨榕槁榮槓構榛榷榻榫榴槐槍榭槌榦槃榣歉歌氳漳演滾漓滴漩漾漠漬漏漂漢����������������������������������滿滯漆漱漸漲漣漕漫漯澈漪滬漁滲滌滷熔熙煽熊熄熒爾犒犖獄獐瑤瑣瑪瑰瑭甄疑瘧瘍瘋瘉瘓盡監瞄睽睿睡磁碟碧碳碩碣禎福禍種稱窪窩竭端管箕箋筵算箝箔箏箸箇箄粹粽精綻綰綜綽綾綠緊綴網綱綺綢綿綵綸維緒緇綬�".split("");
      for (j3 = 0; j3 != D2[186].length; ++j3) if (D2[186][j3].charCodeAt(0) !== 65533) {
        e3[D2[186][j3]] = 47616 + j3;
        d3[47616 + j3] = D2[186][j3];
      }
      D2[187] = "����������������������������������������������������������������罰翠翡翟聞聚肇腐膀膏膈膊腿膂臧臺與舔舞艋蓉蒿蓆蓄蒙蒞蒲蒜蓋蒸蓀蓓蒐蒼蓑蓊蜿蜜蜻蜢蜥蜴蜘蝕蜷蜩裳褂裴裹裸製裨褚裯誦誌語誣認誡誓誤����������������������������������說誥誨誘誑誚誧豪貍貌賓賑賒赫趙趕跼輔輒輕輓辣遠遘遜遣遙遞遢遝遛鄙鄘鄞酵酸酷酴鉸銀銅銘銖鉻銓銜銨鉼銑閡閨閩閣閥閤隙障際雌雒需靼鞅韶頗領颯颱餃餅餌餉駁骯骰髦魁魂鳴鳶鳳麼鼻齊億儀僻僵價儂儈儉儅凜�".split("");
      for (j3 = 0; j3 != D2[187].length; ++j3) if (D2[187][j3].charCodeAt(0) !== 65533) {
        e3[D2[187][j3]] = 47872 + j3;
        d3[47872 + j3] = D2[187][j3];
      }
      D2[188] = "����������������������������������������������������������������劇劈劉劍劊勰厲嘮嘻嘹嘲嘿嘴嘩噓噎噗噴嘶嘯嘰墀墟增墳墜墮墩墦奭嬉嫻嬋嫵嬌嬈寮寬審寫層履嶝嶔幢幟幡廢廚廟廝廣廠彈影德徵慶慧慮慝慕憂����������������������������������慼慰慫慾憧憐憫憎憬憚憤憔憮戮摩摯摹撞撲撈撐撰撥撓撕撩撒撮播撫撚撬撙撢撳敵敷數暮暫暴暱樣樟槨樁樞標槽模樓樊槳樂樅槭樑歐歎殤毅毆漿潼澄潑潦潔澆潭潛潸潮澎潺潰潤澗潘滕潯潠潟熟熬熱熨牖犛獎獗瑩璋璃�".split("");
      for (j3 = 0; j3 != D2[188].length; ++j3) if (D2[188][j3].charCodeAt(0) !== 65533) {
        e3[D2[188][j3]] = 48128 + j3;
        d3[48128 + j3] = D2[188][j3];
      }
      D2[189] = "����������������������������������������������������������������瑾璀畿瘠瘩瘟瘤瘦瘡瘢皚皺盤瞎瞇瞌瞑瞋磋磅確磊碾磕碼磐稿稼穀稽稷稻窯窮箭箱範箴篆篇篁箠篌糊締練緯緻緘緬緝編緣線緞緩綞緙緲緹罵罷羯����������������������������������翩耦膛膜膝膠膚膘蔗蔽蔚蓮蔬蔭蔓蔑蔣蔡蔔蓬蔥蓿蔆螂蝴蝶蝠蝦蝸蝨蝙蝗蝌蝓衛衝褐複褒褓褕褊誼諒談諄誕請諸課諉諂調誰論諍誶誹諛豌豎豬賠賞賦賤賬賭賢賣賜質賡赭趟趣踫踐踝踢踏踩踟踡踞躺輝輛輟輩輦輪輜輞�".split("");
      for (j3 = 0; j3 != D2[189].length; ++j3) if (D2[189][j3].charCodeAt(0) !== 65533) {
        e3[D2[189][j3]] = 48384 + j3;
        d3[48384 + j3] = D2[189][j3];
      }
      D2[190] = "����������������������������������������������������������������輥適遮遨遭遷鄰鄭鄧鄱醇醉醋醃鋅銻銷鋪銬鋤鋁銳銼鋒鋇鋰銲閭閱霄霆震霉靠鞍鞋鞏頡頫頜颳養餓餒餘駝駐駟駛駑駕駒駙骷髮髯鬧魅魄魷魯鴆鴉����������������������������������鴃麩麾黎墨齒儒儘儔儐儕冀冪凝劑劓勳噙噫噹噩噤噸噪器噥噱噯噬噢噶壁墾壇壅奮嬝嬴學寰導彊憲憑憩憊懍憶憾懊懈戰擅擁擋撻撼據擄擇擂操撿擒擔撾整曆曉暹曄曇暸樽樸樺橙橫橘樹橄橢橡橋橇樵機橈歙歷氅濂澱澡�".split("");
      for (j3 = 0; j3 != D2[190].length; ++j3) if (D2[190][j3].charCodeAt(0) !== 65533) {
        e3[D2[190][j3]] = 48640 + j3;
        d3[48640 + j3] = D2[190][j3];
      }
      D2[191] = "����������������������������������������������������������������濃澤濁澧澳激澹澶澦澠澴熾燉燐燒燈燕熹燎燙燜燃燄獨璜璣璘璟璞瓢甌甍瘴瘸瘺盧盥瞠瞞瞟瞥磨磚磬磧禦積穎穆穌穋窺篙簑築篤篛篡篩篦糕糖縊����������������������������������縑縈縛縣縞縝縉縐罹羲翰翱翮耨膳膩膨臻興艘艙蕊蕙蕈蕨蕩蕃蕉蕭蕪蕞螃螟螞螢融衡褪褲褥褫褡親覦諦諺諫諱謀諜諧諮諾謁謂諷諭諳諶諼豫豭貓賴蹄踱踴蹂踹踵輻輯輸輳辨辦遵遴選遲遼遺鄴醒錠錶鋸錳錯錢鋼錫錄錚�".split("");
      for (j3 = 0; j3 != D2[191].length; ++j3) if (D2[191][j3].charCodeAt(0) !== 65533) {
        e3[D2[191][j3]] = 48896 + j3;
        d3[48896 + j3] = D2[191][j3];
      }
      D2[192] = "����������������������������������������������������������������錐錦錡錕錮錙閻隧隨險雕霎霑霖霍霓霏靛靜靦鞘頰頸頻頷頭頹頤餐館餞餛餡餚駭駢駱骸骼髻髭鬨鮑鴕鴣鴦鴨鴒鴛默黔龍龜優償儡儲勵嚎嚀嚐嚅嚇����������������������������������嚏壕壓壑壎嬰嬪嬤孺尷屨嶼嶺嶽嶸幫彌徽應懂懇懦懋戲戴擎擊擘擠擰擦擬擱擢擭斂斃曙曖檀檔檄檢檜櫛檣橾檗檐檠歜殮毚氈濘濱濟濠濛濤濫濯澀濬濡濩濕濮濰燧營燮燦燥燭燬燴燠爵牆獰獲璩環璦璨癆療癌盪瞳瞪瞰瞬�".split("");
      for (j3 = 0; j3 != D2[192].length; ++j3) if (D2[192][j3].charCodeAt(0) !== 65533) {
        e3[D2[192][j3]] = 49152 + j3;
        d3[49152 + j3] = D2[192][j3];
      }
      D2[193] = "����������������������������������������������������������������瞧瞭矯磷磺磴磯礁禧禪穗窿簇簍篾篷簌篠糠糜糞糢糟糙糝縮績繆縷縲繃縫總縱繅繁縴縹繈縵縿縯罄翳翼聱聲聰聯聳臆臃膺臂臀膿膽臉膾臨舉艱薪����������������������������������薄蕾薜薑薔薯薛薇薨薊虧蟀蟑螳蟒蟆螫螻螺蟈蟋褻褶襄褸褽覬謎謗謙講謊謠謝謄謐豁谿豳賺賽購賸賻趨蹉蹋蹈蹊轄輾轂轅輿避遽還邁邂邀鄹醣醞醜鍍鎂錨鍵鍊鍥鍋錘鍾鍬鍛鍰鍚鍔闊闋闌闈闆隱隸雖霜霞鞠韓顆颶餵騁�".split("");
      for (j3 = 0; j3 != D2[193].length; ++j3) if (D2[193][j3].charCodeAt(0) !== 65533) {
        e3[D2[193][j3]] = 49408 + j3;
        d3[49408 + j3] = D2[193][j3];
      }
      D2[194] = "����������������������������������������������������������������駿鮮鮫鮪鮭鴻鴿麋黏點黜黝黛鼾齋叢嚕嚮壙壘嬸彝懣戳擴擲擾攆擺擻擷斷曜朦檳檬櫃檻檸櫂檮檯歟歸殯瀉瀋濾瀆濺瀑瀏燻燼燾燸獷獵璧璿甕癖癘����������������������������������癒瞽瞿瞻瞼礎禮穡穢穠竄竅簫簧簪簞簣簡糧織繕繞繚繡繒繙罈翹翻職聶臍臏舊藏薩藍藐藉薰薺薹薦蟯蟬蟲蟠覆覲觴謨謹謬謫豐贅蹙蹣蹦蹤蹟蹕軀轉轍邇邃邈醫醬釐鎔鎊鎖鎢鎳鎮鎬鎰鎘鎚鎗闔闖闐闕離雜雙雛雞霤鞣鞦�".split("");
      for (j3 = 0; j3 != D2[194].length; ++j3) if (D2[194][j3].charCodeAt(0) !== 65533) {
        e3[D2[194][j3]] = 49664 + j3;
        d3[49664 + j3] = D2[194][j3];
      }
      D2[195] = "����������������������������������������������������������������鞭韹額顏題顎顓颺餾餿餽餮馥騎髁鬃鬆魏魎魍鯊鯉鯽鯈鯀鵑鵝鵠黠鼕鼬儳嚥壞壟壢寵龐廬懲懷懶懵攀攏曠曝櫥櫝櫚櫓瀛瀟瀨瀚瀝瀕瀘爆爍牘犢獸����������������������������������獺璽瓊瓣疇疆癟癡矇礙禱穫穩簾簿簸簽簷籀繫繭繹繩繪羅繳羶羹羸臘藩藝藪藕藤藥藷蟻蠅蠍蟹蟾襠襟襖襞譁譜識證譚譎譏譆譙贈贊蹼蹲躇蹶蹬蹺蹴轔轎辭邊邋醱醮鏡鏑鏟鏃鏈鏜鏝鏖鏢鏍鏘鏤鏗鏨關隴難霪霧靡韜韻類�".split("");
      for (j3 = 0; j3 != D2[195].length; ++j3) if (D2[195][j3].charCodeAt(0) !== 65533) {
        e3[D2[195][j3]] = 49920 + j3;
        d3[49920 + j3] = D2[195][j3];
      }
      D2[196] = "����������������������������������������������������������������願顛颼饅饉騖騙鬍鯨鯧鯖鯛鶉鵡鵲鵪鵬麒麗麓麴勸嚨嚷嚶嚴嚼壤孀孃孽寶巉懸懺攘攔攙曦朧櫬瀾瀰瀲爐獻瓏癢癥礦礪礬礫竇競籌籃籍糯糰辮繽繼����������������������������������纂罌耀臚艦藻藹蘑藺蘆蘋蘇蘊蠔蠕襤覺觸議譬警譯譟譫贏贍躉躁躅躂醴釋鐘鐃鏽闡霰飄饒饑馨騫騰騷騵鰓鰍鹹麵黨鼯齟齣齡儷儸囁囀囂夔屬巍懼懾攝攜斕曩櫻欄櫺殲灌爛犧瓖瓔癩矓籐纏續羼蘗蘭蘚蠣蠢蠡蠟襪襬覽譴�".split("");
      for (j3 = 0; j3 != D2[196].length; ++j3) if (D2[196][j3].charCodeAt(0) !== 65533) {
        e3[D2[196][j3]] = 50176 + j3;
        d3[50176 + j3] = D2[196][j3];
      }
      D2[197] = "����������������������������������������������������������������護譽贓躊躍躋轟辯醺鐮鐳鐵鐺鐸鐲鐫闢霸霹露響顧顥饗驅驃驀騾髏魔魑鰭鰥鶯鶴鷂鶸麝黯鼙齜齦齧儼儻囈囊囉孿巔巒彎懿攤權歡灑灘玀瓤疊癮癬����������������������������������禳籠籟聾聽臟襲襯觼讀贖贗躑躓轡酈鑄鑑鑒霽霾韃韁顫饕驕驍髒鬚鱉鰱鰾鰻鷓鷗鼴齬齪龔囌巖戀攣攫攪曬欐瓚竊籤籣籥纓纖纔臢蘸蘿蠱變邐邏鑣鑠鑤靨顯饜驚驛驗髓體髑鱔鱗鱖鷥麟黴囑壩攬灞癱癲矗罐羈蠶蠹衢讓讒�".split("");
      for (j3 = 0; j3 != D2[197].length; ++j3) if (D2[197][j3].charCodeAt(0) !== 65533) {
        e3[D2[197][j3]] = 50432 + j3;
        d3[50432 + j3] = D2[197][j3];
      }
      D2[198] = "����������������������������������������������������������������讖艷贛釀鑪靂靈靄韆顰驟鬢魘鱟鷹鷺鹼鹽鼇齷齲廳欖灣籬籮蠻觀躡釁鑲鑰顱饞髖鬣黌灤矚讚鑷韉驢驥纜讜躪釅鑽鑾鑼鱷鱸黷豔鑿鸚爨驪鬱鸛鸞籲���������������������������������������������������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[198].length; ++j3) if (D2[198][j3].charCodeAt(0) !== 65533) {
        e3[D2[198][j3]] = 50688 + j3;
        d3[50688 + j3] = D2[198][j3];
      }
      D2[201] = "����������������������������������������������������������������乂乜凵匚厂万丌乇亍囗兀屮彳丏冇与丮亓仂仉仈冘勼卬厹圠夃夬尐巿旡殳毌气爿丱丼仨仜仩仡仝仚刌匜卌圢圣夗夯宁宄尒尻屴屳帄庀庂忉戉扐氕����������������������������������氶汃氿氻犮犰玊禸肊阞伎优伬仵伔仱伀价伈伝伂伅伢伓伄仴伒冱刓刉刐劦匢匟卍厊吇囡囟圮圪圴夼妀奼妅奻奾奷奿孖尕尥屼屺屻屾巟幵庄异弚彴忕忔忏扜扞扤扡扦扢扙扠扚扥旯旮朾朹朸朻机朿朼朳氘汆汒汜汏汊汔汋�".split("");
      for (j3 = 0; j3 != D2[201].length; ++j3) if (D2[201][j3].charCodeAt(0) !== 65533) {
        e3[D2[201][j3]] = 51456 + j3;
        d3[51456 + j3] = D2[201][j3];
      }
      D2[202] = "����������������������������������������������������������������汌灱牞犴犵玎甪癿穵网艸艼芀艽艿虍襾邙邗邘邛邔阢阤阠阣佖伻佢佉体佤伾佧佒佟佁佘伭伳伿佡冏冹刜刞刡劭劮匉卣卲厎厏吰吷吪呔呅吙吜吥吘����������������������������������吽呏呁吨吤呇囮囧囥坁坅坌坉坋坒夆奀妦妘妠妗妎妢妐妏妧妡宎宒尨尪岍岏岈岋岉岒岊岆岓岕巠帊帎庋庉庌庈庍弅弝彸彶忒忑忐忭忨忮忳忡忤忣忺忯忷忻怀忴戺抃抌抎抏抔抇扱扻扺扰抁抈扷扽扲扴攷旰旴旳旲旵杅杇�".split("");
      for (j3 = 0; j3 != D2[202].length; ++j3) if (D2[202][j3].charCodeAt(0) !== 65533) {
        e3[D2[202][j3]] = 51712 + j3;
        d3[51712 + j3] = D2[202][j3];
      }
      D2[203] = "����������������������������������������������������������������杙杕杌杈杝杍杚杋毐氙氚汸汧汫沄沋沏汱汯汩沚汭沇沕沜汦汳汥汻沎灴灺牣犿犽狃狆狁犺狅玕玗玓玔玒町甹疔疕皁礽耴肕肙肐肒肜芐芏芅芎芑芓����������������������������������芊芃芄豸迉辿邟邡邥邞邧邠阰阨阯阭丳侘佼侅佽侀侇佶佴侉侄佷佌侗佪侚佹侁佸侐侜侔侞侒侂侕佫佮冞冼冾刵刲刳剆刱劼匊匋匼厒厔咇呿咁咑咂咈呫呺呾呥呬呴呦咍呯呡呠咘呣呧呤囷囹坯坲坭坫坱坰坶垀坵坻坳坴坢�".split("");
      for (j3 = 0; j3 != D2[203].length; ++j3) if (D2[203][j3].charCodeAt(0) !== 65533) {
        e3[D2[203][j3]] = 51968 + j3;
        d3[51968 + j3] = D2[203][j3];
      }
      D2[204] = "����������������������������������������������������������������坨坽夌奅妵妺姏姎妲姌姁妶妼姃姖妱妽姀姈妴姇孢孥宓宕屄屇岮岤岠岵岯岨岬岟岣岭岢岪岧岝岥岶岰岦帗帔帙弨弢弣弤彔徂彾彽忞忥怭怦怙怲怋����������������������������������怴怊怗怳怚怞怬怢怍怐怮怓怑怌怉怜戔戽抭抴拑抾抪抶拊抮抳抯抻抩抰抸攽斨斻昉旼昄昒昈旻昃昋昍昅旽昑昐曶朊枅杬枎枒杶杻枘枆构杴枍枌杺枟枑枙枃杽极杸杹枔欥殀歾毞氝沓泬泫泮泙沶泔沭泧沷泐泂沺泃泆泭泲�".split("");
      for (j3 = 0; j3 != D2[204].length; ++j3) if (D2[204][j3].charCodeAt(0) !== 65533) {
        e3[D2[204][j3]] = 52224 + j3;
        d3[52224 + j3] = D2[204][j3];
      }
      D2[205] = "����������������������������������������������������������������泒泝沴沊沝沀泞泀洰泍泇沰泹泏泩泑炔炘炅炓炆炄炑炖炂炚炃牪狖狋狘狉狜狒狔狚狌狑玤玡玭玦玢玠玬玝瓝瓨甿畀甾疌疘皯盳盱盰盵矸矼矹矻矺����������������������������������矷祂礿秅穸穻竻籵糽耵肏肮肣肸肵肭舠芠苀芫芚芘芛芵芧芮芼芞芺芴芨芡芩苂芤苃芶芢虰虯虭虮豖迒迋迓迍迖迕迗邲邴邯邳邰阹阽阼阺陃俍俅俓侲俉俋俁俔俜俙侻侳俛俇俖侺俀侹俬剄剉勀勂匽卼厗厖厙厘咺咡咭咥哏�".split("");
      for (j3 = 0; j3 != D2[205].length; ++j3) if (D2[205][j3].charCodeAt(0) !== 65533) {
        e3[D2[205][j3]] = 52480 + j3;
        d3[52480 + j3] = D2[205][j3];
      }
      D2[206] = "����������������������������������������������������������������哃茍咷咮哖咶哅哆咠呰咼咢咾呲哞咰垵垞垟垤垌垗垝垛垔垘垏垙垥垚垕壴复奓姡姞姮娀姱姝姺姽姼姶姤姲姷姛姩姳姵姠姾姴姭宨屌峐峘峌峗峋峛����������������������������������峞峚峉峇峊峖峓峔峏峈峆峎峟峸巹帡帢帣帠帤庰庤庢庛庣庥弇弮彖徆怷怹恔恲恞恅恓恇恉恛恌恀恂恟怤恄恘恦恮扂扃拏挍挋拵挎挃拫拹挏挌拸拶挀挓挔拺挕拻拰敁敃斪斿昶昡昲昵昜昦昢昳昫昺昝昴昹昮朏朐柁柲柈枺�".split("");
      for (j3 = 0; j3 != D2[206].length; ++j3) if (D2[206][j3].charCodeAt(0) !== 65533) {
        e3[D2[206][j3]] = 52736 + j3;
        d3[52736 + j3] = D2[206][j3];
      }
      D2[207] = "����������������������������������������������������������������柜枻柸柘柀枷柅柫柤柟枵柍枳柷柶柮柣柂枹柎柧柰枲柼柆柭柌枮柦柛柺柉柊柃柪柋欨殂殄殶毖毘毠氠氡洨洴洭洟洼洿洒洊泚洳洄洙洺洚洑洀洝浂����������������������������������洁洘洷洃洏浀洇洠洬洈洢洉洐炷炟炾炱炰炡炴炵炩牁牉牊牬牰牳牮狊狤狨狫狟狪狦狣玅珌珂珈珅玹玶玵玴珫玿珇玾珃珆玸珋瓬瓮甮畇畈疧疪癹盄眈眃眄眅眊盷盻盺矧矨砆砑砒砅砐砏砎砉砃砓祊祌祋祅祄秕种秏秖秎窀�".split("");
      for (j3 = 0; j3 != D2[207].length; ++j3) if (D2[207][j3].charCodeAt(0) !== 65533) {
        e3[D2[207][j3]] = 52992 + j3;
        d3[52992 + j3] = D2[207][j3];
      }
      D2[208] = "����������������������������������������������������������������穾竑笀笁籺籸籹籿粀粁紃紈紁罘羑羍羾耇耎耏耔耷胘胇胠胑胈胂胐胅胣胙胜胊胕胉胏胗胦胍臿舡芔苙苾苹茇苨茀苕茺苫苖苴苬苡苲苵茌苻苶苰苪����������������������������������苤苠苺苳苭虷虴虼虳衁衎衧衪衩觓訄訇赲迣迡迮迠郱邽邿郕郅邾郇郋郈釔釓陔陏陑陓陊陎倞倅倇倓倢倰倛俵俴倳倷倬俶俷倗倜倠倧倵倯倱倎党冔冓凊凄凅凈凎剡剚剒剞剟剕剢勍匎厞唦哢唗唒哧哳哤唚哿唄唈哫唑唅哱�".split("");
      for (j3 = 0; j3 != D2[208].length; ++j3) if (D2[208][j3].charCodeAt(0) !== 65533) {
        e3[D2[208][j3]] = 53248 + j3;
        d3[53248 + j3] = D2[208][j3];
      }
      D2[209] = "����������������������������������������������������������������唊哻哷哸哠唎唃唋圁圂埌堲埕埒垺埆垽垼垸垶垿埇埐垹埁夎奊娙娖娭娮娕娏娗娊娞娳孬宧宭宬尃屖屔峬峿峮峱峷崀峹帩帨庨庮庪庬弳弰彧恝恚恧����������������������������������恁悢悈悀悒悁悝悃悕悛悗悇悜悎戙扆拲挐捖挬捄捅挶捃揤挹捋捊挼挩捁挴捘捔捙挭捇挳捚捑挸捗捀捈敊敆旆旃旄旂晊晟晇晑朒朓栟栚桉栲栳栻桋桏栖栱栜栵栫栭栯桎桄栴栝栒栔栦栨栮桍栺栥栠欬欯欭欱欴歭肂殈毦毤�".split("");
      for (j3 = 0; j3 != D2[209].length; ++j3) if (D2[209][j3].charCodeAt(0) !== 65533) {
        e3[D2[209][j3]] = 53504 + j3;
        d3[53504 + j3] = D2[209][j3];
      }
      D2[210] = "����������������������������������������������������������������毨毣毢毧氥浺浣浤浶洍浡涒浘浢浭浯涑涍淯浿涆浞浧浠涗浰浼浟涂涘洯浨涋浾涀涄洖涃浻浽浵涐烜烓烑烝烋缹烢烗烒烞烠烔烍烅烆烇烚烎烡牂牸����������������������������������牷牶猀狺狴狾狶狳狻猁珓珙珥珖玼珧珣珩珜珒珛珔珝珚珗珘珨瓞瓟瓴瓵甡畛畟疰痁疻痄痀疿疶疺皊盉眝眛眐眓眒眣眑眕眙眚眢眧砣砬砢砵砯砨砮砫砡砩砳砪砱祔祛祏祜祓祒祑秫秬秠秮秭秪秜秞秝窆窉窅窋窌窊窇竘笐�".split("");
      for (j3 = 0; j3 != D2[210].length; ++j3) if (D2[210][j3].charCodeAt(0) !== 65533) {
        e3[D2[210][j3]] = 53760 + j3;
        d3[53760 + j3] = D2[210][j3];
      }
      D2[211] = "����������������������������������������������������������������笄笓笅笏笈笊笎笉笒粄粑粊粌粈粍粅紞紝紑紎紘紖紓紟紒紏紌罜罡罞罠罝罛羖羒翃翂翀耖耾耹胺胲胹胵脁胻脀舁舯舥茳茭荄茙荑茥荖茿荁茦茜茢����������������������������������荂荎茛茪茈茼荍茖茤茠茷茯茩荇荅荌荓茞茬荋茧荈虓虒蚢蚨蚖蚍蚑蚞蚇蚗蚆蚋蚚蚅蚥蚙蚡蚧蚕蚘蚎蚝蚐蚔衃衄衭衵衶衲袀衱衿衯袃衾衴衼訒豇豗豻貤貣赶赸趵趷趶軑軓迾迵适迿迻逄迼迶郖郠郙郚郣郟郥郘郛郗郜郤酐�".split("");
      for (j3 = 0; j3 != D2[211].length; ++j3) if (D2[211][j3].charCodeAt(0) !== 65533) {
        e3[D2[211][j3]] = 54016 + j3;
        d3[54016 + j3] = D2[211][j3];
      }
      D2[212] = "����������������������������������������������������������������酎酏釕釢釚陜陟隼飣髟鬯乿偰偪偡偞偠偓偋偝偲偈偍偁偛偊偢倕偅偟偩偫偣偤偆偀偮偳偗偑凐剫剭剬剮勖勓匭厜啵啶唼啍啐唴唪啑啢唶唵唰啒啅����������������������������������唌唲啥啎唹啈唭唻啀啋圊圇埻堔埢埶埜埴堀埭埽堈埸堋埳埏堇埮埣埲埥埬埡堎埼堐埧堁堌埱埩埰堍堄奜婠婘婕婧婞娸娵婭婐婟婥婬婓婤婗婃婝婒婄婛婈媎娾婍娹婌婰婩婇婑婖婂婜孲孮寁寀屙崞崋崝崚崠崌崨崍崦崥崏�".split("");
      for (j3 = 0; j3 != D2[212].length; ++j3) if (D2[212][j3].charCodeAt(0) !== 65533) {
        e3[D2[212][j3]] = 54272 + j3;
        d3[54272 + j3] = D2[212][j3];
      }
      D2[213] = "����������������������������������������������������������������崰崒崣崟崮帾帴庱庴庹庲庳弶弸徛徖徟悊悐悆悾悰悺惓惔惏惤惙惝惈悱惛悷惊悿惃惍惀挲捥掊掂捽掽掞掭掝掗掫掎捯掇掐据掯捵掜捭掮捼掤挻掟����������������������������������捸掅掁掑掍捰敓旍晥晡晛晙晜晢朘桹梇梐梜桭桮梮梫楖桯梣梬梩桵桴梲梏桷梒桼桫桲梪梀桱桾梛梖梋梠梉梤桸桻梑梌梊桽欶欳欷欸殑殏殍殎殌氪淀涫涴涳湴涬淩淢涷淶淔渀淈淠淟淖涾淥淜淝淛淴淊涽淭淰涺淕淂淏淉�".split("");
      for (j3 = 0; j3 != D2[213].length; ++j3) if (D2[213][j3].charCodeAt(0) !== 65533) {
        e3[D2[213][j3]] = 54528 + j3;
        d3[54528 + j3] = D2[213][j3];
      }
      D2[214] = "����������������������������������������������������������������淐淲淓淽淗淍淣涻烺焍烷焗烴焌烰焄烳焐烼烿焆焓焀烸烶焋焂焎牾牻牼牿猝猗猇猑猘猊猈狿猏猞玈珶珸珵琄琁珽琇琀珺珼珿琌琋珴琈畤畣痎痒痏����������������������������������痋痌痑痐皏皉盓眹眯眭眱眲眴眳眽眥眻眵硈硒硉硍硊硌砦硅硐祤祧祩祪祣祫祡离秺秸秶秷窏窔窐笵筇笴笥笰笢笤笳笘笪笝笱笫笭笯笲笸笚笣粔粘粖粣紵紽紸紶紺絅紬紩絁絇紾紿絊紻紨罣羕羜羝羛翊翋翍翐翑翇翏翉耟�".split("");
      for (j3 = 0; j3 != D2[214].length; ++j3) if (D2[214][j3].charCodeAt(0) !== 65533) {
        e3[D2[214][j3]] = 54784 + j3;
        d3[54784 + j3] = D2[214][j3];
      }
      D2[215] = "����������������������������������������������������������������耞耛聇聃聈脘脥脙脛脭脟脬脞脡脕脧脝脢舑舸舳舺舴舲艴莐莣莨莍荺荳莤荴莏莁莕莙荵莔莩荽莃莌莝莛莪莋荾莥莯莈莗莰荿莦莇莮荶莚虙虖蚿蚷����������������������������������蛂蛁蛅蚺蚰蛈蚹蚳蚸蛌蚴蚻蚼蛃蚽蚾衒袉袕袨袢袪袚袑袡袟袘袧袙袛袗袤袬袌袓袎覂觖觙觕訰訧訬訞谹谻豜豝豽貥赽赻赹趼跂趹趿跁軘軞軝軜軗軠軡逤逋逑逜逌逡郯郪郰郴郲郳郔郫郬郩酖酘酚酓酕釬釴釱釳釸釤釹釪�".split("");
      for (j3 = 0; j3 != D2[215].length; ++j3) if (D2[215][j3].charCodeAt(0) !== 65533) {
        e3[D2[215][j3]] = 55040 + j3;
        d3[55040 + j3] = D2[215][j3];
      }
      D2[216] = "����������������������������������������������������������������釫釷釨釮镺閆閈陼陭陫陱陯隿靪頄飥馗傛傕傔傞傋傣傃傌傎傝偨傜傒傂傇兟凔匒匑厤厧喑喨喥喭啷噅喢喓喈喏喵喁喣喒喤啽喌喦啿喕喡喎圌堩堷����������������������������������堙堞堧堣堨埵塈堥堜堛堳堿堶堮堹堸堭堬堻奡媯媔媟婺媢媞婸媦婼媥媬媕媮娷媄媊媗媃媋媩婻婽媌媜媏媓媝寪寍寋寔寑寊寎尌尰崷嵃嵫嵁嵋崿崵嵑嵎嵕崳崺嵒崽崱嵙嵂崹嵉崸崼崲崶嵀嵅幄幁彘徦徥徫惉悹惌惢惎惄愔�".split("");
      for (j3 = 0; j3 != D2[216].length; ++j3) if (D2[216][j3].charCodeAt(0) !== 65533) {
        e3[D2[216][j3]] = 55296 + j3;
        d3[55296 + j3] = D2[216][j3];
      }
      D2[217] = "����������������������������������������������������������������惲愊愖愅惵愓惸惼惾惁愃愘愝愐惿愄愋扊掔掱掰揎揥揨揯揃撝揳揊揠揶揕揲揵摡揟掾揝揜揄揘揓揂揇揌揋揈揰揗揙攲敧敪敤敜敨敥斌斝斞斮旐旒����������������������������������晼晬晻暀晱晹晪晲朁椌棓椄棜椪棬棪棱椏棖棷棫棤棶椓椐棳棡椇棌椈楰梴椑棯棆椔棸棐棽棼棨椋椊椗棎棈棝棞棦棴棑椆棔棩椕椥棇欹欻欿欼殔殗殙殕殽毰毲毳氰淼湆湇渟湉溈渼渽湅湢渫渿湁湝湳渜渳湋湀湑渻渃渮湞�".split("");
      for (j3 = 0; j3 != D2[217].length; ++j3) if (D2[217][j3].charCodeAt(0) !== 65533) {
        e3[D2[217][j3]] = 55552 + j3;
        d3[55552 + j3] = D2[217][j3];
      }
      D2[218] = "����������������������������������������������������������������湨湜湡渱渨湠湱湫渹渢渰湓湥渧湸湤湷湕湹湒湦渵渶湚焠焞焯烻焮焱焣焥焢焲焟焨焺焛牋牚犈犉犆犅犋猒猋猰猢猱猳猧猲猭猦猣猵猌琮琬琰琫琖����������������������������������琚琡琭琱琤琣琝琩琠琲瓻甯畯畬痧痚痡痦痝痟痤痗皕皒盚睆睇睄睍睅睊睎睋睌矞矬硠硤硥硜硭硱硪确硰硩硨硞硢祴祳祲祰稂稊稃稌稄窙竦竤筊笻筄筈筌筎筀筘筅粢粞粨粡絘絯絣絓絖絧絪絏絭絜絫絒絔絩絑絟絎缾缿罥�".split("");
      for (j3 = 0; j3 != D2[218].length; ++j3) if (D2[218][j3].charCodeAt(0) !== 65533) {
        e3[D2[218][j3]] = 55808 + j3;
        d3[55808 + j3] = D2[218][j3];
      }
      D2[219] = "����������������������������������������������������������������罦羢羠羡翗聑聏聐胾胔腃腊腒腏腇脽腍脺臦臮臷臸臹舄舼舽舿艵茻菏菹萣菀菨萒菧菤菼菶萐菆菈菫菣莿萁菝菥菘菿菡菋菎菖菵菉萉萏菞萑萆菂菳����������������������������������菕菺菇菑菪萓菃菬菮菄菻菗菢萛菛菾蛘蛢蛦蛓蛣蛚蛪蛝蛫蛜蛬蛩蛗蛨蛑衈衖衕袺裗袹袸裀袾袶袼袷袽袲褁裉覕覘覗觝觚觛詎詍訹詙詀詗詘詄詅詒詈詑詊詌詏豟貁貀貺貾貰貹貵趄趀趉跘跓跍跇跖跜跏跕跙跈跗跅軯軷軺�".split("");
      for (j3 = 0; j3 != D2[219].length; ++j3) if (D2[219][j3].charCodeAt(0) !== 65533) {
        e3[D2[219][j3]] = 56064 + j3;
        d3[56064 + j3] = D2[219][j3];
      }
      D2[220] = "����������������������������������������������������������������軹軦軮軥軵軧軨軶軫軱軬軴軩逭逴逯鄆鄬鄄郿郼鄈郹郻鄁鄀鄇鄅鄃酡酤酟酢酠鈁鈊鈥鈃鈚鈦鈏鈌鈀鈒釿釽鈆鈄鈧鈂鈜鈤鈙鈗鈅鈖镻閍閌閐隇陾隈����������������������������������隉隃隀雂雈雃雱雰靬靰靮頇颩飫鳦黹亃亄亶傽傿僆傮僄僊傴僈僂傰僁傺傱僋僉傶傸凗剺剸剻剼嗃嗛嗌嗐嗋嗊嗝嗀嗔嗄嗩喿嗒喍嗏嗕嗢嗖嗈嗲嗍嗙嗂圔塓塨塤塏塍塉塯塕塎塝塙塥塛堽塣塱壼嫇嫄嫋媺媸媱媵媰媿嫈媻嫆�".split("");
      for (j3 = 0; j3 != D2[220].length; ++j3) if (D2[220][j3].charCodeAt(0) !== 65533) {
        e3[D2[220][j3]] = 56320 + j3;
        d3[56320 + j3] = D2[220][j3];
      }
      D2[221] = "����������������������������������������������������������������媷嫀嫊媴媶嫍媹媐寖寘寙尟尳嵱嵣嵊嵥嵲嵬嵞嵨嵧嵢巰幏幎幊幍幋廅廌廆廋廇彀徯徭惷慉慊愫慅愶愲愮慆愯慏愩慀戠酨戣戥戤揅揱揫搐搒搉搠搤����������������������������������搳摃搟搕搘搹搷搢搣搌搦搰搨摁搵搯搊搚摀搥搧搋揧搛搮搡搎敯斒旓暆暌暕暐暋暊暙暔晸朠楦楟椸楎楢楱椿楅楪椹楂楗楙楺楈楉椵楬椳椽楥棰楸椴楩楀楯楄楶楘楁楴楌椻楋椷楜楏楑椲楒椯楻椼歆歅歃歂歈歁殛嗀毻毼�".split("");
      for (j3 = 0; j3 != D2[221].length; ++j3) if (D2[221][j3].charCodeAt(0) !== 65533) {
        e3[D2[221][j3]] = 56576 + j3;
        d3[56576 + j3] = D2[221][j3];
      }
      D2[222] = "����������������������������������������������������������������毹毷毸溛滖滈溏滀溟溓溔溠溱溹滆滒溽滁溞滉溷溰滍溦滏溲溾滃滜滘溙溒溎溍溤溡溿溳滐滊溗溮溣煇煔煒煣煠煁煝煢煲煸煪煡煂煘煃煋煰煟煐煓����������������������������������煄煍煚牏犍犌犑犐犎猼獂猻猺獀獊獉瑄瑊瑋瑒瑑瑗瑀瑏瑐瑎瑂瑆瑍瑔瓡瓿瓾瓽甝畹畷榃痯瘏瘃痷痾痼痹痸瘐痻痶痭痵痽皙皵盝睕睟睠睒睖睚睩睧睔睙睭矠碇碚碔碏碄碕碅碆碡碃硹碙碀碖硻祼禂祽祹稑稘稙稒稗稕稢稓�".split("");
      for (j3 = 0; j3 != D2[222].length; ++j3) if (D2[222][j3].charCodeAt(0) !== 65533) {
        e3[D2[222][j3]] = 56832 + j3;
        d3[56832 + j3] = D2[222][j3];
      }
      D2[223] = "����������������������������������������������������������������稛稐窣窢窞竫筦筤筭筴筩筲筥筳筱筰筡筸筶筣粲粴粯綈綆綀綍絿綅絺綎絻綃絼綌綔綄絽綒罭罫罧罨罬羦羥羧翛翜耡腤腠腷腜腩腛腢腲朡腞腶腧腯����������������������������������腄腡舝艉艄艀艂艅蓱萿葖葶葹蒏蒍葥葑葀蒆葧萰葍葽葚葙葴葳葝蔇葞萷萺萴葺葃葸萲葅萩菙葋萯葂萭葟葰萹葎葌葒葯蓅蒎萻葇萶萳葨葾葄萫葠葔葮葐蜋蜄蛷蜌蛺蛖蛵蝍蛸蜎蜉蜁蛶蜍蜅裖裋裍裎裞裛裚裌裐覅覛觟觥觤�".split("");
      for (j3 = 0; j3 != D2[223].length; ++j3) if (D2[223][j3].charCodeAt(0) !== 65533) {
        e3[D2[223][j3]] = 57088 + j3;
        d3[57088 + j3] = D2[223][j3];
      }
      D2[224] = "����������������������������������������������������������������觡觠觢觜触詶誆詿詡訿詷誂誄詵誃誁詴詺谼豋豊豥豤豦貆貄貅賌赨赩趑趌趎趏趍趓趔趐趒跰跠跬跱跮跐跩跣跢跧跲跫跴輆軿輁輀輅輇輈輂輋遒逿����������������������������������遄遉逽鄐鄍鄏鄑鄖鄔鄋鄎酮酯鉈鉒鈰鈺鉦鈳鉥鉞銃鈮鉊鉆鉭鉬鉏鉠鉧鉯鈶鉡鉰鈱鉔鉣鉐鉲鉎鉓鉌鉖鈲閟閜閞閛隒隓隑隗雎雺雽雸雵靳靷靸靲頏頍頎颬飶飹馯馲馰馵骭骫魛鳪鳭鳧麀黽僦僔僗僨僳僛僪僝僤僓僬僰僯僣僠�".split("");
      for (j3 = 0; j3 != D2[224].length; ++j3) if (D2[224][j3].charCodeAt(0) !== 65533) {
        e3[D2[224][j3]] = 57344 + j3;
        d3[57344 + j3] = D2[224][j3];
      }
      D2[225] = "����������������������������������������������������������������凘劀劁勩勫匰厬嘧嘕嘌嘒嗼嘏嘜嘁嘓嘂嗺嘝嘄嗿嗹墉塼墐墘墆墁塿塴墋塺墇墑墎塶墂墈塻墔墏壾奫嫜嫮嫥嫕嫪嫚嫭嫫嫳嫢嫠嫛嫬嫞嫝嫙嫨嫟孷寠����������������������������������寣屣嶂嶀嵽嶆嵺嶁嵷嶊嶉嶈嵾嵼嶍嵹嵿幘幙幓廘廑廗廎廜廕廙廒廔彄彃彯徶愬愨慁慞慱慳慒慓慲慬憀慴慔慺慛慥愻慪慡慖戩戧戫搫摍摛摝摴摶摲摳摽摵摦撦摎撂摞摜摋摓摠摐摿搿摬摫摙摥摷敳斠暡暠暟朅朄朢榱榶槉�".split("");
      for (j3 = 0; j3 != D2[225].length; ++j3) if (D2[225][j3].charCodeAt(0) !== 65533) {
        e3[D2[225][j3]] = 57600 + j3;
        d3[57600 + j3] = D2[225][j3];
      }
      D2[226] = "����������������������������������������������������������������榠槎榖榰榬榼榑榙榎榧榍榩榾榯榿槄榽榤槔榹槊榚槏榳榓榪榡榞槙榗榐槂榵榥槆歊歍歋殞殟殠毃毄毾滎滵滱漃漥滸漷滻漮漉潎漙漚漧漘漻漒滭漊����������������������������������漶潳滹滮漭潀漰漼漵滫漇漎潃漅滽滶漹漜滼漺漟漍漞漈漡熇熐熉熀熅熂熏煻熆熁熗牄牓犗犕犓獃獍獑獌瑢瑳瑱瑵瑲瑧瑮甀甂甃畽疐瘖瘈瘌瘕瘑瘊瘔皸瞁睼瞅瞂睮瞀睯睾瞃碲碪碴碭碨硾碫碞碥碠碬碢碤禘禊禋禖禕禔禓�".split("");
      for (j3 = 0; j3 != D2[226].length; ++j3) if (D2[226][j3].charCodeAt(0) !== 65533) {
        e3[D2[226][j3]] = 57856 + j3;
        d3[57856 + j3] = D2[226][j3];
      }
      D2[227] = "����������������������������������������������������������������禗禈禒禐稫穊稰稯稨稦窨窫窬竮箈箜箊箑箐箖箍箌箛箎箅箘劄箙箤箂粻粿粼粺綧綷緂綣綪緁緀緅綝緎緄緆緋緌綯綹綖綼綟綦綮綩綡緉罳翢翣翥翞����������������������������������耤聝聜膉膆膃膇膍膌膋舕蒗蒤蒡蒟蒺蓎蓂蒬蒮蒫蒹蒴蓁蓍蒪蒚蒱蓐蒝蒧蒻蒢蒔蓇蓌蒛蒩蒯蒨蓖蒘蒶蓏蒠蓗蓔蓒蓛蒰蒑虡蜳蜣蜨蝫蝀蜮蜞蜡蜙蜛蝃蜬蝁蜾蝆蜠蜲蜪蜭蜼蜒蜺蜱蜵蝂蜦蜧蜸蜤蜚蜰蜑裷裧裱裲裺裾裮裼裶裻�".split("");
      for (j3 = 0; j3 != D2[227].length; ++j3) if (D2[227][j3].charCodeAt(0) !== 65533) {
        e3[D2[227][j3]] = 58112 + j3;
        d3[58112 + j3] = D2[227][j3];
      }
      D2[228] = "����������������������������������������������������������������裰裬裫覝覡覟覞觩觫觨誫誙誋誒誏誖谽豨豩賕賏賗趖踉踂跿踍跽踊踃踇踆踅跾踀踄輐輑輎輍鄣鄜鄠鄢鄟鄝鄚鄤鄡鄛酺酲酹酳銥銤鉶銛鉺銠銔銪銍����������������������������������銦銚銫鉹銗鉿銣鋮銎銂銕銢鉽銈銡銊銆銌銙銧鉾銇銩銝銋鈭隞隡雿靘靽靺靾鞃鞀鞂靻鞄鞁靿韎韍頖颭颮餂餀餇馝馜駃馹馻馺駂馽駇骱髣髧鬾鬿魠魡魟鳱鳲鳵麧僿儃儰僸儆儇僶僾儋儌僽儊劋劌勱勯噈噂噌嘵噁噊噉噆噘�".split("");
      for (j3 = 0; j3 != D2[228].length; ++j3) if (D2[228][j3].charCodeAt(0) !== 65533) {
        e3[D2[228][j3]] = 58368 + j3;
        d3[58368 + j3] = D2[228][j3];
      }
      D2[229] = "����������������������������������������������������������������噚噀嘳嘽嘬嘾嘸嘪嘺圚墫墝墱墠墣墯墬墥墡壿嫿嫴嫽嫷嫶嬃嫸嬂嫹嬁嬇嬅嬏屧嶙嶗嶟嶒嶢嶓嶕嶠嶜嶡嶚嶞幩幝幠幜緳廛廞廡彉徲憋憃慹憱憰憢憉����������������������������������憛憓憯憭憟憒憪憡憍慦憳戭摮摰撖撠撅撗撜撏撋撊撌撣撟摨撱撘敶敺敹敻斲斳暵暰暩暲暷暪暯樀樆樗槥槸樕槱槤樠槿槬槢樛樝槾樧槲槮樔槷槧橀樈槦槻樍槼槫樉樄樘樥樏槶樦樇槴樖歑殥殣殢殦氁氀毿氂潁漦潾澇濆澒�".split("");
      for (j3 = 0; j3 != D2[229].length; ++j3) if (D2[229][j3].charCodeAt(0) !== 65533) {
        e3[D2[229][j3]] = 58624 + j3;
        d3[58624 + j3] = D2[229][j3];
      }
      D2[230] = "����������������������������������������������������������������澍澉澌潢潏澅潚澖潶潬澂潕潲潒潐潗澔澓潝漀潡潫潽潧澐潓澋潩潿澕潣潷潪潻熲熯熛熰熠熚熩熵熝熥熞熤熡熪熜熧熳犘犚獘獒獞獟獠獝獛獡獚獙����������������������������������獢璇璉璊璆璁瑽璅璈瑼瑹甈甇畾瘥瘞瘙瘝瘜瘣瘚瘨瘛皜皝皞皛瞍瞏瞉瞈磍碻磏磌磑磎磔磈磃磄磉禚禡禠禜禢禛歶稹窲窴窳箷篋箾箬篎箯箹篊箵糅糈糌糋緷緛緪緧緗緡縃緺緦緶緱緰緮緟罶羬羰羭翭翫翪翬翦翨聤聧膣膟�".split("");
      for (j3 = 0; j3 != D2[230].length; ++j3) if (D2[230][j3].charCodeAt(0) !== 65533) {
        e3[D2[230][j3]] = 58880 + j3;
        d3[58880 + j3] = D2[230][j3];
      }
      D2[231] = "����������������������������������������������������������������膞膕膢膙膗舖艏艓艒艐艎艑蔤蔻蔏蔀蔩蔎蔉蔍蔟蔊蔧蔜蓻蔫蓺蔈蔌蓴蔪蓲蔕蓷蓫蓳蓼蔒蓪蓩蔖蓾蔨蔝蔮蔂蓽蔞蓶蔱蔦蓧蓨蓰蓯蓹蔘蔠蔰蔋蔙蔯虢����������������������������������蝖蝣蝤蝷蟡蝳蝘蝔蝛蝒蝡蝚蝑蝞蝭蝪蝐蝎蝟蝝蝯蝬蝺蝮蝜蝥蝏蝻蝵蝢蝧蝩衚褅褌褔褋褗褘褙褆褖褑褎褉覢覤覣觭觰觬諏諆誸諓諑諔諕誻諗誾諀諅諘諃誺誽諙谾豍貏賥賟賙賨賚賝賧趠趜趡趛踠踣踥踤踮踕踛踖踑踙踦踧�".split("");
      for (j3 = 0; j3 != D2[231].length; ++j3) if (D2[231][j3].charCodeAt(0) !== 65533) {
        e3[D2[231][j3]] = 59136 + j3;
        d3[59136 + j3] = D2[231][j3];
      }
      D2[232] = "����������������������������������������������������������������踔踒踘踓踜踗踚輬輤輘輚輠輣輖輗遳遰遯遧遫鄯鄫鄩鄪鄲鄦鄮醅醆醊醁醂醄醀鋐鋃鋄鋀鋙銶鋏鋱鋟鋘鋩鋗鋝鋌鋯鋂鋨鋊鋈鋎鋦鋍鋕鋉鋠鋞鋧鋑鋓����������������������������������銵鋡鋆銴镼閬閫閮閰隤隢雓霅霈霂靚鞊鞎鞈韐韏頞頝頦頩頨頠頛頧颲餈飺餑餔餖餗餕駜駍駏駓駔駎駉駖駘駋駗駌骳髬髫髳髲髱魆魃魧魴魱魦魶魵魰魨魤魬鳼鳺鳽鳿鳷鴇鴀鳹鳻鴈鴅鴄麃黓鼏鼐儜儓儗儚儑凞匴叡噰噠噮�".split("");
      for (j3 = 0; j3 != D2[232].length; ++j3) if (D2[232][j3].charCodeAt(0) !== 65533) {
        e3[D2[232][j3]] = 59392 + j3;
        d3[59392 + j3] = D2[232][j3];
      }
      D2[233] = "����������������������������������������������������������������噳噦噣噭噲噞噷圜圛壈墽壉墿墺壂墼壆嬗嬙嬛嬡嬔嬓嬐嬖嬨嬚嬠嬞寯嶬嶱嶩嶧嶵嶰嶮嶪嶨嶲嶭嶯嶴幧幨幦幯廩廧廦廨廥彋徼憝憨憖懅憴懆懁懌憺����������������������������������憿憸憌擗擖擐擏擉撽撉擃擛擳擙攳敿敼斢曈暾曀曊曋曏暽暻暺曌朣樴橦橉橧樲橨樾橝橭橶橛橑樨橚樻樿橁橪橤橐橏橔橯橩橠樼橞橖橕橍橎橆歕歔歖殧殪殫毈毇氄氃氆澭濋澣濇澼濎濈潞濄澽澞濊澨瀄澥澮澺澬澪濏澿澸�".split("");
      for (j3 = 0; j3 != D2[233].length; ++j3) if (D2[233][j3].charCodeAt(0) !== 65533) {
        e3[D2[233][j3]] = 59648 + j3;
        d3[59648 + j3] = D2[233][j3];
      }
      D2[234] = "����������������������������������������������������������������澢濉澫濍澯澲澰燅燂熿熸燖燀燁燋燔燊燇燏熽燘熼燆燚燛犝犞獩獦獧獬獥獫獪瑿璚璠璔璒璕璡甋疀瘯瘭瘱瘽瘳瘼瘵瘲瘰皻盦瞚瞝瞡瞜瞛瞢瞣瞕瞙����������������������������������瞗磝磩磥磪磞磣磛磡磢磭磟磠禤穄穈穇窶窸窵窱窷篞篣篧篝篕篥篚篨篹篔篪篢篜篫篘篟糒糔糗糐糑縒縡縗縌縟縠縓縎縜縕縚縢縋縏縖縍縔縥縤罃罻罼罺羱翯耪耩聬膱膦膮膹膵膫膰膬膴膲膷膧臲艕艖艗蕖蕅蕫蕍蕓蕡蕘�".split("");
      for (j3 = 0; j3 != D2[234].length; ++j3) if (D2[234][j3].charCodeAt(0) !== 65533) {
        e3[D2[234][j3]] = 59904 + j3;
        d3[59904 + j3] = D2[234][j3];
      }
      D2[235] = "����������������������������������������������������������������蕀蕆蕤蕁蕢蕄蕑蕇蕣蔾蕛蕱蕎蕮蕵蕕蕧蕠薌蕦蕝蕔蕥蕬虣虥虤螛螏螗螓螒螈螁螖螘蝹螇螣螅螐螑螝螄螔螜螚螉褞褦褰褭褮褧褱褢褩褣褯褬褟觱諠����������������������������������諢諲諴諵諝謔諤諟諰諈諞諡諨諿諯諻貑貒貐賵賮賱賰賳赬赮趥趧踳踾踸蹀蹅踶踼踽蹁踰踿躽輶輮輵輲輹輷輴遶遹遻邆郺鄳鄵鄶醓醐醑醍醏錧錞錈錟錆錏鍺錸錼錛錣錒錁鍆錭錎錍鋋錝鋺錥錓鋹鋷錴錂錤鋿錩錹錵錪錔錌�".split("");
      for (j3 = 0; j3 != D2[235].length; ++j3) if (D2[235][j3].charCodeAt(0) !== 65533) {
        e3[D2[235][j3]] = 60160 + j3;
        d3[60160 + j3] = D2[235][j3];
      }
      D2[236] = "����������������������������������������������������������������錋鋾錉錀鋻錖閼闍閾閹閺閶閿閵閽隩雔霋霒霐鞙鞗鞔韰韸頵頯頲餤餟餧餩馞駮駬駥駤駰駣駪駩駧骹骿骴骻髶髺髹髷鬳鮀鮅鮇魼魾魻鮂鮓鮒鮐魺鮕����������������������������������魽鮈鴥鴗鴠鴞鴔鴩鴝鴘鴢鴐鴙鴟麈麆麇麮麭黕黖黺鼒鼽儦儥儢儤儠儩勴嚓嚌嚍嚆嚄嚃噾嚂噿嚁壖壔壏壒嬭嬥嬲嬣嬬嬧嬦嬯嬮孻寱寲嶷幬幪徾徻懃憵憼懧懠懥懤懨懞擯擩擣擫擤擨斁斀斶旚曒檍檖檁檥檉檟檛檡檞檇檓檎�".split("");
      for (j3 = 0; j3 != D2[236].length; ++j3) if (D2[236][j3].charCodeAt(0) !== 65533) {
        e3[D2[236][j3]] = 60416 + j3;
        d3[60416 + j3] = D2[236][j3];
      }
      D2[237] = "����������������������������������������������������������������檕檃檨檤檑橿檦檚檅檌檒歛殭氉濌澩濴濔濣濜濭濧濦濞濲濝濢濨燡燱燨燲燤燰燢獳獮獯璗璲璫璐璪璭璱璥璯甐甑甒甏疄癃癈癉癇皤盩瞵瞫瞲瞷瞶����������������������������������瞴瞱瞨矰磳磽礂磻磼磲礅磹磾礄禫禨穜穛穖穘穔穚窾竀竁簅簏篲簀篿篻簎篴簋篳簂簉簃簁篸篽簆篰篱簐簊糨縭縼繂縳顈縸縪繉繀繇縩繌縰縻縶繄縺罅罿罾罽翴翲耬膻臄臌臊臅臇膼臩艛艚艜薃薀薏薧薕薠薋薣蕻薤薚薞�".split("");
      for (j3 = 0; j3 != D2[237].length; ++j3) if (D2[237][j3].charCodeAt(0) !== 65533) {
        e3[D2[237][j3]] = 60672 + j3;
        d3[60672 + j3] = D2[237][j3];
      }
      D2[238] = "����������������������������������������������������������������蕷蕼薉薡蕺蕸蕗薎薖薆薍薙薝薁薢薂薈薅蕹蕶薘薐薟虨螾螪螭蟅螰螬螹螵螼螮蟉蟃蟂蟌螷螯蟄蟊螴螶螿螸螽蟞螲褵褳褼褾襁襒褷襂覭覯覮觲觳謞����������������������������������謘謖謑謅謋謢謏謒謕謇謍謈謆謜謓謚豏豰豲豱豯貕貔賹赯蹎蹍蹓蹐蹌蹇轃轀邅遾鄸醚醢醛醙醟醡醝醠鎡鎃鎯鍤鍖鍇鍼鍘鍜鍶鍉鍐鍑鍠鍭鎏鍌鍪鍹鍗鍕鍒鍏鍱鍷鍻鍡鍞鍣鍧鎀鍎鍙闇闀闉闃闅閷隮隰隬霠霟霘霝霙鞚鞡鞜�".split("");
      for (j3 = 0; j3 != D2[238].length; ++j3) if (D2[238][j3].charCodeAt(0) !== 65533) {
        e3[D2[238][j3]] = 60928 + j3;
        d3[60928 + j3] = D2[238][j3];
      }
      D2[239] = "����������������������������������������������������������������鞞鞝韕韔韱顁顄顊顉顅顃餥餫餬餪餳餲餯餭餱餰馘馣馡騂駺駴駷駹駸駶駻駽駾駼騃骾髾髽鬁髼魈鮚鮨鮞鮛鮦鮡鮥鮤鮆鮢鮠鮯鴳鵁鵧鴶鴮鴯鴱鴸鴰����������������������������������鵅鵂鵃鴾鴷鵀鴽翵鴭麊麉麍麰黈黚黻黿鼤鼣鼢齔龠儱儭儮嚘嚜嚗嚚嚝嚙奰嬼屩屪巀幭幮懘懟懭懮懱懪懰懫懖懩擿攄擽擸攁攃擼斔旛曚曛曘櫅檹檽櫡櫆檺檶檷櫇檴檭歞毉氋瀇瀌瀍瀁瀅瀔瀎濿瀀濻瀦濼濷瀊爁燿燹爃燽獶�".split("");
      for (j3 = 0; j3 != D2[239].length; ++j3) if (D2[239][j3].charCodeAt(0) !== 65533) {
        e3[D2[239][j3]] = 61184 + j3;
        d3[61184 + j3] = D2[239][j3];
      }
      D2[240] = "����������������������������������������������������������������璸瓀璵瓁璾璶璻瓂甔甓癜癤癙癐癓癗癚皦皽盬矂瞺磿礌礓礔礉礐礒礑禭禬穟簜簩簙簠簟簭簝簦簨簢簥簰繜繐繖繣繘繢繟繑繠繗繓羵羳翷翸聵臑臒����������������������������������臐艟艞薴藆藀藃藂薳薵薽藇藄薿藋藎藈藅薱薶藒蘤薸薷薾虩蟧蟦蟢蟛蟫蟪蟥蟟蟳蟤蟔蟜蟓蟭蟘蟣螤蟗蟙蠁蟴蟨蟝襓襋襏襌襆襐襑襉謪謧謣謳謰謵譇謯謼謾謱謥謷謦謶謮謤謻謽謺豂豵貙貘貗賾贄贂贀蹜蹢蹠蹗蹖蹞蹥蹧�".split("");
      for (j3 = 0; j3 != D2[240].length; ++j3) if (D2[240][j3].charCodeAt(0) !== 65533) {
        e3[D2[240][j3]] = 61440 + j3;
        d3[61440 + j3] = D2[240][j3];
      }
      D2[241] = "����������������������������������������������������������������蹛蹚蹡蹝蹩蹔轆轇轈轋鄨鄺鄻鄾醨醥醧醯醪鎵鎌鎒鎷鎛鎝鎉鎧鎎鎪鎞鎦鎕鎈鎙鎟鎍鎱鎑鎲鎤鎨鎴鎣鎥闒闓闑隳雗雚巂雟雘雝霣霢霥鞬鞮鞨鞫鞤鞪����������������������������������鞢鞥韗韙韖韘韺顐顑顒颸饁餼餺騏騋騉騍騄騑騊騅騇騆髀髜鬈鬄鬅鬩鬵魊魌魋鯇鯆鯃鮿鯁鮵鮸鯓鮶鯄鮹鮽鵜鵓鵏鵊鵛鵋鵙鵖鵌鵗鵒鵔鵟鵘鵚麎麌黟鼁鼀鼖鼥鼫鼪鼩鼨齌齕儴儵劖勷厴嚫嚭嚦嚧嚪嚬壚壝壛夒嬽嬾嬿巃幰�".split("");
      for (j3 = 0; j3 != D2[241].length; ++j3) if (D2[241][j3].charCodeAt(0) !== 65533) {
        e3[D2[241][j3]] = 61696 + j3;
        d3[61696 + j3] = D2[241][j3];
      }
      D2[242] = "����������������������������������������������������������������徿懻攇攐攍攉攌攎斄旞旝曞櫧櫠櫌櫑櫙櫋櫟櫜櫐櫫櫏櫍櫞歠殰氌瀙瀧瀠瀖瀫瀡瀢瀣瀩瀗瀤瀜瀪爌爊爇爂爅犥犦犤犣犡瓋瓅璷瓃甖癠矉矊矄矱礝礛����������������������������������礡礜礗礞禰穧穨簳簼簹簬簻糬糪繶繵繸繰繷繯繺繲繴繨罋罊羃羆羷翽翾聸臗臕艤艡艣藫藱藭藙藡藨藚藗藬藲藸藘藟藣藜藑藰藦藯藞藢蠀蟺蠃蟶蟷蠉蠌蠋蠆蟼蠈蟿蠊蠂襢襚襛襗襡襜襘襝襙覈覷覶觶譐譈譊譀譓譖譔譋譕�".split("");
      for (j3 = 0; j3 != D2[242].length; ++j3) if (D2[242][j3].charCodeAt(0) !== 65533) {
        e3[D2[242][j3]] = 61952 + j3;
        d3[61952 + j3] = D2[242][j3];
      }
      D2[243] = "����������������������������������������������������������������譑譂譒譗豃豷豶貚贆贇贉趬趪趭趫蹭蹸蹳蹪蹯蹻軂轒轑轏轐轓辴酀鄿醰醭鏞鏇鏏鏂鏚鏐鏹鏬鏌鏙鎩鏦鏊鏔鏮鏣鏕鏄鏎鏀鏒鏧镽闚闛雡霩霫霬霨霦����������������������������������鞳鞷鞶韝韞韟顜顙顝顗颿颽颻颾饈饇饃馦馧騚騕騥騝騤騛騢騠騧騣騞騜騔髂鬋鬊鬎鬌鬷鯪鯫鯠鯞鯤鯦鯢鯰鯔鯗鯬鯜鯙鯥鯕鯡鯚鵷鶁鶊鶄鶈鵱鶀鵸鶆鶋鶌鵽鵫鵴鵵鵰鵩鶅鵳鵻鶂鵯鵹鵿鶇鵨麔麑黀黼鼭齀齁齍齖齗齘匷嚲�".split("");
      for (j3 = 0; j3 != D2[243].length; ++j3) if (D2[243][j3].charCodeAt(0) !== 65533) {
        e3[D2[243][j3]] = 62208 + j3;
        d3[62208 + j3] = D2[243][j3];
      }
      D2[244] = "����������������������������������������������������������������嚵嚳壣孅巆巇廮廯忀忁懹攗攖攕攓旟曨曣曤櫳櫰櫪櫨櫹櫱櫮櫯瀼瀵瀯瀷瀴瀱灂瀸瀿瀺瀹灀瀻瀳灁爓爔犨獽獼璺皫皪皾盭矌矎矏矍矲礥礣礧礨礤礩����������������������������������禲穮穬穭竷籉籈籊籇籅糮繻繾纁纀羺翿聹臛臙舋艨艩蘢藿蘁藾蘛蘀藶蘄蘉蘅蘌藽蠙蠐蠑蠗蠓蠖襣襦覹觷譠譪譝譨譣譥譧譭趮躆躈躄轙轖轗轕轘轚邍酃酁醷醵醲醳鐋鐓鏻鐠鐏鐔鏾鐕鐐鐨鐙鐍鏵鐀鏷鐇鐎鐖鐒鏺鐉鏸鐊鏿�".split("");
      for (j3 = 0; j3 != D2[244].length; ++j3) if (D2[244][j3].charCodeAt(0) !== 65533) {
        e3[D2[244][j3]] = 62464 + j3;
        d3[62464 + j3] = D2[244][j3];
      }
      D2[245] = "����������������������������������������������������������������鏼鐌鏶鐑鐆闞闠闟霮霯鞹鞻韽韾顠顢顣顟飁飂饐饎饙饌饋饓騲騴騱騬騪騶騩騮騸騭髇髊髆鬐鬒鬑鰋鰈鯷鰅鰒鯸鱀鰇鰎鰆鰗鰔鰉鶟鶙鶤鶝鶒鶘鶐鶛����������������������������������鶠鶔鶜鶪鶗鶡鶚鶢鶨鶞鶣鶿鶩鶖鶦鶧麙麛麚黥黤黧黦鼰鼮齛齠齞齝齙龑儺儹劘劗囃嚽嚾孈孇巋巏廱懽攛欂櫼欃櫸欀灃灄灊灈灉灅灆爝爚爙獾甗癪矐礭礱礯籔籓糲纊纇纈纋纆纍罍羻耰臝蘘蘪蘦蘟蘣蘜蘙蘧蘮蘡蘠蘩蘞蘥�".split("");
      for (j3 = 0; j3 != D2[245].length; ++j3) if (D2[245][j3].charCodeAt(0) !== 65533) {
        e3[D2[245][j3]] = 62720 + j3;
        d3[62720 + j3] = D2[245][j3];
      }
      D2[246] = "����������������������������������������������������������������蠩蠝蠛蠠蠤蠜蠫衊襭襩襮襫觺譹譸譅譺譻贐贔趯躎躌轞轛轝酆酄酅醹鐿鐻鐶鐩鐽鐼鐰鐹鐪鐷鐬鑀鐱闥闤闣霵霺鞿韡顤飉飆飀饘饖騹騽驆驄驂驁騺����������������������������������騿髍鬕鬗鬘鬖鬺魒鰫鰝鰜鰬鰣鰨鰩鰤鰡鶷鶶鶼鷁鷇鷊鷏鶾鷅鷃鶻鶵鷎鶹鶺鶬鷈鶱鶭鷌鶳鷍鶲鹺麜黫黮黭鼛鼘鼚鼱齎齥齤龒亹囆囅囋奱孋孌巕巑廲攡攠攦攢欋欈欉氍灕灖灗灒爞爟犩獿瓘瓕瓙瓗癭皭礵禴穰穱籗籜籙籛籚�".split("");
      for (j3 = 0; j3 != D2[246].length; ++j3) if (D2[246][j3].charCodeAt(0) !== 65533) {
        e3[D2[246][j3]] = 62976 + j3;
        d3[62976 + j3] = D2[246][j3];
      }
      D2[247] = "����������������������������������������������������������������糴糱纑罏羇臞艫蘴蘵蘳蘬蘲蘶蠬蠨蠦蠪蠥襱覿覾觻譾讄讂讆讅譿贕躕躔躚躒躐躖躗轠轢酇鑌鑐鑊鑋鑏鑇鑅鑈鑉鑆霿韣顪顩飋饔饛驎驓驔驌驏驈驊����������������������������������驉驒驐髐鬙鬫鬻魖魕鱆鱈鰿鱄鰹鰳鱁鰼鰷鰴鰲鰽鰶鷛鷒鷞鷚鷋鷐鷜鷑鷟鷩鷙鷘鷖鷵鷕鷝麶黰鼵鼳鼲齂齫龕龢儽劙壨壧奲孍巘蠯彏戁戃戄攩攥斖曫欑欒欏毊灛灚爢玂玁玃癰矔籧籦纕艬蘺虀蘹蘼蘱蘻蘾蠰蠲蠮蠳襶襴襳觾�".split("");
      for (j3 = 0; j3 != D2[247].length; ++j3) if (D2[247][j3].charCodeAt(0) !== 65533) {
        e3[D2[247][j3]] = 63232 + j3;
        d3[63232 + j3] = D2[247][j3];
      }
      D2[248] = "����������������������������������������������������������������讌讎讋讈豅贙躘轤轣醼鑢鑕鑝鑗鑞韄韅頀驖驙鬞鬟鬠鱒鱘鱐鱊鱍鱋鱕鱙鱌鱎鷻鷷鷯鷣鷫鷸鷤鷶鷡鷮鷦鷲鷰鷢鷬鷴鷳鷨鷭黂黐黲黳鼆鼜鼸鼷鼶齃齏����������������������������������齱齰齮齯囓囍孎屭攭曭曮欓灟灡灝灠爣瓛瓥矕礸禷禶籪纗羉艭虃蠸蠷蠵衋讔讕躞躟躠躝醾醽釂鑫鑨鑩雥靆靃靇韇韥驞髕魙鱣鱧鱦鱢鱞鱠鸂鷾鸇鸃鸆鸅鸀鸁鸉鷿鷽鸄麠鼞齆齴齵齶囔攮斸欘欙欗欚灢爦犪矘矙礹籩籫糶纚�".split("");
      for (j3 = 0; j3 != D2[248].length; ++j3) if (D2[248][j3].charCodeAt(0) !== 65533) {
        e3[D2[248][j3]] = 63488 + j3;
        d3[63488 + j3] = D2[248][j3];
      }
      D2[249] = "����������������������������������������������������������������纘纛纙臠臡虆虇虈襹襺襼襻觿讘讙躥躤躣鑮鑭鑯鑱鑳靉顲饟鱨鱮鱭鸋鸍鸐鸏鸒鸑麡黵鼉齇齸齻齺齹圞灦籯蠼趲躦釃鑴鑸鑶鑵驠鱴鱳鱱鱵鸔鸓黶鼊����������������������������������龤灨灥糷虪蠾蠽蠿讞貜躩軉靋顳顴飌饡馫驤驦驧鬤鸕鸗齈戇欞爧虌躨钂钀钁驩驨鬮鸙爩虋讟钃鱹麷癵驫鱺鸝灩灪麤齾齉龘碁銹裏墻恒粧嫺╔╦╗╠╬╣╚╩╝╒╤╕╞╪╡╘╧╛╓╥╖╟╫╢╙╨╜║═╭╮╰╯▓�".split("");
      for (j3 = 0; j3 != D2[249].length; ++j3) if (D2[249][j3].charCodeAt(0) !== 65533) {
        e3[D2[249][j3]] = 63744 + j3;
        d3[63744 + j3] = D2[249][j3];
      }
      return { "enc": e3, "dec": d3 };
    }();
    cptable2[1250] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰Š‹ŚŤŽŹ�‘’“”•–—�™š›śťžź ˇ˘Ł¤Ą¦§¨©Ş«¬­®Ż°±˛ł´µ¶·¸ąş»Ľ˝ľżŔÁÂĂÄĹĆÇČÉĘËĚÍÎĎĐŃŇÓÔŐÖ×ŘŮÚŰÜÝŢßŕáâăäĺćçčéęëěíîďđńňóôőö÷řůúűüýţ˙", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[1251] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ЂЃ‚ѓ„…†‡€‰Љ‹ЊЌЋЏђ‘’“”•–—�™љ›њќћџ ЎўЈ¤Ґ¦§Ё©Є«¬­®Ї°±Ііґµ¶·ё№є»јЅѕїАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯабвгдежзийклмнопрстуфхцчшщъыьэюя", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[1252] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ�Ž��‘’“”•–—˜™š›œ�žŸ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[1253] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡�‰�‹�����‘’“”•–—�™�›���� ΅Ά£¤¥¦§¨©�«¬­®―°±²³΄µ¶·ΈΉΊ»Ό½ΎΏΐΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡ�ΣΤΥΦΧΨΩΪΫάέήίΰαβγδεζηθικλμνξοπρςστυφχψωϊϋόύώ�", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[1254] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰Š‹Œ����‘’“”•–—˜™š›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏĞÑÒÓÔÕÖ×ØÙÚÛÜİŞßàáâãäåæçèéêëìíîïğñòóôõö÷øùúûüışÿ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[1255] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹�����‘’“”•–—˜™�›���� ¡¢£₪¥¦§¨©×«¬­®¯°±²³´µ¶·¸¹÷»¼½¾¿ְֱֲֳִֵֶַָֹ�ֻּֽ־ֿ׀ׁׂ׃װױײ׳״�������אבגדהוזחטיךכלםמןנסעףפץצקרשת��‎‏�", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[1256] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€پ‚ƒ„…†‡ˆ‰ٹ‹Œچژڈگ‘’“”•–—ک™ڑ›œ‌‍ں ،¢£¤¥¦§¨©ھ«¬­®¯°±²³´µ¶·¸¹؛»¼½¾؟ہءآأؤإئابةتثجحخدذرزسشصض×طظعغـفقكàلâمنهوçèéêëىيîïًٌٍَôُِ÷ّùْûü‎‏ے", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[1257] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚�„…†‡�‰�‹�¨ˇ¸�‘’“”•–—�™�›�¯˛� �¢£¤�¦§Ø©Ŗ«¬­®Æ°±²³´µ¶·ø¹ŗ»¼½¾æĄĮĀĆÄÅĘĒČÉŹĖĢĶĪĻŠŃŅÓŌÕÖ×ŲŁŚŪÜŻŽßąįāćäåęēčéźėģķīļšńņóōõö÷ųłśūüżž˙", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[1258] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~€�‚ƒ„…†‡ˆ‰�‹Œ����‘’“”•–—˜™�›œ��Ÿ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂĂÄÅÆÇÈÉÊË̀ÍÎÏĐÑ̉ÓÔƠÖ×ØÙÚÛÜỮßàáâăäåæçèéêë́íîïđṇ̃óôơö÷øùúûüư₫ÿ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[1e4] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤‹›ﬁﬂ‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[10006] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~Ä¹²É³ÖÜ΅àâä΄¨çéèêë£™îï•½‰ôö¦­ùûü†ΓΔΘΛΞΠß®©ΣΪ§≠°·Α±≤≥¥ΒΕΖΗΙΚΜΦΫΨΩάΝ¬ΟΡ≈Τ«»… ΥΧΆΈœ–―“”‘’÷ΉΊΌΎέήίόΏύαβψδεφγηιξκλμνοπώρστθωςχυζϊϋΐΰ�", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[10007] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~АБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ†°¢£§•¶І®©™Ђђ≠Ѓѓ∞±≤≥іµ∂ЈЄєЇїЉљЊњјЅ¬√ƒ≈∆«»… ЋћЌќѕ–—“”‘’÷„ЎўЏџ№Ёёяабвгдежзийклмнопрстуфхцчшщъыьэю¤", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[10008] = function() {
      var d3 = [], e3 = {}, D2 = [], j3;
      D2[0] = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~���������������������������������������������������������������������������������������".split("");
      for (j3 = 0; j3 != D2[0].length; ++j3) if (D2[0][j3].charCodeAt(0) !== 65533) {
        e3[D2[0][j3]] = 0 + j3;
        d3[0 + j3] = D2[0][j3];
      }
      D2[161] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������　、。・ˉˇ¨〃々―～�…‘’“”〔〕〈〉《》「」『』〖〗【】±×÷∶∧∨∑∏∪∩∈∷√⊥∥∠⌒⊙∫∮≡≌≈∽∝≠≮≯≤≥∞∵∴♂♀°′″℃＄¤￠￡‰§№☆★○●◎◇◆□■△▲※→←↑↓〓�".split("");
      for (j3 = 0; j3 != D2[161].length; ++j3) if (D2[161][j3].charCodeAt(0) !== 65533) {
        e3[D2[161][j3]] = 41216 + j3;
        d3[41216 + j3] = D2[161][j3];
      }
      D2[162] = "���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������⒈⒉⒊⒋⒌⒍⒎⒏⒐⒑⒒⒓⒔⒕⒖⒗⒘⒙⒚⒛⑴⑵⑶⑷⑸⑹⑺⑻⑼⑽⑾⑿⒀⒁⒂⒃⒄⒅⒆⒇①②③④⑤⑥⑦⑧⑨⑩��㈠㈡㈢㈣㈤㈥㈦㈧㈨㈩��ⅠⅡⅢⅣⅤⅥⅦⅧⅨⅩⅪⅫ���".split("");
      for (j3 = 0; j3 != D2[162].length; ++j3) if (D2[162][j3].charCodeAt(0) !== 65533) {
        e3[D2[162][j3]] = 41472 + j3;
        d3[41472 + j3] = D2[162][j3];
      }
      D2[163] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������！＂＃￥％＆＇（）＊＋，－．／０１２３４５６７８９：；＜＝＞？＠ＡＢＣＤＥＦＧＨＩＪＫＬＭＮＯＰＱＲＳＴＵＶＷＸＹＺ［＼］＾＿｀ａｂｃｄｅｆｇｈｉｊｋｌｍｎｏｐｑｒｓｔｕｖｗｘｙｚ｛｜｝￣�".split("");
      for (j3 = 0; j3 != D2[163].length; ++j3) if (D2[163][j3].charCodeAt(0) !== 65533) {
        e3[D2[163][j3]] = 41728 + j3;
        d3[41728 + j3] = D2[163][j3];
      }
      D2[164] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ぁあぃいぅうぇえぉおかがきぎくぐけげこごさざしじすずせぜそぞただちぢっつづてでとどなにぬねのはばぱひびぴふぶぷへべぺほぼぽまみむめもゃやゅゆょよらりるれろゎわゐゑをん������������".split("");
      for (j3 = 0; j3 != D2[164].length; ++j3) if (D2[164][j3].charCodeAt(0) !== 65533) {
        e3[D2[164][j3]] = 41984 + j3;
        d3[41984 + j3] = D2[164][j3];
      }
      D2[165] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ァアィイゥウェエォオカガキギクグケゲコゴサザシジスズセゼソゾタダチヂッツヅテデトドナニヌネノハバパヒビピフブプヘベペホボポマミムメモャヤュユョヨラリルレロヮワヰヱヲンヴヵヶ���������".split("");
      for (j3 = 0; j3 != D2[165].length; ++j3) if (D2[165][j3].charCodeAt(0) !== 65533) {
        e3[D2[165][j3]] = 42240 + j3;
        d3[42240 + j3] = D2[165][j3];
      }
      D2[166] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������ΑΒΓΔΕΖΗΘΙΚΛΜΝΞΟΠΡΣΤΥΦΧΨΩ��������αβγδεζηθικλμνξοπρστυφχψω���������������������������������������".split("");
      for (j3 = 0; j3 != D2[166].length; ++j3) if (D2[166][j3].charCodeAt(0) !== 65533) {
        e3[D2[166][j3]] = 42496 + j3;
        d3[42496 + j3] = D2[166][j3];
      }
      D2[167] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ���������������абвгдеёжзийклмнопрстуфхцчшщъыьэюя��������������".split("");
      for (j3 = 0; j3 != D2[167].length; ++j3) if (D2[167][j3].charCodeAt(0) !== 65533) {
        e3[D2[167][j3]] = 42752 + j3;
        d3[42752 + j3] = D2[167][j3];
      }
      D2[168] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������āáǎàēéěèīíǐìōóǒòūúǔùǖǘǚǜüê����������ㄅㄆㄇㄈㄉㄊㄋㄌㄍㄎㄏㄐㄑㄒㄓㄔㄕㄖㄗㄘㄙㄚㄛㄜㄝㄞㄟㄠㄡㄢㄣㄤㄥㄦㄧㄨㄩ����������������������".split("");
      for (j3 = 0; j3 != D2[168].length; ++j3) if (D2[168][j3].charCodeAt(0) !== 65533) {
        e3[D2[168][j3]] = 43008 + j3;
        d3[43008 + j3] = D2[168][j3];
      }
      D2[169] = "��������������������������������������������������������������������������������������������������������������������������������������������������������������������─━│┃┄┅┆┇┈┉┊┋┌┍┎┏┐┑┒┓└┕┖┗┘┙┚┛├┝┞┟┠┡┢┣┤┥┦┧┨┩┪┫┬┭┮┯┰┱┲┳┴┵┶┷┸┹┺┻┼┽┾┿╀╁╂╃╄╅╆╇╈╉╊╋����������������".split("");
      for (j3 = 0; j3 != D2[169].length; ++j3) if (D2[169][j3].charCodeAt(0) !== 65533) {
        e3[D2[169][j3]] = 43264 + j3;
        d3[43264 + j3] = D2[169][j3];
      }
      D2[176] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������啊阿埃挨哎唉哀皑癌蔼矮艾碍爱隘鞍氨安俺按暗岸胺案肮昂盎凹敖熬翱袄傲奥懊澳芭捌扒叭吧笆八疤巴拔跋靶把耙坝霸罢爸白柏百摆佰败拜稗斑班搬扳般颁板版扮拌伴瓣半办绊邦帮梆榜膀绑棒磅蚌镑傍谤苞胞包褒剥�".split("");
      for (j3 = 0; j3 != D2[176].length; ++j3) if (D2[176][j3].charCodeAt(0) !== 65533) {
        e3[D2[176][j3]] = 45056 + j3;
        d3[45056 + j3] = D2[176][j3];
      }
      D2[177] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������薄雹保堡饱宝抱报暴豹鲍爆杯碑悲卑北辈背贝钡倍狈备惫焙被奔苯本笨崩绷甭泵蹦迸逼鼻比鄙笔彼碧蓖蔽毕毙毖币庇痹闭敝弊必辟壁臂避陛鞭边编贬扁便变卞辨辩辫遍标彪膘表鳖憋别瘪彬斌濒滨宾摈兵冰柄丙秉饼炳�".split("");
      for (j3 = 0; j3 != D2[177].length; ++j3) if (D2[177][j3].charCodeAt(0) !== 65533) {
        e3[D2[177][j3]] = 45312 + j3;
        d3[45312 + j3] = D2[177][j3];
      }
      D2[178] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������病并玻菠播拨钵波博勃搏铂箔伯帛舶脖膊渤泊驳捕卜哺补埠不布步簿部怖擦猜裁材才财睬踩采彩菜蔡餐参蚕残惭惨灿苍舱仓沧藏操糙槽曹草厕策侧册测层蹭插叉茬茶查碴搽察岔差诧拆柴豺搀掺蝉馋谗缠铲产阐颤昌猖�".split("");
      for (j3 = 0; j3 != D2[178].length; ++j3) if (D2[178][j3].charCodeAt(0) !== 65533) {
        e3[D2[178][j3]] = 45568 + j3;
        d3[45568 + j3] = D2[178][j3];
      }
      D2[179] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������场尝常长偿肠厂敞畅唱倡超抄钞朝嘲潮巢吵炒车扯撤掣彻澈郴臣辰尘晨忱沉陈趁衬撑称城橙成呈乘程惩澄诚承逞骋秤吃痴持匙池迟弛驰耻齿侈尺赤翅斥炽充冲虫崇宠抽酬畴踌稠愁筹仇绸瞅丑臭初出橱厨躇锄雏滁除楚�".split("");
      for (j3 = 0; j3 != D2[179].length; ++j3) if (D2[179][j3].charCodeAt(0) !== 65533) {
        e3[D2[179][j3]] = 45824 + j3;
        d3[45824 + j3] = D2[179][j3];
      }
      D2[180] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������础储矗搐触处揣川穿椽传船喘串疮窗幢床闯创吹炊捶锤垂春椿醇唇淳纯蠢戳绰疵茨磁雌辞慈瓷词此刺赐次聪葱囱匆从丛凑粗醋簇促蹿篡窜摧崔催脆瘁粹淬翠村存寸磋撮搓措挫错搭达答瘩打大呆歹傣戴带殆代贷袋待逮�".split("");
      for (j3 = 0; j3 != D2[180].length; ++j3) if (D2[180][j3].charCodeAt(0) !== 65533) {
        e3[D2[180][j3]] = 46080 + j3;
        d3[46080 + j3] = D2[180][j3];
      }
      D2[181] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������怠耽担丹单郸掸胆旦氮但惮淡诞弹蛋当挡党荡档刀捣蹈倒岛祷导到稻悼道盗德得的蹬灯登等瞪凳邓堤低滴迪敌笛狄涤翟嫡抵底地蒂第帝弟递缔颠掂滇碘点典靛垫电佃甸店惦奠淀殿碉叼雕凋刁掉吊钓调跌爹碟蝶迭谍叠�".split("");
      for (j3 = 0; j3 != D2[181].length; ++j3) if (D2[181][j3].charCodeAt(0) !== 65533) {
        e3[D2[181][j3]] = 46336 + j3;
        d3[46336 + j3] = D2[181][j3];
      }
      D2[182] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������丁盯叮钉顶鼎锭定订丢东冬董懂动栋侗恫冻洞兜抖斗陡豆逗痘都督毒犊独读堵睹赌杜镀肚度渡妒端短锻段断缎堆兑队对墩吨蹲敦顿囤钝盾遁掇哆多夺垛躲朵跺舵剁惰堕蛾峨鹅俄额讹娥恶厄扼遏鄂饿恩而儿耳尔饵洱二�".split("");
      for (j3 = 0; j3 != D2[182].length; ++j3) if (D2[182][j3].charCodeAt(0) !== 65533) {
        e3[D2[182][j3]] = 46592 + j3;
        d3[46592 + j3] = D2[182][j3];
      }
      D2[183] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������贰发罚筏伐乏阀法珐藩帆番翻樊矾钒繁凡烦反返范贩犯饭泛坊芳方肪房防妨仿访纺放菲非啡飞肥匪诽吠肺废沸费芬酚吩氛分纷坟焚汾粉奋份忿愤粪丰封枫蜂峰锋风疯烽逢冯缝讽奉凤佛否夫敷肤孵扶拂辐幅氟符伏俘服�".split("");
      for (j3 = 0; j3 != D2[183].length; ++j3) if (D2[183][j3].charCodeAt(0) !== 65533) {
        e3[D2[183][j3]] = 46848 + j3;
        d3[46848 + j3] = D2[183][j3];
      }
      D2[184] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������浮涪福袱弗甫抚辅俯釜斧脯腑府腐赴副覆赋复傅付阜父腹负富讣附妇缚咐噶嘎该改概钙盖溉干甘杆柑竿肝赶感秆敢赣冈刚钢缸肛纲岗港杠篙皋高膏羔糕搞镐稿告哥歌搁戈鸽胳疙割革葛格蛤阁隔铬个各给根跟耕更庚羹�".split("");
      for (j3 = 0; j3 != D2[184].length; ++j3) if (D2[184][j3].charCodeAt(0) !== 65533) {
        e3[D2[184][j3]] = 47104 + j3;
        d3[47104 + j3] = D2[184][j3];
      }
      D2[185] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������埂耿梗工攻功恭龚供躬公宫弓巩汞拱贡共钩勾沟苟狗垢构购够辜菇咕箍估沽孤姑鼓古蛊骨谷股故顾固雇刮瓜剐寡挂褂乖拐怪棺关官冠观管馆罐惯灌贯光广逛瑰规圭硅归龟闺轨鬼诡癸桂柜跪贵刽辊滚棍锅郭国果裹过哈�".split("");
      for (j3 = 0; j3 != D2[185].length; ++j3) if (D2[185][j3].charCodeAt(0) !== 65533) {
        e3[D2[185][j3]] = 47360 + j3;
        d3[47360 + j3] = D2[185][j3];
      }
      D2[186] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������骸孩海氦亥害骇酣憨邯韩含涵寒函喊罕翰撼捍旱憾悍焊汗汉夯杭航壕嚎豪毫郝好耗号浩呵喝荷菏核禾和何合盒貉阂河涸赫褐鹤贺嘿黑痕很狠恨哼亨横衡恒轰哄烘虹鸿洪宏弘红喉侯猴吼厚候后呼乎忽瑚壶葫胡蝴狐糊湖�".split("");
      for (j3 = 0; j3 != D2[186].length; ++j3) if (D2[186][j3].charCodeAt(0) !== 65533) {
        e3[D2[186][j3]] = 47616 + j3;
        d3[47616 + j3] = D2[186][j3];
      }
      D2[187] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������弧虎唬护互沪户花哗华猾滑画划化话槐徊怀淮坏欢环桓还缓换患唤痪豢焕涣宦幻荒慌黄磺蝗簧皇凰惶煌晃幌恍谎灰挥辉徽恢蛔回毁悔慧卉惠晦贿秽会烩汇讳诲绘荤昏婚魂浑混豁活伙火获或惑霍货祸击圾基机畸稽积箕�".split("");
      for (j3 = 0; j3 != D2[187].length; ++j3) if (D2[187][j3].charCodeAt(0) !== 65533) {
        e3[D2[187][j3]] = 47872 + j3;
        d3[47872 + j3] = D2[187][j3];
      }
      D2[188] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������肌饥迹激讥鸡姬绩缉吉极棘辑籍集及急疾汲即嫉级挤几脊己蓟技冀季伎祭剂悸济寄寂计记既忌际妓继纪嘉枷夹佳家加荚颊贾甲钾假稼价架驾嫁歼监坚尖笺间煎兼肩艰奸缄茧检柬碱硷拣捡简俭剪减荐槛鉴践贱见键箭件�".split("");
      for (j3 = 0; j3 != D2[188].length; ++j3) if (D2[188][j3].charCodeAt(0) !== 65533) {
        e3[D2[188][j3]] = 48128 + j3;
        d3[48128 + j3] = D2[188][j3];
      }
      D2[189] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������健舰剑饯渐溅涧建僵姜将浆江疆蒋桨奖讲匠酱降蕉椒礁焦胶交郊浇骄娇嚼搅铰矫侥脚狡角饺缴绞剿教酵轿较叫窖揭接皆秸街阶截劫节桔杰捷睫竭洁结解姐戒藉芥界借介疥诫届巾筋斤金今津襟紧锦仅谨进靳晋禁近烬浸�".split("");
      for (j3 = 0; j3 != D2[189].length; ++j3) if (D2[189][j3].charCodeAt(0) !== 65533) {
        e3[D2[189][j3]] = 48384 + j3;
        d3[48384 + j3] = D2[189][j3];
      }
      D2[190] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������尽劲荆兢茎睛晶鲸京惊精粳经井警景颈静境敬镜径痉靖竟竞净炯窘揪究纠玖韭久灸九酒厩救旧臼舅咎就疚鞠拘狙疽居驹菊局咀矩举沮聚拒据巨具距踞锯俱句惧炬剧捐鹃娟倦眷卷绢撅攫抉掘倔爵觉决诀绝均菌钧军君峻�".split("");
      for (j3 = 0; j3 != D2[190].length; ++j3) if (D2[190][j3].charCodeAt(0) !== 65533) {
        e3[D2[190][j3]] = 48640 + j3;
        d3[48640 + j3] = D2[190][j3];
      }
      D2[191] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������俊竣浚郡骏喀咖卡咯开揩楷凯慨刊堪勘坎砍看康慷糠扛抗亢炕考拷烤靠坷苛柯棵磕颗科壳咳可渴克刻客课肯啃垦恳坑吭空恐孔控抠口扣寇枯哭窟苦酷库裤夸垮挎跨胯块筷侩快宽款匡筐狂框矿眶旷况亏盔岿窥葵奎魁傀�".split("");
      for (j3 = 0; j3 != D2[191].length; ++j3) if (D2[191][j3].charCodeAt(0) !== 65533) {
        e3[D2[191][j3]] = 48896 + j3;
        d3[48896 + j3] = D2[191][j3];
      }
      D2[192] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������馈愧溃坤昆捆困括扩廓阔垃拉喇蜡腊辣啦莱来赖蓝婪栏拦篮阑兰澜谰揽览懒缆烂滥琅榔狼廊郎朗浪捞劳牢老佬姥酪烙涝勒乐雷镭蕾磊累儡垒擂肋类泪棱楞冷厘梨犁黎篱狸离漓理李里鲤礼莉荔吏栗丽厉励砾历利傈例俐�".split("");
      for (j3 = 0; j3 != D2[192].length; ++j3) if (D2[192][j3].charCodeAt(0) !== 65533) {
        e3[D2[192][j3]] = 49152 + j3;
        d3[49152 + j3] = D2[192][j3];
      }
      D2[193] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������痢立粒沥隶力璃哩俩联莲连镰廉怜涟帘敛脸链恋炼练粮凉梁粱良两辆量晾亮谅撩聊僚疗燎寥辽潦了撂镣廖料列裂烈劣猎琳林磷霖临邻鳞淋凛赁吝拎玲菱零龄铃伶羚凌灵陵岭领另令溜琉榴硫馏留刘瘤流柳六龙聋咙笼窿�".split("");
      for (j3 = 0; j3 != D2[193].length; ++j3) if (D2[193][j3].charCodeAt(0) !== 65533) {
        e3[D2[193][j3]] = 49408 + j3;
        d3[49408 + j3] = D2[193][j3];
      }
      D2[194] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������隆垄拢陇楼娄搂篓漏陋芦卢颅庐炉掳卤虏鲁麓碌露路赂鹿潞禄录陆戮驴吕铝侣旅履屡缕虑氯律率滤绿峦挛孪滦卵乱掠略抡轮伦仑沦纶论萝螺罗逻锣箩骡裸落洛骆络妈麻玛码蚂马骂嘛吗埋买麦卖迈脉瞒馒蛮满蔓曼慢漫�".split("");
      for (j3 = 0; j3 != D2[194].length; ++j3) if (D2[194][j3].charCodeAt(0) !== 65533) {
        e3[D2[194][j3]] = 49664 + j3;
        d3[49664 + j3] = D2[194][j3];
      }
      D2[195] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������谩芒茫盲氓忙莽猫茅锚毛矛铆卯茂冒帽貌贸么玫枚梅酶霉煤没眉媒镁每美昧寐妹媚门闷们萌蒙檬盟锰猛梦孟眯醚靡糜迷谜弥米秘觅泌蜜密幂棉眠绵冕免勉娩缅面苗描瞄藐秒渺庙妙蔑灭民抿皿敏悯闽明螟鸣铭名命谬摸�".split("");
      for (j3 = 0; j3 != D2[195].length; ++j3) if (D2[195][j3].charCodeAt(0) !== 65533) {
        e3[D2[195][j3]] = 49920 + j3;
        d3[49920 + j3] = D2[195][j3];
      }
      D2[196] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������摹蘑模膜磨摩魔抹末莫墨默沫漠寞陌谋牟某拇牡亩姆母墓暮幕募慕木目睦牧穆拿哪呐钠那娜纳氖乃奶耐奈南男难囊挠脑恼闹淖呢馁内嫩能妮霓倪泥尼拟你匿腻逆溺蔫拈年碾撵捻念娘酿鸟尿捏聂孽啮镊镍涅您柠狞凝宁�".split("");
      for (j3 = 0; j3 != D2[196].length; ++j3) if (D2[196][j3].charCodeAt(0) !== 65533) {
        e3[D2[196][j3]] = 50176 + j3;
        d3[50176 + j3] = D2[196][j3];
      }
      D2[197] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������拧泞牛扭钮纽脓浓农弄奴努怒女暖虐疟挪懦糯诺哦欧鸥殴藕呕偶沤啪趴爬帕怕琶拍排牌徘湃派攀潘盘磐盼畔判叛乓庞旁耪胖抛咆刨炮袍跑泡呸胚培裴赔陪配佩沛喷盆砰抨烹澎彭蓬棚硼篷膨朋鹏捧碰坯砒霹批披劈琵毗�".split("");
      for (j3 = 0; j3 != D2[197].length; ++j3) if (D2[197][j3].charCodeAt(0) !== 65533) {
        e3[D2[197][j3]] = 50432 + j3;
        d3[50432 + j3] = D2[197][j3];
      }
      D2[198] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������啤脾疲皮匹痞僻屁譬篇偏片骗飘漂瓢票撇瞥拼频贫品聘乒坪苹萍平凭瓶评屏坡泼颇婆破魄迫粕剖扑铺仆莆葡菩蒲埔朴圃普浦谱曝瀑期欺栖戚妻七凄漆柒沏其棋奇歧畦崎脐齐旗祈祁骑起岂乞企启契砌器气迄弃汽泣讫掐�".split("");
      for (j3 = 0; j3 != D2[198].length; ++j3) if (D2[198][j3].charCodeAt(0) !== 65533) {
        e3[D2[198][j3]] = 50688 + j3;
        d3[50688 + j3] = D2[198][j3];
      }
      D2[199] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������恰洽牵扦钎铅千迁签仟谦乾黔钱钳前潜遣浅谴堑嵌欠歉枪呛腔羌墙蔷强抢橇锹敲悄桥瞧乔侨巧鞘撬翘峭俏窍切茄且怯窃钦侵亲秦琴勤芹擒禽寝沁青轻氢倾卿清擎晴氰情顷请庆琼穷秋丘邱球求囚酋泅趋区蛆曲躯屈驱渠�".split("");
      for (j3 = 0; j3 != D2[199].length; ++j3) if (D2[199][j3].charCodeAt(0) !== 65533) {
        e3[D2[199][j3]] = 50944 + j3;
        d3[50944 + j3] = D2[199][j3];
      }
      D2[200] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������取娶龋趣去圈颧权醛泉全痊拳犬券劝缺炔瘸却鹊榷确雀裙群然燃冉染瓤壤攘嚷让饶扰绕惹热壬仁人忍韧任认刃妊纫扔仍日戎茸蓉荣融熔溶容绒冗揉柔肉茹蠕儒孺如辱乳汝入褥软阮蕊瑞锐闰润若弱撒洒萨腮鳃塞赛三叁�".split("");
      for (j3 = 0; j3 != D2[200].length; ++j3) if (D2[200][j3].charCodeAt(0) !== 65533) {
        e3[D2[200][j3]] = 51200 + j3;
        d3[51200 + j3] = D2[200][j3];
      }
      D2[201] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������伞散桑嗓丧搔骚扫嫂瑟色涩森僧莎砂杀刹沙纱傻啥煞筛晒珊苫杉山删煽衫闪陕擅赡膳善汕扇缮墒伤商赏晌上尚裳梢捎稍烧芍勺韶少哨邵绍奢赊蛇舌舍赦摄射慑涉社设砷申呻伸身深娠绅神沈审婶甚肾慎渗声生甥牲升绳�".split("");
      for (j3 = 0; j3 != D2[201].length; ++j3) if (D2[201][j3].charCodeAt(0) !== 65533) {
        e3[D2[201][j3]] = 51456 + j3;
        d3[51456 + j3] = D2[201][j3];
      }
      D2[202] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������省盛剩胜圣师失狮施湿诗尸虱十石拾时什食蚀实识史矢使屎驶始式示士世柿事拭誓逝势是嗜噬适仕侍释饰氏市恃室视试收手首守寿授售受瘦兽蔬枢梳殊抒输叔舒淑疏书赎孰熟薯暑曙署蜀黍鼠属术述树束戍竖墅庶数漱�".split("");
      for (j3 = 0; j3 != D2[202].length; ++j3) if (D2[202][j3].charCodeAt(0) !== 65533) {
        e3[D2[202][j3]] = 51712 + j3;
        d3[51712 + j3] = D2[202][j3];
      }
      D2[203] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������恕刷耍摔衰甩帅栓拴霜双爽谁水睡税吮瞬顺舜说硕朔烁斯撕嘶思私司丝死肆寺嗣四伺似饲巳松耸怂颂送宋讼诵搜艘擞嗽苏酥俗素速粟僳塑溯宿诉肃酸蒜算虽隋随绥髓碎岁穗遂隧祟孙损笋蓑梭唆缩琐索锁所塌他它她塔�".split("");
      for (j3 = 0; j3 != D2[203].length; ++j3) if (D2[203][j3].charCodeAt(0) !== 65533) {
        e3[D2[203][j3]] = 51968 + j3;
        d3[51968 + j3] = D2[203][j3];
      }
      D2[204] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������獭挞蹋踏胎苔抬台泰酞太态汰坍摊贪瘫滩坛檀痰潭谭谈坦毯袒碳探叹炭汤塘搪堂棠膛唐糖倘躺淌趟烫掏涛滔绦萄桃逃淘陶讨套特藤腾疼誊梯剔踢锑提题蹄啼体替嚏惕涕剃屉天添填田甜恬舔腆挑条迢眺跳贴铁帖厅听烃�".split("");
      for (j3 = 0; j3 != D2[204].length; ++j3) if (D2[204][j3].charCodeAt(0) !== 65533) {
        e3[D2[204][j3]] = 52224 + j3;
        d3[52224 + j3] = D2[204][j3];
      }
      D2[205] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������汀廷停亭庭挺艇通桐酮瞳同铜彤童桶捅筒统痛偷投头透凸秃突图徒途涂屠土吐兔湍团推颓腿蜕褪退吞屯臀拖托脱鸵陀驮驼椭妥拓唾挖哇蛙洼娃瓦袜歪外豌弯湾玩顽丸烷完碗挽晚皖惋宛婉万腕汪王亡枉网往旺望忘妄威�".split("");
      for (j3 = 0; j3 != D2[205].length; ++j3) if (D2[205][j3].charCodeAt(0) !== 65533) {
        e3[D2[205][j3]] = 52480 + j3;
        d3[52480 + j3] = D2[205][j3];
      }
      D2[206] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������巍微危韦违桅围唯惟为潍维苇萎委伟伪尾纬未蔚味畏胃喂魏位渭谓尉慰卫瘟温蚊文闻纹吻稳紊问嗡翁瓮挝蜗涡窝我斡卧握沃巫呜钨乌污诬屋无芜梧吾吴毋武五捂午舞伍侮坞戊雾晤物勿务悟误昔熙析西硒矽晰嘻吸锡牺�".split("");
      for (j3 = 0; j3 != D2[206].length; ++j3) if (D2[206][j3].charCodeAt(0) !== 65533) {
        e3[D2[206][j3]] = 52736 + j3;
        d3[52736 + j3] = D2[206][j3];
      }
      D2[207] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������稀息希悉膝夕惜熄烯溪汐犀檄袭席习媳喜铣洗系隙戏细瞎虾匣霞辖暇峡侠狭下厦夏吓掀锨先仙鲜纤咸贤衔舷闲涎弦嫌显险现献县腺馅羡宪陷限线相厢镶香箱襄湘乡翔祥详想响享项巷橡像向象萧硝霄削哮嚣销消宵淆晓�".split("");
      for (j3 = 0; j3 != D2[207].length; ++j3) if (D2[207][j3].charCodeAt(0) !== 65533) {
        e3[D2[207][j3]] = 52992 + j3;
        d3[52992 + j3] = D2[207][j3];
      }
      D2[208] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������小孝校肖啸笑效楔些歇蝎鞋协挟携邪斜胁谐写械卸蟹懈泄泻谢屑薪芯锌欣辛新忻心信衅星腥猩惺兴刑型形邢行醒幸杏性姓兄凶胸匈汹雄熊休修羞朽嗅锈秀袖绣墟戌需虚嘘须徐许蓄酗叙旭序畜恤絮婿绪续轩喧宣悬旋玄�".split("");
      for (j3 = 0; j3 != D2[208].length; ++j3) if (D2[208][j3].charCodeAt(0) !== 65533) {
        e3[D2[208][j3]] = 53248 + j3;
        d3[53248 + j3] = D2[208][j3];
      }
      D2[209] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������选癣眩绚靴薛学穴雪血勋熏循旬询寻驯巡殉汛训讯逊迅压押鸦鸭呀丫芽牙蚜崖衙涯雅哑亚讶焉咽阉烟淹盐严研蜒岩延言颜阎炎沿奄掩眼衍演艳堰燕厌砚雁唁彦焰宴谚验殃央鸯秧杨扬佯疡羊洋阳氧仰痒养样漾邀腰妖瑶�".split("");
      for (j3 = 0; j3 != D2[209].length; ++j3) if (D2[209][j3].charCodeAt(0) !== 65533) {
        e3[D2[209][j3]] = 53504 + j3;
        d3[53504 + j3] = D2[209][j3];
      }
      D2[210] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������摇尧遥窑谣姚咬舀药要耀椰噎耶爷野冶也页掖业叶曳腋夜液一壹医揖铱依伊衣颐夷遗移仪胰疑沂宜姨彝椅蚁倚已乙矣以艺抑易邑屹亿役臆逸肄疫亦裔意毅忆义益溢诣议谊译异翼翌绎茵荫因殷音阴姻吟银淫寅饮尹引隐�".split("");
      for (j3 = 0; j3 != D2[210].length; ++j3) if (D2[210][j3].charCodeAt(0) !== 65533) {
        e3[D2[210][j3]] = 53760 + j3;
        d3[53760 + j3] = D2[210][j3];
      }
      D2[211] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������印英樱婴鹰应缨莹萤营荧蝇迎赢盈影颖硬映哟拥佣臃痈庸雍踊蛹咏泳涌永恿勇用幽优悠忧尤由邮铀犹油游酉有友右佑釉诱又幼迂淤于盂榆虞愚舆余俞逾鱼愉渝渔隅予娱雨与屿禹宇语羽玉域芋郁吁遇喻峪御愈欲狱育誉�".split("");
      for (j3 = 0; j3 != D2[211].length; ++j3) if (D2[211][j3].charCodeAt(0) !== 65533) {
        e3[D2[211][j3]] = 54016 + j3;
        d3[54016 + j3] = D2[211][j3];
      }
      D2[212] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������浴寓裕预豫驭鸳渊冤元垣袁原援辕园员圆猿源缘远苑愿怨院曰约越跃钥岳粤月悦阅耘云郧匀陨允运蕴酝晕韵孕匝砸杂栽哉灾宰载再在咱攒暂赞赃脏葬遭糟凿藻枣早澡蚤躁噪造皂灶燥责择则泽贼怎增憎曾赠扎喳渣札轧�".split("");
      for (j3 = 0; j3 != D2[212].length; ++j3) if (D2[212][j3].charCodeAt(0) !== 65533) {
        e3[D2[212][j3]] = 54272 + j3;
        d3[54272 + j3] = D2[212][j3];
      }
      D2[213] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������铡闸眨栅榨咋乍炸诈摘斋宅窄债寨瞻毡詹粘沾盏斩辗崭展蘸栈占战站湛绽樟章彰漳张掌涨杖丈帐账仗胀瘴障招昭找沼赵照罩兆肇召遮折哲蛰辙者锗蔗这浙珍斟真甄砧臻贞针侦枕疹诊震振镇阵蒸挣睁征狰争怔整拯正政�".split("");
      for (j3 = 0; j3 != D2[213].length; ++j3) if (D2[213][j3].charCodeAt(0) !== 65533) {
        e3[D2[213][j3]] = 54528 + j3;
        d3[54528 + j3] = D2[213][j3];
      }
      D2[214] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������帧症郑证芝枝支吱蜘知肢脂汁之织职直植殖执值侄址指止趾只旨纸志挚掷至致置帜峙制智秩稚质炙痔滞治窒中盅忠钟衷终种肿重仲众舟周州洲诌粥轴肘帚咒皱宙昼骤珠株蛛朱猪诸诛逐竹烛煮拄瞩嘱主著柱助蛀贮铸筑�".split("");
      for (j3 = 0; j3 != D2[214].length; ++j3) if (D2[214][j3].charCodeAt(0) !== 65533) {
        e3[D2[214][j3]] = 54784 + j3;
        d3[54784 + j3] = D2[214][j3];
      }
      D2[215] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������住注祝驻抓爪拽专砖转撰赚篆桩庄装妆撞壮状椎锥追赘坠缀谆准捉拙卓桌琢茁酌啄着灼浊兹咨资姿滋淄孜紫仔籽滓子自渍字鬃棕踪宗综总纵邹走奏揍租足卒族祖诅阻组钻纂嘴醉最罪尊遵昨左佐柞做作坐座������".split("");
      for (j3 = 0; j3 != D2[215].length; ++j3) if (D2[215][j3].charCodeAt(0) !== 65533) {
        e3[D2[215][j3]] = 55040 + j3;
        d3[55040 + j3] = D2[215][j3];
      }
      D2[216] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������亍丌兀丐廿卅丕亘丞鬲孬噩丨禺丿匕乇夭爻卮氐囟胤馗毓睾鼗丶亟鼐乜乩亓芈孛啬嘏仄厍厝厣厥厮靥赝匚叵匦匮匾赜卦卣刂刈刎刭刳刿剀剌剞剡剜蒯剽劂劁劐劓冂罔亻仃仉仂仨仡仫仞伛仳伢佤仵伥伧伉伫佞佧攸佚佝�".split("");
      for (j3 = 0; j3 != D2[216].length; ++j3) if (D2[216][j3].charCodeAt(0) !== 65533) {
        e3[D2[216][j3]] = 55296 + j3;
        d3[55296 + j3] = D2[216][j3];
      }
      D2[217] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������佟佗伲伽佶佴侑侉侃侏佾佻侪佼侬侔俦俨俪俅俚俣俜俑俟俸倩偌俳倬倏倮倭俾倜倌倥倨偾偃偕偈偎偬偻傥傧傩傺僖儆僭僬僦僮儇儋仝氽佘佥俎龠汆籴兮巽黉馘冁夔勹匍訇匐凫夙兕亠兖亳衮袤亵脔裒禀嬴蠃羸冫冱冽冼�".split("");
      for (j3 = 0; j3 != D2[217].length; ++j3) if (D2[217][j3].charCodeAt(0) !== 65533) {
        e3[D2[217][j3]] = 55552 + j3;
        d3[55552 + j3] = D2[217][j3];
      }
      D2[218] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������凇冖冢冥讠讦讧讪讴讵讷诂诃诋诏诎诒诓诔诖诘诙诜诟诠诤诨诩诮诰诳诶诹诼诿谀谂谄谇谌谏谑谒谔谕谖谙谛谘谝谟谠谡谥谧谪谫谮谯谲谳谵谶卩卺阝阢阡阱阪阽阼陂陉陔陟陧陬陲陴隈隍隗隰邗邛邝邙邬邡邴邳邶邺�".split("");
      for (j3 = 0; j3 != D2[218].length; ++j3) if (D2[218][j3].charCodeAt(0) !== 65533) {
        e3[D2[218][j3]] = 55808 + j3;
        d3[55808 + j3] = D2[218][j3];
      }
      D2[219] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������邸邰郏郅邾郐郄郇郓郦郢郜郗郛郫郯郾鄄鄢鄞鄣鄱鄯鄹酃酆刍奂劢劬劭劾哿勐勖勰叟燮矍廴凵凼鬯厶弁畚巯坌垩垡塾墼壅壑圩圬圪圳圹圮圯坜圻坂坩垅坫垆坼坻坨坭坶坳垭垤垌垲埏垧垴垓垠埕埘埚埙埒垸埴埯埸埤埝�".split("");
      for (j3 = 0; j3 != D2[219].length; ++j3) if (D2[219][j3].charCodeAt(0) !== 65533) {
        e3[D2[219][j3]] = 56064 + j3;
        d3[56064 + j3] = D2[219][j3];
      }
      D2[220] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������堋堍埽埭堀堞堙塄堠塥塬墁墉墚墀馨鼙懿艹艽艿芏芊芨芄芎芑芗芙芫芸芾芰苈苊苣芘芷芮苋苌苁芩芴芡芪芟苄苎芤苡茉苷苤茏茇苜苴苒苘茌苻苓茑茚茆茔茕苠苕茜荑荛荜茈莒茼茴茱莛荞茯荏荇荃荟荀茗荠茭茺茳荦荥�".split("");
      for (j3 = 0; j3 != D2[220].length; ++j3) if (D2[220][j3].charCodeAt(0) !== 65533) {
        e3[D2[220][j3]] = 56320 + j3;
        d3[56320 + j3] = D2[220][j3];
      }
      D2[221] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������荨茛荩荬荪荭荮莰荸莳莴莠莪莓莜莅荼莶莩荽莸荻莘莞莨莺莼菁萁菥菘堇萘萋菝菽菖萜萸萑萆菔菟萏萃菸菹菪菅菀萦菰菡葜葑葚葙葳蒇蒈葺蒉葸萼葆葩葶蒌蒎萱葭蓁蓍蓐蓦蒽蓓蓊蒿蒺蓠蒡蒹蒴蒗蓥蓣蔌甍蔸蓰蔹蔟蔺�".split("");
      for (j3 = 0; j3 != D2[221].length; ++j3) if (D2[221][j3].charCodeAt(0) !== 65533) {
        e3[D2[221][j3]] = 56576 + j3;
        d3[56576 + j3] = D2[221][j3];
      }
      D2[222] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蕖蔻蓿蓼蕙蕈蕨蕤蕞蕺瞢蕃蕲蕻薤薨薇薏蕹薮薜薅薹薷薰藓藁藜藿蘧蘅蘩蘖蘼廾弈夼奁耷奕奚奘匏尢尥尬尴扌扪抟抻拊拚拗拮挢拶挹捋捃掭揶捱捺掎掴捭掬掊捩掮掼揲揸揠揿揄揞揎摒揆掾摅摁搋搛搠搌搦搡摞撄摭撖�".split("");
      for (j3 = 0; j3 != D2[222].length; ++j3) if (D2[222][j3].charCodeAt(0) !== 65533) {
        e3[D2[222][j3]] = 56832 + j3;
        d3[56832 + j3] = D2[222][j3];
      }
      D2[223] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������摺撷撸撙撺擀擐擗擤擢攉攥攮弋忒甙弑卟叱叽叩叨叻吒吖吆呋呒呓呔呖呃吡呗呙吣吲咂咔呷呱呤咚咛咄呶呦咝哐咭哂咴哒咧咦哓哔呲咣哕咻咿哌哙哚哜咩咪咤哝哏哞唛哧唠哽唔哳唢唣唏唑唧唪啧喏喵啉啭啁啕唿啐唼�".split("");
      for (j3 = 0; j3 != D2[223].length; ++j3) if (D2[223][j3].charCodeAt(0) !== 65533) {
        e3[D2[223][j3]] = 57088 + j3;
        d3[57088 + j3] = D2[223][j3];
      }
      D2[224] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������唷啖啵啶啷唳唰啜喋嗒喃喱喹喈喁喟啾嗖喑啻嗟喽喾喔喙嗪嗷嗉嘟嗑嗫嗬嗔嗦嗝嗄嗯嗥嗲嗳嗌嗍嗨嗵嗤辔嘞嘈嘌嘁嘤嘣嗾嘀嘧嘭噘嘹噗嘬噍噢噙噜噌噔嚆噤噱噫噻噼嚅嚓嚯囔囗囝囡囵囫囹囿圄圊圉圜帏帙帔帑帱帻帼�".split("");
      for (j3 = 0; j3 != D2[224].length; ++j3) if (D2[224][j3].charCodeAt(0) !== 65533) {
        e3[D2[224][j3]] = 57344 + j3;
        d3[57344 + j3] = D2[224][j3];
      }
      D2[225] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������帷幄幔幛幞幡岌屺岍岐岖岈岘岙岑岚岜岵岢岽岬岫岱岣峁岷峄峒峤峋峥崂崃崧崦崮崤崞崆崛嵘崾崴崽嵬嵛嵯嵝嵫嵋嵊嵩嵴嶂嶙嶝豳嶷巅彳彷徂徇徉後徕徙徜徨徭徵徼衢彡犭犰犴犷犸狃狁狎狍狒狨狯狩狲狴狷猁狳猃狺�".split("");
      for (j3 = 0; j3 != D2[225].length; ++j3) if (D2[225][j3].charCodeAt(0) !== 65533) {
        e3[D2[225][j3]] = 57600 + j3;
        d3[57600 + j3] = D2[225][j3];
      }
      D2[226] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������狻猗猓猡猊猞猝猕猢猹猥猬猸猱獐獍獗獠獬獯獾舛夥飧夤夂饣饧饨饩饪饫饬饴饷饽馀馄馇馊馍馐馑馓馔馕庀庑庋庖庥庠庹庵庾庳赓廒廑廛廨廪膺忄忉忖忏怃忮怄忡忤忾怅怆忪忭忸怙怵怦怛怏怍怩怫怊怿怡恸恹恻恺恂�".split("");
      for (j3 = 0; j3 != D2[226].length; ++j3) if (D2[226][j3].charCodeAt(0) !== 65533) {
        e3[D2[226][j3]] = 57856 + j3;
        d3[57856 + j3] = D2[226][j3];
      }
      D2[227] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������恪恽悖悚悭悝悃悒悌悛惬悻悱惝惘惆惚悴愠愦愕愣惴愀愎愫慊慵憬憔憧憷懔懵忝隳闩闫闱闳闵闶闼闾阃阄阆阈阊阋阌阍阏阒阕阖阗阙阚丬爿戕氵汔汜汊沣沅沐沔沌汨汩汴汶沆沩泐泔沭泷泸泱泗沲泠泖泺泫泮沱泓泯泾�".split("");
      for (j3 = 0; j3 != D2[227].length; ++j3) if (D2[227][j3].charCodeAt(0) !== 65533) {
        e3[D2[227][j3]] = 58112 + j3;
        d3[58112 + j3] = D2[227][j3];
      }
      D2[228] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������洹洧洌浃浈洇洄洙洎洫浍洮洵洚浏浒浔洳涑浯涞涠浞涓涔浜浠浼浣渚淇淅淞渎涿淠渑淦淝淙渖涫渌涮渫湮湎湫溲湟溆湓湔渲渥湄滟溱溘滠漭滢溥溧溽溻溷滗溴滏溏滂溟潢潆潇漤漕滹漯漶潋潴漪漉漩澉澍澌潸潲潼潺濑�".split("");
      for (j3 = 0; j3 != D2[228].length; ++j3) if (D2[228][j3].charCodeAt(0) !== 65533) {
        e3[D2[228][j3]] = 58368 + j3;
        d3[58368 + j3] = D2[228][j3];
      }
      D2[229] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������濉澧澹澶濂濡濮濞濠濯瀚瀣瀛瀹瀵灏灞宀宄宕宓宥宸甯骞搴寤寮褰寰蹇謇辶迓迕迥迮迤迩迦迳迨逅逄逋逦逑逍逖逡逵逶逭逯遄遑遒遐遨遘遢遛暹遴遽邂邈邃邋彐彗彖彘尻咫屐屙孱屣屦羼弪弩弭艴弼鬻屮妁妃妍妩妪妣�".split("");
      for (j3 = 0; j3 != D2[229].length; ++j3) if (D2[229][j3].charCodeAt(0) !== 65533) {
        e3[D2[229][j3]] = 58624 + j3;
        d3[58624 + j3] = D2[229][j3];
      }
      D2[230] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������妗姊妫妞妤姒妲妯姗妾娅娆姝娈姣姘姹娌娉娲娴娑娣娓婀婧婊婕娼婢婵胬媪媛婷婺媾嫫媲嫒嫔媸嫠嫣嫱嫖嫦嫘嫜嬉嬗嬖嬲嬷孀尕尜孚孥孳孑孓孢驵驷驸驺驿驽骀骁骅骈骊骐骒骓骖骘骛骜骝骟骠骢骣骥骧纟纡纣纥纨纩�".split("");
      for (j3 = 0; j3 != D2[230].length; ++j3) if (D2[230][j3].charCodeAt(0) !== 65533) {
        e3[D2[230][j3]] = 58880 + j3;
        d3[58880 + j3] = D2[230][j3];
      }
      D2[231] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������纭纰纾绀绁绂绉绋绌绐绔绗绛绠绡绨绫绮绯绱绲缍绶绺绻绾缁缂缃缇缈缋缌缏缑缒缗缙缜缛缟缡缢缣缤缥缦缧缪缫缬缭缯缰缱缲缳缵幺畿巛甾邕玎玑玮玢玟珏珂珑玷玳珀珉珈珥珙顼琊珩珧珞玺珲琏琪瑛琦琥琨琰琮琬�".split("");
      for (j3 = 0; j3 != D2[231].length; ++j3) if (D2[231][j3].charCodeAt(0) !== 65533) {
        e3[D2[231][j3]] = 59136 + j3;
        d3[59136 + j3] = D2[231][j3];
      }
      D2[232] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������琛琚瑁瑜瑗瑕瑙瑷瑭瑾璜璎璀璁璇璋璞璨璩璐璧瓒璺韪韫韬杌杓杞杈杩枥枇杪杳枘枧杵枨枞枭枋杷杼柰栉柘栊柩枰栌柙枵柚枳柝栀柃枸柢栎柁柽栲栳桠桡桎桢桄桤梃栝桕桦桁桧桀栾桊桉栩梵梏桴桷梓桫棂楮棼椟椠棹�".split("");
      for (j3 = 0; j3 != D2[232].length; ++j3) if (D2[232][j3].charCodeAt(0) !== 65533) {
        e3[D2[232][j3]] = 59392 + j3;
        d3[59392 + j3] = D2[232][j3];
      }
      D2[233] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������椤棰椋椁楗棣椐楱椹楠楂楝榄楫榀榘楸椴槌榇榈槎榉楦楣楹榛榧榻榫榭槔榱槁槊槟榕槠榍槿樯槭樗樘橥槲橄樾檠橐橛樵檎橹樽樨橘橼檑檐檩檗檫猷獒殁殂殇殄殒殓殍殚殛殡殪轫轭轱轲轳轵轶轸轷轹轺轼轾辁辂辄辇辋�".split("");
      for (j3 = 0; j3 != D2[233].length; ++j3) if (D2[233][j3].charCodeAt(0) !== 65533) {
        e3[D2[233][j3]] = 59648 + j3;
        d3[59648 + j3] = D2[233][j3];
      }
      D2[234] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������辍辎辏辘辚軎戋戗戛戟戢戡戥戤戬臧瓯瓴瓿甏甑甓攴旮旯旰昊昙杲昃昕昀炅曷昝昴昱昶昵耆晟晔晁晏晖晡晗晷暄暌暧暝暾曛曜曦曩贲贳贶贻贽赀赅赆赈赉赇赍赕赙觇觊觋觌觎觏觐觑牮犟牝牦牯牾牿犄犋犍犏犒挈挲掰�".split("");
      for (j3 = 0; j3 != D2[234].length; ++j3) if (D2[234][j3].charCodeAt(0) !== 65533) {
        e3[D2[234][j3]] = 59904 + j3;
        d3[59904 + j3] = D2[234][j3];
      }
      D2[235] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������搿擘耄毪毳毽毵毹氅氇氆氍氕氘氙氚氡氩氤氪氲攵敕敫牍牒牖爰虢刖肟肜肓肼朊肽肱肫肭肴肷胧胨胩胪胛胂胄胙胍胗朐胝胫胱胴胭脍脎胲胼朕脒豚脶脞脬脘脲腈腌腓腴腙腚腱腠腩腼腽腭腧塍媵膈膂膑滕膣膪臌朦臊膻�".split("");
      for (j3 = 0; j3 != D2[235].length; ++j3) if (D2[235][j3].charCodeAt(0) !== 65533) {
        e3[D2[235][j3]] = 60160 + j3;
        d3[60160 + j3] = D2[235][j3];
      }
      D2[236] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������臁膦欤欷欹歃歆歙飑飒飓飕飙飚殳彀毂觳斐齑斓於旆旄旃旌旎旒旖炀炜炖炝炻烀炷炫炱烨烊焐焓焖焯焱煳煜煨煅煲煊煸煺熘熳熵熨熠燠燔燧燹爝爨灬焘煦熹戾戽扃扈扉礻祀祆祉祛祜祓祚祢祗祠祯祧祺禅禊禚禧禳忑忐�".split("");
      for (j3 = 0; j3 != D2[236].length; ++j3) if (D2[236][j3].charCodeAt(0) !== 65533) {
        e3[D2[236][j3]] = 60416 + j3;
        d3[60416 + j3] = D2[236][j3];
      }
      D2[237] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������怼恝恚恧恁恙恣悫愆愍慝憩憝懋懑戆肀聿沓泶淼矶矸砀砉砗砘砑斫砭砜砝砹砺砻砟砼砥砬砣砩硎硭硖硗砦硐硇硌硪碛碓碚碇碜碡碣碲碹碥磔磙磉磬磲礅磴礓礤礞礴龛黹黻黼盱眄眍盹眇眈眚眢眙眭眦眵眸睐睑睇睃睚睨�".split("");
      for (j3 = 0; j3 != D2[237].length; ++j3) if (D2[237][j3].charCodeAt(0) !== 65533) {
        e3[D2[237][j3]] = 60672 + j3;
        d3[60672 + j3] = D2[237][j3];
      }
      D2[238] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������睢睥睿瞍睽瞀瞌瞑瞟瞠瞰瞵瞽町畀畎畋畈畛畲畹疃罘罡罟詈罨罴罱罹羁罾盍盥蠲钅钆钇钋钊钌钍钏钐钔钗钕钚钛钜钣钤钫钪钭钬钯钰钲钴钶钷钸钹钺钼钽钿铄铈铉铊铋铌铍铎铐铑铒铕铖铗铙铘铛铞铟铠铢铤铥铧铨铪�".split("");
      for (j3 = 0; j3 != D2[238].length; ++j3) if (D2[238][j3].charCodeAt(0) !== 65533) {
        e3[D2[238][j3]] = 60928 + j3;
        d3[60928 + j3] = D2[238][j3];
      }
      D2[239] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������铩铫铮铯铳铴铵铷铹铼铽铿锃锂锆锇锉锊锍锎锏锒锓锔锕锖锘锛锝锞锟锢锪锫锩锬锱锲锴锶锷锸锼锾锿镂锵镄镅镆镉镌镎镏镒镓镔镖镗镘镙镛镞镟镝镡镢镤镥镦镧镨镩镪镫镬镯镱镲镳锺矧矬雉秕秭秣秫稆嵇稃稂稞稔�".split("");
      for (j3 = 0; j3 != D2[239].length; ++j3) if (D2[239][j3].charCodeAt(0) !== 65533) {
        e3[D2[239][j3]] = 61184 + j3;
        d3[61184 + j3] = D2[239][j3];
      }
      D2[240] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������稹稷穑黏馥穰皈皎皓皙皤瓞瓠甬鸠鸢鸨鸩鸪鸫鸬鸲鸱鸶鸸鸷鸹鸺鸾鹁鹂鹄鹆鹇鹈鹉鹋鹌鹎鹑鹕鹗鹚鹛鹜鹞鹣鹦鹧鹨鹩鹪鹫鹬鹱鹭鹳疒疔疖疠疝疬疣疳疴疸痄疱疰痃痂痖痍痣痨痦痤痫痧瘃痱痼痿瘐瘀瘅瘌瘗瘊瘥瘘瘕瘙�".split("");
      for (j3 = 0; j3 != D2[240].length; ++j3) if (D2[240][j3].charCodeAt(0) !== 65533) {
        e3[D2[240][j3]] = 61440 + j3;
        d3[61440 + j3] = D2[240][j3];
      }
      D2[241] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������瘛瘼瘢瘠癀瘭瘰瘿瘵癃瘾瘳癍癞癔癜癖癫癯翊竦穸穹窀窆窈窕窦窠窬窨窭窳衤衩衲衽衿袂袢裆袷袼裉裢裎裣裥裱褚裼裨裾裰褡褙褓褛褊褴褫褶襁襦襻疋胥皲皴矜耒耔耖耜耠耢耥耦耧耩耨耱耋耵聃聆聍聒聩聱覃顸颀颃�".split("");
      for (j3 = 0; j3 != D2[241].length; ++j3) if (D2[241][j3].charCodeAt(0) !== 65533) {
        e3[D2[241][j3]] = 61696 + j3;
        d3[61696 + j3] = D2[241][j3];
      }
      D2[242] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������颉颌颍颏颔颚颛颞颟颡颢颥颦虍虔虬虮虿虺虼虻蚨蚍蚋蚬蚝蚧蚣蚪蚓蚩蚶蛄蚵蛎蚰蚺蚱蚯蛉蛏蚴蛩蛱蛲蛭蛳蛐蜓蛞蛴蛟蛘蛑蜃蜇蛸蜈蜊蜍蜉蜣蜻蜞蜥蜮蜚蜾蝈蜴蜱蜩蜷蜿螂蜢蝽蝾蝻蝠蝰蝌蝮螋蝓蝣蝼蝤蝙蝥螓螯螨蟒�".split("");
      for (j3 = 0; j3 != D2[242].length; ++j3) if (D2[242][j3].charCodeAt(0) !== 65533) {
        e3[D2[242][j3]] = 61952 + j3;
        d3[61952 + j3] = D2[242][j3];
      }
      D2[243] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������蟆螈螅螭螗螃螫蟥螬螵螳蟋蟓螽蟑蟀蟊蟛蟪蟠蟮蠖蠓蟾蠊蠛蠡蠹蠼缶罂罄罅舐竺竽笈笃笄笕笊笫笏筇笸笪笙笮笱笠笥笤笳笾笞筘筚筅筵筌筝筠筮筻筢筲筱箐箦箧箸箬箝箨箅箪箜箢箫箴篑篁篌篝篚篥篦篪簌篾篼簏簖簋�".split("");
      for (j3 = 0; j3 != D2[243].length; ++j3) if (D2[243][j3].charCodeAt(0) !== 65533) {
        e3[D2[243][j3]] = 62208 + j3;
        d3[62208 + j3] = D2[243][j3];
      }
      D2[244] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������簟簪簦簸籁籀臾舁舂舄臬衄舡舢舣舭舯舨舫舸舻舳舴舾艄艉艋艏艚艟艨衾袅袈裘裟襞羝羟羧羯羰羲籼敉粑粝粜粞粢粲粼粽糁糇糌糍糈糅糗糨艮暨羿翎翕翥翡翦翩翮翳糸絷綦綮繇纛麸麴赳趄趔趑趱赧赭豇豉酊酐酎酏酤�".split("");
      for (j3 = 0; j3 != D2[244].length; ++j3) if (D2[244][j3].charCodeAt(0) !== 65533) {
        e3[D2[244][j3]] = 62464 + j3;
        d3[62464 + j3] = D2[244][j3];
      }
      D2[245] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������酢酡酰酩酯酽酾酲酴酹醌醅醐醍醑醢醣醪醭醮醯醵醴醺豕鹾趸跫踅蹙蹩趵趿趼趺跄跖跗跚跞跎跏跛跆跬跷跸跣跹跻跤踉跽踔踝踟踬踮踣踯踺蹀踹踵踽踱蹉蹁蹂蹑蹒蹊蹰蹶蹼蹯蹴躅躏躔躐躜躞豸貂貊貅貘貔斛觖觞觚觜�".split("");
      for (j3 = 0; j3 != D2[245].length; ++j3) if (D2[245][j3].charCodeAt(0) !== 65533) {
        e3[D2[245][j3]] = 62720 + j3;
        d3[62720 + j3] = D2[245][j3];
      }
      D2[246] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������觥觫觯訾謦靓雩雳雯霆霁霈霏霎霪霭霰霾龀龃龅龆龇龈龉龊龌黾鼋鼍隹隼隽雎雒瞿雠銎銮鋈錾鍪鏊鎏鐾鑫鱿鲂鲅鲆鲇鲈稣鲋鲎鲐鲑鲒鲔鲕鲚鲛鲞鲟鲠鲡鲢鲣鲥鲦鲧鲨鲩鲫鲭鲮鲰鲱鲲鲳鲴鲵鲶鲷鲺鲻鲼鲽鳄鳅鳆鳇鳊鳋�".split("");
      for (j3 = 0; j3 != D2[246].length; ++j3) if (D2[246][j3].charCodeAt(0) !== 65533) {
        e3[D2[246][j3]] = 62976 + j3;
        d3[62976 + j3] = D2[246][j3];
      }
      D2[247] = "�����������������������������������������������������������������������������������������������������������������������������������������������������������������鳌鳍鳎鳏鳐鳓鳔鳕鳗鳘鳙鳜鳝鳟鳢靼鞅鞑鞒鞔鞯鞫鞣鞲鞴骱骰骷鹘骶骺骼髁髀髅髂髋髌髑魅魃魇魉魈魍魑飨餍餮饕饔髟髡髦髯髫髻髭髹鬈鬏鬓鬟鬣麽麾縻麂麇麈麋麒鏖麝麟黛黜黝黠黟黢黩黧黥黪黯鼢鼬鼯鼹鼷鼽鼾齄�".split("");
      for (j3 = 0; j3 != D2[247].length; ++j3) if (D2[247][j3].charCodeAt(0) !== 65533) {
        e3[D2[247][j3]] = 63232 + j3;
        d3[63232 + j3] = D2[247][j3];
      }
      return { "enc": e3, "dec": d3 };
    }();
    cptable2[10029] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄĀāÉĄÖÜáąČäčĆćéŹźĎíďĒēĖóėôöõúĚěü†°Ę£§•¶ß®©™ę¨≠ģĮįĪ≤≥īĶ∂∑łĻļĽľĹĺŅņŃ¬√ńŇ∆«»… ňŐÕőŌ–—“”‘’÷◊ōŔŕŘ‹›řŖŗŠ‚„šŚśÁŤťÍŽžŪÓÔūŮÚůŰűŲųÝýķŻŁżĢˇ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[10079] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûüÝ°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸ⁄¤ÐðÞþý·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙıˆ˜¯˘˙˚¸˝˛ˇ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[10081] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÄÅÇÉÑÖÜáàâäãåçéèêëíìîïñóòôöõúùûü†°¢£§•¶ß®©™´¨≠ÆØ∞±≤≥¥µ∂∑∏π∫ªºΩæø¿¡¬√ƒ≈∆«»… ÀÃÕŒœ–—“”‘’÷◊ÿŸĞğİıŞş‡·‚„‰ÂÊÁËÈÍÎÏÌÓÔ�ÒÚÛÙ�ˆ˜¯˘˙˚¸˝˛ˇ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    cptable2[28591] = function() {
      var d3 = "\0\x07\b	\n\v\f\r\x1B !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~ ¡¢£¤¥¦§¨©ª«¬­®¯°±²³´µ¶·¸¹º»¼½¾¿ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ", D2 = [], e3 = {};
      for (var i3 = 0; i3 != d3.length; ++i3) {
        if (d3.charCodeAt(i3) !== 65533) e3[d3.charAt(i3)] = i3;
        D2[i3] = d3.charAt(i3);
      }
      return { "enc": e3, "dec": D2 };
    }();
    if (typeof module !== "undefined" && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === "undefined") module.exports = cptable2;
    (function(root, factory) {
      "use strict";
      if (typeof cptable2 === "undefined") {
        if (typeof __require !== "undefined") {
          var cpt = cptable2;
          if (typeof module !== "undefined" && module.exports && typeof DO_NOT_EXPORT_CODEPAGE === "undefined") module.exports = factory(cpt);
          else root.cptable = factory(cpt);
        } else throw new Error("cptable not found");
      } else cptable2 = factory(cptable2);
    })(exports, function(cpt) {
      "use strict";
      var magic = {
        "1200": "utf16le",
        "1201": "utf16be",
        "12000": "utf32le",
        "12001": "utf32be",
        "16969": "utf64le",
        "20127": "ascii",
        "65000": "utf7",
        "65001": "utf8"
      };
      var sbcs_cache = [874, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1e4];
      var dbcs_cache = [932, 936, 949, 950];
      var magic_cache = [65001];
      var magic_decode = {};
      var magic_encode = {};
      var cpdcache = {};
      var cpecache = {};
      var sfcc = function sfcc2(x3) {
        return String.fromCharCode(x3);
      };
      var cca = function cca2(x3) {
        return x3.charCodeAt(0);
      };
      var has_buf = typeof Buffer !== "undefined";
      var Buffer_from = function() {
      };
      if (has_buf) {
        var nbfs = !Buffer.from;
        if (!nbfs) try {
          Buffer.from("foo", "utf8");
        } catch (e3) {
          nbfs = true;
        }
        Buffer_from = nbfs ? function(buf, enc) {
          return enc ? new Buffer(buf, enc) : new Buffer(buf);
        } : Buffer.from.bind(Buffer);
        if (!Buffer.allocUnsafe) Buffer.allocUnsafe = function(n3) {
          return new Buffer(n3);
        };
        var mdl = 1024, mdb = Buffer.allocUnsafe(mdl);
        var make_EE = function make_EE2(E3) {
          var EE = Buffer.allocUnsafe(65536);
          for (var i3 = 0; i3 < 65536; ++i3) EE[i3] = 0;
          var keys = Object.keys(E3), len = keys.length;
          for (var ee2 = 0, e3 = keys[ee2]; ee2 < len; ++ee2) {
            if (!(e3 = keys[ee2])) continue;
            EE[e3.charCodeAt(0)] = E3[e3];
          }
          return EE;
        };
        var sbcs_encode = function make_sbcs_encode(cp) {
          var EE = make_EE(cpt[cp].enc);
          return function sbcs_e(data, ofmt) {
            var len = data.length;
            var out, i3 = 0, j3 = 0, D2 = 0, w3 = 0;
            if (typeof data === "string") {
              out = Buffer.allocUnsafe(len);
              for (i3 = 0; i3 < len; ++i3) out[i3] = EE[data.charCodeAt(i3)];
            } else if (Buffer.isBuffer(data)) {
              out = Buffer.allocUnsafe(2 * len);
              j3 = 0;
              for (i3 = 0; i3 < len; ++i3) {
                D2 = data[i3];
                if (D2 < 128) out[j3++] = EE[D2];
                else if (D2 < 224) {
                  out[j3++] = EE[((D2 & 31) << 6) + (data[i3 + 1] & 63)];
                  ++i3;
                } else if (D2 < 240) {
                  out[j3++] = EE[((D2 & 15) << 12) + ((data[i3 + 1] & 63) << 6) + (data[i3 + 2] & 63)];
                  i3 += 2;
                } else {
                  w3 = ((D2 & 7) << 18) + ((data[i3 + 1] & 63) << 12) + ((data[i3 + 2] & 63) << 6) + (data[i3 + 3] & 63);
                  i3 += 3;
                  if (w3 < 65536) out[j3++] = EE[w3];
                  else {
                    w3 -= 65536;
                    out[j3++] = EE[55296 + (w3 >> 10 & 1023)];
                    out[j3++] = EE[56320 + (w3 & 1023)];
                  }
                }
              }
              out = out.slice(0, j3);
            } else {
              out = Buffer.allocUnsafe(len);
              for (i3 = 0; i3 < len; ++i3) out[i3] = EE[data[i3].charCodeAt(0)];
            }
            if (!ofmt || ofmt === "buf") return out;
            if (ofmt !== "arr") return out.toString("binary");
            return [].slice.call(out);
          };
        };
        var sbcs_decode = function make_sbcs_decode(cp) {
          var D2 = cpt[cp].dec;
          var DD = Buffer.allocUnsafe(131072), d3 = 0, c3 = "";
          for (d3 = 0; d3 < D2.length; ++d3) {
            if (!(c3 = D2[d3])) continue;
            var w3 = c3.charCodeAt(0);
            DD[2 * d3] = w3 & 255;
            DD[2 * d3 + 1] = w3 >> 8;
          }
          return function sbcs_d(data) {
            var len = data.length, i3 = 0, j3 = 0;
            if (2 * len > mdl) {
              mdl = 2 * len;
              mdb = Buffer.allocUnsafe(mdl);
            }
            if (Buffer.isBuffer(data)) {
              for (i3 = 0; i3 < len; i3++) {
                j3 = 2 * data[i3];
                mdb[2 * i3] = DD[j3];
                mdb[2 * i3 + 1] = DD[j3 + 1];
              }
            } else if (typeof data === "string") {
              for (i3 = 0; i3 < len; i3++) {
                j3 = 2 * data.charCodeAt(i3);
                mdb[2 * i3] = DD[j3];
                mdb[2 * i3 + 1] = DD[j3 + 1];
              }
            } else {
              for (i3 = 0; i3 < len; i3++) {
                j3 = 2 * data[i3];
                mdb[2 * i3] = DD[j3];
                mdb[2 * i3 + 1] = DD[j3 + 1];
              }
            }
            return mdb.slice(0, 2 * len).toString("ucs2");
          };
        };
        var dbcs_encode = function make_dbcs_encode(cp) {
          var E3 = cpt[cp].enc;
          var EE = Buffer.allocUnsafe(131072);
          for (var i3 = 0; i3 < 131072; ++i3) EE[i3] = 0;
          var keys = Object.keys(E3);
          for (var ee2 = 0, e3 = keys[ee2]; ee2 < keys.length; ++ee2) {
            if (!(e3 = keys[ee2])) continue;
            var f2 = e3.charCodeAt(0);
            EE[2 * f2] = E3[e3] & 255;
            EE[2 * f2 + 1] = E3[e3] >> 8;
          }
          return function dbcs_e(data, ofmt) {
            var len = data.length, out = Buffer.allocUnsafe(2 * len), i4 = 0, j3 = 0, jj = 0, k3 = 0, D2 = 0;
            if (typeof data === "string") {
              for (i4 = k3 = 0; i4 < len; ++i4) {
                j3 = data.charCodeAt(i4) * 2;
                out[k3++] = EE[j3 + 1] || EE[j3];
                if (EE[j3 + 1] > 0) out[k3++] = EE[j3];
              }
              out = out.slice(0, k3);
            } else if (Buffer.isBuffer(data)) {
              for (i4 = k3 = 0; i4 < len; ++i4) {
                D2 = data[i4];
                if (D2 < 128) j3 = D2;
                else if (D2 < 224) {
                  j3 = ((D2 & 31) << 6) + (data[i4 + 1] & 63);
                  ++i4;
                } else if (D2 < 240) {
                  j3 = ((D2 & 15) << 12) + ((data[i4 + 1] & 63) << 6) + (data[i4 + 2] & 63);
                  i4 += 2;
                } else {
                  j3 = ((D2 & 7) << 18) + ((data[i4 + 1] & 63) << 12) + ((data[i4 + 2] & 63) << 6) + (data[i4 + 3] & 63);
                  i4 += 3;
                }
                if (j3 < 65536) {
                  j3 *= 2;
                  out[k3++] = EE[j3 + 1] || EE[j3];
                  if (EE[j3 + 1] > 0) out[k3++] = EE[j3];
                } else {
                  jj = j3 - 65536;
                  j3 = 2 * (55296 + (jj >> 10 & 1023));
                  out[k3++] = EE[j3 + 1] || EE[j3];
                  if (EE[j3 + 1] > 0) out[k3++] = EE[j3];
                  j3 = 2 * (56320 + (jj & 1023));
                  out[k3++] = EE[j3 + 1] || EE[j3];
                  if (EE[j3 + 1] > 0) out[k3++] = EE[j3];
                }
              }
              out = out.slice(0, k3);
            } else {
              for (i4 = k3 = 0; i4 < len; i4++) {
                j3 = data[i4].charCodeAt(0) * 2;
                out[k3++] = EE[j3 + 1] || EE[j3];
                if (EE[j3 + 1] > 0) out[k3++] = EE[j3];
              }
            }
            if (!ofmt || ofmt === "buf") return out;
            if (ofmt !== "arr") return out.toString("binary");
            return [].slice.call(out);
          };
        };
        var dbcs_decode = function make_dbcs_decode(cp) {
          var D2 = cpt[cp].dec;
          var DD = Buffer.allocUnsafe(131072), d3 = 0, c3, w3 = 0, j3 = 0, i3 = 0;
          for (i3 = 0; i3 < 65536; ++i3) {
            DD[2 * i3] = 255;
            DD[2 * i3 + 1] = 253;
          }
          for (d3 = 0; d3 < D2.length; ++d3) {
            if (!(c3 = D2[d3])) continue;
            w3 = c3.charCodeAt(0);
            j3 = 2 * d3;
            DD[j3] = w3 & 255;
            DD[j3 + 1] = w3 >> 8;
          }
          return function dbcs_d(data) {
            var len = data.length, out = Buffer.allocUnsafe(2 * len), i4 = 0, j4 = 0, k3 = 0;
            if (Buffer.isBuffer(data)) {
              for (i4 = 0; i4 < len; i4++) {
                j4 = 2 * data[i4];
                if (DD[j4] === 255 && DD[j4 + 1] === 253) {
                  j4 = 2 * ((data[i4] << 8) + data[i4 + 1]);
                  ++i4;
                }
                out[k3++] = DD[j4];
                out[k3++] = DD[j4 + 1];
              }
            } else if (typeof data === "string") {
              for (i4 = 0; i4 < len; i4++) {
                j4 = 2 * data.charCodeAt(i4);
                if (DD[j4] === 255 && DD[j4 + 1] === 253) {
                  j4 = 2 * ((data.charCodeAt(i4) << 8) + data.charCodeAt(i4 + 1));
                  ++i4;
                }
                out[k3++] = DD[j4];
                out[k3++] = DD[j4 + 1];
              }
            } else {
              for (i4 = 0; i4 < len; i4++) {
                j4 = 2 * data[i4];
                if (DD[j4] === 255 && DD[j4 + 1] === 253) {
                  j4 = 2 * ((data[i4] << 8) + data[i4 + 1]);
                  ++i4;
                }
                out[k3++] = DD[j4];
                out[k3++] = DD[j4 + 1];
              }
            }
            return out.slice(0, k3).toString("ucs2");
          };
        };
        magic_decode[65001] = function utf8_d(data) {
          if (typeof data === "string") return utf8_d(data.split("").map(cca));
          var len = data.length, w3 = 0, ww = 0;
          if (4 * len > mdl) {
            mdl = 4 * len;
            mdb = Buffer.allocUnsafe(mdl);
          }
          var i3 = 0;
          if (len >= 3 && data[0] == 239) {
            if (data[1] == 187 && data[2] == 191) i3 = 3;
          }
          for (var j3 = 1, k3 = 0, D2 = 0; i3 < len; i3 += j3) {
            j3 = 1;
            D2 = data[i3];
            if (D2 < 128) w3 = D2;
            else if (D2 < 224) {
              w3 = (D2 & 31) * 64 + (data[i3 + 1] & 63);
              j3 = 2;
            } else if (D2 < 240) {
              w3 = ((D2 & 15) << 12) + (data[i3 + 1] & 63) * 64 + (data[i3 + 2] & 63);
              j3 = 3;
            } else {
              w3 = (D2 & 7) * 262144 + ((data[i3 + 1] & 63) << 12) + (data[i3 + 2] & 63) * 64 + (data[i3 + 3] & 63);
              j3 = 4;
            }
            if (w3 < 65536) {
              mdb[k3++] = w3 & 255;
              mdb[k3++] = w3 >> 8;
            } else {
              w3 -= 65536;
              ww = 55296 + (w3 >> 10 & 1023);
              w3 = 56320 + (w3 & 1023);
              mdb[k3++] = ww & 255;
              mdb[k3++] = ww >>> 8;
              mdb[k3++] = w3 & 255;
              mdb[k3++] = w3 >>> 8 & 255;
            }
          }
          return mdb.slice(0, k3).toString("ucs2");
        };
        magic_encode[65001] = function utf8_e(data, ofmt) {
          if (has_buf && Buffer.isBuffer(data)) {
            if (!ofmt || ofmt === "buf") return data;
            if (ofmt !== "arr") return data.toString("binary");
            return [].slice.call(data);
          }
          var len = data.length, w3 = 0, ww = 0, j3 = 0;
          var direct = typeof data === "string";
          if (4 * len > mdl) {
            mdl = 4 * len;
            mdb = Buffer.allocUnsafe(mdl);
          }
          for (var i3 = 0; i3 < len; ++i3) {
            w3 = direct ? data.charCodeAt(i3) : data[i3].charCodeAt(0);
            if (w3 <= 127) mdb[j3++] = w3;
            else if (w3 <= 2047) {
              mdb[j3++] = 192 + (w3 >> 6);
              mdb[j3++] = 128 + (w3 & 63);
            } else if (w3 >= 55296 && w3 <= 57343) {
              w3 -= 55296;
              ++i3;
              ww = (direct ? data.charCodeAt(i3) : data[i3].charCodeAt(0)) - 56320 + (w3 << 10);
              mdb[j3++] = 240 + (ww >>> 18 & 7);
              mdb[j3++] = 144 + (ww >>> 12 & 63);
              mdb[j3++] = 128 + (ww >>> 6 & 63);
              mdb[j3++] = 128 + (ww & 63);
            } else {
              mdb[j3++] = 224 + (w3 >> 12);
              mdb[j3++] = 128 + (w3 >> 6 & 63);
              mdb[j3++] = 128 + (w3 & 63);
            }
          }
          if (!ofmt || ofmt === "buf") return mdb.slice(0, j3);
          if (ofmt !== "arr") return mdb.slice(0, j3).toString("binary");
          return [].slice.call(mdb, 0, j3);
        };
      }
      var encache = function encache2() {
        if (has_buf) {
          if (cpdcache[sbcs_cache[0]]) return;
          var i3 = 0, s3 = 0;
          for (i3 = 0; i3 < sbcs_cache.length; ++i3) {
            s3 = sbcs_cache[i3];
            if (cpt[s3]) {
              cpdcache[s3] = sbcs_decode(s3);
              cpecache[s3] = sbcs_encode(s3);
            }
          }
          for (i3 = 0; i3 < dbcs_cache.length; ++i3) {
            s3 = dbcs_cache[i3];
            if (cpt[s3]) {
              cpdcache[s3] = dbcs_decode(s3);
              cpecache[s3] = dbcs_encode(s3);
            }
          }
          for (i3 = 0; i3 < magic_cache.length; ++i3) {
            s3 = magic_cache[i3];
            if (magic_decode[s3]) cpdcache[s3] = magic_decode[s3];
            if (magic_encode[s3]) cpecache[s3] = magic_encode[s3];
          }
        }
      };
      var null_enc = function(data, ofmt) {
        return "";
      };
      var cp_decache = function cp_decache2(cp) {
        delete cpdcache[cp];
        delete cpecache[cp];
      };
      var decache = function decache2() {
        if (has_buf) {
          if (!cpdcache[sbcs_cache[0]]) return;
          sbcs_cache.forEach(cp_decache);
          dbcs_cache.forEach(cp_decache);
          magic_cache.forEach(cp_decache);
        }
        last_enc = null_enc;
        last_cp = 0;
      };
      var cache = {
        encache,
        decache,
        sbcs: sbcs_cache,
        dbcs: dbcs_cache
      };
      encache();
      var BM = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
      var SetD = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'(),-./:?";
      var last_enc = null_enc, last_cp = 0;
      var encode = function encode2(cp, data, ofmt) {
        if (cp === last_cp && last_enc) {
          return last_enc(data, ofmt);
        }
        if (cpecache[cp]) {
          last_enc = cpecache[last_cp = cp];
          return last_enc(data, ofmt);
        }
        if (has_buf && Buffer.isBuffer(data)) data = data.toString("utf8");
        var len = data.length;
        var out = has_buf ? Buffer.allocUnsafe(4 * len) : [], w3 = 0, i3 = 0, j3 = 0, ww = 0;
        var C2 = cpt[cp], E3, M2 = "";
        var isstr = typeof data === "string";
        if (C2 && (E3 = C2.enc)) for (i3 = 0; i3 < len; ++i3, ++j3) {
          w3 = E3[isstr ? data.charAt(i3) : data[i3]];
          if (w3 > 255) {
            out[j3] = w3 >> 8;
            out[++j3] = w3 & 255;
          } else out[j3] = w3 & 255;
        }
        else if (M2 = magic[cp]) switch (M2) {
          case "utf8":
            if (has_buf && isstr) {
              out = Buffer_from(data, M2);
              j3 = out.length;
              break;
            }
            for (i3 = 0; i3 < len; ++i3, ++j3) {
              w3 = isstr ? data.charCodeAt(i3) : data[i3].charCodeAt(0);
              if (w3 <= 127) out[j3] = w3;
              else if (w3 <= 2047) {
                out[j3] = 192 + (w3 >> 6);
                out[++j3] = 128 + (w3 & 63);
              } else if (w3 >= 55296 && w3 <= 57343) {
                w3 -= 55296;
                ww = (isstr ? data.charCodeAt(++i3) : data[++i3].charCodeAt(0)) - 56320 + (w3 << 10);
                out[j3] = 240 + (ww >>> 18 & 7);
                out[++j3] = 144 + (ww >>> 12 & 63);
                out[++j3] = 128 + (ww >>> 6 & 63);
                out[++j3] = 128 + (ww & 63);
              } else {
                out[j3] = 224 + (w3 >> 12);
                out[++j3] = 128 + (w3 >> 6 & 63);
                out[++j3] = 128 + (w3 & 63);
              }
            }
            break;
          case "ascii":
            if (has_buf && typeof data === "string") {
              out = Buffer_from(data, M2);
              j3 = out.length;
              break;
            }
            for (i3 = 0; i3 < len; ++i3, ++j3) {
              w3 = isstr ? data.charCodeAt(i3) : data[i3].charCodeAt(0);
              if (w3 <= 127) out[j3] = w3;
              else throw new Error("bad ascii " + w3);
            }
            break;
          case "utf16le":
            if (has_buf && typeof data === "string") {
              out = Buffer_from(data, M2);
              j3 = out.length;
              break;
            }
            for (i3 = 0; i3 < len; ++i3) {
              w3 = isstr ? data.charCodeAt(i3) : data[i3].charCodeAt(0);
              out[j3++] = w3 & 255;
              out[j3++] = w3 >> 8;
            }
            break;
          case "utf16be":
            for (i3 = 0; i3 < len; ++i3) {
              w3 = isstr ? data.charCodeAt(i3) : data[i3].charCodeAt(0);
              out[j3++] = w3 >> 8;
              out[j3++] = w3 & 255;
            }
            break;
          case "utf32le":
            for (i3 = 0; i3 < len; ++i3) {
              w3 = isstr ? data.charCodeAt(i3) : data[i3].charCodeAt(0);
              if (w3 >= 55296 && w3 <= 57343) w3 = 65536 + (w3 - 55296 << 10) + (data[++i3].charCodeAt(0) - 56320);
              out[j3++] = w3 & 255;
              w3 >>= 8;
              out[j3++] = w3 & 255;
              w3 >>= 8;
              out[j3++] = w3 & 255;
              w3 >>= 8;
              out[j3++] = w3 & 255;
            }
            break;
          case "utf32be":
            for (i3 = 0; i3 < len; ++i3) {
              w3 = isstr ? data.charCodeAt(i3) : data[i3].charCodeAt(0);
              if (w3 >= 55296 && w3 <= 57343) w3 = 65536 + (w3 - 55296 << 10) + (data[++i3].charCodeAt(0) - 56320);
              out[j3 + 3] = w3 & 255;
              w3 >>= 8;
              out[j3 + 2] = w3 & 255;
              w3 >>= 8;
              out[j3 + 1] = w3 & 255;
              w3 >>= 8;
              out[j3] = w3 & 255;
              j3 += 4;
            }
            break;
          case "utf7":
            for (i3 = 0; i3 < len; i3++) {
              var c3 = isstr ? data.charAt(i3) : data[i3].charAt(0);
              if (c3 === "+") {
                out[j3++] = 43;
                out[j3++] = 45;
                continue;
              }
              if (SetD.indexOf(c3) > -1) {
                out[j3++] = c3.charCodeAt(0);
                continue;
              }
              var tt2 = encode2(1201, c3);
              out[j3++] = 43;
              out[j3++] = BM.charCodeAt(tt2[0] >> 2);
              out[j3++] = BM.charCodeAt(((tt2[0] & 3) << 4) + ((tt2[1] || 0) >> 4));
              out[j3++] = BM.charCodeAt(((tt2[1] & 15) << 2) + ((tt2[2] || 0) >> 6));
              out[j3++] = 45;
            }
            break;
          default:
            throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
        }
        else throw new Error("Unrecognized CP: " + cp);
        out = out.slice(0, j3);
        if (!has_buf) return ofmt == "str" ? out.map(sfcc).join("") : out;
        if (!ofmt || ofmt === "buf") return out;
        if (ofmt !== "arr") return out.toString("binary");
        return [].slice.call(out);
      };
      var decode = function decode2(cp, data) {
        var F2;
        if (F2 = cpdcache[cp]) return F2(data);
        if (typeof data === "string") return decode2(cp, data.split("").map(cca));
        var len = data.length, out = new Array(len), s3 = "", w3 = 0, i3 = 0, j3 = 1, k3 = 0, ww = 0;
        var C2 = cpt[cp], D2, M2 = "";
        if (C2 && (D2 = C2.dec)) {
          for (i3 = 0; i3 < len; i3 += j3) {
            j3 = 2;
            s3 = D2[(data[i3] << 8) + data[i3 + 1]];
            if (!s3) {
              j3 = 1;
              s3 = D2[data[i3]];
            }
            if (!s3) throw new Error("Unrecognized code: " + data[i3] + " " + data[i3 + j3 - 1] + " " + i3 + " " + j3 + " " + D2[data[i3]]);
            out[k3++] = s3;
          }
        } else if (M2 = magic[cp]) switch (M2) {
          case "utf8":
            if (len >= 3 && data[0] == 239) {
              if (data[1] == 187 && data[2] == 191) i3 = 3;
            }
            for (; i3 < len; i3 += j3) {
              j3 = 1;
              if (data[i3] < 128) w3 = data[i3];
              else if (data[i3] < 224) {
                w3 = (data[i3] & 31) * 64 + (data[i3 + 1] & 63);
                j3 = 2;
              } else if (data[i3] < 240) {
                w3 = ((data[i3] & 15) << 12) + (data[i3 + 1] & 63) * 64 + (data[i3 + 2] & 63);
                j3 = 3;
              } else {
                w3 = (data[i3] & 7) * 262144 + ((data[i3 + 1] & 63) << 12) + (data[i3 + 2] & 63) * 64 + (data[i3 + 3] & 63);
                j3 = 4;
              }
              if (w3 < 65536) {
                out[k3++] = String.fromCharCode(w3);
              } else {
                w3 -= 65536;
                ww = 55296 + (w3 >> 10 & 1023);
                w3 = 56320 + (w3 & 1023);
                out[k3++] = String.fromCharCode(ww);
                out[k3++] = String.fromCharCode(w3);
              }
            }
            break;
          case "ascii":
            if (has_buf && Buffer.isBuffer(data)) return data.toString(M2);
            for (i3 = 0; i3 < len; i3++) out[i3] = String.fromCharCode(data[i3]);
            k3 = len;
            break;
          case "utf16le":
            if (len >= 2 && data[0] == 255) {
              if (data[1] == 254) i3 = 2;
            }
            if (has_buf && Buffer.isBuffer(data)) return data.toString(M2);
            j3 = 2;
            for (; i3 + 1 < len; i3 += j3) {
              out[k3++] = String.fromCharCode((data[i3 + 1] << 8) + data[i3]);
            }
            break;
          case "utf16be":
            if (len >= 2 && data[0] == 254) {
              if (data[1] == 255) i3 = 2;
            }
            j3 = 2;
            for (; i3 + 1 < len; i3 += j3) {
              out[k3++] = String.fromCharCode((data[i3] << 8) + data[i3 + 1]);
            }
            break;
          case "utf32le":
            if (len >= 4 && data[0] == 255) {
              if (data[1] == 254 && data[2] === 0 && data[3] === 0) i3 = 4;
            }
            j3 = 4;
            for (; i3 < len; i3 += j3) {
              w3 = (data[i3 + 3] << 24) + (data[i3 + 2] << 16) + (data[i3 + 1] << 8) + data[i3];
              if (w3 > 65535) {
                w3 -= 65536;
                out[k3++] = String.fromCharCode(55296 + (w3 >> 10 & 1023));
                out[k3++] = String.fromCharCode(56320 + (w3 & 1023));
              } else out[k3++] = String.fromCharCode(w3);
            }
            break;
          case "utf32be":
            if (len >= 4 && data[3] == 255) {
              if (data[2] == 254 && data[1] === 0 && data[0] === 0) i3 = 4;
            }
            j3 = 4;
            for (; i3 < len; i3 += j3) {
              w3 = (data[i3] << 24) + (data[i3 + 1] << 16) + (data[i3 + 2] << 8) + data[i3 + 3];
              if (w3 > 65535) {
                w3 -= 65536;
                out[k3++] = String.fromCharCode(55296 + (w3 >> 10 & 1023));
                out[k3++] = String.fromCharCode(56320 + (w3 & 1023));
              } else out[k3++] = String.fromCharCode(w3);
            }
            break;
          case "utf7":
            if (len >= 4 && data[0] == 43 && data[1] == 47 && data[2] == 118) {
              if (len >= 5 && data[3] == 56 && data[4] == 45) i3 = 5;
              else if (data[3] == 56 || data[3] == 57 || data[3] == 43 || data[3] == 47) i3 = 4;
            }
            for (; i3 < len; i3 += j3) {
              if (data[i3] !== 43) {
                j3 = 1;
                out[k3++] = String.fromCharCode(data[i3]);
                continue;
              }
              j3 = 1;
              if (data[i3 + 1] === 45) {
                j3 = 2;
                out[k3++] = "+";
                continue;
              }
              while (String.fromCharCode(data[i3 + j3]).match(/[A-Za-z0-9+\/]/)) j3++;
              var dash = 0;
              if (data[i3 + j3] === 45) {
                ++j3;
                dash = 1;
              }
              var tt2 = [];
              var o64 = "";
              var c1 = 0, c22 = 0, c3 = 0;
              var e1 = 0, e22 = 0, e3 = 0, e4 = 0;
              for (var l2 = 1; l2 < j3 - dash; ) {
                e1 = BM.indexOf(String.fromCharCode(data[i3 + l2++]));
                e22 = BM.indexOf(String.fromCharCode(data[i3 + l2++]));
                c1 = e1 << 2 | e22 >> 4;
                tt2.push(c1);
                e3 = BM.indexOf(String.fromCharCode(data[i3 + l2++]));
                if (e3 === -1) break;
                c22 = (e22 & 15) << 4 | e3 >> 2;
                tt2.push(c22);
                e4 = BM.indexOf(String.fromCharCode(data[i3 + l2++]));
                if (e4 === -1) break;
                c3 = (e3 & 3) << 6 | e4;
                if (e4 < 64) tt2.push(c3);
              }
              o64 = decode2(1201, tt2);
              for (l2 = 0; l2 < o64.length; ++l2) out[k3++] = o64.charAt(l2);
            }
            break;
          default:
            throw new Error("Unsupported magic: " + cp + " " + magic[cp]);
        }
        else throw new Error("Unrecognized CP: " + cp);
        return out.slice(0, k3).join("");
      };
      var hascp = function hascp2(cp) {
        return !!(cpt[cp] || magic[cp]);
      };
      cpt.utils = { decode, encode, hascp, magic, cache };
      return cpt;
    });
  }
});

// ../../node_modules/xlsx/xlsx.js
var require_xlsx = __commonJS({
  "../../node_modules/xlsx/xlsx.js"(exports, module) {
    init_esm();
    var XLSX = {};
    function make_xlsx_lib(XLSX2) {
      XLSX2.version = "0.18.5";
      var current_codepage = 1200, current_ansi = 1252;
      var $cptable;
      if (typeof cptable !== "undefined") $cptable = cptable;
      else if (typeof module !== "undefined" && typeof __require !== "undefined") {
        $cptable = require_cpexcel();
      }
      var VALID_ANSI = [874, 932, 936, 949, 950, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1e4];
      var CS2CP = {
        0: 1252,
        /* ANSI */
        1: 65001,
        /* DEFAULT */
        2: 65001,
        /* SYMBOL */
        77: 1e4,
        /* MAC */
        128: 932,
        /* SHIFTJIS */
        129: 949,
        /* HANGUL */
        130: 1361,
        /* JOHAB */
        134: 936,
        /* GB2312 */
        136: 950,
        /* CHINESEBIG5 */
        161: 1253,
        /* GREEK */
        162: 1254,
        /* TURKISH */
        163: 1258,
        /* VIETNAMESE */
        177: 1255,
        /* HEBREW */
        178: 1256,
        /* ARABIC */
        186: 1257,
        /* BALTIC */
        204: 1251,
        /* RUSSIAN */
        222: 874,
        /* THAI */
        238: 1250,
        /* EASTEUROPE */
        255: 1252,
        /* OEM */
        69: 6969
        /* MISC */
      };
      var set_ansi = function(cp) {
        if (VALID_ANSI.indexOf(cp) == -1) return;
        current_ansi = CS2CP[0] = cp;
      };
      function reset_ansi() {
        set_ansi(1252);
      }
      var set_cp = function(cp) {
        current_codepage = cp;
        set_ansi(cp);
      };
      function reset_cp() {
        set_cp(1200);
        reset_ansi();
      }
      function char_codes(data) {
        var o3 = [];
        for (var i3 = 0, len = data.length; i3 < len; ++i3) o3[i3] = data.charCodeAt(i3);
        return o3;
      }
      function utf16leread(data) {
        var o3 = [];
        for (var i3 = 0; i3 < data.length >> 1; ++i3) o3[i3] = String.fromCharCode(data.charCodeAt(2 * i3) + (data.charCodeAt(2 * i3 + 1) << 8));
        return o3.join("");
      }
      function utf16beread(data) {
        var o3 = [];
        for (var i3 = 0; i3 < data.length >> 1; ++i3) o3[i3] = String.fromCharCode(data.charCodeAt(2 * i3 + 1) + (data.charCodeAt(2 * i3) << 8));
        return o3.join("");
      }
      var debom = function(data) {
        var c1 = data.charCodeAt(0), c22 = data.charCodeAt(1);
        if (c1 == 255 && c22 == 254) return utf16leread(data.slice(2));
        if (c1 == 254 && c22 == 255) return utf16beread(data.slice(2));
        if (c1 == 65279) return data.slice(1);
        return data;
      };
      var _getchar = function _gc1(x3) {
        return String.fromCharCode(x3);
      };
      var _getansi = function _ga1(x3) {
        return String.fromCharCode(x3);
      };
      if (typeof $cptable !== "undefined") {
        set_cp = function(cp) {
          current_codepage = cp;
          set_ansi(cp);
        };
        debom = function(data) {
          if (data.charCodeAt(0) === 255 && data.charCodeAt(1) === 254) {
            return $cptable.utils.decode(1200, char_codes(data.slice(2)));
          }
          return data;
        };
        _getchar = function _gc2(x3) {
          if (current_codepage === 1200) return String.fromCharCode(x3);
          return $cptable.utils.decode(current_codepage, [x3 & 255, x3 >> 8])[0];
        };
        _getansi = function _ga2(x3) {
          return $cptable.utils.decode(current_ansi, [x3])[0];
        };
      }
      var DENSE = null;
      var DIF_XL = true;
      var Base64_map = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
      function Base64_encode(input) {
        var o3 = "";
        var c1 = 0, c22 = 0, c3 = 0, e1 = 0, e22 = 0, e3 = 0, e4 = 0;
        for (var i3 = 0; i3 < input.length; ) {
          c1 = input.charCodeAt(i3++);
          e1 = c1 >> 2;
          c22 = input.charCodeAt(i3++);
          e22 = (c1 & 3) << 4 | c22 >> 4;
          c3 = input.charCodeAt(i3++);
          e3 = (c22 & 15) << 2 | c3 >> 6;
          e4 = c3 & 63;
          if (isNaN(c22)) {
            e3 = e4 = 64;
          } else if (isNaN(c3)) {
            e4 = 64;
          }
          o3 += Base64_map.charAt(e1) + Base64_map.charAt(e22) + Base64_map.charAt(e3) + Base64_map.charAt(e4);
        }
        return o3;
      }
      function Base64_decode(input) {
        var o3 = "";
        var c1 = 0, c22 = 0, c3 = 0, e1 = 0, e22 = 0, e3 = 0, e4 = 0;
        input = input.replace(/[^\w\+\/\=]/g, "");
        for (var i3 = 0; i3 < input.length; ) {
          e1 = Base64_map.indexOf(input.charAt(i3++));
          e22 = Base64_map.indexOf(input.charAt(i3++));
          c1 = e1 << 2 | e22 >> 4;
          o3 += String.fromCharCode(c1);
          e3 = Base64_map.indexOf(input.charAt(i3++));
          c22 = (e22 & 15) << 4 | e3 >> 2;
          if (e3 !== 64) {
            o3 += String.fromCharCode(c22);
          }
          e4 = Base64_map.indexOf(input.charAt(i3++));
          c3 = (e3 & 3) << 6 | e4;
          if (e4 !== 64) {
            o3 += String.fromCharCode(c3);
          }
        }
        return o3;
      }
      var has_buf = function() {
        return typeof Buffer !== "undefined" && typeof process !== "undefined" && typeof process.versions !== "undefined" && !!process.versions.node;
      }();
      var Buffer_from = function() {
        if (typeof Buffer !== "undefined") {
          var nbfs = !Buffer.from;
          if (!nbfs) try {
            Buffer.from("foo", "utf8");
          } catch (e3) {
            nbfs = true;
          }
          return nbfs ? function(buf, enc) {
            return enc ? new Buffer(buf, enc) : new Buffer(buf);
          } : Buffer.from.bind(Buffer);
        }
        return function() {
        };
      }();
      function new_raw_buf(len) {
        if (has_buf) return Buffer.alloc ? Buffer.alloc(len) : new Buffer(len);
        return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
      }
      function new_unsafe_buf(len) {
        if (has_buf) return Buffer.allocUnsafe ? Buffer.allocUnsafe(len) : new Buffer(len);
        return typeof Uint8Array != "undefined" ? new Uint8Array(len) : new Array(len);
      }
      var s2a = function s2a2(s3) {
        if (has_buf) return Buffer_from(s3, "binary");
        return s3.split("").map(function(x3) {
          return x3.charCodeAt(0) & 255;
        });
      };
      function s2ab(s3) {
        if (typeof ArrayBuffer === "undefined") return s2a(s3);
        var buf = new ArrayBuffer(s3.length), view = new Uint8Array(buf);
        for (var i3 = 0; i3 != s3.length; ++i3) view[i3] = s3.charCodeAt(i3) & 255;
        return buf;
      }
      function a2s(data) {
        if (Array.isArray(data)) return data.map(function(c3) {
          return String.fromCharCode(c3);
        }).join("");
        var o3 = [];
        for (var i3 = 0; i3 < data.length; ++i3) o3[i3] = String.fromCharCode(data[i3]);
        return o3.join("");
      }
      function a2u(data) {
        if (typeof Uint8Array === "undefined") throw new Error("Unsupported");
        return new Uint8Array(data);
      }
      function ab2a(data) {
        if (typeof ArrayBuffer == "undefined") throw new Error("Unsupported");
        if (data instanceof ArrayBuffer) return ab2a(new Uint8Array(data));
        var o3 = new Array(data.length);
        for (var i3 = 0; i3 < data.length; ++i3) o3[i3] = data[i3];
        return o3;
      }
      var bconcat = has_buf ? function(bufs) {
        return Buffer.concat(bufs.map(function(buf) {
          return Buffer.isBuffer(buf) ? buf : Buffer_from(buf);
        }));
      } : function(bufs) {
        if (typeof Uint8Array !== "undefined") {
          var i3 = 0, maxlen = 0;
          for (i3 = 0; i3 < bufs.length; ++i3) maxlen += bufs[i3].length;
          var o3 = new Uint8Array(maxlen);
          var len = 0;
          for (i3 = 0, maxlen = 0; i3 < bufs.length; maxlen += len, ++i3) {
            len = bufs[i3].length;
            if (bufs[i3] instanceof Uint8Array) o3.set(bufs[i3], maxlen);
            else if (typeof bufs[i3] == "string") {
              throw "wtf";
            } else o3.set(new Uint8Array(bufs[i3]), maxlen);
          }
          return o3;
        }
        return [].concat.apply([], bufs.map(function(buf) {
          return Array.isArray(buf) ? buf : [].slice.call(buf);
        }));
      };
      function utf8decode(content) {
        var out = [], widx = 0, L2 = content.length + 250;
        var o3 = new_raw_buf(content.length + 255);
        for (var ridx = 0; ridx < content.length; ++ridx) {
          var c3 = content.charCodeAt(ridx);
          if (c3 < 128) o3[widx++] = c3;
          else if (c3 < 2048) {
            o3[widx++] = 192 | c3 >> 6 & 31;
            o3[widx++] = 128 | c3 & 63;
          } else if (c3 >= 55296 && c3 < 57344) {
            c3 = (c3 & 1023) + 64;
            var d3 = content.charCodeAt(++ridx) & 1023;
            o3[widx++] = 240 | c3 >> 8 & 7;
            o3[widx++] = 128 | c3 >> 2 & 63;
            o3[widx++] = 128 | d3 >> 6 & 15 | (c3 & 3) << 4;
            o3[widx++] = 128 | d3 & 63;
          } else {
            o3[widx++] = 224 | c3 >> 12 & 15;
            o3[widx++] = 128 | c3 >> 6 & 63;
            o3[widx++] = 128 | c3 & 63;
          }
          if (widx > L2) {
            out.push(o3.slice(0, widx));
            widx = 0;
            o3 = new_raw_buf(65535);
            L2 = 65530;
          }
        }
        out.push(o3.slice(0, widx));
        return bconcat(out);
      }
      var chr0 = /\u0000/g, chr1 = /[\u0001-\u0006]/g;
      function _strrev(x3) {
        var o3 = "", i3 = x3.length - 1;
        while (i3 >= 0) o3 += x3.charAt(i3--);
        return o3;
      }
      function pad0(v3, d3) {
        var t3 = "" + v3;
        return t3.length >= d3 ? t3 : fill("0", d3 - t3.length) + t3;
      }
      function pad_(v3, d3) {
        var t3 = "" + v3;
        return t3.length >= d3 ? t3 : fill(" ", d3 - t3.length) + t3;
      }
      function rpad_(v3, d3) {
        var t3 = "" + v3;
        return t3.length >= d3 ? t3 : t3 + fill(" ", d3 - t3.length);
      }
      function pad0r1(v3, d3) {
        var t3 = "" + Math.round(v3);
        return t3.length >= d3 ? t3 : fill("0", d3 - t3.length) + t3;
      }
      function pad0r2(v3, d3) {
        var t3 = "" + v3;
        return t3.length >= d3 ? t3 : fill("0", d3 - t3.length) + t3;
      }
      var p2_32 = Math.pow(2, 32);
      function pad0r(v3, d3) {
        if (v3 > p2_32 || v3 < -p2_32) return pad0r1(v3, d3);
        var i3 = Math.round(v3);
        return pad0r2(i3, d3);
      }
      function SSF_isgeneral(s3, i3) {
        i3 = i3 || 0;
        return s3.length >= 7 + i3 && (s3.charCodeAt(i3) | 32) === 103 && (s3.charCodeAt(i3 + 1) | 32) === 101 && (s3.charCodeAt(i3 + 2) | 32) === 110 && (s3.charCodeAt(i3 + 3) | 32) === 101 && (s3.charCodeAt(i3 + 4) | 32) === 114 && (s3.charCodeAt(i3 + 5) | 32) === 97 && (s3.charCodeAt(i3 + 6) | 32) === 108;
      }
      var days = [
        ["Sun", "Sunday"],
        ["Mon", "Monday"],
        ["Tue", "Tuesday"],
        ["Wed", "Wednesday"],
        ["Thu", "Thursday"],
        ["Fri", "Friday"],
        ["Sat", "Saturday"]
      ];
      var months = [
        ["J", "Jan", "January"],
        ["F", "Feb", "February"],
        ["M", "Mar", "March"],
        ["A", "Apr", "April"],
        ["M", "May", "May"],
        ["J", "Jun", "June"],
        ["J", "Jul", "July"],
        ["A", "Aug", "August"],
        ["S", "Sep", "September"],
        ["O", "Oct", "October"],
        ["N", "Nov", "November"],
        ["D", "Dec", "December"]
      ];
      function SSF_init_table(t3) {
        if (!t3) t3 = {};
        t3[0] = "General";
        t3[1] = "0";
        t3[2] = "0.00";
        t3[3] = "#,##0";
        t3[4] = "#,##0.00";
        t3[9] = "0%";
        t3[10] = "0.00%";
        t3[11] = "0.00E+00";
        t3[12] = "# ?/?";
        t3[13] = "# ??/??";
        t3[14] = "m/d/yy";
        t3[15] = "d-mmm-yy";
        t3[16] = "d-mmm";
        t3[17] = "mmm-yy";
        t3[18] = "h:mm AM/PM";
        t3[19] = "h:mm:ss AM/PM";
        t3[20] = "h:mm";
        t3[21] = "h:mm:ss";
        t3[22] = "m/d/yy h:mm";
        t3[37] = "#,##0 ;(#,##0)";
        t3[38] = "#,##0 ;[Red](#,##0)";
        t3[39] = "#,##0.00;(#,##0.00)";
        t3[40] = "#,##0.00;[Red](#,##0.00)";
        t3[45] = "mm:ss";
        t3[46] = "[h]:mm:ss";
        t3[47] = "mmss.0";
        t3[48] = "##0.0E+0";
        t3[49] = "@";
        t3[56] = '"上午/下午 "hh"時"mm"分"ss"秒 "';
        return t3;
      }
      var table_fmt = {
        0: "General",
        1: "0",
        2: "0.00",
        3: "#,##0",
        4: "#,##0.00",
        9: "0%",
        10: "0.00%",
        11: "0.00E+00",
        12: "# ?/?",
        13: "# ??/??",
        14: "m/d/yy",
        15: "d-mmm-yy",
        16: "d-mmm",
        17: "mmm-yy",
        18: "h:mm AM/PM",
        19: "h:mm:ss AM/PM",
        20: "h:mm",
        21: "h:mm:ss",
        22: "m/d/yy h:mm",
        37: "#,##0 ;(#,##0)",
        38: "#,##0 ;[Red](#,##0)",
        39: "#,##0.00;(#,##0.00)",
        40: "#,##0.00;[Red](#,##0.00)",
        45: "mm:ss",
        46: "[h]:mm:ss",
        47: "mmss.0",
        48: "##0.0E+0",
        49: "@",
        56: '"上午/下午 "hh"時"mm"分"ss"秒 "'
      };
      var SSF_default_map = {
        5: 37,
        6: 38,
        7: 39,
        8: 40,
        //  5 -> 37 ...  8 -> 40
        23: 0,
        24: 0,
        25: 0,
        26: 0,
        // 23 ->  0 ... 26 ->  0
        27: 14,
        28: 14,
        29: 14,
        30: 14,
        31: 14,
        // 27 -> 14 ... 31 -> 14
        50: 14,
        51: 14,
        52: 14,
        53: 14,
        54: 14,
        // 50 -> 14 ... 58 -> 14
        55: 14,
        56: 14,
        57: 14,
        58: 14,
        59: 1,
        60: 2,
        61: 3,
        62: 4,
        // 59 ->  1 ... 62 ->  4
        67: 9,
        68: 10,
        // 67 ->  9 ... 68 -> 10
        69: 12,
        70: 13,
        71: 14,
        // 69 -> 12 ... 71 -> 14
        72: 14,
        73: 15,
        74: 16,
        75: 17,
        // 72 -> 14 ... 75 -> 17
        76: 20,
        77: 21,
        78: 22,
        // 76 -> 20 ... 78 -> 22
        79: 45,
        80: 46,
        81: 47,
        // 79 -> 45 ... 81 -> 47
        82: 0
        // 82 ->  0 ... 65536 -> 0 (omitted)
      };
      var SSF_default_str = {
        //  5 -- Currency,   0 decimal, black negative
        5: '"$"#,##0_);\\("$"#,##0\\)',
        63: '"$"#,##0_);\\("$"#,##0\\)',
        //  6 -- Currency,   0 decimal, red   negative
        6: '"$"#,##0_);[Red]\\("$"#,##0\\)',
        64: '"$"#,##0_);[Red]\\("$"#,##0\\)',
        //  7 -- Currency,   2 decimal, black negative
        7: '"$"#,##0.00_);\\("$"#,##0.00\\)',
        65: '"$"#,##0.00_);\\("$"#,##0.00\\)',
        //  8 -- Currency,   2 decimal, red   negative
        8: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        66: '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        // 41 -- Accounting, 0 decimal, No Symbol
        41: '_(* #,##0_);_(* \\(#,##0\\);_(* "-"_);_(@_)',
        // 42 -- Accounting, 0 decimal, $  Symbol
        42: '_("$"* #,##0_);_("$"* \\(#,##0\\);_("$"* "-"_);_(@_)',
        // 43 -- Accounting, 2 decimal, No Symbol
        43: '_(* #,##0.00_);_(* \\(#,##0.00\\);_(* "-"??_);_(@_)',
        // 44 -- Accounting, 2 decimal, $  Symbol
        44: '_("$"* #,##0.00_);_("$"* \\(#,##0.00\\);_("$"* "-"??_);_(@_)'
      };
      function SSF_frac(x3, D2, mixed) {
        var sgn = x3 < 0 ? -1 : 1;
        var B3 = x3 * sgn;
        var P_2 = 0, P_1 = 1, P3 = 0;
        var Q_2 = 1, Q_1 = 0, Q2 = 0;
        var A3 = Math.floor(B3);
        while (Q_1 < D2) {
          A3 = Math.floor(B3);
          P3 = A3 * P_1 + P_2;
          Q2 = A3 * Q_1 + Q_2;
          if (B3 - A3 < 5e-8) break;
          B3 = 1 / (B3 - A3);
          P_2 = P_1;
          P_1 = P3;
          Q_2 = Q_1;
          Q_1 = Q2;
        }
        if (Q2 > D2) {
          if (Q_1 > D2) {
            Q2 = Q_2;
            P3 = P_2;
          } else {
            Q2 = Q_1;
            P3 = P_1;
          }
        }
        if (!mixed) return [0, sgn * P3, Q2];
        var q2 = Math.floor(sgn * P3 / Q2);
        return [q2, sgn * P3 - q2 * Q2, Q2];
      }
      function SSF_parse_date_code(v3, opts, b22) {
        if (v3 > 2958465 || v3 < 0) return null;
        var date = v3 | 0, time = Math.floor(86400 * (v3 - date)), dow = 0;
        var dout = [];
        var out = { D: date, T: time, u: 86400 * (v3 - date) - time, y: 0, m: 0, d: 0, H: 0, M: 0, S: 0, q: 0 };
        if (Math.abs(out.u) < 1e-6) out.u = 0;
        if (opts && opts.date1904) date += 1462;
        if (out.u > 0.9999) {
          out.u = 0;
          if (++time == 86400) {
            out.T = time = 0;
            ++date;
            ++out.D;
          }
        }
        if (date === 60) {
          dout = b22 ? [1317, 10, 29] : [1900, 2, 29];
          dow = 3;
        } else if (date === 0) {
          dout = b22 ? [1317, 8, 29] : [1900, 1, 0];
          dow = 6;
        } else {
          if (date > 60) --date;
          var d3 = new Date(1900, 0, 1);
          d3.setDate(d3.getDate() + date - 1);
          dout = [d3.getFullYear(), d3.getMonth() + 1, d3.getDate()];
          dow = d3.getDay();
          if (date < 60) dow = (dow + 6) % 7;
          if (b22) dow = SSF_fix_hijri(d3, dout);
        }
        out.y = dout[0];
        out.m = dout[1];
        out.d = dout[2];
        out.S = time % 60;
        time = Math.floor(time / 60);
        out.M = time % 60;
        time = Math.floor(time / 60);
        out.H = time;
        out.q = dow;
        return out;
      }
      var SSFbasedate = new Date(1899, 11, 31, 0, 0, 0);
      var SSFdnthresh = SSFbasedate.getTime();
      var SSFbase1904 = new Date(1900, 2, 1, 0, 0, 0);
      function datenum_local(v3, date1904) {
        var epoch = v3.getTime();
        if (date1904) epoch -= 1461 * 24 * 60 * 60 * 1e3;
        else if (v3 >= SSFbase1904) epoch += 24 * 60 * 60 * 1e3;
        return (epoch - (SSFdnthresh + (v3.getTimezoneOffset() - SSFbasedate.getTimezoneOffset()) * 6e4)) / (24 * 60 * 60 * 1e3);
      }
      function SSF_strip_decimal(o3) {
        return o3.indexOf(".") == -1 ? o3 : o3.replace(/(?:\.0*|(\.\d*[1-9])0+)$/, "$1");
      }
      function SSF_normalize_exp(o3) {
        if (o3.indexOf("E") == -1) return o3;
        return o3.replace(/(?:\.0*|(\.\d*[1-9])0+)[Ee]/, "$1E").replace(/(E[+-])(\d)$/, "$10$2");
      }
      function SSF_small_exp(v3) {
        var w3 = v3 < 0 ? 12 : 11;
        var o3 = SSF_strip_decimal(v3.toFixed(12));
        if (o3.length <= w3) return o3;
        o3 = v3.toPrecision(10);
        if (o3.length <= w3) return o3;
        return v3.toExponential(5);
      }
      function SSF_large_exp(v3) {
        var o3 = SSF_strip_decimal(v3.toFixed(11));
        return o3.length > (v3 < 0 ? 12 : 11) || o3 === "0" || o3 === "-0" ? v3.toPrecision(6) : o3;
      }
      function SSF_general_num(v3) {
        var V2 = Math.floor(Math.log(Math.abs(v3)) * Math.LOG10E), o3;
        if (V2 >= -4 && V2 <= -1) o3 = v3.toPrecision(10 + V2);
        else if (Math.abs(V2) <= 9) o3 = SSF_small_exp(v3);
        else if (V2 === 10) o3 = v3.toFixed(10).substr(0, 12);
        else o3 = SSF_large_exp(v3);
        return SSF_strip_decimal(SSF_normalize_exp(o3.toUpperCase()));
      }
      function SSF_general(v3, opts) {
        switch (typeof v3) {
          case "string":
            return v3;
          case "boolean":
            return v3 ? "TRUE" : "FALSE";
          case "number":
            return (v3 | 0) === v3 ? v3.toString(10) : SSF_general_num(v3);
          case "undefined":
            return "";
          case "object":
            if (v3 == null) return "";
            if (v3 instanceof Date) return SSF_format(14, datenum_local(v3, opts && opts.date1904), opts);
        }
        throw new Error("unsupported value in General format: " + v3);
      }
      function SSF_fix_hijri(date, o3) {
        o3[0] -= 581;
        var dow = date.getDay();
        if (date < 60) dow = (dow + 6) % 7;
        return dow;
      }
      function SSF_write_date(type, fmt, val, ss0) {
        var o3 = "", ss = 0, tt2 = 0, y3 = val.y, out, outl = 0;
        switch (type) {
          case 98:
            y3 = val.y + 543;
          /* falls through */
          case 121:
            switch (fmt.length) {
              case 1:
              case 2:
                out = y3 % 100;
                outl = 2;
                break;
              default:
                out = y3 % 1e4;
                outl = 4;
                break;
            }
            break;
          case 109:
            switch (fmt.length) {
              case 1:
              case 2:
                out = val.m;
                outl = fmt.length;
                break;
              case 3:
                return months[val.m - 1][1];
              case 5:
                return months[val.m - 1][0];
              default:
                return months[val.m - 1][2];
            }
            break;
          case 100:
            switch (fmt.length) {
              case 1:
              case 2:
                out = val.d;
                outl = fmt.length;
                break;
              case 3:
                return days[val.q][0];
              default:
                return days[val.q][1];
            }
            break;
          case 104:
            switch (fmt.length) {
              case 1:
              case 2:
                out = 1 + (val.H + 11) % 12;
                outl = fmt.length;
                break;
              default:
                throw "bad hour format: " + fmt;
            }
            break;
          case 72:
            switch (fmt.length) {
              case 1:
              case 2:
                out = val.H;
                outl = fmt.length;
                break;
              default:
                throw "bad hour format: " + fmt;
            }
            break;
          case 77:
            switch (fmt.length) {
              case 1:
              case 2:
                out = val.M;
                outl = fmt.length;
                break;
              default:
                throw "bad minute format: " + fmt;
            }
            break;
          case 115:
            if (fmt != "s" && fmt != "ss" && fmt != ".0" && fmt != ".00" && fmt != ".000") throw "bad second format: " + fmt;
            if (val.u === 0 && (fmt == "s" || fmt == "ss")) return pad0(val.S, fmt.length);
            if (ss0 >= 2) tt2 = ss0 === 3 ? 1e3 : 100;
            else tt2 = ss0 === 1 ? 10 : 1;
            ss = Math.round(tt2 * (val.S + val.u));
            if (ss >= 60 * tt2) ss = 0;
            if (fmt === "s") return ss === 0 ? "0" : "" + ss / tt2;
            o3 = pad0(ss, 2 + ss0);
            if (fmt === "ss") return o3.substr(0, 2);
            return "." + o3.substr(2, fmt.length - 1);
          case 90:
            switch (fmt) {
              case "[h]":
              case "[hh]":
                out = val.D * 24 + val.H;
                break;
              case "[m]":
              case "[mm]":
                out = (val.D * 24 + val.H) * 60 + val.M;
                break;
              case "[s]":
              case "[ss]":
                out = ((val.D * 24 + val.H) * 60 + val.M) * 60 + Math.round(val.S + val.u);
                break;
              default:
                throw "bad abstime format: " + fmt;
            }
            outl = fmt.length === 3 ? 1 : 2;
            break;
          case 101:
            out = y3;
            outl = 1;
            break;
        }
        var outstr = outl > 0 ? pad0(out, outl) : "";
        return outstr;
      }
      function commaify(s3) {
        var w3 = 3;
        if (s3.length <= w3) return s3;
        var j3 = s3.length % w3, o3 = s3.substr(0, j3);
        for (; j3 != s3.length; j3 += w3) o3 += (o3.length > 0 ? "," : "") + s3.substr(j3, w3);
        return o3;
      }
      var pct1 = /%/g;
      function write_num_pct(type, fmt, val) {
        var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
      }
      function write_num_cm(type, fmt, val) {
        var idx = fmt.length - 1;
        while (fmt.charCodeAt(idx - 1) === 44) --idx;
        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
      }
      function write_num_exp(fmt, val) {
        var o3;
        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
        if (fmt.match(/^#+0.0E\+0$/)) {
          if (val == 0) return "0.0E+0";
          else if (val < 0) return "-" + write_num_exp(fmt, -val);
          var period = fmt.indexOf(".");
          if (period === -1) period = fmt.indexOf("E");
          var ee2 = Math.floor(Math.log(val) * Math.LOG10E) % period;
          if (ee2 < 0) ee2 += period;
          o3 = (val / Math.pow(10, ee2)).toPrecision(idx + 1 + (period + ee2) % period);
          if (o3.indexOf("e") === -1) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o3.indexOf(".") === -1) o3 = o3.charAt(0) + "." + o3.substr(1) + "E+" + (fakee - o3.length + ee2);
            else o3 += "E+" + (fakee - ee2);
            while (o3.substr(0, 2) === "0.") {
              o3 = o3.charAt(0) + o3.substr(2, period) + "." + o3.substr(2 + period);
              o3 = o3.replace(/^0+([1-9])/, "$1").replace(/^0+\./, "0.");
            }
            o3 = o3.replace(/\+-/, "-");
          }
          o3 = o3.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $22, $32) {
            return $1 + $22 + $32.substr(0, (period + ee2) % period) + "." + $32.substr(ee2) + "E";
          });
        } else o3 = val.toExponential(idx);
        if (fmt.match(/E\+00$/) && o3.match(/e[+-]\d$/)) o3 = o3.substr(0, o3.length - 1) + "0" + o3.charAt(o3.length - 1);
        if (fmt.match(/E\-/) && o3.match(/e\+/)) o3 = o3.replace(/e\+/, "e");
        return o3.replace("e", "E");
      }
      var frac1 = /# (\?+)( ?)\/( ?)(\d+)/;
      function write_num_f1(r3, aval, sign) {
        var den = parseInt(r3[4], 10), rr2 = Math.round(aval * den), base = Math.floor(rr2 / den);
        var myn = rr2 - base * den, myd = den;
        return sign + (base === 0 ? "" : "" + base) + " " + (myn === 0 ? fill(" ", r3[1].length + 1 + r3[4].length) : pad_(myn, r3[1].length) + r3[2] + "/" + r3[3] + pad0(myd, r3[4].length));
      }
      function write_num_f2(r3, aval, sign) {
        return sign + (aval === 0 ? "" : "" + aval) + fill(" ", r3[1].length + 2 + r3[4].length);
      }
      var dec1 = /^#*0*\.([0#]+)/;
      var closeparen = /\).*[0#]/;
      var phone = /\(###\) ###\\?-####/;
      function hashq(str) {
        var o3 = "", cc;
        for (var i3 = 0; i3 != str.length; ++i3) switch (cc = str.charCodeAt(i3)) {
          case 35:
            break;
          case 63:
            o3 += " ";
            break;
          case 48:
            o3 += "0";
            break;
          default:
            o3 += String.fromCharCode(cc);
        }
        return o3;
      }
      function rnd(val, d3) {
        var dd = Math.pow(10, d3);
        return "" + Math.round(val * dd) / dd;
      }
      function dec(val, d3) {
        var _frac = val - Math.floor(val), dd = Math.pow(10, d3);
        if (d3 < ("" + Math.round(_frac * dd)).length) return 0;
        return Math.round(_frac * dd);
      }
      function carry(val, d3) {
        if (d3 < ("" + Math.round((val - Math.floor(val)) * Math.pow(10, d3))).length) {
          return 1;
        }
        return 0;
      }
      function flr(val) {
        if (val < 2147483647 && val > -2147483648) return "" + (val >= 0 ? val | 0 : val - 1 | 0);
        return "" + Math.floor(val);
      }
      function write_num_flt(type, fmt, val) {
        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
          var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
          if (val >= 0) return write_num_flt("n", ffmt, val);
          return "(" + write_num_flt("n", ffmt, -val) + ")";
        }
        if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm(type, fmt, val);
        if (fmt.indexOf("%") !== -1) return write_num_pct(type, fmt, val);
        if (fmt.indexOf("E") !== -1) return write_num_exp(fmt, val);
        if (fmt.charCodeAt(0) === 36) return "$" + write_num_flt(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
        var o3;
        var r3, ri2, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
        if (fmt.match(/^00+$/)) return sign + pad0r(aval, fmt.length);
        if (fmt.match(/^[#?]+$/)) {
          o3 = pad0r(val, 0);
          if (o3 === "0") o3 = "";
          return o3.length > fmt.length ? o3 : hashq(fmt.substr(0, fmt.length - o3.length)) + o3;
        }
        if (r3 = fmt.match(frac1)) return write_num_f1(r3, aval, sign);
        if (fmt.match(/^#+0+$/)) return sign + pad0r(aval, fmt.length - fmt.indexOf("0"));
        if (r3 = fmt.match(dec1)) {
          o3 = rnd(val, r3[1].length).replace(/^([^\.]+)$/, "$1." + hashq(r3[1])).replace(/\.$/, "." + hashq(r3[1])).replace(/\.(\d*)$/, function($$, $1) {
            return "." + $1 + fill("0", hashq(r3[1]).length - $1.length);
          });
          return fmt.indexOf("0.") !== -1 ? o3 : o3.replace(/^0\./, ".");
        }
        fmt = fmt.replace(/^#+([0.])/, "$1");
        if (r3 = fmt.match(/^(0*)\.(#*)$/)) {
          return sign + rnd(aval, r3[2].length).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r3[1].length ? "0." : ".");
        }
        if (r3 = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify(pad0r(aval, 0));
        if (r3 = fmt.match(/^#,##0\.([#0]*0)$/)) {
          return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify("" + (Math.floor(val) + carry(val, r3[1].length))) + "." + pad0(dec(val, r3[1].length), r3[1].length);
        }
        if (r3 = fmt.match(/^#,#*,#0/)) return write_num_flt(type, fmt.replace(/^#,#*,/, ""), val);
        if (r3 = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
          o3 = _strrev(write_num_flt(type, fmt.replace(/[\\-]/g, ""), val));
          ri2 = 0;
          return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x4) {
            return ri2 < o3.length ? o3.charAt(ri2++) : x4 === "0" ? "0" : "";
          }));
        }
        if (fmt.match(phone)) {
          o3 = write_num_flt(type, "##########", val);
          return "(" + o3.substr(0, 3) + ") " + o3.substr(3, 3) + "-" + o3.substr(6);
        }
        var oa2 = "";
        if (r3 = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri2 = Math.min(r3[4].length, 7);
          ff = SSF_frac(aval, Math.pow(10, ri2) - 1, false);
          o3 = "" + sign;
          oa2 = write_num("n", r3[1], ff[1]);
          if (oa2.charAt(oa2.length - 1) == " ") oa2 = oa2.substr(0, oa2.length - 1) + "0";
          o3 += oa2 + r3[2] + "/" + r3[3];
          oa2 = rpad_(ff[2], ri2);
          if (oa2.length < r3[4].length) oa2 = hashq(r3[4].substr(r3[4].length - oa2.length)) + oa2;
          o3 += oa2;
          return o3;
        }
        if (r3 = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri2 = Math.min(Math.max(r3[1].length, r3[4].length), 7);
          ff = SSF_frac(aval, Math.pow(10, ri2) - 1, true);
          return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri2) + r3[2] + "/" + r3[3] + rpad_(ff[2], ri2) : fill(" ", 2 * ri2 + 1 + r3[2].length + r3[3].length));
        }
        if (r3 = fmt.match(/^[#0?]+$/)) {
          o3 = pad0r(val, 0);
          if (fmt.length <= o3.length) return o3;
          return hashq(fmt.substr(0, fmt.length - o3.length)) + o3;
        }
        if (r3 = fmt.match(/^([#0?]+)\.([#0]+)$/)) {
          o3 = "" + val.toFixed(Math.min(r3[2].length, 10)).replace(/([^0])0+$/, "$1");
          ri2 = o3.indexOf(".");
          var lres = fmt.indexOf(".") - ri2, rres = fmt.length - o3.length - lres;
          return hashq(fmt.substr(0, lres) + o3 + fmt.substr(fmt.length - rres));
        }
        if (r3 = fmt.match(/^00,000\.([#0]*0)$/)) {
          ri2 = dec(val, r3[1].length);
          return val < 0 ? "-" + write_num_flt(type, fmt, -val) : commaify(flr(val)).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
            return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
          }) + "." + pad0(ri2, r3[1].length);
        }
        switch (fmt) {
          case "###,##0.00":
            return write_num_flt(type, "#,##0.00", val);
          case "###,###":
          case "##,###":
          case "#,###":
            var x3 = commaify(pad0r(aval, 0));
            return x3 !== "0" ? sign + x3 : "";
          case "###,###.00":
            return write_num_flt(type, "###,##0.00", val).replace(/^0\./, ".");
          case "#,###.00":
            return write_num_flt(type, "#,##0.00", val).replace(/^0\./, ".");
          default:
        }
        throw new Error("unsupported format |" + fmt + "|");
      }
      function write_num_cm2(type, fmt, val) {
        var idx = fmt.length - 1;
        while (fmt.charCodeAt(idx - 1) === 44) --idx;
        return write_num(type, fmt.substr(0, idx), val / Math.pow(10, 3 * (fmt.length - idx)));
      }
      function write_num_pct2(type, fmt, val) {
        var sfmt = fmt.replace(pct1, ""), mul = fmt.length - sfmt.length;
        return write_num(type, sfmt, val * Math.pow(10, 2 * mul)) + fill("%", mul);
      }
      function write_num_exp2(fmt, val) {
        var o3;
        var idx = fmt.indexOf("E") - fmt.indexOf(".") - 1;
        if (fmt.match(/^#+0.0E\+0$/)) {
          if (val == 0) return "0.0E+0";
          else if (val < 0) return "-" + write_num_exp2(fmt, -val);
          var period = fmt.indexOf(".");
          if (period === -1) period = fmt.indexOf("E");
          var ee2 = Math.floor(Math.log(val) * Math.LOG10E) % period;
          if (ee2 < 0) ee2 += period;
          o3 = (val / Math.pow(10, ee2)).toPrecision(idx + 1 + (period + ee2) % period);
          if (!o3.match(/[Ee]/)) {
            var fakee = Math.floor(Math.log(val) * Math.LOG10E);
            if (o3.indexOf(".") === -1) o3 = o3.charAt(0) + "." + o3.substr(1) + "E+" + (fakee - o3.length + ee2);
            else o3 += "E+" + (fakee - ee2);
            o3 = o3.replace(/\+-/, "-");
          }
          o3 = o3.replace(/^([+-]?)(\d*)\.(\d*)[Ee]/, function($$, $1, $22, $32) {
            return $1 + $22 + $32.substr(0, (period + ee2) % period) + "." + $32.substr(ee2) + "E";
          });
        } else o3 = val.toExponential(idx);
        if (fmt.match(/E\+00$/) && o3.match(/e[+-]\d$/)) o3 = o3.substr(0, o3.length - 1) + "0" + o3.charAt(o3.length - 1);
        if (fmt.match(/E\-/) && o3.match(/e\+/)) o3 = o3.replace(/e\+/, "e");
        return o3.replace("e", "E");
      }
      function write_num_int(type, fmt, val) {
        if (type.charCodeAt(0) === 40 && !fmt.match(closeparen)) {
          var ffmt = fmt.replace(/\( */, "").replace(/ \)/, "").replace(/\)/, "");
          if (val >= 0) return write_num_int("n", ffmt, val);
          return "(" + write_num_int("n", ffmt, -val) + ")";
        }
        if (fmt.charCodeAt(fmt.length - 1) === 44) return write_num_cm2(type, fmt, val);
        if (fmt.indexOf("%") !== -1) return write_num_pct2(type, fmt, val);
        if (fmt.indexOf("E") !== -1) return write_num_exp2(fmt, val);
        if (fmt.charCodeAt(0) === 36) return "$" + write_num_int(type, fmt.substr(fmt.charAt(1) == " " ? 2 : 1), val);
        var o3;
        var r3, ri2, ff, aval = Math.abs(val), sign = val < 0 ? "-" : "";
        if (fmt.match(/^00+$/)) return sign + pad0(aval, fmt.length);
        if (fmt.match(/^[#?]+$/)) {
          o3 = "" + val;
          if (val === 0) o3 = "";
          return o3.length > fmt.length ? o3 : hashq(fmt.substr(0, fmt.length - o3.length)) + o3;
        }
        if (r3 = fmt.match(frac1)) return write_num_f2(r3, aval, sign);
        if (fmt.match(/^#+0+$/)) return sign + pad0(aval, fmt.length - fmt.indexOf("0"));
        if (r3 = fmt.match(dec1)) {
          o3 = ("" + val).replace(/^([^\.]+)$/, "$1." + hashq(r3[1])).replace(/\.$/, "." + hashq(r3[1]));
          o3 = o3.replace(/\.(\d*)$/, function($$, $1) {
            return "." + $1 + fill("0", hashq(r3[1]).length - $1.length);
          });
          return fmt.indexOf("0.") !== -1 ? o3 : o3.replace(/^0\./, ".");
        }
        fmt = fmt.replace(/^#+([0.])/, "$1");
        if (r3 = fmt.match(/^(0*)\.(#*)$/)) {
          return sign + ("" + aval).replace(/\.(\d*[1-9])0*$/, ".$1").replace(/^(-?\d*)$/, "$1.").replace(/^0\./, r3[1].length ? "0." : ".");
        }
        if (r3 = fmt.match(/^#{1,3},##0(\.?)$/)) return sign + commaify("" + aval);
        if (r3 = fmt.match(/^#,##0\.([#0]*0)$/)) {
          return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val) + "." + fill("0", r3[1].length);
        }
        if (r3 = fmt.match(/^#,#*,#0/)) return write_num_int(type, fmt.replace(/^#,#*,/, ""), val);
        if (r3 = fmt.match(/^([0#]+)(\\?-([0#]+))+$/)) {
          o3 = _strrev(write_num_int(type, fmt.replace(/[\\-]/g, ""), val));
          ri2 = 0;
          return _strrev(_strrev(fmt.replace(/\\/g, "")).replace(/[0#]/g, function(x4) {
            return ri2 < o3.length ? o3.charAt(ri2++) : x4 === "0" ? "0" : "";
          }));
        }
        if (fmt.match(phone)) {
          o3 = write_num_int(type, "##########", val);
          return "(" + o3.substr(0, 3) + ") " + o3.substr(3, 3) + "-" + o3.substr(6);
        }
        var oa2 = "";
        if (r3 = fmt.match(/^([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri2 = Math.min(r3[4].length, 7);
          ff = SSF_frac(aval, Math.pow(10, ri2) - 1, false);
          o3 = "" + sign;
          oa2 = write_num("n", r3[1], ff[1]);
          if (oa2.charAt(oa2.length - 1) == " ") oa2 = oa2.substr(0, oa2.length - 1) + "0";
          o3 += oa2 + r3[2] + "/" + r3[3];
          oa2 = rpad_(ff[2], ri2);
          if (oa2.length < r3[4].length) oa2 = hashq(r3[4].substr(r3[4].length - oa2.length)) + oa2;
          o3 += oa2;
          return o3;
        }
        if (r3 = fmt.match(/^# ([#0?]+)( ?)\/( ?)([#0?]+)/)) {
          ri2 = Math.min(Math.max(r3[1].length, r3[4].length), 7);
          ff = SSF_frac(aval, Math.pow(10, ri2) - 1, true);
          return sign + (ff[0] || (ff[1] ? "" : "0")) + " " + (ff[1] ? pad_(ff[1], ri2) + r3[2] + "/" + r3[3] + rpad_(ff[2], ri2) : fill(" ", 2 * ri2 + 1 + r3[2].length + r3[3].length));
        }
        if (r3 = fmt.match(/^[#0?]+$/)) {
          o3 = "" + val;
          if (fmt.length <= o3.length) return o3;
          return hashq(fmt.substr(0, fmt.length - o3.length)) + o3;
        }
        if (r3 = fmt.match(/^([#0]+)\.([#0]+)$/)) {
          o3 = "" + val.toFixed(Math.min(r3[2].length, 10)).replace(/([^0])0+$/, "$1");
          ri2 = o3.indexOf(".");
          var lres = fmt.indexOf(".") - ri2, rres = fmt.length - o3.length - lres;
          return hashq(fmt.substr(0, lres) + o3 + fmt.substr(fmt.length - rres));
        }
        if (r3 = fmt.match(/^00,000\.([#0]*0)$/)) {
          return val < 0 ? "-" + write_num_int(type, fmt, -val) : commaify("" + val).replace(/^\d,\d{3}$/, "0$&").replace(/^\d*$/, function($$) {
            return "00," + ($$.length < 3 ? pad0(0, 3 - $$.length) : "") + $$;
          }) + "." + pad0(0, r3[1].length);
        }
        switch (fmt) {
          case "###,###":
          case "##,###":
          case "#,###":
            var x3 = commaify("" + aval);
            return x3 !== "0" ? sign + x3 : "";
          default:
            if (fmt.match(/\.[0#?]*$/)) return write_num_int(type, fmt.slice(0, fmt.lastIndexOf(".")), val) + hashq(fmt.slice(fmt.lastIndexOf(".")));
        }
        throw new Error("unsupported format |" + fmt + "|");
      }
      function write_num(type, fmt, val) {
        return (val | 0) === val ? write_num_int(type, fmt, val) : write_num_flt(type, fmt, val);
      }
      function SSF_split_fmt(fmt) {
        var out = [];
        var in_str = false;
        for (var i3 = 0, j3 = 0; i3 < fmt.length; ++i3) switch (
          /*cc=*/
          fmt.charCodeAt(i3)
        ) {
          case 34:
            in_str = !in_str;
            break;
          case 95:
          case 42:
          case 92:
            ++i3;
            break;
          case 59:
            out[out.length] = fmt.substr(j3, i3 - j3);
            j3 = i3 + 1;
        }
        out[out.length] = fmt.substr(j3);
        if (in_str === true) throw new Error("Format |" + fmt + "| unterminated string ");
        return out;
      }
      var SSF_abstime = /\[[HhMmSs\u0E0A\u0E19\u0E17]*\]/;
      function fmt_is_date(fmt) {
        var i3 = 0, c3 = "", o3 = "";
        while (i3 < fmt.length) {
          switch (c3 = fmt.charAt(i3)) {
            case "G":
              if (SSF_isgeneral(fmt, i3)) i3 += 6;
              i3++;
              break;
            case '"':
              for (
                ;
                /*cc=*/
                fmt.charCodeAt(++i3) !== 34 && i3 < fmt.length;
              ) {
              }
              ++i3;
              break;
            case "\\":
              i3 += 2;
              break;
            case "_":
              i3 += 2;
              break;
            case "@":
              ++i3;
              break;
            case "B":
            case "b":
              if (fmt.charAt(i3 + 1) === "1" || fmt.charAt(i3 + 1) === "2") return true;
            /* falls through */
            case "M":
            case "D":
            case "Y":
            case "H":
            case "S":
            case "E":
            /* falls through */
            case "m":
            case "d":
            case "y":
            case "h":
            case "s":
            case "e":
            case "g":
              return true;
            case "A":
            case "a":
            case "上":
              if (fmt.substr(i3, 3).toUpperCase() === "A/P") return true;
              if (fmt.substr(i3, 5).toUpperCase() === "AM/PM") return true;
              if (fmt.substr(i3, 5).toUpperCase() === "上午/下午") return true;
              ++i3;
              break;
            case "[":
              o3 = c3;
              while (fmt.charAt(i3++) !== "]" && i3 < fmt.length) o3 += fmt.charAt(i3);
              if (o3.match(SSF_abstime)) return true;
              break;
            case ".":
            /* falls through */
            case "0":
            case "#":
              while (i3 < fmt.length && ("0#?.,E+-%".indexOf(c3 = fmt.charAt(++i3)) > -1 || c3 == "\\" && fmt.charAt(i3 + 1) == "-" && "0#".indexOf(fmt.charAt(i3 + 2)) > -1)) {
              }
              break;
            case "?":
              while (fmt.charAt(++i3) === c3) {
              }
              break;
            case "*":
              ++i3;
              if (fmt.charAt(i3) == " " || fmt.charAt(i3) == "*") ++i3;
              break;
            case "(":
            case ")":
              ++i3;
              break;
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              while (i3 < fmt.length && "0123456789".indexOf(fmt.charAt(++i3)) > -1) {
              }
              break;
            case " ":
              ++i3;
              break;
            default:
              ++i3;
              break;
          }
        }
        return false;
      }
      function eval_fmt(fmt, v3, opts, flen) {
        var out = [], o3 = "", i3 = 0, c3 = "", lst = "t", dt2, j3, cc;
        var hr2 = "H";
        while (i3 < fmt.length) {
          switch (c3 = fmt.charAt(i3)) {
            case "G":
              if (!SSF_isgeneral(fmt, i3)) throw new Error("unrecognized character " + c3 + " in " + fmt);
              out[out.length] = { t: "G", v: "General" };
              i3 += 7;
              break;
            case '"':
              for (o3 = ""; (cc = fmt.charCodeAt(++i3)) !== 34 && i3 < fmt.length; ) o3 += String.fromCharCode(cc);
              out[out.length] = { t: "t", v: o3 };
              ++i3;
              break;
            case "\\":
              var w3 = fmt.charAt(++i3), t3 = w3 === "(" || w3 === ")" ? w3 : "t";
              out[out.length] = { t: t3, v: w3 };
              ++i3;
              break;
            case "_":
              out[out.length] = { t: "t", v: " " };
              i3 += 2;
              break;
            case "@":
              out[out.length] = { t: "T", v: v3 };
              ++i3;
              break;
            case "B":
            case "b":
              if (fmt.charAt(i3 + 1) === "1" || fmt.charAt(i3 + 1) === "2") {
                if (dt2 == null) {
                  dt2 = SSF_parse_date_code(v3, opts, fmt.charAt(i3 + 1) === "2");
                  if (dt2 == null) return "";
                }
                out[out.length] = { t: "X", v: fmt.substr(i3, 2) };
                lst = c3;
                i3 += 2;
                break;
              }
            /* falls through */
            case "M":
            case "D":
            case "Y":
            case "H":
            case "S":
            case "E":
              c3 = c3.toLowerCase();
            /* falls through */
            case "m":
            case "d":
            case "y":
            case "h":
            case "s":
            case "e":
            case "g":
              if (v3 < 0) return "";
              if (dt2 == null) {
                dt2 = SSF_parse_date_code(v3, opts);
                if (dt2 == null) return "";
              }
              o3 = c3;
              while (++i3 < fmt.length && fmt.charAt(i3).toLowerCase() === c3) o3 += c3;
              if (c3 === "m" && lst.toLowerCase() === "h") c3 = "M";
              if (c3 === "h") c3 = hr2;
              out[out.length] = { t: c3, v: o3 };
              lst = c3;
              break;
            case "A":
            case "a":
            case "上":
              var q2 = { t: c3, v: c3 };
              if (dt2 == null) dt2 = SSF_parse_date_code(v3, opts);
              if (fmt.substr(i3, 3).toUpperCase() === "A/P") {
                if (dt2 != null) q2.v = dt2.H >= 12 ? "P" : "A";
                q2.t = "T";
                hr2 = "h";
                i3 += 3;
              } else if (fmt.substr(i3, 5).toUpperCase() === "AM/PM") {
                if (dt2 != null) q2.v = dt2.H >= 12 ? "PM" : "AM";
                q2.t = "T";
                i3 += 5;
                hr2 = "h";
              } else if (fmt.substr(i3, 5).toUpperCase() === "上午/下午") {
                if (dt2 != null) q2.v = dt2.H >= 12 ? "下午" : "上午";
                q2.t = "T";
                i3 += 5;
                hr2 = "h";
              } else {
                q2.t = "t";
                ++i3;
              }
              if (dt2 == null && q2.t === "T") return "";
              out[out.length] = q2;
              lst = c3;
              break;
            case "[":
              o3 = c3;
              while (fmt.charAt(i3++) !== "]" && i3 < fmt.length) o3 += fmt.charAt(i3);
              if (o3.slice(-1) !== "]") throw 'unterminated "[" block: |' + o3 + "|";
              if (o3.match(SSF_abstime)) {
                if (dt2 == null) {
                  dt2 = SSF_parse_date_code(v3, opts);
                  if (dt2 == null) return "";
                }
                out[out.length] = { t: "Z", v: o3.toLowerCase() };
                lst = o3.charAt(1);
              } else if (o3.indexOf("$") > -1) {
                o3 = (o3.match(/\$([^-\[\]]*)/) || [])[1] || "$";
                if (!fmt_is_date(fmt)) out[out.length] = { t: "t", v: o3 };
              }
              break;
            /* Numbers */
            case ".":
              if (dt2 != null) {
                o3 = c3;
                while (++i3 < fmt.length && (c3 = fmt.charAt(i3)) === "0") o3 += c3;
                out[out.length] = { t: "s", v: o3 };
                break;
              }
            /* falls through */
            case "0":
            case "#":
              o3 = c3;
              while (++i3 < fmt.length && "0#?.,E+-%".indexOf(c3 = fmt.charAt(i3)) > -1) o3 += c3;
              out[out.length] = { t: "n", v: o3 };
              break;
            case "?":
              o3 = c3;
              while (fmt.charAt(++i3) === c3) o3 += c3;
              out[out.length] = { t: c3, v: o3 };
              lst = c3;
              break;
            case "*":
              ++i3;
              if (fmt.charAt(i3) == " " || fmt.charAt(i3) == "*") ++i3;
              break;
            // **
            case "(":
            case ")":
              out[out.length] = { t: flen === 1 ? "t" : c3, v: c3 };
              ++i3;
              break;
            case "1":
            case "2":
            case "3":
            case "4":
            case "5":
            case "6":
            case "7":
            case "8":
            case "9":
              o3 = c3;
              while (i3 < fmt.length && "0123456789".indexOf(fmt.charAt(++i3)) > -1) o3 += fmt.charAt(i3);
              out[out.length] = { t: "D", v: o3 };
              break;
            case " ":
              out[out.length] = { t: c3, v: c3 };
              ++i3;
              break;
            case "$":
              out[out.length] = { t: "t", v: "$" };
              ++i3;
              break;
            default:
              if (",$-+/():!^&'~{}<>=€acfijklopqrtuvwxzP".indexOf(c3) === -1) throw new Error("unrecognized character " + c3 + " in " + fmt);
              out[out.length] = { t: "t", v: c3 };
              ++i3;
              break;
          }
        }
        var bt2 = 0, ss0 = 0, ssm;
        for (i3 = out.length - 1, lst = "t"; i3 >= 0; --i3) {
          switch (out[i3].t) {
            case "h":
            case "H":
              out[i3].t = hr2;
              lst = "h";
              if (bt2 < 1) bt2 = 1;
              break;
            case "s":
              if (ssm = out[i3].v.match(/\.0+$/)) ss0 = Math.max(ss0, ssm[0].length - 1);
              if (bt2 < 3) bt2 = 3;
            /* falls through */
            case "d":
            case "y":
            case "M":
            case "e":
              lst = out[i3].t;
              break;
            case "m":
              if (lst === "s") {
                out[i3].t = "M";
                if (bt2 < 2) bt2 = 2;
              }
              break;
            case "X":
              break;
            case "Z":
              if (bt2 < 1 && out[i3].v.match(/[Hh]/)) bt2 = 1;
              if (bt2 < 2 && out[i3].v.match(/[Mm]/)) bt2 = 2;
              if (bt2 < 3 && out[i3].v.match(/[Ss]/)) bt2 = 3;
          }
        }
        switch (bt2) {
          case 0:
            break;
          case 1:
            if (dt2.u >= 0.5) {
              dt2.u = 0;
              ++dt2.S;
            }
            if (dt2.S >= 60) {
              dt2.S = 0;
              ++dt2.M;
            }
            if (dt2.M >= 60) {
              dt2.M = 0;
              ++dt2.H;
            }
            break;
          case 2:
            if (dt2.u >= 0.5) {
              dt2.u = 0;
              ++dt2.S;
            }
            if (dt2.S >= 60) {
              dt2.S = 0;
              ++dt2.M;
            }
            break;
        }
        var nstr = "", jj;
        for (i3 = 0; i3 < out.length; ++i3) {
          switch (out[i3].t) {
            case "t":
            case "T":
            case " ":
            case "D":
              break;
            case "X":
              out[i3].v = "";
              out[i3].t = ";";
              break;
            case "d":
            case "m":
            case "y":
            case "h":
            case "H":
            case "M":
            case "s":
            case "e":
            case "b":
            case "Z":
              out[i3].v = SSF_write_date(out[i3].t.charCodeAt(0), out[i3].v, dt2, ss0);
              out[i3].t = "t";
              break;
            case "n":
            case "?":
              jj = i3 + 1;
              while (out[jj] != null && ((c3 = out[jj].t) === "?" || c3 === "D" || (c3 === " " || c3 === "t") && out[jj + 1] != null && (out[jj + 1].t === "?" || out[jj + 1].t === "t" && out[jj + 1].v === "/") || out[i3].t === "(" && (c3 === " " || c3 === "n" || c3 === ")") || c3 === "t" && (out[jj].v === "/" || out[jj].v === " " && out[jj + 1] != null && out[jj + 1].t == "?"))) {
                out[i3].v += out[jj].v;
                out[jj] = { v: "", t: ";" };
                ++jj;
              }
              nstr += out[i3].v;
              i3 = jj - 1;
              break;
            case "G":
              out[i3].t = "t";
              out[i3].v = SSF_general(v3, opts);
              break;
          }
        }
        var vv = "", myv, ostr;
        if (nstr.length > 0) {
          if (nstr.charCodeAt(0) == 40) {
            myv = v3 < 0 && nstr.charCodeAt(0) === 45 ? -v3 : v3;
            ostr = write_num("n", nstr, myv);
          } else {
            myv = v3 < 0 && flen > 1 ? -v3 : v3;
            ostr = write_num("n", nstr, myv);
            if (myv < 0 && out[0] && out[0].t == "t") {
              ostr = ostr.substr(1);
              out[0].v = "-" + out[0].v;
            }
          }
          jj = ostr.length - 1;
          var decpt = out.length;
          for (i3 = 0; i3 < out.length; ++i3) if (out[i3] != null && out[i3].t != "t" && out[i3].v.indexOf(".") > -1) {
            decpt = i3;
            break;
          }
          var lasti = out.length;
          if (decpt === out.length && ostr.indexOf("E") === -1) {
            for (i3 = out.length - 1; i3 >= 0; --i3) {
              if (out[i3] == null || "n?".indexOf(out[i3].t) === -1) continue;
              if (jj >= out[i3].v.length - 1) {
                jj -= out[i3].v.length;
                out[i3].v = ostr.substr(jj + 1, out[i3].v.length);
              } else if (jj < 0) out[i3].v = "";
              else {
                out[i3].v = ostr.substr(0, jj + 1);
                jj = -1;
              }
              out[i3].t = "t";
              lasti = i3;
            }
            if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
          } else if (decpt !== out.length && ostr.indexOf("E") === -1) {
            jj = ostr.indexOf(".") - 1;
            for (i3 = decpt; i3 >= 0; --i3) {
              if (out[i3] == null || "n?".indexOf(out[i3].t) === -1) continue;
              j3 = out[i3].v.indexOf(".") > -1 && i3 === decpt ? out[i3].v.indexOf(".") - 1 : out[i3].v.length - 1;
              vv = out[i3].v.substr(j3 + 1);
              for (; j3 >= 0; --j3) {
                if (jj >= 0 && (out[i3].v.charAt(j3) === "0" || out[i3].v.charAt(j3) === "#")) vv = ostr.charAt(jj--) + vv;
              }
              out[i3].v = vv;
              out[i3].t = "t";
              lasti = i3;
            }
            if (jj >= 0 && lasti < out.length) out[lasti].v = ostr.substr(0, jj + 1) + out[lasti].v;
            jj = ostr.indexOf(".") + 1;
            for (i3 = decpt; i3 < out.length; ++i3) {
              if (out[i3] == null || "n?(".indexOf(out[i3].t) === -1 && i3 !== decpt) continue;
              j3 = out[i3].v.indexOf(".") > -1 && i3 === decpt ? out[i3].v.indexOf(".") + 1 : 0;
              vv = out[i3].v.substr(0, j3);
              for (; j3 < out[i3].v.length; ++j3) {
                if (jj < ostr.length) vv += ostr.charAt(jj++);
              }
              out[i3].v = vv;
              out[i3].t = "t";
              lasti = i3;
            }
          }
        }
        for (i3 = 0; i3 < out.length; ++i3) if (out[i3] != null && "n?".indexOf(out[i3].t) > -1) {
          myv = flen > 1 && v3 < 0 && i3 > 0 && out[i3 - 1].v === "-" ? -v3 : v3;
          out[i3].v = write_num(out[i3].t, out[i3].v, myv);
          out[i3].t = "t";
        }
        var retval = "";
        for (i3 = 0; i3 !== out.length; ++i3) if (out[i3] != null) retval += out[i3].v;
        return retval;
      }
      var cfregex2 = /\[(=|>[=]?|<[>=]?)(-?\d+(?:\.\d*)?)\]/;
      function chkcond(v3, rr2) {
        if (rr2 == null) return false;
        var thresh = parseFloat(rr2[2]);
        switch (rr2[1]) {
          case "=":
            if (v3 == thresh) return true;
            break;
          case ">":
            if (v3 > thresh) return true;
            break;
          case "<":
            if (v3 < thresh) return true;
            break;
          case "<>":
            if (v3 != thresh) return true;
            break;
          case ">=":
            if (v3 >= thresh) return true;
            break;
          case "<=":
            if (v3 <= thresh) return true;
            break;
        }
        return false;
      }
      function choose_fmt(f2, v3) {
        var fmt = SSF_split_fmt(f2);
        var l2 = fmt.length, lat = fmt[l2 - 1].indexOf("@");
        if (l2 < 4 && lat > -1) --l2;
        if (fmt.length > 4) throw new Error("cannot find right format for |" + fmt.join("|") + "|");
        if (typeof v3 !== "number") return [4, fmt.length === 4 || lat > -1 ? fmt[fmt.length - 1] : "@"];
        switch (fmt.length) {
          case 1:
            fmt = lat > -1 ? ["General", "General", "General", fmt[0]] : [fmt[0], fmt[0], fmt[0], "@"];
            break;
          case 2:
            fmt = lat > -1 ? [fmt[0], fmt[0], fmt[0], fmt[1]] : [fmt[0], fmt[1], fmt[0], "@"];
            break;
          case 3:
            fmt = lat > -1 ? [fmt[0], fmt[1], fmt[0], fmt[2]] : [fmt[0], fmt[1], fmt[2], "@"];
            break;
          case 4:
            break;
        }
        var ff = v3 > 0 ? fmt[0] : v3 < 0 ? fmt[1] : fmt[2];
        if (fmt[0].indexOf("[") === -1 && fmt[1].indexOf("[") === -1) return [l2, ff];
        if (fmt[0].match(/\[[=<>]/) != null || fmt[1].match(/\[[=<>]/) != null) {
          var m1 = fmt[0].match(cfregex2);
          var m22 = fmt[1].match(cfregex2);
          return chkcond(v3, m1) ? [l2, fmt[0]] : chkcond(v3, m22) ? [l2, fmt[1]] : [l2, fmt[m1 != null && m22 != null ? 2 : 1]];
        }
        return [l2, ff];
      }
      function SSF_format(fmt, v3, o3) {
        if (o3 == null) o3 = {};
        var sfmt = "";
        switch (typeof fmt) {
          case "string":
            if (fmt == "m/d/yy" && o3.dateNF) sfmt = o3.dateNF;
            else sfmt = fmt;
            break;
          case "number":
            if (fmt == 14 && o3.dateNF) sfmt = o3.dateNF;
            else sfmt = (o3.table != null ? o3.table : table_fmt)[fmt];
            if (sfmt == null) sfmt = o3.table && o3.table[SSF_default_map[fmt]] || table_fmt[SSF_default_map[fmt]];
            if (sfmt == null) sfmt = SSF_default_str[fmt] || "General";
            break;
        }
        if (SSF_isgeneral(sfmt, 0)) return SSF_general(v3, o3);
        if (v3 instanceof Date) v3 = datenum_local(v3, o3.date1904);
        var f2 = choose_fmt(sfmt, v3);
        if (SSF_isgeneral(f2[1])) return SSF_general(v3, o3);
        if (v3 === true) v3 = "TRUE";
        else if (v3 === false) v3 = "FALSE";
        else if (v3 === "" || v3 == null) return "";
        return eval_fmt(f2[1], v3, o3, f2[0]);
      }
      function SSF_load(fmt, idx) {
        if (typeof idx != "number") {
          idx = +idx || -1;
          for (var i3 = 0; i3 < 392; ++i3) {
            if (table_fmt[i3] == void 0) {
              if (idx < 0) idx = i3;
              continue;
            }
            if (table_fmt[i3] == fmt) {
              idx = i3;
              break;
            }
          }
          if (idx < 0) idx = 391;
        }
        table_fmt[idx] = fmt;
        return idx;
      }
      function SSF_load_table(tbl) {
        for (var i3 = 0; i3 != 392; ++i3)
          if (tbl[i3] !== void 0) SSF_load(tbl[i3], i3);
      }
      function make_ssf() {
        table_fmt = SSF_init_table();
      }
      var SSF = {
        format: SSF_format,
        load: SSF_load,
        _table: table_fmt,
        load_table: SSF_load_table,
        parse_date_code: SSF_parse_date_code,
        is_date: fmt_is_date,
        get_table: function get_table() {
          return SSF._table = table_fmt;
        }
      };
      var SSFImplicit = {
        "5": '"$"#,##0_);\\("$"#,##0\\)',
        "6": '"$"#,##0_);[Red]\\("$"#,##0\\)',
        "7": '"$"#,##0.00_);\\("$"#,##0.00\\)',
        "8": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "23": "General",
        "24": "General",
        "25": "General",
        "26": "General",
        "27": "m/d/yy",
        "28": "m/d/yy",
        "29": "m/d/yy",
        "30": "m/d/yy",
        "31": "m/d/yy",
        "32": "h:mm:ss",
        "33": "h:mm:ss",
        "34": "h:mm:ss",
        "35": "h:mm:ss",
        "36": "m/d/yy",
        "41": '_(* #,##0_);_(* (#,##0);_(* "-"_);_(@_)',
        "42": '_("$"* #,##0_);_("$"* (#,##0);_("$"* "-"_);_(@_)',
        "43": '_(* #,##0.00_);_(* (#,##0.00);_(* "-"??_);_(@_)',
        "44": '_("$"* #,##0.00_);_("$"* (#,##0.00);_("$"* "-"??_);_(@_)',
        "50": "m/d/yy",
        "51": "m/d/yy",
        "52": "m/d/yy",
        "53": "m/d/yy",
        "54": "m/d/yy",
        "55": "m/d/yy",
        "56": "m/d/yy",
        "57": "m/d/yy",
        "58": "m/d/yy",
        "59": "0",
        "60": "0.00",
        "61": "#,##0",
        "62": "#,##0.00",
        "63": '"$"#,##0_);\\("$"#,##0\\)',
        "64": '"$"#,##0_);[Red]\\("$"#,##0\\)',
        "65": '"$"#,##0.00_);\\("$"#,##0.00\\)',
        "66": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
        "67": "0%",
        "68": "0.00%",
        "69": "# ?/?",
        "70": "# ??/??",
        "71": "m/d/yy",
        "72": "m/d/yy",
        "73": "d-mmm-yy",
        "74": "d-mmm",
        "75": "mmm-yy",
        "76": "h:mm",
        "77": "h:mm:ss",
        "78": "m/d/yy h:mm",
        "79": "mm:ss",
        "80": "[h]:mm:ss",
        "81": "mmss.0"
      };
      var dateNFregex = /[dD]+|[mM]+|[yYeE]+|[Hh]+|[Ss]+/g;
      function dateNF_regex(dateNF) {
        var fmt = typeof dateNF == "number" ? table_fmt[dateNF] : dateNF;
        fmt = fmt.replace(dateNFregex, "(\\d+)");
        return new RegExp("^" + fmt + "$");
      }
      function dateNF_fix(str, dateNF, match) {
        var Y2 = -1, m3 = -1, d3 = -1, H2 = -1, M2 = -1, S3 = -1;
        (dateNF.match(dateNFregex) || []).forEach(function(n3, i3) {
          var v3 = parseInt(match[i3 + 1], 10);
          switch (n3.toLowerCase().charAt(0)) {
            case "y":
              Y2 = v3;
              break;
            case "d":
              d3 = v3;
              break;
            case "h":
              H2 = v3;
              break;
            case "s":
              S3 = v3;
              break;
            case "m":
              if (H2 >= 0) M2 = v3;
              else m3 = v3;
              break;
          }
        });
        if (S3 >= 0 && M2 == -1 && m3 >= 0) {
          M2 = m3;
          m3 = -1;
        }
        var datestr = ("" + (Y2 >= 0 ? Y2 : (/* @__PURE__ */ new Date()).getFullYear())).slice(-4) + "-" + ("00" + (m3 >= 1 ? m3 : 1)).slice(-2) + "-" + ("00" + (d3 >= 1 ? d3 : 1)).slice(-2);
        if (datestr.length == 7) datestr = "0" + datestr;
        if (datestr.length == 8) datestr = "20" + datestr;
        var timestr = ("00" + (H2 >= 0 ? H2 : 0)).slice(-2) + ":" + ("00" + (M2 >= 0 ? M2 : 0)).slice(-2) + ":" + ("00" + (S3 >= 0 ? S3 : 0)).slice(-2);
        if (H2 == -1 && M2 == -1 && S3 == -1) return datestr;
        if (Y2 == -1 && m3 == -1 && d3 == -1) return timestr;
        return datestr + "T" + timestr;
      }
      var CRC32 = function() {
        var CRC322 = {};
        CRC322.version = "1.2.0";
        function signed_crc_table() {
          var c3 = 0, table = new Array(256);
          for (var n3 = 0; n3 != 256; ++n3) {
            c3 = n3;
            c3 = c3 & 1 ? -306674912 ^ c3 >>> 1 : c3 >>> 1;
            c3 = c3 & 1 ? -306674912 ^ c3 >>> 1 : c3 >>> 1;
            c3 = c3 & 1 ? -306674912 ^ c3 >>> 1 : c3 >>> 1;
            c3 = c3 & 1 ? -306674912 ^ c3 >>> 1 : c3 >>> 1;
            c3 = c3 & 1 ? -306674912 ^ c3 >>> 1 : c3 >>> 1;
            c3 = c3 & 1 ? -306674912 ^ c3 >>> 1 : c3 >>> 1;
            c3 = c3 & 1 ? -306674912 ^ c3 >>> 1 : c3 >>> 1;
            c3 = c3 & 1 ? -306674912 ^ c3 >>> 1 : c3 >>> 1;
            table[n3] = c3;
          }
          return typeof Int32Array !== "undefined" ? new Int32Array(table) : table;
        }
        var T0 = signed_crc_table();
        function slice_by_16_tables(T10) {
          var c3 = 0, v3 = 0, n3 = 0, table = typeof Int32Array !== "undefined" ? new Int32Array(4096) : new Array(4096);
          for (n3 = 0; n3 != 256; ++n3) table[n3] = T10[n3];
          for (n3 = 0; n3 != 256; ++n3) {
            v3 = T10[n3];
            for (c3 = 256 + n3; c3 < 4096; c3 += 256) v3 = table[c3] = v3 >>> 8 ^ T10[v3 & 255];
          }
          var out = [];
          for (n3 = 1; n3 != 16; ++n3) out[n3 - 1] = typeof Int32Array !== "undefined" ? table.subarray(n3 * 256, n3 * 256 + 256) : table.slice(n3 * 256, n3 * 256 + 256);
          return out;
        }
        var TT = slice_by_16_tables(T0);
        var T1 = TT[0], T22 = TT[1], T3 = TT[2], T4 = TT[3], T5 = TT[4];
        var T6 = TT[5], T7 = TT[6], T8 = TT[7], T9 = TT[8], Ta2 = TT[9];
        var Tb = TT[10], Tc = TT[11], Td = TT[12], Te2 = TT[13], Tf = TT[14];
        function crc32_bstr(bstr, seed) {
          var C2 = seed ^ -1;
          for (var i3 = 0, L2 = bstr.length; i3 < L2; ) C2 = C2 >>> 8 ^ T0[(C2 ^ bstr.charCodeAt(i3++)) & 255];
          return ~C2;
        }
        function crc32_buf(B3, seed) {
          var C2 = seed ^ -1, L2 = B3.length - 15, i3 = 0;
          for (; i3 < L2; ) C2 = Tf[B3[i3++] ^ C2 & 255] ^ Te2[B3[i3++] ^ C2 >> 8 & 255] ^ Td[B3[i3++] ^ C2 >> 16 & 255] ^ Tc[B3[i3++] ^ C2 >>> 24] ^ Tb[B3[i3++]] ^ Ta2[B3[i3++]] ^ T9[B3[i3++]] ^ T8[B3[i3++]] ^ T7[B3[i3++]] ^ T6[B3[i3++]] ^ T5[B3[i3++]] ^ T4[B3[i3++]] ^ T3[B3[i3++]] ^ T22[B3[i3++]] ^ T1[B3[i3++]] ^ T0[B3[i3++]];
          L2 += 15;
          while (i3 < L2) C2 = C2 >>> 8 ^ T0[(C2 ^ B3[i3++]) & 255];
          return ~C2;
        }
        function crc32_str(str, seed) {
          var C2 = seed ^ -1;
          for (var i3 = 0, L2 = str.length, c3 = 0, d3 = 0; i3 < L2; ) {
            c3 = str.charCodeAt(i3++);
            if (c3 < 128) {
              C2 = C2 >>> 8 ^ T0[(C2 ^ c3) & 255];
            } else if (c3 < 2048) {
              C2 = C2 >>> 8 ^ T0[(C2 ^ (192 | c3 >> 6 & 31)) & 255];
              C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | c3 & 63)) & 255];
            } else if (c3 >= 55296 && c3 < 57344) {
              c3 = (c3 & 1023) + 64;
              d3 = str.charCodeAt(i3++) & 1023;
              C2 = C2 >>> 8 ^ T0[(C2 ^ (240 | c3 >> 8 & 7)) & 255];
              C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | c3 >> 2 & 63)) & 255];
              C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | d3 >> 6 & 15 | (c3 & 3) << 4)) & 255];
              C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | d3 & 63)) & 255];
            } else {
              C2 = C2 >>> 8 ^ T0[(C2 ^ (224 | c3 >> 12 & 15)) & 255];
              C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | c3 >> 6 & 63)) & 255];
              C2 = C2 >>> 8 ^ T0[(C2 ^ (128 | c3 & 63)) & 255];
            }
          }
          return ~C2;
        }
        CRC322.table = T0;
        CRC322.bstr = crc32_bstr;
        CRC322.buf = crc32_buf;
        CRC322.str = crc32_str;
        return CRC322;
      }();
      var CFB = function _CFB() {
        var exports2 = {};
        exports2.version = "1.2.1";
        function namecmp(l2, r3) {
          var L2 = l2.split("/"), R2 = r3.split("/");
          for (var i4 = 0, c3 = 0, Z2 = Math.min(L2.length, R2.length); i4 < Z2; ++i4) {
            if (c3 = L2[i4].length - R2[i4].length) return c3;
            if (L2[i4] != R2[i4]) return L2[i4] < R2[i4] ? -1 : 1;
          }
          return L2.length - R2.length;
        }
        function dirname(p3) {
          if (p3.charAt(p3.length - 1) == "/") return p3.slice(0, -1).indexOf("/") === -1 ? p3 : dirname(p3.slice(0, -1));
          var c3 = p3.lastIndexOf("/");
          return c3 === -1 ? p3 : p3.slice(0, c3 + 1);
        }
        function filename(p3) {
          if (p3.charAt(p3.length - 1) == "/") return filename(p3.slice(0, -1));
          var c3 = p3.lastIndexOf("/");
          return c3 === -1 ? p3 : p3.slice(c3 + 1);
        }
        function write_dos_date(buf, date) {
          if (typeof date === "string") date = new Date(date);
          var hms = date.getHours();
          hms = hms << 6 | date.getMinutes();
          hms = hms << 5 | date.getSeconds() >>> 1;
          buf.write_shift(2, hms);
          var ymd = date.getFullYear() - 1980;
          ymd = ymd << 4 | date.getMonth() + 1;
          ymd = ymd << 5 | date.getDate();
          buf.write_shift(2, ymd);
        }
        function parse_dos_date(buf) {
          var hms = buf.read_shift(2) & 65535;
          var ymd = buf.read_shift(2) & 65535;
          var val = /* @__PURE__ */ new Date();
          var d3 = ymd & 31;
          ymd >>>= 5;
          var m3 = ymd & 15;
          ymd >>>= 4;
          val.setMilliseconds(0);
          val.setFullYear(ymd + 1980);
          val.setMonth(m3 - 1);
          val.setDate(d3);
          var S3 = hms & 31;
          hms >>>= 5;
          var M2 = hms & 63;
          hms >>>= 6;
          val.setHours(hms);
          val.setMinutes(M2);
          val.setSeconds(S3 << 1);
          return val;
        }
        function parse_extra_field(blob) {
          prep_blob(blob, 0);
          var o3 = {};
          var flags = 0;
          while (blob.l <= blob.length - 4) {
            var type = blob.read_shift(2);
            var sz = blob.read_shift(2), tgt = blob.l + sz;
            var p3 = {};
            switch (type) {
              /* UNIX-style Timestamps */
              case 21589:
                {
                  flags = blob.read_shift(1);
                  if (flags & 1) p3.mtime = blob.read_shift(4);
                  if (sz > 5) {
                    if (flags & 2) p3.atime = blob.read_shift(4);
                    if (flags & 4) p3.ctime = blob.read_shift(4);
                  }
                  if (p3.mtime) p3.mt = new Date(p3.mtime * 1e3);
                }
                break;
            }
            blob.l = tgt;
            o3[type] = p3;
          }
          return o3;
        }
        var fs;
        function get_fs() {
          return fs || (fs = __require("fs"));
        }
        function parse(file, options) {
          if (file[0] == 80 && file[1] == 75) return parse_zip2(file, options);
          if ((file[0] | 32) == 109 && (file[1] | 32) == 105) return parse_mad(file, options);
          if (file.length < 512) throw new Error("CFB file size " + file.length + " < 512");
          var mver = 3;
          var ssz = 512;
          var nmfs = 0;
          var difat_sec_cnt = 0;
          var dir_start = 0;
          var minifat_start = 0;
          var difat_start = 0;
          var fat_addrs = [];
          var blob = file.slice(0, 512);
          prep_blob(blob, 0);
          var mv = check_get_mver(blob);
          mver = mv[0];
          switch (mver) {
            case 3:
              ssz = 512;
              break;
            case 4:
              ssz = 4096;
              break;
            case 0:
              if (mv[1] == 0) return parse_zip2(file, options);
            /* falls through */
            default:
              throw new Error("Major Version: Expected 3 or 4 saw " + mver);
          }
          if (ssz !== 512) {
            blob = file.slice(0, ssz);
            prep_blob(
              blob,
              28
              /* blob.l */
            );
          }
          var header = file.slice(0, ssz);
          check_shifts(blob, mver);
          var dir_cnt = blob.read_shift(4, "i");
          if (mver === 3 && dir_cnt !== 0) throw new Error("# Directory Sectors: Expected 0 saw " + dir_cnt);
          blob.l += 4;
          dir_start = blob.read_shift(4, "i");
          blob.l += 4;
          blob.chk("00100000", "Mini Stream Cutoff Size: ");
          minifat_start = blob.read_shift(4, "i");
          nmfs = blob.read_shift(4, "i");
          difat_start = blob.read_shift(4, "i");
          difat_sec_cnt = blob.read_shift(4, "i");
          for (var q3 = -1, j3 = 0; j3 < 109; ++j3) {
            q3 = blob.read_shift(4, "i");
            if (q3 < 0) break;
            fat_addrs[j3] = q3;
          }
          var sectors = sectorify(file, ssz);
          sleuth_fat(difat_start, difat_sec_cnt, sectors, ssz, fat_addrs);
          var sector_list = make_sector_list(sectors, dir_start, fat_addrs, ssz);
          sector_list[dir_start].name = "!Directory";
          if (nmfs > 0 && minifat_start !== ENDOFCHAIN) sector_list[minifat_start].name = "!MiniFAT";
          sector_list[fat_addrs[0]].name = "!FAT";
          sector_list.fat_addrs = fat_addrs;
          sector_list.ssz = ssz;
          var files = {}, Paths = [], FileIndex = [], FullPaths = [];
          read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, minifat_start);
          build_full_paths(FileIndex, FullPaths, Paths);
          Paths.shift();
          var o3 = {
            FileIndex,
            FullPaths
          };
          if (options && options.raw) o3.raw = { header, sectors };
          return o3;
        }
        function check_get_mver(blob) {
          if (blob[blob.l] == 80 && blob[blob.l + 1] == 75) return [0, 0];
          blob.chk(HEADER_SIGNATURE, "Header Signature: ");
          blob.l += 16;
          var mver = blob.read_shift(2, "u");
          return [blob.read_shift(2, "u"), mver];
        }
        function check_shifts(blob, mver) {
          var shift = 9;
          blob.l += 2;
          switch (shift = blob.read_shift(2)) {
            case 9:
              if (mver != 3) throw new Error("Sector Shift: Expected 9 saw " + shift);
              break;
            case 12:
              if (mver != 4) throw new Error("Sector Shift: Expected 12 saw " + shift);
              break;
            default:
              throw new Error("Sector Shift: Expected 9 or 12 saw " + shift);
          }
          blob.chk("0600", "Mini Sector Shift: ");
          blob.chk("000000000000", "Reserved: ");
        }
        function sectorify(file, ssz) {
          var nsectors = Math.ceil(file.length / ssz) - 1;
          var sectors = [];
          for (var i4 = 1; i4 < nsectors; ++i4) sectors[i4 - 1] = file.slice(i4 * ssz, (i4 + 1) * ssz);
          sectors[nsectors - 1] = file.slice(nsectors * ssz);
          return sectors;
        }
        function build_full_paths(FI, FP, Paths) {
          var i4 = 0, L2 = 0, R2 = 0, C2 = 0, j3 = 0, pl = Paths.length;
          var dad = [], q3 = [];
          for (; i4 < pl; ++i4) {
            dad[i4] = q3[i4] = i4;
            FP[i4] = Paths[i4];
          }
          for (; j3 < q3.length; ++j3) {
            i4 = q3[j3];
            L2 = FI[i4].L;
            R2 = FI[i4].R;
            C2 = FI[i4].C;
            if (dad[i4] === i4) {
              if (L2 !== -1 && dad[L2] !== L2) dad[i4] = dad[L2];
              if (R2 !== -1 && dad[R2] !== R2) dad[i4] = dad[R2];
            }
            if (C2 !== -1) dad[C2] = i4;
            if (L2 !== -1 && i4 != dad[i4]) {
              dad[L2] = dad[i4];
              if (q3.lastIndexOf(L2) < j3) q3.push(L2);
            }
            if (R2 !== -1 && i4 != dad[i4]) {
              dad[R2] = dad[i4];
              if (q3.lastIndexOf(R2) < j3) q3.push(R2);
            }
          }
          for (i4 = 1; i4 < pl; ++i4) if (dad[i4] === i4) {
            if (R2 !== -1 && dad[R2] !== R2) dad[i4] = dad[R2];
            else if (L2 !== -1 && dad[L2] !== L2) dad[i4] = dad[L2];
          }
          for (i4 = 1; i4 < pl; ++i4) {
            if (FI[i4].type === 0) continue;
            j3 = i4;
            if (j3 != dad[j3]) do {
              j3 = dad[j3];
              FP[i4] = FP[j3] + "/" + FP[i4];
            } while (j3 !== 0 && -1 !== dad[j3] && j3 != dad[j3]);
            dad[i4] = -1;
          }
          FP[0] += "/";
          for (i4 = 1; i4 < pl; ++i4) {
            if (FI[i4].type !== 2) FP[i4] += "/";
          }
        }
        function get_mfat_entry(entry, payload, mini) {
          var start = entry.start, size = entry.size;
          var o3 = [];
          var idx = start;
          while (mini && size > 0 && idx >= 0) {
            o3.push(payload.slice(idx * MSSZ, idx * MSSZ + MSSZ));
            size -= MSSZ;
            idx = __readInt32LE(mini, idx * 4);
          }
          if (o3.length === 0) return new_buf(0);
          return bconcat(o3).slice(0, entry.size);
        }
        function sleuth_fat(idx, cnt, sectors, ssz, fat_addrs) {
          var q3 = ENDOFCHAIN;
          if (idx === ENDOFCHAIN) {
            if (cnt !== 0) throw new Error("DIFAT chain shorter than expected");
          } else if (idx !== -1) {
            var sector = sectors[idx], m3 = (ssz >>> 2) - 1;
            if (!sector) return;
            for (var i4 = 0; i4 < m3; ++i4) {
              if ((q3 = __readInt32LE(sector, i4 * 4)) === ENDOFCHAIN) break;
              fat_addrs.push(q3);
            }
            sleuth_fat(__readInt32LE(sector, ssz - 4), cnt - 1, sectors, ssz, fat_addrs);
          }
        }
        function get_sector_list(sectors, start, fat_addrs, ssz, chkd) {
          var buf = [], buf_chain = [];
          if (!chkd) chkd = [];
          var modulus = ssz - 1, j3 = 0, jj = 0;
          for (j3 = start; j3 >= 0; ) {
            chkd[j3] = true;
            buf[buf.length] = j3;
            buf_chain.push(sectors[j3]);
            var addr = fat_addrs[Math.floor(j3 * 4 / ssz)];
            jj = j3 * 4 & modulus;
            if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j3 + " 4 " + ssz);
            if (!sectors[addr]) break;
            j3 = __readInt32LE(sectors[addr], jj);
          }
          return { nodes: buf, data: __toBuffer([buf_chain]) };
        }
        function make_sector_list(sectors, dir_start, fat_addrs, ssz) {
          var sl = sectors.length, sector_list = [];
          var chkd = [], buf = [], buf_chain = [];
          var modulus = ssz - 1, i4 = 0, j3 = 0, k3 = 0, jj = 0;
          for (i4 = 0; i4 < sl; ++i4) {
            buf = [];
            k3 = i4 + dir_start;
            if (k3 >= sl) k3 -= sl;
            if (chkd[k3]) continue;
            buf_chain = [];
            var seen = [];
            for (j3 = k3; j3 >= 0; ) {
              seen[j3] = true;
              chkd[j3] = true;
              buf[buf.length] = j3;
              buf_chain.push(sectors[j3]);
              var addr = fat_addrs[Math.floor(j3 * 4 / ssz)];
              jj = j3 * 4 & modulus;
              if (ssz < 4 + jj) throw new Error("FAT boundary crossed: " + j3 + " 4 " + ssz);
              if (!sectors[addr]) break;
              j3 = __readInt32LE(sectors[addr], jj);
              if (seen[j3]) break;
            }
            sector_list[k3] = { nodes: buf, data: __toBuffer([buf_chain]) };
          }
          return sector_list;
        }
        function read_directory(dir_start, sector_list, sectors, Paths, nmfs, files, FileIndex, mini) {
          var minifat_store = 0, pl = Paths.length ? 2 : 0;
          var sector = sector_list[dir_start].data;
          var i4 = 0, namelen = 0, name;
          for (; i4 < sector.length; i4 += 128) {
            var blob = sector.slice(i4, i4 + 128);
            prep_blob(blob, 64);
            namelen = blob.read_shift(2);
            name = __utf16le(blob, 0, namelen - pl);
            Paths.push(name);
            var o3 = {
              name,
              type: blob.read_shift(1),
              color: blob.read_shift(1),
              L: blob.read_shift(4, "i"),
              R: blob.read_shift(4, "i"),
              C: blob.read_shift(4, "i"),
              clsid: blob.read_shift(16),
              state: blob.read_shift(4, "i"),
              start: 0,
              size: 0
            };
            var ctime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (ctime !== 0) o3.ct = read_date(blob, blob.l - 8);
            var mtime = blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2) + blob.read_shift(2);
            if (mtime !== 0) o3.mt = read_date(blob, blob.l - 8);
            o3.start = blob.read_shift(4, "i");
            o3.size = blob.read_shift(4, "i");
            if (o3.size < 0 && o3.start < 0) {
              o3.size = o3.type = 0;
              o3.start = ENDOFCHAIN;
              o3.name = "";
            }
            if (o3.type === 5) {
              minifat_store = o3.start;
              if (nmfs > 0 && minifat_store !== ENDOFCHAIN) sector_list[minifat_store].name = "!StreamData";
            } else if (o3.size >= 4096) {
              o3.storage = "fat";
              if (sector_list[o3.start] === void 0) sector_list[o3.start] = get_sector_list(sectors, o3.start, sector_list.fat_addrs, sector_list.ssz);
              sector_list[o3.start].name = o3.name;
              o3.content = sector_list[o3.start].data.slice(0, o3.size);
            } else {
              o3.storage = "minifat";
              if (o3.size < 0) o3.size = 0;
              else if (minifat_store !== ENDOFCHAIN && o3.start !== ENDOFCHAIN && sector_list[minifat_store]) {
                o3.content = get_mfat_entry(o3, sector_list[minifat_store].data, (sector_list[mini] || {}).data);
              }
            }
            if (o3.content) prep_blob(o3.content, 0);
            files[name] = o3;
            FileIndex.push(o3);
          }
        }
        function read_date(blob, offset) {
          return new Date((__readUInt32LE(blob, offset + 4) / 1e7 * Math.pow(2, 32) + __readUInt32LE(blob, offset) / 1e7 - 11644473600) * 1e3);
        }
        function read_file(filename2, options) {
          get_fs();
          return parse(fs.readFileSync(filename2), options);
        }
        function read2(blob, options) {
          var type = options && options.type;
          if (!type) {
            if (has_buf && Buffer.isBuffer(blob)) type = "buffer";
          }
          switch (type || "base64") {
            case "file":
              return read_file(blob, options);
            case "base64":
              return parse(s2a(Base64_decode(blob)), options);
            case "binary":
              return parse(s2a(blob), options);
          }
          return parse(blob, options);
        }
        function init_cfb(cfb, opts) {
          var o3 = opts || {}, root = o3.root || "Root Entry";
          if (!cfb.FullPaths) cfb.FullPaths = [];
          if (!cfb.FileIndex) cfb.FileIndex = [];
          if (cfb.FullPaths.length !== cfb.FileIndex.length) throw new Error("inconsistent CFB structure");
          if (cfb.FullPaths.length === 0) {
            cfb.FullPaths[0] = root + "/";
            cfb.FileIndex[0] = { name: root, type: 5 };
          }
          if (o3.CLSID) cfb.FileIndex[0].clsid = o3.CLSID;
          seed_cfb(cfb);
        }
        function seed_cfb(cfb) {
          var nm = "Sh33tJ5";
          if (CFB.find(cfb, "/" + nm)) return;
          var p3 = new_buf(4);
          p3[0] = 55;
          p3[1] = p3[3] = 50;
          p3[2] = 54;
          cfb.FileIndex.push({ name: nm, type: 2, content: p3, size: 4, L: 69, R: 69, C: 69 });
          cfb.FullPaths.push(cfb.FullPaths[0] + nm);
          rebuild_cfb(cfb);
        }
        function rebuild_cfb(cfb, f2) {
          init_cfb(cfb);
          var gc = false, s3 = false;
          for (var i4 = cfb.FullPaths.length - 1; i4 >= 0; --i4) {
            var _file = cfb.FileIndex[i4];
            switch (_file.type) {
              case 0:
                if (s3) gc = true;
                else {
                  cfb.FileIndex.pop();
                  cfb.FullPaths.pop();
                }
                break;
              case 1:
              case 2:
              case 5:
                s3 = true;
                if (isNaN(_file.R * _file.L * _file.C)) gc = true;
                if (_file.R > -1 && _file.L > -1 && _file.R == _file.L) gc = true;
                break;
              default:
                gc = true;
                break;
            }
          }
          if (!gc && !f2) return;
          var now = new Date(1987, 1, 19), j3 = 0;
          var fullPaths = Object.create ? /* @__PURE__ */ Object.create(null) : {};
          var data = [];
          for (i4 = 0; i4 < cfb.FullPaths.length; ++i4) {
            fullPaths[cfb.FullPaths[i4]] = true;
            if (cfb.FileIndex[i4].type === 0) continue;
            data.push([cfb.FullPaths[i4], cfb.FileIndex[i4]]);
          }
          for (i4 = 0; i4 < data.length; ++i4) {
            var dad = dirname(data[i4][0]);
            s3 = fullPaths[dad];
            if (!s3) {
              data.push([dad, {
                name: filename(dad).replace("/", ""),
                type: 1,
                clsid: HEADER_CLSID,
                ct: now,
                mt: now,
                content: null
              }]);
              fullPaths[dad] = true;
            }
          }
          data.sort(function(x3, y3) {
            return namecmp(x3[0], y3[0]);
          });
          cfb.FullPaths = [];
          cfb.FileIndex = [];
          for (i4 = 0; i4 < data.length; ++i4) {
            cfb.FullPaths[i4] = data[i4][0];
            cfb.FileIndex[i4] = data[i4][1];
          }
          for (i4 = 0; i4 < data.length; ++i4) {
            var elt = cfb.FileIndex[i4];
            var nm = cfb.FullPaths[i4];
            elt.name = filename(nm).replace("/", "");
            elt.L = elt.R = elt.C = -(elt.color = 1);
            elt.size = elt.content ? elt.content.length : 0;
            elt.start = 0;
            elt.clsid = elt.clsid || HEADER_CLSID;
            if (i4 === 0) {
              elt.C = data.length > 1 ? 1 : -1;
              elt.size = 0;
              elt.type = 5;
            } else if (nm.slice(-1) == "/") {
              for (j3 = i4 + 1; j3 < data.length; ++j3) if (dirname(cfb.FullPaths[j3]) == nm) break;
              elt.C = j3 >= data.length ? -1 : j3;
              for (j3 = i4 + 1; j3 < data.length; ++j3) if (dirname(cfb.FullPaths[j3]) == dirname(nm)) break;
              elt.R = j3 >= data.length ? -1 : j3;
              elt.type = 1;
            } else {
              if (dirname(cfb.FullPaths[i4 + 1] || "") == dirname(nm)) elt.R = i4 + 1;
              elt.type = 2;
            }
          }
        }
        function _write(cfb, options) {
          var _opts = options || {};
          if (_opts.fileType == "mad") return write_mad(cfb, _opts);
          rebuild_cfb(cfb);
          switch (_opts.fileType) {
            case "zip":
              return write_zip2(cfb, _opts);
          }
          var L2 = function(cfb2) {
            var mini_size = 0, fat_size = 0;
            for (var i5 = 0; i5 < cfb2.FileIndex.length; ++i5) {
              var file2 = cfb2.FileIndex[i5];
              if (!file2.content) continue;
              var flen2 = file2.content.length;
              if (flen2 > 0) {
                if (flen2 < 4096) mini_size += flen2 + 63 >> 6;
                else fat_size += flen2 + 511 >> 9;
              }
            }
            var dir_cnt = cfb2.FullPaths.length + 3 >> 2;
            var mini_cnt = mini_size + 7 >> 3;
            var mfat_cnt = mini_size + 127 >> 7;
            var fat_base = mini_cnt + fat_size + dir_cnt + mfat_cnt;
            var fat_cnt = fat_base + 127 >> 7;
            var difat_cnt = fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
            while (fat_base + fat_cnt + difat_cnt + 127 >> 7 > fat_cnt) difat_cnt = ++fat_cnt <= 109 ? 0 : Math.ceil((fat_cnt - 109) / 127);
            var L3 = [1, difat_cnt, fat_cnt, mfat_cnt, dir_cnt, fat_size, mini_size, 0];
            cfb2.FileIndex[0].size = mini_size << 6;
            L3[7] = (cfb2.FileIndex[0].start = L3[0] + L3[1] + L3[2] + L3[3] + L3[4] + L3[5]) + (L3[6] + 7 >> 3);
            return L3;
          }(cfb);
          var o3 = new_buf(L2[7] << 9);
          var i4 = 0, T3 = 0;
          {
            for (i4 = 0; i4 < 8; ++i4) o3.write_shift(1, HEADER_SIG[i4]);
            for (i4 = 0; i4 < 8; ++i4) o3.write_shift(2, 0);
            o3.write_shift(2, 62);
            o3.write_shift(2, 3);
            o3.write_shift(2, 65534);
            o3.write_shift(2, 9);
            o3.write_shift(2, 6);
            for (i4 = 0; i4 < 3; ++i4) o3.write_shift(2, 0);
            o3.write_shift(4, 0);
            o3.write_shift(4, L2[2]);
            o3.write_shift(4, L2[0] + L2[1] + L2[2] + L2[3] - 1);
            o3.write_shift(4, 0);
            o3.write_shift(4, 1 << 12);
            o3.write_shift(4, L2[3] ? L2[0] + L2[1] + L2[2] - 1 : ENDOFCHAIN);
            o3.write_shift(4, L2[3]);
            o3.write_shift(-4, L2[1] ? L2[0] - 1 : ENDOFCHAIN);
            o3.write_shift(4, L2[1]);
            for (i4 = 0; i4 < 109; ++i4) o3.write_shift(-4, i4 < L2[2] ? L2[1] + i4 : -1);
          }
          if (L2[1]) {
            for (T3 = 0; T3 < L2[1]; ++T3) {
              for (; i4 < 236 + T3 * 127; ++i4) o3.write_shift(-4, i4 < L2[2] ? L2[1] + i4 : -1);
              o3.write_shift(-4, T3 === L2[1] - 1 ? ENDOFCHAIN : T3 + 1);
            }
          }
          var chainit = function(w3) {
            for (T3 += w3; i4 < T3 - 1; ++i4) o3.write_shift(-4, i4 + 1);
            if (w3) {
              ++i4;
              o3.write_shift(-4, ENDOFCHAIN);
            }
          };
          T3 = i4 = 0;
          for (T3 += L2[1]; i4 < T3; ++i4) o3.write_shift(-4, consts.DIFSECT);
          for (T3 += L2[2]; i4 < T3; ++i4) o3.write_shift(-4, consts.FATSECT);
          chainit(L2[3]);
          chainit(L2[4]);
          var j3 = 0, flen = 0;
          var file = cfb.FileIndex[0];
          for (; j3 < cfb.FileIndex.length; ++j3) {
            file = cfb.FileIndex[j3];
            if (!file.content) continue;
            flen = file.content.length;
            if (flen < 4096) continue;
            file.start = T3;
            chainit(flen + 511 >> 9);
          }
          chainit(L2[6] + 7 >> 3);
          while (o3.l & 511) o3.write_shift(-4, consts.ENDOFCHAIN);
          T3 = i4 = 0;
          for (j3 = 0; j3 < cfb.FileIndex.length; ++j3) {
            file = cfb.FileIndex[j3];
            if (!file.content) continue;
            flen = file.content.length;
            if (!flen || flen >= 4096) continue;
            file.start = T3;
            chainit(flen + 63 >> 6);
          }
          while (o3.l & 511) o3.write_shift(-4, consts.ENDOFCHAIN);
          for (i4 = 0; i4 < L2[4] << 2; ++i4) {
            var nm = cfb.FullPaths[i4];
            if (!nm || nm.length === 0) {
              for (j3 = 0; j3 < 17; ++j3) o3.write_shift(4, 0);
              for (j3 = 0; j3 < 3; ++j3) o3.write_shift(4, -1);
              for (j3 = 0; j3 < 12; ++j3) o3.write_shift(4, 0);
              continue;
            }
            file = cfb.FileIndex[i4];
            if (i4 === 0) file.start = file.size ? file.start - 1 : ENDOFCHAIN;
            var _nm = i4 === 0 && _opts.root || file.name;
            flen = 2 * (_nm.length + 1);
            o3.write_shift(64, _nm, "utf16le");
            o3.write_shift(2, flen);
            o3.write_shift(1, file.type);
            o3.write_shift(1, file.color);
            o3.write_shift(-4, file.L);
            o3.write_shift(-4, file.R);
            o3.write_shift(-4, file.C);
            if (!file.clsid) for (j3 = 0; j3 < 4; ++j3) o3.write_shift(4, 0);
            else o3.write_shift(16, file.clsid, "hex");
            o3.write_shift(4, file.state || 0);
            o3.write_shift(4, 0);
            o3.write_shift(4, 0);
            o3.write_shift(4, 0);
            o3.write_shift(4, 0);
            o3.write_shift(4, file.start);
            o3.write_shift(4, file.size);
            o3.write_shift(4, 0);
          }
          for (i4 = 1; i4 < cfb.FileIndex.length; ++i4) {
            file = cfb.FileIndex[i4];
            if (file.size >= 4096) {
              o3.l = file.start + 1 << 9;
              if (has_buf && Buffer.isBuffer(file.content)) {
                file.content.copy(o3, o3.l, 0, file.size);
                o3.l += file.size + 511 & -512;
              } else {
                for (j3 = 0; j3 < file.size; ++j3) o3.write_shift(1, file.content[j3]);
                for (; j3 & 511; ++j3) o3.write_shift(1, 0);
              }
            }
          }
          for (i4 = 1; i4 < cfb.FileIndex.length; ++i4) {
            file = cfb.FileIndex[i4];
            if (file.size > 0 && file.size < 4096) {
              if (has_buf && Buffer.isBuffer(file.content)) {
                file.content.copy(o3, o3.l, 0, file.size);
                o3.l += file.size + 63 & -64;
              } else {
                for (j3 = 0; j3 < file.size; ++j3) o3.write_shift(1, file.content[j3]);
                for (; j3 & 63; ++j3) o3.write_shift(1, 0);
              }
            }
          }
          if (has_buf) {
            o3.l = o3.length;
          } else {
            while (o3.l < o3.length) o3.write_shift(1, 0);
          }
          return o3;
        }
        function find(cfb, path) {
          var UCFullPaths = cfb.FullPaths.map(function(x3) {
            return x3.toUpperCase();
          });
          var UCPaths = UCFullPaths.map(function(x3) {
            var y3 = x3.split("/");
            return y3[y3.length - (x3.slice(-1) == "/" ? 2 : 1)];
          });
          var k3 = false;
          if (path.charCodeAt(0) === 47) {
            k3 = true;
            path = UCFullPaths[0].slice(0, -1) + path;
          } else k3 = path.indexOf("/") !== -1;
          var UCPath = path.toUpperCase();
          var w3 = k3 === true ? UCFullPaths.indexOf(UCPath) : UCPaths.indexOf(UCPath);
          if (w3 !== -1) return cfb.FileIndex[w3];
          var m3 = !UCPath.match(chr1);
          UCPath = UCPath.replace(chr0, "");
          if (m3) UCPath = UCPath.replace(chr1, "!");
          for (w3 = 0; w3 < UCFullPaths.length; ++w3) {
            if ((m3 ? UCFullPaths[w3].replace(chr1, "!") : UCFullPaths[w3]).replace(chr0, "") == UCPath) return cfb.FileIndex[w3];
            if ((m3 ? UCPaths[w3].replace(chr1, "!") : UCPaths[w3]).replace(chr0, "") == UCPath) return cfb.FileIndex[w3];
          }
          return null;
        }
        var MSSZ = 64;
        var ENDOFCHAIN = -2;
        var HEADER_SIGNATURE = "d0cf11e0a1b11ae1";
        var HEADER_SIG = [208, 207, 17, 224, 161, 177, 26, 225];
        var HEADER_CLSID = "00000000000000000000000000000000";
        var consts = {
          /* 2.1 Compund File Sector Numbers and Types */
          MAXREGSECT: -6,
          DIFSECT: -4,
          FATSECT: -3,
          ENDOFCHAIN,
          FREESECT: -1,
          /* 2.2 Compound File Header */
          HEADER_SIGNATURE,
          HEADER_MINOR_VERSION: "3e00",
          MAXREGSID: -6,
          NOSTREAM: -1,
          HEADER_CLSID,
          /* 2.6.1 Compound File Directory Entry */
          EntryTypes: ["unknown", "storage", "stream", "lockbytes", "property", "root"]
        };
        function write_file(cfb, filename2, options) {
          get_fs();
          var o3 = _write(cfb, options);
          fs.writeFileSync(filename2, o3);
        }
        function a2s2(o3) {
          var out = new Array(o3.length);
          for (var i4 = 0; i4 < o3.length; ++i4) out[i4] = String.fromCharCode(o3[i4]);
          return out.join("");
        }
        function write(cfb, options) {
          var o3 = _write(cfb, options);
          switch (options && options.type || "buffer") {
            case "file":
              get_fs();
              fs.writeFileSync(options.filename, o3);
              return o3;
            case "binary":
              return typeof o3 == "string" ? o3 : a2s2(o3);
            case "base64":
              return Base64_encode(typeof o3 == "string" ? o3 : a2s2(o3));
            case "buffer":
              if (has_buf) return Buffer.isBuffer(o3) ? o3 : Buffer_from(o3);
            /* falls through */
            case "array":
              return typeof o3 == "string" ? s2a(o3) : o3;
          }
          return o3;
        }
        var _zlib;
        function use_zlib(zlib2) {
          try {
            var InflateRaw = zlib2.InflateRaw;
            var InflRaw = new InflateRaw();
            InflRaw._processChunk(new Uint8Array([3, 0]), InflRaw._finishFlushFlag);
            if (InflRaw.bytesRead) _zlib = zlib2;
            else throw new Error("zlib does not expose bytesRead");
          } catch (e3) {
            console.error("cannot use native zlib: " + (e3.message || e3));
          }
        }
        function _inflateRawSync(payload, usz) {
          if (!_zlib) return _inflate(payload, usz);
          var InflateRaw = _zlib.InflateRaw;
          var InflRaw = new InflateRaw();
          var out = InflRaw._processChunk(payload.slice(payload.l), InflRaw._finishFlushFlag);
          payload.l += InflRaw.bytesRead;
          return out;
        }
        function _deflateRawSync(payload) {
          return _zlib ? _zlib.deflateRawSync(payload) : _deflate(payload);
        }
        var CLEN_ORDER = [16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15];
        var LEN_LN = [3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31, 35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258];
        var DST_LN = [1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193, 257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145, 8193, 12289, 16385, 24577];
        function bit_swap_8(n3) {
          var t3 = (n3 << 1 | n3 << 11) & 139536 | (n3 << 5 | n3 << 15) & 558144;
          return (t3 >> 16 | t3 >> 8 | t3) & 255;
        }
        var use_typed_arrays = typeof Uint8Array !== "undefined";
        var bitswap8 = use_typed_arrays ? new Uint8Array(1 << 8) : [];
        for (var q2 = 0; q2 < 1 << 8; ++q2) bitswap8[q2] = bit_swap_8(q2);
        function bit_swap_n(n3, b3) {
          var rev = bitswap8[n3 & 255];
          if (b3 <= 8) return rev >>> 8 - b3;
          rev = rev << 8 | bitswap8[n3 >> 8 & 255];
          if (b3 <= 16) return rev >>> 16 - b3;
          rev = rev << 8 | bitswap8[n3 >> 16 & 255];
          return rev >>> 24 - b3;
        }
        function read_bits_2(buf, bl) {
          var w3 = bl & 7, h3 = bl >>> 3;
          return (buf[h3] | (w3 <= 6 ? 0 : buf[h3 + 1] << 8)) >>> w3 & 3;
        }
        function read_bits_3(buf, bl) {
          var w3 = bl & 7, h3 = bl >>> 3;
          return (buf[h3] | (w3 <= 5 ? 0 : buf[h3 + 1] << 8)) >>> w3 & 7;
        }
        function read_bits_4(buf, bl) {
          var w3 = bl & 7, h3 = bl >>> 3;
          return (buf[h3] | (w3 <= 4 ? 0 : buf[h3 + 1] << 8)) >>> w3 & 15;
        }
        function read_bits_5(buf, bl) {
          var w3 = bl & 7, h3 = bl >>> 3;
          return (buf[h3] | (w3 <= 3 ? 0 : buf[h3 + 1] << 8)) >>> w3 & 31;
        }
        function read_bits_7(buf, bl) {
          var w3 = bl & 7, h3 = bl >>> 3;
          return (buf[h3] | (w3 <= 1 ? 0 : buf[h3 + 1] << 8)) >>> w3 & 127;
        }
        function read_bits_n(buf, bl, n3) {
          var w3 = bl & 7, h3 = bl >>> 3, f2 = (1 << n3) - 1;
          var v3 = buf[h3] >>> w3;
          if (n3 < 8 - w3) return v3 & f2;
          v3 |= buf[h3 + 1] << 8 - w3;
          if (n3 < 16 - w3) return v3 & f2;
          v3 |= buf[h3 + 2] << 16 - w3;
          if (n3 < 24 - w3) return v3 & f2;
          v3 |= buf[h3 + 3] << 24 - w3;
          return v3 & f2;
        }
        function write_bits_3(buf, bl, v3) {
          var w3 = bl & 7, h3 = bl >>> 3;
          if (w3 <= 5) buf[h3] |= (v3 & 7) << w3;
          else {
            buf[h3] |= v3 << w3 & 255;
            buf[h3 + 1] = (v3 & 7) >> 8 - w3;
          }
          return bl + 3;
        }
        function write_bits_1(buf, bl, v3) {
          var w3 = bl & 7, h3 = bl >>> 3;
          v3 = (v3 & 1) << w3;
          buf[h3] |= v3;
          return bl + 1;
        }
        function write_bits_8(buf, bl, v3) {
          var w3 = bl & 7, h3 = bl >>> 3;
          v3 <<= w3;
          buf[h3] |= v3 & 255;
          v3 >>>= 8;
          buf[h3 + 1] = v3;
          return bl + 8;
        }
        function write_bits_16(buf, bl, v3) {
          var w3 = bl & 7, h3 = bl >>> 3;
          v3 <<= w3;
          buf[h3] |= v3 & 255;
          v3 >>>= 8;
          buf[h3 + 1] = v3 & 255;
          buf[h3 + 2] = v3 >>> 8;
          return bl + 16;
        }
        function realloc(b3, sz) {
          var L2 = b3.length, M2 = 2 * L2 > sz ? 2 * L2 : sz + 5, i4 = 0;
          if (L2 >= sz) return b3;
          if (has_buf) {
            var o3 = new_unsafe_buf(M2);
            if (b3.copy) b3.copy(o3);
            else for (; i4 < b3.length; ++i4) o3[i4] = b3[i4];
            return o3;
          } else if (use_typed_arrays) {
            var a2 = new Uint8Array(M2);
            if (a2.set) a2.set(b3);
            else for (; i4 < L2; ++i4) a2[i4] = b3[i4];
            return a2;
          }
          b3.length = M2;
          return b3;
        }
        function zero_fill_array(n3) {
          var o3 = new Array(n3);
          for (var i4 = 0; i4 < n3; ++i4) o3[i4] = 0;
          return o3;
        }
        function build_tree(clens, cmap, MAX) {
          var maxlen = 1, w3 = 0, i4 = 0, j3 = 0, ccode = 0, L2 = clens.length;
          var bl_count = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
          for (i4 = 0; i4 < 32; ++i4) bl_count[i4] = 0;
          for (i4 = L2; i4 < MAX; ++i4) clens[i4] = 0;
          L2 = clens.length;
          var ctree = use_typed_arrays ? new Uint16Array(L2) : zero_fill_array(L2);
          for (i4 = 0; i4 < L2; ++i4) {
            bl_count[w3 = clens[i4]]++;
            if (maxlen < w3) maxlen = w3;
            ctree[i4] = 0;
          }
          bl_count[0] = 0;
          for (i4 = 1; i4 <= maxlen; ++i4) bl_count[i4 + 16] = ccode = ccode + bl_count[i4 - 1] << 1;
          for (i4 = 0; i4 < L2; ++i4) {
            ccode = clens[i4];
            if (ccode != 0) ctree[i4] = bl_count[ccode + 16]++;
          }
          var cleni = 0;
          for (i4 = 0; i4 < L2; ++i4) {
            cleni = clens[i4];
            if (cleni != 0) {
              ccode = bit_swap_n(ctree[i4], maxlen) >> maxlen - cleni;
              for (j3 = (1 << maxlen + 4 - cleni) - 1; j3 >= 0; --j3)
                cmap[ccode | j3 << cleni] = cleni & 15 | i4 << 4;
            }
          }
          return maxlen;
        }
        var fix_lmap = use_typed_arrays ? new Uint16Array(512) : zero_fill_array(512);
        var fix_dmap = use_typed_arrays ? new Uint16Array(32) : zero_fill_array(32);
        if (!use_typed_arrays) {
          for (var i3 = 0; i3 < 512; ++i3) fix_lmap[i3] = 0;
          for (i3 = 0; i3 < 32; ++i3) fix_dmap[i3] = 0;
        }
        (function() {
          var dlens = [];
          var i4 = 0;
          for (; i4 < 32; i4++) dlens.push(5);
          build_tree(dlens, fix_dmap, 32);
          var clens = [];
          i4 = 0;
          for (; i4 <= 143; i4++) clens.push(8);
          for (; i4 <= 255; i4++) clens.push(9);
          for (; i4 <= 279; i4++) clens.push(7);
          for (; i4 <= 287; i4++) clens.push(8);
          build_tree(clens, fix_lmap, 288);
        })();
        var _deflateRaw = function _deflateRawIIFE() {
          var DST_LN_RE = use_typed_arrays ? new Uint8Array(32768) : [];
          var j3 = 0, k3 = 0;
          for (; j3 < DST_LN.length - 1; ++j3) {
            for (; k3 < DST_LN[j3 + 1]; ++k3) DST_LN_RE[k3] = j3;
          }
          for (; k3 < 32768; ++k3) DST_LN_RE[k3] = 29;
          var LEN_LN_RE = use_typed_arrays ? new Uint8Array(259) : [];
          for (j3 = 0, k3 = 0; j3 < LEN_LN.length - 1; ++j3) {
            for (; k3 < LEN_LN[j3 + 1]; ++k3) LEN_LN_RE[k3] = j3;
          }
          function write_stored(data, out) {
            var boff = 0;
            while (boff < data.length) {
              var L2 = Math.min(65535, data.length - boff);
              var h3 = boff + L2 == data.length;
              out.write_shift(1, +h3);
              out.write_shift(2, L2);
              out.write_shift(2, ~L2 & 65535);
              while (L2-- > 0) out[out.l++] = data[boff++];
            }
            return out.l;
          }
          function write_huff_fixed(data, out) {
            var bl = 0;
            var boff = 0;
            var addrs = use_typed_arrays ? new Uint16Array(32768) : [];
            while (boff < data.length) {
              var L2 = (
                /* data.length - boff; */
                Math.min(65535, data.length - boff)
              );
              if (L2 < 10) {
                bl = write_bits_3(out, bl, +!!(boff + L2 == data.length));
                if (bl & 7) bl += 8 - (bl & 7);
                out.l = bl / 8 | 0;
                out.write_shift(2, L2);
                out.write_shift(2, ~L2 & 65535);
                while (L2-- > 0) out[out.l++] = data[boff++];
                bl = out.l * 8;
                continue;
              }
              bl = write_bits_3(out, bl, +!!(boff + L2 == data.length) + 2);
              var hash = 0;
              while (L2-- > 0) {
                var d3 = data[boff];
                hash = (hash << 5 ^ d3) & 32767;
                var match = -1, mlen = 0;
                if (match = addrs[hash]) {
                  match |= boff & ~32767;
                  if (match > boff) match -= 32768;
                  if (match < boff) while (data[match + mlen] == data[boff + mlen] && mlen < 250) ++mlen;
                }
                if (mlen > 2) {
                  d3 = LEN_LN_RE[mlen];
                  if (d3 <= 22) bl = write_bits_8(out, bl, bitswap8[d3 + 1] >> 1) - 1;
                  else {
                    write_bits_8(out, bl, 3);
                    bl += 5;
                    write_bits_8(out, bl, bitswap8[d3 - 23] >> 5);
                    bl += 3;
                  }
                  var len_eb = d3 < 8 ? 0 : d3 - 4 >> 2;
                  if (len_eb > 0) {
                    write_bits_16(out, bl, mlen - LEN_LN[d3]);
                    bl += len_eb;
                  }
                  d3 = DST_LN_RE[boff - match];
                  bl = write_bits_8(out, bl, bitswap8[d3] >> 3);
                  bl -= 3;
                  var dst_eb = d3 < 4 ? 0 : d3 - 2 >> 1;
                  if (dst_eb > 0) {
                    write_bits_16(out, bl, boff - match - DST_LN[d3]);
                    bl += dst_eb;
                  }
                  for (var q3 = 0; q3 < mlen; ++q3) {
                    addrs[hash] = boff & 32767;
                    hash = (hash << 5 ^ data[boff]) & 32767;
                    ++boff;
                  }
                  L2 -= mlen - 1;
                } else {
                  if (d3 <= 143) d3 = d3 + 48;
                  else bl = write_bits_1(out, bl, 1);
                  bl = write_bits_8(out, bl, bitswap8[d3]);
                  addrs[hash] = boff & 32767;
                  ++boff;
                }
              }
              bl = write_bits_8(out, bl, 0) - 1;
            }
            out.l = (bl + 7) / 8 | 0;
            return out.l;
          }
          return function _deflateRaw2(data, out) {
            if (data.length < 8) return write_stored(data, out);
            return write_huff_fixed(data, out);
          };
        }();
        function _deflate(data) {
          var buf = new_buf(50 + Math.floor(data.length * 1.1));
          var off = _deflateRaw(data, buf);
          return buf.slice(0, off);
        }
        var dyn_lmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
        var dyn_dmap = use_typed_arrays ? new Uint16Array(32768) : zero_fill_array(32768);
        var dyn_cmap = use_typed_arrays ? new Uint16Array(128) : zero_fill_array(128);
        var dyn_len_1 = 1, dyn_len_2 = 1;
        function dyn(data, boff) {
          var _HLIT = read_bits_5(data, boff) + 257;
          boff += 5;
          var _HDIST = read_bits_5(data, boff) + 1;
          boff += 5;
          var _HCLEN = read_bits_4(data, boff) + 4;
          boff += 4;
          var w3 = 0;
          var clens = use_typed_arrays ? new Uint8Array(19) : zero_fill_array(19);
          var ctree = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
          var maxlen = 1;
          var bl_count = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
          var next_code = use_typed_arrays ? new Uint8Array(8) : zero_fill_array(8);
          var L2 = clens.length;
          for (var i4 = 0; i4 < _HCLEN; ++i4) {
            clens[CLEN_ORDER[i4]] = w3 = read_bits_3(data, boff);
            if (maxlen < w3) maxlen = w3;
            bl_count[w3]++;
            boff += 3;
          }
          var ccode = 0;
          bl_count[0] = 0;
          for (i4 = 1; i4 <= maxlen; ++i4) next_code[i4] = ccode = ccode + bl_count[i4 - 1] << 1;
          for (i4 = 0; i4 < L2; ++i4) if ((ccode = clens[i4]) != 0) ctree[i4] = next_code[ccode]++;
          var cleni = 0;
          for (i4 = 0; i4 < L2; ++i4) {
            cleni = clens[i4];
            if (cleni != 0) {
              ccode = bitswap8[ctree[i4]] >> 8 - cleni;
              for (var j3 = (1 << 7 - cleni) - 1; j3 >= 0; --j3) dyn_cmap[ccode | j3 << cleni] = cleni & 7 | i4 << 3;
            }
          }
          var hcodes = [];
          maxlen = 1;
          for (; hcodes.length < _HLIT + _HDIST; ) {
            ccode = dyn_cmap[read_bits_7(data, boff)];
            boff += ccode & 7;
            switch (ccode >>>= 3) {
              case 16:
                w3 = 3 + read_bits_2(data, boff);
                boff += 2;
                ccode = hcodes[hcodes.length - 1];
                while (w3-- > 0) hcodes.push(ccode);
                break;
              case 17:
                w3 = 3 + read_bits_3(data, boff);
                boff += 3;
                while (w3-- > 0) hcodes.push(0);
                break;
              case 18:
                w3 = 11 + read_bits_7(data, boff);
                boff += 7;
                while (w3-- > 0) hcodes.push(0);
                break;
              default:
                hcodes.push(ccode);
                if (maxlen < ccode) maxlen = ccode;
                break;
            }
          }
          var h1 = hcodes.slice(0, _HLIT), h22 = hcodes.slice(_HLIT);
          for (i4 = _HLIT; i4 < 286; ++i4) h1[i4] = 0;
          for (i4 = _HDIST; i4 < 30; ++i4) h22[i4] = 0;
          dyn_len_1 = build_tree(h1, dyn_lmap, 286);
          dyn_len_2 = build_tree(h22, dyn_dmap, 30);
          return boff;
        }
        function inflate(data, usz) {
          if (data[0] == 3 && !(data[1] & 3)) {
            return [new_raw_buf(usz), 2];
          }
          var boff = 0;
          var header = 0;
          var outbuf = new_unsafe_buf(usz ? usz : 1 << 18);
          var woff = 0;
          var OL = outbuf.length >>> 0;
          var max_len_1 = 0, max_len_2 = 0;
          while ((header & 1) == 0) {
            header = read_bits_3(data, boff);
            boff += 3;
            if (header >>> 1 == 0) {
              if (boff & 7) boff += 8 - (boff & 7);
              var sz = data[boff >>> 3] | data[(boff >>> 3) + 1] << 8;
              boff += 32;
              if (sz > 0) {
                if (!usz && OL < woff + sz) {
                  outbuf = realloc(outbuf, woff + sz);
                  OL = outbuf.length;
                }
                while (sz-- > 0) {
                  outbuf[woff++] = data[boff >>> 3];
                  boff += 8;
                }
              }
              continue;
            } else if (header >> 1 == 1) {
              max_len_1 = 9;
              max_len_2 = 5;
            } else {
              boff = dyn(data, boff);
              max_len_1 = dyn_len_1;
              max_len_2 = dyn_len_2;
            }
            for (; ; ) {
              if (!usz && OL < woff + 32767) {
                outbuf = realloc(outbuf, woff + 32767);
                OL = outbuf.length;
              }
              var bits = read_bits_n(data, boff, max_len_1);
              var code = header >>> 1 == 1 ? fix_lmap[bits] : dyn_lmap[bits];
              boff += code & 15;
              code >>>= 4;
              if ((code >>> 8 & 255) === 0) outbuf[woff++] = code;
              else if (code == 256) break;
              else {
                code -= 257;
                var len_eb = code < 8 ? 0 : code - 4 >> 2;
                if (len_eb > 5) len_eb = 0;
                var tgt = woff + LEN_LN[code];
                if (len_eb > 0) {
                  tgt += read_bits_n(data, boff, len_eb);
                  boff += len_eb;
                }
                bits = read_bits_n(data, boff, max_len_2);
                code = header >>> 1 == 1 ? fix_dmap[bits] : dyn_dmap[bits];
                boff += code & 15;
                code >>>= 4;
                var dst_eb = code < 4 ? 0 : code - 2 >> 1;
                var dst = DST_LN[code];
                if (dst_eb > 0) {
                  dst += read_bits_n(data, boff, dst_eb);
                  boff += dst_eb;
                }
                if (!usz && OL < tgt) {
                  outbuf = realloc(outbuf, tgt + 100);
                  OL = outbuf.length;
                }
                while (woff < tgt) {
                  outbuf[woff] = outbuf[woff - dst];
                  ++woff;
                }
              }
            }
          }
          if (usz) return [outbuf, boff + 7 >>> 3];
          return [outbuf.slice(0, woff), boff + 7 >>> 3];
        }
        function _inflate(payload, usz) {
          var data = payload.slice(payload.l || 0);
          var out = inflate(data, usz);
          payload.l += out[1];
          return out[0];
        }
        function warn_or_throw(wrn, msg) {
          if (wrn) {
            if (typeof console !== "undefined") console.error(msg);
          } else throw new Error(msg);
        }
        function parse_zip2(file, options) {
          var blob = file;
          prep_blob(blob, 0);
          var FileIndex = [], FullPaths = [];
          var o3 = {
            FileIndex,
            FullPaths
          };
          init_cfb(o3, { root: options.root });
          var i4 = blob.length - 4;
          while ((blob[i4] != 80 || blob[i4 + 1] != 75 || blob[i4 + 2] != 5 || blob[i4 + 3] != 6) && i4 >= 0) --i4;
          blob.l = i4 + 4;
          blob.l += 4;
          var fcnt = blob.read_shift(2);
          blob.l += 6;
          var start_cd = blob.read_shift(4);
          blob.l = start_cd;
          for (i4 = 0; i4 < fcnt; ++i4) {
            blob.l += 20;
            var csz = blob.read_shift(4);
            var usz = blob.read_shift(4);
            var namelen = blob.read_shift(2);
            var efsz = blob.read_shift(2);
            var fcsz = blob.read_shift(2);
            blob.l += 8;
            var offset = blob.read_shift(4);
            var EF = parse_extra_field(blob.slice(blob.l + namelen, blob.l + namelen + efsz));
            blob.l += namelen + efsz + fcsz;
            var L2 = blob.l;
            blob.l = offset + 4;
            parse_local_file(blob, csz, usz, o3, EF);
            blob.l = L2;
          }
          return o3;
        }
        function parse_local_file(blob, csz, usz, o3, EF) {
          blob.l += 2;
          var flags = blob.read_shift(2);
          var meth = blob.read_shift(2);
          var date = parse_dos_date(blob);
          if (flags & 8257) throw new Error("Unsupported ZIP encryption");
          var crc32 = blob.read_shift(4);
          var _csz = blob.read_shift(4);
          var _usz = blob.read_shift(4);
          var namelen = blob.read_shift(2);
          var efsz = blob.read_shift(2);
          var name = "";
          for (var i4 = 0; i4 < namelen; ++i4) name += String.fromCharCode(blob[blob.l++]);
          if (efsz) {
            var ef = parse_extra_field(blob.slice(blob.l, blob.l + efsz));
            if ((ef[21589] || {}).mt) date = ef[21589].mt;
            if (((EF || {})[21589] || {}).mt) date = EF[21589].mt;
          }
          blob.l += efsz;
          var data = blob.slice(blob.l, blob.l + _csz);
          switch (meth) {
            case 8:
              data = _inflateRawSync(blob, _usz);
              break;
            case 0:
              break;
            // TODO: scan for magic number
            default:
              throw new Error("Unsupported ZIP Compression method " + meth);
          }
          var wrn = false;
          if (flags & 8) {
            crc32 = blob.read_shift(4);
            if (crc32 == 134695760) {
              crc32 = blob.read_shift(4);
              wrn = true;
            }
            _csz = blob.read_shift(4);
            _usz = blob.read_shift(4);
          }
          if (_csz != csz) warn_or_throw(wrn, "Bad compressed size: " + csz + " != " + _csz);
          if (_usz != usz) warn_or_throw(wrn, "Bad uncompressed size: " + usz + " != " + _usz);
          cfb_add(o3, name, data, { unsafe: true, mt: date });
        }
        function write_zip2(cfb, options) {
          var _opts = options || {};
          var out = [], cdirs = [];
          var o3 = new_buf(1);
          var method = _opts.compression ? 8 : 0, flags = 0;
          var desc = false;
          if (desc) flags |= 8;
          var i4 = 0, j3 = 0;
          var start_cd = 0, fcnt = 0;
          var root = cfb.FullPaths[0], fp = root, fi2 = cfb.FileIndex[0];
          var crcs = [];
          var sz_cd = 0;
          for (i4 = 1; i4 < cfb.FullPaths.length; ++i4) {
            fp = cfb.FullPaths[i4].slice(root.length);
            fi2 = cfb.FileIndex[i4];
            if (!fi2.size || !fi2.content || fp == "Sh33tJ5") continue;
            var start = start_cd;
            var namebuf = new_buf(fp.length);
            for (j3 = 0; j3 < fp.length; ++j3) namebuf.write_shift(1, fp.charCodeAt(j3) & 127);
            namebuf = namebuf.slice(0, namebuf.l);
            crcs[fcnt] = CRC32.buf(fi2.content, 0);
            var outbuf = fi2.content;
            if (method == 8) outbuf = _deflateRawSync(outbuf);
            o3 = new_buf(30);
            o3.write_shift(4, 67324752);
            o3.write_shift(2, 20);
            o3.write_shift(2, flags);
            o3.write_shift(2, method);
            if (fi2.mt) write_dos_date(o3, fi2.mt);
            else o3.write_shift(4, 0);
            o3.write_shift(-4, flags & 8 ? 0 : crcs[fcnt]);
            o3.write_shift(4, flags & 8 ? 0 : outbuf.length);
            o3.write_shift(4, flags & 8 ? 0 : fi2.content.length);
            o3.write_shift(2, namebuf.length);
            o3.write_shift(2, 0);
            start_cd += o3.length;
            out.push(o3);
            start_cd += namebuf.length;
            out.push(namebuf);
            start_cd += outbuf.length;
            out.push(outbuf);
            if (flags & 8) {
              o3 = new_buf(12);
              o3.write_shift(-4, crcs[fcnt]);
              o3.write_shift(4, outbuf.length);
              o3.write_shift(4, fi2.content.length);
              start_cd += o3.l;
              out.push(o3);
            }
            o3 = new_buf(46);
            o3.write_shift(4, 33639248);
            o3.write_shift(2, 0);
            o3.write_shift(2, 20);
            o3.write_shift(2, flags);
            o3.write_shift(2, method);
            o3.write_shift(4, 0);
            o3.write_shift(-4, crcs[fcnt]);
            o3.write_shift(4, outbuf.length);
            o3.write_shift(4, fi2.content.length);
            o3.write_shift(2, namebuf.length);
            o3.write_shift(2, 0);
            o3.write_shift(2, 0);
            o3.write_shift(2, 0);
            o3.write_shift(2, 0);
            o3.write_shift(4, 0);
            o3.write_shift(4, start);
            sz_cd += o3.l;
            cdirs.push(o3);
            sz_cd += namebuf.length;
            cdirs.push(namebuf);
            ++fcnt;
          }
          o3 = new_buf(22);
          o3.write_shift(4, 101010256);
          o3.write_shift(2, 0);
          o3.write_shift(2, 0);
          o3.write_shift(2, fcnt);
          o3.write_shift(2, fcnt);
          o3.write_shift(4, sz_cd);
          o3.write_shift(4, start_cd);
          o3.write_shift(2, 0);
          return bconcat([bconcat(out), bconcat(cdirs), o3]);
        }
        var ContentTypeMap = {
          "htm": "text/html",
          "xml": "text/xml",
          "gif": "image/gif",
          "jpg": "image/jpeg",
          "png": "image/png",
          "mso": "application/x-mso",
          "thmx": "application/vnd.ms-officetheme",
          "sh33tj5": "application/octet-stream"
        };
        function get_content_type(fi2, fp) {
          if (fi2.ctype) return fi2.ctype;
          var ext = fi2.name || "", m3 = ext.match(/\.([^\.]+)$/);
          if (m3 && ContentTypeMap[m3[1]]) return ContentTypeMap[m3[1]];
          if (fp) {
            m3 = (ext = fp).match(/[\.\\]([^\.\\])+$/);
            if (m3 && ContentTypeMap[m3[1]]) return ContentTypeMap[m3[1]];
          }
          return "application/octet-stream";
        }
        function write_base64_76(bstr) {
          var data = Base64_encode(bstr);
          var o3 = [];
          for (var i4 = 0; i4 < data.length; i4 += 76) o3.push(data.slice(i4, i4 + 76));
          return o3.join("\r\n") + "\r\n";
        }
        function write_quoted_printable(text) {
          var encoded = text.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF=]/g, function(c3) {
            var w3 = c3.charCodeAt(0).toString(16).toUpperCase();
            return "=" + (w3.length == 1 ? "0" + w3 : w3);
          });
          encoded = encoded.replace(/ $/mg, "=20").replace(/\t$/mg, "=09");
          if (encoded.charAt(0) == "\n") encoded = "=0D" + encoded.slice(1);
          encoded = encoded.replace(/\r(?!\n)/mg, "=0D").replace(/\n\n/mg, "\n=0A").replace(/([^\r\n])\n/mg, "$1=0A");
          var o3 = [], split = encoded.split("\r\n");
          for (var si2 = 0; si2 < split.length; ++si2) {
            var str = split[si2];
            if (str.length == 0) {
              o3.push("");
              continue;
            }
            for (var i4 = 0; i4 < str.length; ) {
              var end = 76;
              var tmp = str.slice(i4, i4 + end);
              if (tmp.charAt(end - 1) == "=") end--;
              else if (tmp.charAt(end - 2) == "=") end -= 2;
              else if (tmp.charAt(end - 3) == "=") end -= 3;
              tmp = str.slice(i4, i4 + end);
              i4 += end;
              if (i4 < str.length) tmp += "=";
              o3.push(tmp);
            }
          }
          return o3.join("\r\n");
        }
        function parse_quoted_printable(data) {
          var o3 = [];
          for (var di = 0; di < data.length; ++di) {
            var line = data[di];
            while (di <= data.length && line.charAt(line.length - 1) == "=") line = line.slice(0, line.length - 1) + data[++di];
            o3.push(line);
          }
          for (var oi2 = 0; oi2 < o3.length; ++oi2) o3[oi2] = o3[oi2].replace(/[=][0-9A-Fa-f]{2}/g, function($$) {
            return String.fromCharCode(parseInt($$.slice(1), 16));
          });
          return s2a(o3.join("\r\n"));
        }
        function parse_mime(cfb, data, root) {
          var fname = "", cte = "", ctype = "", fdata;
          var di = 0;
          for (; di < 10; ++di) {
            var line = data[di];
            if (!line || line.match(/^\s*$/)) break;
            var m3 = line.match(/^(.*?):\s*([^\s].*)$/);
            if (m3) switch (m3[1].toLowerCase()) {
              case "content-location":
                fname = m3[2].trim();
                break;
              case "content-type":
                ctype = m3[2].trim();
                break;
              case "content-transfer-encoding":
                cte = m3[2].trim();
                break;
            }
          }
          ++di;
          switch (cte.toLowerCase()) {
            case "base64":
              fdata = s2a(Base64_decode(data.slice(di).join("")));
              break;
            case "quoted-printable":
              fdata = parse_quoted_printable(data.slice(di));
              break;
            default:
              throw new Error("Unsupported Content-Transfer-Encoding " + cte);
          }
          var file = cfb_add(cfb, fname.slice(root.length), fdata, { unsafe: true });
          if (ctype) file.ctype = ctype;
        }
        function parse_mad(file, options) {
          if (a2s2(file.slice(0, 13)).toLowerCase() != "mime-version:") throw new Error("Unsupported MAD header");
          var root = options && options.root || "";
          var data = (has_buf && Buffer.isBuffer(file) ? file.toString("binary") : a2s2(file)).split("\r\n");
          var di = 0, row = "";
          for (di = 0; di < data.length; ++di) {
            row = data[di];
            if (!/^Content-Location:/i.test(row)) continue;
            row = row.slice(row.indexOf("file"));
            if (!root) root = row.slice(0, row.lastIndexOf("/") + 1);
            if (row.slice(0, root.length) == root) continue;
            while (root.length > 0) {
              root = root.slice(0, root.length - 1);
              root = root.slice(0, root.lastIndexOf("/") + 1);
              if (row.slice(0, root.length) == root) break;
            }
          }
          var mboundary = (data[1] || "").match(/boundary="(.*?)"/);
          if (!mboundary) throw new Error("MAD cannot find boundary");
          var boundary = "--" + (mboundary[1] || "");
          var FileIndex = [], FullPaths = [];
          var o3 = {
            FileIndex,
            FullPaths
          };
          init_cfb(o3);
          var start_di, fcnt = 0;
          for (di = 0; di < data.length; ++di) {
            var line = data[di];
            if (line !== boundary && line !== boundary + "--") continue;
            if (fcnt++) parse_mime(o3, data.slice(start_di, di), root);
            start_di = di;
          }
          return o3;
        }
        function write_mad(cfb, options) {
          var opts = options || {};
          var boundary = opts.boundary || "SheetJS";
          boundary = "------=" + boundary;
          var out = [
            "MIME-Version: 1.0",
            'Content-Type: multipart/related; boundary="' + boundary.slice(2) + '"',
            "",
            "",
            ""
          ];
          var root = cfb.FullPaths[0], fp = root, fi2 = cfb.FileIndex[0];
          for (var i4 = 1; i4 < cfb.FullPaths.length; ++i4) {
            fp = cfb.FullPaths[i4].slice(root.length);
            fi2 = cfb.FileIndex[i4];
            if (!fi2.size || !fi2.content || fp == "Sh33tJ5") continue;
            fp = fp.replace(/[\x00-\x08\x0B\x0C\x0E-\x1F\x7E-\xFF]/g, function(c3) {
              return "_x" + c3.charCodeAt(0).toString(16) + "_";
            }).replace(/[\u0080-\uFFFF]/g, function(u3) {
              return "_u" + u3.charCodeAt(0).toString(16) + "_";
            });
            var ca2 = fi2.content;
            var cstr = has_buf && Buffer.isBuffer(ca2) ? ca2.toString("binary") : a2s2(ca2);
            var dispcnt = 0, L2 = Math.min(1024, cstr.length), cc = 0;
            for (var csl = 0; csl <= L2; ++csl) if ((cc = cstr.charCodeAt(csl)) >= 32 && cc < 128) ++dispcnt;
            var qp = dispcnt >= L2 * 4 / 5;
            out.push(boundary);
            out.push("Content-Location: " + (opts.root || "file:///C:/SheetJS/") + fp);
            out.push("Content-Transfer-Encoding: " + (qp ? "quoted-printable" : "base64"));
            out.push("Content-Type: " + get_content_type(fi2, fp));
            out.push("");
            out.push(qp ? write_quoted_printable(cstr) : write_base64_76(cstr));
          }
          out.push(boundary + "--\r\n");
          return out.join("\r\n");
        }
        function cfb_new(opts) {
          var o3 = {};
          init_cfb(o3, opts);
          return o3;
        }
        function cfb_add(cfb, name, content, opts) {
          var unsafe = opts && opts.unsafe;
          if (!unsafe) init_cfb(cfb);
          var file = !unsafe && CFB.find(cfb, name);
          if (!file) {
            var fpath = cfb.FullPaths[0];
            if (name.slice(0, fpath.length) == fpath) fpath = name;
            else {
              if (fpath.slice(-1) != "/") fpath += "/";
              fpath = (fpath + name).replace("//", "/");
            }
            file = { name: filename(name), type: 2 };
            cfb.FileIndex.push(file);
            cfb.FullPaths.push(fpath);
            if (!unsafe) CFB.utils.cfb_gc(cfb);
          }
          file.content = content;
          file.size = content ? content.length : 0;
          if (opts) {
            if (opts.CLSID) file.clsid = opts.CLSID;
            if (opts.mt) file.mt = opts.mt;
            if (opts.ct) file.ct = opts.ct;
          }
          return file;
        }
        function cfb_del(cfb, name) {
          init_cfb(cfb);
          var file = CFB.find(cfb, name);
          if (file) {
            for (var j3 = 0; j3 < cfb.FileIndex.length; ++j3) if (cfb.FileIndex[j3] == file) {
              cfb.FileIndex.splice(j3, 1);
              cfb.FullPaths.splice(j3, 1);
              return true;
            }
          }
          return false;
        }
        function cfb_mov(cfb, old_name, new_name) {
          init_cfb(cfb);
          var file = CFB.find(cfb, old_name);
          if (file) {
            for (var j3 = 0; j3 < cfb.FileIndex.length; ++j3) if (cfb.FileIndex[j3] == file) {
              cfb.FileIndex[j3].name = filename(new_name);
              cfb.FullPaths[j3] = new_name;
              return true;
            }
          }
          return false;
        }
        function cfb_gc(cfb) {
          rebuild_cfb(cfb, true);
        }
        exports2.find = find;
        exports2.read = read2;
        exports2.parse = parse;
        exports2.write = write;
        exports2.writeFile = write_file;
        exports2.utils = {
          cfb_new,
          cfb_add,
          cfb_del,
          cfb_mov,
          cfb_gc,
          ReadShift,
          CheckField,
          prep_blob,
          bconcat,
          use_zlib,
          _deflateRaw: _deflate,
          _inflateRaw: _inflate,
          consts
        };
        return exports2;
      }();
      var _fs;
      if (typeof __require !== "undefined") try {
        _fs = __require("fs");
      } catch (e3) {
      }
      function blobify(data) {
        if (typeof data === "string") return s2ab(data);
        if (Array.isArray(data)) return a2u(data);
        return data;
      }
      function write_dl(fname, payload, enc) {
        if (typeof _fs !== "undefined" && _fs.writeFileSync) return enc ? _fs.writeFileSync(fname, payload, enc) : _fs.writeFileSync(fname, payload);
        if (typeof Deno !== "undefined") {
          if (enc && typeof payload == "string") switch (enc) {
            case "utf8":
              payload = new TextEncoder(enc).encode(payload);
              break;
            case "binary":
              payload = s2ab(payload);
              break;
            /* TODO: binary equivalent */
            default:
              throw new Error("Unsupported encoding " + enc);
          }
          return Deno.writeFileSync(fname, payload);
        }
        var data = enc == "utf8" ? utf8write(payload) : payload;
        if (typeof IE_SaveFile !== "undefined") return IE_SaveFile(data, fname);
        if (typeof Blob !== "undefined") {
          var blob = new Blob([blobify(data)], { type: "application/octet-stream" });
          if (typeof navigator !== "undefined" && navigator.msSaveBlob) return navigator.msSaveBlob(blob, fname);
          if (typeof saveAs !== "undefined") return saveAs(blob, fname);
          if (typeof URL !== "undefined" && typeof document !== "undefined" && document.createElement && URL.createObjectURL) {
            var url = URL.createObjectURL(blob);
            if (typeof chrome === "object" && typeof (chrome.downloads || {}).download == "function") {
              if (URL.revokeObjectURL && typeof setTimeout !== "undefined") setTimeout(function() {
                URL.revokeObjectURL(url);
              }, 6e4);
              return chrome.downloads.download({ url, filename: fname, saveAs: true });
            }
            var a2 = document.createElement("a");
            if (a2.download != null) {
              a2.download = fname;
              a2.href = url;
              document.body.appendChild(a2);
              a2.click();
              document.body.removeChild(a2);
              if (URL.revokeObjectURL && typeof setTimeout !== "undefined") setTimeout(function() {
                URL.revokeObjectURL(url);
              }, 6e4);
              return url;
            }
          }
        }
        if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined") try {
          var out = File(fname);
          out.open("w");
          out.encoding = "binary";
          if (Array.isArray(payload)) payload = a2s(payload);
          out.write(payload);
          out.close();
          return payload;
        } catch (e3) {
          if (!e3.message || !e3.message.match(/onstruct/)) throw e3;
        }
        throw new Error("cannot save file " + fname);
      }
      function read_binary(path) {
        if (typeof _fs !== "undefined") return _fs.readFileSync(path);
        if (typeof Deno !== "undefined") return Deno.readFileSync(path);
        if (typeof $ !== "undefined" && typeof File !== "undefined" && typeof Folder !== "undefined") try {
          var infile = File(path);
          infile.open("r");
          infile.encoding = "binary";
          var data = infile.read();
          infile.close();
          return data;
        } catch (e3) {
          if (!e3.message || !e3.message.match(/onstruct/)) throw e3;
        }
        throw new Error("Cannot access file " + path);
      }
      function keys(o3) {
        var ks = Object.keys(o3), o22 = [];
        for (var i3 = 0; i3 < ks.length; ++i3) if (Object.prototype.hasOwnProperty.call(o3, ks[i3])) o22.push(ks[i3]);
        return o22;
      }
      function evert_key(obj, key) {
        var o3 = [], K3 = keys(obj);
        for (var i3 = 0; i3 !== K3.length; ++i3) if (o3[obj[K3[i3]][key]] == null) o3[obj[K3[i3]][key]] = K3[i3];
        return o3;
      }
      function evert(obj) {
        var o3 = [], K3 = keys(obj);
        for (var i3 = 0; i3 !== K3.length; ++i3) o3[obj[K3[i3]]] = K3[i3];
        return o3;
      }
      function evert_num(obj) {
        var o3 = [], K3 = keys(obj);
        for (var i3 = 0; i3 !== K3.length; ++i3) o3[obj[K3[i3]]] = parseInt(K3[i3], 10);
        return o3;
      }
      function evert_arr(obj) {
        var o3 = [], K3 = keys(obj);
        for (var i3 = 0; i3 !== K3.length; ++i3) {
          if (o3[obj[K3[i3]]] == null) o3[obj[K3[i3]]] = [];
          o3[obj[K3[i3]]].push(K3[i3]);
        }
        return o3;
      }
      var basedate = new Date(1899, 11, 30, 0, 0, 0);
      function datenum(v3, date1904) {
        var epoch = v3.getTime();
        if (date1904) epoch -= 1462 * 24 * 60 * 60 * 1e3;
        var dnthresh2 = basedate.getTime() + (v3.getTimezoneOffset() - basedate.getTimezoneOffset()) * 6e4;
        return (epoch - dnthresh2) / (24 * 60 * 60 * 1e3);
      }
      var refdate = /* @__PURE__ */ new Date();
      var dnthresh = basedate.getTime() + (refdate.getTimezoneOffset() - basedate.getTimezoneOffset()) * 6e4;
      var refoffset = refdate.getTimezoneOffset();
      function numdate(v3) {
        var out = /* @__PURE__ */ new Date();
        out.setTime(v3 * 24 * 60 * 60 * 1e3 + dnthresh);
        if (out.getTimezoneOffset() !== refoffset) {
          out.setTime(out.getTime() + (out.getTimezoneOffset() - refoffset) * 6e4);
        }
        return out;
      }
      function parse_isodur(s3) {
        var sec = 0, mt2 = 0, time = false;
        var m3 = s3.match(/P([0-9\.]+Y)?([0-9\.]+M)?([0-9\.]+D)?T([0-9\.]+H)?([0-9\.]+M)?([0-9\.]+S)?/);
        if (!m3) throw new Error("|" + s3 + "| is not an ISO8601 Duration");
        for (var i3 = 1; i3 != m3.length; ++i3) {
          if (!m3[i3]) continue;
          mt2 = 1;
          if (i3 > 3) time = true;
          switch (m3[i3].slice(m3[i3].length - 1)) {
            case "Y":
              throw new Error("Unsupported ISO Duration Field: " + m3[i3].slice(m3[i3].length - 1));
            case "D":
              mt2 *= 24;
            /* falls through */
            case "H":
              mt2 *= 60;
            /* falls through */
            case "M":
              if (!time) throw new Error("Unsupported ISO Duration Field: M");
              else mt2 *= 60;
            /* falls through */
            case "S":
              break;
          }
          sec += mt2 * parseInt(m3[i3], 10);
        }
        return sec;
      }
      var good_pd_date_1 = /* @__PURE__ */ new Date("2017-02-19T19:06:09.000Z");
      var good_pd_date = isNaN(good_pd_date_1.getFullYear()) ? /* @__PURE__ */ new Date("2/19/17") : good_pd_date_1;
      var good_pd = good_pd_date.getFullYear() == 2017;
      function parseDate(str, fixdate) {
        var d3 = new Date(str);
        if (good_pd) {
          if (fixdate > 0) d3.setTime(d3.getTime() + d3.getTimezoneOffset() * 60 * 1e3);
          else if (fixdate < 0) d3.setTime(d3.getTime() - d3.getTimezoneOffset() * 60 * 1e3);
          return d3;
        }
        if (str instanceof Date) return str;
        if (good_pd_date.getFullYear() == 1917 && !isNaN(d3.getFullYear())) {
          var s3 = d3.getFullYear();
          if (str.indexOf("" + s3) > -1) return d3;
          d3.setFullYear(d3.getFullYear() + 100);
          return d3;
        }
        var n3 = str.match(/\d+/g) || ["2017", "2", "19", "0", "0", "0"];
        var out = new Date(+n3[0], +n3[1] - 1, +n3[2], +n3[3] || 0, +n3[4] || 0, +n3[5] || 0);
        if (str.indexOf("Z") > -1) out = new Date(out.getTime() - out.getTimezoneOffset() * 60 * 1e3);
        return out;
      }
      function cc2str(arr, debomit) {
        if (has_buf && Buffer.isBuffer(arr)) {
          if (debomit) {
            if (arr[0] == 255 && arr[1] == 254) return utf8write(arr.slice(2).toString("utf16le"));
            if (arr[1] == 254 && arr[2] == 255) return utf8write(utf16beread(arr.slice(2).toString("binary")));
          }
          return arr.toString("binary");
        }
        if (typeof TextDecoder !== "undefined") try {
          if (debomit) {
            if (arr[0] == 255 && arr[1] == 254) return utf8write(new TextDecoder("utf-16le").decode(arr.slice(2)));
            if (arr[0] == 254 && arr[1] == 255) return utf8write(new TextDecoder("utf-16be").decode(arr.slice(2)));
          }
          var rev = {
            "€": "",
            "‚": "",
            "ƒ": "",
            "„": "",
            "…": "",
            "†": "",
            "‡": "",
            "ˆ": "",
            "‰": "",
            "Š": "",
            "‹": "",
            "Œ": "",
            "Ž": "",
            "‘": "",
            "’": "",
            "“": "",
            "”": "",
            "•": "",
            "–": "",
            "—": "",
            "˜": "",
            "™": "",
            "š": "",
            "›": "",
            "œ": "",
            "ž": "",
            "Ÿ": ""
          };
          if (Array.isArray(arr)) arr = new Uint8Array(arr);
          return new TextDecoder("latin1").decode(arr).replace(/[€‚ƒ„…†‡ˆ‰Š‹ŒŽ‘’“”•–—˜™š›œžŸ]/g, function(c3) {
            return rev[c3] || c3;
          });
        } catch (e3) {
        }
        var o3 = [];
        for (var i3 = 0; i3 != arr.length; ++i3) o3.push(String.fromCharCode(arr[i3]));
        return o3.join("");
      }
      function dup(o3) {
        if (typeof JSON != "undefined" && !Array.isArray(o3)) return JSON.parse(JSON.stringify(o3));
        if (typeof o3 != "object" || o3 == null) return o3;
        if (o3 instanceof Date) return new Date(o3.getTime());
        var out = {};
        for (var k3 in o3) if (Object.prototype.hasOwnProperty.call(o3, k3)) out[k3] = dup(o3[k3]);
        return out;
      }
      function fill(c3, l2) {
        var o3 = "";
        while (o3.length < l2) o3 += c3;
        return o3;
      }
      function fuzzynum(s3) {
        var v3 = Number(s3);
        if (!isNaN(v3)) return isFinite(v3) ? v3 : NaN;
        if (!/\d/.test(s3)) return v3;
        var wt2 = 1;
        var ss = s3.replace(/([\d]),([\d])/g, "$1$2").replace(/[$]/g, "").replace(/[%]/g, function() {
          wt2 *= 100;
          return "";
        });
        if (!isNaN(v3 = Number(ss))) return v3 / wt2;
        ss = ss.replace(/[(](.*)[)]/, function($$, $1) {
          wt2 = -wt2;
          return $1;
        });
        if (!isNaN(v3 = Number(ss))) return v3 / wt2;
        return v3;
      }
      var lower_months = ["january", "february", "march", "april", "may", "june", "july", "august", "september", "october", "november", "december"];
      function fuzzydate(s3) {
        var o3 = new Date(s3), n3 = /* @__PURE__ */ new Date(NaN);
        var y3 = o3.getYear(), m3 = o3.getMonth(), d3 = o3.getDate();
        if (isNaN(d3)) return n3;
        var lower = s3.toLowerCase();
        if (lower.match(/jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec/)) {
          lower = lower.replace(/[^a-z]/g, "").replace(/([^a-z]|^)[ap]m?([^a-z]|$)/, "");
          if (lower.length > 3 && lower_months.indexOf(lower) == -1) return n3;
        } else if (lower.match(/[a-z]/)) return n3;
        if (y3 < 0 || y3 > 8099) return n3;
        if ((m3 > 0 || d3 > 1) && y3 != 101) return o3;
        if (s3.match(/[^-0-9:,\/\\]/)) return n3;
        return o3;
      }
      var split_regex = function() {
        var safe_split_regex = "abacaba".split(/(:?b)/i).length == 5;
        return function split_regex2(str, re2, def) {
          if (safe_split_regex || typeof re2 == "string") return str.split(re2);
          var p3 = str.split(re2), o3 = [p3[0]];
          for (var i3 = 1; i3 < p3.length; ++i3) {
            o3.push(def);
            o3.push(p3[i3]);
          }
          return o3;
        };
      }();
      function getdatastr(data) {
        if (!data) return null;
        if (data.content && data.type) return cc2str(data.content, true);
        if (data.data) return debom(data.data);
        if (data.asNodeBuffer && has_buf) return debom(data.asNodeBuffer().toString("binary"));
        if (data.asBinary) return debom(data.asBinary());
        if (data._data && data._data.getContent) return debom(cc2str(Array.prototype.slice.call(data._data.getContent(), 0)));
        return null;
      }
      function getdatabin(data) {
        if (!data) return null;
        if (data.data) return char_codes(data.data);
        if (data.asNodeBuffer && has_buf) return data.asNodeBuffer();
        if (data._data && data._data.getContent) {
          var o3 = data._data.getContent();
          if (typeof o3 == "string") return char_codes(o3);
          return Array.prototype.slice.call(o3);
        }
        if (data.content && data.type) return data.content;
        return null;
      }
      function getdata(data) {
        return data && data.name.slice(-4) === ".bin" ? getdatabin(data) : getdatastr(data);
      }
      function safegetzipfile(zip, file) {
        var k3 = zip.FullPaths || keys(zip.files);
        var f2 = file.toLowerCase().replace(/[\/]/g, "\\"), g2 = f2.replace(/\\/g, "/");
        for (var i3 = 0; i3 < k3.length; ++i3) {
          var n3 = k3[i3].replace(/^Root Entry[\/]/, "").toLowerCase();
          if (f2 == n3 || g2 == n3) return zip.files ? zip.files[k3[i3]] : zip.FileIndex[i3];
        }
        return null;
      }
      function getzipfile(zip, file) {
        var o3 = safegetzipfile(zip, file);
        if (o3 == null) throw new Error("Cannot find file " + file + " in zip");
        return o3;
      }
      function getzipdata(zip, file, safe) {
        if (!safe) return getdata(getzipfile(zip, file));
        if (!file) return null;
        try {
          return getzipdata(zip, file);
        } catch (e3) {
          return null;
        }
      }
      function getzipstr(zip, file, safe) {
        if (!safe) return getdatastr(getzipfile(zip, file));
        if (!file) return null;
        try {
          return getzipstr(zip, file);
        } catch (e3) {
          return null;
        }
      }
      function getzipbin(zip, file, safe) {
        if (!safe) return getdatabin(getzipfile(zip, file));
        if (!file) return null;
        try {
          return getzipbin(zip, file);
        } catch (e3) {
          return null;
        }
      }
      function zipentries(zip) {
        var k3 = zip.FullPaths || keys(zip.files), o3 = [];
        for (var i3 = 0; i3 < k3.length; ++i3) if (k3[i3].slice(-1) != "/") o3.push(k3[i3].replace(/^Root Entry[\/]/, ""));
        return o3.sort();
      }
      function zip_add_file(zip, path, content) {
        if (zip.FullPaths) {
          if (typeof content == "string") {
            var res;
            if (has_buf) res = Buffer_from(content);
            else res = utf8decode(content);
            return CFB.utils.cfb_add(zip, path, res);
          }
          CFB.utils.cfb_add(zip, path, content);
        } else zip.file(path, content);
      }
      function zip_new() {
        return CFB.utils.cfb_new();
      }
      function zip_read(d3, o3) {
        switch (o3.type) {
          case "base64":
            return CFB.read(d3, { type: "base64" });
          case "binary":
            return CFB.read(d3, { type: "binary" });
          case "buffer":
          case "array":
            return CFB.read(d3, { type: "buffer" });
        }
        throw new Error("Unrecognized type " + o3.type);
      }
      function resolve_path(path, base) {
        if (path.charAt(0) == "/") return path.slice(1);
        var result = base.split("/");
        if (base.slice(-1) != "/") result.pop();
        var target = path.split("/");
        while (target.length !== 0) {
          var step = target.shift();
          if (step === "..") result.pop();
          else if (step !== ".") result.push(step);
        }
        return result.join("/");
      }
      var XML_HEADER = '<?xml version="1.0" encoding="UTF-8" standalone="yes"?>\r\n';
      var attregexg = /([^"\s?>\/]+)\s*=\s*((?:")([^"]*)(?:")|(?:')([^']*)(?:')|([^'">\s]+))/g;
      var tagregex1 = /<[\/\?]?[a-zA-Z0-9:_-]+(?:\s+[^"\s?>\/]+\s*=\s*(?:"[^"]*"|'[^']*'|[^'">\s=]+))*\s*[\/\?]?>/mg, tagregex2 = /<[^>]*>/g;
      var tagregex = XML_HEADER.match(tagregex1) ? tagregex1 : tagregex2;
      var nsregex = /<\w*:/, nsregex2 = /<(\/?)\w+:/;
      function parsexmltag(tag, skip_root, skip_LC) {
        var z4 = {};
        var eq = 0, c3 = 0;
        for (; eq !== tag.length; ++eq) if ((c3 = tag.charCodeAt(eq)) === 32 || c3 === 10 || c3 === 13) break;
        if (!skip_root) z4[0] = tag.slice(0, eq);
        if (eq === tag.length) return z4;
        var m3 = tag.match(attregexg), j3 = 0, v3 = "", i3 = 0, q2 = "", cc = "", quot = 1;
        if (m3) for (i3 = 0; i3 != m3.length; ++i3) {
          cc = m3[i3];
          for (c3 = 0; c3 != cc.length; ++c3) if (cc.charCodeAt(c3) === 61) break;
          q2 = cc.slice(0, c3).trim();
          while (cc.charCodeAt(c3 + 1) == 32) ++c3;
          quot = (eq = cc.charCodeAt(c3 + 1)) == 34 || eq == 39 ? 1 : 0;
          v3 = cc.slice(c3 + 1 + quot, cc.length - quot);
          for (j3 = 0; j3 != q2.length; ++j3) if (q2.charCodeAt(j3) === 58) break;
          if (j3 === q2.length) {
            if (q2.indexOf("_") > 0) q2 = q2.slice(0, q2.indexOf("_"));
            z4[q2] = v3;
            if (!skip_LC) z4[q2.toLowerCase()] = v3;
          } else {
            var k3 = (j3 === 5 && q2.slice(0, 5) === "xmlns" ? "xmlns" : "") + q2.slice(j3 + 1);
            if (z4[k3] && q2.slice(j3 - 3, j3) == "ext") continue;
            z4[k3] = v3;
            if (!skip_LC) z4[k3.toLowerCase()] = v3;
          }
        }
        return z4;
      }
      function strip_ns(x3) {
        return x3.replace(nsregex2, "<$1");
      }
      var encodings = {
        "&quot;": '"',
        "&apos;": "'",
        "&gt;": ">",
        "&lt;": "<",
        "&amp;": "&"
      };
      var rencoding = evert(encodings);
      var unescapexml = /* @__PURE__ */ function() {
        var encregex = /&(?:quot|apos|gt|lt|amp|#x?([\da-fA-F]+));/ig, coderegex = /_x([\da-fA-F]{4})_/ig;
        return function unescapexml2(text) {
          var s3 = text + "", i3 = s3.indexOf("<![CDATA[");
          if (i3 == -1) return s3.replace(encregex, function($$, $1) {
            return encodings[$$] || String.fromCharCode(parseInt($1, $$.indexOf("x") > -1 ? 16 : 10)) || $$;
          }).replace(coderegex, function(m3, c3) {
            return String.fromCharCode(parseInt(c3, 16));
          });
          var j3 = s3.indexOf("]]>");
          return unescapexml2(s3.slice(0, i3)) + s3.slice(i3 + 9, j3) + unescapexml2(s3.slice(j3 + 3));
        };
      }();
      var decregex = /[&<>'"]/g, charegex = /[\u0000-\u0008\u000b-\u001f]/g;
      function escapexml(text) {
        var s3 = text + "";
        return s3.replace(decregex, function(y3) {
          return rencoding[y3];
        }).replace(charegex, function(s4) {
          return "_x" + ("000" + s4.charCodeAt(0).toString(16)).slice(-4) + "_";
        });
      }
      function escapexmltag(text) {
        return escapexml(text).replace(/ /g, "_x0020_");
      }
      var htmlcharegex = /[\u0000-\u001f]/g;
      function escapehtml(text) {
        var s3 = text + "";
        return s3.replace(decregex, function(y3) {
          return rencoding[y3];
        }).replace(/\n/g, "<br/>").replace(htmlcharegex, function(s4) {
          return "&#x" + ("000" + s4.charCodeAt(0).toString(16)).slice(-4) + ";";
        });
      }
      function escapexlml(text) {
        var s3 = text + "";
        return s3.replace(decregex, function(y3) {
          return rencoding[y3];
        }).replace(htmlcharegex, function(s4) {
          return "&#x" + s4.charCodeAt(0).toString(16).toUpperCase() + ";";
        });
      }
      var xlml_fixstr = /* @__PURE__ */ function() {
        var entregex = /&#(\d+);/g;
        function entrepl($$, $1) {
          return String.fromCharCode(parseInt($1, 10));
        }
        return function xlml_fixstr2(str) {
          return str.replace(entregex, entrepl);
        };
      }();
      function xlml_unfixstr(str) {
        return str.replace(/(\r\n|[\r\n])/g, "&#10;");
      }
      function parsexmlbool(value) {
        switch (value) {
          case 1:
          case true:
          case "1":
          case "true":
          case "TRUE":
            return true;
          /* case '0': case 'false': case 'FALSE':*/
          default:
            return false;
        }
      }
      function utf8reada(orig) {
        var out = "", i3 = 0, c3 = 0, d3 = 0, e3 = 0, f2 = 0, w3 = 0;
        while (i3 < orig.length) {
          c3 = orig.charCodeAt(i3++);
          if (c3 < 128) {
            out += String.fromCharCode(c3);
            continue;
          }
          d3 = orig.charCodeAt(i3++);
          if (c3 > 191 && c3 < 224) {
            f2 = (c3 & 31) << 6;
            f2 |= d3 & 63;
            out += String.fromCharCode(f2);
            continue;
          }
          e3 = orig.charCodeAt(i3++);
          if (c3 < 240) {
            out += String.fromCharCode((c3 & 15) << 12 | (d3 & 63) << 6 | e3 & 63);
            continue;
          }
          f2 = orig.charCodeAt(i3++);
          w3 = ((c3 & 7) << 18 | (d3 & 63) << 12 | (e3 & 63) << 6 | f2 & 63) - 65536;
          out += String.fromCharCode(55296 + (w3 >>> 10 & 1023));
          out += String.fromCharCode(56320 + (w3 & 1023));
        }
        return out;
      }
      function utf8readb(data) {
        var out = new_raw_buf(2 * data.length), w3, i3, j3 = 1, k3 = 0, ww = 0, c3;
        for (i3 = 0; i3 < data.length; i3 += j3) {
          j3 = 1;
          if ((c3 = data.charCodeAt(i3)) < 128) w3 = c3;
          else if (c3 < 224) {
            w3 = (c3 & 31) * 64 + (data.charCodeAt(i3 + 1) & 63);
            j3 = 2;
          } else if (c3 < 240) {
            w3 = (c3 & 15) * 4096 + (data.charCodeAt(i3 + 1) & 63) * 64 + (data.charCodeAt(i3 + 2) & 63);
            j3 = 3;
          } else {
            j3 = 4;
            w3 = (c3 & 7) * 262144 + (data.charCodeAt(i3 + 1) & 63) * 4096 + (data.charCodeAt(i3 + 2) & 63) * 64 + (data.charCodeAt(i3 + 3) & 63);
            w3 -= 65536;
            ww = 55296 + (w3 >>> 10 & 1023);
            w3 = 56320 + (w3 & 1023);
          }
          if (ww !== 0) {
            out[k3++] = ww & 255;
            out[k3++] = ww >>> 8;
            ww = 0;
          }
          out[k3++] = w3 % 256;
          out[k3++] = w3 >>> 8;
        }
        return out.slice(0, k3).toString("ucs2");
      }
      function utf8readc(data) {
        return Buffer_from(data, "binary").toString("utf8");
      }
      var utf8corpus = "foo bar bazâð£";
      var utf8read = has_buf && (utf8readc(utf8corpus) == utf8reada(utf8corpus) && utf8readc || utf8readb(utf8corpus) == utf8reada(utf8corpus) && utf8readb) || utf8reada;
      var utf8write = has_buf ? function(data) {
        return Buffer_from(data, "utf8").toString("binary");
      } : function(orig) {
        var out = [], i3 = 0, c3 = 0, d3 = 0;
        while (i3 < orig.length) {
          c3 = orig.charCodeAt(i3++);
          switch (true) {
            case c3 < 128:
              out.push(String.fromCharCode(c3));
              break;
            case c3 < 2048:
              out.push(String.fromCharCode(192 + (c3 >> 6)));
              out.push(String.fromCharCode(128 + (c3 & 63)));
              break;
            case (c3 >= 55296 && c3 < 57344):
              c3 -= 55296;
              d3 = orig.charCodeAt(i3++) - 56320 + (c3 << 10);
              out.push(String.fromCharCode(240 + (d3 >> 18 & 7)));
              out.push(String.fromCharCode(144 + (d3 >> 12 & 63)));
              out.push(String.fromCharCode(128 + (d3 >> 6 & 63)));
              out.push(String.fromCharCode(128 + (d3 & 63)));
              break;
            default:
              out.push(String.fromCharCode(224 + (c3 >> 12)));
              out.push(String.fromCharCode(128 + (c3 >> 6 & 63)));
              out.push(String.fromCharCode(128 + (c3 & 63)));
          }
        }
        return out.join("");
      };
      var matchtag = /* @__PURE__ */ function() {
        var mtcache = {};
        return function matchtag2(f2, g2) {
          var t3 = f2 + "|" + (g2 || "");
          if (mtcache[t3]) return mtcache[t3];
          return mtcache[t3] = new RegExp("<(?:\\w+:)?" + f2 + '(?: xml:space="preserve")?(?:[^>]*)>([\\s\\S]*?)</(?:\\w+:)?' + f2 + ">", g2 || "");
        };
      }();
      var htmldecode = function() {
        var entities = [
          ["nbsp", " "],
          ["middot", "·"],
          ["quot", '"'],
          ["apos", "'"],
          ["gt", ">"],
          ["lt", "<"],
          ["amp", "&"]
        ].map(function(x3) {
          return [new RegExp("&" + x3[0] + ";", "ig"), x3[1]];
        });
        return function htmldecode2(str) {
          var o3 = str.replace(/^[\t\n\r ]+/, "").replace(/[\t\n\r ]+$/, "").replace(/>\s+/g, ">").replace(/\s+</g, "<").replace(/[\t\n\r ]+/g, " ").replace(/<\s*[bB][rR]\s*\/?>/g, "\n").replace(/<[^>]*>/g, "");
          for (var i3 = 0; i3 < entities.length; ++i3) o3 = o3.replace(entities[i3][0], entities[i3][1]);
          return o3;
        };
      }();
      var vtregex = /* @__PURE__ */ function() {
        var vt_cache = {};
        return function vt_regex(bt2) {
          if (vt_cache[bt2] !== void 0) return vt_cache[bt2];
          return vt_cache[bt2] = new RegExp("<(?:vt:)?" + bt2 + ">([\\s\\S]*?)</(?:vt:)?" + bt2 + ">", "g");
        };
      }();
      var vtvregex = /<\/?(?:vt:)?variant>/g, vtmregex = /<(?:vt:)([^>]*)>([\s\S]*)</;
      function parseVector(data, opts) {
        var h3 = parsexmltag(data);
        var matches = data.match(vtregex(h3.baseType)) || [];
        var res = [];
        if (matches.length != h3.size) {
          if (opts.WTF) throw new Error("unexpected vector length " + matches.length + " != " + h3.size);
          return res;
        }
        matches.forEach(function(x3) {
          var v3 = x3.replace(vtvregex, "").match(vtmregex);
          if (v3) res.push({ v: utf8read(v3[2]), t: v3[1] });
        });
        return res;
      }
      var wtregex = /(^\s|\s$|\n)/;
      function writetag(f2, g2) {
        return "<" + f2 + (g2.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g2 + "</" + f2 + ">";
      }
      function wxt_helper(h3) {
        return keys(h3).map(function(k3) {
          return " " + k3 + '="' + h3[k3] + '"';
        }).join("");
      }
      function writextag(f2, g2, h3) {
        return "<" + f2 + (h3 != null ? wxt_helper(h3) : "") + (g2 != null ? (g2.match(wtregex) ? ' xml:space="preserve"' : "") + ">" + g2 + "</" + f2 : "/") + ">";
      }
      function write_w3cdtf(d3, t3) {
        try {
          return d3.toISOString().replace(/\.\d*/, "");
        } catch (e3) {
          if (t3) throw e3;
        }
        return "";
      }
      function write_vt(s3, xlsx2) {
        switch (typeof s3) {
          case "string":
            var o3 = writextag("vt:lpwstr", escapexml(s3));
            if (xlsx2) o3 = o3.replace(/&quot;/g, "_x0022_");
            return o3;
          case "number":
            return writextag((s3 | 0) == s3 ? "vt:i4" : "vt:r8", escapexml(String(s3)));
          case "boolean":
            return writextag("vt:bool", s3 ? "true" : "false");
        }
        if (s3 instanceof Date) return writextag("vt:filetime", write_w3cdtf(s3));
        throw new Error("Unable to serialize " + s3);
      }
      function xlml_normalize(d3) {
        if (has_buf && Buffer.isBuffer(d3)) return d3.toString("utf8");
        if (typeof d3 === "string") return d3;
        if (typeof Uint8Array !== "undefined" && d3 instanceof Uint8Array) return utf8read(a2s(ab2a(d3)));
        throw new Error("Bad input format: expected Buffer or string");
      }
      var xlmlregex = /<(\/?)([^\s?><!\/:]*:|)([^\s?<>:\/]+)(?:[\s?:\/][^>]*)?>/mg;
      var XMLNS = {
        CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/metadata/core-properties",
        CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/custom-properties",
        EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/extended-properties",
        CT: "http://schemas.openxmlformats.org/package/2006/content-types",
        RELS: "http://schemas.openxmlformats.org/package/2006/relationships",
        TCMNT: "http://schemas.microsoft.com/office/spreadsheetml/2018/threadedcomments",
        "dc": "http://purl.org/dc/elements/1.1/",
        "dcterms": "http://purl.org/dc/terms/",
        "dcmitype": "http://purl.org/dc/dcmitype/",
        "mx": "http://schemas.microsoft.com/office/mac/excel/2008/main",
        "r": "http://schemas.openxmlformats.org/officeDocument/2006/relationships",
        "sjs": "http://schemas.openxmlformats.org/package/2006/sheetjs/core-properties",
        "vt": "http://schemas.openxmlformats.org/officeDocument/2006/docPropsVTypes",
        "xsi": "http://www.w3.org/2001/XMLSchema-instance",
        "xsd": "http://www.w3.org/2001/XMLSchema"
      };
      var XMLNS_main = [
        "http://schemas.openxmlformats.org/spreadsheetml/2006/main",
        "http://purl.oclc.org/ooxml/spreadsheetml/main",
        "http://schemas.microsoft.com/office/excel/2006/main",
        "http://schemas.microsoft.com/office/excel/2006/2"
      ];
      var XLMLNS = {
        "o": "urn:schemas-microsoft-com:office:office",
        "x": "urn:schemas-microsoft-com:office:excel",
        "ss": "urn:schemas-microsoft-com:office:spreadsheet",
        "dt": "uuid:C2F41010-65B3-11d1-A29F-00AA00C14882",
        "mv": "http://macVmlSchemaUri",
        "v": "urn:schemas-microsoft-com:vml",
        "html": "http://www.w3.org/TR/REC-html40"
      };
      function read_double_le(b3, idx) {
        var s3 = 1 - 2 * (b3[idx + 7] >>> 7);
        var e3 = ((b3[idx + 7] & 127) << 4) + (b3[idx + 6] >>> 4 & 15);
        var m3 = b3[idx + 6] & 15;
        for (var i3 = 5; i3 >= 0; --i3) m3 = m3 * 256 + b3[idx + i3];
        if (e3 == 2047) return m3 == 0 ? s3 * Infinity : NaN;
        if (e3 == 0) e3 = -1022;
        else {
          e3 -= 1023;
          m3 += Math.pow(2, 52);
        }
        return s3 * Math.pow(2, e3 - 52) * m3;
      }
      function write_double_le(b3, v3, idx) {
        var bs = (v3 < 0 || 1 / v3 == -Infinity ? 1 : 0) << 7, e3 = 0, m3 = 0;
        var av = bs ? -v3 : v3;
        if (!isFinite(av)) {
          e3 = 2047;
          m3 = isNaN(v3) ? 26985 : 0;
        } else if (av == 0) e3 = m3 = 0;
        else {
          e3 = Math.floor(Math.log(av) / Math.LN2);
          m3 = av * Math.pow(2, 52 - e3);
          if (e3 <= -1023 && (!isFinite(m3) || m3 < Math.pow(2, 52))) {
            e3 = -1022;
          } else {
            m3 -= Math.pow(2, 52);
            e3 += 1023;
          }
        }
        for (var i3 = 0; i3 <= 5; ++i3, m3 /= 256) b3[idx + i3] = m3 & 255;
        b3[idx + 6] = (e3 & 15) << 4 | m3 & 15;
        b3[idx + 7] = e3 >> 4 | bs;
      }
      var ___toBuffer = function(bufs) {
        var x3 = [], w3 = 10240;
        for (var i3 = 0; i3 < bufs[0].length; ++i3) if (bufs[0][i3]) for (var j3 = 0, L2 = bufs[0][i3].length; j3 < L2; j3 += w3) x3.push.apply(x3, bufs[0][i3].slice(j3, j3 + w3));
        return x3;
      };
      var __toBuffer = has_buf ? function(bufs) {
        return bufs[0].length > 0 && Buffer.isBuffer(bufs[0][0]) ? Buffer.concat(bufs[0].map(function(x3) {
          return Buffer.isBuffer(x3) ? x3 : Buffer_from(x3);
        })) : ___toBuffer(bufs);
      } : ___toBuffer;
      var ___utf16le = function(b3, s3, e3) {
        var ss = [];
        for (var i3 = s3; i3 < e3; i3 += 2) ss.push(String.fromCharCode(__readUInt16LE(b3, i3)));
        return ss.join("").replace(chr0, "");
      };
      var __utf16le = has_buf ? function(b3, s3, e3) {
        if (!Buffer.isBuffer(b3)) return ___utf16le(b3, s3, e3);
        return b3.toString("utf16le", s3, e3).replace(chr0, "");
      } : ___utf16le;
      var ___hexlify = function(b3, s3, l2) {
        var ss = [];
        for (var i3 = s3; i3 < s3 + l2; ++i3) ss.push(("0" + b3[i3].toString(16)).slice(-2));
        return ss.join("");
      };
      var __hexlify = has_buf ? function(b3, s3, l2) {
        return Buffer.isBuffer(b3) ? b3.toString("hex", s3, s3 + l2) : ___hexlify(b3, s3, l2);
      } : ___hexlify;
      var ___utf8 = function(b3, s3, e3) {
        var ss = [];
        for (var i3 = s3; i3 < e3; i3++) ss.push(String.fromCharCode(__readUInt8(b3, i3)));
        return ss.join("");
      };
      var __utf8 = has_buf ? function utf8_b(b3, s3, e3) {
        return Buffer.isBuffer(b3) ? b3.toString("utf8", s3, e3) : ___utf8(b3, s3, e3);
      } : ___utf8;
      var ___lpstr = function(b3, i3) {
        var len = __readUInt32LE(b3, i3);
        return len > 0 ? __utf8(b3, i3 + 4, i3 + 4 + len - 1) : "";
      };
      var __lpstr = ___lpstr;
      var ___cpstr = function(b3, i3) {
        var len = __readUInt32LE(b3, i3);
        return len > 0 ? __utf8(b3, i3 + 4, i3 + 4 + len - 1) : "";
      };
      var __cpstr = ___cpstr;
      var ___lpwstr = function(b3, i3) {
        var len = 2 * __readUInt32LE(b3, i3);
        return len > 0 ? __utf8(b3, i3 + 4, i3 + 4 + len - 1) : "";
      };
      var __lpwstr = ___lpwstr;
      var ___lpp4 = function lpp4_(b3, i3) {
        var len = __readUInt32LE(b3, i3);
        return len > 0 ? __utf16le(b3, i3 + 4, i3 + 4 + len) : "";
      };
      var __lpp4 = ___lpp4;
      var ___8lpp4 = function(b3, i3) {
        var len = __readUInt32LE(b3, i3);
        return len > 0 ? __utf8(b3, i3 + 4, i3 + 4 + len) : "";
      };
      var __8lpp4 = ___8lpp4;
      var ___double = function(b3, idx) {
        return read_double_le(b3, idx);
      };
      var __double = ___double;
      var is_buf = function is_buf_a(a2) {
        return Array.isArray(a2) || typeof Uint8Array !== "undefined" && a2 instanceof Uint8Array;
      };
      if (has_buf) {
        __lpstr = function lpstr_b(b3, i3) {
          if (!Buffer.isBuffer(b3)) return ___lpstr(b3, i3);
          var len = b3.readUInt32LE(i3);
          return len > 0 ? b3.toString("utf8", i3 + 4, i3 + 4 + len - 1) : "";
        };
        __cpstr = function cpstr_b(b3, i3) {
          if (!Buffer.isBuffer(b3)) return ___cpstr(b3, i3);
          var len = b3.readUInt32LE(i3);
          return len > 0 ? b3.toString("utf8", i3 + 4, i3 + 4 + len - 1) : "";
        };
        __lpwstr = function lpwstr_b(b3, i3) {
          if (!Buffer.isBuffer(b3)) return ___lpwstr(b3, i3);
          var len = 2 * b3.readUInt32LE(i3);
          return b3.toString("utf16le", i3 + 4, i3 + 4 + len - 1);
        };
        __lpp4 = function lpp4_b(b3, i3) {
          if (!Buffer.isBuffer(b3)) return ___lpp4(b3, i3);
          var len = b3.readUInt32LE(i3);
          return b3.toString("utf16le", i3 + 4, i3 + 4 + len);
        };
        __8lpp4 = function lpp4_8b(b3, i3) {
          if (!Buffer.isBuffer(b3)) return ___8lpp4(b3, i3);
          var len = b3.readUInt32LE(i3);
          return b3.toString("utf8", i3 + 4, i3 + 4 + len);
        };
        __double = function double_(b3, i3) {
          if (Buffer.isBuffer(b3)) return b3.readDoubleLE(i3);
          return ___double(b3, i3);
        };
        is_buf = function is_buf_b(a2) {
          return Buffer.isBuffer(a2) || Array.isArray(a2) || typeof Uint8Array !== "undefined" && a2 instanceof Uint8Array;
        };
      }
      function cpdoit() {
        __utf16le = function(b3, s3, e3) {
          return $cptable.utils.decode(1200, b3.slice(s3, e3)).replace(chr0, "");
        };
        __utf8 = function(b3, s3, e3) {
          return $cptable.utils.decode(65001, b3.slice(s3, e3));
        };
        __lpstr = function(b3, i3) {
          var len = __readUInt32LE(b3, i3);
          return len > 0 ? $cptable.utils.decode(current_ansi, b3.slice(i3 + 4, i3 + 4 + len - 1)) : "";
        };
        __cpstr = function(b3, i3) {
          var len = __readUInt32LE(b3, i3);
          return len > 0 ? $cptable.utils.decode(current_codepage, b3.slice(i3 + 4, i3 + 4 + len - 1)) : "";
        };
        __lpwstr = function(b3, i3) {
          var len = 2 * __readUInt32LE(b3, i3);
          return len > 0 ? $cptable.utils.decode(1200, b3.slice(i3 + 4, i3 + 4 + len - 1)) : "";
        };
        __lpp4 = function(b3, i3) {
          var len = __readUInt32LE(b3, i3);
          return len > 0 ? $cptable.utils.decode(1200, b3.slice(i3 + 4, i3 + 4 + len)) : "";
        };
        __8lpp4 = function(b3, i3) {
          var len = __readUInt32LE(b3, i3);
          return len > 0 ? $cptable.utils.decode(65001, b3.slice(i3 + 4, i3 + 4 + len)) : "";
        };
      }
      if (typeof $cptable !== "undefined") cpdoit();
      var __readUInt8 = function(b3, idx) {
        return b3[idx];
      };
      var __readUInt16LE = function(b3, idx) {
        return b3[idx + 1] * (1 << 8) + b3[idx];
      };
      var __readInt16LE = function(b3, idx) {
        var u3 = b3[idx + 1] * (1 << 8) + b3[idx];
        return u3 < 32768 ? u3 : (65535 - u3 + 1) * -1;
      };
      var __readUInt32LE = function(b3, idx) {
        return b3[idx + 3] * (1 << 24) + (b3[idx + 2] << 16) + (b3[idx + 1] << 8) + b3[idx];
      };
      var __readInt32LE = function(b3, idx) {
        return b3[idx + 3] << 24 | b3[idx + 2] << 16 | b3[idx + 1] << 8 | b3[idx];
      };
      var __readInt32BE = function(b3, idx) {
        return b3[idx] << 24 | b3[idx + 1] << 16 | b3[idx + 2] << 8 | b3[idx + 3];
      };
      function ReadShift(size, t3) {
        var o3 = "", oI, oR, oo = [], w3, vv, i3, loc;
        switch (t3) {
          case "dbcs":
            loc = this.l;
            if (has_buf && Buffer.isBuffer(this)) o3 = this.slice(this.l, this.l + 2 * size).toString("utf16le");
            else for (i3 = 0; i3 < size; ++i3) {
              o3 += String.fromCharCode(__readUInt16LE(this, loc));
              loc += 2;
            }
            size *= 2;
            break;
          case "utf8":
            o3 = __utf8(this, this.l, this.l + size);
            break;
          case "utf16le":
            size *= 2;
            o3 = __utf16le(this, this.l, this.l + size);
            break;
          case "wstr":
            if (typeof $cptable !== "undefined") o3 = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + 2 * size));
            else return ReadShift.call(this, size, "dbcs");
            size = 2 * size;
            break;
          /* [MS-OLEDS] 2.1.4 LengthPrefixedAnsiString */
          case "lpstr-ansi":
            o3 = __lpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
          case "lpstr-cp":
            o3 = __cpstr(this, this.l);
            size = 4 + __readUInt32LE(this, this.l);
            break;
          /* [MS-OLEDS] 2.1.5 LengthPrefixedUnicodeString */
          case "lpwstr":
            o3 = __lpwstr(this, this.l);
            size = 4 + 2 * __readUInt32LE(this, this.l);
            break;
          /* [MS-OFFCRYPTO] 2.1.2 Length-Prefixed Padded Unicode String (UNICODE-LP-P4) */
          case "lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o3 = __lpp4(this, this.l);
            if (size & 2) size += 2;
            break;
          /* [MS-OFFCRYPTO] 2.1.3 Length-Prefixed UTF-8 String (UTF-8-LP-P4) */
          case "8lpp4":
            size = 4 + __readUInt32LE(this, this.l);
            o3 = __8lpp4(this, this.l);
            if (size & 3) size += 4 - (size & 3);
            break;
          case "cstr":
            size = 0;
            o3 = "";
            while ((w3 = __readUInt8(this, this.l + size++)) !== 0) oo.push(_getchar(w3));
            o3 = oo.join("");
            break;
          case "_wstr":
            size = 0;
            o3 = "";
            while ((w3 = __readUInt16LE(this, this.l + size)) !== 0) {
              oo.push(_getchar(w3));
              size += 2;
            }
            size += 2;
            o3 = oo.join("");
            break;
          /* sbcs and dbcs support continue records in the SST way TODO codepages */
          case "dbcs-cont":
            o3 = "";
            loc = this.l;
            for (i3 = 0; i3 < size; ++i3) {
              if (this.lens && this.lens.indexOf(loc) !== -1) {
                w3 = __readUInt8(this, loc);
                this.l = loc + 1;
                vv = ReadShift.call(this, size - i3, w3 ? "dbcs-cont" : "sbcs-cont");
                return oo.join("") + vv;
              }
              oo.push(_getchar(__readUInt16LE(this, loc)));
              loc += 2;
            }
            o3 = oo.join("");
            size *= 2;
            break;
          case "cpstr":
            if (typeof $cptable !== "undefined") {
              o3 = $cptable.utils.decode(current_codepage, this.slice(this.l, this.l + size));
              break;
            }
          /* falls through */
          case "sbcs-cont":
            o3 = "";
            loc = this.l;
            for (i3 = 0; i3 != size; ++i3) {
              if (this.lens && this.lens.indexOf(loc) !== -1) {
                w3 = __readUInt8(this, loc);
                this.l = loc + 1;
                vv = ReadShift.call(this, size - i3, w3 ? "dbcs-cont" : "sbcs-cont");
                return oo.join("") + vv;
              }
              oo.push(_getchar(__readUInt8(this, loc)));
              loc += 1;
            }
            o3 = oo.join("");
            break;
          default:
            switch (size) {
              case 1:
                oI = __readUInt8(this, this.l);
                this.l++;
                return oI;
              case 2:
                oI = (t3 === "i" ? __readInt16LE : __readUInt16LE)(this, this.l);
                this.l += 2;
                return oI;
              case 4:
              case -4:
                if (t3 === "i" || (this[this.l + 3] & 128) === 0) {
                  oI = (size > 0 ? __readInt32LE : __readInt32BE)(this, this.l);
                  this.l += 4;
                  return oI;
                } else {
                  oR = __readUInt32LE(this, this.l);
                  this.l += 4;
                }
                return oR;
              case 8:
              case -8:
                if (t3 === "f") {
                  if (size == 8) oR = __double(this, this.l);
                  else oR = __double([this[this.l + 7], this[this.l + 6], this[this.l + 5], this[this.l + 4], this[this.l + 3], this[this.l + 2], this[this.l + 1], this[this.l + 0]], 0);
                  this.l += 8;
                  return oR;
                } else size = 8;
              /* falls through */
              case 16:
                o3 = __hexlify(this, this.l, size);
                break;
            }
        }
        this.l += size;
        return o3;
      }
      var __writeUInt32LE = function(b3, val, idx) {
        b3[idx] = val & 255;
        b3[idx + 1] = val >>> 8 & 255;
        b3[idx + 2] = val >>> 16 & 255;
        b3[idx + 3] = val >>> 24 & 255;
      };
      var __writeInt32LE = function(b3, val, idx) {
        b3[idx] = val & 255;
        b3[idx + 1] = val >> 8 & 255;
        b3[idx + 2] = val >> 16 & 255;
        b3[idx + 3] = val >> 24 & 255;
      };
      var __writeUInt16LE = function(b3, val, idx) {
        b3[idx] = val & 255;
        b3[idx + 1] = val >>> 8 & 255;
      };
      function WriteShift(t3, val, f2) {
        var size = 0, i3 = 0;
        if (f2 === "dbcs") {
          for (i3 = 0; i3 != val.length; ++i3) __writeUInt16LE(this, val.charCodeAt(i3), this.l + 2 * i3);
          size = 2 * val.length;
        } else if (f2 === "sbcs") {
          if (typeof $cptable !== "undefined" && current_ansi == 874) {
            for (i3 = 0; i3 != val.length; ++i3) {
              var cppayload = $cptable.utils.encode(current_ansi, val.charAt(i3));
              this[this.l + i3] = cppayload[0];
            }
          } else {
            val = val.replace(/[^\x00-\x7F]/g, "_");
            for (i3 = 0; i3 != val.length; ++i3) this[this.l + i3] = val.charCodeAt(i3) & 255;
          }
          size = val.length;
        } else if (f2 === "hex") {
          for (; i3 < t3; ++i3) {
            this[this.l++] = parseInt(val.slice(2 * i3, 2 * i3 + 2), 16) || 0;
          }
          return this;
        } else if (f2 === "utf16le") {
          var end = Math.min(this.l + t3, this.length);
          for (i3 = 0; i3 < Math.min(val.length, t3); ++i3) {
            var cc = val.charCodeAt(i3);
            this[this.l++] = cc & 255;
            this[this.l++] = cc >> 8;
          }
          while (this.l < end) this[this.l++] = 0;
          return this;
        } else switch (t3) {
          case 1:
            size = 1;
            this[this.l] = val & 255;
            break;
          case 2:
            size = 2;
            this[this.l] = val & 255;
            val >>>= 8;
            this[this.l + 1] = val & 255;
            break;
          case 3:
            size = 3;
            this[this.l] = val & 255;
            val >>>= 8;
            this[this.l + 1] = val & 255;
            val >>>= 8;
            this[this.l + 2] = val & 255;
            break;
          case 4:
            size = 4;
            __writeUInt32LE(this, val, this.l);
            break;
          case 8:
            size = 8;
            if (f2 === "f") {
              write_double_le(this, val, this.l);
              break;
            }
          /* falls through */
          case 16:
            break;
          case -4:
            size = 4;
            __writeInt32LE(this, val, this.l);
            break;
        }
        this.l += size;
        return this;
      }
      function CheckField(hexstr, fld) {
        var m3 = __hexlify(this, this.l, hexstr.length >> 1);
        if (m3 !== hexstr) throw new Error(fld + "Expected " + hexstr + " saw " + m3);
        this.l += hexstr.length >> 1;
      }
      function prep_blob(blob, pos) {
        blob.l = pos;
        blob.read_shift = ReadShift;
        blob.chk = CheckField;
        blob.write_shift = WriteShift;
      }
      function parsenoop(blob, length) {
        blob.l += length;
      }
      function new_buf(sz) {
        var o3 = new_raw_buf(sz);
        prep_blob(o3, 0);
        return o3;
      }
      function recordhopper(data, cb, opts) {
        if (!data) return;
        var tmpbyte, cntbyte, length;
        prep_blob(data, data.l || 0);
        var L2 = data.length, RT = 0, tgt = 0;
        while (data.l < L2) {
          RT = data.read_shift(1);
          if (RT & 128) RT = (RT & 127) + ((data.read_shift(1) & 127) << 7);
          var R2 = XLSBRecordEnum[RT] || XLSBRecordEnum[65535];
          tmpbyte = data.read_shift(1);
          length = tmpbyte & 127;
          for (cntbyte = 1; cntbyte < 4 && tmpbyte & 128; ++cntbyte) length += ((tmpbyte = data.read_shift(1)) & 127) << 7 * cntbyte;
          tgt = data.l + length;
          var d3 = R2.f && R2.f(data, length, opts);
          data.l = tgt;
          if (cb(d3, R2, RT)) return;
        }
      }
      function buf_array() {
        var bufs = [], blksz = has_buf ? 256 : 2048;
        var newblk = function ba_newblk(sz) {
          var o3 = new_buf(sz);
          prep_blob(o3, 0);
          return o3;
        };
        var curbuf = newblk(blksz);
        var endbuf = function ba_endbuf() {
          if (!curbuf) return;
          if (curbuf.length > curbuf.l) {
            curbuf = curbuf.slice(0, curbuf.l);
            curbuf.l = curbuf.length;
          }
          if (curbuf.length > 0) bufs.push(curbuf);
          curbuf = null;
        };
        var next = function ba_next(sz) {
          if (curbuf && sz < curbuf.length - curbuf.l) return curbuf;
          endbuf();
          return curbuf = newblk(Math.max(sz + 1, blksz));
        };
        var end = function ba_end() {
          endbuf();
          return bconcat(bufs);
        };
        var push = function ba_push(buf) {
          endbuf();
          curbuf = buf;
          if (curbuf.l == null) curbuf.l = curbuf.length;
          next(blksz);
        };
        return { next, push, end, _bufs: bufs };
      }
      function write_record(ba2, type, payload, length) {
        var t3 = +type, l2;
        if (isNaN(t3)) return;
        if (!length) length = XLSBRecordEnum[t3].p || (payload || []).length || 0;
        l2 = 1 + (t3 >= 128 ? 1 : 0) + 1;
        if (length >= 128) ++l2;
        if (length >= 16384) ++l2;
        if (length >= 2097152) ++l2;
        var o3 = ba2.next(l2);
        if (t3 <= 127) o3.write_shift(1, t3);
        else {
          o3.write_shift(1, (t3 & 127) + 128);
          o3.write_shift(1, t3 >> 7);
        }
        for (var i3 = 0; i3 != 4; ++i3) {
          if (length >= 128) {
            o3.write_shift(1, (length & 127) + 128);
            length >>= 7;
          } else {
            o3.write_shift(1, length);
            break;
          }
        }
        if (length > 0 && is_buf(payload)) ba2.push(payload);
      }
      function shift_cell_xls(cell, tgt, opts) {
        var out = dup(cell);
        if (tgt.s) {
          if (out.cRel) out.c += tgt.s.c;
          if (out.rRel) out.r += tgt.s.r;
        } else {
          if (out.cRel) out.c += tgt.c;
          if (out.rRel) out.r += tgt.r;
        }
        if (!opts || opts.biff < 12) {
          while (out.c >= 256) out.c -= 256;
          while (out.r >= 65536) out.r -= 65536;
        }
        return out;
      }
      function shift_range_xls(cell, range, opts) {
        var out = dup(cell);
        out.s = shift_cell_xls(out.s, range.s, opts);
        out.e = shift_cell_xls(out.e, range.s, opts);
        return out;
      }
      function encode_cell_xls(c3, biff) {
        if (c3.cRel && c3.c < 0) {
          c3 = dup(c3);
          while (c3.c < 0) c3.c += biff > 8 ? 16384 : 256;
        }
        if (c3.rRel && c3.r < 0) {
          c3 = dup(c3);
          while (c3.r < 0) c3.r += biff > 8 ? 1048576 : biff > 5 ? 65536 : 16384;
        }
        var s3 = encode_cell(c3);
        if (!c3.cRel && c3.cRel != null) s3 = fix_col(s3);
        if (!c3.rRel && c3.rRel != null) s3 = fix_row(s3);
        return s3;
      }
      function encode_range_xls(r3, opts) {
        if (r3.s.r == 0 && !r3.s.rRel) {
          if (r3.e.r == (opts.biff >= 12 ? 1048575 : opts.biff >= 8 ? 65536 : 16384) && !r3.e.rRel) {
            return (r3.s.cRel ? "" : "$") + encode_col(r3.s.c) + ":" + (r3.e.cRel ? "" : "$") + encode_col(r3.e.c);
          }
        }
        if (r3.s.c == 0 && !r3.s.cRel) {
          if (r3.e.c == (opts.biff >= 12 ? 16383 : 255) && !r3.e.cRel) {
            return (r3.s.rRel ? "" : "$") + encode_row(r3.s.r) + ":" + (r3.e.rRel ? "" : "$") + encode_row(r3.e.r);
          }
        }
        return encode_cell_xls(r3.s, opts.biff) + ":" + encode_cell_xls(r3.e, opts.biff);
      }
      function decode_row(rowstr) {
        return parseInt(unfix_row(rowstr), 10) - 1;
      }
      function encode_row(row) {
        return "" + (row + 1);
      }
      function fix_row(cstr) {
        return cstr.replace(/([A-Z]|^)(\d+)$/, "$1$$$2");
      }
      function unfix_row(cstr) {
        return cstr.replace(/\$(\d+)$/, "$1");
      }
      function decode_col(colstr) {
        var c3 = unfix_col(colstr), d3 = 0, i3 = 0;
        for (; i3 !== c3.length; ++i3) d3 = 26 * d3 + c3.charCodeAt(i3) - 64;
        return d3 - 1;
      }
      function encode_col(col) {
        if (col < 0) throw new Error("invalid column " + col);
        var s3 = "";
        for (++col; col; col = Math.floor((col - 1) / 26)) s3 = String.fromCharCode((col - 1) % 26 + 65) + s3;
        return s3;
      }
      function fix_col(cstr) {
        return cstr.replace(/^([A-Z])/, "$$$1");
      }
      function unfix_col(cstr) {
        return cstr.replace(/^\$([A-Z])/, "$1");
      }
      function split_cell(cstr) {
        return cstr.replace(/(\$?[A-Z]*)(\$?\d*)/, "$1,$2").split(",");
      }
      function decode_cell(cstr) {
        var R2 = 0, C2 = 0;
        for (var i3 = 0; i3 < cstr.length; ++i3) {
          var cc = cstr.charCodeAt(i3);
          if (cc >= 48 && cc <= 57) R2 = 10 * R2 + (cc - 48);
          else if (cc >= 65 && cc <= 90) C2 = 26 * C2 + (cc - 64);
        }
        return { c: C2 - 1, r: R2 - 1 };
      }
      function encode_cell(cell) {
        var col = cell.c + 1;
        var s3 = "";
        for (; col; col = (col - 1) / 26 | 0) s3 = String.fromCharCode((col - 1) % 26 + 65) + s3;
        return s3 + (cell.r + 1);
      }
      function decode_range(range) {
        var idx = range.indexOf(":");
        if (idx == -1) return { s: decode_cell(range), e: decode_cell(range) };
        return { s: decode_cell(range.slice(0, idx)), e: decode_cell(range.slice(idx + 1)) };
      }
      function encode_range(cs, ce2) {
        if (typeof ce2 === "undefined" || typeof ce2 === "number") {
          return encode_range(cs.s, cs.e);
        }
        if (typeof cs !== "string") cs = encode_cell(cs);
        if (typeof ce2 !== "string") ce2 = encode_cell(ce2);
        return cs == ce2 ? cs : cs + ":" + ce2;
      }
      function safe_decode_range(range) {
        var o3 = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
        var idx = 0, i3 = 0, cc = 0;
        var len = range.length;
        for (idx = 0; i3 < len; ++i3) {
          if ((cc = range.charCodeAt(i3) - 64) < 1 || cc > 26) break;
          idx = 26 * idx + cc;
        }
        o3.s.c = --idx;
        for (idx = 0; i3 < len; ++i3) {
          if ((cc = range.charCodeAt(i3) - 48) < 0 || cc > 9) break;
          idx = 10 * idx + cc;
        }
        o3.s.r = --idx;
        if (i3 === len || cc != 10) {
          o3.e.c = o3.s.c;
          o3.e.r = o3.s.r;
          return o3;
        }
        ++i3;
        for (idx = 0; i3 != len; ++i3) {
          if ((cc = range.charCodeAt(i3) - 64) < 1 || cc > 26) break;
          idx = 26 * idx + cc;
        }
        o3.e.c = --idx;
        for (idx = 0; i3 != len; ++i3) {
          if ((cc = range.charCodeAt(i3) - 48) < 0 || cc > 9) break;
          idx = 10 * idx + cc;
        }
        o3.e.r = --idx;
        return o3;
      }
      function safe_format_cell(cell, v3) {
        var q2 = cell.t == "d" && v3 instanceof Date;
        if (cell.z != null) try {
          return cell.w = SSF_format(cell.z, q2 ? datenum(v3) : v3);
        } catch (e3) {
        }
        try {
          return cell.w = SSF_format((cell.XF || {}).numFmtId || (q2 ? 14 : 0), q2 ? datenum(v3) : v3);
        } catch (e3) {
          return "" + v3;
        }
      }
      function format_cell(cell, v3, o3) {
        if (cell == null || cell.t == null || cell.t == "z") return "";
        if (cell.w !== void 0) return cell.w;
        if (cell.t == "d" && !cell.z && o3 && o3.dateNF) cell.z = o3.dateNF;
        if (cell.t == "e") return BErr[cell.v] || cell.v;
        if (v3 == void 0) return safe_format_cell(cell, cell.v);
        return safe_format_cell(cell, v3);
      }
      function sheet_to_workbook(sheet, opts) {
        var n3 = opts && opts.sheet ? opts.sheet : "Sheet1";
        var sheets = {};
        sheets[n3] = sheet;
        return { SheetNames: [n3], Sheets: sheets };
      }
      function sheet_add_aoa(_ws, data, opts) {
        var o3 = opts || {};
        var dense = _ws ? Array.isArray(_ws) : o3.dense;
        if (DENSE != null && dense == null) dense = DENSE;
        var ws = _ws || (dense ? [] : {});
        var _R = 0, _C = 0;
        if (ws && o3.origin != null) {
          if (typeof o3.origin == "number") _R = o3.origin;
          else {
            var _origin = typeof o3.origin == "string" ? decode_cell(o3.origin) : o3.origin;
            _R = _origin.r;
            _C = _origin.c;
          }
          if (!ws["!ref"]) ws["!ref"] = "A1:A1";
        }
        var range = { s: { c: 1e7, r: 1e7 }, e: { c: 0, r: 0 } };
        if (ws["!ref"]) {
          var _range = safe_decode_range(ws["!ref"]);
          range.s.c = _range.s.c;
          range.s.r = _range.s.r;
          range.e.c = Math.max(range.e.c, _range.e.c);
          range.e.r = Math.max(range.e.r, _range.e.r);
          if (_R == -1) range.e.r = _R = _range.e.r + 1;
        }
        for (var R2 = 0; R2 != data.length; ++R2) {
          if (!data[R2]) continue;
          if (!Array.isArray(data[R2])) throw new Error("aoa_to_sheet expects an array of arrays");
          for (var C2 = 0; C2 != data[R2].length; ++C2) {
            if (typeof data[R2][C2] === "undefined") continue;
            var cell = { v: data[R2][C2] };
            var __R = _R + R2, __C = _C + C2;
            if (range.s.r > __R) range.s.r = __R;
            if (range.s.c > __C) range.s.c = __C;
            if (range.e.r < __R) range.e.r = __R;
            if (range.e.c < __C) range.e.c = __C;
            if (data[R2][C2] && typeof data[R2][C2] === "object" && !Array.isArray(data[R2][C2]) && !(data[R2][C2] instanceof Date)) cell = data[R2][C2];
            else {
              if (Array.isArray(cell.v)) {
                cell.f = data[R2][C2][1];
                cell.v = cell.v[0];
              }
              if (cell.v === null) {
                if (cell.f) cell.t = "n";
                else if (o3.nullError) {
                  cell.t = "e";
                  cell.v = 0;
                } else if (!o3.sheetStubs) continue;
                else cell.t = "z";
              } else if (typeof cell.v === "number") cell.t = "n";
              else if (typeof cell.v === "boolean") cell.t = "b";
              else if (cell.v instanceof Date) {
                cell.z = o3.dateNF || table_fmt[14];
                if (o3.cellDates) {
                  cell.t = "d";
                  cell.w = SSF_format(cell.z, datenum(cell.v));
                } else {
                  cell.t = "n";
                  cell.v = datenum(cell.v);
                  cell.w = SSF_format(cell.z, cell.v);
                }
              } else cell.t = "s";
            }
            if (dense) {
              if (!ws[__R]) ws[__R] = [];
              if (ws[__R][__C] && ws[__R][__C].z) cell.z = ws[__R][__C].z;
              ws[__R][__C] = cell;
            } else {
              var cell_ref = encode_cell({ c: __C, r: __R });
              if (ws[cell_ref] && ws[cell_ref].z) cell.z = ws[cell_ref].z;
              ws[cell_ref] = cell;
            }
          }
        }
        if (range.s.c < 1e7) ws["!ref"] = encode_range(range);
        return ws;
      }
      function aoa_to_sheet(data, opts) {
        return sheet_add_aoa(null, data, opts);
      }
      function parse_Int32LE(data) {
        return data.read_shift(4, "i");
      }
      function write_UInt32LE(x3, o3) {
        if (!o3) o3 = new_buf(4);
        o3.write_shift(4, x3);
        return o3;
      }
      function parse_XLWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 ? "" : data.read_shift(cchCharacters, "dbcs");
      }
      function write_XLWideString(data, o3) {
        var _null = false;
        if (o3 == null) {
          _null = true;
          o3 = new_buf(4 + 2 * data.length);
        }
        o3.write_shift(4, data.length);
        if (data.length > 0) o3.write_shift(0, data, "dbcs");
        return _null ? o3.slice(0, o3.l) : o3;
      }
      function parse_StrRun(data) {
        return { ich: data.read_shift(2), ifnt: data.read_shift(2) };
      }
      function write_StrRun(run, o3) {
        if (!o3) o3 = new_buf(4);
        o3.write_shift(2, run.ich || 0);
        o3.write_shift(2, run.ifnt || 0);
        return o3;
      }
      function parse_RichStr(data, length) {
        var start = data.l;
        var flags = data.read_shift(1);
        var str = parse_XLWideString(data);
        var rgsStrRun = [];
        var z4 = { t: str, h: str };
        if ((flags & 1) !== 0) {
          var dwSizeStrRun = data.read_shift(4);
          for (var i3 = 0; i3 != dwSizeStrRun; ++i3) rgsStrRun.push(parse_StrRun(data));
          z4.r = rgsStrRun;
        } else z4.r = [{ ich: 0, ifnt: 0 }];
        data.l = start + length;
        return z4;
      }
      function write_RichStr(str, o3) {
        var _null = false;
        if (o3 == null) {
          _null = true;
          o3 = new_buf(15 + 4 * str.t.length);
        }
        o3.write_shift(1, 0);
        write_XLWideString(str.t, o3);
        return _null ? o3.slice(0, o3.l) : o3;
      }
      var parse_BrtCommentText = parse_RichStr;
      function write_BrtCommentText(str, o3) {
        var _null = false;
        if (o3 == null) {
          _null = true;
          o3 = new_buf(23 + 4 * str.t.length);
        }
        o3.write_shift(1, 1);
        write_XLWideString(str.t, o3);
        o3.write_shift(4, 1);
        write_StrRun({ ich: 0, ifnt: 0 }, o3);
        return _null ? o3.slice(0, o3.l) : o3;
      }
      function parse_XLSBCell(data) {
        var col = data.read_shift(4);
        var iStyleRef = data.read_shift(2);
        iStyleRef += data.read_shift(1) << 16;
        data.l++;
        return { c: col, iStyleRef };
      }
      function write_XLSBCell(cell, o3) {
        if (o3 == null) o3 = new_buf(8);
        o3.write_shift(-4, cell.c);
        o3.write_shift(3, cell.iStyleRef || cell.s);
        o3.write_shift(1, 0);
        return o3;
      }
      function parse_XLSBShortCell(data) {
        var iStyleRef = data.read_shift(2);
        iStyleRef += data.read_shift(1) << 16;
        data.l++;
        return { c: -1, iStyleRef };
      }
      function write_XLSBShortCell(cell, o3) {
        if (o3 == null) o3 = new_buf(4);
        o3.write_shift(3, cell.iStyleRef || cell.s);
        o3.write_shift(1, 0);
        return o3;
      }
      var parse_XLSBCodeName = parse_XLWideString;
      var write_XLSBCodeName = write_XLWideString;
      function parse_XLNullableWideString(data) {
        var cchCharacters = data.read_shift(4);
        return cchCharacters === 0 || cchCharacters === 4294967295 ? "" : data.read_shift(cchCharacters, "dbcs");
      }
      function write_XLNullableWideString(data, o3) {
        var _null = false;
        if (o3 == null) {
          _null = true;
          o3 = new_buf(127);
        }
        o3.write_shift(4, data.length > 0 ? data.length : 4294967295);
        if (data.length > 0) o3.write_shift(0, data, "dbcs");
        return _null ? o3.slice(0, o3.l) : o3;
      }
      var parse_XLNameWideString = parse_XLWideString;
      var parse_RelID = parse_XLNullableWideString;
      var write_RelID = write_XLNullableWideString;
      function parse_RkNumber(data) {
        var b3 = data.slice(data.l, data.l + 4);
        var fX100 = b3[0] & 1, fInt = b3[0] & 2;
        data.l += 4;
        var RK = fInt === 0 ? __double([0, 0, 0, 0, b3[0] & 252, b3[1], b3[2], b3[3]], 0) : __readInt32LE(b3, 0) >> 2;
        return fX100 ? RK / 100 : RK;
      }
      function write_RkNumber(data, o3) {
        if (o3 == null) o3 = new_buf(4);
        var fX100 = 0, fInt = 0, d100 = data * 100;
        if (data == (data | 0) && data >= -(1 << 29) && data < 1 << 29) {
          fInt = 1;
        } else if (d100 == (d100 | 0) && d100 >= -(1 << 29) && d100 < 1 << 29) {
          fInt = 1;
          fX100 = 1;
        }
        if (fInt) o3.write_shift(-4, ((fX100 ? d100 : data) << 2) + (fX100 + 2));
        else throw new Error("unsupported RkNumber " + data);
      }
      function parse_RfX(data) {
        var cell = { s: {}, e: {} };
        cell.s.r = data.read_shift(4);
        cell.e.r = data.read_shift(4);
        cell.s.c = data.read_shift(4);
        cell.e.c = data.read_shift(4);
        return cell;
      }
      function write_RfX(r3, o3) {
        if (!o3) o3 = new_buf(16);
        o3.write_shift(4, r3.s.r);
        o3.write_shift(4, r3.e.r);
        o3.write_shift(4, r3.s.c);
        o3.write_shift(4, r3.e.c);
        return o3;
      }
      var parse_UncheckedRfX = parse_RfX;
      var write_UncheckedRfX = write_RfX;
      function parse_Xnum(data) {
        if (data.length - data.l < 8) throw "XLS Xnum Buffer underflow";
        return data.read_shift(8, "f");
      }
      function write_Xnum(data, o3) {
        return (o3 || new_buf(8)).write_shift(8, data, "f");
      }
      function parse_BrtColor(data) {
        var out = {};
        var d3 = data.read_shift(1);
        var xColorType = d3 >>> 1;
        var index = data.read_shift(1);
        var nTS = data.read_shift(2, "i");
        var bR = data.read_shift(1);
        var bG = data.read_shift(1);
        var bB = data.read_shift(1);
        data.l++;
        switch (xColorType) {
          case 0:
            out.auto = 1;
            break;
          case 1:
            out.index = index;
            var icv = XLSIcv[index];
            if (icv) out.rgb = rgb2Hex(icv);
            break;
          case 2:
            out.rgb = rgb2Hex([bR, bG, bB]);
            break;
          case 3:
            out.theme = index;
            break;
        }
        if (nTS != 0) out.tint = nTS > 0 ? nTS / 32767 : nTS / 32768;
        return out;
      }
      function write_BrtColor(color, o3) {
        if (!o3) o3 = new_buf(8);
        if (!color || color.auto) {
          o3.write_shift(4, 0);
          o3.write_shift(4, 0);
          return o3;
        }
        if (color.index != null) {
          o3.write_shift(1, 2);
          o3.write_shift(1, color.index);
        } else if (color.theme != null) {
          o3.write_shift(1, 6);
          o3.write_shift(1, color.theme);
        } else {
          o3.write_shift(1, 5);
          o3.write_shift(1, 0);
        }
        var nTS = color.tint || 0;
        if (nTS > 0) nTS *= 32767;
        else if (nTS < 0) nTS *= 32768;
        o3.write_shift(2, nTS);
        if (!color.rgb || color.theme != null) {
          o3.write_shift(2, 0);
          o3.write_shift(1, 0);
          o3.write_shift(1, 0);
        } else {
          var rgb = color.rgb || "FFFFFF";
          if (typeof rgb == "number") rgb = ("000000" + rgb.toString(16)).slice(-6);
          o3.write_shift(1, parseInt(rgb.slice(0, 2), 16));
          o3.write_shift(1, parseInt(rgb.slice(2, 4), 16));
          o3.write_shift(1, parseInt(rgb.slice(4, 6), 16));
          o3.write_shift(1, 255);
        }
        return o3;
      }
      function parse_FontFlags(data) {
        var d3 = data.read_shift(1);
        data.l++;
        var out = {
          fBold: d3 & 1,
          fItalic: d3 & 2,
          fUnderline: d3 & 4,
          fStrikeout: d3 & 8,
          fOutline: d3 & 16,
          fShadow: d3 & 32,
          fCondense: d3 & 64,
          fExtend: d3 & 128
        };
        return out;
      }
      function write_FontFlags(font, o3) {
        if (!o3) o3 = new_buf(2);
        var grbit = (font.italic ? 2 : 0) | (font.strike ? 8 : 0) | (font.outline ? 16 : 0) | (font.shadow ? 32 : 0) | (font.condense ? 64 : 0) | (font.extend ? 128 : 0);
        o3.write_shift(1, grbit);
        o3.write_shift(1, 0);
        return o3;
      }
      function parse_ClipboardFormatOrString(o3, w3) {
        var ClipFmt = { 2: "BITMAP", 3: "METAFILEPICT", 8: "DIB", 14: "ENHMETAFILE" };
        var m3 = o3.read_shift(4);
        switch (m3) {
          case 0:
            return "";
          case 4294967295:
          case 4294967294:
            return ClipFmt[o3.read_shift(4)] || "";
        }
        if (m3 > 400) throw new Error("Unsupported Clipboard: " + m3.toString(16));
        o3.l -= 4;
        return o3.read_shift(0, w3 == 1 ? "lpstr" : "lpwstr");
      }
      function parse_ClipboardFormatOrAnsiString(o3) {
        return parse_ClipboardFormatOrString(o3, 1);
      }
      function parse_ClipboardFormatOrUnicodeString(o3) {
        return parse_ClipboardFormatOrString(o3, 2);
      }
      var VT_I2 = 2;
      var VT_I4 = 3;
      var VT_BOOL = 11;
      var VT_VARIANT = 12;
      var VT_UI4 = 19;
      var VT_LPSTR = 30;
      var VT_FILETIME = 64;
      var VT_BLOB = 65;
      var VT_CF = 71;
      var VT_VECTOR = 4096;
      var VT_VECTOR_VARIANT = 4108;
      var VT_VECTOR_LPSTR = 4126;
      var VT_STRING = 80;
      var VT_USTR = 81;
      var VT_CUSTOM = [VT_STRING, VT_USTR];
      var DocSummaryPIDDSI = {
        1: { n: "CodePage", t: VT_I2 },
        2: { n: "Category", t: VT_STRING },
        3: { n: "PresentationFormat", t: VT_STRING },
        4: { n: "ByteCount", t: VT_I4 },
        5: { n: "LineCount", t: VT_I4 },
        6: { n: "ParagraphCount", t: VT_I4 },
        7: { n: "SlideCount", t: VT_I4 },
        8: { n: "NoteCount", t: VT_I4 },
        9: { n: "HiddenCount", t: VT_I4 },
        10: { n: "MultimediaClipCount", t: VT_I4 },
        11: { n: "ScaleCrop", t: VT_BOOL },
        12: {
          n: "HeadingPairs",
          t: VT_VECTOR_VARIANT
          /* VT_VECTOR | VT_VARIANT */
        },
        13: {
          n: "TitlesOfParts",
          t: VT_VECTOR_LPSTR
          /* VT_VECTOR | VT_LPSTR */
        },
        14: { n: "Manager", t: VT_STRING },
        15: { n: "Company", t: VT_STRING },
        16: { n: "LinksUpToDate", t: VT_BOOL },
        17: { n: "CharacterCount", t: VT_I4 },
        19: { n: "SharedDoc", t: VT_BOOL },
        22: { n: "HyperlinksChanged", t: VT_BOOL },
        23: { n: "AppVersion", t: VT_I4, p: "version" },
        24: { n: "DigSig", t: VT_BLOB },
        26: { n: "ContentType", t: VT_STRING },
        27: { n: "ContentStatus", t: VT_STRING },
        28: { n: "Language", t: VT_STRING },
        29: { n: "Version", t: VT_STRING },
        255: {},
        /* [MS-OLEPS] 2.18 */
        2147483648: { n: "Locale", t: VT_UI4 },
        2147483651: { n: "Behavior", t: VT_UI4 },
        1919054434: {}
      };
      var SummaryPIDSI = {
        1: { n: "CodePage", t: VT_I2 },
        2: { n: "Title", t: VT_STRING },
        3: { n: "Subject", t: VT_STRING },
        4: { n: "Author", t: VT_STRING },
        5: { n: "Keywords", t: VT_STRING },
        6: { n: "Comments", t: VT_STRING },
        7: { n: "Template", t: VT_STRING },
        8: { n: "LastAuthor", t: VT_STRING },
        9: { n: "RevNumber", t: VT_STRING },
        10: { n: "EditTime", t: VT_FILETIME },
        11: { n: "LastPrinted", t: VT_FILETIME },
        12: { n: "CreatedDate", t: VT_FILETIME },
        13: { n: "ModifiedDate", t: VT_FILETIME },
        14: { n: "PageCount", t: VT_I4 },
        15: { n: "WordCount", t: VT_I4 },
        16: { n: "CharCount", t: VT_I4 },
        17: { n: "Thumbnail", t: VT_CF },
        18: { n: "Application", t: VT_STRING },
        19: { n: "DocSecurity", t: VT_I4 },
        255: {},
        /* [MS-OLEPS] 2.18 */
        2147483648: { n: "Locale", t: VT_UI4 },
        2147483651: { n: "Behavior", t: VT_UI4 },
        1919054434: {}
      };
      var CountryEnum = {
        1: "US",
        // United States
        2: "CA",
        // Canada
        3: "",
        // Latin America (except Brazil)
        7: "RU",
        // Russia
        20: "EG",
        // Egypt
        30: "GR",
        // Greece
        31: "NL",
        // Netherlands
        32: "BE",
        // Belgium
        33: "FR",
        // France
        34: "ES",
        // Spain
        36: "HU",
        // Hungary
        39: "IT",
        // Italy
        41: "CH",
        // Switzerland
        43: "AT",
        // Austria
        44: "GB",
        // United Kingdom
        45: "DK",
        // Denmark
        46: "SE",
        // Sweden
        47: "NO",
        // Norway
        48: "PL",
        // Poland
        49: "DE",
        // Germany
        52: "MX",
        // Mexico
        55: "BR",
        // Brazil
        61: "AU",
        // Australia
        64: "NZ",
        // New Zealand
        66: "TH",
        // Thailand
        81: "JP",
        // Japan
        82: "KR",
        // Korea
        84: "VN",
        // Viet Nam
        86: "CN",
        // China
        90: "TR",
        // Turkey
        105: "JS",
        // Ramastan
        213: "DZ",
        // Algeria
        216: "MA",
        // Morocco
        218: "LY",
        // Libya
        351: "PT",
        // Portugal
        354: "IS",
        // Iceland
        358: "FI",
        // Finland
        420: "CZ",
        // Czech Republic
        886: "TW",
        // Taiwan
        961: "LB",
        // Lebanon
        962: "JO",
        // Jordan
        963: "SY",
        // Syria
        964: "IQ",
        // Iraq
        965: "KW",
        // Kuwait
        966: "SA",
        // Saudi Arabia
        971: "AE",
        // United Arab Emirates
        972: "IL",
        // Israel
        974: "QA",
        // Qatar
        981: "IR",
        // Iran
        65535: "US"
        // United States
      };
      var XLSFillPattern = [
        null,
        "solid",
        "mediumGray",
        "darkGray",
        "lightGray",
        "darkHorizontal",
        "darkVertical",
        "darkDown",
        "darkUp",
        "darkGrid",
        "darkTrellis",
        "lightHorizontal",
        "lightVertical",
        "lightDown",
        "lightUp",
        "lightGrid",
        "lightTrellis",
        "gray125",
        "gray0625"
      ];
      function rgbify(arr) {
        return arr.map(function(x3) {
          return [x3 >> 16 & 255, x3 >> 8 & 255, x3 & 255];
        });
      }
      var _XLSIcv = rgbify([
        /* Color Constants */
        0,
        16777215,
        16711680,
        65280,
        255,
        16776960,
        16711935,
        65535,
        /* Overridable Defaults */
        0,
        16777215,
        16711680,
        65280,
        255,
        16776960,
        16711935,
        65535,
        8388608,
        32768,
        128,
        8421376,
        8388736,
        32896,
        12632256,
        8421504,
        10066431,
        10040166,
        16777164,
        13434879,
        6684774,
        16744576,
        26316,
        13421823,
        128,
        16711935,
        16776960,
        65535,
        8388736,
        8388608,
        32896,
        255,
        52479,
        13434879,
        13434828,
        16777113,
        10079487,
        16751052,
        13408767,
        16764057,
        3368703,
        3394764,
        10079232,
        16763904,
        16750848,
        16737792,
        6710937,
        9868950,
        13158,
        3381606,
        13056,
        3355392,
        10040064,
        10040166,
        3355545,
        3355443,
        /* Other entries to appease BIFF8/12 */
        16777215,
        /* 0x40 icvForeground ?? */
        0,
        /* 0x41 icvBackground ?? */
        0,
        /* 0x42 icvFrame ?? */
        0,
        /* 0x43 icv3D ?? */
        0,
        /* 0x44 icv3DText ?? */
        0,
        /* 0x45 icv3DHilite ?? */
        0,
        /* 0x46 icv3DShadow ?? */
        0,
        /* 0x47 icvHilite ?? */
        0,
        /* 0x48 icvCtlText ?? */
        0,
        /* 0x49 icvCtlScrl ?? */
        0,
        /* 0x4A icvCtlInv ?? */
        0,
        /* 0x4B icvCtlBody ?? */
        0,
        /* 0x4C icvCtlFrame ?? */
        0,
        /* 0x4D icvCtlFore ?? */
        0,
        /* 0x4E icvCtlBack ?? */
        0,
        /* 0x4F icvCtlNeutral */
        0,
        /* 0x50 icvInfoBk ?? */
        0
        /* 0x51 icvInfoText ?? */
      ]);
      var XLSIcv = dup(_XLSIcv);
      var BErr = {
        0: "#NULL!",
        7: "#DIV/0!",
        15: "#VALUE!",
        23: "#REF!",
        29: "#NAME?",
        36: "#NUM!",
        42: "#N/A",
        43: "#GETTING_DATA",
        255: "#WTF?"
      };
      var RBErr = {
        "#NULL!": 0,
        "#DIV/0!": 7,
        "#VALUE!": 15,
        "#REF!": 23,
        "#NAME?": 29,
        "#NUM!": 36,
        "#N/A": 42,
        "#GETTING_DATA": 43,
        "#WTF?": 255
      };
      var ct2type = {
        /* Workbook */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml": "workbooks",
        "application/vnd.ms-excel.sheet.macroEnabled.main+xml": "workbooks",
        "application/vnd.ms-excel.sheet.binary.macroEnabled.main": "workbooks",
        "application/vnd.ms-excel.addin.macroEnabled.main+xml": "workbooks",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml": "workbooks",
        /* Worksheet */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml": "sheets",
        "application/vnd.ms-excel.worksheet": "sheets",
        "application/vnd.ms-excel.binIndexWs": "TODO",
        /* Binary Index */
        /* Chartsheet */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml": "charts",
        "application/vnd.ms-excel.chartsheet": "charts",
        /* Macrosheet */
        "application/vnd.ms-excel.macrosheet+xml": "macros",
        "application/vnd.ms-excel.macrosheet": "macros",
        "application/vnd.ms-excel.intlmacrosheet": "TODO",
        "application/vnd.ms-excel.binIndexMs": "TODO",
        /* Binary Index */
        /* Dialogsheet */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml": "dialogs",
        "application/vnd.ms-excel.dialogsheet": "dialogs",
        /* Shared Strings */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml": "strs",
        "application/vnd.ms-excel.sharedStrings": "strs",
        /* Styles */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml": "styles",
        "application/vnd.ms-excel.styles": "styles",
        /* File Properties */
        "application/vnd.openxmlformats-package.core-properties+xml": "coreprops",
        "application/vnd.openxmlformats-officedocument.custom-properties+xml": "custprops",
        "application/vnd.openxmlformats-officedocument.extended-properties+xml": "extprops",
        /* Custom Data Properties */
        "application/vnd.openxmlformats-officedocument.customXmlProperties+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.customProperty": "TODO",
        /* Comments */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml": "comments",
        "application/vnd.ms-excel.comments": "comments",
        "application/vnd.ms-excel.threadedcomments+xml": "threadedcomments",
        "application/vnd.ms-excel.person+xml": "people",
        /* Metadata (Stock/Geography and Dynamic Array) */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml": "metadata",
        "application/vnd.ms-excel.sheetMetadata": "metadata",
        /* PivotTable */
        "application/vnd.ms-excel.pivotTable": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotTable+xml": "TODO",
        /* Chart Objects */
        "application/vnd.openxmlformats-officedocument.drawingml.chart+xml": "TODO",
        /* Chart Colors */
        "application/vnd.ms-office.chartcolorstyle+xml": "TODO",
        /* Chart Style */
        "application/vnd.ms-office.chartstyle+xml": "TODO",
        /* Chart Advanced */
        "application/vnd.ms-office.chartex+xml": "TODO",
        /* Calculation Chain */
        "application/vnd.ms-excel.calcChain": "calcchains",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.calcChain+xml": "calcchains",
        /* Printer Settings */
        "application/vnd.openxmlformats-officedocument.spreadsheetml.printerSettings": "TODO",
        /* ActiveX */
        "application/vnd.ms-office.activeX": "TODO",
        "application/vnd.ms-office.activeX+xml": "TODO",
        /* Custom Toolbars */
        "application/vnd.ms-excel.attachedToolbars": "TODO",
        /* External Data Connections */
        "application/vnd.ms-excel.connections": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.connections+xml": "TODO",
        /* External Links */
        "application/vnd.ms-excel.externalLink": "links",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.externalLink+xml": "links",
        /* PivotCache */
        "application/vnd.ms-excel.pivotCacheDefinition": "TODO",
        "application/vnd.ms-excel.pivotCacheRecords": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheDefinition+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.pivotCacheRecords+xml": "TODO",
        /* Query Table */
        "application/vnd.ms-excel.queryTable": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.queryTable+xml": "TODO",
        /* Shared Workbook */
        "application/vnd.ms-excel.userNames": "TODO",
        "application/vnd.ms-excel.revisionHeaders": "TODO",
        "application/vnd.ms-excel.revisionLog": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionHeaders+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.revisionLog+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.userNames+xml": "TODO",
        /* Single Cell Table */
        "application/vnd.ms-excel.tableSingleCells": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.tableSingleCells+xml": "TODO",
        /* Slicer */
        "application/vnd.ms-excel.slicer": "TODO",
        "application/vnd.ms-excel.slicerCache": "TODO",
        "application/vnd.ms-excel.slicer+xml": "TODO",
        "application/vnd.ms-excel.slicerCache+xml": "TODO",
        /* Sort Map */
        "application/vnd.ms-excel.wsSortMap": "TODO",
        /* Table */
        "application/vnd.ms-excel.table": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.table+xml": "TODO",
        /* Themes */
        "application/vnd.openxmlformats-officedocument.theme+xml": "themes",
        /* Theme Override */
        "application/vnd.openxmlformats-officedocument.themeOverride+xml": "TODO",
        /* Timeline */
        "application/vnd.ms-excel.Timeline+xml": "TODO",
        /* verify */
        "application/vnd.ms-excel.TimelineCache+xml": "TODO",
        /* verify */
        /* VBA */
        "application/vnd.ms-office.vbaProject": "vba",
        "application/vnd.ms-office.vbaProjectSignature": "TODO",
        /* Volatile Dependencies */
        "application/vnd.ms-office.volatileDependencies": "TODO",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.volatileDependencies+xml": "TODO",
        /* Control Properties */
        "application/vnd.ms-excel.controlproperties+xml": "TODO",
        /* Data Model */
        "application/vnd.openxmlformats-officedocument.model+data": "TODO",
        /* Survey */
        "application/vnd.ms-excel.Survey+xml": "TODO",
        /* Drawing */
        "application/vnd.openxmlformats-officedocument.drawing+xml": "drawings",
        "application/vnd.openxmlformats-officedocument.drawingml.chartshapes+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramColors+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramData+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramLayout+xml": "TODO",
        "application/vnd.openxmlformats-officedocument.drawingml.diagramStyle+xml": "TODO",
        /* VML */
        "application/vnd.openxmlformats-officedocument.vmlDrawing": "TODO",
        "application/vnd.openxmlformats-package.relationships+xml": "rels",
        "application/vnd.openxmlformats-officedocument.oleObject": "TODO",
        /* Image */
        "image/png": "TODO",
        "sheet": "js"
      };
      var CT_LIST = {
        workbooks: {
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet.main+xml",
          xlsm: "application/vnd.ms-excel.sheet.macroEnabled.main+xml",
          xlsb: "application/vnd.ms-excel.sheet.binary.macroEnabled.main",
          xlam: "application/vnd.ms-excel.addin.macroEnabled.main+xml",
          xltx: "application/vnd.openxmlformats-officedocument.spreadsheetml.template.main+xml"
        },
        strs: {
          /* Shared Strings */
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sharedStrings+xml",
          xlsb: "application/vnd.ms-excel.sharedStrings"
        },
        comments: {
          /* Comments */
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.comments+xml",
          xlsb: "application/vnd.ms-excel.comments"
        },
        sheets: {
          /* Worksheet */
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.worksheet+xml",
          xlsb: "application/vnd.ms-excel.worksheet"
        },
        charts: {
          /* Chartsheet */
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.chartsheet+xml",
          xlsb: "application/vnd.ms-excel.chartsheet"
        },
        dialogs: {
          /* Dialogsheet */
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.dialogsheet+xml",
          xlsb: "application/vnd.ms-excel.dialogsheet"
        },
        macros: {
          /* Macrosheet (Excel 4.0 Macros) */
          xlsx: "application/vnd.ms-excel.macrosheet+xml",
          xlsb: "application/vnd.ms-excel.macrosheet"
        },
        metadata: {
          /* Metadata (Stock/Geography and Dynamic Array) */
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.sheetMetadata+xml",
          xlsb: "application/vnd.ms-excel.sheetMetadata"
        },
        styles: {
          /* Styles */
          xlsx: "application/vnd.openxmlformats-officedocument.spreadsheetml.styles+xml",
          xlsb: "application/vnd.ms-excel.styles"
        }
      };
      function new_ct() {
        return {
          workbooks: [],
          sheets: [],
          charts: [],
          dialogs: [],
          macros: [],
          rels: [],
          strs: [],
          comments: [],
          threadedcomments: [],
          links: [],
          coreprops: [],
          extprops: [],
          custprops: [],
          themes: [],
          styles: [],
          calcchains: [],
          vba: [],
          drawings: [],
          metadata: [],
          people: [],
          TODO: [],
          xmlns: ""
        };
      }
      function parse_ct(data) {
        var ct2 = new_ct();
        if (!data || !data.match) return ct2;
        var ctext = {};
        (data.match(tagregex) || []).forEach(function(x3) {
          var y3 = parsexmltag(x3);
          switch (y3[0].replace(nsregex, "<")) {
            case "<?xml":
              break;
            case "<Types":
              ct2.xmlns = y3["xmlns" + (y3[0].match(/<(\w+):/) || ["", ""])[1]];
              break;
            case "<Default":
              ctext[y3.Extension] = y3.ContentType;
              break;
            case "<Override":
              if (ct2[ct2type[y3.ContentType]] !== void 0) ct2[ct2type[y3.ContentType]].push(y3.PartName);
              break;
          }
        });
        if (ct2.xmlns !== XMLNS.CT) throw new Error("Unknown Namespace: " + ct2.xmlns);
        ct2.calcchain = ct2.calcchains.length > 0 ? ct2.calcchains[0] : "";
        ct2.sst = ct2.strs.length > 0 ? ct2.strs[0] : "";
        ct2.style = ct2.styles.length > 0 ? ct2.styles[0] : "";
        ct2.defaults = ctext;
        delete ct2.calcchains;
        return ct2;
      }
      function write_ct(ct2, opts) {
        var type2ct = evert_arr(ct2type);
        var o3 = [], v3;
        o3[o3.length] = XML_HEADER;
        o3[o3.length] = writextag("Types", null, {
          "xmlns": XMLNS.CT,
          "xmlns:xsd": XMLNS.xsd,
          "xmlns:xsi": XMLNS.xsi
        });
        o3 = o3.concat([
          ["xml", "application/xml"],
          ["bin", "application/vnd.ms-excel.sheet.binary.macroEnabled.main"],
          ["vml", "application/vnd.openxmlformats-officedocument.vmlDrawing"],
          ["data", "application/vnd.openxmlformats-officedocument.model+data"],
          /* from test files */
          ["bmp", "image/bmp"],
          ["png", "image/png"],
          ["gif", "image/gif"],
          ["emf", "image/x-emf"],
          ["wmf", "image/x-wmf"],
          ["jpg", "image/jpeg"],
          ["jpeg", "image/jpeg"],
          ["tif", "image/tiff"],
          ["tiff", "image/tiff"],
          ["pdf", "application/pdf"],
          ["rels", "application/vnd.openxmlformats-package.relationships+xml"]
        ].map(function(x3) {
          return writextag("Default", null, { "Extension": x3[0], "ContentType": x3[1] });
        }));
        var f1 = function(w3) {
          if (ct2[w3] && ct2[w3].length > 0) {
            v3 = ct2[w3][0];
            o3[o3.length] = writextag("Override", null, {
              "PartName": (v3[0] == "/" ? "" : "/") + v3,
              "ContentType": CT_LIST[w3][opts.bookType] || CT_LIST[w3]["xlsx"]
            });
          }
        };
        var f2 = function(w3) {
          (ct2[w3] || []).forEach(function(v4) {
            o3[o3.length] = writextag("Override", null, {
              "PartName": (v4[0] == "/" ? "" : "/") + v4,
              "ContentType": CT_LIST[w3][opts.bookType] || CT_LIST[w3]["xlsx"]
            });
          });
        };
        var f3 = function(t3) {
          (ct2[t3] || []).forEach(function(v4) {
            o3[o3.length] = writextag("Override", null, {
              "PartName": (v4[0] == "/" ? "" : "/") + v4,
              "ContentType": type2ct[t3][0]
            });
          });
        };
        f1("workbooks");
        f2("sheets");
        f2("charts");
        f3("themes");
        ["strs", "styles"].forEach(f1);
        ["coreprops", "extprops", "custprops"].forEach(f3);
        f3("vba");
        f3("comments");
        f3("threadedcomments");
        f3("drawings");
        f2("metadata");
        f3("people");
        if (o3.length > 2) {
          o3[o3.length] = "</Types>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      var RELS = {
        WB: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
        SHEET: "http://sheetjs.openxmlformats.org/officeDocument/2006/relationships/officeDocument",
        HLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/hyperlink",
        VML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/vmlDrawing",
        XPATH: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLinkPath",
        XMISS: "http://schemas.microsoft.com/office/2006/relationships/xlExternalLinkPath/xlPathMissing",
        XLINK: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/externalLink",
        CXML: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXml",
        CXMLP: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/customXmlProps",
        CMNT: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/comments",
        CORE_PROPS: "http://schemas.openxmlformats.org/package/2006/relationships/metadata/core-properties",
        EXT_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/extended-properties",
        CUST_PROPS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/custom-properties",
        SST: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sharedStrings",
        STY: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/styles",
        THEME: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/theme",
        CHART: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chart",
        CHARTEX: "http://schemas.microsoft.com/office/2014/relationships/chartEx",
        CS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/chartsheet",
        WS: [
          "http://schemas.openxmlformats.org/officeDocument/2006/relationships/worksheet",
          "http://purl.oclc.org/ooxml/officeDocument/relationships/worksheet"
        ],
        DS: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/dialogsheet",
        MS: "http://schemas.microsoft.com/office/2006/relationships/xlMacrosheet",
        IMG: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/image",
        DRAW: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/drawing",
        XLMETA: "http://schemas.openxmlformats.org/officeDocument/2006/relationships/sheetMetadata",
        TCMNT: "http://schemas.microsoft.com/office/2017/10/relationships/threadedComment",
        PEOPLE: "http://schemas.microsoft.com/office/2017/10/relationships/person",
        VBA: "http://schemas.microsoft.com/office/2006/relationships/vbaProject"
      };
      function get_rels_path(file) {
        var n3 = file.lastIndexOf("/");
        return file.slice(0, n3 + 1) + "_rels/" + file.slice(n3 + 1) + ".rels";
      }
      function parse_rels(data, currentFilePath) {
        var rels = { "!id": {} };
        if (!data) return rels;
        if (currentFilePath.charAt(0) !== "/") {
          currentFilePath = "/" + currentFilePath;
        }
        var hash = {};
        (data.match(tagregex) || []).forEach(function(x3) {
          var y3 = parsexmltag(x3);
          if (y3[0] === "<Relationship") {
            var rel = {};
            rel.Type = y3.Type;
            rel.Target = y3.Target;
            rel.Id = y3.Id;
            if (y3.TargetMode) rel.TargetMode = y3.TargetMode;
            var canonictarget = y3.TargetMode === "External" ? y3.Target : resolve_path(y3.Target, currentFilePath);
            rels[canonictarget] = rel;
            hash[y3.Id] = rel;
          }
        });
        rels["!id"] = hash;
        return rels;
      }
      function write_rels(rels) {
        var o3 = [XML_HEADER, writextag("Relationships", null, {
          //'xmlns:ns0': XMLNS.RELS,
          "xmlns": XMLNS.RELS
        })];
        keys(rels["!id"]).forEach(function(rid) {
          o3[o3.length] = writextag("Relationship", null, rels["!id"][rid]);
        });
        if (o3.length > 2) {
          o3[o3.length] = "</Relationships>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      function add_rels(rels, rId, f2, type, relobj, targetmode) {
        if (!relobj) relobj = {};
        if (!rels["!id"]) rels["!id"] = {};
        if (!rels["!idx"]) rels["!idx"] = 1;
        if (rId < 0) for (rId = rels["!idx"]; rels["!id"]["rId" + rId]; ++rId) {
        }
        rels["!idx"] = rId + 1;
        relobj.Id = "rId" + rId;
        relobj.Type = type;
        relobj.Target = f2;
        if (targetmode) relobj.TargetMode = targetmode;
        else if ([RELS.HLINK, RELS.XPATH, RELS.XMISS].indexOf(relobj.Type) > -1) relobj.TargetMode = "External";
        if (rels["!id"][relobj.Id]) throw new Error("Cannot rewrite rId " + rId);
        rels["!id"][relobj.Id] = relobj;
        rels[("/" + relobj.Target).replace("//", "/")] = relobj;
        return rId;
      }
      var CT_ODS = "application/vnd.oasis.opendocument.spreadsheet";
      function parse_manifest(d3, opts) {
        var str = xlml_normalize(d3);
        var Rn;
        var FEtag;
        while (Rn = xlmlregex.exec(str)) switch (Rn[3]) {
          case "manifest":
            break;
          // 4.2 <manifest:manifest>
          case "file-entry":
            FEtag = parsexmltag(Rn[0], false);
            if (FEtag.path == "/" && FEtag.type !== CT_ODS) throw new Error("This OpenDocument is not a spreadsheet");
            break;
          case "encryption-data":
          // 4.4 <manifest:encryption-data>
          case "algorithm":
          // 4.5 <manifest:algorithm>
          case "start-key-generation":
          // 4.6 <manifest:start-key-generation>
          case "key-derivation":
            throw new Error("Unsupported ODS Encryption");
          default:
            if (opts && opts.WTF) throw Rn;
        }
      }
      function write_manifest(manifest) {
        var o3 = [XML_HEADER];
        o3.push('<manifest:manifest xmlns:manifest="urn:oasis:names:tc:opendocument:xmlns:manifest:1.0" manifest:version="1.2">\n');
        o3.push('  <manifest:file-entry manifest:full-path="/" manifest:version="1.2" manifest:media-type="application/vnd.oasis.opendocument.spreadsheet"/>\n');
        for (var i3 = 0; i3 < manifest.length; ++i3) o3.push('  <manifest:file-entry manifest:full-path="' + manifest[i3][0] + '" manifest:media-type="' + manifest[i3][1] + '"/>\n');
        o3.push("</manifest:manifest>");
        return o3.join("");
      }
      function write_rdf_type(file, res, tag) {
        return [
          '  <rdf:Description rdf:about="' + file + '">\n',
          '    <rdf:type rdf:resource="http://docs.oasis-open.org/ns/office/1.2/meta/' + (tag || "odf") + "#" + res + '"/>\n',
          "  </rdf:Description>\n"
        ].join("");
      }
      function write_rdf_has(base, file) {
        return [
          '  <rdf:Description rdf:about="' + base + '">\n',
          '    <ns0:hasPart xmlns:ns0="http://docs.oasis-open.org/ns/office/1.2/meta/pkg#" rdf:resource="' + file + '"/>\n',
          "  </rdf:Description>\n"
        ].join("");
      }
      function write_rdf(rdf) {
        var o3 = [XML_HEADER];
        o3.push('<rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">\n');
        for (var i3 = 0; i3 != rdf.length; ++i3) {
          o3.push(write_rdf_type(rdf[i3][0], rdf[i3][1]));
          o3.push(write_rdf_has("", rdf[i3][0]));
        }
        o3.push(write_rdf_type("", "Document", "pkg"));
        o3.push("</rdf:RDF>");
        return o3.join("");
      }
      function write_meta_ods() {
        return '<office:document-meta xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:xlink="http://www.w3.org/1999/xlink" office:version="1.2"><office:meta><meta:generator>SheetJS ' + XLSX2.version + "</meta:generator></office:meta></office:document-meta>";
      }
      var CORE_PROPS = [
        ["cp:category", "Category"],
        ["cp:contentStatus", "ContentStatus"],
        ["cp:keywords", "Keywords"],
        ["cp:lastModifiedBy", "LastAuthor"],
        ["cp:lastPrinted", "LastPrinted"],
        ["cp:revision", "RevNumber"],
        ["cp:version", "Version"],
        ["dc:creator", "Author"],
        ["dc:description", "Comments"],
        ["dc:identifier", "Identifier"],
        ["dc:language", "Language"],
        ["dc:subject", "Subject"],
        ["dc:title", "Title"],
        ["dcterms:created", "CreatedDate", "date"],
        ["dcterms:modified", "ModifiedDate", "date"]
      ];
      var CORE_PROPS_REGEX = function() {
        var r3 = new Array(CORE_PROPS.length);
        for (var i3 = 0; i3 < CORE_PROPS.length; ++i3) {
          var f2 = CORE_PROPS[i3];
          var g2 = "(?:" + f2[0].slice(0, f2[0].indexOf(":")) + ":)" + f2[0].slice(f2[0].indexOf(":") + 1);
          r3[i3] = new RegExp("<" + g2 + "[^>]*>([\\s\\S]*?)</" + g2 + ">");
        }
        return r3;
      }();
      function parse_core_props(data) {
        var p3 = {};
        data = utf8read(data);
        for (var i3 = 0; i3 < CORE_PROPS.length; ++i3) {
          var f2 = CORE_PROPS[i3], cur = data.match(CORE_PROPS_REGEX[i3]);
          if (cur != null && cur.length > 0) p3[f2[1]] = unescapexml(cur[1]);
          if (f2[2] === "date" && p3[f2[1]]) p3[f2[1]] = parseDate(p3[f2[1]]);
        }
        return p3;
      }
      function cp_doit(f2, g2, h3, o3, p3) {
        if (p3[f2] != null || g2 == null || g2 === "") return;
        p3[f2] = g2;
        g2 = escapexml(g2);
        o3[o3.length] = h3 ? writextag(f2, g2, h3) : writetag(f2, g2);
      }
      function write_core_props(cp, _opts) {
        var opts = _opts || {};
        var o3 = [XML_HEADER, writextag("cp:coreProperties", null, {
          //'xmlns': XMLNS.CORE_PROPS,
          "xmlns:cp": XMLNS.CORE_PROPS,
          "xmlns:dc": XMLNS.dc,
          "xmlns:dcterms": XMLNS.dcterms,
          "xmlns:dcmitype": XMLNS.dcmitype,
          "xmlns:xsi": XMLNS.xsi
        })], p3 = {};
        if (!cp && !opts.Props) return o3.join("");
        if (cp) {
          if (cp.CreatedDate != null) cp_doit("dcterms:created", typeof cp.CreatedDate === "string" ? cp.CreatedDate : write_w3cdtf(cp.CreatedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o3, p3);
          if (cp.ModifiedDate != null) cp_doit("dcterms:modified", typeof cp.ModifiedDate === "string" ? cp.ModifiedDate : write_w3cdtf(cp.ModifiedDate, opts.WTF), { "xsi:type": "dcterms:W3CDTF" }, o3, p3);
        }
        for (var i3 = 0; i3 != CORE_PROPS.length; ++i3) {
          var f2 = CORE_PROPS[i3];
          var v3 = opts.Props && opts.Props[f2[1]] != null ? opts.Props[f2[1]] : cp ? cp[f2[1]] : null;
          if (v3 === true) v3 = "1";
          else if (v3 === false) v3 = "0";
          else if (typeof v3 == "number") v3 = String(v3);
          if (v3 != null) cp_doit(f2[0], v3, null, o3, p3);
        }
        if (o3.length > 2) {
          o3[o3.length] = "</cp:coreProperties>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      var EXT_PROPS = [
        ["Application", "Application", "string"],
        ["AppVersion", "AppVersion", "string"],
        ["Company", "Company", "string"],
        ["DocSecurity", "DocSecurity", "string"],
        ["Manager", "Manager", "string"],
        ["HyperlinksChanged", "HyperlinksChanged", "bool"],
        ["SharedDoc", "SharedDoc", "bool"],
        ["LinksUpToDate", "LinksUpToDate", "bool"],
        ["ScaleCrop", "ScaleCrop", "bool"],
        ["HeadingPairs", "HeadingPairs", "raw"],
        ["TitlesOfParts", "TitlesOfParts", "raw"]
      ];
      var PseudoPropsPairs = [
        "Worksheets",
        "SheetNames",
        "NamedRanges",
        "DefinedNames",
        "Chartsheets",
        "ChartNames"
      ];
      function load_props_pairs(HP, TOP, props, opts) {
        var v3 = [];
        if (typeof HP == "string") v3 = parseVector(HP, opts);
        else for (var j3 = 0; j3 < HP.length; ++j3) v3 = v3.concat(HP[j3].map(function(hp) {
          return { v: hp };
        }));
        var parts = typeof TOP == "string" ? parseVector(TOP, opts).map(function(x3) {
          return x3.v;
        }) : TOP;
        var idx = 0, len = 0;
        if (parts.length > 0) for (var i3 = 0; i3 !== v3.length; i3 += 2) {
          len = +v3[i3 + 1].v;
          switch (v3[i3].v) {
            case "Worksheets":
            case "工作表":
            case "Листы":
            case "أوراق العمل":
            case "ワークシート":
            case "גליונות עבודה":
            case "Arbeitsblätter":
            case "Çalışma Sayfaları":
            case "Feuilles de calcul":
            case "Fogli di lavoro":
            case "Folhas de cálculo":
            case "Planilhas":
            case "Regneark":
            case "Hojas de cálculo":
            case "Werkbladen":
              props.Worksheets = len;
              props.SheetNames = parts.slice(idx, idx + len);
              break;
            case "Named Ranges":
            case "Rangos con nombre":
            case "名前付き一覧":
            case "Benannte Bereiche":
            case "Navngivne områder":
              props.NamedRanges = len;
              props.DefinedNames = parts.slice(idx, idx + len);
              break;
            case "Charts":
            case "Diagramme":
              props.Chartsheets = len;
              props.ChartNames = parts.slice(idx, idx + len);
              break;
          }
          idx += len;
        }
      }
      function parse_ext_props(data, p3, opts) {
        var q2 = {};
        if (!p3) p3 = {};
        data = utf8read(data);
        EXT_PROPS.forEach(function(f2) {
          var xml = (data.match(matchtag(f2[0])) || [])[1];
          switch (f2[2]) {
            case "string":
              if (xml) p3[f2[1]] = unescapexml(xml);
              break;
            case "bool":
              p3[f2[1]] = xml === "true";
              break;
            case "raw":
              var cur = data.match(new RegExp("<" + f2[0] + "[^>]*>([\\s\\S]*?)</" + f2[0] + ">"));
              if (cur && cur.length > 0) q2[f2[1]] = cur[1];
              break;
          }
        });
        if (q2.HeadingPairs && q2.TitlesOfParts) load_props_pairs(q2.HeadingPairs, q2.TitlesOfParts, p3, opts);
        return p3;
      }
      function write_ext_props(cp) {
        var o3 = [], W3 = writextag;
        if (!cp) cp = {};
        cp.Application = "SheetJS";
        o3[o3.length] = XML_HEADER;
        o3[o3.length] = writextag("Properties", null, {
          "xmlns": XMLNS.EXT_PROPS,
          "xmlns:vt": XMLNS.vt
        });
        EXT_PROPS.forEach(function(f2) {
          if (cp[f2[1]] === void 0) return;
          var v3;
          switch (f2[2]) {
            case "string":
              v3 = escapexml(String(cp[f2[1]]));
              break;
            case "bool":
              v3 = cp[f2[1]] ? "true" : "false";
              break;
          }
          if (v3 !== void 0) o3[o3.length] = W3(f2[0], v3);
        });
        o3[o3.length] = W3("HeadingPairs", W3("vt:vector", W3("vt:variant", "<vt:lpstr>Worksheets</vt:lpstr>") + W3("vt:variant", W3("vt:i4", String(cp.Worksheets))), { size: 2, baseType: "variant" }));
        o3[o3.length] = W3("TitlesOfParts", W3("vt:vector", cp.SheetNames.map(function(s3) {
          return "<vt:lpstr>" + escapexml(s3) + "</vt:lpstr>";
        }).join(""), { size: cp.Worksheets, baseType: "lpstr" }));
        if (o3.length > 2) {
          o3[o3.length] = "</Properties>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      var custregex = /<[^>]+>[^<]*/g;
      function parse_cust_props(data, opts) {
        var p3 = {}, name = "";
        var m3 = data.match(custregex);
        if (m3) for (var i3 = 0; i3 != m3.length; ++i3) {
          var x3 = m3[i3], y3 = parsexmltag(x3);
          switch (y3[0]) {
            case "<?xml":
              break;
            case "<Properties":
              break;
            case "<property":
              name = unescapexml(y3.name);
              break;
            case "</property>":
              name = null;
              break;
            default:
              if (x3.indexOf("<vt:") === 0) {
                var toks = x3.split(">");
                var type = toks[0].slice(4), text = toks[1];
                switch (type) {
                  case "lpstr":
                  case "bstr":
                  case "lpwstr":
                    p3[name] = unescapexml(text);
                    break;
                  case "bool":
                    p3[name] = parsexmlbool(text);
                    break;
                  case "i1":
                  case "i2":
                  case "i4":
                  case "i8":
                  case "int":
                  case "uint":
                    p3[name] = parseInt(text, 10);
                    break;
                  case "r4":
                  case "r8":
                  case "decimal":
                    p3[name] = parseFloat(text);
                    break;
                  case "filetime":
                  case "date":
                    p3[name] = parseDate(text);
                    break;
                  case "cy":
                  case "error":
                    p3[name] = unescapexml(text);
                    break;
                  default:
                    if (type.slice(-1) == "/") break;
                    if (opts.WTF && typeof console !== "undefined") console.warn("Unexpected", x3, type, toks);
                }
              } else if (x3.slice(0, 2) === "</") {
              } else if (opts.WTF) throw new Error(x3);
          }
        }
        return p3;
      }
      function write_cust_props(cp) {
        var o3 = [XML_HEADER, writextag("Properties", null, {
          "xmlns": XMLNS.CUST_PROPS,
          "xmlns:vt": XMLNS.vt
        })];
        if (!cp) return o3.join("");
        var pid = 1;
        keys(cp).forEach(function custprop(k3) {
          ++pid;
          o3[o3.length] = writextag("property", write_vt(cp[k3], true), {
            "fmtid": "{D5CDD505-2E9C-101B-9397-08002B2CF9AE}",
            "pid": pid,
            "name": escapexml(k3)
          });
        });
        if (o3.length > 2) {
          o3[o3.length] = "</Properties>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      var XLMLDocPropsMap = {
        Title: "Title",
        Subject: "Subject",
        Author: "Author",
        Keywords: "Keywords",
        Comments: "Description",
        LastAuthor: "LastAuthor",
        RevNumber: "Revision",
        Application: "AppName",
        /* TotalTime: 'TotalTime', */
        LastPrinted: "LastPrinted",
        CreatedDate: "Created",
        ModifiedDate: "LastSaved",
        /* Pages */
        /* Words */
        /* Characters */
        Category: "Category",
        /* PresentationFormat */
        Manager: "Manager",
        Company: "Company",
        /* Guid */
        /* HyperlinkBase */
        /* Bytes */
        /* Lines */
        /* Paragraphs */
        /* CharactersWithSpaces */
        AppVersion: "Version",
        ContentStatus: "ContentStatus",
        /* NOTE: missing from schema */
        Identifier: "Identifier",
        /* NOTE: missing from schema */
        Language: "Language"
        /* NOTE: missing from schema */
      };
      var evert_XLMLDPM;
      function xlml_set_prop(Props, tag, val) {
        if (!evert_XLMLDPM) evert_XLMLDPM = evert(XLMLDocPropsMap);
        tag = evert_XLMLDPM[tag] || tag;
        Props[tag] = val;
      }
      function xlml_write_docprops(Props, opts) {
        var o3 = [];
        keys(XLMLDocPropsMap).map(function(m3) {
          for (var i3 = 0; i3 < CORE_PROPS.length; ++i3) if (CORE_PROPS[i3][1] == m3) return CORE_PROPS[i3];
          for (i3 = 0; i3 < EXT_PROPS.length; ++i3) if (EXT_PROPS[i3][1] == m3) return EXT_PROPS[i3];
          throw m3;
        }).forEach(function(p3) {
          if (Props[p3[1]] == null) return;
          var m3 = opts && opts.Props && opts.Props[p3[1]] != null ? opts.Props[p3[1]] : Props[p3[1]];
          switch (p3[2]) {
            case "date":
              m3 = new Date(m3).toISOString().replace(/\.\d*Z/, "Z");
              break;
          }
          if (typeof m3 == "number") m3 = String(m3);
          else if (m3 === true || m3 === false) {
            m3 = m3 ? "1" : "0";
          } else if (m3 instanceof Date) m3 = new Date(m3).toISOString().replace(/\.\d*Z/, "");
          o3.push(writetag(XLMLDocPropsMap[p3[1]] || p3[1], m3));
        });
        return writextag("DocumentProperties", o3.join(""), { xmlns: XLMLNS.o });
      }
      function xlml_write_custprops(Props, Custprops) {
        var BLACKLIST = ["Worksheets", "SheetNames"];
        var T3 = "CustomDocumentProperties";
        var o3 = [];
        if (Props) keys(Props).forEach(function(k3) {
          if (!Object.prototype.hasOwnProperty.call(Props, k3)) return;
          for (var i3 = 0; i3 < CORE_PROPS.length; ++i3) if (k3 == CORE_PROPS[i3][1]) return;
          for (i3 = 0; i3 < EXT_PROPS.length; ++i3) if (k3 == EXT_PROPS[i3][1]) return;
          for (i3 = 0; i3 < BLACKLIST.length; ++i3) if (k3 == BLACKLIST[i3]) return;
          var m3 = Props[k3];
          var t3 = "string";
          if (typeof m3 == "number") {
            t3 = "float";
            m3 = String(m3);
          } else if (m3 === true || m3 === false) {
            t3 = "boolean";
            m3 = m3 ? "1" : "0";
          } else m3 = String(m3);
          o3.push(writextag(escapexmltag(k3), m3, { "dt:dt": t3 }));
        });
        if (Custprops) keys(Custprops).forEach(function(k3) {
          if (!Object.prototype.hasOwnProperty.call(Custprops, k3)) return;
          if (Props && Object.prototype.hasOwnProperty.call(Props, k3)) return;
          var m3 = Custprops[k3];
          var t3 = "string";
          if (typeof m3 == "number") {
            t3 = "float";
            m3 = String(m3);
          } else if (m3 === true || m3 === false) {
            t3 = "boolean";
            m3 = m3 ? "1" : "0";
          } else if (m3 instanceof Date) {
            t3 = "dateTime.tz";
            m3 = m3.toISOString();
          } else m3 = String(m3);
          o3.push(writextag(escapexmltag(k3), m3, { "dt:dt": t3 }));
        });
        return "<" + T3 + ' xmlns="' + XLMLNS.o + '">' + o3.join("") + "</" + T3 + ">";
      }
      function parse_FILETIME(blob) {
        var dwLowDateTime = blob.read_shift(4), dwHighDateTime = blob.read_shift(4);
        return new Date((dwHighDateTime / 1e7 * Math.pow(2, 32) + dwLowDateTime / 1e7 - 11644473600) * 1e3).toISOString().replace(/\.000/, "");
      }
      function write_FILETIME(time) {
        var date = typeof time == "string" ? new Date(Date.parse(time)) : time;
        var t3 = date.getTime() / 1e3 + 11644473600;
        var l2 = t3 % Math.pow(2, 32), h3 = (t3 - l2) / Math.pow(2, 32);
        l2 *= 1e7;
        h3 *= 1e7;
        var w3 = l2 / Math.pow(2, 32) | 0;
        if (w3 > 0) {
          l2 = l2 % Math.pow(2, 32);
          h3 += w3;
        }
        var o3 = new_buf(8);
        o3.write_shift(4, l2);
        o3.write_shift(4, h3);
        return o3;
      }
      function parse_lpstr(blob, type, pad) {
        var start = blob.l;
        var str = blob.read_shift(0, "lpstr-cp");
        if (pad) while (blob.l - start & 3) ++blob.l;
        return str;
      }
      function parse_lpwstr(blob, type, pad) {
        var str = blob.read_shift(0, "lpwstr");
        if (pad) blob.l += 4 - (str.length + 1 & 3) & 3;
        return str;
      }
      function parse_VtStringBase(blob, stringType, pad) {
        if (stringType === 31) return parse_lpwstr(blob);
        return parse_lpstr(blob, stringType, pad);
      }
      function parse_VtString(blob, t3, pad) {
        return parse_VtStringBase(blob, t3, pad === false ? 0 : 4);
      }
      function parse_VtUnalignedString(blob, t3) {
        if (!t3) throw new Error("VtUnalignedString must have positive length");
        return parse_VtStringBase(blob, t3, 0);
      }
      function parse_VtVecLpwstrValue(blob) {
        var length = blob.read_shift(4);
        var ret = [];
        for (var i3 = 0; i3 != length; ++i3) {
          var start = blob.l;
          ret[i3] = blob.read_shift(0, "lpwstr").replace(chr0, "");
          if (blob.l - start & 2) blob.l += 2;
        }
        return ret;
      }
      function parse_VtVecUnalignedLpstrValue(blob) {
        var length = blob.read_shift(4);
        var ret = [];
        for (var i3 = 0; i3 != length; ++i3) ret[i3] = blob.read_shift(0, "lpstr-cp").replace(chr0, "");
        return ret;
      }
      function parse_VtHeadingPair(blob) {
        var start = blob.l;
        var headingString = parse_TypedPropertyValue(blob, VT_USTR);
        if (blob[blob.l] == 0 && blob[blob.l + 1] == 0 && blob.l - start & 2) blob.l += 2;
        var headerParts = parse_TypedPropertyValue(blob, VT_I4);
        return [headingString, headerParts];
      }
      function parse_VtVecHeadingPairValue(blob) {
        var cElements = blob.read_shift(4);
        var out = [];
        for (var i3 = 0; i3 < cElements / 2; ++i3) out.push(parse_VtHeadingPair(blob));
        return out;
      }
      function parse_dictionary(blob, CodePage) {
        var cnt = blob.read_shift(4);
        var dict = {};
        for (var j3 = 0; j3 != cnt; ++j3) {
          var pid = blob.read_shift(4);
          var len = blob.read_shift(4);
          dict[pid] = blob.read_shift(len, CodePage === 1200 ? "utf16le" : "utf8").replace(chr0, "").replace(chr1, "!");
          if (CodePage === 1200 && len % 2) blob.l += 2;
        }
        if (blob.l & 3) blob.l = blob.l >> 2 + 1 << 2;
        return dict;
      }
      function parse_BLOB(blob) {
        var size = blob.read_shift(4);
        var bytes = blob.slice(blob.l, blob.l + size);
        blob.l += size;
        if ((size & 3) > 0) blob.l += 4 - (size & 3) & 3;
        return bytes;
      }
      function parse_ClipboardData(blob) {
        var o3 = {};
        o3.Size = blob.read_shift(4);
        blob.l += o3.Size + 3 - (o3.Size - 1) % 4;
        return o3;
      }
      function parse_TypedPropertyValue(blob, type, _opts) {
        var t3 = blob.read_shift(2), ret, opts = _opts || {};
        blob.l += 2;
        if (type !== VT_VARIANT) {
          if (t3 !== type && VT_CUSTOM.indexOf(type) === -1 && !((type & 65534) == 4126 && (t3 & 65534) == 4126)) throw new Error("Expected type " + type + " saw " + t3);
        }
        switch (type === VT_VARIANT ? t3 : type) {
          case 2:
            ret = blob.read_shift(2, "i");
            if (!opts.raw) blob.l += 2;
            return ret;
          case 3:
            ret = blob.read_shift(4, "i");
            return ret;
          case 11:
            return blob.read_shift(4) !== 0;
          case 19:
            ret = blob.read_shift(4);
            return ret;
          case 30:
            return parse_lpstr(blob, t3, 4).replace(chr0, "");
          case 31:
            return parse_lpwstr(blob);
          case 64:
            return parse_FILETIME(blob);
          case 65:
            return parse_BLOB(blob);
          case 71:
            return parse_ClipboardData(blob);
          case 80:
            return parse_VtString(blob, t3, !opts.raw).replace(chr0, "");
          case 81:
            return parse_VtUnalignedString(
              blob,
              t3
              /*, 4*/
            ).replace(chr0, "");
          case 4108:
            return parse_VtVecHeadingPairValue(blob);
          case 4126:
          case 4127:
            return t3 == 4127 ? parse_VtVecLpwstrValue(blob) : parse_VtVecUnalignedLpstrValue(blob);
          default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + t3);
        }
      }
      function write_TypedPropertyValue(type, value) {
        var o3 = new_buf(4), p3 = new_buf(4);
        o3.write_shift(4, type == 80 ? 31 : type);
        switch (type) {
          case 3:
            p3.write_shift(-4, value);
            break;
          case 5:
            p3 = new_buf(8);
            p3.write_shift(8, value, "f");
            break;
          case 11:
            p3.write_shift(4, value ? 1 : 0);
            break;
          case 64:
            p3 = write_FILETIME(value);
            break;
          case 31:
          case 80:
            p3 = new_buf(4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            p3.write_shift(4, value.length + 1);
            p3.write_shift(0, value, "dbcs");
            while (p3.l != p3.length) p3.write_shift(1, 0);
            break;
          default:
            throw new Error("TypedPropertyValue unrecognized type " + type + " " + value);
        }
        return bconcat([o3, p3]);
      }
      function parse_PropertySet(blob, PIDSI) {
        var start_addr = blob.l;
        var size = blob.read_shift(4);
        var NumProps = blob.read_shift(4);
        var Props = [], i3 = 0;
        var CodePage = 0;
        var Dictionary = -1, DictObj = {};
        for (i3 = 0; i3 != NumProps; ++i3) {
          var PropID = blob.read_shift(4);
          var Offset = blob.read_shift(4);
          Props[i3] = [PropID, Offset + start_addr];
        }
        Props.sort(function(x3, y3) {
          return x3[1] - y3[1];
        });
        var PropH = {};
        for (i3 = 0; i3 != NumProps; ++i3) {
          if (blob.l !== Props[i3][1]) {
            var fail = true;
            if (i3 > 0 && PIDSI) switch (PIDSI[Props[i3 - 1][0]].t) {
              case 2:
                if (blob.l + 2 === Props[i3][1]) {
                  blob.l += 2;
                  fail = false;
                }
                break;
              case 80:
                if (blob.l <= Props[i3][1]) {
                  blob.l = Props[i3][1];
                  fail = false;
                }
                break;
              case 4108:
                if (blob.l <= Props[i3][1]) {
                  blob.l = Props[i3][1];
                  fail = false;
                }
                break;
            }
            if ((!PIDSI || i3 == 0) && blob.l <= Props[i3][1]) {
              fail = false;
              blob.l = Props[i3][1];
            }
            if (fail) throw new Error("Read Error: Expected address " + Props[i3][1] + " at " + blob.l + " :" + i3);
          }
          if (PIDSI) {
            var piddsi = PIDSI[Props[i3][0]];
            PropH[piddsi.n] = parse_TypedPropertyValue(blob, piddsi.t, { raw: true });
            if (piddsi.p === "version") PropH[piddsi.n] = String(PropH[piddsi.n] >> 16) + "." + ("0000" + String(PropH[piddsi.n] & 65535)).slice(-4);
            if (piddsi.n == "CodePage") switch (PropH[piddsi.n]) {
              case 0:
                PropH[piddsi.n] = 1252;
              /* falls through */
              case 874:
              case 932:
              case 936:
              case 949:
              case 950:
              case 1250:
              case 1251:
              case 1253:
              case 1254:
              case 1255:
              case 1256:
              case 1257:
              case 1258:
              case 1e4:
              case 1200:
              case 1201:
              case 1252:
              case 65e3:
              case -536:
              case 65001:
              case -535:
                set_cp(CodePage = PropH[piddsi.n] >>> 0 & 65535);
                break;
              default:
                throw new Error("Unsupported CodePage: " + PropH[piddsi.n]);
            }
          } else {
            if (Props[i3][0] === 1) {
              CodePage = PropH.CodePage = parse_TypedPropertyValue(blob, VT_I2);
              set_cp(CodePage);
              if (Dictionary !== -1) {
                var oldpos = blob.l;
                blob.l = Props[Dictionary][1];
                DictObj = parse_dictionary(blob, CodePage);
                blob.l = oldpos;
              }
            } else if (Props[i3][0] === 0) {
              if (CodePage === 0) {
                Dictionary = i3;
                blob.l = Props[i3 + 1][1];
                continue;
              }
              DictObj = parse_dictionary(blob, CodePage);
            } else {
              var name = DictObj[Props[i3][0]];
              var val;
              switch (blob[blob.l]) {
                case 65:
                  blob.l += 4;
                  val = parse_BLOB(blob);
                  break;
                case 30:
                  blob.l += 4;
                  val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                  break;
                case 31:
                  blob.l += 4;
                  val = parse_VtString(blob, blob[blob.l - 4]).replace(/\u0000+$/, "");
                  break;
                case 3:
                  blob.l += 4;
                  val = blob.read_shift(4, "i");
                  break;
                case 19:
                  blob.l += 4;
                  val = blob.read_shift(4);
                  break;
                case 5:
                  blob.l += 4;
                  val = blob.read_shift(8, "f");
                  break;
                case 11:
                  blob.l += 4;
                  val = parsebool(blob, 4);
                  break;
                case 64:
                  blob.l += 4;
                  val = parseDate(parse_FILETIME(blob));
                  break;
                default:
                  throw new Error("unparsed value: " + blob[blob.l]);
              }
              PropH[name] = val;
            }
          }
        }
        blob.l = start_addr + size;
        return PropH;
      }
      var XLSPSSkip = ["CodePage", "Thumbnail", "_PID_LINKBASE", "_PID_HLINKS", "SystemIdentifier", "FMTID"];
      function guess_property_type(val) {
        switch (typeof val) {
          case "boolean":
            return 11;
          case "number":
            return (val | 0) == val ? 3 : 5;
          case "string":
            return 31;
          case "object":
            if (val instanceof Date) return 64;
            break;
        }
        return -1;
      }
      function write_PropertySet(entries, RE, PIDSI) {
        var hdr = new_buf(8), piao = [], prop = [];
        var sz = 8, i3 = 0;
        var pr2 = new_buf(8), pio = new_buf(8);
        pr2.write_shift(4, 2);
        pr2.write_shift(4, 1200);
        pio.write_shift(4, 1);
        prop.push(pr2);
        piao.push(pio);
        sz += 8 + pr2.length;
        if (!RE) {
          pio = new_buf(8);
          pio.write_shift(4, 0);
          piao.unshift(pio);
          var bufs = [new_buf(4)];
          bufs[0].write_shift(4, entries.length);
          for (i3 = 0; i3 < entries.length; ++i3) {
            var value = entries[i3][0];
            pr2 = new_buf(4 + 4 + 2 * (value.length + 1) + (value.length % 2 ? 0 : 2));
            pr2.write_shift(4, i3 + 2);
            pr2.write_shift(4, value.length + 1);
            pr2.write_shift(0, value, "dbcs");
            while (pr2.l != pr2.length) pr2.write_shift(1, 0);
            bufs.push(pr2);
          }
          pr2 = bconcat(bufs);
          prop.unshift(pr2);
          sz += 8 + pr2.length;
        }
        for (i3 = 0; i3 < entries.length; ++i3) {
          if (RE && !RE[entries[i3][0]]) continue;
          if (XLSPSSkip.indexOf(entries[i3][0]) > -1 || PseudoPropsPairs.indexOf(entries[i3][0]) > -1) continue;
          if (entries[i3][1] == null) continue;
          var val = entries[i3][1], idx = 0;
          if (RE) {
            idx = +RE[entries[i3][0]];
            var pinfo = PIDSI[idx];
            if (pinfo.p == "version" && typeof val == "string") {
              var arr = val.split(".");
              val = (+arr[0] << 16) + (+arr[1] || 0);
            }
            pr2 = write_TypedPropertyValue(pinfo.t, val);
          } else {
            var T3 = guess_property_type(val);
            if (T3 == -1) {
              T3 = 31;
              val = String(val);
            }
            pr2 = write_TypedPropertyValue(T3, val);
          }
          prop.push(pr2);
          pio = new_buf(8);
          pio.write_shift(4, !RE ? 2 + i3 : idx);
          piao.push(pio);
          sz += 8 + pr2.length;
        }
        var w3 = 8 * (prop.length + 1);
        for (i3 = 0; i3 < prop.length; ++i3) {
          piao[i3].write_shift(4, w3);
          w3 += prop[i3].length;
        }
        hdr.write_shift(4, sz);
        hdr.write_shift(4, prop.length);
        return bconcat([hdr].concat(piao).concat(prop));
      }
      function parse_PropertySetStream(file, PIDSI, clsid) {
        var blob = file.content;
        if (!blob) return {};
        prep_blob(blob, 0);
        var NumSets, FMTID0, FMTID1, Offset0, Offset1 = 0;
        blob.chk("feff", "Byte Order: ");
        blob.read_shift(2);
        var SystemIdentifier = blob.read_shift(4);
        var CLSID = blob.read_shift(16);
        if (CLSID !== CFB.utils.consts.HEADER_CLSID && CLSID !== clsid) throw new Error("Bad PropertySet CLSID " + CLSID);
        NumSets = blob.read_shift(4);
        if (NumSets !== 1 && NumSets !== 2) throw new Error("Unrecognized #Sets: " + NumSets);
        FMTID0 = blob.read_shift(16);
        Offset0 = blob.read_shift(4);
        if (NumSets === 1 && Offset0 !== blob.l) throw new Error("Length mismatch: " + Offset0 + " !== " + blob.l);
        else if (NumSets === 2) {
          FMTID1 = blob.read_shift(16);
          Offset1 = blob.read_shift(4);
        }
        var PSet0 = parse_PropertySet(blob, PIDSI);
        var rval = { SystemIdentifier };
        for (var y3 in PSet0) rval[y3] = PSet0[y3];
        rval.FMTID = FMTID0;
        if (NumSets === 1) return rval;
        if (Offset1 - blob.l == 2) blob.l += 2;
        if (blob.l !== Offset1) throw new Error("Length mismatch 2: " + blob.l + " !== " + Offset1);
        var PSet1;
        try {
          PSet1 = parse_PropertySet(blob, null);
        } catch (e3) {
        }
        for (y3 in PSet1) rval[y3] = PSet1[y3];
        rval.FMTID = [FMTID0, FMTID1];
        return rval;
      }
      function write_PropertySetStream(entries, clsid, RE, PIDSI, entries2, clsid2) {
        var hdr = new_buf(entries2 ? 68 : 48);
        var bufs = [hdr];
        hdr.write_shift(2, 65534);
        hdr.write_shift(2, 0);
        hdr.write_shift(4, 842412599);
        hdr.write_shift(16, CFB.utils.consts.HEADER_CLSID, "hex");
        hdr.write_shift(4, entries2 ? 2 : 1);
        hdr.write_shift(16, clsid, "hex");
        hdr.write_shift(4, entries2 ? 68 : 48);
        var ps0 = write_PropertySet(entries, RE, PIDSI);
        bufs.push(ps0);
        if (entries2) {
          var ps1 = write_PropertySet(entries2, null, null);
          hdr.write_shift(16, clsid2, "hex");
          hdr.write_shift(4, 68 + ps0.length);
          bufs.push(ps1);
        }
        return bconcat(bufs);
      }
      function parsenoop2(blob, length) {
        blob.read_shift(length);
        return null;
      }
      function writezeroes(n3, o3) {
        if (!o3) o3 = new_buf(n3);
        for (var j3 = 0; j3 < n3; ++j3) o3.write_shift(1, 0);
        return o3;
      }
      function parslurp(blob, length, cb) {
        var arr = [], target = blob.l + length;
        while (blob.l < target) arr.push(cb(blob, target - blob.l));
        if (target !== blob.l) throw new Error("Slurp error");
        return arr;
      }
      function parsebool(blob, length) {
        return blob.read_shift(length) === 1;
      }
      function writebool(v3, o3) {
        if (!o3) o3 = new_buf(2);
        o3.write_shift(2, +!!v3);
        return o3;
      }
      function parseuint16(blob) {
        return blob.read_shift(2, "u");
      }
      function writeuint16(v3, o3) {
        if (!o3) o3 = new_buf(2);
        o3.write_shift(2, v3);
        return o3;
      }
      function parseuint16a(blob, length) {
        return parslurp(blob, length, parseuint16);
      }
      function parse_Bes(blob) {
        var v3 = blob.read_shift(1), t3 = blob.read_shift(1);
        return t3 === 1 ? v3 : v3 === 1;
      }
      function write_Bes(v3, t3, o3) {
        if (!o3) o3 = new_buf(2);
        o3.write_shift(1, t3 == "e" ? +v3 : +!!v3);
        o3.write_shift(1, t3 == "e" ? 1 : 0);
        return o3;
      }
      function parse_ShortXLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(opts && opts.biff >= 12 ? 2 : 1);
        var encoding = "sbcs-cont";
        var cp = current_codepage;
        if (opts && opts.biff >= 8) current_codepage = 1200;
        if (!opts || opts.biff == 8) {
          var fHighByte = blob.read_shift(1);
          if (fHighByte) {
            encoding = "dbcs-cont";
          }
        } else if (opts.biff == 12) {
          encoding = "wstr";
        }
        if (opts.biff >= 2 && opts.biff <= 5) encoding = "cpstr";
        var o3 = cch ? blob.read_shift(cch, encoding) : "";
        current_codepage = cp;
        return o3;
      }
      function parse_XLUnicodeRichExtendedString(blob) {
        var cp = current_codepage;
        current_codepage = 1200;
        var cch = blob.read_shift(2), flags = blob.read_shift(1);
        var fExtSt = flags & 4, fRichSt = flags & 8;
        var width = 1 + (flags & 1);
        var cRun = 0, cbExtRst;
        var z4 = {};
        if (fRichSt) cRun = blob.read_shift(2);
        if (fExtSt) cbExtRst = blob.read_shift(4);
        var encoding = width == 2 ? "dbcs-cont" : "sbcs-cont";
        var msg = cch === 0 ? "" : blob.read_shift(cch, encoding);
        if (fRichSt) blob.l += 4 * cRun;
        if (fExtSt) blob.l += cbExtRst;
        z4.t = msg;
        if (!fRichSt) {
          z4.raw = "<t>" + z4.t + "</t>";
          z4.r = z4.t;
        }
        current_codepage = cp;
        return z4;
      }
      function write_XLUnicodeRichExtendedString(xlstr) {
        var str = xlstr.t || "", nfmts = 1;
        var hdr = new_buf(3 + (nfmts > 1 ? 2 : 0));
        hdr.write_shift(2, str.length);
        hdr.write_shift(1, (nfmts > 1 ? 8 : 0) | 1);
        if (nfmts > 1) hdr.write_shift(2, nfmts);
        var otext = new_buf(2 * str.length);
        otext.write_shift(2 * str.length, str, "utf16le");
        var out = [hdr, otext];
        return bconcat(out);
      }
      function parse_XLUnicodeStringNoCch(blob, cch, opts) {
        var retval;
        if (opts) {
          if (opts.biff >= 2 && opts.biff <= 5) return blob.read_shift(cch, "cpstr");
          if (opts.biff >= 12) return blob.read_shift(cch, "dbcs-cont");
        }
        var fHighByte = blob.read_shift(1);
        if (fHighByte === 0) {
          retval = blob.read_shift(cch, "sbcs-cont");
        } else {
          retval = blob.read_shift(cch, "dbcs-cont");
        }
        return retval;
      }
      function parse_XLUnicodeString(blob, length, opts) {
        var cch = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        if (cch === 0) {
          blob.l++;
          return "";
        }
        return parse_XLUnicodeStringNoCch(blob, cch, opts);
      }
      function parse_XLUnicodeString2(blob, length, opts) {
        if (opts.biff > 5) return parse_XLUnicodeString(blob, length, opts);
        var cch = blob.read_shift(1);
        if (cch === 0) {
          blob.l++;
          return "";
        }
        return blob.read_shift(cch, opts.biff <= 4 || !blob.lens ? "cpstr" : "sbcs-cont");
      }
      function write_XLUnicodeString(str, opts, o3) {
        if (!o3) o3 = new_buf(3 + 2 * str.length);
        o3.write_shift(2, str.length);
        o3.write_shift(1, 1);
        o3.write_shift(31, str, "utf16le");
        return o3;
      }
      function parse_ControlInfo(blob) {
        var flags = blob.read_shift(1);
        blob.l++;
        var accel = blob.read_shift(2);
        blob.l += 2;
        return [flags, accel];
      }
      function parse_URLMoniker(blob) {
        var len = blob.read_shift(4), start = blob.l;
        var extra = false;
        if (len > 24) {
          blob.l += len - 24;
          if (blob.read_shift(16) === "795881f43b1d7f48af2c825dc4852763") extra = true;
          blob.l = start;
        }
        var url = blob.read_shift((extra ? len - 24 : len) >> 1, "utf16le").replace(chr0, "");
        if (extra) blob.l += 24;
        return url;
      }
      function parse_FileMoniker(blob) {
        var cAnti = blob.read_shift(2);
        var preamble = "";
        while (cAnti-- > 0) preamble += "../";
        var ansiPath = blob.read_shift(0, "lpstr-ansi");
        blob.l += 2;
        if (blob.read_shift(2) != 57005) throw new Error("Bad FileMoniker");
        var sz = blob.read_shift(4);
        if (sz === 0) return preamble + ansiPath.replace(/\\/g, "/");
        var bytes = blob.read_shift(4);
        if (blob.read_shift(2) != 3) throw new Error("Bad FileMoniker");
        var unicodePath = blob.read_shift(bytes >> 1, "utf16le").replace(chr0, "");
        return preamble + unicodePath;
      }
      function parse_HyperlinkMoniker(blob, length) {
        var clsid = blob.read_shift(16);
        length -= 16;
        switch (clsid) {
          case "e0c9ea79f9bace118c8200aa004ba90b":
            return parse_URLMoniker(blob, length);
          case "0303000000000000c000000000000046":
            return parse_FileMoniker(blob, length);
          default:
            throw new Error("Unsupported Moniker " + clsid);
        }
      }
      function parse_HyperlinkString(blob) {
        var len = blob.read_shift(4);
        var o3 = len > 0 ? blob.read_shift(len, "utf16le").replace(chr0, "") : "";
        return o3;
      }
      function write_HyperlinkString(str, o3) {
        if (!o3) o3 = new_buf(6 + str.length * 2);
        o3.write_shift(4, 1 + str.length);
        for (var i3 = 0; i3 < str.length; ++i3) o3.write_shift(2, str.charCodeAt(i3));
        o3.write_shift(2, 0);
        return o3;
      }
      function parse_Hyperlink(blob, length) {
        var end = blob.l + length;
        var sVer = blob.read_shift(4);
        if (sVer !== 2) throw new Error("Unrecognized streamVersion: " + sVer);
        var flags = blob.read_shift(2);
        blob.l += 2;
        var displayName, targetFrameName, moniker, oleMoniker, Loc = "", guid, fileTime;
        if (flags & 16) displayName = parse_HyperlinkString(blob, end - blob.l);
        if (flags & 128) targetFrameName = parse_HyperlinkString(blob, end - blob.l);
        if ((flags & 257) === 257) moniker = parse_HyperlinkString(blob, end - blob.l);
        if ((flags & 257) === 1) oleMoniker = parse_HyperlinkMoniker(blob, end - blob.l);
        if (flags & 8) Loc = parse_HyperlinkString(blob, end - blob.l);
        if (flags & 32) guid = blob.read_shift(16);
        if (flags & 64) fileTime = parse_FILETIME(
          blob
          /*, 8*/
        );
        blob.l = end;
        var target = targetFrameName || moniker || oleMoniker || "";
        if (target && Loc) target += "#" + Loc;
        if (!target) target = "#" + Loc;
        if (flags & 2 && target.charAt(0) == "/" && target.charAt(1) != "/") target = "file://" + target;
        var out = { Target: target };
        if (guid) out.guid = guid;
        if (fileTime) out.time = fileTime;
        if (displayName) out.Tooltip = displayName;
        return out;
      }
      function write_Hyperlink(hl) {
        var out = new_buf(512), i3 = 0;
        var Target = hl.Target;
        if (Target.slice(0, 7) == "file://") Target = Target.slice(7);
        var hashidx = Target.indexOf("#");
        var F2 = hashidx > -1 ? 31 : 23;
        switch (Target.charAt(0)) {
          case "#":
            F2 = 28;
            break;
          case ".":
            F2 &= ~2;
            break;
        }
        out.write_shift(4, 2);
        out.write_shift(4, F2);
        var data = [8, 6815827, 6619237, 4849780, 83];
        for (i3 = 0; i3 < data.length; ++i3) out.write_shift(4, data[i3]);
        if (F2 == 28) {
          Target = Target.slice(1);
          write_HyperlinkString(Target, out);
        } else if (F2 & 2) {
          data = "e0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
          for (i3 = 0; i3 < data.length; ++i3) out.write_shift(1, parseInt(data[i3], 16));
          var Pretarget = hashidx > -1 ? Target.slice(0, hashidx) : Target;
          out.write_shift(4, 2 * (Pretarget.length + 1));
          for (i3 = 0; i3 < Pretarget.length; ++i3) out.write_shift(2, Pretarget.charCodeAt(i3));
          out.write_shift(2, 0);
          if (F2 & 8) write_HyperlinkString(hashidx > -1 ? Target.slice(hashidx + 1) : "", out);
        } else {
          data = "03 03 00 00 00 00 00 00 c0 00 00 00 00 00 00 46".split(" ");
          for (i3 = 0; i3 < data.length; ++i3) out.write_shift(1, parseInt(data[i3], 16));
          var P3 = 0;
          while (Target.slice(P3 * 3, P3 * 3 + 3) == "../" || Target.slice(P3 * 3, P3 * 3 + 3) == "..\\") ++P3;
          out.write_shift(2, P3);
          out.write_shift(4, Target.length - 3 * P3 + 1);
          for (i3 = 0; i3 < Target.length - 3 * P3; ++i3) out.write_shift(1, Target.charCodeAt(i3 + 3 * P3) & 255);
          out.write_shift(1, 0);
          out.write_shift(2, 65535);
          out.write_shift(2, 57005);
          for (i3 = 0; i3 < 6; ++i3) out.write_shift(4, 0);
        }
        return out.slice(0, out.l);
      }
      function parse_LongRGBA(blob) {
        var r3 = blob.read_shift(1), g2 = blob.read_shift(1), b3 = blob.read_shift(1), a2 = blob.read_shift(1);
        return [r3, g2, b3, a2];
      }
      function parse_LongRGB(blob, length) {
        var x3 = parse_LongRGBA(blob, length);
        x3[3] = 0;
        return x3;
      }
      function parse_XLSCell(blob) {
        var rw = blob.read_shift(2);
        var col = blob.read_shift(2);
        var ixfe = blob.read_shift(2);
        return { r: rw, c: col, ixfe };
      }
      function write_XLSCell(R2, C2, ixfe, o3) {
        if (!o3) o3 = new_buf(6);
        o3.write_shift(2, R2);
        o3.write_shift(2, C2);
        o3.write_shift(2, ixfe || 0);
        return o3;
      }
      function parse_frtHeader(blob) {
        var rt2 = blob.read_shift(2);
        var flags = blob.read_shift(2);
        blob.l += 8;
        return { type: rt2, flags };
      }
      function parse_OptXLUnicodeString(blob, length, opts) {
        return length === 0 ? "" : parse_XLUnicodeString2(blob, length, opts);
      }
      function parse_XTI(blob, length, opts) {
        var w3 = opts.biff > 8 ? 4 : 2;
        var iSupBook = blob.read_shift(w3), itabFirst = blob.read_shift(w3, "i"), itabLast = blob.read_shift(w3, "i");
        return [iSupBook, itabFirst, itabLast];
      }
      function parse_RkRec(blob) {
        var ixfe = blob.read_shift(2);
        var RK = parse_RkNumber(blob);
        return [ixfe, RK];
      }
      function parse_AddinUdf(blob, length, opts) {
        blob.l += 4;
        length -= 4;
        var l2 = blob.l + length;
        var udfName = parse_ShortXLUnicodeString(blob, length, opts);
        var cb = blob.read_shift(2);
        l2 -= blob.l;
        if (cb !== l2) throw new Error("Malformed AddinUdf: padding = " + l2 + " != " + cb);
        blob.l += cb;
        return udfName;
      }
      function parse_Ref8U(blob) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(2);
        var colLast = blob.read_shift(2);
        return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
      }
      function write_Ref8U(r3, o3) {
        if (!o3) o3 = new_buf(8);
        o3.write_shift(2, r3.s.r);
        o3.write_shift(2, r3.e.r);
        o3.write_shift(2, r3.s.c);
        o3.write_shift(2, r3.e.c);
        return o3;
      }
      function parse_RefU(blob) {
        var rwFirst = blob.read_shift(2);
        var rwLast = blob.read_shift(2);
        var colFirst = blob.read_shift(1);
        var colLast = blob.read_shift(1);
        return { s: { c: colFirst, r: rwFirst }, e: { c: colLast, r: rwLast } };
      }
      var parse_Ref = parse_RefU;
      function parse_FtCmo(blob) {
        blob.l += 4;
        var ot2 = blob.read_shift(2);
        var id = blob.read_shift(2);
        var flags = blob.read_shift(2);
        blob.l += 12;
        return [id, ot2, flags];
      }
      function parse_FtNts(blob) {
        var out = {};
        blob.l += 4;
        blob.l += 16;
        out.fSharedNote = blob.read_shift(2);
        blob.l += 4;
        return out;
      }
      function parse_FtCf(blob) {
        var out = {};
        blob.l += 4;
        blob.cf = blob.read_shift(2);
        return out;
      }
      function parse_FtSkip(blob) {
        blob.l += 2;
        blob.l += blob.read_shift(2);
      }
      var FtTab = {
        0: parse_FtSkip,
        /* FtEnd */
        4: parse_FtSkip,
        /* FtMacro */
        5: parse_FtSkip,
        /* FtButton */
        6: parse_FtSkip,
        /* FtGmo */
        7: parse_FtCf,
        /* FtCf */
        8: parse_FtSkip,
        /* FtPioGrbit */
        9: parse_FtSkip,
        /* FtPictFmla */
        10: parse_FtSkip,
        /* FtCbls */
        11: parse_FtSkip,
        /* FtRbo */
        12: parse_FtSkip,
        /* FtSbs */
        13: parse_FtNts,
        /* FtNts */
        14: parse_FtSkip,
        /* FtSbsFmla */
        15: parse_FtSkip,
        /* FtGboData */
        16: parse_FtSkip,
        /* FtEdoData */
        17: parse_FtSkip,
        /* FtRboData */
        18: parse_FtSkip,
        /* FtCblsData */
        19: parse_FtSkip,
        /* FtLbsData */
        20: parse_FtSkip,
        /* FtCblsFmla */
        21: parse_FtCmo
      };
      function parse_FtArray(blob, length) {
        var tgt = blob.l + length;
        var fts = [];
        while (blob.l < tgt) {
          var ft2 = blob.read_shift(2);
          blob.l -= 2;
          try {
            fts.push(FtTab[ft2](blob, tgt - blob.l));
          } catch (e3) {
            blob.l = tgt;
            return fts;
          }
        }
        if (blob.l != tgt) blob.l = tgt;
        return fts;
      }
      function parse_BOF(blob, length) {
        var o3 = { BIFFVer: 0, dt: 0 };
        o3.BIFFVer = blob.read_shift(2);
        length -= 2;
        if (length >= 2) {
          o3.dt = blob.read_shift(2);
          blob.l -= 2;
        }
        switch (o3.BIFFVer) {
          case 1536:
          /* BIFF8 */
          case 1280:
          /* BIFF5 */
          case 1024:
          /* BIFF4 */
          case 768:
          /* BIFF3 */
          case 512:
          /* BIFF2 */
          case 2:
          case 7:
            break;
          default:
            if (length > 6) throw new Error("Unexpected BIFF Ver " + o3.BIFFVer);
        }
        blob.read_shift(length);
        return o3;
      }
      function write_BOF(wb, t3, o3) {
        var h3 = 1536, w3 = 16;
        switch (o3.bookType) {
          case "biff8":
            break;
          case "biff5":
            h3 = 1280;
            w3 = 8;
            break;
          case "biff4":
            h3 = 4;
            w3 = 6;
            break;
          case "biff3":
            h3 = 3;
            w3 = 6;
            break;
          case "biff2":
            h3 = 2;
            w3 = 4;
            break;
          case "xla":
            break;
          default:
            throw new Error("unsupported BIFF version");
        }
        var out = new_buf(w3);
        out.write_shift(2, h3);
        out.write_shift(2, t3);
        if (w3 > 4) out.write_shift(2, 29282);
        if (w3 > 6) out.write_shift(2, 1997);
        if (w3 > 8) {
          out.write_shift(2, 49161);
          out.write_shift(2, 1);
          out.write_shift(2, 1798);
          out.write_shift(2, 0);
        }
        return out;
      }
      function parse_InterfaceHdr(blob, length) {
        if (length === 0) return 1200;
        if (blob.read_shift(2) !== 1200) {
        }
        return 1200;
      }
      function parse_WriteAccess(blob, length, opts) {
        if (opts.enc) {
          blob.l += length;
          return "";
        }
        var l2 = blob.l;
        var UserName = parse_XLUnicodeString2(blob, 0, opts);
        blob.read_shift(length + l2 - blob.l);
        return UserName;
      }
      function write_WriteAccess(s3, opts) {
        var b8 = !opts || opts.biff == 8;
        var o3 = new_buf(b8 ? 112 : 54);
        o3.write_shift(opts.biff == 8 ? 2 : 1, 7);
        if (b8) o3.write_shift(1, 0);
        o3.write_shift(4, 859007059);
        o3.write_shift(4, 5458548 | (b8 ? 0 : 536870912));
        while (o3.l < o3.length) o3.write_shift(1, b8 ? 0 : 32);
        return o3;
      }
      function parse_WsBool(blob, length, opts) {
        var flags = opts && opts.biff == 8 || length == 2 ? blob.read_shift(2) : (blob.l += length, 0);
        return { fDialog: flags & 16, fBelow: flags & 64, fRight: flags & 128 };
      }
      function parse_BoundSheet8(blob, length, opts) {
        var pos = blob.read_shift(4);
        var hidden = blob.read_shift(1) & 3;
        var dt2 = blob.read_shift(1);
        switch (dt2) {
          case 0:
            dt2 = "Worksheet";
            break;
          case 1:
            dt2 = "Macrosheet";
            break;
          case 2:
            dt2 = "Chartsheet";
            break;
          case 6:
            dt2 = "VBAModule";
            break;
        }
        var name = parse_ShortXLUnicodeString(blob, 0, opts);
        if (name.length === 0) name = "Sheet1";
        return { pos, hs: hidden, dt: dt2, name };
      }
      function write_BoundSheet8(data, opts) {
        var w3 = !opts || opts.biff >= 8 ? 2 : 1;
        var o3 = new_buf(8 + w3 * data.name.length);
        o3.write_shift(4, data.pos);
        o3.write_shift(1, data.hs || 0);
        o3.write_shift(1, data.dt);
        o3.write_shift(1, data.name.length);
        if (opts.biff >= 8) o3.write_shift(1, 1);
        o3.write_shift(w3 * data.name.length, data.name, opts.biff < 8 ? "sbcs" : "utf16le");
        var out = o3.slice(0, o3.l);
        out.l = o3.l;
        return out;
      }
      function parse_SST(blob, length) {
        var end = blob.l + length;
        var cnt = blob.read_shift(4);
        var ucnt = blob.read_shift(4);
        var strs2 = [];
        for (var i3 = 0; i3 != ucnt && blob.l < end; ++i3) {
          strs2.push(parse_XLUnicodeRichExtendedString(blob));
        }
        strs2.Count = cnt;
        strs2.Unique = ucnt;
        return strs2;
      }
      function write_SST(sst, opts) {
        var header = new_buf(8);
        header.write_shift(4, sst.Count);
        header.write_shift(4, sst.Unique);
        var strs2 = [];
        for (var j3 = 0; j3 < sst.length; ++j3) strs2[j3] = write_XLUnicodeRichExtendedString(sst[j3], opts);
        var o3 = bconcat([header].concat(strs2));
        o3.parts = [header.length].concat(strs2.map(function(str) {
          return str.length;
        }));
        return o3;
      }
      function parse_ExtSST(blob, length) {
        var extsst = {};
        extsst.dsst = blob.read_shift(2);
        blob.l += length - 2;
        return extsst;
      }
      function parse_Row(blob) {
        var z4 = {};
        z4.r = blob.read_shift(2);
        z4.c = blob.read_shift(2);
        z4.cnt = blob.read_shift(2) - z4.c;
        var miyRw = blob.read_shift(2);
        blob.l += 4;
        var flags = blob.read_shift(1);
        blob.l += 3;
        if (flags & 7) z4.level = flags & 7;
        if (flags & 32) z4.hidden = true;
        if (flags & 64) z4.hpt = miyRw / 20;
        return z4;
      }
      function parse_ForceFullCalculation(blob) {
        var header = parse_frtHeader(blob);
        if (header.type != 2211) throw new Error("Invalid Future Record " + header.type);
        var fullcalc = blob.read_shift(4);
        return fullcalc !== 0;
      }
      function parse_RecalcId(blob) {
        blob.read_shift(2);
        return blob.read_shift(4);
      }
      function parse_DefaultRowHeight(blob, length, opts) {
        var f2 = 0;
        if (!(opts && opts.biff == 2)) {
          f2 = blob.read_shift(2);
        }
        var miyRw = blob.read_shift(2);
        if (opts && opts.biff == 2) {
          f2 = 1 - (miyRw >> 15);
          miyRw &= 32767;
        }
        var fl = { Unsynced: f2 & 1, DyZero: (f2 & 2) >> 1, ExAsc: (f2 & 4) >> 2, ExDsc: (f2 & 8) >> 3 };
        return [fl, miyRw];
      }
      function parse_Window1(blob) {
        var xWn = blob.read_shift(2), yWn = blob.read_shift(2), dxWn = blob.read_shift(2), dyWn = blob.read_shift(2);
        var flags = blob.read_shift(2), iTabCur = blob.read_shift(2), iTabFirst = blob.read_shift(2);
        var ctabSel = blob.read_shift(2), wTabRatio = blob.read_shift(2);
        return {
          Pos: [xWn, yWn],
          Dim: [dxWn, dyWn],
          Flags: flags,
          CurTab: iTabCur,
          FirstTab: iTabFirst,
          Selected: ctabSel,
          TabRatio: wTabRatio
        };
      }
      function write_Window1() {
        var o3 = new_buf(18);
        o3.write_shift(2, 0);
        o3.write_shift(2, 0);
        o3.write_shift(2, 29280);
        o3.write_shift(2, 17600);
        o3.write_shift(2, 56);
        o3.write_shift(2, 0);
        o3.write_shift(2, 0);
        o3.write_shift(2, 1);
        o3.write_shift(2, 500);
        return o3;
      }
      function parse_Window2(blob, length, opts) {
        if (opts && opts.biff >= 2 && opts.biff < 5) return {};
        var f2 = blob.read_shift(2);
        return { RTL: f2 & 64 };
      }
      function write_Window2(view) {
        var o3 = new_buf(18), f2 = 1718;
        if (view && view.RTL) f2 |= 64;
        o3.write_shift(2, f2);
        o3.write_shift(4, 0);
        o3.write_shift(4, 64);
        o3.write_shift(4, 0);
        o3.write_shift(4, 0);
        return o3;
      }
      function parse_Pane() {
      }
      function parse_Font(blob, length, opts) {
        var o3 = {
          dyHeight: blob.read_shift(2),
          fl: blob.read_shift(2)
        };
        switch (opts && opts.biff || 8) {
          case 2:
            break;
          case 3:
          case 4:
            blob.l += 2;
            break;
          default:
            blob.l += 10;
            break;
        }
        o3.name = parse_ShortXLUnicodeString(blob, 0, opts);
        return o3;
      }
      function write_Font(data, opts) {
        var name = data.name || "Arial";
        var b5 = opts && opts.biff == 5, w3 = b5 ? 15 + name.length : 16 + 2 * name.length;
        var o3 = new_buf(w3);
        o3.write_shift(2, (data.sz || 12) * 20);
        o3.write_shift(4, 0);
        o3.write_shift(2, 400);
        o3.write_shift(4, 0);
        o3.write_shift(2, 0);
        o3.write_shift(1, name.length);
        if (!b5) o3.write_shift(1, 1);
        o3.write_shift((b5 ? 1 : 2) * name.length, name, b5 ? "sbcs" : "utf16le");
        return o3;
      }
      function parse_LabelSst(blob) {
        var cell = parse_XLSCell(blob);
        cell.isst = blob.read_shift(4);
        return cell;
      }
      function write_LabelSst(R2, C2, v3, os) {
        var o3 = new_buf(10);
        write_XLSCell(R2, C2, os, o3);
        o3.write_shift(4, v3);
        return o3;
      }
      function parse_Label(blob, length, opts) {
        if (opts.biffguess && opts.biff == 2) opts.biff = 5;
        var target = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        if (opts.biff == 2) blob.l++;
        var str = parse_XLUnicodeString(blob, target - blob.l, opts);
        cell.val = str;
        return cell;
      }
      function write_Label(R2, C2, v3, os, opts) {
        var b8 = !opts || opts.biff == 8;
        var o3 = new_buf(6 + 2 + +b8 + (1 + b8) * v3.length);
        write_XLSCell(R2, C2, os, o3);
        o3.write_shift(2, v3.length);
        if (b8) o3.write_shift(1, 1);
        o3.write_shift((1 + b8) * v3.length, v3, b8 ? "utf16le" : "sbcs");
        return o3;
      }
      function parse_Format(blob, length, opts) {
        var numFmtId = blob.read_shift(2);
        var fmtstr = parse_XLUnicodeString2(blob, 0, opts);
        return [numFmtId, fmtstr];
      }
      function write_Format(i3, f2, opts, o3) {
        var b5 = opts && opts.biff == 5;
        if (!o3) o3 = new_buf(b5 ? 3 + f2.length : 5 + 2 * f2.length);
        o3.write_shift(2, i3);
        o3.write_shift(b5 ? 1 : 2, f2.length);
        if (!b5) o3.write_shift(1, 1);
        o3.write_shift((b5 ? 1 : 2) * f2.length, f2, b5 ? "sbcs" : "utf16le");
        var out = o3.length > o3.l ? o3.slice(0, o3.l) : o3;
        if (out.l == null) out.l = out.length;
        return out;
      }
      var parse_BIFF2Format = parse_XLUnicodeString2;
      function parse_Dimensions(blob, length, opts) {
        var end = blob.l + length;
        var w3 = opts.biff == 8 || !opts.biff ? 4 : 2;
        var r3 = blob.read_shift(w3), R2 = blob.read_shift(w3);
        var c3 = blob.read_shift(2), C2 = blob.read_shift(2);
        blob.l = end;
        return { s: { r: r3, c: c3 }, e: { r: R2, c: C2 } };
      }
      function write_Dimensions(range, opts) {
        var w3 = opts.biff == 8 || !opts.biff ? 4 : 2;
        var o3 = new_buf(2 * w3 + 6);
        o3.write_shift(w3, range.s.r);
        o3.write_shift(w3, range.e.r + 1);
        o3.write_shift(2, range.s.c);
        o3.write_shift(2, range.e.c + 1);
        o3.write_shift(2, 0);
        return o3;
      }
      function parse_RK(blob) {
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var rkrec = parse_RkRec(blob);
        return { r: rw, c: col, ixfe: rkrec[0], rknum: rkrec[1] };
      }
      function parse_MulRk(blob, length) {
        var target = blob.l + length - 2;
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var rkrecs = [];
        while (blob.l < target) rkrecs.push(parse_RkRec(blob));
        if (blob.l !== target) throw new Error("MulRK read error");
        var lastcol = blob.read_shift(2);
        if (rkrecs.length != lastcol - col + 1) throw new Error("MulRK length mismatch");
        return { r: rw, c: col, C: lastcol, rkrec: rkrecs };
      }
      function parse_MulBlank(blob, length) {
        var target = blob.l + length - 2;
        var rw = blob.read_shift(2), col = blob.read_shift(2);
        var ixfes = [];
        while (blob.l < target) ixfes.push(blob.read_shift(2));
        if (blob.l !== target) throw new Error("MulBlank read error");
        var lastcol = blob.read_shift(2);
        if (ixfes.length != lastcol - col + 1) throw new Error("MulBlank length mismatch");
        return { r: rw, c: col, C: lastcol, ixfe: ixfes };
      }
      function parse_CellStyleXF(blob, length, style, opts) {
        var o3 = {};
        var a2 = blob.read_shift(4), b3 = blob.read_shift(4);
        var c3 = blob.read_shift(4), d3 = blob.read_shift(2);
        o3.patternType = XLSFillPattern[c3 >> 26];
        if (!opts.cellStyles) return o3;
        o3.alc = a2 & 7;
        o3.fWrap = a2 >> 3 & 1;
        o3.alcV = a2 >> 4 & 7;
        o3.fJustLast = a2 >> 7 & 1;
        o3.trot = a2 >> 8 & 255;
        o3.cIndent = a2 >> 16 & 15;
        o3.fShrinkToFit = a2 >> 20 & 1;
        o3.iReadOrder = a2 >> 22 & 2;
        o3.fAtrNum = a2 >> 26 & 1;
        o3.fAtrFnt = a2 >> 27 & 1;
        o3.fAtrAlc = a2 >> 28 & 1;
        o3.fAtrBdr = a2 >> 29 & 1;
        o3.fAtrPat = a2 >> 30 & 1;
        o3.fAtrProt = a2 >> 31 & 1;
        o3.dgLeft = b3 & 15;
        o3.dgRight = b3 >> 4 & 15;
        o3.dgTop = b3 >> 8 & 15;
        o3.dgBottom = b3 >> 12 & 15;
        o3.icvLeft = b3 >> 16 & 127;
        o3.icvRight = b3 >> 23 & 127;
        o3.grbitDiag = b3 >> 30 & 3;
        o3.icvTop = c3 & 127;
        o3.icvBottom = c3 >> 7 & 127;
        o3.icvDiag = c3 >> 14 & 127;
        o3.dgDiag = c3 >> 21 & 15;
        o3.icvFore = d3 & 127;
        o3.icvBack = d3 >> 7 & 127;
        o3.fsxButton = d3 >> 14 & 1;
        return o3;
      }
      function parse_XF(blob, length, opts) {
        var o3 = {};
        o3.ifnt = blob.read_shift(2);
        o3.numFmtId = blob.read_shift(2);
        o3.flags = blob.read_shift(2);
        o3.fStyle = o3.flags >> 2 & 1;
        length -= 6;
        o3.data = parse_CellStyleXF(blob, length, o3.fStyle, opts);
        return o3;
      }
      function write_XF(data, ixfeP, opts, o3) {
        var b5 = opts && opts.biff == 5;
        if (!o3) o3 = new_buf(b5 ? 16 : 20);
        o3.write_shift(2, 0);
        if (data.style) {
          o3.write_shift(2, data.numFmtId || 0);
          o3.write_shift(2, 65524);
        } else {
          o3.write_shift(2, data.numFmtId || 0);
          o3.write_shift(2, ixfeP << 4);
        }
        var f2 = 0;
        if (data.numFmtId > 0 && b5) f2 |= 1024;
        o3.write_shift(4, f2);
        o3.write_shift(4, 0);
        if (!b5) o3.write_shift(4, 0);
        o3.write_shift(2, 0);
        return o3;
      }
      function parse_Guts(blob) {
        blob.l += 4;
        var out = [blob.read_shift(2), blob.read_shift(2)];
        if (out[0] !== 0) out[0]--;
        if (out[1] !== 0) out[1]--;
        if (out[0] > 7 || out[1] > 7) throw new Error("Bad Gutters: " + out.join("|"));
        return out;
      }
      function write_Guts(guts) {
        var o3 = new_buf(8);
        o3.write_shift(4, 0);
        o3.write_shift(2, guts[0] ? guts[0] + 1 : 0);
        o3.write_shift(2, guts[1] ? guts[1] + 1 : 0);
        return o3;
      }
      function parse_BoolErr(blob, length, opts) {
        var cell = parse_XLSCell(blob, 6);
        if (opts.biff == 2 || length == 9) ++blob.l;
        var val = parse_Bes(blob, 2);
        cell.val = val;
        cell.t = val === true || val === false ? "b" : "e";
        return cell;
      }
      function write_BoolErr(R2, C2, v3, os, opts, t3) {
        var o3 = new_buf(8);
        write_XLSCell(R2, C2, os, o3);
        write_Bes(v3, t3, o3);
        return o3;
      }
      function parse_Number(blob, length, opts) {
        if (opts.biffguess && opts.biff == 2) opts.biff = 5;
        var cell = parse_XLSCell(blob, 6);
        var xnum = parse_Xnum(blob, 8);
        cell.val = xnum;
        return cell;
      }
      function write_Number(R2, C2, v3, os) {
        var o3 = new_buf(14);
        write_XLSCell(R2, C2, os, o3);
        write_Xnum(v3, o3);
        return o3;
      }
      var parse_XLHeaderFooter = parse_OptXLUnicodeString;
      function parse_SupBook(blob, length, opts) {
        var end = blob.l + length;
        var ctab = blob.read_shift(2);
        var cch = blob.read_shift(2);
        opts.sbcch = cch;
        if (cch == 1025 || cch == 14849) return [cch, ctab];
        if (cch < 1 || cch > 255) throw new Error("Unexpected SupBook type: " + cch);
        var virtPath = parse_XLUnicodeStringNoCch(blob, cch);
        var rgst = [];
        while (end > blob.l) rgst.push(parse_XLUnicodeString(blob));
        return [cch, ctab, virtPath, rgst];
      }
      function parse_ExternName(blob, length, opts) {
        var flags = blob.read_shift(2);
        var body;
        var o3 = {
          fBuiltIn: flags & 1,
          fWantAdvise: flags >>> 1 & 1,
          fWantPict: flags >>> 2 & 1,
          fOle: flags >>> 3 & 1,
          fOleLink: flags >>> 4 & 1,
          cf: flags >>> 5 & 1023,
          fIcon: flags >>> 15 & 1
        };
        if (opts.sbcch === 14849) body = parse_AddinUdf(blob, length - 2, opts);
        o3.body = body || blob.read_shift(length - 2);
        if (typeof body === "string") o3.Name = body;
        return o3;
      }
      var XLSLblBuiltIn = [
        "_xlnm.Consolidate_Area",
        "_xlnm.Auto_Open",
        "_xlnm.Auto_Close",
        "_xlnm.Extract",
        "_xlnm.Database",
        "_xlnm.Criteria",
        "_xlnm.Print_Area",
        "_xlnm.Print_Titles",
        "_xlnm.Recorder",
        "_xlnm.Data_Form",
        "_xlnm.Auto_Activate",
        "_xlnm.Auto_Deactivate",
        "_xlnm.Sheet_Title",
        "_xlnm._FilterDatabase"
      ];
      function parse_Lbl(blob, length, opts) {
        var target = blob.l + length;
        var flags = blob.read_shift(2);
        var chKey = blob.read_shift(1);
        var cch = blob.read_shift(1);
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        var itab = 0;
        if (!opts || opts.biff >= 5) {
          if (opts.biff != 5) blob.l += 2;
          itab = blob.read_shift(2);
          if (opts.biff == 5) blob.l += 2;
          blob.l += 4;
        }
        var name = parse_XLUnicodeStringNoCch(blob, cch, opts);
        if (flags & 32) name = XLSLblBuiltIn[name.charCodeAt(0)];
        var npflen = target - blob.l;
        if (opts && opts.biff == 2) --npflen;
        var rgce = target == blob.l || cce === 0 || !(npflen > 0) ? [] : parse_NameParsedFormula(blob, npflen, opts, cce);
        return {
          chKey,
          Name: name,
          itab,
          rgce
        };
      }
      function parse_ExternSheet(blob, length, opts) {
        if (opts.biff < 8) return parse_BIFF5ExternSheet(blob, length, opts);
        var o3 = [], target = blob.l + length, len = blob.read_shift(opts.biff > 8 ? 4 : 2);
        while (len-- !== 0) o3.push(parse_XTI(blob, opts.biff > 8 ? 12 : 6, opts));
        if (blob.l != target) throw new Error("Bad ExternSheet: " + blob.l + " != " + target);
        return o3;
      }
      function parse_BIFF5ExternSheet(blob, length, opts) {
        if (blob[blob.l + 1] == 3) blob[blob.l]++;
        var o3 = parse_ShortXLUnicodeString(blob, length, opts);
        return o3.charCodeAt(0) == 3 ? o3.slice(1) : o3;
      }
      function parse_NameCmt(blob, length, opts) {
        if (opts.biff < 8) {
          blob.l += length;
          return;
        }
        var cchName = blob.read_shift(2);
        var cchComment = blob.read_shift(2);
        var name = parse_XLUnicodeStringNoCch(blob, cchName, opts);
        var comment = parse_XLUnicodeStringNoCch(blob, cchComment, opts);
        return [name, comment];
      }
      function parse_ShrFmla(blob, length, opts) {
        var ref = parse_RefU(blob, 6);
        blob.l++;
        var cUse = blob.read_shift(1);
        length -= 8;
        return [parse_SharedParsedFormula(blob, length, opts), cUse, ref];
      }
      function parse_Array(blob, length, opts) {
        var ref = parse_Ref(blob, 6);
        switch (opts.biff) {
          case 2:
            blob.l++;
            length -= 7;
            break;
          case 3:
          case 4:
            blob.l += 2;
            length -= 8;
            break;
          default:
            blob.l += 6;
            length -= 12;
        }
        return [ref, parse_ArrayParsedFormula(blob, length, opts, ref)];
      }
      function parse_MTRSettings(blob) {
        var fMTREnabled = blob.read_shift(4) !== 0;
        var fUserSetThreadCount = blob.read_shift(4) !== 0;
        var cUserThreadCount = blob.read_shift(4);
        return [fMTREnabled, fUserSetThreadCount, cUserThreadCount];
      }
      function parse_NoteSh(blob, length, opts) {
        if (opts.biff < 8) return;
        var row = blob.read_shift(2), col = blob.read_shift(2);
        var flags = blob.read_shift(2), idObj = blob.read_shift(2);
        var stAuthor = parse_XLUnicodeString2(blob, 0, opts);
        if (opts.biff < 8) blob.read_shift(1);
        return [{ r: row, c: col }, stAuthor, idObj, flags];
      }
      function parse_Note(blob, length, opts) {
        return parse_NoteSh(blob, length, opts);
      }
      function parse_MergeCells(blob, length) {
        var merges = [];
        var cmcs = blob.read_shift(2);
        while (cmcs--) merges.push(parse_Ref8U(blob, length));
        return merges;
      }
      function write_MergeCells(merges) {
        var o3 = new_buf(2 + merges.length * 8);
        o3.write_shift(2, merges.length);
        for (var i3 = 0; i3 < merges.length; ++i3) write_Ref8U(merges[i3], o3);
        return o3;
      }
      function parse_Obj(blob, length, opts) {
        if (opts && opts.biff < 8) return parse_BIFF5Obj(blob, length, opts);
        var cmo = parse_FtCmo(blob, 22);
        var fts = parse_FtArray(blob, length - 22, cmo[1]);
        return { cmo, ft: fts };
      }
      var parse_BIFF5OT = {
        8: function(blob, length) {
          var tgt = blob.l + length;
          blob.l += 10;
          var cf = blob.read_shift(2);
          blob.l += 4;
          blob.l += 2;
          blob.l += 2;
          blob.l += 2;
          blob.l += 4;
          var cchName = blob.read_shift(1);
          blob.l += cchName;
          blob.l = tgt;
          return { fmt: cf };
        }
      };
      function parse_BIFF5Obj(blob, length, opts) {
        blob.l += 4;
        var ot2 = blob.read_shift(2);
        var id = blob.read_shift(2);
        var grbit = blob.read_shift(2);
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 2;
        blob.l += 6;
        length -= 36;
        var fts = [];
        fts.push((parse_BIFF5OT[ot2] || parsenoop)(blob, length, opts));
        return { cmo: [id, ot2, grbit], ft: fts };
      }
      function parse_TxO(blob, length, opts) {
        var s3 = blob.l;
        var texts = "";
        try {
          blob.l += 4;
          var ot2 = (opts.lastobj || { cmo: [0, 0] }).cmo[1];
          var controlInfo;
          if ([0, 5, 7, 11, 12, 14].indexOf(ot2) == -1) blob.l += 6;
          else controlInfo = parse_ControlInfo(blob, 6, opts);
          var cchText = blob.read_shift(2);
          blob.read_shift(2);
          parseuint16(blob, 2);
          var len = blob.read_shift(2);
          blob.l += len;
          for (var i3 = 1; i3 < blob.lens.length - 1; ++i3) {
            if (blob.l - s3 != blob.lens[i3]) throw new Error("TxO: bad continue record");
            var hdr = blob[blob.l];
            var t3 = parse_XLUnicodeStringNoCch(blob, blob.lens[i3 + 1] - blob.lens[i3] - 1);
            texts += t3;
            if (texts.length >= (hdr ? cchText : 2 * cchText)) break;
          }
          if (texts.length !== cchText && texts.length !== cchText * 2) {
            throw new Error("cchText: " + cchText + " != " + texts.length);
          }
          blob.l = s3 + length;
          return { t: texts };
        } catch (e3) {
          blob.l = s3 + length;
          return { t: texts };
        }
      }
      function parse_HLink(blob, length) {
        var ref = parse_Ref8U(blob, 8);
        blob.l += 16;
        var hlink = parse_Hyperlink(blob, length - 24);
        return [ref, hlink];
      }
      function write_HLink(hl) {
        var O2 = new_buf(24);
        var ref = decode_cell(hl[0]);
        O2.write_shift(2, ref.r);
        O2.write_shift(2, ref.r);
        O2.write_shift(2, ref.c);
        O2.write_shift(2, ref.c);
        var clsid = "d0 c9 ea 79 f9 ba ce 11 8c 82 00 aa 00 4b a9 0b".split(" ");
        for (var i3 = 0; i3 < 16; ++i3) O2.write_shift(1, parseInt(clsid[i3], 16));
        return bconcat([O2, write_Hyperlink(hl[1])]);
      }
      function parse_HLinkTooltip(blob, length) {
        blob.read_shift(2);
        var ref = parse_Ref8U(blob, 8);
        var wzTooltip = blob.read_shift((length - 10) / 2, "dbcs-cont");
        wzTooltip = wzTooltip.replace(chr0, "");
        return [ref, wzTooltip];
      }
      function write_HLinkTooltip(hl) {
        var TT = hl[1].Tooltip;
        var O2 = new_buf(10 + 2 * (TT.length + 1));
        O2.write_shift(2, 2048);
        var ref = decode_cell(hl[0]);
        O2.write_shift(2, ref.r);
        O2.write_shift(2, ref.r);
        O2.write_shift(2, ref.c);
        O2.write_shift(2, ref.c);
        for (var i3 = 0; i3 < TT.length; ++i3) O2.write_shift(2, TT.charCodeAt(i3));
        O2.write_shift(2, 0);
        return O2;
      }
      function parse_Country(blob) {
        var o3 = [0, 0], d3;
        d3 = blob.read_shift(2);
        o3[0] = CountryEnum[d3] || d3;
        d3 = blob.read_shift(2);
        o3[1] = CountryEnum[d3] || d3;
        return o3;
      }
      function write_Country(o3) {
        if (!o3) o3 = new_buf(4);
        o3.write_shift(2, 1);
        o3.write_shift(2, 1);
        return o3;
      }
      function parse_ClrtClient(blob) {
        var ccv = blob.read_shift(2);
        var o3 = [];
        while (ccv-- > 0) o3.push(parse_LongRGB(blob, 8));
        return o3;
      }
      function parse_Palette(blob) {
        var ccv = blob.read_shift(2);
        var o3 = [];
        while (ccv-- > 0) o3.push(parse_LongRGB(blob, 8));
        return o3;
      }
      function parse_XFCRC(blob) {
        blob.l += 2;
        var o3 = { cxfs: 0, crc: 0 };
        o3.cxfs = blob.read_shift(2);
        o3.crc = blob.read_shift(4);
        return o3;
      }
      function parse_ColInfo(blob, length, opts) {
        if (!opts.cellStyles) return parsenoop(blob, length);
        var w3 = opts && opts.biff >= 12 ? 4 : 2;
        var colFirst = blob.read_shift(w3);
        var colLast = blob.read_shift(w3);
        var coldx = blob.read_shift(w3);
        var ixfe = blob.read_shift(w3);
        var flags = blob.read_shift(2);
        if (w3 == 2) blob.l += 2;
        var o3 = { s: colFirst, e: colLast, w: coldx, ixfe, flags };
        if (opts.biff >= 5 || !opts.biff) o3.level = flags >> 8 & 7;
        return o3;
      }
      function write_ColInfo(col, idx) {
        var o3 = new_buf(12);
        o3.write_shift(2, idx);
        o3.write_shift(2, idx);
        o3.write_shift(2, col.width * 256);
        o3.write_shift(2, 0);
        var f2 = 0;
        if (col.hidden) f2 |= 1;
        o3.write_shift(1, f2);
        f2 = col.level || 0;
        o3.write_shift(1, f2);
        o3.write_shift(2, 0);
        return o3;
      }
      function parse_Setup(blob, length) {
        var o3 = {};
        if (length < 32) return o3;
        blob.l += 16;
        o3.header = parse_Xnum(blob, 8);
        o3.footer = parse_Xnum(blob, 8);
        blob.l += 2;
        return o3;
      }
      function parse_ShtProps(blob, length, opts) {
        var def = { area: false };
        if (opts.biff != 5) {
          blob.l += length;
          return def;
        }
        var d3 = blob.read_shift(1);
        blob.l += 3;
        if (d3 & 16) def.area = true;
        return def;
      }
      function write_RRTabId(n3) {
        var out = new_buf(2 * n3);
        for (var i3 = 0; i3 < n3; ++i3) out.write_shift(2, i3 + 1);
        return out;
      }
      var parse_Blank = parse_XLSCell;
      var parse_Scl = parseuint16a;
      var parse_String = parse_XLUnicodeString;
      function parse_ImData(blob) {
        var cf = blob.read_shift(2);
        var env = blob.read_shift(2);
        var lcb = blob.read_shift(4);
        var o3 = { fmt: cf, env, len: lcb, data: blob.slice(blob.l, blob.l + lcb) };
        blob.l += lcb;
        return o3;
      }
      function parse_BIFF2STR(blob, length, opts) {
        if (opts.biffguess && opts.biff == 5) opts.biff = 2;
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var str = parse_XLUnicodeString2(blob, length - 7, opts);
        cell.t = "str";
        cell.val = str;
        return cell;
      }
      function parse_BIFF2NUM(blob) {
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var num = parse_Xnum(blob, 8);
        cell.t = "n";
        cell.val = num;
        return cell;
      }
      function write_BIFF2NUM(r3, c3, val) {
        var out = new_buf(15);
        write_BIFF2Cell(out, r3, c3);
        out.write_shift(8, val, "f");
        return out;
      }
      function parse_BIFF2INT(blob) {
        var cell = parse_XLSCell(blob, 6);
        ++blob.l;
        var num = blob.read_shift(2);
        cell.t = "n";
        cell.val = num;
        return cell;
      }
      function write_BIFF2INT(r3, c3, val) {
        var out = new_buf(9);
        write_BIFF2Cell(out, r3, c3);
        out.write_shift(2, val);
        return out;
      }
      function parse_BIFF2STRING(blob) {
        var cch = blob.read_shift(1);
        if (cch === 0) {
          blob.l++;
          return "";
        }
        return blob.read_shift(cch, "sbcs-cont");
      }
      function parse_BIFF2FONTXTRA(blob, length) {
        blob.l += 6;
        blob.l += 2;
        blob.l += 1;
        blob.l += 3;
        blob.l += 1;
        blob.l += length - 13;
      }
      function parse_RString(blob, length, opts) {
        var end = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        var cch = blob.read_shift(2);
        var str = parse_XLUnicodeStringNoCch(blob, cch, opts);
        blob.l = end;
        cell.t = "str";
        cell.val = str;
        return cell;
      }
      var DBF_SUPPORTED_VERSIONS = [2, 3, 48, 49, 131, 139, 140, 245];
      var DBF = function() {
        var dbf_codepage_map = {
          /* Code Pages Supported by Visual FoxPro */
          1: 437,
          2: 850,
          3: 1252,
          4: 1e4,
          100: 852,
          101: 866,
          102: 865,
          103: 861,
          104: 895,
          105: 620,
          106: 737,
          107: 857,
          120: 950,
          121: 949,
          122: 936,
          123: 932,
          124: 874,
          125: 1255,
          126: 1256,
          150: 10007,
          151: 10029,
          152: 10006,
          200: 1250,
          201: 1251,
          202: 1254,
          203: 1253,
          /* shapefile DBF extension */
          0: 20127,
          8: 865,
          9: 437,
          10: 850,
          11: 437,
          13: 437,
          14: 850,
          15: 437,
          16: 850,
          17: 437,
          18: 850,
          19: 932,
          20: 850,
          21: 437,
          22: 850,
          23: 865,
          24: 437,
          25: 437,
          26: 850,
          27: 437,
          28: 863,
          29: 850,
          31: 852,
          34: 852,
          35: 852,
          36: 860,
          37: 850,
          38: 866,
          55: 850,
          64: 852,
          77: 936,
          78: 949,
          79: 950,
          80: 874,
          87: 1252,
          88: 1252,
          89: 1252,
          108: 863,
          134: 737,
          135: 852,
          136: 857,
          204: 1257,
          255: 16969
        };
        var dbf_reverse_map = evert({
          1: 437,
          2: 850,
          3: 1252,
          4: 1e4,
          100: 852,
          101: 866,
          102: 865,
          103: 861,
          104: 895,
          105: 620,
          106: 737,
          107: 857,
          120: 950,
          121: 949,
          122: 936,
          123: 932,
          124: 874,
          125: 1255,
          126: 1256,
          150: 10007,
          151: 10029,
          152: 10006,
          200: 1250,
          201: 1251,
          202: 1254,
          203: 1253,
          0: 20127
        });
        function dbf_to_aoa(buf, opts) {
          var out = [];
          var d3 = new_raw_buf(1);
          switch (opts.type) {
            case "base64":
              d3 = s2a(Base64_decode(buf));
              break;
            case "binary":
              d3 = s2a(buf);
              break;
            case "buffer":
            case "array":
              d3 = buf;
              break;
          }
          prep_blob(d3, 0);
          var ft2 = d3.read_shift(1);
          var memo = !!(ft2 & 136);
          var vfp = false, l7 = false;
          switch (ft2) {
            case 2:
              break;
            // dBASE II
            case 3:
              break;
            // dBASE III
            case 48:
              vfp = true;
              memo = true;
              break;
            // VFP
            case 49:
              vfp = true;
              memo = true;
              break;
            // VFP with autoincrement
            // 0x43 dBASE IV SQL table files
            // 0x63 dBASE IV SQL system files
            case 131:
              break;
            // dBASE III with memo
            case 139:
              break;
            // dBASE IV with memo
            case 140:
              l7 = true;
              break;
            // dBASE Level 7 with memo
            // case 0xCB dBASE IV SQL table files with memo
            case 245:
              break;
            // FoxPro 2.x with memo
            // case 0xFB FoxBASE
            default:
              throw new Error("DBF Unsupported Version: " + ft2.toString(16));
          }
          var nrow = 0, fpos = 521;
          if (ft2 == 2) nrow = d3.read_shift(2);
          d3.l += 3;
          if (ft2 != 2) nrow = d3.read_shift(4);
          if (nrow > 1048576) nrow = 1e6;
          if (ft2 != 2) fpos = d3.read_shift(2);
          var rlen = d3.read_shift(2);
          var current_cp = opts.codepage || 1252;
          if (ft2 != 2) {
            d3.l += 16;
            d3.read_shift(1);
            if (d3[d3.l] !== 0) current_cp = dbf_codepage_map[d3[d3.l]];
            d3.l += 1;
            d3.l += 2;
          }
          if (l7) d3.l += 36;
          var fields = [], field = {};
          var hend = Math.min(d3.length, ft2 == 2 ? 521 : fpos - 10 - (vfp ? 264 : 0));
          var ww = l7 ? 32 : 11;
          while (d3.l < hend && d3[d3.l] != 13) {
            field = {};
            field.name = $cptable.utils.decode(current_cp, d3.slice(d3.l, d3.l + ww)).replace(/[\u0000\r\n].*$/g, "");
            d3.l += ww;
            field.type = String.fromCharCode(d3.read_shift(1));
            if (ft2 != 2 && !l7) field.offset = d3.read_shift(4);
            field.len = d3.read_shift(1);
            if (ft2 == 2) field.offset = d3.read_shift(2);
            field.dec = d3.read_shift(1);
            if (field.name.length) fields.push(field);
            if (ft2 != 2) d3.l += l7 ? 13 : 14;
            switch (field.type) {
              case "B":
                if ((!vfp || field.len != 8) && opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
                break;
              case "G":
              // General (FoxPro and dBASE L7)
              case "P":
                if (opts.WTF) console.log("Skipping " + field.name + ":" + field.type);
                break;
              case "+":
              // Autoincrement (dBASE L7 only)
              case "0":
              // _NullFlags (VFP only)
              case "@":
              // Timestamp (dBASE L7 only)
              case "C":
              // Character (dBASE II)
              case "D":
              // Date (dBASE III)
              case "F":
              // Float (dBASE IV)
              case "I":
              // Long (VFP and dBASE L7)
              case "L":
              // Logical (dBASE II)
              case "M":
              // Memo (dBASE III)
              case "N":
              // Number (dBASE II)
              case "O":
              // Double (dBASE L7 only)
              case "T":
              // Datetime (VFP only)
              case "Y":
                break;
              default:
                throw new Error("Unknown Field Type: " + field.type);
            }
          }
          if (d3[d3.l] !== 13) d3.l = fpos - 1;
          if (d3.read_shift(1) !== 13) throw new Error("DBF Terminator not found " + d3.l + " " + d3[d3.l]);
          d3.l = fpos;
          var R2 = 0, C2 = 0;
          out[0] = [];
          for (C2 = 0; C2 != fields.length; ++C2) out[0][C2] = fields[C2].name;
          while (nrow-- > 0) {
            if (d3[d3.l] === 42) {
              d3.l += rlen;
              continue;
            }
            ++d3.l;
            out[++R2] = [];
            C2 = 0;
            for (C2 = 0; C2 != fields.length; ++C2) {
              var dd = d3.slice(d3.l, d3.l + fields[C2].len);
              d3.l += fields[C2].len;
              prep_blob(dd, 0);
              var s3 = $cptable.utils.decode(current_cp, dd);
              switch (fields[C2].type) {
                case "C":
                  if (s3.trim().length) out[R2][C2] = s3.replace(/\s+$/, "");
                  break;
                case "D":
                  if (s3.length === 8) out[R2][C2] = new Date(+s3.slice(0, 4), +s3.slice(4, 6) - 1, +s3.slice(6, 8));
                  else out[R2][C2] = s3;
                  break;
                case "F":
                  out[R2][C2] = parseFloat(s3.trim());
                  break;
                case "+":
                case "I":
                  out[R2][C2] = l7 ? dd.read_shift(-4, "i") ^ 2147483648 : dd.read_shift(4, "i");
                  break;
                case "L":
                  switch (s3.trim().toUpperCase()) {
                    case "Y":
                    case "T":
                      out[R2][C2] = true;
                      break;
                    case "N":
                    case "F":
                      out[R2][C2] = false;
                      break;
                    case "":
                    case "?":
                      break;
                    default:
                      throw new Error("DBF Unrecognized L:|" + s3 + "|");
                  }
                  break;
                case "M":
                  if (!memo) throw new Error("DBF Unexpected MEMO for type " + ft2.toString(16));
                  out[R2][C2] = "##MEMO##" + (l7 ? parseInt(s3.trim(), 10) : dd.read_shift(4));
                  break;
                case "N":
                  s3 = s3.replace(/\u0000/g, "").trim();
                  if (s3 && s3 != ".") out[R2][C2] = +s3 || 0;
                  break;
                case "@":
                  out[R2][C2] = new Date(dd.read_shift(-8, "f") - 621356832e5);
                  break;
                case "T":
                  out[R2][C2] = new Date((dd.read_shift(4) - 2440588) * 864e5 + dd.read_shift(4));
                  break;
                case "Y":
                  out[R2][C2] = dd.read_shift(4, "i") / 1e4 + dd.read_shift(4, "i") / 1e4 * Math.pow(2, 32);
                  break;
                case "O":
                  out[R2][C2] = -dd.read_shift(-8, "f");
                  break;
                case "B":
                  if (vfp && fields[C2].len == 8) {
                    out[R2][C2] = dd.read_shift(8, "f");
                    break;
                  }
                /* falls through */
                case "G":
                case "P":
                  dd.l += fields[C2].len;
                  break;
                case "0":
                  if (fields[C2].name === "_NullFlags") break;
                /* falls through */
                default:
                  throw new Error("DBF Unsupported data type " + fields[C2].type);
              }
            }
          }
          if (ft2 != 2) {
            if (d3.l < d3.length && d3[d3.l++] != 26) throw new Error("DBF EOF Marker missing " + (d3.l - 1) + " of " + d3.length + " " + d3[d3.l - 1].toString(16));
          }
          if (opts && opts.sheetRows) out = out.slice(0, opts.sheetRows);
          opts.DBF = fields;
          return out;
        }
        function dbf_to_sheet(buf, opts) {
          var o3 = opts || {};
          if (!o3.dateNF) o3.dateNF = "yyyymmdd";
          var ws = aoa_to_sheet(dbf_to_aoa(buf, o3), o3);
          ws["!cols"] = o3.DBF.map(function(field) {
            return {
              wch: field.len,
              DBF: field
            };
          });
          delete o3.DBF;
          return ws;
        }
        function dbf_to_workbook(buf, opts) {
          try {
            return sheet_to_workbook(dbf_to_sheet(buf, opts), opts);
          } catch (e3) {
            if (opts && opts.WTF) throw e3;
          }
          return { SheetNames: [], Sheets: {} };
        }
        var _RLEN = { "B": 8, "C": 250, "L": 1, "D": 8, "?": 0, "": 0 };
        function sheet_to_dbf(ws, opts) {
          var o3 = opts || {};
          if (+o3.codepage >= 0) set_cp(+o3.codepage);
          if (o3.type == "string") throw new Error("Cannot write DBF to JS string");
          var ba2 = buf_array();
          var aoa = sheet_to_json(ws, { header: 1, raw: true, cellDates: true });
          var headers = aoa[0], data = aoa.slice(1), cols = ws["!cols"] || [];
          var i3 = 0, j3 = 0, hcnt = 0, rlen = 1;
          for (i3 = 0; i3 < headers.length; ++i3) {
            if (((cols[i3] || {}).DBF || {}).name) {
              headers[i3] = cols[i3].DBF.name;
              ++hcnt;
              continue;
            }
            if (headers[i3] == null) continue;
            ++hcnt;
            if (typeof headers[i3] === "number") headers[i3] = headers[i3].toString(10);
            if (typeof headers[i3] !== "string") throw new Error("DBF Invalid column name " + headers[i3] + " |" + typeof headers[i3] + "|");
            if (headers.indexOf(headers[i3]) !== i3) {
              for (j3 = 0; j3 < 1024; ++j3)
                if (headers.indexOf(headers[i3] + "_" + j3) == -1) {
                  headers[i3] += "_" + j3;
                  break;
                }
            }
          }
          var range = safe_decode_range(ws["!ref"]);
          var coltypes = [];
          var colwidths = [];
          var coldecimals = [];
          for (i3 = 0; i3 <= range.e.c - range.s.c; ++i3) {
            var guess = "", _guess = "", maxlen = 0;
            var col = [];
            for (j3 = 0; j3 < data.length; ++j3) {
              if (data[j3][i3] != null) col.push(data[j3][i3]);
            }
            if (col.length == 0 || headers[i3] == null) {
              coltypes[i3] = "?";
              continue;
            }
            for (j3 = 0; j3 < col.length; ++j3) {
              switch (typeof col[j3]) {
                /* TODO: check if L2 compat is desired */
                case "number":
                  _guess = "B";
                  break;
                case "string":
                  _guess = "C";
                  break;
                case "boolean":
                  _guess = "L";
                  break;
                case "object":
                  _guess = col[j3] instanceof Date ? "D" : "C";
                  break;
                default:
                  _guess = "C";
              }
              maxlen = Math.max(maxlen, String(col[j3]).length);
              guess = guess && guess != _guess ? "C" : _guess;
            }
            if (maxlen > 250) maxlen = 250;
            _guess = ((cols[i3] || {}).DBF || {}).type;
            if (_guess == "C") {
              if (cols[i3].DBF.len > maxlen) maxlen = cols[i3].DBF.len;
            }
            if (guess == "B" && _guess == "N") {
              guess = "N";
              coldecimals[i3] = cols[i3].DBF.dec;
              maxlen = cols[i3].DBF.len;
            }
            colwidths[i3] = guess == "C" || _guess == "N" ? maxlen : _RLEN[guess] || 0;
            rlen += colwidths[i3];
            coltypes[i3] = guess;
          }
          var h3 = ba2.next(32);
          h3.write_shift(4, 318902576);
          h3.write_shift(4, data.length);
          h3.write_shift(2, 296 + 32 * hcnt);
          h3.write_shift(2, rlen);
          for (i3 = 0; i3 < 4; ++i3) h3.write_shift(4, 0);
          h3.write_shift(4, 0 | (+dbf_reverse_map[current_ansi] || 3) << 8);
          for (i3 = 0, j3 = 0; i3 < headers.length; ++i3) {
            if (headers[i3] == null) continue;
            var hf = ba2.next(32);
            var _f = (headers[i3].slice(-10) + "\0\0\0\0\0\0\0\0\0\0\0").slice(0, 11);
            hf.write_shift(1, _f, "sbcs");
            hf.write_shift(1, coltypes[i3] == "?" ? "C" : coltypes[i3], "sbcs");
            hf.write_shift(4, j3);
            hf.write_shift(1, colwidths[i3] || _RLEN[coltypes[i3]] || 0);
            hf.write_shift(1, coldecimals[i3] || 0);
            hf.write_shift(1, 2);
            hf.write_shift(4, 0);
            hf.write_shift(1, 0);
            hf.write_shift(4, 0);
            hf.write_shift(4, 0);
            j3 += colwidths[i3] || _RLEN[coltypes[i3]] || 0;
          }
          var hb = ba2.next(264);
          hb.write_shift(4, 13);
          for (i3 = 0; i3 < 65; ++i3) hb.write_shift(4, 0);
          for (i3 = 0; i3 < data.length; ++i3) {
            var rout = ba2.next(rlen);
            rout.write_shift(1, 0);
            for (j3 = 0; j3 < headers.length; ++j3) {
              if (headers[j3] == null) continue;
              switch (coltypes[j3]) {
                case "L":
                  rout.write_shift(1, data[i3][j3] == null ? 63 : data[i3][j3] ? 84 : 70);
                  break;
                case "B":
                  rout.write_shift(8, data[i3][j3] || 0, "f");
                  break;
                case "N":
                  var _n = "0";
                  if (typeof data[i3][j3] == "number") _n = data[i3][j3].toFixed(coldecimals[j3] || 0);
                  for (hcnt = 0; hcnt < colwidths[j3] - _n.length; ++hcnt) rout.write_shift(1, 32);
                  rout.write_shift(1, _n, "sbcs");
                  break;
                case "D":
                  if (!data[i3][j3]) rout.write_shift(8, "00000000", "sbcs");
                  else {
                    rout.write_shift(4, ("0000" + data[i3][j3].getFullYear()).slice(-4), "sbcs");
                    rout.write_shift(2, ("00" + (data[i3][j3].getMonth() + 1)).slice(-2), "sbcs");
                    rout.write_shift(2, ("00" + data[i3][j3].getDate()).slice(-2), "sbcs");
                  }
                  break;
                case "C":
                  var _s = String(data[i3][j3] != null ? data[i3][j3] : "").slice(0, colwidths[j3]);
                  rout.write_shift(1, _s, "sbcs");
                  for (hcnt = 0; hcnt < colwidths[j3] - _s.length; ++hcnt) rout.write_shift(1, 32);
                  break;
              }
            }
          }
          ba2.next(1).write_shift(1, 26);
          return ba2.end();
        }
        return {
          to_workbook: dbf_to_workbook,
          to_sheet: dbf_to_sheet,
          from_sheet: sheet_to_dbf
        };
      }();
      var SYLK = function() {
        var sylk_escapes = {
          AA: "À",
          BA: "Á",
          CA: "Â",
          DA: 195,
          HA: "Ä",
          JA: 197,
          AE: "È",
          BE: "É",
          CE: "Ê",
          HE: "Ë",
          AI: "Ì",
          BI: "Í",
          CI: "Î",
          HI: "Ï",
          AO: "Ò",
          BO: "Ó",
          CO: "Ô",
          DO: 213,
          HO: "Ö",
          AU: "Ù",
          BU: "Ú",
          CU: "Û",
          HU: "Ü",
          Aa: "à",
          Ba: "á",
          Ca: "â",
          Da: 227,
          Ha: "ä",
          Ja: 229,
          Ae: "è",
          Be: "é",
          Ce: "ê",
          He: "ë",
          Ai: "ì",
          Bi: "í",
          Ci: "î",
          Hi: "ï",
          Ao: "ò",
          Bo: "ó",
          Co: "ô",
          Do: 245,
          Ho: "ö",
          Au: "ù",
          Bu: "ú",
          Cu: "û",
          Hu: "ü",
          KC: "Ç",
          Kc: "ç",
          q: "æ",
          z: "œ",
          a: "Æ",
          j: "Œ",
          DN: 209,
          Dn: 241,
          Hy: 255,
          S: 169,
          c: 170,
          R: 174,
          "B ": 180,
          0: 176,
          1: 177,
          2: 178,
          3: 179,
          5: 181,
          6: 182,
          7: 183,
          Q: 185,
          k: 186,
          b: 208,
          i: 216,
          l: 222,
          s: 240,
          y: 248,
          "!": 161,
          '"': 162,
          "#": 163,
          "(": 164,
          "%": 165,
          "'": 167,
          "H ": 168,
          "+": 171,
          ";": 187,
          "<": 188,
          "=": 189,
          ">": 190,
          "?": 191,
          "{": 223
        };
        var sylk_char_regex = new RegExp("\x1BN(" + keys(sylk_escapes).join("|").replace(/\|\|\|/, "|\\||").replace(/([?()+])/g, "\\$1") + "|\\|)", "gm");
        var sylk_char_fn = function(_3, $1) {
          var o3 = sylk_escapes[$1];
          return typeof o3 == "number" ? _getansi(o3) : o3;
        };
        var decode_sylk_char = function($$, $1, $22) {
          var newcc = $1.charCodeAt(0) - 32 << 4 | $22.charCodeAt(0) - 48;
          return newcc == 59 ? $$ : _getansi(newcc);
        };
        sylk_escapes["|"] = 254;
        function sylk_to_aoa(d3, opts) {
          switch (opts.type) {
            case "base64":
              return sylk_to_aoa_str(Base64_decode(d3), opts);
            case "binary":
              return sylk_to_aoa_str(d3, opts);
            case "buffer":
              return sylk_to_aoa_str(has_buf && Buffer.isBuffer(d3) ? d3.toString("binary") : a2s(d3), opts);
            case "array":
              return sylk_to_aoa_str(cc2str(d3), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function sylk_to_aoa_str(str, opts) {
          var records = str.split(/[\n\r]+/), R2 = -1, C2 = -1, ri2 = 0, rj = 0, arr = [];
          var formats = [];
          var next_cell_format = null;
          var sht = {}, rowinfo = [], colinfo = [], cw = [];
          var Mval = 0, j3;
          if (+opts.codepage >= 0) set_cp(+opts.codepage);
          for (; ri2 !== records.length; ++ri2) {
            Mval = 0;
            var rstr = records[ri2].trim().replace(/\x1B([\x20-\x2F])([\x30-\x3F])/g, decode_sylk_char).replace(sylk_char_regex, sylk_char_fn);
            var record = rstr.replace(/;;/g, "\0").split(";").map(function(x3) {
              return x3.replace(/\u0000/g, ";");
            });
            var RT = record[0], val;
            if (rstr.length > 0) switch (RT) {
              case "ID":
                break;
              /* header */
              case "E":
                break;
              /* EOF */
              case "B":
                break;
              /* dimensions */
              case "O":
                break;
              /* options? */
              case "W":
                break;
              /* window? */
              case "P":
                if (record[1].charAt(0) == "P")
                  formats.push(rstr.slice(3).replace(/;;/g, ";"));
                break;
              case "C":
                var C_seen_K = false, C_seen_X = false, C_seen_S = false, C_seen_E = false, _R = -1, _C = -1;
                for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
                  case "A":
                    break;
                  // TODO: comment
                  case "X":
                    C2 = parseInt(record[rj].slice(1)) - 1;
                    C_seen_X = true;
                    break;
                  case "Y":
                    R2 = parseInt(record[rj].slice(1)) - 1;
                    if (!C_seen_X) C2 = 0;
                    for (j3 = arr.length; j3 <= R2; ++j3) arr[j3] = [];
                    break;
                  case "K":
                    val = record[rj].slice(1);
                    if (val.charAt(0) === '"') val = val.slice(1, val.length - 1);
                    else if (val === "TRUE") val = true;
                    else if (val === "FALSE") val = false;
                    else if (!isNaN(fuzzynum(val))) {
                      val = fuzzynum(val);
                      if (next_cell_format !== null && fmt_is_date(next_cell_format)) val = numdate(val);
                    } else if (!isNaN(fuzzydate(val).getDate())) {
                      val = parseDate(val);
                    }
                    if (typeof $cptable !== "undefined" && typeof val == "string" && (opts || {}).type != "string" && (opts || {}).codepage) val = $cptable.utils.decode(opts.codepage, val);
                    C_seen_K = true;
                    break;
                  case "E":
                    C_seen_E = true;
                    var formula = rc_to_a1(record[rj].slice(1), { r: R2, c: C2 });
                    arr[R2][C2] = [arr[R2][C2], formula];
                    break;
                  case "S":
                    C_seen_S = true;
                    arr[R2][C2] = [arr[R2][C2], "S5S"];
                    break;
                  case "G":
                    break;
                  // unknown
                  case "R":
                    _R = parseInt(record[rj].slice(1)) - 1;
                    break;
                  case "C":
                    _C = parseInt(record[rj].slice(1)) - 1;
                    break;
                  default:
                    if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
                }
                if (C_seen_K) {
                  if (arr[R2][C2] && arr[R2][C2].length == 2) arr[R2][C2][0] = val;
                  else arr[R2][C2] = val;
                  next_cell_format = null;
                }
                if (C_seen_S) {
                  if (C_seen_E) throw new Error("SYLK shared formula cannot have own formula");
                  var shrbase = _R > -1 && arr[_R][_C];
                  if (!shrbase || !shrbase[1]) throw new Error("SYLK shared formula cannot find base");
                  arr[R2][C2][1] = shift_formula_str(shrbase[1], { r: R2 - _R, c: C2 - _C });
                }
                break;
              case "F":
                var F_seen = 0;
                for (rj = 1; rj < record.length; ++rj) switch (record[rj].charAt(0)) {
                  case "X":
                    C2 = parseInt(record[rj].slice(1)) - 1;
                    ++F_seen;
                    break;
                  case "Y":
                    R2 = parseInt(record[rj].slice(1)) - 1;
                    for (j3 = arr.length; j3 <= R2; ++j3) arr[j3] = [];
                    break;
                  case "M":
                    Mval = parseInt(record[rj].slice(1)) / 20;
                    break;
                  case "F":
                    break;
                  /* ??? */
                  case "G":
                    break;
                  /* hide grid */
                  case "P":
                    next_cell_format = formats[parseInt(record[rj].slice(1))];
                    break;
                  case "S":
                    break;
                  /* cell style */
                  case "D":
                    break;
                  /* column */
                  case "N":
                    break;
                  /* font */
                  case "W":
                    cw = record[rj].slice(1).split(" ");
                    for (j3 = parseInt(cw[0], 10); j3 <= parseInt(cw[1], 10); ++j3) {
                      Mval = parseInt(cw[2], 10);
                      colinfo[j3 - 1] = Mval === 0 ? { hidden: true } : { wch: Mval };
                      process_col(colinfo[j3 - 1]);
                    }
                    break;
                  case "C":
                    C2 = parseInt(record[rj].slice(1)) - 1;
                    if (!colinfo[C2]) colinfo[C2] = {};
                    break;
                  case "R":
                    R2 = parseInt(record[rj].slice(1)) - 1;
                    if (!rowinfo[R2]) rowinfo[R2] = {};
                    if (Mval > 0) {
                      rowinfo[R2].hpt = Mval;
                      rowinfo[R2].hpx = pt2px(Mval);
                    } else if (Mval === 0) rowinfo[R2].hidden = true;
                    break;
                  default:
                    if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
                }
                if (F_seen < 1) next_cell_format = null;
                break;
              default:
                if (opts && opts.WTF) throw new Error("SYLK bad record " + rstr);
            }
          }
          if (rowinfo.length > 0) sht["!rows"] = rowinfo;
          if (colinfo.length > 0) sht["!cols"] = colinfo;
          if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
          return [arr, sht];
        }
        function sylk_to_sheet(d3, opts) {
          var aoasht = sylk_to_aoa(d3, opts);
          var aoa = aoasht[0], ws = aoasht[1];
          var o3 = aoa_to_sheet(aoa, opts);
          keys(ws).forEach(function(k3) {
            o3[k3] = ws[k3];
          });
          return o3;
        }
        function sylk_to_workbook(d3, opts) {
          return sheet_to_workbook(sylk_to_sheet(d3, opts), opts);
        }
        function write_ws_cell_sylk(cell, ws, R2, C2) {
          var o3 = "C;Y" + (R2 + 1) + ";X" + (C2 + 1) + ";K";
          switch (cell.t) {
            case "n":
              o3 += cell.v || 0;
              if (cell.f && !cell.F) o3 += ";E" + a1_to_rc(cell.f, { r: R2, c: C2 });
              break;
            case "b":
              o3 += cell.v ? "TRUE" : "FALSE";
              break;
            case "e":
              o3 += cell.w || cell.v;
              break;
            case "d":
              o3 += '"' + (cell.w || cell.v) + '"';
              break;
            case "s":
              o3 += '"' + cell.v.replace(/"/g, "").replace(/;/g, ";;") + '"';
              break;
          }
          return o3;
        }
        function write_ws_cols_sylk(out, cols) {
          cols.forEach(function(col, i3) {
            var rec = "F;W" + (i3 + 1) + " " + (i3 + 1) + " ";
            if (col.hidden) rec += "0";
            else {
              if (typeof col.width == "number" && !col.wpx) col.wpx = width2px(col.width);
              if (typeof col.wpx == "number" && !col.wch) col.wch = px2char(col.wpx);
              if (typeof col.wch == "number") rec += Math.round(col.wch);
            }
            if (rec.charAt(rec.length - 1) != " ") out.push(rec);
          });
        }
        function write_ws_rows_sylk(out, rows) {
          rows.forEach(function(row, i3) {
            var rec = "F;";
            if (row.hidden) rec += "M0;";
            else if (row.hpt) rec += "M" + 20 * row.hpt + ";";
            else if (row.hpx) rec += "M" + 20 * px2pt(row.hpx) + ";";
            if (rec.length > 2) out.push(rec + "R" + (i3 + 1));
          });
        }
        function sheet_to_sylk(ws, opts) {
          var preamble = ["ID;PWXL;N;E"], o3 = [];
          var r3 = safe_decode_range(ws["!ref"]), cell;
          var dense = Array.isArray(ws);
          var RS = "\r\n";
          preamble.push("P;PGeneral");
          preamble.push("F;P0;DG0G8;M255");
          if (ws["!cols"]) write_ws_cols_sylk(preamble, ws["!cols"]);
          if (ws["!rows"]) write_ws_rows_sylk(preamble, ws["!rows"]);
          preamble.push("B;Y" + (r3.e.r - r3.s.r + 1) + ";X" + (r3.e.c - r3.s.c + 1) + ";D" + [r3.s.c, r3.s.r, r3.e.c, r3.e.r].join(" "));
          for (var R2 = r3.s.r; R2 <= r3.e.r; ++R2) {
            for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
              var coord = encode_cell({ r: R2, c: C2 });
              cell = dense ? (ws[R2] || [])[C2] : ws[coord];
              if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
              o3.push(write_ws_cell_sylk(cell, ws, R2, C2, opts));
            }
          }
          return preamble.join(RS) + RS + o3.join(RS) + RS + "E" + RS;
        }
        return {
          to_workbook: sylk_to_workbook,
          to_sheet: sylk_to_sheet,
          from_sheet: sheet_to_sylk
        };
      }();
      var DIF = /* @__PURE__ */ function() {
        function dif_to_aoa(d3, opts) {
          switch (opts.type) {
            case "base64":
              return dif_to_aoa_str(Base64_decode(d3), opts);
            case "binary":
              return dif_to_aoa_str(d3, opts);
            case "buffer":
              return dif_to_aoa_str(has_buf && Buffer.isBuffer(d3) ? d3.toString("binary") : a2s(d3), opts);
            case "array":
              return dif_to_aoa_str(cc2str(d3), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function dif_to_aoa_str(str, opts) {
          var records = str.split("\n"), R2 = -1, C2 = -1, ri2 = 0, arr = [];
          for (; ri2 !== records.length; ++ri2) {
            if (records[ri2].trim() === "BOT") {
              arr[++R2] = [];
              C2 = 0;
              continue;
            }
            if (R2 < 0) continue;
            var metadata = records[ri2].trim().split(",");
            var type = metadata[0], value = metadata[1];
            ++ri2;
            var data = records[ri2] || "";
            while ((data.match(/["]/g) || []).length & 1 && ri2 < records.length - 1) data += "\n" + records[++ri2];
            data = data.trim();
            switch (+type) {
              case -1:
                if (data === "BOT") {
                  arr[++R2] = [];
                  C2 = 0;
                  continue;
                } else if (data !== "EOD") throw new Error("Unrecognized DIF special command " + data);
                break;
              case 0:
                if (data === "TRUE") arr[R2][C2] = true;
                else if (data === "FALSE") arr[R2][C2] = false;
                else if (!isNaN(fuzzynum(value))) arr[R2][C2] = fuzzynum(value);
                else if (!isNaN(fuzzydate(value).getDate())) arr[R2][C2] = parseDate(value);
                else arr[R2][C2] = value;
                ++C2;
                break;
              case 1:
                data = data.slice(1, data.length - 1);
                data = data.replace(/""/g, '"');
                if (DIF_XL && data && data.match(/^=".*"$/)) data = data.slice(2, -1);
                arr[R2][C2++] = data !== "" ? data : null;
                break;
            }
            if (data === "EOD") break;
          }
          if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
          return arr;
        }
        function dif_to_sheet(str, opts) {
          return aoa_to_sheet(dif_to_aoa(str, opts), opts);
        }
        function dif_to_workbook(str, opts) {
          return sheet_to_workbook(dif_to_sheet(str, opts), opts);
        }
        var sheet_to_dif = /* @__PURE__ */ function() {
          var push_field = function pf(o3, topic, v3, n3, s3) {
            o3.push(topic);
            o3.push(v3 + "," + n3);
            o3.push('"' + s3.replace(/"/g, '""') + '"');
          };
          var push_value = function po(o3, type, v3, s3) {
            o3.push(type + "," + v3);
            o3.push(type == 1 ? '"' + s3.replace(/"/g, '""') + '"' : s3);
          };
          return function sheet_to_dif2(ws) {
            var o3 = [];
            var r3 = safe_decode_range(ws["!ref"]), cell;
            var dense = Array.isArray(ws);
            push_field(o3, "TABLE", 0, 1, "sheetjs");
            push_field(o3, "VECTORS", 0, r3.e.r - r3.s.r + 1, "");
            push_field(o3, "TUPLES", 0, r3.e.c - r3.s.c + 1, "");
            push_field(o3, "DATA", 0, 0, "");
            for (var R2 = r3.s.r; R2 <= r3.e.r; ++R2) {
              push_value(o3, -1, 0, "BOT");
              for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
                var coord = encode_cell({ r: R2, c: C2 });
                cell = dense ? (ws[R2] || [])[C2] : ws[coord];
                if (!cell) {
                  push_value(o3, 1, 0, "");
                  continue;
                }
                switch (cell.t) {
                  case "n":
                    var val = DIF_XL ? cell.w : cell.v;
                    if (!val && cell.v != null) val = cell.v;
                    if (val == null) {
                      if (DIF_XL && cell.f && !cell.F) push_value(o3, 1, 0, "=" + cell.f);
                      else push_value(o3, 1, 0, "");
                    } else push_value(o3, 0, val, "V");
                    break;
                  case "b":
                    push_value(o3, 0, cell.v ? 1 : 0, cell.v ? "TRUE" : "FALSE");
                    break;
                  case "s":
                    push_value(o3, 1, 0, !DIF_XL || isNaN(cell.v) ? cell.v : '="' + cell.v + '"');
                    break;
                  case "d":
                    if (!cell.w) cell.w = SSF_format(cell.z || table_fmt[14], datenum(parseDate(cell.v)));
                    if (DIF_XL) push_value(o3, 0, cell.w, "V");
                    else push_value(o3, 1, 0, cell.w);
                    break;
                  default:
                    push_value(o3, 1, 0, "");
                }
              }
            }
            push_value(o3, -1, 0, "EOD");
            var RS = "\r\n";
            var oo = o3.join(RS);
            return oo;
          };
        }();
        return {
          to_workbook: dif_to_workbook,
          to_sheet: dif_to_sheet,
          from_sheet: sheet_to_dif
        };
      }();
      var ETH = function() {
        function decode(s3) {
          return s3.replace(/\\b/g, "\\").replace(/\\c/g, ":").replace(/\\n/g, "\n");
        }
        function encode(s3) {
          return s3.replace(/\\/g, "\\b").replace(/:/g, "\\c").replace(/\n/g, "\\n");
        }
        function eth_to_aoa(str, opts) {
          var records = str.split("\n"), R2 = -1, C2 = -1, ri2 = 0, arr = [];
          for (; ri2 !== records.length; ++ri2) {
            var record = records[ri2].trim().split(":");
            if (record[0] !== "cell") continue;
            var addr = decode_cell(record[1]);
            if (arr.length <= addr.r) {
              for (R2 = arr.length; R2 <= addr.r; ++R2) if (!arr[R2]) arr[R2] = [];
            }
            R2 = addr.r;
            C2 = addr.c;
            switch (record[2]) {
              case "t":
                arr[R2][C2] = decode(record[3]);
                break;
              case "v":
                arr[R2][C2] = +record[3];
                break;
              case "vtf":
                var _f = record[record.length - 1];
              /* falls through */
              case "vtc":
                switch (record[3]) {
                  case "nl":
                    arr[R2][C2] = +record[4] ? true : false;
                    break;
                  default:
                    arr[R2][C2] = +record[4];
                    break;
                }
                if (record[2] == "vtf") arr[R2][C2] = [arr[R2][C2], _f];
            }
          }
          if (opts && opts.sheetRows) arr = arr.slice(0, opts.sheetRows);
          return arr;
        }
        function eth_to_sheet(d3, opts) {
          return aoa_to_sheet(eth_to_aoa(d3, opts), opts);
        }
        function eth_to_workbook(d3, opts) {
          return sheet_to_workbook(eth_to_sheet(d3, opts), opts);
        }
        var header = [
          "socialcalc:version:1.5",
          "MIME-Version: 1.0",
          "Content-Type: multipart/mixed; boundary=SocialCalcSpreadsheetControlSave"
        ].join("\n");
        var sep = [
          "--SocialCalcSpreadsheetControlSave",
          "Content-type: text/plain; charset=UTF-8"
        ].join("\n") + "\n";
        var meta = [
          "# SocialCalc Spreadsheet Control Save",
          "part:sheet"
        ].join("\n");
        var end = "--SocialCalcSpreadsheetControlSave--";
        function sheet_to_eth_data(ws) {
          if (!ws || !ws["!ref"]) return "";
          var o3 = [], oo = [], cell, coord = "";
          var r3 = decode_range(ws["!ref"]);
          var dense = Array.isArray(ws);
          for (var R2 = r3.s.r; R2 <= r3.e.r; ++R2) {
            for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
              coord = encode_cell({ r: R2, c: C2 });
              cell = dense ? (ws[R2] || [])[C2] : ws[coord];
              if (!cell || cell.v == null || cell.t === "z") continue;
              oo = ["cell", coord, "t"];
              switch (cell.t) {
                case "s":
                case "str":
                  oo.push(encode(cell.v));
                  break;
                case "n":
                  if (!cell.f) {
                    oo[2] = "v";
                    oo[3] = cell.v;
                  } else {
                    oo[2] = "vtf";
                    oo[3] = "n";
                    oo[4] = cell.v;
                    oo[5] = encode(cell.f);
                  }
                  break;
                case "b":
                  oo[2] = "vt" + (cell.f ? "f" : "c");
                  oo[3] = "nl";
                  oo[4] = cell.v ? "1" : "0";
                  oo[5] = encode(cell.f || (cell.v ? "TRUE" : "FALSE"));
                  break;
                case "d":
                  var t3 = datenum(parseDate(cell.v));
                  oo[2] = "vtc";
                  oo[3] = "nd";
                  oo[4] = "" + t3;
                  oo[5] = cell.w || SSF_format(cell.z || table_fmt[14], t3);
                  break;
                case "e":
                  continue;
              }
              o3.push(oo.join(":"));
            }
          }
          o3.push("sheet:c:" + (r3.e.c - r3.s.c + 1) + ":r:" + (r3.e.r - r3.s.r + 1) + ":tvf:1");
          o3.push("valueformat:1:text-wiki");
          return o3.join("\n");
        }
        function sheet_to_eth(ws) {
          return [header, sep, meta, sep, sheet_to_eth_data(ws), end].join("\n");
        }
        return {
          to_workbook: eth_to_workbook,
          to_sheet: eth_to_sheet,
          from_sheet: sheet_to_eth
        };
      }();
      var PRN = /* @__PURE__ */ function() {
        function set_text_arr(data, arr, R2, C2, o3) {
          if (o3.raw) arr[R2][C2] = data;
          else if (data === "") {
          } else if (data === "TRUE") arr[R2][C2] = true;
          else if (data === "FALSE") arr[R2][C2] = false;
          else if (!isNaN(fuzzynum(data))) arr[R2][C2] = fuzzynum(data);
          else if (!isNaN(fuzzydate(data).getDate())) arr[R2][C2] = parseDate(data);
          else arr[R2][C2] = data;
        }
        function prn_to_aoa_str(f2, opts) {
          var o3 = opts || {};
          var arr = [];
          if (!f2 || f2.length === 0) return arr;
          var lines = f2.split(/[\r\n]/);
          var L2 = lines.length - 1;
          while (L2 >= 0 && lines[L2].length === 0) --L2;
          var start = 10, idx = 0;
          var R2 = 0;
          for (; R2 <= L2; ++R2) {
            idx = lines[R2].indexOf(" ");
            if (idx == -1) idx = lines[R2].length;
            else idx++;
            start = Math.max(start, idx);
          }
          for (R2 = 0; R2 <= L2; ++R2) {
            arr[R2] = [];
            var C2 = 0;
            set_text_arr(lines[R2].slice(0, start).trim(), arr, R2, C2, o3);
            for (C2 = 1; C2 <= (lines[R2].length - start) / 10 + 1; ++C2)
              set_text_arr(lines[R2].slice(start + (C2 - 1) * 10, start + C2 * 10).trim(), arr, R2, C2, o3);
          }
          if (o3.sheetRows) arr = arr.slice(0, o3.sheetRows);
          return arr;
        }
        var guess_seps = {
          44: ",",
          9: "	",
          59: ";",
          124: "|"
        };
        var guess_sep_weights = {
          44: 3,
          9: 2,
          59: 1,
          124: 0
        };
        function guess_sep(str) {
          var cnt = {}, instr = false, end = 0, cc = 0;
          for (; end < str.length; ++end) {
            if ((cc = str.charCodeAt(end)) == 34) instr = !instr;
            else if (!instr && cc in guess_seps) cnt[cc] = (cnt[cc] || 0) + 1;
          }
          cc = [];
          for (end in cnt) if (Object.prototype.hasOwnProperty.call(cnt, end)) {
            cc.push([cnt[end], end]);
          }
          if (!cc.length) {
            cnt = guess_sep_weights;
            for (end in cnt) if (Object.prototype.hasOwnProperty.call(cnt, end)) {
              cc.push([cnt[end], end]);
            }
          }
          cc.sort(function(a2, b3) {
            return a2[0] - b3[0] || guess_sep_weights[a2[1]] - guess_sep_weights[b3[1]];
          });
          return guess_seps[cc.pop()[1]] || 44;
        }
        function dsv_to_sheet_str(str, opts) {
          var o3 = opts || {};
          var sep = "";
          if (DENSE != null && o3.dense == null) o3.dense = DENSE;
          var ws = o3.dense ? [] : {};
          var range = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
          if (str.slice(0, 4) == "sep=") {
            if (str.charCodeAt(5) == 13 && str.charCodeAt(6) == 10) {
              sep = str.charAt(4);
              str = str.slice(7);
            } else if (str.charCodeAt(5) == 13 || str.charCodeAt(5) == 10) {
              sep = str.charAt(4);
              str = str.slice(6);
            } else sep = guess_sep(str.slice(0, 1024));
          } else if (o3 && o3.FS) sep = o3.FS;
          else sep = guess_sep(str.slice(0, 1024));
          var R2 = 0, C2 = 0, v3 = 0;
          var start = 0, end = 0, sepcc = sep.charCodeAt(0), instr = false, cc = 0, startcc = str.charCodeAt(0);
          str = str.replace(/\r\n/mg, "\n");
          var _re = o3.dateNF != null ? dateNF_regex(o3.dateNF) : null;
          function finish_cell() {
            var s3 = str.slice(start, end);
            var cell = {};
            if (s3.charAt(0) == '"' && s3.charAt(s3.length - 1) == '"') s3 = s3.slice(1, -1).replace(/""/g, '"');
            if (s3.length === 0) cell.t = "z";
            else if (o3.raw) {
              cell.t = "s";
              cell.v = s3;
            } else if (s3.trim().length === 0) {
              cell.t = "s";
              cell.v = s3;
            } else if (s3.charCodeAt(0) == 61) {
              if (s3.charCodeAt(1) == 34 && s3.charCodeAt(s3.length - 1) == 34) {
                cell.t = "s";
                cell.v = s3.slice(2, -1).replace(/""/g, '"');
              } else if (fuzzyfmla(s3)) {
                cell.t = "n";
                cell.f = s3.slice(1);
              } else {
                cell.t = "s";
                cell.v = s3;
              }
            } else if (s3 == "TRUE") {
              cell.t = "b";
              cell.v = true;
            } else if (s3 == "FALSE") {
              cell.t = "b";
              cell.v = false;
            } else if (!isNaN(v3 = fuzzynum(s3))) {
              cell.t = "n";
              if (o3.cellText !== false) cell.w = s3;
              cell.v = v3;
            } else if (!isNaN(fuzzydate(s3).getDate()) || _re && s3.match(_re)) {
              cell.z = o3.dateNF || table_fmt[14];
              var k3 = 0;
              if (_re && s3.match(_re)) {
                s3 = dateNF_fix(s3, o3.dateNF, s3.match(_re) || []);
                k3 = 1;
              }
              if (o3.cellDates) {
                cell.t = "d";
                cell.v = parseDate(s3, k3);
              } else {
                cell.t = "n";
                cell.v = datenum(parseDate(s3, k3));
              }
              if (o3.cellText !== false) cell.w = SSF_format(cell.z, cell.v instanceof Date ? datenum(cell.v) : cell.v);
              if (!o3.cellNF) delete cell.z;
            } else {
              cell.t = "s";
              cell.v = s3;
            }
            if (cell.t == "z") {
            } else if (o3.dense) {
              if (!ws[R2]) ws[R2] = [];
              ws[R2][C2] = cell;
            } else ws[encode_cell({ c: C2, r: R2 })] = cell;
            start = end + 1;
            startcc = str.charCodeAt(start);
            if (range.e.c < C2) range.e.c = C2;
            if (range.e.r < R2) range.e.r = R2;
            if (cc == sepcc) ++C2;
            else {
              C2 = 0;
              ++R2;
              if (o3.sheetRows && o3.sheetRows <= R2) return true;
            }
          }
          outer: for (; end < str.length; ++end) switch (cc = str.charCodeAt(end)) {
            case 34:
              if (startcc === 34) instr = !instr;
              break;
            case sepcc:
            case 10:
            case 13:
              if (!instr && finish_cell()) break outer;
              break;
            default:
              break;
          }
          if (end - start > 0) finish_cell();
          ws["!ref"] = encode_range(range);
          return ws;
        }
        function prn_to_sheet_str(str, opts) {
          if (!(opts && opts.PRN)) return dsv_to_sheet_str(str, opts);
          if (opts.FS) return dsv_to_sheet_str(str, opts);
          if (str.slice(0, 4) == "sep=") return dsv_to_sheet_str(str, opts);
          if (str.indexOf("	") >= 0 || str.indexOf(",") >= 0 || str.indexOf(";") >= 0) return dsv_to_sheet_str(str, opts);
          return aoa_to_sheet(prn_to_aoa_str(str, opts), opts);
        }
        function prn_to_sheet(d3, opts) {
          var str = "", bytes = opts.type == "string" ? [0, 0, 0, 0] : firstbyte(d3, opts);
          switch (opts.type) {
            case "base64":
              str = Base64_decode(d3);
              break;
            case "binary":
              str = d3;
              break;
            case "buffer":
              if (opts.codepage == 65001) str = d3.toString("utf8");
              else if (opts.codepage && typeof $cptable !== "undefined") str = $cptable.utils.decode(opts.codepage, d3);
              else str = has_buf && Buffer.isBuffer(d3) ? d3.toString("binary") : a2s(d3);
              break;
            case "array":
              str = cc2str(d3);
              break;
            case "string":
              str = d3;
              break;
            default:
              throw new Error("Unrecognized type " + opts.type);
          }
          if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191) str = utf8read(str.slice(3));
          else if (opts.type != "string" && opts.type != "buffer" && opts.codepage == 65001) str = utf8read(str);
          else if (opts.type == "binary" && typeof $cptable !== "undefined" && opts.codepage) str = $cptable.utils.decode(opts.codepage, $cptable.utils.encode(28591, str));
          if (str.slice(0, 19) == "socialcalc:version:") return ETH.to_sheet(opts.type == "string" ? str : utf8read(str), opts);
          return prn_to_sheet_str(str, opts);
        }
        function prn_to_workbook(d3, opts) {
          return sheet_to_workbook(prn_to_sheet(d3, opts), opts);
        }
        function sheet_to_prn(ws) {
          var o3 = [];
          var r3 = safe_decode_range(ws["!ref"]), cell;
          var dense = Array.isArray(ws);
          for (var R2 = r3.s.r; R2 <= r3.e.r; ++R2) {
            var oo = [];
            for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
              var coord = encode_cell({ r: R2, c: C2 });
              cell = dense ? (ws[R2] || [])[C2] : ws[coord];
              if (!cell || cell.v == null) {
                oo.push("          ");
                continue;
              }
              var w3 = (cell.w || (format_cell(cell), cell.w) || "").slice(0, 10);
              while (w3.length < 10) w3 += " ";
              oo.push(w3 + (C2 === 0 ? " " : ""));
            }
            o3.push(oo.join(""));
          }
          return o3.join("\n");
        }
        return {
          to_workbook: prn_to_workbook,
          to_sheet: prn_to_sheet,
          from_sheet: sheet_to_prn
        };
      }();
      function read_wb_ID(d3, opts) {
        var o3 = opts || {}, OLD_WTF = !!o3.WTF;
        o3.WTF = true;
        try {
          var out = SYLK.to_workbook(d3, o3);
          o3.WTF = OLD_WTF;
          return out;
        } catch (e3) {
          o3.WTF = OLD_WTF;
          if (!e3.message.match(/SYLK bad record ID/) && OLD_WTF) throw e3;
          return PRN.to_workbook(d3, opts);
        }
      }
      var WK_ = /* @__PURE__ */ function() {
        function lotushopper(data, cb, opts) {
          if (!data) return;
          prep_blob(data, data.l || 0);
          var Enum = opts.Enum || WK1Enum;
          while (data.l < data.length) {
            var RT = data.read_shift(2);
            var R2 = Enum[RT] || Enum[65535];
            var length = data.read_shift(2);
            var tgt = data.l + length;
            var d3 = R2.f && R2.f(data, length, opts);
            data.l = tgt;
            if (cb(d3, R2, RT)) return;
          }
        }
        function lotus_to_workbook(d3, opts) {
          switch (opts.type) {
            case "base64":
              return lotus_to_workbook_buf(s2a(Base64_decode(d3)), opts);
            case "binary":
              return lotus_to_workbook_buf(s2a(d3), opts);
            case "buffer":
            case "array":
              return lotus_to_workbook_buf(d3, opts);
          }
          throw "Unsupported type " + opts.type;
        }
        function lotus_to_workbook_buf(d3, opts) {
          if (!d3) return d3;
          var o3 = opts || {};
          if (DENSE != null && o3.dense == null) o3.dense = DENSE;
          var s3 = o3.dense ? [] : {}, n3 = "Sheet1", next_n = "", sidx = 0;
          var sheets = {}, snames = [], realnames = [];
          var refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
          var sheetRows = o3.sheetRows || 0;
          if (d3[2] == 0) {
            if (d3[3] == 8 || d3[3] == 9) {
              if (d3.length >= 16 && d3[14] == 5 && d3[15] === 108) throw new Error("Unsupported Works 3 for Mac file");
            }
          }
          if (d3[2] == 2) {
            o3.Enum = WK1Enum;
            lotushopper(d3, function(val, R2, RT) {
              switch (RT) {
                case 0:
                  o3.vers = val;
                  if (val >= 4096) o3.qpro = true;
                  break;
                case 6:
                  refguess = val;
                  break;
                /* RANGE */
                case 204:
                  if (val) next_n = val;
                  break;
                /* SHEETNAMECS */
                case 222:
                  next_n = val;
                  break;
                /* SHEETNAMELP */
                case 15:
                /* LABEL */
                case 51:
                  if (!o3.qpro) val[1].v = val[1].v.slice(1);
                /* falls through */
                case 13:
                /* INTEGER */
                case 14:
                /* NUMBER */
                case 16:
                  if (RT == 14 && (val[2] & 112) == 112 && (val[2] & 15) > 1 && (val[2] & 15) < 15) {
                    val[1].z = o3.dateNF || table_fmt[14];
                    if (o3.cellDates) {
                      val[1].t = "d";
                      val[1].v = numdate(val[1].v);
                    }
                  }
                  if (o3.qpro) {
                    if (val[3] > sidx) {
                      s3["!ref"] = encode_range(refguess);
                      sheets[n3] = s3;
                      snames.push(n3);
                      s3 = o3.dense ? [] : {};
                      refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                      sidx = val[3];
                      n3 = next_n || "Sheet" + (sidx + 1);
                      next_n = "";
                    }
                  }
                  var tmpcell = o3.dense ? (s3[val[0].r] || [])[val[0].c] : s3[encode_cell(val[0])];
                  if (tmpcell) {
                    tmpcell.t = val[1].t;
                    tmpcell.v = val[1].v;
                    if (val[1].z != null) tmpcell.z = val[1].z;
                    if (val[1].f != null) tmpcell.f = val[1].f;
                    break;
                  }
                  if (o3.dense) {
                    if (!s3[val[0].r]) s3[val[0].r] = [];
                    s3[val[0].r][val[0].c] = val[1];
                  } else s3[encode_cell(val[0])] = val[1];
                  break;
                default:
              }
            }, o3);
          } else if (d3[2] == 26 || d3[2] == 14) {
            o3.Enum = WK3Enum;
            if (d3[2] == 14) {
              o3.qpro = true;
              d3.l = 0;
            }
            lotushopper(d3, function(val, R2, RT) {
              switch (RT) {
                case 204:
                  n3 = val;
                  break;
                /* SHEETNAMECS */
                case 22:
                  val[1].v = val[1].v.slice(1);
                /* falls through */
                case 23:
                /* NUMBER17 */
                case 24:
                /* NUMBER18 */
                case 25:
                /* FORMULA19 */
                case 37:
                /* NUMBER25 */
                case 39:
                /* NUMBER27 */
                case 40:
                  if (val[3] > sidx) {
                    s3["!ref"] = encode_range(refguess);
                    sheets[n3] = s3;
                    snames.push(n3);
                    s3 = o3.dense ? [] : {};
                    refguess = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                    sidx = val[3];
                    n3 = "Sheet" + (sidx + 1);
                  }
                  if (sheetRows > 0 && val[0].r >= sheetRows) break;
                  if (o3.dense) {
                    if (!s3[val[0].r]) s3[val[0].r] = [];
                    s3[val[0].r][val[0].c] = val[1];
                  } else s3[encode_cell(val[0])] = val[1];
                  if (refguess.e.c < val[0].c) refguess.e.c = val[0].c;
                  if (refguess.e.r < val[0].r) refguess.e.r = val[0].r;
                  break;
                case 27:
                  if (val[14e3]) realnames[val[14e3][0]] = val[14e3][1];
                  break;
                case 1537:
                  realnames[val[0]] = val[1];
                  if (val[0] == sidx) n3 = val[1];
                  break;
                default:
                  break;
              }
            }, o3);
          } else throw new Error("Unrecognized LOTUS BOF " + d3[2]);
          s3["!ref"] = encode_range(refguess);
          sheets[next_n || n3] = s3;
          snames.push(next_n || n3);
          if (!realnames.length) return { SheetNames: snames, Sheets: sheets };
          var osheets = {}, rnames = [];
          for (var i3 = 0; i3 < realnames.length; ++i3) if (sheets[snames[i3]]) {
            rnames.push(realnames[i3] || snames[i3]);
            osheets[realnames[i3]] = sheets[realnames[i3]] || sheets[snames[i3]];
          } else {
            rnames.push(realnames[i3]);
            osheets[realnames[i3]] = { "!ref": "A1" };
          }
          return { SheetNames: rnames, Sheets: osheets };
        }
        function sheet_to_wk1(ws, opts) {
          var o3 = opts || {};
          if (+o3.codepage >= 0) set_cp(+o3.codepage);
          if (o3.type == "string") throw new Error("Cannot write WK1 to JS string");
          var ba2 = buf_array();
          var range = safe_decode_range(ws["!ref"]);
          var dense = Array.isArray(ws);
          var cols = [];
          write_biff_rec(ba2, 0, write_BOF_WK1(1030));
          write_biff_rec(ba2, 6, write_RANGE(range));
          var max_R = Math.min(range.e.r, 8191);
          for (var R2 = range.s.r; R2 <= max_R; ++R2) {
            var rr2 = encode_row(R2);
            for (var C2 = range.s.c; C2 <= range.e.c; ++C2) {
              if (R2 === range.s.r) cols[C2] = encode_col(C2);
              var ref = cols[C2] + rr2;
              var cell = dense ? (ws[R2] || [])[C2] : ws[ref];
              if (!cell || cell.t == "z") continue;
              if (cell.t == "n") {
                if ((cell.v | 0) == cell.v && cell.v >= -32768 && cell.v <= 32767) write_biff_rec(ba2, 13, write_INTEGER(R2, C2, cell.v));
                else write_biff_rec(ba2, 14, write_NUMBER(R2, C2, cell.v));
              } else {
                var str = format_cell(cell);
                write_biff_rec(ba2, 15, write_LABEL(R2, C2, str.slice(0, 239)));
              }
            }
          }
          write_biff_rec(ba2, 1);
          return ba2.end();
        }
        function book_to_wk3(wb, opts) {
          var o3 = opts || {};
          if (+o3.codepage >= 0) set_cp(+o3.codepage);
          if (o3.type == "string") throw new Error("Cannot write WK3 to JS string");
          var ba2 = buf_array();
          write_biff_rec(ba2, 0, write_BOF_WK3(wb));
          for (var i3 = 0, cnt = 0; i3 < wb.SheetNames.length; ++i3) if ((wb.Sheets[wb.SheetNames[i3]] || {})["!ref"]) write_biff_rec(ba2, 27, write_XFORMAT_SHEETNAME(wb.SheetNames[i3], cnt++));
          var wsidx = 0;
          for (i3 = 0; i3 < wb.SheetNames.length; ++i3) {
            var ws = wb.Sheets[wb.SheetNames[i3]];
            if (!ws || !ws["!ref"]) continue;
            var range = safe_decode_range(ws["!ref"]);
            var dense = Array.isArray(ws);
            var cols = [];
            var max_R = Math.min(range.e.r, 8191);
            for (var R2 = range.s.r; R2 <= max_R; ++R2) {
              var rr2 = encode_row(R2);
              for (var C2 = range.s.c; C2 <= range.e.c; ++C2) {
                if (R2 === range.s.r) cols[C2] = encode_col(C2);
                var ref = cols[C2] + rr2;
                var cell = dense ? (ws[R2] || [])[C2] : ws[ref];
                if (!cell || cell.t == "z") continue;
                if (cell.t == "n") {
                  write_biff_rec(ba2, 23, write_NUMBER_17(R2, C2, wsidx, cell.v));
                } else {
                  var str = format_cell(cell);
                  write_biff_rec(ba2, 22, write_LABEL_16(R2, C2, wsidx, str.slice(0, 239)));
                }
              }
            }
            ++wsidx;
          }
          write_biff_rec(ba2, 1);
          return ba2.end();
        }
        function write_BOF_WK1(v3) {
          var out = new_buf(2);
          out.write_shift(2, v3);
          return out;
        }
        function write_BOF_WK3(wb) {
          var out = new_buf(26);
          out.write_shift(2, 4096);
          out.write_shift(2, 4);
          out.write_shift(4, 0);
          var rows = 0, cols = 0, wscnt = 0;
          for (var i3 = 0; i3 < wb.SheetNames.length; ++i3) {
            var name = wb.SheetNames[i3];
            var ws = wb.Sheets[name];
            if (!ws || !ws["!ref"]) continue;
            ++wscnt;
            var range = decode_range(ws["!ref"]);
            if (rows < range.e.r) rows = range.e.r;
            if (cols < range.e.c) cols = range.e.c;
          }
          if (rows > 8191) rows = 8191;
          out.write_shift(2, rows);
          out.write_shift(1, wscnt);
          out.write_shift(1, cols);
          out.write_shift(2, 0);
          out.write_shift(2, 0);
          out.write_shift(1, 1);
          out.write_shift(1, 2);
          out.write_shift(4, 0);
          out.write_shift(4, 0);
          return out;
        }
        function parse_RANGE(blob, length, opts) {
          var o3 = { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } };
          if (length == 8 && opts.qpro) {
            o3.s.c = blob.read_shift(1);
            blob.l++;
            o3.s.r = blob.read_shift(2);
            o3.e.c = blob.read_shift(1);
            blob.l++;
            o3.e.r = blob.read_shift(2);
            return o3;
          }
          o3.s.c = blob.read_shift(2);
          o3.s.r = blob.read_shift(2);
          if (length == 12 && opts.qpro) blob.l += 2;
          o3.e.c = blob.read_shift(2);
          o3.e.r = blob.read_shift(2);
          if (length == 12 && opts.qpro) blob.l += 2;
          if (o3.s.c == 65535) o3.s.c = o3.e.c = o3.s.r = o3.e.r = 0;
          return o3;
        }
        function write_RANGE(range) {
          var out = new_buf(8);
          out.write_shift(2, range.s.c);
          out.write_shift(2, range.s.r);
          out.write_shift(2, range.e.c);
          out.write_shift(2, range.e.r);
          return out;
        }
        function parse_cell(blob, length, opts) {
          var o3 = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0, 0];
          if (opts.qpro && opts.vers != 20768) {
            o3[0].c = blob.read_shift(1);
            o3[3] = blob.read_shift(1);
            o3[0].r = blob.read_shift(2);
            blob.l += 2;
          } else {
            o3[2] = blob.read_shift(1);
            o3[0].c = blob.read_shift(2);
            o3[0].r = blob.read_shift(2);
          }
          return o3;
        }
        function parse_LABEL(blob, length, opts) {
          var tgt = blob.l + length;
          var o3 = parse_cell(blob, length, opts);
          o3[1].t = "s";
          if (opts.vers == 20768) {
            blob.l++;
            var len = blob.read_shift(1);
            o3[1].v = blob.read_shift(len, "utf8");
            return o3;
          }
          if (opts.qpro) blob.l++;
          o3[1].v = blob.read_shift(tgt - blob.l, "cstr");
          return o3;
        }
        function write_LABEL(R2, C2, s3) {
          var o3 = new_buf(7 + s3.length);
          o3.write_shift(1, 255);
          o3.write_shift(2, C2);
          o3.write_shift(2, R2);
          o3.write_shift(1, 39);
          for (var i3 = 0; i3 < o3.length; ++i3) {
            var cc = s3.charCodeAt(i3);
            o3.write_shift(1, cc >= 128 ? 95 : cc);
          }
          o3.write_shift(1, 0);
          return o3;
        }
        function parse_INTEGER(blob, length, opts) {
          var o3 = parse_cell(blob, length, opts);
          o3[1].v = blob.read_shift(2, "i");
          return o3;
        }
        function write_INTEGER(R2, C2, v3) {
          var o3 = new_buf(7);
          o3.write_shift(1, 255);
          o3.write_shift(2, C2);
          o3.write_shift(2, R2);
          o3.write_shift(2, v3, "i");
          return o3;
        }
        function parse_NUMBER(blob, length, opts) {
          var o3 = parse_cell(blob, length, opts);
          o3[1].v = blob.read_shift(8, "f");
          return o3;
        }
        function write_NUMBER(R2, C2, v3) {
          var o3 = new_buf(13);
          o3.write_shift(1, 255);
          o3.write_shift(2, C2);
          o3.write_shift(2, R2);
          o3.write_shift(8, v3, "f");
          return o3;
        }
        function parse_FORMULA(blob, length, opts) {
          var tgt = blob.l + length;
          var o3 = parse_cell(blob, length, opts);
          o3[1].v = blob.read_shift(8, "f");
          if (opts.qpro) blob.l = tgt;
          else {
            var flen = blob.read_shift(2);
            wk1_fmla_to_csf(blob.slice(blob.l, blob.l + flen), o3);
            blob.l += flen;
          }
          return o3;
        }
        function wk1_parse_rc(B3, V2, col) {
          var rel = V2 & 32768;
          V2 &= ~32768;
          V2 = (rel ? B3 : 0) + (V2 >= 8192 ? V2 - 16384 : V2);
          return (rel ? "" : "$") + (col ? encode_col(V2) : encode_row(V2));
        }
        var FuncTab = {
          51: ["FALSE", 0],
          52: ["TRUE", 0],
          70: ["LEN", 1],
          80: ["SUM", 69],
          81: ["AVERAGEA", 69],
          82: ["COUNTA", 69],
          83: ["MINA", 69],
          84: ["MAXA", 69],
          111: ["T", 1]
        };
        var BinOpTab = [
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          "",
          // eslint-disable-line no-mixed-spaces-and-tabs
          "",
          "+",
          "-",
          "*",
          "/",
          "^",
          "=",
          "<>",
          // eslint-disable-line no-mixed-spaces-and-tabs
          "<=",
          ">=",
          "<",
          ">",
          "",
          "",
          "",
          "",
          // eslint-disable-line no-mixed-spaces-and-tabs
          "&",
          "",
          "",
          "",
          "",
          "",
          "",
          ""
          // eslint-disable-line no-mixed-spaces-and-tabs
        ];
        function wk1_fmla_to_csf(blob, o3) {
          prep_blob(blob, 0);
          var out = [], argc = 0, R2 = "", C2 = "", argL = "", argR = "";
          while (blob.l < blob.length) {
            var cc = blob[blob.l++];
            switch (cc) {
              case 0:
                out.push(blob.read_shift(8, "f"));
                break;
              case 1:
                {
                  C2 = wk1_parse_rc(o3[0].c, blob.read_shift(2), true);
                  R2 = wk1_parse_rc(o3[0].r, blob.read_shift(2), false);
                  out.push(C2 + R2);
                }
                break;
              case 2:
                {
                  var c3 = wk1_parse_rc(o3[0].c, blob.read_shift(2), true);
                  var r3 = wk1_parse_rc(o3[0].r, blob.read_shift(2), false);
                  C2 = wk1_parse_rc(o3[0].c, blob.read_shift(2), true);
                  R2 = wk1_parse_rc(o3[0].r, blob.read_shift(2), false);
                  out.push(c3 + r3 + ":" + C2 + R2);
                }
                break;
              case 3:
                if (blob.l < blob.length) {
                  console.error("WK1 premature formula end");
                  return;
                }
                break;
              case 4:
                out.push("(" + out.pop() + ")");
                break;
              case 5:
                out.push(blob.read_shift(2));
                break;
              case 6:
                {
                  var Z2 = "";
                  while (cc = blob[blob.l++]) Z2 += String.fromCharCode(cc);
                  out.push('"' + Z2.replace(/"/g, '""') + '"');
                }
                break;
              case 8:
                out.push("-" + out.pop());
                break;
              case 23:
                out.push("+" + out.pop());
                break;
              case 22:
                out.push("NOT(" + out.pop() + ")");
                break;
              case 20:
              case 21:
                {
                  argR = out.pop();
                  argL = out.pop();
                  out.push(["AND", "OR"][cc - 20] + "(" + argL + "," + argR + ")");
                }
                break;
              default:
                if (cc < 32 && BinOpTab[cc]) {
                  argR = out.pop();
                  argL = out.pop();
                  out.push(argL + BinOpTab[cc] + argR);
                } else if (FuncTab[cc]) {
                  argc = FuncTab[cc][1];
                  if (argc == 69) argc = blob[blob.l++];
                  if (argc > out.length) {
                    console.error("WK1 bad formula parse 0x" + cc.toString(16) + ":|" + out.join("|") + "|");
                    return;
                  }
                  var args = out.slice(-argc);
                  out.length -= argc;
                  out.push(FuncTab[cc][0] + "(" + args.join(",") + ")");
                } else if (cc <= 7) return console.error("WK1 invalid opcode " + cc.toString(16));
                else if (cc <= 24) return console.error("WK1 unsupported op " + cc.toString(16));
                else if (cc <= 30) return console.error("WK1 invalid opcode " + cc.toString(16));
                else if (cc <= 115) return console.error("WK1 unsupported function opcode " + cc.toString(16));
                else return console.error("WK1 unrecognized opcode " + cc.toString(16));
            }
          }
          if (out.length == 1) o3[1].f = "" + out[0];
          else console.error("WK1 bad formula parse |" + out.join("|") + "|");
        }
        function parse_cell_3(blob) {
          var o3 = [{ c: 0, r: 0 }, { t: "n", v: 0 }, 0];
          o3[0].r = blob.read_shift(2);
          o3[3] = blob[blob.l++];
          o3[0].c = blob[blob.l++];
          return o3;
        }
        function parse_LABEL_16(blob, length) {
          var o3 = parse_cell_3(blob, length);
          o3[1].t = "s";
          o3[1].v = blob.read_shift(length - 4, "cstr");
          return o3;
        }
        function write_LABEL_16(R2, C2, wsidx, s3) {
          var o3 = new_buf(6 + s3.length);
          o3.write_shift(2, R2);
          o3.write_shift(1, wsidx);
          o3.write_shift(1, C2);
          o3.write_shift(1, 39);
          for (var i3 = 0; i3 < s3.length; ++i3) {
            var cc = s3.charCodeAt(i3);
            o3.write_shift(1, cc >= 128 ? 95 : cc);
          }
          o3.write_shift(1, 0);
          return o3;
        }
        function parse_NUMBER_18(blob, length) {
          var o3 = parse_cell_3(blob, length);
          o3[1].v = blob.read_shift(2);
          var v3 = o3[1].v >> 1;
          if (o3[1].v & 1) {
            switch (v3 & 7) {
              case 0:
                v3 = (v3 >> 3) * 5e3;
                break;
              case 1:
                v3 = (v3 >> 3) * 500;
                break;
              case 2:
                v3 = (v3 >> 3) / 20;
                break;
              case 3:
                v3 = (v3 >> 3) / 200;
                break;
              case 4:
                v3 = (v3 >> 3) / 2e3;
                break;
              case 5:
                v3 = (v3 >> 3) / 2e4;
                break;
              case 6:
                v3 = (v3 >> 3) / 16;
                break;
              case 7:
                v3 = (v3 >> 3) / 64;
                break;
            }
          }
          o3[1].v = v3;
          return o3;
        }
        function parse_NUMBER_17(blob, length) {
          var o3 = parse_cell_3(blob, length);
          var v1 = blob.read_shift(4);
          var v22 = blob.read_shift(4);
          var e3 = blob.read_shift(2);
          if (e3 == 65535) {
            if (v1 === 0 && v22 === 3221225472) {
              o3[1].t = "e";
              o3[1].v = 15;
            } else if (v1 === 0 && v22 === 3489660928) {
              o3[1].t = "e";
              o3[1].v = 42;
            } else o3[1].v = 0;
            return o3;
          }
          var s3 = e3 & 32768;
          e3 = (e3 & 32767) - 16446;
          o3[1].v = (1 - s3 * 2) * (v22 * Math.pow(2, e3 + 32) + v1 * Math.pow(2, e3));
          return o3;
        }
        function write_NUMBER_17(R2, C2, wsidx, v3) {
          var o3 = new_buf(14);
          o3.write_shift(2, R2);
          o3.write_shift(1, wsidx);
          o3.write_shift(1, C2);
          if (v3 == 0) {
            o3.write_shift(4, 0);
            o3.write_shift(4, 0);
            o3.write_shift(2, 65535);
            return o3;
          }
          var s3 = 0, e3 = 0, v1 = 0, v22 = 0;
          if (v3 < 0) {
            s3 = 1;
            v3 = -v3;
          }
          e3 = Math.log2(v3) | 0;
          v3 /= Math.pow(2, e3 - 31);
          v22 = v3 >>> 0;
          if ((v22 & 2147483648) == 0) {
            v3 /= 2;
            ++e3;
            v22 = v3 >>> 0;
          }
          v3 -= v22;
          v22 |= 2147483648;
          v22 >>>= 0;
          v3 *= Math.pow(2, 32);
          v1 = v3 >>> 0;
          o3.write_shift(4, v1);
          o3.write_shift(4, v22);
          e3 += 16383 + (s3 ? 32768 : 0);
          o3.write_shift(2, e3);
          return o3;
        }
        function parse_FORMULA_19(blob, length) {
          var o3 = parse_NUMBER_17(blob, 14);
          blob.l += length - 14;
          return o3;
        }
        function parse_NUMBER_25(blob, length) {
          var o3 = parse_cell_3(blob, length);
          var v1 = blob.read_shift(4);
          o3[1].v = v1 >> 6;
          return o3;
        }
        function parse_NUMBER_27(blob, length) {
          var o3 = parse_cell_3(blob, length);
          var v1 = blob.read_shift(8, "f");
          o3[1].v = v1;
          return o3;
        }
        function parse_FORMULA_28(blob, length) {
          var o3 = parse_NUMBER_27(blob, 14);
          blob.l += length - 10;
          return o3;
        }
        function parse_SHEETNAMECS(blob, length) {
          return blob[blob.l + length - 1] == 0 ? blob.read_shift(length, "cstr") : "";
        }
        function parse_SHEETNAMELP(blob, length) {
          var len = blob[blob.l++];
          if (len > length - 1) len = length - 1;
          var o3 = "";
          while (o3.length < len) o3 += String.fromCharCode(blob[blob.l++]);
          return o3;
        }
        function parse_SHEETINFOQP(blob, length, opts) {
          if (!opts.qpro || length < 21) return;
          var id = blob.read_shift(1);
          blob.l += 17;
          blob.l += 1;
          blob.l += 2;
          var nm = blob.read_shift(length - 21, "cstr");
          return [id, nm];
        }
        function parse_XFORMAT(blob, length) {
          var o3 = {}, tgt = blob.l + length;
          while (blob.l < tgt) {
            var dt2 = blob.read_shift(2);
            if (dt2 == 14e3) {
              o3[dt2] = [0, ""];
              o3[dt2][0] = blob.read_shift(2);
              while (blob[blob.l]) {
                o3[dt2][1] += String.fromCharCode(blob[blob.l]);
                blob.l++;
              }
              blob.l++;
            }
          }
          return o3;
        }
        function write_XFORMAT_SHEETNAME(name, wsidx) {
          var out = new_buf(5 + name.length);
          out.write_shift(2, 14e3);
          out.write_shift(2, wsidx);
          for (var i3 = 0; i3 < name.length; ++i3) {
            var cc = name.charCodeAt(i3);
            out[out.l++] = cc > 127 ? 95 : cc;
          }
          out[out.l++] = 0;
          return out;
        }
        var WK1Enum = {
          0: { n: "BOF", f: parseuint16 },
          1: { n: "EOF" },
          2: { n: "CALCMODE" },
          3: { n: "CALCORDER" },
          4: { n: "SPLIT" },
          5: { n: "SYNC" },
          6: { n: "RANGE", f: parse_RANGE },
          7: { n: "WINDOW1" },
          8: { n: "COLW1" },
          9: { n: "WINTWO" },
          10: { n: "COLW2" },
          11: { n: "NAME" },
          12: { n: "BLANK" },
          13: { n: "INTEGER", f: parse_INTEGER },
          14: { n: "NUMBER", f: parse_NUMBER },
          15: { n: "LABEL", f: parse_LABEL },
          16: { n: "FORMULA", f: parse_FORMULA },
          24: { n: "TABLE" },
          25: { n: "ORANGE" },
          26: { n: "PRANGE" },
          27: { n: "SRANGE" },
          28: { n: "FRANGE" },
          29: { n: "KRANGE1" },
          32: { n: "HRANGE" },
          35: { n: "KRANGE2" },
          36: { n: "PROTEC" },
          37: { n: "FOOTER" },
          38: { n: "HEADER" },
          39: { n: "SETUP" },
          40: { n: "MARGINS" },
          41: { n: "LABELFMT" },
          42: { n: "TITLES" },
          43: { n: "SHEETJS" },
          45: { n: "GRAPH" },
          46: { n: "NGRAPH" },
          47: { n: "CALCCOUNT" },
          48: { n: "UNFORMATTED" },
          49: { n: "CURSORW12" },
          50: { n: "WINDOW" },
          51: { n: "STRING", f: parse_LABEL },
          55: { n: "PASSWORD" },
          56: { n: "LOCKED" },
          60: { n: "QUERY" },
          61: { n: "QUERYNAME" },
          62: { n: "PRINT" },
          63: { n: "PRINTNAME" },
          64: { n: "GRAPH2" },
          65: { n: "GRAPHNAME" },
          66: { n: "ZOOM" },
          67: { n: "SYMSPLIT" },
          68: { n: "NSROWS" },
          69: { n: "NSCOLS" },
          70: { n: "RULER" },
          71: { n: "NNAME" },
          72: { n: "ACOMM" },
          73: { n: "AMACRO" },
          74: { n: "PARSE" },
          102: { n: "PRANGES??" },
          103: { n: "RRANGES??" },
          104: { n: "FNAME??" },
          105: { n: "MRANGES??" },
          204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
          222: { n: "SHEETNAMELP", f: parse_SHEETNAMELP },
          65535: { n: "" }
        };
        var WK3Enum = {
          0: { n: "BOF" },
          1: { n: "EOF" },
          2: { n: "PASSWORD" },
          3: { n: "CALCSET" },
          4: { n: "WINDOWSET" },
          5: { n: "SHEETCELLPTR" },
          6: { n: "SHEETLAYOUT" },
          7: { n: "COLUMNWIDTH" },
          8: { n: "HIDDENCOLUMN" },
          9: { n: "USERRANGE" },
          10: { n: "SYSTEMRANGE" },
          11: { n: "ZEROFORCE" },
          12: { n: "SORTKEYDIR" },
          13: { n: "FILESEAL" },
          14: { n: "DATAFILLNUMS" },
          15: { n: "PRINTMAIN" },
          16: { n: "PRINTSTRING" },
          17: { n: "GRAPHMAIN" },
          18: { n: "GRAPHSTRING" },
          19: { n: "??" },
          20: { n: "ERRCELL" },
          21: { n: "NACELL" },
          22: { n: "LABEL16", f: parse_LABEL_16 },
          23: { n: "NUMBER17", f: parse_NUMBER_17 },
          24: { n: "NUMBER18", f: parse_NUMBER_18 },
          25: { n: "FORMULA19", f: parse_FORMULA_19 },
          26: { n: "FORMULA1A" },
          27: { n: "XFORMAT", f: parse_XFORMAT },
          28: { n: "DTLABELMISC" },
          29: { n: "DTLABELCELL" },
          30: { n: "GRAPHWINDOW" },
          31: { n: "CPA" },
          32: { n: "LPLAUTO" },
          33: { n: "QUERY" },
          34: { n: "HIDDENSHEET" },
          35: { n: "??" },
          37: { n: "NUMBER25", f: parse_NUMBER_25 },
          38: { n: "??" },
          39: { n: "NUMBER27", f: parse_NUMBER_27 },
          40: { n: "FORMULA28", f: parse_FORMULA_28 },
          142: { n: "??" },
          147: { n: "??" },
          150: { n: "??" },
          151: { n: "??" },
          152: { n: "??" },
          153: { n: "??" },
          154: { n: "??" },
          155: { n: "??" },
          156: { n: "??" },
          163: { n: "??" },
          174: { n: "??" },
          175: { n: "??" },
          176: { n: "??" },
          177: { n: "??" },
          184: { n: "??" },
          185: { n: "??" },
          186: { n: "??" },
          187: { n: "??" },
          188: { n: "??" },
          195: { n: "??" },
          201: { n: "??" },
          204: { n: "SHEETNAMECS", f: parse_SHEETNAMECS },
          205: { n: "??" },
          206: { n: "??" },
          207: { n: "??" },
          208: { n: "??" },
          256: { n: "??" },
          259: { n: "??" },
          260: { n: "??" },
          261: { n: "??" },
          262: { n: "??" },
          263: { n: "??" },
          265: { n: "??" },
          266: { n: "??" },
          267: { n: "??" },
          268: { n: "??" },
          270: { n: "??" },
          271: { n: "??" },
          384: { n: "??" },
          389: { n: "??" },
          390: { n: "??" },
          393: { n: "??" },
          396: { n: "??" },
          512: { n: "??" },
          514: { n: "??" },
          513: { n: "??" },
          516: { n: "??" },
          517: { n: "??" },
          640: { n: "??" },
          641: { n: "??" },
          642: { n: "??" },
          643: { n: "??" },
          644: { n: "??" },
          645: { n: "??" },
          646: { n: "??" },
          647: { n: "??" },
          648: { n: "??" },
          658: { n: "??" },
          659: { n: "??" },
          660: { n: "??" },
          661: { n: "??" },
          662: { n: "??" },
          665: { n: "??" },
          666: { n: "??" },
          768: { n: "??" },
          772: { n: "??" },
          1537: { n: "SHEETINFOQP", f: parse_SHEETINFOQP },
          1600: { n: "??" },
          1602: { n: "??" },
          1793: { n: "??" },
          1794: { n: "??" },
          1795: { n: "??" },
          1796: { n: "??" },
          1920: { n: "??" },
          2048: { n: "??" },
          2049: { n: "??" },
          2052: { n: "??" },
          2688: { n: "??" },
          10998: { n: "??" },
          12849: { n: "??" },
          28233: { n: "??" },
          28484: { n: "??" },
          65535: { n: "" }
        };
        return {
          sheet_to_wk1,
          book_to_wk3,
          to_workbook: lotus_to_workbook
        };
      }();
      function parse_rpr(rpr) {
        var font = {}, m3 = rpr.match(tagregex), i3 = 0;
        var pass = false;
        if (m3) for (; i3 != m3.length; ++i3) {
          var y3 = parsexmltag(m3[i3]);
          switch (y3[0].replace(/\w*:/g, "")) {
            /* 18.8.12 condense CT_BooleanProperty */
            /* ** not required . */
            case "<condense":
              break;
            /* 18.8.17 extend CT_BooleanProperty */
            /* ** not required . */
            case "<extend":
              break;
            /* 18.8.36 shadow CT_BooleanProperty */
            /* ** not required . */
            case "<shadow":
              if (!y3.val) break;
            /* falls through */
            case "<shadow>":
            case "<shadow/>":
              font.shadow = 1;
              break;
            case "</shadow>":
              break;
            /* 18.4.1 charset CT_IntProperty TODO */
            case "<charset":
              if (y3.val == "1") break;
              font.cp = CS2CP[parseInt(y3.val, 10)];
              break;
            /* 18.4.2 outline CT_BooleanProperty TODO */
            case "<outline":
              if (!y3.val) break;
            /* falls through */
            case "<outline>":
            case "<outline/>":
              font.outline = 1;
              break;
            case "</outline>":
              break;
            /* 18.4.5 rFont CT_FontName */
            case "<rFont":
              font.name = y3.val;
              break;
            /* 18.4.11 sz CT_FontSize */
            case "<sz":
              font.sz = y3.val;
              break;
            /* 18.4.10 strike CT_BooleanProperty */
            case "<strike":
              if (!y3.val) break;
            /* falls through */
            case "<strike>":
            case "<strike/>":
              font.strike = 1;
              break;
            case "</strike>":
              break;
            /* 18.4.13 u CT_UnderlineProperty */
            case "<u":
              if (!y3.val) break;
              switch (y3.val) {
                case "double":
                  font.uval = "double";
                  break;
                case "singleAccounting":
                  font.uval = "single-accounting";
                  break;
                case "doubleAccounting":
                  font.uval = "double-accounting";
                  break;
              }
            /* falls through */
            case "<u>":
            case "<u/>":
              font.u = 1;
              break;
            case "</u>":
              break;
            /* 18.8.2 b */
            case "<b":
              if (y3.val == "0") break;
            /* falls through */
            case "<b>":
            case "<b/>":
              font.b = 1;
              break;
            case "</b>":
              break;
            /* 18.8.26 i */
            case "<i":
              if (y3.val == "0") break;
            /* falls through */
            case "<i>":
            case "<i/>":
              font.i = 1;
              break;
            case "</i>":
              break;
            /* 18.3.1.15 color CT_Color TODO: tint, theme, auto, indexed */
            case "<color":
              if (y3.rgb) font.color = y3.rgb.slice(2, 8);
              break;
            case "<color>":
            case "<color/>":
            case "</color>":
              break;
            /* 18.8.18 family ST_FontFamily */
            case "<family":
              font.family = y3.val;
              break;
            case "<family>":
            case "<family/>":
            case "</family>":
              break;
            /* 18.4.14 vertAlign CT_VerticalAlignFontProperty TODO */
            case "<vertAlign":
              font.valign = y3.val;
              break;
            case "<vertAlign>":
            case "<vertAlign/>":
            case "</vertAlign>":
              break;
            /* 18.8.35 scheme CT_FontScheme TODO */
            case "<scheme":
              break;
            case "<scheme>":
            case "<scheme/>":
            case "</scheme>":
              break;
            /* 18.2.10 extLst CT_ExtensionList ? */
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (y3[0].charCodeAt(1) !== 47 && !pass) throw new Error("Unrecognized rich format " + y3[0]);
          }
        }
        return font;
      }
      var parse_rs = function() {
        var tregex = matchtag("t"), rpregex = matchtag("rPr");
        function parse_r(r3) {
          var t3 = r3.match(tregex);
          if (!t3) return { t: "s", v: "" };
          var o3 = { t: "s", v: unescapexml(t3[1]) };
          var rpr = r3.match(rpregex);
          if (rpr) o3.s = parse_rpr(rpr[1]);
          return o3;
        }
        var rregex = /<(?:\w+:)?r>/g, rend = /<\/(?:\w+:)?r>/;
        return function parse_rs2(rs) {
          return rs.replace(rregex, "").split(rend).map(parse_r).filter(function(r3) {
            return r3.v;
          });
        };
      }();
      var rs_to_html = /* @__PURE__ */ function parse_rs_factory() {
        var nlregex = /(\r\n|\n)/g;
        function parse_rpr2(font, intro, outro) {
          var style = [];
          if (font.u) style.push("text-decoration: underline;");
          if (font.uval) style.push("text-underline-style:" + font.uval + ";");
          if (font.sz) style.push("font-size:" + font.sz + "pt;");
          if (font.outline) style.push("text-effect: outline;");
          if (font.shadow) style.push("text-shadow: auto;");
          intro.push('<span style="' + style.join("") + '">');
          if (font.b) {
            intro.push("<b>");
            outro.push("</b>");
          }
          if (font.i) {
            intro.push("<i>");
            outro.push("</i>");
          }
          if (font.strike) {
            intro.push("<s>");
            outro.push("</s>");
          }
          var align = font.valign || "";
          if (align == "superscript" || align == "super") align = "sup";
          else if (align == "subscript") align = "sub";
          if (align != "") {
            intro.push("<" + align + ">");
            outro.push("</" + align + ">");
          }
          outro.push("</span>");
          return font;
        }
        function r_to_html(r3) {
          var terms = [[], r3.v, []];
          if (!r3.v) return "";
          if (r3.s) parse_rpr2(r3.s, terms[0], terms[2]);
          return terms[0].join("") + terms[1].replace(nlregex, "<br/>") + terms[2].join("");
        }
        return function parse_rs2(rs) {
          return rs.map(r_to_html).join("");
        };
      }();
      var sitregex = /<(?:\w+:)?t[^>]*>([^<]*)<\/(?:\w+:)?t>/g, sirregex = /<(?:\w+:)?r>/;
      var sirphregex = /<(?:\w+:)?rPh.*?>([\s\S]*?)<\/(?:\w+:)?rPh>/g;
      function parse_si(x3, opts) {
        var html = opts ? opts.cellHTML : true;
        var z4 = {};
        if (!x3) return { t: "" };
        if (x3.match(/^\s*<(?:\w+:)?t[^>]*>/)) {
          z4.t = unescapexml(utf8read(x3.slice(x3.indexOf(">") + 1).split(/<\/(?:\w+:)?t>/)[0] || ""));
          z4.r = utf8read(x3);
          if (html) z4.h = escapehtml(z4.t);
        } else if (
          /*y = */
          x3.match(sirregex)
        ) {
          z4.r = utf8read(x3);
          z4.t = unescapexml(utf8read((x3.replace(sirphregex, "").match(sitregex) || []).join("").replace(tagregex, "")));
          if (html) z4.h = rs_to_html(parse_rs(z4.r));
        }
        return z4;
      }
      var sstr0 = /<(?:\w+:)?sst([^>]*)>([\s\S]*)<\/(?:\w+:)?sst>/;
      var sstr1 = /<(?:\w+:)?(?:si|sstItem)>/g;
      var sstr2 = /<\/(?:\w+:)?(?:si|sstItem)>/;
      function parse_sst_xml(data, opts) {
        var s3 = [], ss = "";
        if (!data) return s3;
        var sst = data.match(sstr0);
        if (sst) {
          ss = sst[2].replace(sstr1, "").split(sstr2);
          for (var i3 = 0; i3 != ss.length; ++i3) {
            var o3 = parse_si(ss[i3].trim(), opts);
            if (o3 != null) s3[s3.length] = o3;
          }
          sst = parsexmltag(sst[1]);
          s3.Count = sst.count;
          s3.Unique = sst.uniqueCount;
        }
        return s3;
      }
      var straywsregex = /^\s|\s$|[\t\n\r]/;
      function write_sst_xml(sst, opts) {
        if (!opts.bookSST) return "";
        var o3 = [XML_HEADER];
        o3[o3.length] = writextag("sst", null, {
          xmlns: XMLNS_main[0],
          count: sst.Count,
          uniqueCount: sst.Unique
        });
        for (var i3 = 0; i3 != sst.length; ++i3) {
          if (sst[i3] == null) continue;
          var s3 = sst[i3];
          var sitag = "<si>";
          if (s3.r) sitag += s3.r;
          else {
            sitag += "<t";
            if (!s3.t) s3.t = "";
            if (s3.t.match(straywsregex)) sitag += ' xml:space="preserve"';
            sitag += ">" + escapexml(s3.t) + "</t>";
          }
          sitag += "</si>";
          o3[o3.length] = sitag;
        }
        if (o3.length > 2) {
          o3[o3.length] = "</sst>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      function parse_BrtBeginSst(data) {
        return [data.read_shift(4), data.read_shift(4)];
      }
      function parse_sst_bin(data, opts) {
        var s3 = [];
        var pass = false;
        recordhopper(data, function hopper_sst(val, R2, RT) {
          switch (RT) {
            case 159:
              s3.Count = val[0];
              s3.Unique = val[1];
              break;
            case 19:
              s3.push(val);
              break;
            case 160:
              return true;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            default:
              if (R2.T) {
              }
              if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return s3;
      }
      function write_BrtBeginSst(sst, o3) {
        if (!o3) o3 = new_buf(8);
        o3.write_shift(4, sst.Count);
        o3.write_shift(4, sst.Unique);
        return o3;
      }
      var write_BrtSSTItem = write_RichStr;
      function write_sst_bin(sst) {
        var ba2 = buf_array();
        write_record(ba2, 159, write_BrtBeginSst(sst));
        for (var i3 = 0; i3 < sst.length; ++i3) write_record(ba2, 19, write_BrtSSTItem(sst[i3]));
        write_record(
          ba2,
          160
          /* BrtEndSst */
        );
        return ba2.end();
      }
      function _JS2ANSI(str) {
        if (typeof $cptable !== "undefined") return $cptable.utils.encode(current_ansi, str);
        var o3 = [], oo = str.split("");
        for (var i3 = 0; i3 < oo.length; ++i3) o3[i3] = oo[i3].charCodeAt(0);
        return o3;
      }
      function parse_CRYPTOVersion(blob, length) {
        var o3 = {};
        o3.Major = blob.read_shift(2);
        o3.Minor = blob.read_shift(2);
        if (length >= 4) blob.l += length - 4;
        return o3;
      }
      function parse_DataSpaceVersionInfo(blob) {
        var o3 = {};
        o3.id = blob.read_shift(0, "lpp4");
        o3.R = parse_CRYPTOVersion(blob, 4);
        o3.U = parse_CRYPTOVersion(blob, 4);
        o3.W = parse_CRYPTOVersion(blob, 4);
        return o3;
      }
      function parse_DataSpaceMapEntry(blob) {
        var len = blob.read_shift(4);
        var end = blob.l + len - 4;
        var o3 = {};
        var cnt = blob.read_shift(4);
        var comps = [];
        while (cnt-- > 0) comps.push({ t: blob.read_shift(4), v: blob.read_shift(0, "lpp4") });
        o3.name = blob.read_shift(0, "lpp4");
        o3.comps = comps;
        if (blob.l != end) throw new Error("Bad DataSpaceMapEntry: " + blob.l + " != " + end);
        return o3;
      }
      function parse_DataSpaceMap(blob) {
        var o3 = [];
        blob.l += 4;
        var cnt = blob.read_shift(4);
        while (cnt-- > 0) o3.push(parse_DataSpaceMapEntry(blob));
        return o3;
      }
      function parse_DataSpaceDefinition(blob) {
        var o3 = [];
        blob.l += 4;
        var cnt = blob.read_shift(4);
        while (cnt-- > 0) o3.push(blob.read_shift(0, "lpp4"));
        return o3;
      }
      function parse_TransformInfoHeader(blob) {
        var o3 = {};
        blob.read_shift(4);
        blob.l += 4;
        o3.id = blob.read_shift(0, "lpp4");
        o3.name = blob.read_shift(0, "lpp4");
        o3.R = parse_CRYPTOVersion(blob, 4);
        o3.U = parse_CRYPTOVersion(blob, 4);
        o3.W = parse_CRYPTOVersion(blob, 4);
        return o3;
      }
      function parse_Primary(blob) {
        var hdr = parse_TransformInfoHeader(blob);
        hdr.ename = blob.read_shift(0, "8lpp4");
        hdr.blksz = blob.read_shift(4);
        hdr.cmode = blob.read_shift(4);
        if (blob.read_shift(4) != 4) throw new Error("Bad !Primary record");
        return hdr;
      }
      function parse_EncryptionHeader(blob, length) {
        var tgt = blob.l + length;
        var o3 = {};
        o3.Flags = blob.read_shift(4) & 63;
        blob.l += 4;
        o3.AlgID = blob.read_shift(4);
        var valid = false;
        switch (o3.AlgID) {
          case 26126:
          case 26127:
          case 26128:
            valid = o3.Flags == 36;
            break;
          case 26625:
            valid = o3.Flags == 4;
            break;
          case 0:
            valid = o3.Flags == 16 || o3.Flags == 4 || o3.Flags == 36;
            break;
          default:
            throw "Unrecognized encryption algorithm: " + o3.AlgID;
        }
        if (!valid) throw new Error("Encryption Flags/AlgID mismatch");
        o3.AlgIDHash = blob.read_shift(4);
        o3.KeySize = blob.read_shift(4);
        o3.ProviderType = blob.read_shift(4);
        blob.l += 8;
        o3.CSPName = blob.read_shift(tgt - blob.l >> 1, "utf16le");
        blob.l = tgt;
        return o3;
      }
      function parse_EncryptionVerifier(blob, length) {
        var o3 = {}, tgt = blob.l + length;
        blob.l += 4;
        o3.Salt = blob.slice(blob.l, blob.l + 16);
        blob.l += 16;
        o3.Verifier = blob.slice(blob.l, blob.l + 16);
        blob.l += 16;
        blob.read_shift(4);
        o3.VerifierHash = blob.slice(blob.l, tgt);
        blob.l = tgt;
        return o3;
      }
      function parse_EncryptionInfo(blob) {
        var vers = parse_CRYPTOVersion(blob);
        switch (vers.Minor) {
          case 2:
            return [vers.Minor, parse_EncInfoStd(blob, vers)];
          case 3:
            return [vers.Minor, parse_EncInfoExt(blob, vers)];
          case 4:
            return [vers.Minor, parse_EncInfoAgl(blob, vers)];
        }
        throw new Error("ECMA-376 Encrypted file unrecognized Version: " + vers.Minor);
      }
      function parse_EncInfoStd(blob) {
        var flags = blob.read_shift(4);
        if ((flags & 63) != 36) throw new Error("EncryptionInfo mismatch");
        var sz = blob.read_shift(4);
        var hdr = parse_EncryptionHeader(blob, sz);
        var verifier = parse_EncryptionVerifier(blob, blob.length - blob.l);
        return { t: "Std", h: hdr, v: verifier };
      }
      function parse_EncInfoExt() {
        throw new Error("File is password-protected: ECMA-376 Extensible");
      }
      function parse_EncInfoAgl(blob) {
        var KeyData = ["saltSize", "blockSize", "keyBits", "hashSize", "cipherAlgorithm", "cipherChaining", "hashAlgorithm", "saltValue"];
        blob.l += 4;
        var xml = blob.read_shift(blob.length - blob.l, "utf8");
        var o3 = {};
        xml.replace(tagregex, function xml_agile(x3) {
          var y3 = parsexmltag(x3);
          switch (strip_ns(y3[0])) {
            case "<?xml":
              break;
            case "<encryption":
            case "</encryption>":
              break;
            case "<keyData":
              KeyData.forEach(function(k3) {
                o3[k3] = y3[k3];
              });
              break;
            case "<dataIntegrity":
              o3.encryptedHmacKey = y3.encryptedHmacKey;
              o3.encryptedHmacValue = y3.encryptedHmacValue;
              break;
            case "<keyEncryptors>":
            case "<keyEncryptors":
              o3.encs = [];
              break;
            case "</keyEncryptors>":
              break;
            case "<keyEncryptor":
              o3.uri = y3.uri;
              break;
            case "</keyEncryptor>":
              break;
            case "<encryptedKey":
              o3.encs.push(y3);
              break;
            default:
              throw y3[0];
          }
        });
        return o3;
      }
      function parse_RC4CryptoHeader(blob, length) {
        var o3 = {};
        var vers = o3.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
        length -= 4;
        if (vers.Minor != 2) throw new Error("unrecognized minor version code: " + vers.Minor);
        if (vers.Major > 4 || vers.Major < 2) throw new Error("unrecognized major version code: " + vers.Major);
        o3.Flags = blob.read_shift(4);
        length -= 4;
        var sz = blob.read_shift(4);
        length -= 4;
        o3.EncryptionHeader = parse_EncryptionHeader(blob, sz);
        length -= sz;
        o3.EncryptionVerifier = parse_EncryptionVerifier(blob, length);
        return o3;
      }
      function parse_RC4Header(blob) {
        var o3 = {};
        var vers = o3.EncryptionVersionInfo = parse_CRYPTOVersion(blob, 4);
        if (vers.Major != 1 || vers.Minor != 1) throw "unrecognized version code " + vers.Major + " : " + vers.Minor;
        o3.Salt = blob.read_shift(16);
        o3.EncryptedVerifier = blob.read_shift(16);
        o3.EncryptedVerifierHash = blob.read_shift(16);
        return o3;
      }
      function crypto_CreatePasswordVerifier_Method1(Password) {
        var Verifier = 0, PasswordArray;
        var PasswordDecoded = _JS2ANSI(Password);
        var len = PasswordDecoded.length + 1, i3, PasswordByte;
        var Intermediate1, Intermediate2, Intermediate3;
        PasswordArray = new_raw_buf(len);
        PasswordArray[0] = PasswordDecoded.length;
        for (i3 = 1; i3 != len; ++i3) PasswordArray[i3] = PasswordDecoded[i3 - 1];
        for (i3 = len - 1; i3 >= 0; --i3) {
          PasswordByte = PasswordArray[i3];
          Intermediate1 = (Verifier & 16384) === 0 ? 0 : 1;
          Intermediate2 = Verifier << 1 & 32767;
          Intermediate3 = Intermediate1 | Intermediate2;
          Verifier = Intermediate3 ^ PasswordByte;
        }
        return Verifier ^ 52811;
      }
      var crypto_CreateXorArray_Method1 = /* @__PURE__ */ function() {
        var PadArray = [187, 255, 255, 186, 255, 255, 185, 128, 0, 190, 15, 0, 191, 15, 0];
        var InitialCode = [57840, 7439, 52380, 33984, 4364, 3600, 61902, 12606, 6258, 57657, 54287, 34041, 10252, 43370, 20163];
        var XorMatrix = [44796, 19929, 39858, 10053, 20106, 40212, 10761, 31585, 63170, 64933, 60267, 50935, 40399, 11199, 17763, 35526, 1453, 2906, 5812, 11624, 23248, 885, 1770, 3540, 7080, 14160, 28320, 56640, 55369, 41139, 20807, 41614, 21821, 43642, 17621, 28485, 56970, 44341, 19019, 38038, 14605, 29210, 60195, 50791, 40175, 10751, 21502, 43004, 24537, 18387, 36774, 3949, 7898, 15796, 31592, 63184, 47201, 24803, 49606, 37805, 14203, 28406, 56812, 17824, 35648, 1697, 3394, 6788, 13576, 27152, 43601, 17539, 35078, 557, 1114, 2228, 4456, 30388, 60776, 51953, 34243, 7079, 14158, 28316, 14128, 28256, 56512, 43425, 17251, 34502, 7597, 13105, 26210, 52420, 35241, 883, 1766, 3532, 4129, 8258, 16516, 33032, 4657, 9314, 18628];
        var Ror = function(Byte) {
          return (Byte / 2 | Byte * 128) & 255;
        };
        var XorRor = function(byte1, byte2) {
          return Ror(byte1 ^ byte2);
        };
        var CreateXorKey_Method1 = function(Password) {
          var XorKey = InitialCode[Password.length - 1];
          var CurrentElement = 104;
          for (var i3 = Password.length - 1; i3 >= 0; --i3) {
            var Char = Password[i3];
            for (var j3 = 0; j3 != 7; ++j3) {
              if (Char & 64) XorKey ^= XorMatrix[CurrentElement];
              Char *= 2;
              --CurrentElement;
            }
          }
          return XorKey;
        };
        return function(password) {
          var Password = _JS2ANSI(password);
          var XorKey = CreateXorKey_Method1(Password);
          var Index = Password.length;
          var ObfuscationArray = new_raw_buf(16);
          for (var i3 = 0; i3 != 16; ++i3) ObfuscationArray[i3] = 0;
          var Temp, PasswordLastChar, PadIndex;
          if ((Index & 1) === 1) {
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[0], Temp);
            --Index;
            Temp = XorKey & 255;
            PasswordLastChar = Password[Password.length - 1];
            ObfuscationArray[Index] = XorRor(PasswordLastChar, Temp);
          }
          while (Index > 0) {
            --Index;
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            Temp = XorKey & 255;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
          }
          Index = 15;
          PadIndex = 15 - Password.length;
          while (PadIndex > 0) {
            Temp = XorKey >> 8;
            ObfuscationArray[Index] = XorRor(PadArray[PadIndex], Temp);
            --Index;
            --PadIndex;
            Temp = XorKey & 255;
            ObfuscationArray[Index] = XorRor(Password[Index], Temp);
            --Index;
            --PadIndex;
          }
          return ObfuscationArray;
        };
      }();
      var crypto_DecryptData_Method1 = function(password, Data, XorArrayIndex, XorArray, O2) {
        if (!O2) O2 = Data;
        if (!XorArray) XorArray = crypto_CreateXorArray_Method1(password);
        var Index, Value;
        for (Index = 0; Index != Data.length; ++Index) {
          Value = Data[Index];
          Value ^= XorArray[XorArrayIndex];
          Value = (Value >> 5 | Value << 3) & 255;
          O2[Index] = Value;
          ++XorArrayIndex;
        }
        return [O2, XorArrayIndex, XorArray];
      };
      var crypto_MakeXorDecryptor = function(password) {
        var XorArrayIndex = 0, XorArray = crypto_CreateXorArray_Method1(password);
        return function(Data) {
          var O2 = crypto_DecryptData_Method1("", Data, XorArrayIndex, XorArray);
          XorArrayIndex = O2[1];
          return O2[0];
        };
      };
      function parse_XORObfuscation(blob, length, opts, out) {
        var o3 = { key: parseuint16(blob), verificationBytes: parseuint16(blob) };
        if (opts.password) o3.verifier = crypto_CreatePasswordVerifier_Method1(opts.password);
        out.valid = o3.verificationBytes === o3.verifier;
        if (out.valid) out.insitu = crypto_MakeXorDecryptor(opts.password);
        return o3;
      }
      function parse_FilePassHeader(blob, length, oo) {
        var o3 = oo || {};
        o3.Info = blob.read_shift(2);
        blob.l -= 2;
        if (o3.Info === 1) o3.Data = parse_RC4Header(blob, length);
        else o3.Data = parse_RC4CryptoHeader(blob, length);
        return o3;
      }
      function parse_FilePass(blob, length, opts) {
        var o3 = { Type: opts.biff >= 8 ? blob.read_shift(2) : 0 };
        if (o3.Type) parse_FilePassHeader(blob, length - 2, o3);
        else parse_XORObfuscation(blob, opts.biff >= 8 ? length : length - 2, opts, o3);
        return o3;
      }
      var RTF = /* @__PURE__ */ function() {
        function rtf_to_sheet(d3, opts) {
          switch (opts.type) {
            case "base64":
              return rtf_to_sheet_str(Base64_decode(d3), opts);
            case "binary":
              return rtf_to_sheet_str(d3, opts);
            case "buffer":
              return rtf_to_sheet_str(has_buf && Buffer.isBuffer(d3) ? d3.toString("binary") : a2s(d3), opts);
            case "array":
              return rtf_to_sheet_str(cc2str(d3), opts);
          }
          throw new Error("Unrecognized type " + opts.type);
        }
        function rtf_to_sheet_str(str, opts) {
          var o3 = opts || {};
          var ws = o3.dense ? [] : {};
          var rows = str.match(/\\trowd.*?\\row\b/g);
          if (!rows.length) throw new Error("RTF missing table");
          var range = { s: { c: 0, r: 0 }, e: { c: 0, r: rows.length - 1 } };
          rows.forEach(function(rowtf, R2) {
            if (Array.isArray(ws)) ws[R2] = [];
            var rtfre = /\\\w+\b/g;
            var last_index = 0;
            var res;
            var C2 = -1;
            while (res = rtfre.exec(rowtf)) {
              switch (res[0]) {
                case "\\cell":
                  var data = rowtf.slice(last_index, rtfre.lastIndex - res[0].length);
                  if (data[0] == " ") data = data.slice(1);
                  ++C2;
                  if (data.length) {
                    var cell = { v: data, t: "s" };
                    if (Array.isArray(ws)) ws[R2][C2] = cell;
                    else ws[encode_cell({ r: R2, c: C2 })] = cell;
                  }
                  break;
              }
              last_index = rtfre.lastIndex;
            }
            if (C2 > range.e.c) range.e.c = C2;
          });
          ws["!ref"] = encode_range(range);
          return ws;
        }
        function rtf_to_workbook(d3, opts) {
          return sheet_to_workbook(rtf_to_sheet(d3, opts), opts);
        }
        function sheet_to_rtf(ws) {
          var o3 = ["{\\rtf1\\ansi"];
          var r3 = safe_decode_range(ws["!ref"]), cell;
          var dense = Array.isArray(ws);
          for (var R2 = r3.s.r; R2 <= r3.e.r; ++R2) {
            o3.push("\\trowd\\trautofit1");
            for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) o3.push("\\cellx" + (C2 + 1));
            o3.push("\\pard\\intbl");
            for (C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
              var coord = encode_cell({ r: R2, c: C2 });
              cell = dense ? (ws[R2] || [])[C2] : ws[coord];
              if (!cell || cell.v == null && (!cell.f || cell.F)) continue;
              o3.push(" " + (cell.w || (format_cell(cell), cell.w)));
              o3.push("\\cell");
            }
            o3.push("\\pard\\intbl\\row");
          }
          return o3.join("") + "}";
        }
        return {
          to_workbook: rtf_to_workbook,
          to_sheet: rtf_to_sheet,
          from_sheet: sheet_to_rtf
        };
      }();
      function hex2RGB(h3) {
        var o3 = h3.slice(h3[0] === "#" ? 1 : 0).slice(0, 6);
        return [parseInt(o3.slice(0, 2), 16), parseInt(o3.slice(2, 4), 16), parseInt(o3.slice(4, 6), 16)];
      }
      function rgb2Hex(rgb) {
        for (var i3 = 0, o3 = 1; i3 != 3; ++i3) o3 = o3 * 256 + (rgb[i3] > 255 ? 255 : rgb[i3] < 0 ? 0 : rgb[i3]);
        return o3.toString(16).toUpperCase().slice(1);
      }
      function rgb2HSL(rgb) {
        var R2 = rgb[0] / 255, G2 = rgb[1] / 255, B3 = rgb[2] / 255;
        var M2 = Math.max(R2, G2, B3), m3 = Math.min(R2, G2, B3), C2 = M2 - m3;
        if (C2 === 0) return [0, 0, R2];
        var H6 = 0, S3 = 0, L2 = M2 + m3;
        S3 = C2 / (L2 > 1 ? 2 - L2 : L2);
        switch (M2) {
          case R2:
            H6 = ((G2 - B3) / C2 + 6) % 6;
            break;
          case G2:
            H6 = (B3 - R2) / C2 + 2;
            break;
          case B3:
            H6 = (R2 - G2) / C2 + 4;
            break;
        }
        return [H6 / 6, S3, L2 / 2];
      }
      function hsl2RGB(hsl) {
        var H2 = hsl[0], S3 = hsl[1], L2 = hsl[2];
        var C2 = S3 * 2 * (L2 < 0.5 ? L2 : 1 - L2), m3 = L2 - C2 / 2;
        var rgb = [m3, m3, m3], h6 = 6 * H2;
        var X2;
        if (S3 !== 0) switch (h6 | 0) {
          case 0:
          case 6:
            X2 = C2 * h6;
            rgb[0] += C2;
            rgb[1] += X2;
            break;
          case 1:
            X2 = C2 * (2 - h6);
            rgb[0] += X2;
            rgb[1] += C2;
            break;
          case 2:
            X2 = C2 * (h6 - 2);
            rgb[1] += C2;
            rgb[2] += X2;
            break;
          case 3:
            X2 = C2 * (4 - h6);
            rgb[1] += X2;
            rgb[2] += C2;
            break;
          case 4:
            X2 = C2 * (h6 - 4);
            rgb[2] += C2;
            rgb[0] += X2;
            break;
          case 5:
            X2 = C2 * (6 - h6);
            rgb[2] += X2;
            rgb[0] += C2;
            break;
        }
        for (var i3 = 0; i3 != 3; ++i3) rgb[i3] = Math.round(rgb[i3] * 255);
        return rgb;
      }
      function rgb_tint(hex, tint) {
        if (tint === 0) return hex;
        var hsl = rgb2HSL(hex2RGB(hex));
        if (tint < 0) hsl[2] = hsl[2] * (1 + tint);
        else hsl[2] = 1 - (1 - hsl[2]) * (1 - tint);
        return rgb2Hex(hsl2RGB(hsl));
      }
      var DEF_MDW = 6, MAX_MDW = 15, MIN_MDW = 1, MDW = DEF_MDW;
      function width2px(width) {
        return Math.floor((width + Math.round(128 / MDW) / 256) * MDW);
      }
      function px2char(px) {
        return Math.floor((px - 5) / MDW * 100 + 0.5) / 100;
      }
      function char2width(chr) {
        return Math.round((chr * MDW + 5) / MDW * 256) / 256;
      }
      function cycle_width(collw) {
        return char2width(px2char(width2px(collw)));
      }
      function find_mdw_colw(collw) {
        var delta = Math.abs(collw - cycle_width(collw)), _MDW = MDW;
        if (delta > 5e-3) {
          for (MDW = MIN_MDW; MDW < MAX_MDW; ++MDW) if (Math.abs(collw - cycle_width(collw)) <= delta) {
            delta = Math.abs(collw - cycle_width(collw));
            _MDW = MDW;
          }
        }
        MDW = _MDW;
      }
      function process_col(coll) {
        if (coll.width) {
          coll.wpx = width2px(coll.width);
          coll.wch = px2char(coll.wpx);
          coll.MDW = MDW;
        } else if (coll.wpx) {
          coll.wch = px2char(coll.wpx);
          coll.width = char2width(coll.wch);
          coll.MDW = MDW;
        } else if (typeof coll.wch == "number") {
          coll.width = char2width(coll.wch);
          coll.wpx = width2px(coll.width);
          coll.MDW = MDW;
        }
        if (coll.customWidth) delete coll.customWidth;
      }
      var DEF_PPI = 96, PPI = DEF_PPI;
      function px2pt(px) {
        return px * 96 / PPI;
      }
      function pt2px(pt2) {
        return pt2 * PPI / 96;
      }
      var XLMLPatternTypeMap = {
        "None": "none",
        "Solid": "solid",
        "Gray50": "mediumGray",
        "Gray75": "darkGray",
        "Gray25": "lightGray",
        "HorzStripe": "darkHorizontal",
        "VertStripe": "darkVertical",
        "ReverseDiagStripe": "darkDown",
        "DiagStripe": "darkUp",
        "DiagCross": "darkGrid",
        "ThickDiagCross": "darkTrellis",
        "ThinHorzStripe": "lightHorizontal",
        "ThinVertStripe": "lightVertical",
        "ThinReverseDiagStripe": "lightDown",
        "ThinHorzCross": "lightGrid"
      };
      function parse_borders(t3, styles, themes, opts) {
        styles.Borders = [];
        var border = {};
        var pass = false;
        (t3[0].match(tagregex) || []).forEach(function(x3) {
          var y3 = parsexmltag(x3);
          switch (strip_ns(y3[0])) {
            case "<borders":
            case "<borders>":
            case "</borders>":
              break;
            /* 18.8.4 border CT_Border */
            case "<border":
            case "<border>":
            case "<border/>":
              border = {};
              if (y3.diagonalUp) border.diagonalUp = parsexmlbool(y3.diagonalUp);
              if (y3.diagonalDown) border.diagonalDown = parsexmlbool(y3.diagonalDown);
              styles.Borders.push(border);
              break;
            case "</border>":
              break;
            /* note: not in spec, appears to be CT_BorderPr */
            case "<left/>":
              break;
            case "<left":
            case "<left>":
              break;
            case "</left>":
              break;
            /* note: not in spec, appears to be CT_BorderPr */
            case "<right/>":
              break;
            case "<right":
            case "<right>":
              break;
            case "</right>":
              break;
            /* 18.8.43 top CT_BorderPr */
            case "<top/>":
              break;
            case "<top":
            case "<top>":
              break;
            case "</top>":
              break;
            /* 18.8.6 bottom CT_BorderPr */
            case "<bottom/>":
              break;
            case "<bottom":
            case "<bottom>":
              break;
            case "</bottom>":
              break;
            /* 18.8.13 diagonal CT_BorderPr */
            case "<diagonal":
            case "<diagonal>":
            case "<diagonal/>":
              break;
            case "</diagonal>":
              break;
            /* 18.8.25 horizontal CT_BorderPr */
            case "<horizontal":
            case "<horizontal>":
            case "<horizontal/>":
              break;
            case "</horizontal>":
              break;
            /* 18.8.44 vertical CT_BorderPr */
            case "<vertical":
            case "<vertical>":
            case "<vertical/>":
              break;
            case "</vertical>":
              break;
            /* 18.8.37 start CT_BorderPr */
            case "<start":
            case "<start>":
            case "<start/>":
              break;
            case "</start>":
              break;
            /* 18.8.16 end CT_BorderPr */
            case "<end":
            case "<end>":
            case "<end/>":
              break;
            case "</end>":
              break;
            /* 18.8.? color CT_Color */
            case "<color":
            case "<color>":
              break;
            case "<color/>":
            case "</color>":
              break;
            /* 18.2.10 extLst CT_ExtensionList ? */
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass) throw new Error("unrecognized " + y3[0] + " in borders");
              }
          }
        });
      }
      function parse_fills(t3, styles, themes, opts) {
        styles.Fills = [];
        var fill2 = {};
        var pass = false;
        (t3[0].match(tagregex) || []).forEach(function(x3) {
          var y3 = parsexmltag(x3);
          switch (strip_ns(y3[0])) {
            case "<fills":
            case "<fills>":
            case "</fills>":
              break;
            /* 18.8.20 fill CT_Fill */
            case "<fill>":
            case "<fill":
            case "<fill/>":
              fill2 = {};
              styles.Fills.push(fill2);
              break;
            case "</fill>":
              break;
            /* 18.8.24 gradientFill CT_GradientFill */
            case "<gradientFill>":
              break;
            case "<gradientFill":
            case "</gradientFill>":
              styles.Fills.push(fill2);
              fill2 = {};
              break;
            /* 18.8.32 patternFill CT_PatternFill */
            case "<patternFill":
            case "<patternFill>":
              if (y3.patternType) fill2.patternType = y3.patternType;
              break;
            case "<patternFill/>":
            case "</patternFill>":
              break;
            /* 18.8.3 bgColor CT_Color */
            case "<bgColor":
              if (!fill2.bgColor) fill2.bgColor = {};
              if (y3.indexed) fill2.bgColor.indexed = parseInt(y3.indexed, 10);
              if (y3.theme) fill2.bgColor.theme = parseInt(y3.theme, 10);
              if (y3.tint) fill2.bgColor.tint = parseFloat(y3.tint);
              if (y3.rgb) fill2.bgColor.rgb = y3.rgb.slice(-6);
              break;
            case "<bgColor/>":
            case "</bgColor>":
              break;
            /* 18.8.19 fgColor CT_Color */
            case "<fgColor":
              if (!fill2.fgColor) fill2.fgColor = {};
              if (y3.theme) fill2.fgColor.theme = parseInt(y3.theme, 10);
              if (y3.tint) fill2.fgColor.tint = parseFloat(y3.tint);
              if (y3.rgb != null) fill2.fgColor.rgb = y3.rgb.slice(-6);
              break;
            case "<fgColor/>":
            case "</fgColor>":
              break;
            /* 18.8.38 stop CT_GradientStop */
            case "<stop":
            case "<stop/>":
              break;
            case "</stop>":
              break;
            /* 18.8.? color CT_Color */
            case "<color":
            case "<color/>":
              break;
            case "</color>":
              break;
            /* 18.2.10 extLst CT_ExtensionList ? */
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass) throw new Error("unrecognized " + y3[0] + " in fills");
              }
          }
        });
      }
      function parse_fonts(t3, styles, themes, opts) {
        styles.Fonts = [];
        var font = {};
        var pass = false;
        (t3[0].match(tagregex) || []).forEach(function(x3) {
          var y3 = parsexmltag(x3);
          switch (strip_ns(y3[0])) {
            case "<fonts":
            case "<fonts>":
            case "</fonts>":
              break;
            /* 18.8.22 font CT_Font */
            case "<font":
            case "<font>":
              break;
            case "</font>":
            case "<font/>":
              styles.Fonts.push(font);
              font = {};
              break;
            /* 18.8.29 name CT_FontName */
            case "<name":
              if (y3.val) font.name = utf8read(y3.val);
              break;
            case "<name/>":
            case "</name>":
              break;
            /* 18.8.2  b CT_BooleanProperty */
            case "<b":
              font.bold = y3.val ? parsexmlbool(y3.val) : 1;
              break;
            case "<b/>":
              font.bold = 1;
              break;
            /* 18.8.26 i CT_BooleanProperty */
            case "<i":
              font.italic = y3.val ? parsexmlbool(y3.val) : 1;
              break;
            case "<i/>":
              font.italic = 1;
              break;
            /* 18.4.13 u CT_UnderlineProperty */
            case "<u":
              switch (y3.val) {
                case "none":
                  font.underline = 0;
                  break;
                case "single":
                  font.underline = 1;
                  break;
                case "double":
                  font.underline = 2;
                  break;
                case "singleAccounting":
                  font.underline = 33;
                  break;
                case "doubleAccounting":
                  font.underline = 34;
                  break;
              }
              break;
            case "<u/>":
              font.underline = 1;
              break;
            /* 18.4.10 strike CT_BooleanProperty */
            case "<strike":
              font.strike = y3.val ? parsexmlbool(y3.val) : 1;
              break;
            case "<strike/>":
              font.strike = 1;
              break;
            /* 18.4.2  outline CT_BooleanProperty */
            case "<outline":
              font.outline = y3.val ? parsexmlbool(y3.val) : 1;
              break;
            case "<outline/>":
              font.outline = 1;
              break;
            /* 18.8.36 shadow CT_BooleanProperty */
            case "<shadow":
              font.shadow = y3.val ? parsexmlbool(y3.val) : 1;
              break;
            case "<shadow/>":
              font.shadow = 1;
              break;
            /* 18.8.12 condense CT_BooleanProperty */
            case "<condense":
              font.condense = y3.val ? parsexmlbool(y3.val) : 1;
              break;
            case "<condense/>":
              font.condense = 1;
              break;
            /* 18.8.17 extend CT_BooleanProperty */
            case "<extend":
              font.extend = y3.val ? parsexmlbool(y3.val) : 1;
              break;
            case "<extend/>":
              font.extend = 1;
              break;
            /* 18.4.11 sz CT_FontSize */
            case "<sz":
              if (y3.val) font.sz = +y3.val;
              break;
            case "<sz/>":
            case "</sz>":
              break;
            /* 18.4.14 vertAlign CT_VerticalAlignFontProperty */
            case "<vertAlign":
              if (y3.val) font.vertAlign = y3.val;
              break;
            case "<vertAlign/>":
            case "</vertAlign>":
              break;
            /* 18.8.18 family CT_FontFamily */
            case "<family":
              if (y3.val) font.family = parseInt(y3.val, 10);
              break;
            case "<family/>":
            case "</family>":
              break;
            /* 18.8.35 scheme CT_FontScheme */
            case "<scheme":
              if (y3.val) font.scheme = y3.val;
              break;
            case "<scheme/>":
            case "</scheme>":
              break;
            /* 18.4.1 charset CT_IntProperty */
            case "<charset":
              if (y3.val == "1") break;
              y3.codepage = CS2CP[parseInt(y3.val, 10)];
              break;
            /* 18.?.? color CT_Color */
            case "<color":
              if (!font.color) font.color = {};
              if (y3.auto) font.color.auto = parsexmlbool(y3.auto);
              if (y3.rgb) font.color.rgb = y3.rgb.slice(-6);
              else if (y3.indexed) {
                font.color.index = parseInt(y3.indexed, 10);
                var icv = XLSIcv[font.color.index];
                if (font.color.index == 81) icv = XLSIcv[1];
                if (!icv) icv = XLSIcv[1];
                font.color.rgb = icv[0].toString(16) + icv[1].toString(16) + icv[2].toString(16);
              } else if (y3.theme) {
                font.color.theme = parseInt(y3.theme, 10);
                if (y3.tint) font.color.tint = parseFloat(y3.tint);
                if (y3.theme && themes.themeElements && themes.themeElements.clrScheme) {
                  font.color.rgb = rgb_tint(themes.themeElements.clrScheme[font.color.theme].rgb, font.color.tint || 0);
                }
              }
              break;
            case "<color/>":
            case "</color>":
              break;
            /* note: sometimes mc:AlternateContent appears bare */
            case "<AlternateContent":
              pass = true;
              break;
            case "</AlternateContent>":
              pass = false;
              break;
            /* 18.2.10 extLst CT_ExtensionList ? */
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass) throw new Error("unrecognized " + y3[0] + " in fonts");
              }
          }
        });
      }
      function parse_numFmts(t3, styles, opts) {
        styles.NumberFmt = [];
        var k3 = keys(table_fmt);
        for (var i3 = 0; i3 < k3.length; ++i3) styles.NumberFmt[k3[i3]] = table_fmt[k3[i3]];
        var m3 = t3[0].match(tagregex);
        if (!m3) return;
        for (i3 = 0; i3 < m3.length; ++i3) {
          var y3 = parsexmltag(m3[i3]);
          switch (strip_ns(y3[0])) {
            case "<numFmts":
            case "</numFmts>":
            case "<numFmts/>":
            case "<numFmts>":
              break;
            case "<numFmt":
              {
                var f2 = unescapexml(utf8read(y3.formatCode)), j3 = parseInt(y3.numFmtId, 10);
                styles.NumberFmt[j3] = f2;
                if (j3 > 0) {
                  if (j3 > 392) {
                    for (j3 = 392; j3 > 60; --j3) if (styles.NumberFmt[j3] == null) break;
                    styles.NumberFmt[j3] = f2;
                  }
                  SSF_load(f2, j3);
                }
              }
              break;
            case "</numFmt>":
              break;
            default:
              if (opts.WTF) throw new Error("unrecognized " + y3[0] + " in numFmts");
          }
        }
      }
      function write_numFmts(NF) {
        var o3 = ["<numFmts>"];
        [[5, 8], [23, 26], [41, 44], [
          /*63*/
          50,
          /*66],[164,*/
          392
        ]].forEach(function(r3) {
          for (var i3 = r3[0]; i3 <= r3[1]; ++i3) if (NF[i3] != null) o3[o3.length] = writextag("numFmt", null, { numFmtId: i3, formatCode: escapexml(NF[i3]) });
        });
        if (o3.length === 1) return "";
        o3[o3.length] = "</numFmts>";
        o3[0] = writextag("numFmts", null, { count: o3.length - 2 }).replace("/>", ">");
        return o3.join("");
      }
      var cellXF_uint = ["numFmtId", "fillId", "fontId", "borderId", "xfId"];
      var cellXF_bool = ["applyAlignment", "applyBorder", "applyFill", "applyFont", "applyNumberFormat", "applyProtection", "pivotButton", "quotePrefix"];
      function parse_cellXfs(t3, styles, opts) {
        styles.CellXf = [];
        var xf;
        var pass = false;
        (t3[0].match(tagregex) || []).forEach(function(x3) {
          var y3 = parsexmltag(x3), i3 = 0;
          switch (strip_ns(y3[0])) {
            case "<cellXfs":
            case "<cellXfs>":
            case "<cellXfs/>":
            case "</cellXfs>":
              break;
            /* 18.8.45 xf CT_Xf */
            case "<xf":
            case "<xf/>":
              xf = y3;
              delete xf[0];
              for (i3 = 0; i3 < cellXF_uint.length; ++i3) if (xf[cellXF_uint[i3]])
                xf[cellXF_uint[i3]] = parseInt(xf[cellXF_uint[i3]], 10);
              for (i3 = 0; i3 < cellXF_bool.length; ++i3) if (xf[cellXF_bool[i3]])
                xf[cellXF_bool[i3]] = parsexmlbool(xf[cellXF_bool[i3]]);
              if (styles.NumberFmt && xf.numFmtId > 392) {
                for (i3 = 392; i3 > 60; --i3) if (styles.NumberFmt[xf.numFmtId] == styles.NumberFmt[i3]) {
                  xf.numFmtId = i3;
                  break;
                }
              }
              styles.CellXf.push(xf);
              break;
            case "</xf>":
              break;
            /* 18.8.1 alignment CT_CellAlignment */
            case "<alignment":
            case "<alignment/>":
              var alignment = {};
              if (y3.vertical) alignment.vertical = y3.vertical;
              if (y3.horizontal) alignment.horizontal = y3.horizontal;
              if (y3.textRotation != null) alignment.textRotation = y3.textRotation;
              if (y3.indent) alignment.indent = y3.indent;
              if (y3.wrapText) alignment.wrapText = parsexmlbool(y3.wrapText);
              xf.alignment = alignment;
              break;
            case "</alignment>":
              break;
            /* 18.8.33 protection CT_CellProtection */
            case "<protection":
              break;
            case "</protection>":
            case "<protection/>":
              break;
            /* note: sometimes mc:AlternateContent appears bare */
            case "<AlternateContent":
              pass = true;
              break;
            case "</AlternateContent>":
              pass = false;
              break;
            /* 18.2.10 extLst CT_ExtensionList ? */
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (opts && opts.WTF) {
                if (!pass) throw new Error("unrecognized " + y3[0] + " in cellXfs");
              }
          }
        });
      }
      function write_cellXfs(cellXfs) {
        var o3 = [];
        o3[o3.length] = writextag("cellXfs", null);
        cellXfs.forEach(function(c3) {
          o3[o3.length] = writextag("xf", null, c3);
        });
        o3[o3.length] = "</cellXfs>";
        if (o3.length === 2) return "";
        o3[0] = writextag("cellXfs", null, { count: o3.length - 2 }).replace("/>", ">");
        return o3.join("");
      }
      var parse_sty_xml = /* @__PURE__ */ function make_pstyx() {
        var numFmtRegex = /<(?:\w+:)?numFmts([^>]*)>[\S\s]*?<\/(?:\w+:)?numFmts>/;
        var cellXfRegex = /<(?:\w+:)?cellXfs([^>]*)>[\S\s]*?<\/(?:\w+:)?cellXfs>/;
        var fillsRegex = /<(?:\w+:)?fills([^>]*)>[\S\s]*?<\/(?:\w+:)?fills>/;
        var fontsRegex = /<(?:\w+:)?fonts([^>]*)>[\S\s]*?<\/(?:\w+:)?fonts>/;
        var bordersRegex = /<(?:\w+:)?borders([^>]*)>[\S\s]*?<\/(?:\w+:)?borders>/;
        return function parse_sty_xml2(data, themes, opts) {
          var styles = {};
          if (!data) return styles;
          data = data.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
          var t3;
          if (t3 = data.match(numFmtRegex)) parse_numFmts(t3, styles, opts);
          if (t3 = data.match(fontsRegex)) parse_fonts(t3, styles, themes, opts);
          if (t3 = data.match(fillsRegex)) parse_fills(t3, styles, themes, opts);
          if (t3 = data.match(bordersRegex)) parse_borders(t3, styles, themes, opts);
          if (t3 = data.match(cellXfRegex)) parse_cellXfs(t3, styles, opts);
          return styles;
        };
      }();
      function write_sty_xml(wb, opts) {
        var o3 = [XML_HEADER, writextag("styleSheet", null, {
          "xmlns": XMLNS_main[0],
          "xmlns:vt": XMLNS.vt
        })], w3;
        if (wb.SSF && (w3 = write_numFmts(wb.SSF)) != null) o3[o3.length] = w3;
        o3[o3.length] = '<fonts count="1"><font><sz val="12"/><color theme="1"/><name val="Calibri"/><family val="2"/><scheme val="minor"/></font></fonts>';
        o3[o3.length] = '<fills count="2"><fill><patternFill patternType="none"/></fill><fill><patternFill patternType="gray125"/></fill></fills>';
        o3[o3.length] = '<borders count="1"><border><left/><right/><top/><bottom/><diagonal/></border></borders>';
        o3[o3.length] = '<cellStyleXfs count="1"><xf numFmtId="0" fontId="0" fillId="0" borderId="0"/></cellStyleXfs>';
        if (w3 = write_cellXfs(opts.cellXfs)) o3[o3.length] = w3;
        o3[o3.length] = '<cellStyles count="1"><cellStyle name="Normal" xfId="0" builtinId="0"/></cellStyles>';
        o3[o3.length] = '<dxfs count="0"/>';
        o3[o3.length] = '<tableStyles count="0" defaultTableStyle="TableStyleMedium9" defaultPivotStyle="PivotStyleMedium4"/>';
        if (o3.length > 2) {
          o3[o3.length] = "</styleSheet>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      function parse_BrtFmt(data, length) {
        var numFmtId = data.read_shift(2);
        var stFmtCode = parse_XLWideString(data, length - 2);
        return [numFmtId, stFmtCode];
      }
      function write_BrtFmt(i3, f2, o3) {
        if (!o3) o3 = new_buf(6 + 4 * f2.length);
        o3.write_shift(2, i3);
        write_XLWideString(f2, o3);
        var out = o3.length > o3.l ? o3.slice(0, o3.l) : o3;
        if (o3.l == null) o3.l = o3.length;
        return out;
      }
      function parse_BrtFont(data, length, opts) {
        var out = {};
        out.sz = data.read_shift(2) / 20;
        var grbit = parse_FontFlags(data, 2, opts);
        if (grbit.fItalic) out.italic = 1;
        if (grbit.fCondense) out.condense = 1;
        if (grbit.fExtend) out.extend = 1;
        if (grbit.fShadow) out.shadow = 1;
        if (grbit.fOutline) out.outline = 1;
        if (grbit.fStrikeout) out.strike = 1;
        var bls = data.read_shift(2);
        if (bls === 700) out.bold = 1;
        switch (data.read_shift(2)) {
          /* case 0: out.vertAlign = "baseline"; break; */
          case 1:
            out.vertAlign = "superscript";
            break;
          case 2:
            out.vertAlign = "subscript";
            break;
        }
        var underline = data.read_shift(1);
        if (underline != 0) out.underline = underline;
        var family = data.read_shift(1);
        if (family > 0) out.family = family;
        var bCharSet = data.read_shift(1);
        if (bCharSet > 0) out.charset = bCharSet;
        data.l++;
        out.color = parse_BrtColor(data, 8);
        switch (data.read_shift(1)) {
          /* case 0: out.scheme = "none": break; */
          case 1:
            out.scheme = "major";
            break;
          case 2:
            out.scheme = "minor";
            break;
        }
        out.name = parse_XLWideString(data, length - 21);
        return out;
      }
      function write_BrtFont(font, o3) {
        if (!o3) o3 = new_buf(25 + 4 * 32);
        o3.write_shift(2, font.sz * 20);
        write_FontFlags(font, o3);
        o3.write_shift(2, font.bold ? 700 : 400);
        var sss = 0;
        if (font.vertAlign == "superscript") sss = 1;
        else if (font.vertAlign == "subscript") sss = 2;
        o3.write_shift(2, sss);
        o3.write_shift(1, font.underline || 0);
        o3.write_shift(1, font.family || 0);
        o3.write_shift(1, font.charset || 0);
        o3.write_shift(1, 0);
        write_BrtColor(font.color, o3);
        var scheme = 0;
        if (font.scheme == "major") scheme = 1;
        if (font.scheme == "minor") scheme = 2;
        o3.write_shift(1, scheme);
        write_XLWideString(font.name, o3);
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      var XLSBFillPTNames = [
        "none",
        "solid",
        "mediumGray",
        "darkGray",
        "lightGray",
        "darkHorizontal",
        "darkVertical",
        "darkDown",
        "darkUp",
        "darkGrid",
        "darkTrellis",
        "lightHorizontal",
        "lightVertical",
        "lightDown",
        "lightUp",
        "lightGrid",
        "lightTrellis",
        "gray125",
        "gray0625"
      ];
      var rev_XLSBFillPTNames;
      var parse_BrtFill = parsenoop;
      function write_BrtFill(fill2, o3) {
        if (!o3) o3 = new_buf(4 * 3 + 8 * 7 + 16 * 1);
        if (!rev_XLSBFillPTNames) rev_XLSBFillPTNames = evert(XLSBFillPTNames);
        var fls = rev_XLSBFillPTNames[fill2.patternType];
        if (fls == null) fls = 40;
        o3.write_shift(4, fls);
        var j3 = 0;
        if (fls != 40) {
          write_BrtColor({ auto: 1 }, o3);
          write_BrtColor({ auto: 1 }, o3);
          for (; j3 < 12; ++j3) o3.write_shift(4, 0);
        } else {
          for (; j3 < 4; ++j3) o3.write_shift(4, 0);
          for (; j3 < 12; ++j3) o3.write_shift(4, 0);
        }
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function parse_BrtXF(data, length) {
        var tgt = data.l + length;
        var ixfeParent = data.read_shift(2);
        var ifmt = data.read_shift(2);
        data.l = tgt;
        return { ixfe: ixfeParent, numFmtId: ifmt };
      }
      function write_BrtXF(data, ixfeP, o3) {
        if (!o3) o3 = new_buf(16);
        o3.write_shift(2, ixfeP || 0);
        o3.write_shift(2, data.numFmtId || 0);
        o3.write_shift(2, 0);
        o3.write_shift(2, 0);
        o3.write_shift(2, 0);
        o3.write_shift(1, 0);
        o3.write_shift(1, 0);
        var flow = 0;
        o3.write_shift(1, flow);
        o3.write_shift(1, 0);
        o3.write_shift(1, 0);
        o3.write_shift(1, 0);
        return o3;
      }
      function write_Blxf(data, o3) {
        if (!o3) o3 = new_buf(10);
        o3.write_shift(1, 0);
        o3.write_shift(1, 0);
        o3.write_shift(4, 0);
        o3.write_shift(4, 0);
        return o3;
      }
      var parse_BrtBorder = parsenoop;
      function write_BrtBorder(border, o3) {
        if (!o3) o3 = new_buf(51);
        o3.write_shift(1, 0);
        write_Blxf(null, o3);
        write_Blxf(null, o3);
        write_Blxf(null, o3);
        write_Blxf(null, o3);
        write_Blxf(null, o3);
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function write_BrtStyle(style, o3) {
        if (!o3) o3 = new_buf(12 + 4 * 10);
        o3.write_shift(4, style.xfId);
        o3.write_shift(2, 1);
        o3.write_shift(1, +style.builtinId);
        o3.write_shift(1, 0);
        write_XLNullableWideString(style.name || "", o3);
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function write_BrtBeginTableStyles(cnt, defTableStyle, defPivotStyle) {
        var o3 = new_buf(4 + 256 * 2 * 4);
        o3.write_shift(4, cnt);
        write_XLNullableWideString(defTableStyle, o3);
        write_XLNullableWideString(defPivotStyle, o3);
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function parse_sty_bin(data, themes, opts) {
        var styles = {};
        styles.NumberFmt = [];
        for (var y3 in table_fmt) styles.NumberFmt[y3] = table_fmt[y3];
        styles.CellXf = [];
        styles.Fonts = [];
        var state = [];
        var pass = false;
        recordhopper(data, function hopper_sty(val, R2, RT) {
          switch (RT) {
            case 44:
              styles.NumberFmt[val[0]] = val[1];
              SSF_load(val[1], val[0]);
              break;
            case 43:
              styles.Fonts.push(val);
              if (val.color.theme != null && themes && themes.themeElements && themes.themeElements.clrScheme) {
                val.color.rgb = rgb_tint(themes.themeElements.clrScheme[val.color.theme].rgb, val.color.tint || 0);
              }
              break;
            case 1025:
              break;
            case 45:
              break;
            case 46:
              break;
            case 47:
              if (state[state.length - 1] == 617) {
                styles.CellXf.push(val);
              }
              break;
            case 48:
            /* BrtStyle */
            case 507:
            /* BrtDXF */
            case 572:
            /* BrtMRUColor */
            case 475:
              break;
            case 1171:
            /* BrtDXF14 */
            case 2102:
            /* BrtDXF15 */
            case 1130:
            /* BrtSlicerStyleElement */
            case 512:
            /* BrtTableStyleElement */
            case 2095:
            /* BrtTimelineStyleElement */
            case 3072:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              state.push(RT);
              pass = true;
              break;
            case 38:
              state.pop();
              pass = false;
              break;
            default:
              if (R2.T > 0) state.push(RT);
              else if (R2.T < 0) state.pop();
              else if (!pass || opts.WTF && state[state.length - 1] != 37) throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return styles;
      }
      function write_FMTS_bin(ba2, NF) {
        if (!NF) return;
        var cnt = 0;
        [[5, 8], [23, 26], [41, 44], [
          /*63*/
          50,
          /*66],[164,*/
          392
        ]].forEach(function(r3) {
          for (var i3 = r3[0]; i3 <= r3[1]; ++i3) if (NF[i3] != null) ++cnt;
        });
        if (cnt == 0) return;
        write_record(ba2, 615, write_UInt32LE(cnt));
        [[5, 8], [23, 26], [41, 44], [
          /*63*/
          50,
          /*66],[164,*/
          392
        ]].forEach(function(r3) {
          for (var i3 = r3[0]; i3 <= r3[1]; ++i3) if (NF[i3] != null) write_record(ba2, 44, write_BrtFmt(i3, NF[i3]));
        });
        write_record(
          ba2,
          616
          /* BrtEndFmts */
        );
      }
      function write_FONTS_bin(ba2) {
        var cnt = 1;
        if (cnt == 0) return;
        write_record(ba2, 611, write_UInt32LE(cnt));
        write_record(ba2, 43, write_BrtFont({
          sz: 12,
          color: { theme: 1 },
          name: "Calibri",
          family: 2,
          scheme: "minor"
        }));
        write_record(
          ba2,
          612
          /* BrtEndFonts */
        );
      }
      function write_FILLS_bin(ba2) {
        var cnt = 2;
        if (cnt == 0) return;
        write_record(ba2, 603, write_UInt32LE(cnt));
        write_record(ba2, 45, write_BrtFill({ patternType: "none" }));
        write_record(ba2, 45, write_BrtFill({ patternType: "gray125" }));
        write_record(
          ba2,
          604
          /* BrtEndFills */
        );
      }
      function write_BORDERS_bin(ba2) {
        var cnt = 1;
        if (cnt == 0) return;
        write_record(ba2, 613, write_UInt32LE(cnt));
        write_record(ba2, 46, write_BrtBorder({}));
        write_record(
          ba2,
          614
          /* BrtEndBorders */
        );
      }
      function write_CELLSTYLEXFS_bin(ba2) {
        var cnt = 1;
        write_record(ba2, 626, write_UInt32LE(cnt));
        write_record(ba2, 47, write_BrtXF({
          numFmtId: 0,
          fontId: 0,
          fillId: 0,
          borderId: 0
        }, 65535));
        write_record(
          ba2,
          627
          /* BrtEndCellStyleXFs */
        );
      }
      function write_CELLXFS_bin(ba2, data) {
        write_record(ba2, 617, write_UInt32LE(data.length));
        data.forEach(function(c3) {
          write_record(ba2, 47, write_BrtXF(c3, 0));
        });
        write_record(
          ba2,
          618
          /* BrtEndCellXFs */
        );
      }
      function write_STYLES_bin(ba2) {
        var cnt = 1;
        write_record(ba2, 619, write_UInt32LE(cnt));
        write_record(ba2, 48, write_BrtStyle({
          xfId: 0,
          builtinId: 0,
          name: "Normal"
        }));
        write_record(
          ba2,
          620
          /* BrtEndStyles */
        );
      }
      function write_DXFS_bin(ba2) {
        var cnt = 0;
        write_record(ba2, 505, write_UInt32LE(cnt));
        write_record(
          ba2,
          506
          /* BrtEndDXFs */
        );
      }
      function write_TABLESTYLES_bin(ba2) {
        var cnt = 0;
        write_record(ba2, 508, write_BrtBeginTableStyles(cnt, "TableStyleMedium9", "PivotStyleMedium4"));
        write_record(
          ba2,
          509
          /* BrtEndTableStyles */
        );
      }
      function write_COLORPALETTE_bin() {
        return;
      }
      function write_sty_bin(wb, opts) {
        var ba2 = buf_array();
        write_record(
          ba2,
          278
          /* BrtBeginStyleSheet */
        );
        write_FMTS_bin(ba2, wb.SSF);
        write_FONTS_bin(ba2, wb);
        write_FILLS_bin(ba2, wb);
        write_BORDERS_bin(ba2, wb);
        write_CELLSTYLEXFS_bin(ba2, wb);
        write_CELLXFS_bin(ba2, opts.cellXfs);
        write_STYLES_bin(ba2, wb);
        write_DXFS_bin(ba2, wb);
        write_TABLESTYLES_bin(ba2, wb);
        write_COLORPALETTE_bin(ba2, wb);
        write_record(
          ba2,
          279
          /* BrtEndStyleSheet */
        );
        return ba2.end();
      }
      var XLSXThemeClrScheme = [
        "</a:lt1>",
        "</a:dk1>",
        "</a:lt2>",
        "</a:dk2>",
        "</a:accent1>",
        "</a:accent2>",
        "</a:accent3>",
        "</a:accent4>",
        "</a:accent5>",
        "</a:accent6>",
        "</a:hlink>",
        "</a:folHlink>"
      ];
      function parse_clrScheme(t3, themes, opts) {
        themes.themeElements.clrScheme = [];
        var color = {};
        (t3[0].match(tagregex) || []).forEach(function(x3) {
          var y3 = parsexmltag(x3);
          switch (y3[0]) {
            /* 20.1.6.2 clrScheme (Color Scheme) CT_ColorScheme */
            case "<a:clrScheme":
            case "</a:clrScheme>":
              break;
            /* 20.1.2.3.32 srgbClr CT_SRgbColor */
            case "<a:srgbClr":
              color.rgb = y3.val;
              break;
            /* 20.1.2.3.33 sysClr CT_SystemColor */
            case "<a:sysClr":
              color.rgb = y3.lastClr;
              break;
            /* 20.1.4.1.1 accent1 (Accent 1) */
            /* 20.1.4.1.2 accent2 (Accent 2) */
            /* 20.1.4.1.3 accent3 (Accent 3) */
            /* 20.1.4.1.4 accent4 (Accent 4) */
            /* 20.1.4.1.5 accent5 (Accent 5) */
            /* 20.1.4.1.6 accent6 (Accent 6) */
            /* 20.1.4.1.9 dk1 (Dark 1) */
            /* 20.1.4.1.10 dk2 (Dark 2) */
            /* 20.1.4.1.15 folHlink (Followed Hyperlink) */
            /* 20.1.4.1.19 hlink (Hyperlink) */
            /* 20.1.4.1.22 lt1 (Light 1) */
            /* 20.1.4.1.23 lt2 (Light 2) */
            case "<a:dk1>":
            case "</a:dk1>":
            case "<a:lt1>":
            case "</a:lt1>":
            case "<a:dk2>":
            case "</a:dk2>":
            case "<a:lt2>":
            case "</a:lt2>":
            case "<a:accent1>":
            case "</a:accent1>":
            case "<a:accent2>":
            case "</a:accent2>":
            case "<a:accent3>":
            case "</a:accent3>":
            case "<a:accent4>":
            case "</a:accent4>":
            case "<a:accent5>":
            case "</a:accent5>":
            case "<a:accent6>":
            case "</a:accent6>":
            case "<a:hlink>":
            case "</a:hlink>":
            case "<a:folHlink>":
            case "</a:folHlink>":
              if (y3[0].charAt(1) === "/") {
                themes.themeElements.clrScheme[XLSXThemeClrScheme.indexOf(y3[0])] = color;
                color = {};
              } else {
                color.name = y3[0].slice(3, y3[0].length - 1);
              }
              break;
            default:
              if (opts && opts.WTF) throw new Error("Unrecognized " + y3[0] + " in clrScheme");
          }
        });
      }
      function parse_fontScheme() {
      }
      function parse_fmtScheme() {
      }
      var clrsregex = /<a:clrScheme([^>]*)>[\s\S]*<\/a:clrScheme>/;
      var fntsregex = /<a:fontScheme([^>]*)>[\s\S]*<\/a:fontScheme>/;
      var fmtsregex = /<a:fmtScheme([^>]*)>[\s\S]*<\/a:fmtScheme>/;
      function parse_themeElements(data, themes, opts) {
        themes.themeElements = {};
        var t3;
        [
          /* clrScheme CT_ColorScheme */
          ["clrScheme", clrsregex, parse_clrScheme],
          /* fontScheme CT_FontScheme */
          ["fontScheme", fntsregex, parse_fontScheme],
          /* fmtScheme CT_StyleMatrix */
          ["fmtScheme", fmtsregex, parse_fmtScheme]
        ].forEach(function(m3) {
          if (!(t3 = data.match(m3[1]))) throw new Error(m3[0] + " not found in themeElements");
          m3[2](t3, themes, opts);
        });
      }
      var themeltregex = /<a:themeElements([^>]*)>[\s\S]*<\/a:themeElements>/;
      function parse_theme_xml(data, opts) {
        if (!data || data.length === 0) data = write_theme();
        var t3;
        var themes = {};
        if (!(t3 = data.match(themeltregex))) throw new Error("themeElements not found in theme");
        parse_themeElements(t3[0], themes, opts);
        themes.raw = data;
        return themes;
      }
      function write_theme(Themes, opts) {
        if (opts && opts.themeXLSX) return opts.themeXLSX;
        if (Themes && typeof Themes.raw == "string") return Themes.raw;
        var o3 = [XML_HEADER];
        o3[o3.length] = '<a:theme xmlns:a="http://schemas.openxmlformats.org/drawingml/2006/main" name="Office Theme">';
        o3[o3.length] = "<a:themeElements>";
        o3[o3.length] = '<a:clrScheme name="Office">';
        o3[o3.length] = '<a:dk1><a:sysClr val="windowText" lastClr="000000"/></a:dk1>';
        o3[o3.length] = '<a:lt1><a:sysClr val="window" lastClr="FFFFFF"/></a:lt1>';
        o3[o3.length] = '<a:dk2><a:srgbClr val="1F497D"/></a:dk2>';
        o3[o3.length] = '<a:lt2><a:srgbClr val="EEECE1"/></a:lt2>';
        o3[o3.length] = '<a:accent1><a:srgbClr val="4F81BD"/></a:accent1>';
        o3[o3.length] = '<a:accent2><a:srgbClr val="C0504D"/></a:accent2>';
        o3[o3.length] = '<a:accent3><a:srgbClr val="9BBB59"/></a:accent3>';
        o3[o3.length] = '<a:accent4><a:srgbClr val="8064A2"/></a:accent4>';
        o3[o3.length] = '<a:accent5><a:srgbClr val="4BACC6"/></a:accent5>';
        o3[o3.length] = '<a:accent6><a:srgbClr val="F79646"/></a:accent6>';
        o3[o3.length] = '<a:hlink><a:srgbClr val="0000FF"/></a:hlink>';
        o3[o3.length] = '<a:folHlink><a:srgbClr val="800080"/></a:folHlink>';
        o3[o3.length] = "</a:clrScheme>";
        o3[o3.length] = '<a:fontScheme name="Office">';
        o3[o3.length] = "<a:majorFont>";
        o3[o3.length] = '<a:latin typeface="Cambria"/>';
        o3[o3.length] = '<a:ea typeface=""/>';
        o3[o3.length] = '<a:cs typeface=""/>';
        o3[o3.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
        o3[o3.length] = '<a:font script="Hang" typeface="맑은 고딕"/>';
        o3[o3.length] = '<a:font script="Hans" typeface="宋体"/>';
        o3[o3.length] = '<a:font script="Hant" typeface="新細明體"/>';
        o3[o3.length] = '<a:font script="Arab" typeface="Times New Roman"/>';
        o3[o3.length] = '<a:font script="Hebr" typeface="Times New Roman"/>';
        o3[o3.length] = '<a:font script="Thai" typeface="Tahoma"/>';
        o3[o3.length] = '<a:font script="Ethi" typeface="Nyala"/>';
        o3[o3.length] = '<a:font script="Beng" typeface="Vrinda"/>';
        o3[o3.length] = '<a:font script="Gujr" typeface="Shruti"/>';
        o3[o3.length] = '<a:font script="Khmr" typeface="MoolBoran"/>';
        o3[o3.length] = '<a:font script="Knda" typeface="Tunga"/>';
        o3[o3.length] = '<a:font script="Guru" typeface="Raavi"/>';
        o3[o3.length] = '<a:font script="Cans" typeface="Euphemia"/>';
        o3[o3.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
        o3[o3.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
        o3[o3.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
        o3[o3.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
        o3[o3.length] = '<a:font script="Deva" typeface="Mangal"/>';
        o3[o3.length] = '<a:font script="Telu" typeface="Gautami"/>';
        o3[o3.length] = '<a:font script="Taml" typeface="Latha"/>';
        o3[o3.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
        o3[o3.length] = '<a:font script="Orya" typeface="Kalinga"/>';
        o3[o3.length] = '<a:font script="Mlym" typeface="Kartika"/>';
        o3[o3.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
        o3[o3.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
        o3[o3.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
        o3[o3.length] = '<a:font script="Viet" typeface="Times New Roman"/>';
        o3[o3.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
        o3[o3.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
        o3[o3.length] = "</a:majorFont>";
        o3[o3.length] = "<a:minorFont>";
        o3[o3.length] = '<a:latin typeface="Calibri"/>';
        o3[o3.length] = '<a:ea typeface=""/>';
        o3[o3.length] = '<a:cs typeface=""/>';
        o3[o3.length] = '<a:font script="Jpan" typeface="ＭＳ Ｐゴシック"/>';
        o3[o3.length] = '<a:font script="Hang" typeface="맑은 고딕"/>';
        o3[o3.length] = '<a:font script="Hans" typeface="宋体"/>';
        o3[o3.length] = '<a:font script="Hant" typeface="新細明體"/>';
        o3[o3.length] = '<a:font script="Arab" typeface="Arial"/>';
        o3[o3.length] = '<a:font script="Hebr" typeface="Arial"/>';
        o3[o3.length] = '<a:font script="Thai" typeface="Tahoma"/>';
        o3[o3.length] = '<a:font script="Ethi" typeface="Nyala"/>';
        o3[o3.length] = '<a:font script="Beng" typeface="Vrinda"/>';
        o3[o3.length] = '<a:font script="Gujr" typeface="Shruti"/>';
        o3[o3.length] = '<a:font script="Khmr" typeface="DaunPenh"/>';
        o3[o3.length] = '<a:font script="Knda" typeface="Tunga"/>';
        o3[o3.length] = '<a:font script="Guru" typeface="Raavi"/>';
        o3[o3.length] = '<a:font script="Cans" typeface="Euphemia"/>';
        o3[o3.length] = '<a:font script="Cher" typeface="Plantagenet Cherokee"/>';
        o3[o3.length] = '<a:font script="Yiii" typeface="Microsoft Yi Baiti"/>';
        o3[o3.length] = '<a:font script="Tibt" typeface="Microsoft Himalaya"/>';
        o3[o3.length] = '<a:font script="Thaa" typeface="MV Boli"/>';
        o3[o3.length] = '<a:font script="Deva" typeface="Mangal"/>';
        o3[o3.length] = '<a:font script="Telu" typeface="Gautami"/>';
        o3[o3.length] = '<a:font script="Taml" typeface="Latha"/>';
        o3[o3.length] = '<a:font script="Syrc" typeface="Estrangelo Edessa"/>';
        o3[o3.length] = '<a:font script="Orya" typeface="Kalinga"/>';
        o3[o3.length] = '<a:font script="Mlym" typeface="Kartika"/>';
        o3[o3.length] = '<a:font script="Laoo" typeface="DokChampa"/>';
        o3[o3.length] = '<a:font script="Sinh" typeface="Iskoola Pota"/>';
        o3[o3.length] = '<a:font script="Mong" typeface="Mongolian Baiti"/>';
        o3[o3.length] = '<a:font script="Viet" typeface="Arial"/>';
        o3[o3.length] = '<a:font script="Uigh" typeface="Microsoft Uighur"/>';
        o3[o3.length] = '<a:font script="Geor" typeface="Sylfaen"/>';
        o3[o3.length] = "</a:minorFont>";
        o3[o3.length] = "</a:fontScheme>";
        o3[o3.length] = '<a:fmtScheme name="Office">';
        o3[o3.length] = "<a:fillStyleLst>";
        o3[o3.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
        o3[o3.length] = '<a:gradFill rotWithShape="1">';
        o3[o3.length] = "<a:gsLst>";
        o3[o3.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="50000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o3[o3.length] = '<a:gs pos="35000"><a:schemeClr val="phClr"><a:tint val="37000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o3[o3.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="15000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o3[o3.length] = "</a:gsLst>";
        o3[o3.length] = '<a:lin ang="16200000" scaled="1"/>';
        o3[o3.length] = "</a:gradFill>";
        o3[o3.length] = '<a:gradFill rotWithShape="1">';
        o3[o3.length] = "<a:gsLst>";
        o3[o3.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="100000"/><a:shade val="100000"/><a:satMod val="130000"/></a:schemeClr></a:gs>';
        o3[o3.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:tint val="50000"/><a:shade val="100000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o3[o3.length] = "</a:gsLst>";
        o3[o3.length] = '<a:lin ang="16200000" scaled="0"/>';
        o3[o3.length] = "</a:gradFill>";
        o3[o3.length] = "</a:fillStyleLst>";
        o3[o3.length] = "<a:lnStyleLst>";
        o3[o3.length] = '<a:ln w="9525" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"><a:shade val="95000"/><a:satMod val="105000"/></a:schemeClr></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o3[o3.length] = '<a:ln w="25400" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o3[o3.length] = '<a:ln w="38100" cap="flat" cmpd="sng" algn="ctr"><a:solidFill><a:schemeClr val="phClr"/></a:solidFill><a:prstDash val="solid"/></a:ln>';
        o3[o3.length] = "</a:lnStyleLst>";
        o3[o3.length] = "<a:effectStyleLst>";
        o3[o3.length] = "<a:effectStyle>";
        o3[o3.length] = "<a:effectLst>";
        o3[o3.length] = '<a:outerShdw blurRad="40000" dist="20000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="38000"/></a:srgbClr></a:outerShdw>';
        o3[o3.length] = "</a:effectLst>";
        o3[o3.length] = "</a:effectStyle>";
        o3[o3.length] = "<a:effectStyle>";
        o3[o3.length] = "<a:effectLst>";
        o3[o3.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
        o3[o3.length] = "</a:effectLst>";
        o3[o3.length] = "</a:effectStyle>";
        o3[o3.length] = "<a:effectStyle>";
        o3[o3.length] = "<a:effectLst>";
        o3[o3.length] = '<a:outerShdw blurRad="40000" dist="23000" dir="5400000" rotWithShape="0"><a:srgbClr val="000000"><a:alpha val="35000"/></a:srgbClr></a:outerShdw>';
        o3[o3.length] = "</a:effectLst>";
        o3[o3.length] = '<a:scene3d><a:camera prst="orthographicFront"><a:rot lat="0" lon="0" rev="0"/></a:camera><a:lightRig rig="threePt" dir="t"><a:rot lat="0" lon="0" rev="1200000"/></a:lightRig></a:scene3d>';
        o3[o3.length] = '<a:sp3d><a:bevelT w="63500" h="25400"/></a:sp3d>';
        o3[o3.length] = "</a:effectStyle>";
        o3[o3.length] = "</a:effectStyleLst>";
        o3[o3.length] = "<a:bgFillStyleLst>";
        o3[o3.length] = '<a:solidFill><a:schemeClr val="phClr"/></a:solidFill>';
        o3[o3.length] = '<a:gradFill rotWithShape="1">';
        o3[o3.length] = "<a:gsLst>";
        o3[o3.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="40000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o3[o3.length] = '<a:gs pos="40000"><a:schemeClr val="phClr"><a:tint val="45000"/><a:shade val="99000"/><a:satMod val="350000"/></a:schemeClr></a:gs>';
        o3[o3.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="20000"/><a:satMod val="255000"/></a:schemeClr></a:gs>';
        o3[o3.length] = "</a:gsLst>";
        o3[o3.length] = '<a:path path="circle"><a:fillToRect l="50000" t="-80000" r="50000" b="180000"/></a:path>';
        o3[o3.length] = "</a:gradFill>";
        o3[o3.length] = '<a:gradFill rotWithShape="1">';
        o3[o3.length] = "<a:gsLst>";
        o3[o3.length] = '<a:gs pos="0"><a:schemeClr val="phClr"><a:tint val="80000"/><a:satMod val="300000"/></a:schemeClr></a:gs>';
        o3[o3.length] = '<a:gs pos="100000"><a:schemeClr val="phClr"><a:shade val="30000"/><a:satMod val="200000"/></a:schemeClr></a:gs>';
        o3[o3.length] = "</a:gsLst>";
        o3[o3.length] = '<a:path path="circle"><a:fillToRect l="50000" t="50000" r="50000" b="50000"/></a:path>';
        o3[o3.length] = "</a:gradFill>";
        o3[o3.length] = "</a:bgFillStyleLst>";
        o3[o3.length] = "</a:fmtScheme>";
        o3[o3.length] = "</a:themeElements>";
        o3[o3.length] = "<a:objectDefaults>";
        o3[o3.length] = "<a:spDef>";
        o3[o3.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="1"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="3"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="2"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="lt1"/></a:fontRef></a:style>';
        o3[o3.length] = "</a:spDef>";
        o3[o3.length] = "<a:lnDef>";
        o3[o3.length] = '<a:spPr/><a:bodyPr/><a:lstStyle/><a:style><a:lnRef idx="2"><a:schemeClr val="accent1"/></a:lnRef><a:fillRef idx="0"><a:schemeClr val="accent1"/></a:fillRef><a:effectRef idx="1"><a:schemeClr val="accent1"/></a:effectRef><a:fontRef idx="minor"><a:schemeClr val="tx1"/></a:fontRef></a:style>';
        o3[o3.length] = "</a:lnDef>";
        o3[o3.length] = "</a:objectDefaults>";
        o3[o3.length] = "<a:extraClrSchemeLst/>";
        o3[o3.length] = "</a:theme>";
        return o3.join("");
      }
      function parse_Theme(blob, length, opts) {
        var end = blob.l + length;
        var dwThemeVersion = blob.read_shift(4);
        if (dwThemeVersion === 124226) return;
        if (!opts.cellStyles) {
          blob.l = end;
          return;
        }
        var data = blob.slice(blob.l);
        blob.l = end;
        var zip;
        try {
          zip = zip_read(data, { type: "array" });
        } catch (e3) {
          return;
        }
        var themeXML = getzipstr(zip, "theme/theme/theme1.xml", true);
        if (!themeXML) return;
        return parse_theme_xml(themeXML, opts);
      }
      function parse_ColorTheme(blob) {
        return blob.read_shift(4);
      }
      function parse_FullColorExt(blob) {
        var o3 = {};
        o3.xclrType = blob.read_shift(2);
        o3.nTintShade = blob.read_shift(2);
        switch (o3.xclrType) {
          case 0:
            blob.l += 4;
            break;
          case 1:
            o3.xclrValue = parse_IcvXF(blob, 4);
            break;
          case 2:
            o3.xclrValue = parse_LongRGBA(blob, 4);
            break;
          case 3:
            o3.xclrValue = parse_ColorTheme(blob, 4);
            break;
          case 4:
            blob.l += 4;
            break;
        }
        blob.l += 8;
        return o3;
      }
      function parse_IcvXF(blob, length) {
        return parsenoop(blob, length);
      }
      function parse_XFExtGradient(blob, length) {
        return parsenoop(blob, length);
      }
      function parse_ExtProp(blob) {
        var extType = blob.read_shift(2);
        var cb = blob.read_shift(2) - 4;
        var o3 = [extType];
        switch (extType) {
          case 4:
          case 5:
          case 7:
          case 8:
          case 9:
          case 10:
          case 11:
          case 13:
            o3[1] = parse_FullColorExt(blob, cb);
            break;
          case 6:
            o3[1] = parse_XFExtGradient(blob, cb);
            break;
          case 14:
          case 15:
            o3[1] = blob.read_shift(cb === 1 ? 1 : 2);
            break;
          default:
            throw new Error("Unrecognized ExtProp type: " + extType + " " + cb);
        }
        return o3;
      }
      function parse_XFExt(blob, length) {
        var end = blob.l + length;
        blob.l += 2;
        var ixfe = blob.read_shift(2);
        blob.l += 2;
        var cexts = blob.read_shift(2);
        var ext = [];
        while (cexts-- > 0) ext.push(parse_ExtProp(blob, end - blob.l));
        return { ixfe, ext };
      }
      function update_xfext(xf, xfext) {
        xfext.forEach(function(xfe) {
          switch (xfe[0]) {
            /* 2.5.108 extPropData */
            case 4:
              break;
            /* foreground color */
            case 5:
              break;
            /* background color */
            case 6:
              break;
            /* gradient fill */
            case 7:
              break;
            /* top cell border color */
            case 8:
              break;
            /* bottom cell border color */
            case 9:
              break;
            /* left cell border color */
            case 10:
              break;
            /* right cell border color */
            case 11:
              break;
            /* diagonal cell border color */
            case 13:
              break;
            case 14:
              break;
            /* font scheme */
            case 15:
              break;
          }
        });
      }
      function parse_BrtMdtinfo(data, length) {
        return {
          flags: data.read_shift(4),
          version: data.read_shift(4),
          name: parse_XLWideString(data, length - 8)
        };
      }
      function write_BrtMdtinfo(data) {
        var o3 = new_buf(12 + 2 * data.name.length);
        o3.write_shift(4, data.flags);
        o3.write_shift(4, data.version);
        write_XLWideString(data.name, o3);
        return o3.slice(0, o3.l);
      }
      function parse_BrtMdb(data) {
        var out = [];
        var cnt = data.read_shift(4);
        while (cnt-- > 0)
          out.push([data.read_shift(4), data.read_shift(4)]);
        return out;
      }
      function write_BrtMdb(mdb) {
        var o3 = new_buf(4 + 8 * mdb.length);
        o3.write_shift(4, mdb.length);
        for (var i3 = 0; i3 < mdb.length; ++i3) {
          o3.write_shift(4, mdb[i3][0]);
          o3.write_shift(4, mdb[i3][1]);
        }
        return o3;
      }
      function write_BrtBeginEsfmd(cnt, name) {
        var o3 = new_buf(8 + 2 * name.length);
        o3.write_shift(4, cnt);
        write_XLWideString(name, o3);
        return o3.slice(0, o3.l);
      }
      function parse_BrtBeginEsmdb(data) {
        data.l += 4;
        return data.read_shift(4) != 0;
      }
      function write_BrtBeginEsmdb(cnt, cm) {
        var o3 = new_buf(8);
        o3.write_shift(4, cnt);
        o3.write_shift(4, cm ? 1 : 0);
        return o3;
      }
      function parse_xlmeta_bin(data, name, _opts) {
        var out = { Types: [], Cell: [], Value: [] };
        var opts = _opts || {};
        var state = [];
        var pass = false;
        var metatype = 2;
        recordhopper(data, function(val, R2, RT) {
          switch (RT) {
            case 335:
              out.Types.push({ name: val.name });
              break;
            case 51:
              val.forEach(function(r3) {
                if (metatype == 1)
                  out.Cell.push({ type: out.Types[r3[0] - 1].name, index: r3[1] });
                else if (metatype == 0)
                  out.Value.push({ type: out.Types[r3[0] - 1].name, index: r3[1] });
              });
              break;
            case 337:
              metatype = val ? 1 : 0;
              break;
            case 338:
              metatype = 2;
              break;
            case 35:
              state.push(RT);
              pass = true;
              break;
            case 36:
              state.pop();
              pass = false;
              break;
            default:
              if (R2.T) {
              } else if (!pass || opts.WTF && state[state.length - 1] != 35)
                throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return out;
      }
      function write_xlmeta_bin() {
        var ba2 = buf_array();
        write_record(ba2, 332);
        write_record(ba2, 334, write_UInt32LE(1));
        write_record(ba2, 335, write_BrtMdtinfo({
          name: "XLDAPR",
          version: 12e4,
          flags: 3496657072
        }));
        write_record(ba2, 336);
        write_record(ba2, 339, write_BrtBeginEsfmd(1, "XLDAPR"));
        write_record(ba2, 52);
        write_record(ba2, 35, write_UInt32LE(514));
        write_record(ba2, 4096, write_UInt32LE(0));
        write_record(ba2, 4097, writeuint16(1));
        write_record(ba2, 36);
        write_record(ba2, 53);
        write_record(ba2, 340);
        write_record(ba2, 337, write_BrtBeginEsmdb(1, true));
        write_record(ba2, 51, write_BrtMdb([[1, 0]]));
        write_record(ba2, 338);
        write_record(ba2, 333);
        return ba2.end();
      }
      function parse_xlmeta_xml(data, name, opts) {
        var out = { Types: [], Cell: [], Value: [] };
        if (!data)
          return out;
        var pass = false;
        var metatype = 2;
        var lastmeta;
        data.replace(tagregex, function(x3) {
          var y3 = parsexmltag(x3);
          switch (strip_ns(y3[0])) {
            case "<?xml":
              break;
            case "<metadata":
            case "</metadata>":
              break;
            case "<metadataTypes":
            case "</metadataTypes>":
              break;
            case "<metadataType":
              out.Types.push({ name: y3.name });
              break;
            case "</metadataType>":
              break;
            case "<futureMetadata":
              for (var j3 = 0; j3 < out.Types.length; ++j3)
                if (out.Types[j3].name == y3.name)
                  lastmeta = out.Types[j3];
              break;
            case "</futureMetadata>":
              break;
            case "<bk>":
              break;
            case "</bk>":
              break;
            case "<rc":
              if (metatype == 1)
                out.Cell.push({ type: out.Types[y3.t - 1].name, index: +y3.v });
              else if (metatype == 0)
                out.Value.push({ type: out.Types[y3.t - 1].name, index: +y3.v });
              break;
            case "</rc>":
              break;
            case "<cellMetadata":
              metatype = 1;
              break;
            case "</cellMetadata>":
              metatype = 2;
              break;
            case "<valueMetadata":
              metatype = 0;
              break;
            case "</valueMetadata>":
              metatype = 2;
              break;
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
              break;
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            case "<rvb":
              if (!lastmeta)
                break;
              if (!lastmeta.offsets)
                lastmeta.offsets = [];
              lastmeta.offsets.push(+y3.i);
              break;
            default:
              if (!pass && opts.WTF)
                throw new Error("unrecognized " + y3[0] + " in metadata");
          }
          return x3;
        });
        return out;
      }
      function write_xlmeta_xml() {
        var o3 = [XML_HEADER];
        o3.push('<metadata xmlns="http://schemas.openxmlformats.org/spreadsheetml/2006/main" xmlns:xlrd="http://schemas.microsoft.com/office/spreadsheetml/2017/richdata" xmlns:xda="http://schemas.microsoft.com/office/spreadsheetml/2017/dynamicarray">\n  <metadataTypes count="1">\n    <metadataType name="XLDAPR" minSupportedVersion="120000" copy="1" pasteAll="1" pasteValues="1" merge="1" splitFirst="1" rowColShift="1" clearFormats="1" clearComments="1" assign="1" coerce="1" cellMeta="1"/>\n  </metadataTypes>\n  <futureMetadata name="XLDAPR" count="1">\n    <bk>\n      <extLst>\n        <ext uri="{bdbb8cdc-fa1e-496e-a857-3c3f30c029c3}">\n          <xda:dynamicArrayProperties fDynamic="1" fCollapsed="0"/>\n        </ext>\n      </extLst>\n    </bk>\n  </futureMetadata>\n  <cellMetadata count="1">\n    <bk>\n      <rc t="1" v="0"/>\n    </bk>\n  </cellMetadata>\n</metadata>');
        return o3.join("");
      }
      function parse_cc_xml(data) {
        var d3 = [];
        if (!data) return d3;
        var i3 = 1;
        (data.match(tagregex) || []).forEach(function(x3) {
          var y3 = parsexmltag(x3);
          switch (y3[0]) {
            case "<?xml":
              break;
            /* 18.6.2  calcChain CT_CalcChain 1 */
            case "<calcChain":
            case "<calcChain>":
            case "</calcChain>":
              break;
            /* 18.6.1  c CT_CalcCell 1 */
            case "<c":
              delete y3[0];
              if (y3.i) i3 = y3.i;
              else y3.i = i3;
              d3.push(y3);
              break;
          }
        });
        return d3;
      }
      function parse_BrtCalcChainItem$(data) {
        var out = {};
        out.i = data.read_shift(4);
        var cell = {};
        cell.r = data.read_shift(4);
        cell.c = data.read_shift(4);
        out.r = encode_cell(cell);
        var flags = data.read_shift(1);
        if (flags & 2) out.l = "1";
        if (flags & 8) out.a = "1";
        return out;
      }
      function parse_cc_bin(data, name, opts) {
        var out = [];
        var pass = false;
        recordhopper(data, function hopper_cc(val, R2, RT) {
          switch (RT) {
            case 63:
              out.push(val);
              break;
            default:
              if (R2.T) {
              } else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return out;
      }
      function parse_xlink_xml() {
      }
      function parse_xlink_bin(data, rel, name, _opts) {
        if (!data) return data;
        var opts = _opts || {};
        var pass = false, end = false;
        recordhopper(data, function xlink_parse(val, R2, RT) {
          if (end) return;
          switch (RT) {
            case 359:
            /* 'BrtSupTabs' */
            case 363:
            /* 'BrtExternTableStart' */
            case 364:
            /* 'BrtExternTableEnd' */
            case 366:
            /* 'BrtExternRowHdr' */
            case 367:
            /* 'BrtExternCellBlank' */
            case 368:
            /* 'BrtExternCellReal' */
            case 369:
            /* 'BrtExternCellBool' */
            case 370:
            /* 'BrtExternCellError' */
            case 371:
            /* 'BrtExternCellString' */
            case 472:
            /* 'BrtExternValueMeta' */
            case 577:
            /* 'BrtSupNameStart' */
            case 578:
            /* 'BrtSupNameValueStart' */
            case 579:
            /* 'BrtSupNameValueEnd' */
            case 580:
            /* 'BrtSupNameNum' */
            case 581:
            /* 'BrtSupNameErr' */
            case 582:
            /* 'BrtSupNameSt' */
            case 583:
            /* 'BrtSupNameNil' */
            case 584:
            /* 'BrtSupNameBool' */
            case 585:
            /* 'BrtSupNameFmla' */
            case 586:
            /* 'BrtSupNameBits' */
            case 587:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            default:
              if (R2.T) {
              } else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        }, opts);
      }
      function parse_drawing(data, rels) {
        if (!data) return "??";
        var id = (data.match(/<c:chart [^>]*r:id="([^"]*)"/) || ["", ""])[1];
        return rels["!id"][id].Target;
      }
      var _shapeid = 1024;
      function write_comments_vml(rId, comments) {
        var csize = [21600, 21600];
        var bbox = ["m0,0l0", csize[1], csize[0], csize[1], csize[0], "0xe"].join(",");
        var o3 = [
          writextag("xml", null, { "xmlns:v": XLMLNS.v, "xmlns:o": XLMLNS.o, "xmlns:x": XLMLNS.x, "xmlns:mv": XLMLNS.mv }).replace(/\/>/, ">"),
          writextag("o:shapelayout", writextag("o:idmap", null, { "v:ext": "edit", "data": rId }), { "v:ext": "edit" }),
          writextag("v:shapetype", [
            writextag("v:stroke", null, { joinstyle: "miter" }),
            writextag("v:path", null, { gradientshapeok: "t", "o:connecttype": "rect" })
          ].join(""), { id: "_x0000_t202", "o:spt": 202, coordsize: csize.join(","), path: bbox })
        ];
        while (_shapeid < rId * 1e3) _shapeid += 1e3;
        comments.forEach(function(x3) {
          var c3 = decode_cell(x3[0]);
          var fillopts = { "color2": "#BEFF82", "type": "gradient" };
          if (fillopts.type == "gradient") fillopts.angle = "-180";
          var fillparm = fillopts.type == "gradient" ? writextag("o:fill", null, { type: "gradientUnscaled", "v:ext": "view" }) : null;
          var fillxml = writextag("v:fill", fillparm, fillopts);
          var shadata = { on: "t", "obscured": "t" };
          ++_shapeid;
          o3 = o3.concat([
            "<v:shape" + wxt_helper({
              id: "_x0000_s" + _shapeid,
              type: "#_x0000_t202",
              style: "position:absolute; margin-left:80pt;margin-top:5pt;width:104pt;height:64pt;z-index:10" + (x3[1].hidden ? ";visibility:hidden" : ""),
              fillcolor: "#ECFAD4",
              strokecolor: "#edeaa1"
            }) + ">",
            fillxml,
            writextag("v:shadow", null, shadata),
            writextag("v:path", null, { "o:connecttype": "none" }),
            '<v:textbox><div style="text-align:left"></div></v:textbox>',
            '<x:ClientData ObjectType="Note">',
            "<x:MoveWithCells/>",
            "<x:SizeWithCells/>",
            /* Part 4 19.4.2.3 Anchor (Anchor) */
            writetag("x:Anchor", [c3.c + 1, 0, c3.r + 1, 0, c3.c + 3, 20, c3.r + 5, 20].join(",")),
            writetag("x:AutoFill", "False"),
            writetag("x:Row", String(c3.r)),
            writetag("x:Column", String(c3.c)),
            x3[1].hidden ? "" : "<x:Visible/>",
            "</x:ClientData>",
            "</v:shape>"
          ]);
        });
        o3.push("</xml>");
        return o3.join("");
      }
      function sheet_insert_comments(sheet, comments, threaded, people) {
        var dense = Array.isArray(sheet);
        var cell;
        comments.forEach(function(comment) {
          var r3 = decode_cell(comment.ref);
          if (dense) {
            if (!sheet[r3.r]) sheet[r3.r] = [];
            cell = sheet[r3.r][r3.c];
          } else cell = sheet[comment.ref];
          if (!cell) {
            cell = { t: "z" };
            if (dense) sheet[r3.r][r3.c] = cell;
            else sheet[comment.ref] = cell;
            var range = safe_decode_range(sheet["!ref"] || "BDWGO1000001:A1");
            if (range.s.r > r3.r) range.s.r = r3.r;
            if (range.e.r < r3.r) range.e.r = r3.r;
            if (range.s.c > r3.c) range.s.c = r3.c;
            if (range.e.c < r3.c) range.e.c = r3.c;
            var encoded = encode_range(range);
            if (encoded !== sheet["!ref"]) sheet["!ref"] = encoded;
          }
          if (!cell.c) cell.c = [];
          var o3 = { a: comment.author, t: comment.t, r: comment.r, T: threaded };
          if (comment.h) o3.h = comment.h;
          for (var i3 = cell.c.length - 1; i3 >= 0; --i3) {
            if (!threaded && cell.c[i3].T) return;
            if (threaded && !cell.c[i3].T) cell.c.splice(i3, 1);
          }
          if (threaded && people) for (i3 = 0; i3 < people.length; ++i3) {
            if (o3.a == people[i3].id) {
              o3.a = people[i3].name || o3.a;
              break;
            }
          }
          cell.c.push(o3);
        });
      }
      function parse_comments_xml(data, opts) {
        if (data.match(/<(?:\w+:)?comments *\/>/)) return [];
        var authors = [];
        var commentList = [];
        var authtag = data.match(/<(?:\w+:)?authors>([\s\S]*)<\/(?:\w+:)?authors>/);
        if (authtag && authtag[1]) authtag[1].split(/<\/\w*:?author>/).forEach(function(x3) {
          if (x3 === "" || x3.trim() === "") return;
          var a2 = x3.match(/<(?:\w+:)?author[^>]*>(.*)/);
          if (a2) authors.push(a2[1]);
        });
        var cmnttag = data.match(/<(?:\w+:)?commentList>([\s\S]*)<\/(?:\w+:)?commentList>/);
        if (cmnttag && cmnttag[1]) cmnttag[1].split(/<\/\w*:?comment>/).forEach(function(x3) {
          if (x3 === "" || x3.trim() === "") return;
          var cm = x3.match(/<(?:\w+:)?comment[^>]*>/);
          if (!cm) return;
          var y3 = parsexmltag(cm[0]);
          var comment = { author: y3.authorId && authors[y3.authorId] || "sheetjsghost", ref: y3.ref, guid: y3.guid };
          var cell = decode_cell(y3.ref);
          if (opts.sheetRows && opts.sheetRows <= cell.r) return;
          var textMatch = x3.match(/<(?:\w+:)?text>([\s\S]*)<\/(?:\w+:)?text>/);
          var rt2 = !!textMatch && !!textMatch[1] && parse_si(textMatch[1]) || { r: "", t: "", h: "" };
          comment.r = rt2.r;
          if (rt2.r == "<t></t>") rt2.t = rt2.h = "";
          comment.t = (rt2.t || "").replace(/\r\n/g, "\n").replace(/\r/g, "\n");
          if (opts.cellHTML) comment.h = rt2.h;
          commentList.push(comment);
        });
        return commentList;
      }
      function write_comments_xml(data) {
        var o3 = [XML_HEADER, writextag("comments", null, { "xmlns": XMLNS_main[0] })];
        var iauthor = [];
        o3.push("<authors>");
        data.forEach(function(x3) {
          x3[1].forEach(function(w3) {
            var a2 = escapexml(w3.a);
            if (iauthor.indexOf(a2) == -1) {
              iauthor.push(a2);
              o3.push("<author>" + a2 + "</author>");
            }
            if (w3.T && w3.ID && iauthor.indexOf("tc=" + w3.ID) == -1) {
              iauthor.push("tc=" + w3.ID);
              o3.push("<author>tc=" + w3.ID + "</author>");
            }
          });
        });
        if (iauthor.length == 0) {
          iauthor.push("SheetJ5");
          o3.push("<author>SheetJ5</author>");
        }
        o3.push("</authors>");
        o3.push("<commentList>");
        data.forEach(function(d3) {
          var lastauthor = 0, ts = [];
          if (d3[1][0] && d3[1][0].T && d3[1][0].ID) lastauthor = iauthor.indexOf("tc=" + d3[1][0].ID);
          else d3[1].forEach(function(c3) {
            if (c3.a) lastauthor = iauthor.indexOf(escapexml(c3.a));
            ts.push(c3.t || "");
          });
          o3.push('<comment ref="' + d3[0] + '" authorId="' + lastauthor + '"><text>');
          if (ts.length <= 1) o3.push(writetag("t", escapexml(ts[0] || "")));
          else {
            var t3 = "Comment:\n    " + ts[0] + "\n";
            for (var i3 = 1; i3 < ts.length; ++i3) t3 += "Reply:\n    " + ts[i3] + "\n";
            o3.push(writetag("t", escapexml(t3)));
          }
          o3.push("</text></comment>");
        });
        o3.push("</commentList>");
        if (o3.length > 2) {
          o3[o3.length] = "</comments>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      function parse_tcmnt_xml(data, opts) {
        var out = [];
        var pass = false, comment = {}, tidx = 0;
        data.replace(tagregex, function xml_tcmnt(x3, idx) {
          var y3 = parsexmltag(x3);
          switch (strip_ns(y3[0])) {
            case "<?xml":
              break;
            /* 2.6.207 ThreadedComments CT_ThreadedComments */
            case "<ThreadedComments":
              break;
            case "</ThreadedComments>":
              break;
            /* 2.6.205 threadedComment CT_ThreadedComment */
            case "<threadedComment":
              comment = { author: y3.personId, guid: y3.id, ref: y3.ref, T: 1 };
              break;
            case "</threadedComment>":
              if (comment.t != null) out.push(comment);
              break;
            case "<text>":
            case "<text":
              tidx = idx + x3.length;
              break;
            case "</text>":
              comment.t = data.slice(tidx, idx).replace(/\r\n/g, "\n").replace(/\r/g, "\n");
              break;
            /* 2.6.206 mentions CT_ThreadedCommentMentions TODO */
            case "<mentions":
            case "<mentions>":
              pass = true;
              break;
            case "</mentions>":
              pass = false;
              break;
            /* 2.6.202 mention CT_Mention TODO */
            /* 18.2.10 extLst CT_ExtensionList ? */
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
              break;
            /* 18.2.7  ext CT_Extension + */
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (!pass && opts.WTF) throw new Error("unrecognized " + y3[0] + " in threaded comments");
          }
          return x3;
        });
        return out;
      }
      function write_tcmnt_xml(comments, people, opts) {
        var o3 = [XML_HEADER, writextag("ThreadedComments", null, { "xmlns": XMLNS.TCMNT }).replace(/[\/]>/, ">")];
        comments.forEach(function(carr) {
          var rootid = "";
          (carr[1] || []).forEach(function(c3, idx) {
            if (!c3.T) {
              delete c3.ID;
              return;
            }
            if (c3.a && people.indexOf(c3.a) == -1) people.push(c3.a);
            var tcopts = {
              ref: carr[0],
              id: "{54EE7951-7262-4200-6969-" + ("000000000000" + opts.tcid++).slice(-12) + "}"
            };
            if (idx == 0) rootid = tcopts.id;
            else tcopts.parentId = rootid;
            c3.ID = tcopts.id;
            if (c3.a) tcopts.personId = "{54EE7950-7262-4200-6969-" + ("000000000000" + people.indexOf(c3.a)).slice(-12) + "}";
            o3.push(writextag("threadedComment", writetag("text", c3.t || ""), tcopts));
          });
        });
        o3.push("</ThreadedComments>");
        return o3.join("");
      }
      function parse_people_xml(data, opts) {
        var out = [];
        var pass = false;
        data.replace(tagregex, function xml_tcmnt(x3) {
          var y3 = parsexmltag(x3);
          switch (strip_ns(y3[0])) {
            case "<?xml":
              break;
            /* 2.4.85 personList CT_PersonList */
            case "<personList":
              break;
            case "</personList>":
              break;
            /* 2.6.203 person CT_Person TODO: providers */
            case "<person":
              out.push({ name: y3.displayname, id: y3.id });
              break;
            case "</person>":
              break;
            /* 18.2.10 extLst CT_ExtensionList ? */
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
              break;
            /* 18.2.7  ext CT_Extension + */
            case "<ext":
              pass = true;
              break;
            case "</ext>":
              pass = false;
              break;
            default:
              if (!pass && opts.WTF) throw new Error("unrecognized " + y3[0] + " in threaded comments");
          }
          return x3;
        });
        return out;
      }
      function write_people_xml(people) {
        var o3 = [XML_HEADER, writextag("personList", null, {
          "xmlns": XMLNS.TCMNT,
          "xmlns:x": XMLNS_main[0]
        }).replace(/[\/]>/, ">")];
        people.forEach(function(person, idx) {
          o3.push(writextag("person", null, {
            displayName: person,
            id: "{54EE7950-7262-4200-6969-" + ("000000000000" + idx).slice(-12) + "}",
            userId: person,
            providerId: "None"
          }));
        });
        o3.push("</personList>");
        return o3.join("");
      }
      function parse_BrtBeginComment(data) {
        var out = {};
        out.iauthor = data.read_shift(4);
        var rfx = parse_UncheckedRfX(data, 16);
        out.rfx = rfx.s;
        out.ref = encode_cell(rfx.s);
        data.l += 16;
        return out;
      }
      function write_BrtBeginComment(data, o3) {
        if (o3 == null) o3 = new_buf(36);
        o3.write_shift(4, data[1].iauthor);
        write_UncheckedRfX(data[0], o3);
        o3.write_shift(4, 0);
        o3.write_shift(4, 0);
        o3.write_shift(4, 0);
        o3.write_shift(4, 0);
        return o3;
      }
      var parse_BrtCommentAuthor = parse_XLWideString;
      function write_BrtCommentAuthor(data) {
        return write_XLWideString(data.slice(0, 54));
      }
      function parse_comments_bin(data, opts) {
        var out = [];
        var authors = [];
        var c3 = {};
        var pass = false;
        recordhopper(data, function hopper_cmnt(val, R2, RT) {
          switch (RT) {
            case 632:
              authors.push(val);
              break;
            case 635:
              c3 = val;
              break;
            case 637:
              c3.t = val.t;
              c3.h = val.h;
              c3.r = val.r;
              break;
            case 636:
              c3.author = authors[c3.iauthor];
              delete c3.iauthor;
              if (opts.sheetRows && c3.rfx && opts.sheetRows <= c3.rfx.r) break;
              if (!c3.t) c3.t = "";
              delete c3.rfx;
              out.push(c3);
              break;
            case 3072:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              break;
            case 38:
              break;
            default:
              if (R2.T) {
              } else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        });
        return out;
      }
      function write_comments_bin(data) {
        var ba2 = buf_array();
        var iauthor = [];
        write_record(
          ba2,
          628
          /* BrtBeginComments */
        );
        write_record(
          ba2,
          630
          /* BrtBeginCommentAuthors */
        );
        data.forEach(function(comment) {
          comment[1].forEach(function(c3) {
            if (iauthor.indexOf(c3.a) > -1) return;
            iauthor.push(c3.a.slice(0, 54));
            write_record(ba2, 632, write_BrtCommentAuthor(c3.a));
          });
        });
        write_record(
          ba2,
          631
          /* BrtEndCommentAuthors */
        );
        write_record(
          ba2,
          633
          /* BrtBeginCommentList */
        );
        data.forEach(function(comment) {
          comment[1].forEach(function(c3) {
            c3.iauthor = iauthor.indexOf(c3.a);
            var range = { s: decode_cell(comment[0]), e: decode_cell(comment[0]) };
            write_record(ba2, 635, write_BrtBeginComment([range, c3]));
            if (c3.t && c3.t.length > 0) write_record(ba2, 637, write_BrtCommentText(c3));
            write_record(
              ba2,
              636
              /* BrtEndComment */
            );
            delete c3.iauthor;
          });
        });
        write_record(
          ba2,
          634
          /* BrtEndCommentList */
        );
        write_record(
          ba2,
          629
          /* BrtEndComments */
        );
        return ba2.end();
      }
      var CT_VBA = "application/vnd.ms-office.vbaProject";
      function make_vba_xls(cfb) {
        var newcfb = CFB.utils.cfb_new({ root: "R" });
        cfb.FullPaths.forEach(function(p3, i3) {
          if (p3.slice(-1) === "/" || !p3.match(/_VBA_PROJECT_CUR/))
            return;
          var newpath = p3.replace(/^[^\/]*/, "R").replace(/\/_VBA_PROJECT_CUR\u0000*/, "");
          CFB.utils.cfb_add(newcfb, newpath, cfb.FileIndex[i3].content);
        });
        return CFB.write(newcfb);
      }
      function fill_vba_xls(cfb, vba) {
        vba.FullPaths.forEach(function(p3, i3) {
          if (i3 == 0)
            return;
          var newpath = p3.replace(/[^\/]*[\/]/, "/_VBA_PROJECT_CUR/");
          if (newpath.slice(-1) !== "/")
            CFB.utils.cfb_add(cfb, newpath, vba.FileIndex[i3].content);
        });
      }
      var VBAFMTS = ["xlsb", "xlsm", "xlam", "biff8", "xla"];
      function parse_ds_bin() {
        return { "!type": "dialog" };
      }
      function parse_ds_xml() {
        return { "!type": "dialog" };
      }
      function parse_ms_bin() {
        return { "!type": "macro" };
      }
      function parse_ms_xml() {
        return { "!type": "macro" };
      }
      var rc_to_a1 = /* @__PURE__ */ function() {
        var rcregex = /(^|[^A-Za-z_])R(\[?-?\d+\]|[1-9]\d*|)C(\[?-?\d+\]|[1-9]\d*|)(?![A-Za-z0-9_])/g;
        var rcbase = { r: 0, c: 0 };
        function rcfunc($$, $1, $22, $32) {
          var cRel = false, rRel = false;
          if ($22.length == 0) rRel = true;
          else if ($22.charAt(0) == "[") {
            rRel = true;
            $22 = $22.slice(1, -1);
          }
          if ($32.length == 0) cRel = true;
          else if ($32.charAt(0) == "[") {
            cRel = true;
            $32 = $32.slice(1, -1);
          }
          var R2 = $22.length > 0 ? parseInt($22, 10) | 0 : 0, C2 = $32.length > 0 ? parseInt($32, 10) | 0 : 0;
          if (cRel) C2 += rcbase.c;
          else --C2;
          if (rRel) R2 += rcbase.r;
          else --R2;
          return $1 + (cRel ? "" : "$") + encode_col(C2) + (rRel ? "" : "$") + encode_row(R2);
        }
        return function rc_to_a12(fstr, base) {
          rcbase = base;
          return fstr.replace(rcregex, rcfunc);
        };
      }();
      var crefregex = /(^|[^._A-Z0-9])([$]?)([A-Z]{1,2}|[A-W][A-Z]{2}|X[A-E][A-Z]|XF[A-D])([$]?)(10[0-3]\d{4}|104[0-7]\d{3}|1048[0-4]\d{2}|10485[0-6]\d|104857[0-6]|[1-9]\d{0,5})(?![_.\(A-Za-z0-9])/g;
      var a1_to_rc = /* @__PURE__ */ function() {
        return function a1_to_rc2(fstr, base) {
          return fstr.replace(crefregex, function($0, $1, $22, $32, $4, $5) {
            var c3 = decode_col($32) - ($22 ? 0 : base.c);
            var r3 = decode_row($5) - ($4 ? 0 : base.r);
            var R2 = r3 == 0 ? "" : !$4 ? "[" + r3 + "]" : r3 + 1;
            var C2 = c3 == 0 ? "" : !$22 ? "[" + c3 + "]" : c3 + 1;
            return $1 + "R" + R2 + "C" + C2;
          });
        };
      }();
      function shift_formula_str(f2, delta) {
        return f2.replace(crefregex, function($0, $1, $22, $32, $4, $5) {
          return $1 + ($22 == "$" ? $22 + $32 : encode_col(decode_col($32) + delta.c)) + ($4 == "$" ? $4 + $5 : encode_row(decode_row($5) + delta.r));
        });
      }
      function shift_formula_xlsx(f2, range, cell) {
        var r3 = decode_range(range), s3 = r3.s, c3 = decode_cell(cell);
        var delta = { r: c3.r - s3.r, c: c3.c - s3.c };
        return shift_formula_str(f2, delta);
      }
      function fuzzyfmla(f2) {
        if (f2.length == 1) return false;
        return true;
      }
      function _xlfn(f2) {
        return f2.replace(/_xlfn\./g, "");
      }
      function parseread1(blob) {
        blob.l += 1;
        return;
      }
      function parse_ColRelU(blob, length) {
        var c3 = blob.read_shift(length == 1 ? 1 : 2);
        return [c3 & 16383, c3 >> 14 & 1, c3 >> 15 & 1];
      }
      function parse_RgceArea(blob, length, opts) {
        var w3 = 2;
        if (opts) {
          if (opts.biff >= 2 && opts.biff <= 5) return parse_RgceArea_BIFF2(blob, length, opts);
          else if (opts.biff == 12) w3 = 4;
        }
        var r3 = blob.read_shift(w3), R2 = blob.read_shift(w3);
        var c3 = parse_ColRelU(blob, 2);
        var C2 = parse_ColRelU(blob, 2);
        return { s: { r: r3, c: c3[0], cRel: c3[1], rRel: c3[2] }, e: { r: R2, c: C2[0], cRel: C2[1], rRel: C2[2] } };
      }
      function parse_RgceArea_BIFF2(blob) {
        var r3 = parse_ColRelU(blob, 2), R2 = parse_ColRelU(blob, 2);
        var c3 = blob.read_shift(1);
        var C2 = blob.read_shift(1);
        return { s: { r: r3[0], c: c3, cRel: r3[1], rRel: r3[2] }, e: { r: R2[0], c: C2, cRel: R2[1], rRel: R2[2] } };
      }
      function parse_RgceAreaRel(blob, length, opts) {
        if (opts.biff < 8) return parse_RgceArea_BIFF2(blob, length, opts);
        var r3 = blob.read_shift(opts.biff == 12 ? 4 : 2), R2 = blob.read_shift(opts.biff == 12 ? 4 : 2);
        var c3 = parse_ColRelU(blob, 2);
        var C2 = parse_ColRelU(blob, 2);
        return { s: { r: r3, c: c3[0], cRel: c3[1], rRel: c3[2] }, e: { r: R2, c: C2[0], cRel: C2[1], rRel: C2[2] } };
      }
      function parse_RgceLoc(blob, length, opts) {
        if (opts && opts.biff >= 2 && opts.biff <= 5) return parse_RgceLoc_BIFF2(blob, length, opts);
        var r3 = blob.read_shift(opts && opts.biff == 12 ? 4 : 2);
        var c3 = parse_ColRelU(blob, 2);
        return { r: r3, c: c3[0], cRel: c3[1], rRel: c3[2] };
      }
      function parse_RgceLoc_BIFF2(blob) {
        var r3 = parse_ColRelU(blob, 2);
        var c3 = blob.read_shift(1);
        return { r: r3[0], c: c3, cRel: r3[1], rRel: r3[2] };
      }
      function parse_RgceElfLoc(blob) {
        var r3 = blob.read_shift(2);
        var c3 = blob.read_shift(2);
        return { r: r3, c: c3 & 255, fQuoted: !!(c3 & 16384), cRel: c3 >> 15, rRel: c3 >> 15 };
      }
      function parse_RgceLocRel(blob, length, opts) {
        var biff = opts && opts.biff ? opts.biff : 8;
        if (biff >= 2 && biff <= 5) return parse_RgceLocRel_BIFF2(blob, length, opts);
        var r3 = blob.read_shift(biff >= 12 ? 4 : 2);
        var cl = blob.read_shift(2);
        var cRel = (cl & 16384) >> 14, rRel = (cl & 32768) >> 15;
        cl &= 16383;
        if (rRel == 1) while (r3 > 524287) r3 -= 1048576;
        if (cRel == 1) while (cl > 8191) cl = cl - 16384;
        return { r: r3, c: cl, cRel, rRel };
      }
      function parse_RgceLocRel_BIFF2(blob) {
        var rl = blob.read_shift(2);
        var c3 = blob.read_shift(1);
        var rRel = (rl & 32768) >> 15, cRel = (rl & 16384) >> 14;
        rl &= 16383;
        if (rRel == 1 && rl >= 8192) rl = rl - 16384;
        if (cRel == 1 && c3 >= 128) c3 = c3 - 256;
        return { r: rl, c: c3, cRel, rRel };
      }
      function parse_PtgArea(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var area = parse_RgceArea(blob, opts.biff >= 2 && opts.biff <= 5 ? 6 : 8, opts);
        return [type, area];
      }
      function parse_PtgArea3d(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2, "i");
        var w3 = 8;
        if (opts) switch (opts.biff) {
          case 5:
            blob.l += 12;
            w3 = 6;
            break;
          case 12:
            w3 = 12;
            break;
        }
        var area = parse_RgceArea(blob, w3, opts);
        return [type, ixti, area];
      }
      function parse_PtgAreaErr(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        blob.l += opts && opts.biff > 8 ? 12 : opts.biff < 8 ? 6 : 8;
        return [type];
      }
      function parse_PtgAreaErr3d(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2);
        var w3 = 8;
        if (opts) switch (opts.biff) {
          case 5:
            blob.l += 12;
            w3 = 6;
            break;
          case 12:
            w3 = 12;
            break;
        }
        blob.l += w3;
        return [type, ixti];
      }
      function parse_PtgAreaN(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var area = parse_RgceAreaRel(blob, length - 1, opts);
        return [type, area];
      }
      function parse_PtgArray(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        blob.l += opts.biff == 2 ? 6 : opts.biff == 12 ? 14 : 7;
        return [type];
      }
      function parse_PtgAttrBaxcel(blob) {
        var bitSemi = blob[blob.l + 1] & 1;
        var bitBaxcel = 1;
        blob.l += 4;
        return [bitSemi, bitBaxcel];
      }
      function parse_PtgAttrChoose(blob, length, opts) {
        blob.l += 2;
        var offset = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        var o3 = [];
        for (var i3 = 0; i3 <= offset; ++i3) o3.push(blob.read_shift(opts && opts.biff == 2 ? 1 : 2));
        return o3;
      }
      function parse_PtgAttrGoto(blob, length, opts) {
        var bitGoto = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += 2;
        return [bitGoto, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
      }
      function parse_PtgAttrIf(blob, length, opts) {
        var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += 2;
        return [bitIf, blob.read_shift(opts && opts.biff == 2 ? 1 : 2)];
      }
      function parse_PtgAttrIfError(blob) {
        var bitIf = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += 2;
        return [bitIf, blob.read_shift(2)];
      }
      function parse_PtgAttrSemi(blob, length, opts) {
        var bitSemi = blob[blob.l + 1] & 255 ? 1 : 0;
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        return [bitSemi];
      }
      function parse_PtgAttrSpaceType(blob) {
        var type = blob.read_shift(1), cch = blob.read_shift(1);
        return [type, cch];
      }
      function parse_PtgAttrSpace(blob) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
      }
      function parse_PtgAttrSpaceSemi(blob) {
        blob.read_shift(2);
        return parse_PtgAttrSpaceType(blob, 2);
      }
      function parse_PtgRef(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var loc = parse_RgceLoc(blob, 0, opts);
        return [type, loc];
      }
      function parse_PtgRefN(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var loc = parse_RgceLocRel(blob, 0, opts);
        return [type, loc];
      }
      function parse_PtgRef3d(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var ixti = blob.read_shift(2);
        if (opts && opts.biff == 5) blob.l += 12;
        var loc = parse_RgceLoc(blob, 0, opts);
        return [type, ixti, loc];
      }
      function parse_PtgFunc(blob, length, opts) {
        var type = (blob[blob.l] & 96) >> 5;
        blob.l += 1;
        var iftab = blob.read_shift(opts && opts.biff <= 3 ? 1 : 2);
        return [FtabArgc[iftab], Ftab[iftab], type];
      }
      function parse_PtgFuncVar(blob, length, opts) {
        var type = blob[blob.l++];
        var cparams = blob.read_shift(1), tab = opts && opts.biff <= 3 ? [type == 88 ? -1 : 0, blob.read_shift(1)] : parsetab(blob);
        return [cparams, (tab[0] === 0 ? Ftab : Cetab)[tab[1]]];
      }
      function parsetab(blob) {
        return [blob[blob.l + 1] >> 7, blob.read_shift(2) & 32767];
      }
      function parse_PtgAttrSum(blob, length, opts) {
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        return;
      }
      function parse_PtgExp(blob, length, opts) {
        blob.l++;
        if (opts && opts.biff == 12) return [blob.read_shift(4, "i"), 0];
        var row = blob.read_shift(2);
        var col = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [row, col];
      }
      function parse_PtgErr(blob) {
        blob.l++;
        return BErr[blob.read_shift(1)];
      }
      function parse_PtgInt(blob) {
        blob.l++;
        return blob.read_shift(2);
      }
      function parse_PtgBool(blob) {
        blob.l++;
        return blob.read_shift(1) !== 0;
      }
      function parse_PtgNum(blob) {
        blob.l++;
        return parse_Xnum(blob, 8);
      }
      function parse_PtgStr(blob, length, opts) {
        blob.l++;
        return parse_ShortXLUnicodeString(blob, length - 1, opts);
      }
      function parse_SerAr(blob, biff) {
        var val = [blob.read_shift(1)];
        if (biff == 12) switch (val[0]) {
          case 2:
            val[0] = 4;
            break;
          /* SerBool */
          case 4:
            val[0] = 16;
            break;
          /* SerErr */
          case 0:
            val[0] = 1;
            break;
          /* SerNum */
          case 1:
            val[0] = 2;
            break;
        }
        switch (val[0]) {
          case 4:
            val[1] = parsebool(blob, 1) ? "TRUE" : "FALSE";
            if (biff != 12) blob.l += 7;
            break;
          case 37:
          /* appears to be an alias */
          case 16:
            val[1] = BErr[blob[blob.l]];
            blob.l += biff == 12 ? 4 : 8;
            break;
          case 0:
            blob.l += 8;
            break;
          case 1:
            val[1] = parse_Xnum(blob, 8);
            break;
          case 2:
            val[1] = parse_XLUnicodeString2(blob, 0, { biff: biff > 0 && biff < 8 ? 2 : biff });
            break;
          default:
            throw new Error("Bad SerAr: " + val[0]);
        }
        return val;
      }
      function parse_PtgExtraMem(blob, cce, opts) {
        var count = blob.read_shift(opts.biff == 12 ? 4 : 2);
        var out = [];
        for (var i3 = 0; i3 != count; ++i3) out.push((opts.biff == 12 ? parse_UncheckedRfX : parse_Ref8U)(blob, 8));
        return out;
      }
      function parse_PtgExtraArray(blob, length, opts) {
        var rows = 0, cols = 0;
        if (opts.biff == 12) {
          rows = blob.read_shift(4);
          cols = blob.read_shift(4);
        } else {
          cols = 1 + blob.read_shift(1);
          rows = 1 + blob.read_shift(2);
        }
        if (opts.biff >= 2 && opts.biff < 8) {
          --rows;
          if (--cols == 0) cols = 256;
        }
        for (var i3 = 0, o3 = []; i3 != rows && (o3[i3] = []); ++i3)
          for (var j3 = 0; j3 != cols; ++j3) o3[i3][j3] = parse_SerAr(blob, opts.biff);
        return o3;
      }
      function parse_PtgName(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var w3 = !opts || opts.biff >= 8 ? 4 : 2;
        var nameindex = blob.read_shift(w3);
        switch (opts.biff) {
          case 2:
            blob.l += 5;
            break;
          case 3:
          case 4:
            blob.l += 8;
            break;
          case 5:
            blob.l += 12;
            break;
        }
        return [type, 0, nameindex];
      }
      function parse_PtgNameX(blob, length, opts) {
        if (opts.biff == 5) return parse_PtgNameX_BIFF5(blob, length, opts);
        var type = blob.read_shift(1) >>> 5 & 3;
        var ixti = blob.read_shift(2);
        var nameindex = blob.read_shift(4);
        return [type, ixti, nameindex];
      }
      function parse_PtgNameX_BIFF5(blob) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var ixti = blob.read_shift(2, "i");
        blob.l += 8;
        var nameindex = blob.read_shift(2);
        blob.l += 12;
        return [type, ixti, nameindex];
      }
      function parse_PtgMemArea(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        blob.l += opts && opts.biff == 2 ? 3 : 4;
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [type, cce];
      }
      function parse_PtgMemFunc(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var cce = blob.read_shift(opts && opts.biff == 2 ? 1 : 2);
        return [type, cce];
      }
      function parse_PtgRefErr(blob, length, opts) {
        var type = blob.read_shift(1) >>> 5 & 3;
        blob.l += 4;
        if (opts.biff < 8) blob.l--;
        if (opts.biff == 12) blob.l += 2;
        return [type];
      }
      function parse_PtgRefErr3d(blob, length, opts) {
        var type = (blob[blob.l++] & 96) >> 5;
        var ixti = blob.read_shift(2);
        var w3 = 4;
        if (opts) switch (opts.biff) {
          case 5:
            w3 = 15;
            break;
          case 12:
            w3 = 6;
            break;
        }
        blob.l += w3;
        return [type, ixti];
      }
      var parse_PtgMemErr = parsenoop;
      var parse_PtgMemNoMem = parsenoop;
      var parse_PtgTbl = parsenoop;
      function parse_PtgElfLoc(blob, length, opts) {
        blob.l += 2;
        return [parse_RgceElfLoc(blob, 4, opts)];
      }
      function parse_PtgElfNoop(blob) {
        blob.l += 6;
        return [];
      }
      var parse_PtgElfCol = parse_PtgElfLoc;
      var parse_PtgElfColS = parse_PtgElfNoop;
      var parse_PtgElfColSV = parse_PtgElfNoop;
      var parse_PtgElfColV = parse_PtgElfLoc;
      function parse_PtgElfLel(blob) {
        blob.l += 2;
        return [parseuint16(blob), blob.read_shift(2) & 1];
      }
      var parse_PtgElfRadical = parse_PtgElfLoc;
      var parse_PtgElfRadicalLel = parse_PtgElfLel;
      var parse_PtgElfRadicalS = parse_PtgElfNoop;
      var parse_PtgElfRw = parse_PtgElfLoc;
      var parse_PtgElfRwV = parse_PtgElfLoc;
      var PtgListRT = [
        "Data",
        "All",
        "Headers",
        "??",
        "?Data2",
        "??",
        "?DataHeaders",
        "??",
        "Totals",
        "??",
        "??",
        "??",
        "?DataTotals",
        "??",
        "??",
        "??",
        "?Current"
      ];
      function parse_PtgList(blob) {
        blob.l += 2;
        var ixti = blob.read_shift(2);
        var flags = blob.read_shift(2);
        var idx = blob.read_shift(4);
        var c3 = blob.read_shift(2);
        var C2 = blob.read_shift(2);
        var rt2 = PtgListRT[flags >> 2 & 31];
        return { ixti, coltype: flags & 3, rt: rt2, idx, c: c3, C: C2 };
      }
      function parse_PtgSxName(blob) {
        blob.l += 2;
        return [blob.read_shift(4)];
      }
      function parse_PtgSheet(blob, length, opts) {
        blob.l += 5;
        blob.l += 2;
        blob.l += opts.biff == 2 ? 1 : 4;
        return ["PTGSHEET"];
      }
      function parse_PtgEndSheet(blob, length, opts) {
        blob.l += opts.biff == 2 ? 4 : 5;
        return ["PTGENDSHEET"];
      }
      function parse_PtgMemAreaN(blob) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var cce = blob.read_shift(2);
        return [type, cce];
      }
      function parse_PtgMemNoMemN(blob) {
        var type = blob.read_shift(1) >>> 5 & 3;
        var cce = blob.read_shift(2);
        return [type, cce];
      }
      function parse_PtgAttrNoop(blob) {
        blob.l += 4;
        return [0, 0];
      }
      var PtgTypes = {
        1: { n: "PtgExp", f: parse_PtgExp },
        2: { n: "PtgTbl", f: parse_PtgTbl },
        3: { n: "PtgAdd", f: parseread1 },
        4: { n: "PtgSub", f: parseread1 },
        5: { n: "PtgMul", f: parseread1 },
        6: { n: "PtgDiv", f: parseread1 },
        7: { n: "PtgPower", f: parseread1 },
        8: { n: "PtgConcat", f: parseread1 },
        9: { n: "PtgLt", f: parseread1 },
        10: { n: "PtgLe", f: parseread1 },
        11: { n: "PtgEq", f: parseread1 },
        12: { n: "PtgGe", f: parseread1 },
        13: { n: "PtgGt", f: parseread1 },
        14: { n: "PtgNe", f: parseread1 },
        15: { n: "PtgIsect", f: parseread1 },
        16: { n: "PtgUnion", f: parseread1 },
        17: { n: "PtgRange", f: parseread1 },
        18: { n: "PtgUplus", f: parseread1 },
        19: { n: "PtgUminus", f: parseread1 },
        20: { n: "PtgPercent", f: parseread1 },
        21: { n: "PtgParen", f: parseread1 },
        22: { n: "PtgMissArg", f: parseread1 },
        23: { n: "PtgStr", f: parse_PtgStr },
        26: { n: "PtgSheet", f: parse_PtgSheet },
        27: { n: "PtgEndSheet", f: parse_PtgEndSheet },
        28: { n: "PtgErr", f: parse_PtgErr },
        29: { n: "PtgBool", f: parse_PtgBool },
        30: { n: "PtgInt", f: parse_PtgInt },
        31: { n: "PtgNum", f: parse_PtgNum },
        32: { n: "PtgArray", f: parse_PtgArray },
        33: { n: "PtgFunc", f: parse_PtgFunc },
        34: { n: "PtgFuncVar", f: parse_PtgFuncVar },
        35: { n: "PtgName", f: parse_PtgName },
        36: { n: "PtgRef", f: parse_PtgRef },
        37: { n: "PtgArea", f: parse_PtgArea },
        38: { n: "PtgMemArea", f: parse_PtgMemArea },
        39: { n: "PtgMemErr", f: parse_PtgMemErr },
        40: { n: "PtgMemNoMem", f: parse_PtgMemNoMem },
        41: { n: "PtgMemFunc", f: parse_PtgMemFunc },
        42: { n: "PtgRefErr", f: parse_PtgRefErr },
        43: { n: "PtgAreaErr", f: parse_PtgAreaErr },
        44: { n: "PtgRefN", f: parse_PtgRefN },
        45: { n: "PtgAreaN", f: parse_PtgAreaN },
        46: { n: "PtgMemAreaN", f: parse_PtgMemAreaN },
        47: { n: "PtgMemNoMemN", f: parse_PtgMemNoMemN },
        57: { n: "PtgNameX", f: parse_PtgNameX },
        58: { n: "PtgRef3d", f: parse_PtgRef3d },
        59: { n: "PtgArea3d", f: parse_PtgArea3d },
        60: { n: "PtgRefErr3d", f: parse_PtgRefErr3d },
        61: { n: "PtgAreaErr3d", f: parse_PtgAreaErr3d },
        255: {}
      };
      var PtgDupes = {
        64: 32,
        96: 32,
        65: 33,
        97: 33,
        66: 34,
        98: 34,
        67: 35,
        99: 35,
        68: 36,
        100: 36,
        69: 37,
        101: 37,
        70: 38,
        102: 38,
        71: 39,
        103: 39,
        72: 40,
        104: 40,
        73: 41,
        105: 41,
        74: 42,
        106: 42,
        75: 43,
        107: 43,
        76: 44,
        108: 44,
        77: 45,
        109: 45,
        78: 46,
        110: 46,
        79: 47,
        111: 47,
        88: 34,
        120: 34,
        89: 57,
        121: 57,
        90: 58,
        122: 58,
        91: 59,
        123: 59,
        92: 60,
        124: 60,
        93: 61,
        125: 61
      };
      var Ptg18 = {
        1: { n: "PtgElfLel", f: parse_PtgElfLel },
        2: { n: "PtgElfRw", f: parse_PtgElfRw },
        3: { n: "PtgElfCol", f: parse_PtgElfCol },
        6: { n: "PtgElfRwV", f: parse_PtgElfRwV },
        7: { n: "PtgElfColV", f: parse_PtgElfColV },
        10: { n: "PtgElfRadical", f: parse_PtgElfRadical },
        11: { n: "PtgElfRadicalS", f: parse_PtgElfRadicalS },
        13: { n: "PtgElfColS", f: parse_PtgElfColS },
        15: { n: "PtgElfColSV", f: parse_PtgElfColSV },
        16: { n: "PtgElfRadicalLel", f: parse_PtgElfRadicalLel },
        25: { n: "PtgList", f: parse_PtgList },
        29: { n: "PtgSxName", f: parse_PtgSxName },
        255: {}
      };
      var Ptg19 = {
        0: { n: "PtgAttrNoop", f: parse_PtgAttrNoop },
        1: { n: "PtgAttrSemi", f: parse_PtgAttrSemi },
        2: { n: "PtgAttrIf", f: parse_PtgAttrIf },
        4: { n: "PtgAttrChoose", f: parse_PtgAttrChoose },
        8: { n: "PtgAttrGoto", f: parse_PtgAttrGoto },
        16: { n: "PtgAttrSum", f: parse_PtgAttrSum },
        32: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
        33: { n: "PtgAttrBaxcel", f: parse_PtgAttrBaxcel },
        64: { n: "PtgAttrSpace", f: parse_PtgAttrSpace },
        65: { n: "PtgAttrSpaceSemi", f: parse_PtgAttrSpaceSemi },
        128: { n: "PtgAttrIfError", f: parse_PtgAttrIfError },
        255: {}
      };
      function parse_RgbExtra(blob, length, rgce, opts) {
        if (opts.biff < 8) return parsenoop(blob, length);
        var target = blob.l + length;
        var o3 = [];
        for (var i3 = 0; i3 !== rgce.length; ++i3) {
          switch (rgce[i3][0]) {
            case "PtgArray":
              rgce[i3][1] = parse_PtgExtraArray(blob, 0, opts);
              o3.push(rgce[i3][1]);
              break;
            case "PtgMemArea":
              rgce[i3][2] = parse_PtgExtraMem(blob, rgce[i3][1], opts);
              o3.push(rgce[i3][2]);
              break;
            case "PtgExp":
              if (opts && opts.biff == 12) {
                rgce[i3][1][1] = blob.read_shift(4);
                o3.push(rgce[i3][1]);
              }
              break;
            case "PtgList":
            /* TODO: PtgList -> PtgExtraList */
            case "PtgElfRadicalS":
            /* TODO: PtgElfRadicalS -> PtgExtraElf */
            case "PtgElfColS":
            /* TODO: PtgElfColS -> PtgExtraElf */
            case "PtgElfColSV":
              throw "Unsupported " + rgce[i3][0];
            default:
              break;
          }
        }
        length = target - blob.l;
        if (length !== 0) o3.push(parsenoop(blob, length));
        return o3;
      }
      function parse_Rgce(blob, length, opts) {
        var target = blob.l + length;
        var R2, id, ptgs = [];
        while (target != blob.l) {
          length = target - blob.l;
          id = blob[blob.l];
          R2 = PtgTypes[id] || PtgTypes[PtgDupes[id]];
          if (id === 24 || id === 25) R2 = (id === 24 ? Ptg18 : Ptg19)[blob[blob.l + 1]];
          if (!R2 || !R2.f) {
            parsenoop(blob, length);
          } else {
            ptgs.push([R2.n, R2.f(blob, length, opts)]);
          }
        }
        return ptgs;
      }
      function stringify_array(f2) {
        var o3 = [];
        for (var i3 = 0; i3 < f2.length; ++i3) {
          var x3 = f2[i3], r3 = [];
          for (var j3 = 0; j3 < x3.length; ++j3) {
            var y3 = x3[j3];
            if (y3) switch (y3[0]) {
              // TODO: handle embedded quotes
              case 2:
                r3.push('"' + y3[1].replace(/"/g, '""') + '"');
                break;
              default:
                r3.push(y3[1]);
            }
            else r3.push("");
          }
          o3.push(r3.join(","));
        }
        return o3.join(";");
      }
      var PtgBinOp = {
        PtgAdd: "+",
        PtgConcat: "&",
        PtgDiv: "/",
        PtgEq: "=",
        PtgGe: ">=",
        PtgGt: ">",
        PtgLe: "<=",
        PtgLt: "<",
        PtgMul: "*",
        PtgNe: "<>",
        PtgPower: "^",
        PtgSub: "-"
      };
      function formula_quote_sheet_name(sname, opts) {
        if (!sname && !(opts && opts.biff <= 5 && opts.biff >= 2)) throw new Error("empty sheet name");
        if (/[^\w\u4E00-\u9FFF\u3040-\u30FF]/.test(sname)) return "'" + sname + "'";
        return sname;
      }
      function get_ixti_raw(supbooks, ixti, opts) {
        if (!supbooks) return "SH33TJSERR0";
        if (opts.biff > 8 && (!supbooks.XTI || !supbooks.XTI[ixti])) return supbooks.SheetNames[ixti];
        if (!supbooks.XTI) return "SH33TJSERR6";
        var XTI = supbooks.XTI[ixti];
        if (opts.biff < 8) {
          if (ixti > 1e4) ixti -= 65536;
          if (ixti < 0) ixti = -ixti;
          return ixti == 0 ? "" : supbooks.XTI[ixti - 1];
        }
        if (!XTI) return "SH33TJSERR1";
        var o3 = "";
        if (opts.biff > 8) switch (supbooks[XTI[0]][0]) {
          case 357:
            o3 = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]];
            return XTI[1] == XTI[2] ? o3 : o3 + ":" + supbooks.SheetNames[XTI[2]];
          case 358:
            if (opts.SID != null) return supbooks.SheetNames[opts.SID];
            return "SH33TJSSAME" + supbooks[XTI[0]][0];
          case 355:
          /* 'BrtSupBookSrc' */
          /* falls through */
          default:
            return "SH33TJSSRC" + supbooks[XTI[0]][0];
        }
        switch (supbooks[XTI[0]][0][0]) {
          case 1025:
            o3 = XTI[1] == -1 ? "#REF" : supbooks.SheetNames[XTI[1]] || "SH33TJSERR3";
            return XTI[1] == XTI[2] ? o3 : o3 + ":" + supbooks.SheetNames[XTI[2]];
          case 14849:
            return supbooks[XTI[0]].slice(1).map(function(name) {
              return name.Name;
            }).join(";;");
          //return "SH33TJSERR8";
          default:
            if (!supbooks[XTI[0]][0][3]) return "SH33TJSERR2";
            o3 = XTI[1] == -1 ? "#REF" : supbooks[XTI[0]][0][3][XTI[1]] || "SH33TJSERR4";
            return XTI[1] == XTI[2] ? o3 : o3 + ":" + supbooks[XTI[0]][0][3][XTI[2]];
        }
      }
      function get_ixti(supbooks, ixti, opts) {
        var ixtiraw = get_ixti_raw(supbooks, ixti, opts);
        return ixtiraw == "#REF" ? ixtiraw : formula_quote_sheet_name(ixtiraw, opts);
      }
      function stringify_formula(formula, range, cell, supbooks, opts) {
        var biff = opts && opts.biff || 8;
        var _range = (
          /*range != null ? range :*/
          { s: { c: 0, r: 0 }, e: { c: 0, r: 0 } }
        );
        var stack = [], e1, e22, c3, ixti = 0, nameidx = 0, r3, sname = "";
        if (!formula[0] || !formula[0][0]) return "";
        var last_sp = -1, sp = "";
        for (var ff = 0, fflen = formula[0].length; ff < fflen; ++ff) {
          var f2 = formula[0][ff];
          switch (f2[0]) {
            case "PtgUminus":
              stack.push("-" + stack.pop());
              break;
            case "PtgUplus":
              stack.push("+" + stack.pop());
              break;
            case "PtgPercent":
              stack.push(stack.pop() + "%");
              break;
            case "PtgAdd":
            /* [MS-XLS] 2.5.198.26 */
            case "PtgConcat":
            /* [MS-XLS] 2.5.198.43 */
            case "PtgDiv":
            /* [MS-XLS] 2.5.198.45 */
            case "PtgEq":
            /* [MS-XLS] 2.5.198.56 */
            case "PtgGe":
            /* [MS-XLS] 2.5.198.64 */
            case "PtgGt":
            /* [MS-XLS] 2.5.198.65 */
            case "PtgLe":
            /* [MS-XLS] 2.5.198.68 */
            case "PtgLt":
            /* [MS-XLS] 2.5.198.69 */
            case "PtgMul":
            /* [MS-XLS] 2.5.198.75 */
            case "PtgNe":
            /* [MS-XLS] 2.5.198.78 */
            case "PtgPower":
            /* [MS-XLS] 2.5.198.82 */
            case "PtgSub":
              e1 = stack.pop();
              e22 = stack.pop();
              if (last_sp >= 0) {
                switch (formula[0][last_sp][1][0]) {
                  case 0:
                    sp = fill(" ", formula[0][last_sp][1][1]);
                    break;
                  case 1:
                    sp = fill("\r", formula[0][last_sp][1][1]);
                    break;
                  default:
                    sp = "";
                    if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                }
                e22 = e22 + sp;
                last_sp = -1;
              }
              stack.push(e22 + PtgBinOp[f2[0]] + e1);
              break;
            case "PtgIsect":
              e1 = stack.pop();
              e22 = stack.pop();
              stack.push(e22 + " " + e1);
              break;
            case "PtgUnion":
              e1 = stack.pop();
              e22 = stack.pop();
              stack.push(e22 + "," + e1);
              break;
            case "PtgRange":
              e1 = stack.pop();
              e22 = stack.pop();
              stack.push(e22 + ":" + e1);
              break;
            case "PtgAttrChoose":
              break;
            case "PtgAttrGoto":
              break;
            case "PtgAttrIf":
              break;
            case "PtgAttrIfError":
              break;
            case "PtgRef":
              c3 = shift_cell_xls(f2[1][1], _range, opts);
              stack.push(encode_cell_xls(c3, biff));
              break;
            case "PtgRefN":
              c3 = cell ? shift_cell_xls(f2[1][1], cell, opts) : f2[1][1];
              stack.push(encode_cell_xls(c3, biff));
              break;
            case "PtgRef3d":
              ixti = f2[1][1];
              c3 = shift_cell_xls(f2[1][2], _range, opts);
              sname = get_ixti(supbooks, ixti, opts);
              var w3 = sname;
              stack.push(sname + "!" + encode_cell_xls(c3, biff));
              break;
            case "PtgFunc":
            /* [MS-XLS] 2.5.198.62 */
            case "PtgFuncVar":
              var argc = f2[1][0], func = f2[1][1];
              if (!argc) argc = 0;
              argc &= 127;
              var args = argc == 0 ? [] : stack.slice(-argc);
              stack.length -= argc;
              if (func === "User") func = args.shift();
              stack.push(func + "(" + args.join(",") + ")");
              break;
            case "PtgBool":
              stack.push(f2[1] ? "TRUE" : "FALSE");
              break;
            case "PtgInt":
              stack.push(f2[1]);
              break;
            case "PtgNum":
              stack.push(String(f2[1]));
              break;
            case "PtgStr":
              stack.push('"' + f2[1].replace(/"/g, '""') + '"');
              break;
            case "PtgErr":
              stack.push(f2[1]);
              break;
            case "PtgAreaN":
              r3 = shift_range_xls(f2[1][1], cell ? { s: cell } : _range, opts);
              stack.push(encode_range_xls(r3, opts));
              break;
            case "PtgArea":
              r3 = shift_range_xls(f2[1][1], _range, opts);
              stack.push(encode_range_xls(r3, opts));
              break;
            case "PtgArea3d":
              ixti = f2[1][1];
              r3 = f2[1][2];
              sname = get_ixti(supbooks, ixti, opts);
              stack.push(sname + "!" + encode_range_xls(r3, opts));
              break;
            case "PtgAttrSum":
              stack.push("SUM(" + stack.pop() + ")");
              break;
            case "PtgAttrBaxcel":
            /* [MS-XLS] 2.5.198.33 */
            case "PtgAttrSemi":
              break;
            case "PtgName":
              nameidx = f2[1][2];
              var lbl = (supbooks.names || [])[nameidx - 1] || (supbooks[0] || [])[nameidx];
              var name = lbl ? lbl.Name : "SH33TJSNAME" + String(nameidx);
              if (name && name.slice(0, 6) == "_xlfn." && !opts.xlfn) name = name.slice(6);
              stack.push(name);
              break;
            case "PtgNameX":
              var bookidx = f2[1][1];
              nameidx = f2[1][2];
              var externbook;
              if (opts.biff <= 5) {
                if (bookidx < 0) bookidx = -bookidx;
                if (supbooks[bookidx]) externbook = supbooks[bookidx][nameidx];
              } else {
                var o3 = "";
                if (((supbooks[bookidx] || [])[0] || [])[0] == 14849) {
                } else if (((supbooks[bookidx] || [])[0] || [])[0] == 1025) {
                  if (supbooks[bookidx][nameidx] && supbooks[bookidx][nameidx].itab > 0) {
                    o3 = supbooks.SheetNames[supbooks[bookidx][nameidx].itab - 1] + "!";
                  }
                } else o3 = supbooks.SheetNames[nameidx - 1] + "!";
                if (supbooks[bookidx] && supbooks[bookidx][nameidx]) o3 += supbooks[bookidx][nameidx].Name;
                else if (supbooks[0] && supbooks[0][nameidx]) o3 += supbooks[0][nameidx].Name;
                else {
                  var ixtidata = (get_ixti_raw(supbooks, bookidx, opts) || "").split(";;");
                  if (ixtidata[nameidx - 1]) o3 = ixtidata[nameidx - 1];
                  else o3 += "SH33TJSERRX";
                }
                stack.push(o3);
                break;
              }
              if (!externbook) externbook = { Name: "SH33TJSERRY" };
              stack.push(externbook.Name);
              break;
            case "PtgParen":
              var lp = "(", rp = ")";
              if (last_sp >= 0) {
                sp = "";
                switch (formula[0][last_sp][1][0]) {
                  // $FlowIgnore
                  case 2:
                    lp = fill(" ", formula[0][last_sp][1][1]) + lp;
                    break;
                  // $FlowIgnore
                  case 3:
                    lp = fill("\r", formula[0][last_sp][1][1]) + lp;
                    break;
                  // $FlowIgnore
                  case 4:
                    rp = fill(" ", formula[0][last_sp][1][1]) + rp;
                    break;
                  // $FlowIgnore
                  case 5:
                    rp = fill("\r", formula[0][last_sp][1][1]) + rp;
                    break;
                  default:
                    if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + formula[0][last_sp][1][0]);
                }
                last_sp = -1;
              }
              stack.push(lp + stack.pop() + rp);
              break;
            case "PtgRefErr":
              stack.push("#REF!");
              break;
            case "PtgRefErr3d":
              stack.push("#REF!");
              break;
            case "PtgExp":
              c3 = { c: f2[1][1], r: f2[1][0] };
              var q2 = { c: cell.c, r: cell.r };
              if (supbooks.sharedf[encode_cell(c3)]) {
                var parsedf = supbooks.sharedf[encode_cell(c3)];
                stack.push(stringify_formula(parsedf, _range, q2, supbooks, opts));
              } else {
                var fnd = false;
                for (e1 = 0; e1 != supbooks.arrayf.length; ++e1) {
                  e22 = supbooks.arrayf[e1];
                  if (c3.c < e22[0].s.c || c3.c > e22[0].e.c) continue;
                  if (c3.r < e22[0].s.r || c3.r > e22[0].e.r) continue;
                  stack.push(stringify_formula(e22[1], _range, q2, supbooks, opts));
                  fnd = true;
                  break;
                }
                if (!fnd) stack.push(f2[1]);
              }
              break;
            case "PtgArray":
              stack.push("{" + stringify_array(f2[1]) + "}");
              break;
            case "PtgMemArea":
              break;
            case "PtgAttrSpace":
            /* [MS-XLS] 2.5.198.38 */
            case "PtgAttrSpaceSemi":
              last_sp = ff;
              break;
            case "PtgTbl":
              break;
            case "PtgMemErr":
              break;
            case "PtgMissArg":
              stack.push("");
              break;
            case "PtgAreaErr":
              stack.push("#REF!");
              break;
            case "PtgAreaErr3d":
              stack.push("#REF!");
              break;
            case "PtgList":
              stack.push("Table" + f2[1].idx + "[#" + f2[1].rt + "]");
              break;
            case "PtgMemAreaN":
            case "PtgMemNoMemN":
            case "PtgAttrNoop":
            case "PtgSheet":
            case "PtgEndSheet":
              break;
            case "PtgMemFunc":
              break;
            case "PtgMemNoMem":
              break;
            case "PtgElfCol":
            /* [MS-XLS] 2.5.198.46 */
            case "PtgElfColS":
            /* [MS-XLS] 2.5.198.47 */
            case "PtgElfColSV":
            /* [MS-XLS] 2.5.198.48 */
            case "PtgElfColV":
            /* [MS-XLS] 2.5.198.49 */
            case "PtgElfLel":
            /* [MS-XLS] 2.5.198.50 */
            case "PtgElfRadical":
            /* [MS-XLS] 2.5.198.51 */
            case "PtgElfRadicalLel":
            /* [MS-XLS] 2.5.198.52 */
            case "PtgElfRadicalS":
            /* [MS-XLS] 2.5.198.53 */
            case "PtgElfRw":
            /* [MS-XLS] 2.5.198.54 */
            case "PtgElfRwV":
              throw new Error("Unsupported ELFs");
            case "PtgSxName":
              throw new Error("Unrecognized Formula Token: " + String(f2));
            default:
              throw new Error("Unrecognized Formula Token: " + String(f2));
          }
          var PtgNonDisp = ["PtgAttrSpace", "PtgAttrSpaceSemi", "PtgAttrGoto"];
          if (opts.biff != 3) {
            if (last_sp >= 0 && PtgNonDisp.indexOf(formula[0][ff][0]) == -1) {
              f2 = formula[0][last_sp];
              var _left = true;
              switch (f2[1][0]) {
                /* note: some bad XLSB files omit the PtgParen */
                case 4:
                  _left = false;
                /* falls through */
                case 0:
                  sp = fill(" ", f2[1][1]);
                  break;
                case 5:
                  _left = false;
                /* falls through */
                case 1:
                  sp = fill("\r", f2[1][1]);
                  break;
                default:
                  sp = "";
                  if (opts.WTF) throw new Error("Unexpected PtgAttrSpaceType " + f2[1][0]);
              }
              stack.push((_left ? sp : "") + stack.pop() + (_left ? "" : sp));
              last_sp = -1;
            }
          }
        }
        if (stack.length > 1 && opts.WTF) throw new Error("bad formula stack");
        return stack[0];
      }
      function parse_ArrayParsedFormula(blob, length, opts) {
        var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
        var rgcb, cce = blob.read_shift(len);
        if (cce == 65535) return [[], parsenoop(blob, length - 2)];
        var rgce = parse_Rgce(blob, cce, opts);
        if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
        blob.l = target;
        return [rgce, rgcb];
      }
      function parse_XLSCellParsedFormula(blob, length, opts) {
        var target = blob.l + length, len = opts.biff == 2 ? 1 : 2;
        var rgcb, cce = blob.read_shift(len);
        if (cce == 65535) return [[], parsenoop(blob, length - 2)];
        var rgce = parse_Rgce(blob, cce, opts);
        if (length !== cce + len) rgcb = parse_RgbExtra(blob, length - cce - len, rgce, opts);
        blob.l = target;
        return [rgce, rgcb];
      }
      function parse_NameParsedFormula(blob, length, opts, cce) {
        var target = blob.l + length;
        var rgce = parse_Rgce(blob, cce, opts);
        var rgcb;
        if (target !== blob.l) rgcb = parse_RgbExtra(blob, target - blob.l, rgce, opts);
        return [rgce, rgcb];
      }
      function parse_SharedParsedFormula(blob, length, opts) {
        var target = blob.l + length;
        var rgcb, cce = blob.read_shift(2);
        var rgce = parse_Rgce(blob, cce, opts);
        if (cce == 65535) return [[], parsenoop(blob, length - 2)];
        if (length !== cce + 2) rgcb = parse_RgbExtra(blob, target - cce - 2, rgce, opts);
        return [rgce, rgcb];
      }
      function parse_FormulaValue(blob) {
        var b3;
        if (__readUInt16LE(blob, blob.l + 6) !== 65535) return [parse_Xnum(blob), "n"];
        switch (blob[blob.l]) {
          case 0:
            blob.l += 8;
            return ["String", "s"];
          case 1:
            b3 = blob[blob.l + 2] === 1;
            blob.l += 8;
            return [b3, "b"];
          case 2:
            b3 = blob[blob.l + 2];
            blob.l += 8;
            return [b3, "e"];
          case 3:
            blob.l += 8;
            return ["", "s"];
        }
        return [];
      }
      function write_FormulaValue(value) {
        if (value == null) {
          var o3 = new_buf(8);
          o3.write_shift(1, 3);
          o3.write_shift(1, 0);
          o3.write_shift(2, 0);
          o3.write_shift(2, 0);
          o3.write_shift(2, 65535);
          return o3;
        } else if (typeof value == "number") return write_Xnum(value);
        return write_Xnum(0);
      }
      function parse_Formula(blob, length, opts) {
        var end = blob.l + length;
        var cell = parse_XLSCell(blob, 6);
        if (opts.biff == 2) ++blob.l;
        var val = parse_FormulaValue(blob, 8);
        var flags = blob.read_shift(1);
        if (opts.biff != 2) {
          blob.read_shift(1);
          if (opts.biff >= 5) {
            blob.read_shift(4);
          }
        }
        var cbf = parse_XLSCellParsedFormula(blob, end - blob.l, opts);
        return { cell, val: val[0], formula: cbf, shared: flags >> 3 & 1, tt: val[1] };
      }
      function write_Formula(cell, R2, C2, opts, os) {
        var o1 = write_XLSCell(R2, C2, os);
        var o22 = write_FormulaValue(cell.v);
        var o3 = new_buf(6);
        var flags = 1 | 32;
        o3.write_shift(2, flags);
        o3.write_shift(4, 0);
        var bf = new_buf(cell.bf.length);
        for (var i3 = 0; i3 < cell.bf.length; ++i3) bf[i3] = cell.bf[i3];
        var out = bconcat([o1, o22, o3, bf]);
        return out;
      }
      function parse_XLSBParsedFormula(data, length, opts) {
        var cce = data.read_shift(4);
        var rgce = parse_Rgce(data, cce, opts);
        var cb = data.read_shift(4);
        var rgcb = cb > 0 ? parse_RgbExtra(data, cb, rgce, opts) : null;
        return [rgce, rgcb];
      }
      var parse_XLSBArrayParsedFormula = parse_XLSBParsedFormula;
      var parse_XLSBCellParsedFormula = parse_XLSBParsedFormula;
      var parse_XLSBNameParsedFormula = parse_XLSBParsedFormula;
      var parse_XLSBSharedParsedFormula = parse_XLSBParsedFormula;
      var Cetab = {
        0: "BEEP",
        1: "OPEN",
        2: "OPEN.LINKS",
        3: "CLOSE.ALL",
        4: "SAVE",
        5: "SAVE.AS",
        6: "FILE.DELETE",
        7: "PAGE.SETUP",
        8: "PRINT",
        9: "PRINTER.SETUP",
        10: "QUIT",
        11: "NEW.WINDOW",
        12: "ARRANGE.ALL",
        13: "WINDOW.SIZE",
        14: "WINDOW.MOVE",
        15: "FULL",
        16: "CLOSE",
        17: "RUN",
        22: "SET.PRINT.AREA",
        23: "SET.PRINT.TITLES",
        24: "SET.PAGE.BREAK",
        25: "REMOVE.PAGE.BREAK",
        26: "FONT",
        27: "DISPLAY",
        28: "PROTECT.DOCUMENT",
        29: "PRECISION",
        30: "A1.R1C1",
        31: "CALCULATE.NOW",
        32: "CALCULATION",
        34: "DATA.FIND",
        35: "EXTRACT",
        36: "DATA.DELETE",
        37: "SET.DATABASE",
        38: "SET.CRITERIA",
        39: "SORT",
        40: "DATA.SERIES",
        41: "TABLE",
        42: "FORMAT.NUMBER",
        43: "ALIGNMENT",
        44: "STYLE",
        45: "BORDER",
        46: "CELL.PROTECTION",
        47: "COLUMN.WIDTH",
        48: "UNDO",
        49: "CUT",
        50: "COPY",
        51: "PASTE",
        52: "CLEAR",
        53: "PASTE.SPECIAL",
        54: "EDIT.DELETE",
        55: "INSERT",
        56: "FILL.RIGHT",
        57: "FILL.DOWN",
        61: "DEFINE.NAME",
        62: "CREATE.NAMES",
        63: "FORMULA.GOTO",
        64: "FORMULA.FIND",
        65: "SELECT.LAST.CELL",
        66: "SHOW.ACTIVE.CELL",
        67: "GALLERY.AREA",
        68: "GALLERY.BAR",
        69: "GALLERY.COLUMN",
        70: "GALLERY.LINE",
        71: "GALLERY.PIE",
        72: "GALLERY.SCATTER",
        73: "COMBINATION",
        74: "PREFERRED",
        75: "ADD.OVERLAY",
        76: "GRIDLINES",
        77: "SET.PREFERRED",
        78: "AXES",
        79: "LEGEND",
        80: "ATTACH.TEXT",
        81: "ADD.ARROW",
        82: "SELECT.CHART",
        83: "SELECT.PLOT.AREA",
        84: "PATTERNS",
        85: "MAIN.CHART",
        86: "OVERLAY",
        87: "SCALE",
        88: "FORMAT.LEGEND",
        89: "FORMAT.TEXT",
        90: "EDIT.REPEAT",
        91: "PARSE",
        92: "JUSTIFY",
        93: "HIDE",
        94: "UNHIDE",
        95: "WORKSPACE",
        96: "FORMULA",
        97: "FORMULA.FILL",
        98: "FORMULA.ARRAY",
        99: "DATA.FIND.NEXT",
        100: "DATA.FIND.PREV",
        101: "FORMULA.FIND.NEXT",
        102: "FORMULA.FIND.PREV",
        103: "ACTIVATE",
        104: "ACTIVATE.NEXT",
        105: "ACTIVATE.PREV",
        106: "UNLOCKED.NEXT",
        107: "UNLOCKED.PREV",
        108: "COPY.PICTURE",
        109: "SELECT",
        110: "DELETE.NAME",
        111: "DELETE.FORMAT",
        112: "VLINE",
        113: "HLINE",
        114: "VPAGE",
        115: "HPAGE",
        116: "VSCROLL",
        117: "HSCROLL",
        118: "ALERT",
        119: "NEW",
        120: "CANCEL.COPY",
        121: "SHOW.CLIPBOARD",
        122: "MESSAGE",
        124: "PASTE.LINK",
        125: "APP.ACTIVATE",
        126: "DELETE.ARROW",
        127: "ROW.HEIGHT",
        128: "FORMAT.MOVE",
        129: "FORMAT.SIZE",
        130: "FORMULA.REPLACE",
        131: "SEND.KEYS",
        132: "SELECT.SPECIAL",
        133: "APPLY.NAMES",
        134: "REPLACE.FONT",
        135: "FREEZE.PANES",
        136: "SHOW.INFO",
        137: "SPLIT",
        138: "ON.WINDOW",
        139: "ON.DATA",
        140: "DISABLE.INPUT",
        142: "OUTLINE",
        143: "LIST.NAMES",
        144: "FILE.CLOSE",
        145: "SAVE.WORKBOOK",
        146: "DATA.FORM",
        147: "COPY.CHART",
        148: "ON.TIME",
        149: "WAIT",
        150: "FORMAT.FONT",
        151: "FILL.UP",
        152: "FILL.LEFT",
        153: "DELETE.OVERLAY",
        155: "SHORT.MENUS",
        159: "SET.UPDATE.STATUS",
        161: "COLOR.PALETTE",
        162: "DELETE.STYLE",
        163: "WINDOW.RESTORE",
        164: "WINDOW.MAXIMIZE",
        166: "CHANGE.LINK",
        167: "CALCULATE.DOCUMENT",
        168: "ON.KEY",
        169: "APP.RESTORE",
        170: "APP.MOVE",
        171: "APP.SIZE",
        172: "APP.MINIMIZE",
        173: "APP.MAXIMIZE",
        174: "BRING.TO.FRONT",
        175: "SEND.TO.BACK",
        185: "MAIN.CHART.TYPE",
        186: "OVERLAY.CHART.TYPE",
        187: "SELECT.END",
        188: "OPEN.MAIL",
        189: "SEND.MAIL",
        190: "STANDARD.FONT",
        191: "CONSOLIDATE",
        192: "SORT.SPECIAL",
        193: "GALLERY.3D.AREA",
        194: "GALLERY.3D.COLUMN",
        195: "GALLERY.3D.LINE",
        196: "GALLERY.3D.PIE",
        197: "VIEW.3D",
        198: "GOAL.SEEK",
        199: "WORKGROUP",
        200: "FILL.GROUP",
        201: "UPDATE.LINK",
        202: "PROMOTE",
        203: "DEMOTE",
        204: "SHOW.DETAIL",
        206: "UNGROUP",
        207: "OBJECT.PROPERTIES",
        208: "SAVE.NEW.OBJECT",
        209: "SHARE",
        210: "SHARE.NAME",
        211: "DUPLICATE",
        212: "APPLY.STYLE",
        213: "ASSIGN.TO.OBJECT",
        214: "OBJECT.PROTECTION",
        215: "HIDE.OBJECT",
        216: "SET.EXTRACT",
        217: "CREATE.PUBLISHER",
        218: "SUBSCRIBE.TO",
        219: "ATTRIBUTES",
        220: "SHOW.TOOLBAR",
        222: "PRINT.PREVIEW",
        223: "EDIT.COLOR",
        224: "SHOW.LEVELS",
        225: "FORMAT.MAIN",
        226: "FORMAT.OVERLAY",
        227: "ON.RECALC",
        228: "EDIT.SERIES",
        229: "DEFINE.STYLE",
        240: "LINE.PRINT",
        243: "ENTER.DATA",
        249: "GALLERY.RADAR",
        250: "MERGE.STYLES",
        251: "EDITION.OPTIONS",
        252: "PASTE.PICTURE",
        253: "PASTE.PICTURE.LINK",
        254: "SPELLING",
        256: "ZOOM",
        259: "INSERT.OBJECT",
        260: "WINDOW.MINIMIZE",
        265: "SOUND.NOTE",
        266: "SOUND.PLAY",
        267: "FORMAT.SHAPE",
        268: "EXTEND.POLYGON",
        269: "FORMAT.AUTO",
        272: "GALLERY.3D.BAR",
        273: "GALLERY.3D.SURFACE",
        274: "FILL.AUTO",
        276: "CUSTOMIZE.TOOLBAR",
        277: "ADD.TOOL",
        278: "EDIT.OBJECT",
        279: "ON.DOUBLECLICK",
        280: "ON.ENTRY",
        281: "WORKBOOK.ADD",
        282: "WORKBOOK.MOVE",
        283: "WORKBOOK.COPY",
        284: "WORKBOOK.OPTIONS",
        285: "SAVE.WORKSPACE",
        288: "CHART.WIZARD",
        289: "DELETE.TOOL",
        290: "MOVE.TOOL",
        291: "WORKBOOK.SELECT",
        292: "WORKBOOK.ACTIVATE",
        293: "ASSIGN.TO.TOOL",
        295: "COPY.TOOL",
        296: "RESET.TOOL",
        297: "CONSTRAIN.NUMERIC",
        298: "PASTE.TOOL",
        302: "WORKBOOK.NEW",
        305: "SCENARIO.CELLS",
        306: "SCENARIO.DELETE",
        307: "SCENARIO.ADD",
        308: "SCENARIO.EDIT",
        309: "SCENARIO.SHOW",
        310: "SCENARIO.SHOW.NEXT",
        311: "SCENARIO.SUMMARY",
        312: "PIVOT.TABLE.WIZARD",
        313: "PIVOT.FIELD.PROPERTIES",
        314: "PIVOT.FIELD",
        315: "PIVOT.ITEM",
        316: "PIVOT.ADD.FIELDS",
        318: "OPTIONS.CALCULATION",
        319: "OPTIONS.EDIT",
        320: "OPTIONS.VIEW",
        321: "ADDIN.MANAGER",
        322: "MENU.EDITOR",
        323: "ATTACH.TOOLBARS",
        324: "VBAActivate",
        325: "OPTIONS.CHART",
        328: "VBA.INSERT.FILE",
        330: "VBA.PROCEDURE.DEFINITION",
        336: "ROUTING.SLIP",
        338: "ROUTE.DOCUMENT",
        339: "MAIL.LOGON",
        342: "INSERT.PICTURE",
        343: "EDIT.TOOL",
        344: "GALLERY.DOUGHNUT",
        350: "CHART.TREND",
        352: "PIVOT.ITEM.PROPERTIES",
        354: "WORKBOOK.INSERT",
        355: "OPTIONS.TRANSITION",
        356: "OPTIONS.GENERAL",
        370: "FILTER.ADVANCED",
        373: "MAIL.ADD.MAILER",
        374: "MAIL.DELETE.MAILER",
        375: "MAIL.REPLY",
        376: "MAIL.REPLY.ALL",
        377: "MAIL.FORWARD",
        378: "MAIL.NEXT.LETTER",
        379: "DATA.LABEL",
        380: "INSERT.TITLE",
        381: "FONT.PROPERTIES",
        382: "MACRO.OPTIONS",
        383: "WORKBOOK.HIDE",
        384: "WORKBOOK.UNHIDE",
        385: "WORKBOOK.DELETE",
        386: "WORKBOOK.NAME",
        388: "GALLERY.CUSTOM",
        390: "ADD.CHART.AUTOFORMAT",
        391: "DELETE.CHART.AUTOFORMAT",
        392: "CHART.ADD.DATA",
        393: "AUTO.OUTLINE",
        394: "TAB.ORDER",
        395: "SHOW.DIALOG",
        396: "SELECT.ALL",
        397: "UNGROUP.SHEETS",
        398: "SUBTOTAL.CREATE",
        399: "SUBTOTAL.REMOVE",
        400: "RENAME.OBJECT",
        412: "WORKBOOK.SCROLL",
        413: "WORKBOOK.NEXT",
        414: "WORKBOOK.PREV",
        415: "WORKBOOK.TAB.SPLIT",
        416: "FULL.SCREEN",
        417: "WORKBOOK.PROTECT",
        420: "SCROLLBAR.PROPERTIES",
        421: "PIVOT.SHOW.PAGES",
        422: "TEXT.TO.COLUMNS",
        423: "FORMAT.CHARTTYPE",
        424: "LINK.FORMAT",
        425: "TRACER.DISPLAY",
        430: "TRACER.NAVIGATE",
        431: "TRACER.CLEAR",
        432: "TRACER.ERROR",
        433: "PIVOT.FIELD.GROUP",
        434: "PIVOT.FIELD.UNGROUP",
        435: "CHECKBOX.PROPERTIES",
        436: "LABEL.PROPERTIES",
        437: "LISTBOX.PROPERTIES",
        438: "EDITBOX.PROPERTIES",
        439: "PIVOT.REFRESH",
        440: "LINK.COMBO",
        441: "OPEN.TEXT",
        442: "HIDE.DIALOG",
        443: "SET.DIALOG.FOCUS",
        444: "ENABLE.OBJECT",
        445: "PUSHBUTTON.PROPERTIES",
        446: "SET.DIALOG.DEFAULT",
        447: "FILTER",
        448: "FILTER.SHOW.ALL",
        449: "CLEAR.OUTLINE",
        450: "FUNCTION.WIZARD",
        451: "ADD.LIST.ITEM",
        452: "SET.LIST.ITEM",
        453: "REMOVE.LIST.ITEM",
        454: "SELECT.LIST.ITEM",
        455: "SET.CONTROL.VALUE",
        456: "SAVE.COPY.AS",
        458: "OPTIONS.LISTS.ADD",
        459: "OPTIONS.LISTS.DELETE",
        460: "SERIES.AXES",
        461: "SERIES.X",
        462: "SERIES.Y",
        463: "ERRORBAR.X",
        464: "ERRORBAR.Y",
        465: "FORMAT.CHART",
        466: "SERIES.ORDER",
        467: "MAIL.LOGOFF",
        468: "CLEAR.ROUTING.SLIP",
        469: "APP.ACTIVATE.MICROSOFT",
        470: "MAIL.EDIT.MAILER",
        471: "ON.SHEET",
        472: "STANDARD.WIDTH",
        473: "SCENARIO.MERGE",
        474: "SUMMARY.INFO",
        475: "FIND.FILE",
        476: "ACTIVE.CELL.FONT",
        477: "ENABLE.TIPWIZARD",
        478: "VBA.MAKE.ADDIN",
        480: "INSERTDATATABLE",
        481: "WORKGROUP.OPTIONS",
        482: "MAIL.SEND.MAILER",
        485: "AUTOCORRECT",
        489: "POST.DOCUMENT",
        491: "PICKLIST",
        493: "VIEW.SHOW",
        494: "VIEW.DEFINE",
        495: "VIEW.DELETE",
        509: "SHEET.BACKGROUND",
        510: "INSERT.MAP.OBJECT",
        511: "OPTIONS.MENONO",
        517: "MSOCHECKS",
        518: "NORMAL",
        519: "LAYOUT",
        520: "RM.PRINT.AREA",
        521: "CLEAR.PRINT.AREA",
        522: "ADD.PRINT.AREA",
        523: "MOVE.BRK",
        545: "HIDECURR.NOTE",
        546: "HIDEALL.NOTES",
        547: "DELETE.NOTE",
        548: "TRAVERSE.NOTES",
        549: "ACTIVATE.NOTES",
        620: "PROTECT.REVISIONS",
        621: "UNPROTECT.REVISIONS",
        647: "OPTIONS.ME",
        653: "WEB.PUBLISH",
        667: "NEWWEBQUERY",
        673: "PIVOT.TABLE.CHART",
        753: "OPTIONS.SAVE",
        755: "OPTIONS.SPELL",
        808: "HIDEALL.INKANNOTS"
      };
      var Ftab = {
        0: "COUNT",
        1: "IF",
        2: "ISNA",
        3: "ISERROR",
        4: "SUM",
        5: "AVERAGE",
        6: "MIN",
        7: "MAX",
        8: "ROW",
        9: "COLUMN",
        10: "NA",
        11: "NPV",
        12: "STDEV",
        13: "DOLLAR",
        14: "FIXED",
        15: "SIN",
        16: "COS",
        17: "TAN",
        18: "ATAN",
        19: "PI",
        20: "SQRT",
        21: "EXP",
        22: "LN",
        23: "LOG10",
        24: "ABS",
        25: "INT",
        26: "SIGN",
        27: "ROUND",
        28: "LOOKUP",
        29: "INDEX",
        30: "REPT",
        31: "MID",
        32: "LEN",
        33: "VALUE",
        34: "TRUE",
        35: "FALSE",
        36: "AND",
        37: "OR",
        38: "NOT",
        39: "MOD",
        40: "DCOUNT",
        41: "DSUM",
        42: "DAVERAGE",
        43: "DMIN",
        44: "DMAX",
        45: "DSTDEV",
        46: "VAR",
        47: "DVAR",
        48: "TEXT",
        49: "LINEST",
        50: "TREND",
        51: "LOGEST",
        52: "GROWTH",
        53: "GOTO",
        54: "HALT",
        55: "RETURN",
        56: "PV",
        57: "FV",
        58: "NPER",
        59: "PMT",
        60: "RATE",
        61: "MIRR",
        62: "IRR",
        63: "RAND",
        64: "MATCH",
        65: "DATE",
        66: "TIME",
        67: "DAY",
        68: "MONTH",
        69: "YEAR",
        70: "WEEKDAY",
        71: "HOUR",
        72: "MINUTE",
        73: "SECOND",
        74: "NOW",
        75: "AREAS",
        76: "ROWS",
        77: "COLUMNS",
        78: "OFFSET",
        79: "ABSREF",
        80: "RELREF",
        81: "ARGUMENT",
        82: "SEARCH",
        83: "TRANSPOSE",
        84: "ERROR",
        85: "STEP",
        86: "TYPE",
        87: "ECHO",
        88: "SET.NAME",
        89: "CALLER",
        90: "DEREF",
        91: "WINDOWS",
        92: "SERIES",
        93: "DOCUMENTS",
        94: "ACTIVE.CELL",
        95: "SELECTION",
        96: "RESULT",
        97: "ATAN2",
        98: "ASIN",
        99: "ACOS",
        100: "CHOOSE",
        101: "HLOOKUP",
        102: "VLOOKUP",
        103: "LINKS",
        104: "INPUT",
        105: "ISREF",
        106: "GET.FORMULA",
        107: "GET.NAME",
        108: "SET.VALUE",
        109: "LOG",
        110: "EXEC",
        111: "CHAR",
        112: "LOWER",
        113: "UPPER",
        114: "PROPER",
        115: "LEFT",
        116: "RIGHT",
        117: "EXACT",
        118: "TRIM",
        119: "REPLACE",
        120: "SUBSTITUTE",
        121: "CODE",
        122: "NAMES",
        123: "DIRECTORY",
        124: "FIND",
        125: "CELL",
        126: "ISERR",
        127: "ISTEXT",
        128: "ISNUMBER",
        129: "ISBLANK",
        130: "T",
        131: "N",
        132: "FOPEN",
        133: "FCLOSE",
        134: "FSIZE",
        135: "FREADLN",
        136: "FREAD",
        137: "FWRITELN",
        138: "FWRITE",
        139: "FPOS",
        140: "DATEVALUE",
        141: "TIMEVALUE",
        142: "SLN",
        143: "SYD",
        144: "DDB",
        145: "GET.DEF",
        146: "REFTEXT",
        147: "TEXTREF",
        148: "INDIRECT",
        149: "REGISTER",
        150: "CALL",
        151: "ADD.BAR",
        152: "ADD.MENU",
        153: "ADD.COMMAND",
        154: "ENABLE.COMMAND",
        155: "CHECK.COMMAND",
        156: "RENAME.COMMAND",
        157: "SHOW.BAR",
        158: "DELETE.MENU",
        159: "DELETE.COMMAND",
        160: "GET.CHART.ITEM",
        161: "DIALOG.BOX",
        162: "CLEAN",
        163: "MDETERM",
        164: "MINVERSE",
        165: "MMULT",
        166: "FILES",
        167: "IPMT",
        168: "PPMT",
        169: "COUNTA",
        170: "CANCEL.KEY",
        171: "FOR",
        172: "WHILE",
        173: "BREAK",
        174: "NEXT",
        175: "INITIATE",
        176: "REQUEST",
        177: "POKE",
        178: "EXECUTE",
        179: "TERMINATE",
        180: "RESTART",
        181: "HELP",
        182: "GET.BAR",
        183: "PRODUCT",
        184: "FACT",
        185: "GET.CELL",
        186: "GET.WORKSPACE",
        187: "GET.WINDOW",
        188: "GET.DOCUMENT",
        189: "DPRODUCT",
        190: "ISNONTEXT",
        191: "GET.NOTE",
        192: "NOTE",
        193: "STDEVP",
        194: "VARP",
        195: "DSTDEVP",
        196: "DVARP",
        197: "TRUNC",
        198: "ISLOGICAL",
        199: "DCOUNTA",
        200: "DELETE.BAR",
        201: "UNREGISTER",
        204: "USDOLLAR",
        205: "FINDB",
        206: "SEARCHB",
        207: "REPLACEB",
        208: "LEFTB",
        209: "RIGHTB",
        210: "MIDB",
        211: "LENB",
        212: "ROUNDUP",
        213: "ROUNDDOWN",
        214: "ASC",
        215: "DBCS",
        216: "RANK",
        219: "ADDRESS",
        220: "DAYS360",
        221: "TODAY",
        222: "VDB",
        223: "ELSE",
        224: "ELSE.IF",
        225: "END.IF",
        226: "FOR.CELL",
        227: "MEDIAN",
        228: "SUMPRODUCT",
        229: "SINH",
        230: "COSH",
        231: "TANH",
        232: "ASINH",
        233: "ACOSH",
        234: "ATANH",
        235: "DGET",
        236: "CREATE.OBJECT",
        237: "VOLATILE",
        238: "LAST.ERROR",
        239: "CUSTOM.UNDO",
        240: "CUSTOM.REPEAT",
        241: "FORMULA.CONVERT",
        242: "GET.LINK.INFO",
        243: "TEXT.BOX",
        244: "INFO",
        245: "GROUP",
        246: "GET.OBJECT",
        247: "DB",
        248: "PAUSE",
        251: "RESUME",
        252: "FREQUENCY",
        253: "ADD.TOOLBAR",
        254: "DELETE.TOOLBAR",
        255: "User",
        256: "RESET.TOOLBAR",
        257: "EVALUATE",
        258: "GET.TOOLBAR",
        259: "GET.TOOL",
        260: "SPELLING.CHECK",
        261: "ERROR.TYPE",
        262: "APP.TITLE",
        263: "WINDOW.TITLE",
        264: "SAVE.TOOLBAR",
        265: "ENABLE.TOOL",
        266: "PRESS.TOOL",
        267: "REGISTER.ID",
        268: "GET.WORKBOOK",
        269: "AVEDEV",
        270: "BETADIST",
        271: "GAMMALN",
        272: "BETAINV",
        273: "BINOMDIST",
        274: "CHIDIST",
        275: "CHIINV",
        276: "COMBIN",
        277: "CONFIDENCE",
        278: "CRITBINOM",
        279: "EVEN",
        280: "EXPONDIST",
        281: "FDIST",
        282: "FINV",
        283: "FISHER",
        284: "FISHERINV",
        285: "FLOOR",
        286: "GAMMADIST",
        287: "GAMMAINV",
        288: "CEILING",
        289: "HYPGEOMDIST",
        290: "LOGNORMDIST",
        291: "LOGINV",
        292: "NEGBINOMDIST",
        293: "NORMDIST",
        294: "NORMSDIST",
        295: "NORMINV",
        296: "NORMSINV",
        297: "STANDARDIZE",
        298: "ODD",
        299: "PERMUT",
        300: "POISSON",
        301: "TDIST",
        302: "WEIBULL",
        303: "SUMXMY2",
        304: "SUMX2MY2",
        305: "SUMX2PY2",
        306: "CHITEST",
        307: "CORREL",
        308: "COVAR",
        309: "FORECAST",
        310: "FTEST",
        311: "INTERCEPT",
        312: "PEARSON",
        313: "RSQ",
        314: "STEYX",
        315: "SLOPE",
        316: "TTEST",
        317: "PROB",
        318: "DEVSQ",
        319: "GEOMEAN",
        320: "HARMEAN",
        321: "SUMSQ",
        322: "KURT",
        323: "SKEW",
        324: "ZTEST",
        325: "LARGE",
        326: "SMALL",
        327: "QUARTILE",
        328: "PERCENTILE",
        329: "PERCENTRANK",
        330: "MODE",
        331: "TRIMMEAN",
        332: "TINV",
        334: "MOVIE.COMMAND",
        335: "GET.MOVIE",
        336: "CONCATENATE",
        337: "POWER",
        338: "PIVOT.ADD.DATA",
        339: "GET.PIVOT.TABLE",
        340: "GET.PIVOT.FIELD",
        341: "GET.PIVOT.ITEM",
        342: "RADIANS",
        343: "DEGREES",
        344: "SUBTOTAL",
        345: "SUMIF",
        346: "COUNTIF",
        347: "COUNTBLANK",
        348: "SCENARIO.GET",
        349: "OPTIONS.LISTS.GET",
        350: "ISPMT",
        351: "DATEDIF",
        352: "DATESTRING",
        353: "NUMBERSTRING",
        354: "ROMAN",
        355: "OPEN.DIALOG",
        356: "SAVE.DIALOG",
        357: "VIEW.GET",
        358: "GETPIVOTDATA",
        359: "HYPERLINK",
        360: "PHONETIC",
        361: "AVERAGEA",
        362: "MAXA",
        363: "MINA",
        364: "STDEVPA",
        365: "VARPA",
        366: "STDEVA",
        367: "VARA",
        368: "BAHTTEXT",
        369: "THAIDAYOFWEEK",
        370: "THAIDIGIT",
        371: "THAIMONTHOFYEAR",
        372: "THAINUMSOUND",
        373: "THAINUMSTRING",
        374: "THAISTRINGLENGTH",
        375: "ISTHAIDIGIT",
        376: "ROUNDBAHTDOWN",
        377: "ROUNDBAHTUP",
        378: "THAIYEAR",
        379: "RTD",
        380: "CUBEVALUE",
        381: "CUBEMEMBER",
        382: "CUBEMEMBERPROPERTY",
        383: "CUBERANKEDMEMBER",
        384: "HEX2BIN",
        385: "HEX2DEC",
        386: "HEX2OCT",
        387: "DEC2BIN",
        388: "DEC2HEX",
        389: "DEC2OCT",
        390: "OCT2BIN",
        391: "OCT2HEX",
        392: "OCT2DEC",
        393: "BIN2DEC",
        394: "BIN2OCT",
        395: "BIN2HEX",
        396: "IMSUB",
        397: "IMDIV",
        398: "IMPOWER",
        399: "IMABS",
        400: "IMSQRT",
        401: "IMLN",
        402: "IMLOG2",
        403: "IMLOG10",
        404: "IMSIN",
        405: "IMCOS",
        406: "IMEXP",
        407: "IMARGUMENT",
        408: "IMCONJUGATE",
        409: "IMAGINARY",
        410: "IMREAL",
        411: "COMPLEX",
        412: "IMSUM",
        413: "IMPRODUCT",
        414: "SERIESSUM",
        415: "FACTDOUBLE",
        416: "SQRTPI",
        417: "QUOTIENT",
        418: "DELTA",
        419: "GESTEP",
        420: "ISEVEN",
        421: "ISODD",
        422: "MROUND",
        423: "ERF",
        424: "ERFC",
        425: "BESSELJ",
        426: "BESSELK",
        427: "BESSELY",
        428: "BESSELI",
        429: "XIRR",
        430: "XNPV",
        431: "PRICEMAT",
        432: "YIELDMAT",
        433: "INTRATE",
        434: "RECEIVED",
        435: "DISC",
        436: "PRICEDISC",
        437: "YIELDDISC",
        438: "TBILLEQ",
        439: "TBILLPRICE",
        440: "TBILLYIELD",
        441: "PRICE",
        442: "YIELD",
        443: "DOLLARDE",
        444: "DOLLARFR",
        445: "NOMINAL",
        446: "EFFECT",
        447: "CUMPRINC",
        448: "CUMIPMT",
        449: "EDATE",
        450: "EOMONTH",
        451: "YEARFRAC",
        452: "COUPDAYBS",
        453: "COUPDAYS",
        454: "COUPDAYSNC",
        455: "COUPNCD",
        456: "COUPNUM",
        457: "COUPPCD",
        458: "DURATION",
        459: "MDURATION",
        460: "ODDLPRICE",
        461: "ODDLYIELD",
        462: "ODDFPRICE",
        463: "ODDFYIELD",
        464: "RANDBETWEEN",
        465: "WEEKNUM",
        466: "AMORDEGRC",
        467: "AMORLINC",
        468: "CONVERT",
        724: "SHEETJS",
        469: "ACCRINT",
        470: "ACCRINTM",
        471: "WORKDAY",
        472: "NETWORKDAYS",
        473: "GCD",
        474: "MULTINOMIAL",
        475: "LCM",
        476: "FVSCHEDULE",
        477: "CUBEKPIMEMBER",
        478: "CUBESET",
        479: "CUBESETCOUNT",
        480: "IFERROR",
        481: "COUNTIFS",
        482: "SUMIFS",
        483: "AVERAGEIF",
        484: "AVERAGEIFS"
      };
      var FtabArgc = {
        2: 1,
        3: 1,
        10: 0,
        15: 1,
        16: 1,
        17: 1,
        18: 1,
        19: 0,
        20: 1,
        21: 1,
        22: 1,
        23: 1,
        24: 1,
        25: 1,
        26: 1,
        27: 2,
        30: 2,
        31: 3,
        32: 1,
        33: 1,
        34: 0,
        35: 0,
        38: 1,
        39: 2,
        40: 3,
        41: 3,
        42: 3,
        43: 3,
        44: 3,
        45: 3,
        47: 3,
        48: 2,
        53: 1,
        61: 3,
        63: 0,
        65: 3,
        66: 3,
        67: 1,
        68: 1,
        69: 1,
        70: 1,
        71: 1,
        72: 1,
        73: 1,
        74: 0,
        75: 1,
        76: 1,
        77: 1,
        79: 2,
        80: 2,
        83: 1,
        85: 0,
        86: 1,
        89: 0,
        90: 1,
        94: 0,
        95: 0,
        97: 2,
        98: 1,
        99: 1,
        101: 3,
        102: 3,
        105: 1,
        106: 1,
        108: 2,
        111: 1,
        112: 1,
        113: 1,
        114: 1,
        117: 2,
        118: 1,
        119: 4,
        121: 1,
        126: 1,
        127: 1,
        128: 1,
        129: 1,
        130: 1,
        131: 1,
        133: 1,
        134: 1,
        135: 1,
        136: 2,
        137: 2,
        138: 2,
        140: 1,
        141: 1,
        142: 3,
        143: 4,
        144: 4,
        161: 1,
        162: 1,
        163: 1,
        164: 1,
        165: 2,
        172: 1,
        175: 2,
        176: 2,
        177: 3,
        178: 2,
        179: 1,
        184: 1,
        186: 1,
        189: 3,
        190: 1,
        195: 3,
        196: 3,
        197: 1,
        198: 1,
        199: 3,
        201: 1,
        207: 4,
        210: 3,
        211: 1,
        212: 2,
        213: 2,
        214: 1,
        215: 1,
        225: 0,
        229: 1,
        230: 1,
        231: 1,
        232: 1,
        233: 1,
        234: 1,
        235: 3,
        244: 1,
        247: 4,
        252: 2,
        257: 1,
        261: 1,
        271: 1,
        273: 4,
        274: 2,
        275: 2,
        276: 2,
        277: 3,
        278: 3,
        279: 1,
        280: 3,
        281: 3,
        282: 3,
        283: 1,
        284: 1,
        285: 2,
        286: 4,
        287: 3,
        288: 2,
        289: 4,
        290: 3,
        291: 3,
        292: 3,
        293: 4,
        294: 1,
        295: 3,
        296: 1,
        297: 3,
        298: 1,
        299: 2,
        300: 3,
        301: 3,
        302: 4,
        303: 2,
        304: 2,
        305: 2,
        306: 2,
        307: 2,
        308: 2,
        309: 3,
        310: 2,
        311: 2,
        312: 2,
        313: 2,
        314: 2,
        315: 2,
        316: 4,
        325: 2,
        326: 2,
        327: 2,
        328: 2,
        331: 2,
        332: 2,
        337: 2,
        342: 1,
        343: 1,
        346: 2,
        347: 1,
        350: 4,
        351: 3,
        352: 1,
        353: 2,
        360: 1,
        368: 1,
        369: 1,
        370: 1,
        371: 1,
        372: 1,
        373: 1,
        374: 1,
        375: 1,
        376: 1,
        377: 1,
        378: 1,
        382: 3,
        385: 1,
        392: 1,
        393: 1,
        396: 2,
        397: 2,
        398: 2,
        399: 1,
        400: 1,
        401: 1,
        402: 1,
        403: 1,
        404: 1,
        405: 1,
        406: 1,
        407: 1,
        408: 1,
        409: 1,
        410: 1,
        414: 4,
        415: 1,
        416: 1,
        417: 2,
        420: 1,
        421: 1,
        422: 2,
        424: 1,
        425: 2,
        426: 2,
        427: 2,
        428: 2,
        430: 3,
        438: 3,
        439: 3,
        440: 3,
        443: 2,
        444: 2,
        445: 2,
        446: 2,
        447: 6,
        448: 6,
        449: 2,
        450: 2,
        464: 2,
        468: 3,
        476: 2,
        479: 1,
        480: 2,
        65535: 0
      };
      function ods_to_csf_formula(f2) {
        if (f2.slice(0, 3) == "of:") f2 = f2.slice(3);
        if (f2.charCodeAt(0) == 61) {
          f2 = f2.slice(1);
          if (f2.charCodeAt(0) == 61) f2 = f2.slice(1);
        }
        f2 = f2.replace(/COM\.MICROSOFT\./g, "");
        f2 = f2.replace(/\[((?:\.[A-Z]+[0-9]+)(?::\.[A-Z]+[0-9]+)?)\]/g, function($$, $1) {
          return $1.replace(/\./g, "");
        });
        f2 = f2.replace(/\[.(#[A-Z]*[?!])\]/g, "$1");
        return f2.replace(/[;~]/g, ",").replace(/\|/g, ";");
      }
      function csf_to_ods_formula(f2) {
        var o3 = "of:=" + f2.replace(crefregex, "$1[.$2$3$4$5]").replace(/\]:\[/g, ":");
        return o3.replace(/;/g, "|").replace(/,/g, ";");
      }
      function ods_to_csf_3D(r3) {
        var a2 = r3.split(":");
        var s3 = a2[0].split(".")[0];
        return [s3, a2[0].split(".")[1] + (a2.length > 1 ? ":" + (a2[1].split(".")[1] || a2[1].split(".")[0]) : "")];
      }
      function csf_to_ods_3D(r3) {
        return r3.replace(/\./, "!");
      }
      var strs = {};
      var _ssfopts = {};
      var browser_has_Map = typeof Map !== "undefined";
      function get_sst_id(sst, str, rev) {
        var i3 = 0, len = sst.length;
        if (rev) {
          if (browser_has_Map ? rev.has(str) : Object.prototype.hasOwnProperty.call(rev, str)) {
            var revarr = browser_has_Map ? rev.get(str) : rev[str];
            for (; i3 < revarr.length; ++i3) {
              if (sst[revarr[i3]].t === str) {
                sst.Count++;
                return revarr[i3];
              }
            }
          }
        } else for (; i3 < len; ++i3) {
          if (sst[i3].t === str) {
            sst.Count++;
            return i3;
          }
        }
        sst[len] = { t: str };
        sst.Count++;
        sst.Unique++;
        if (rev) {
          if (browser_has_Map) {
            if (!rev.has(str)) rev.set(str, []);
            rev.get(str).push(len);
          } else {
            if (!Object.prototype.hasOwnProperty.call(rev, str)) rev[str] = [];
            rev[str].push(len);
          }
        }
        return len;
      }
      function col_obj_w(C2, col) {
        var p3 = { min: C2 + 1, max: C2 + 1 };
        var wch = -1;
        if (col.MDW) MDW = col.MDW;
        if (col.width != null) p3.customWidth = 1;
        else if (col.wpx != null) wch = px2char(col.wpx);
        else if (col.wch != null) wch = col.wch;
        if (wch > -1) {
          p3.width = char2width(wch);
          p3.customWidth = 1;
        } else if (col.width != null) p3.width = col.width;
        if (col.hidden) p3.hidden = true;
        if (col.level != null) {
          p3.outlineLevel = p3.level = col.level;
        }
        return p3;
      }
      function default_margins(margins, mode) {
        if (!margins) return;
        var defs = [0.7, 0.7, 0.75, 0.75, 0.3, 0.3];
        if (mode == "xlml") defs = [1, 1, 1, 1, 0.5, 0.5];
        if (margins.left == null) margins.left = defs[0];
        if (margins.right == null) margins.right = defs[1];
        if (margins.top == null) margins.top = defs[2];
        if (margins.bottom == null) margins.bottom = defs[3];
        if (margins.header == null) margins.header = defs[4];
        if (margins.footer == null) margins.footer = defs[5];
      }
      function get_cell_style(styles, cell, opts) {
        var z4 = opts.revssf[cell.z != null ? cell.z : "General"];
        var i3 = 60, len = styles.length;
        if (z4 == null && opts.ssf) {
          for (; i3 < 392; ++i3) if (opts.ssf[i3] == null) {
            SSF_load(cell.z, i3);
            opts.ssf[i3] = cell.z;
            opts.revssf[cell.z] = z4 = i3;
            break;
          }
        }
        for (i3 = 0; i3 != len; ++i3) if (styles[i3].numFmtId === z4) return i3;
        styles[len] = {
          numFmtId: z4,
          fontId: 0,
          fillId: 0,
          borderId: 0,
          xfId: 0,
          applyNumberFormat: 1
        };
        return len;
      }
      function safe_format(p3, fmtid, fillid, opts, themes, styles) {
        try {
          if (opts.cellNF) p3.z = table_fmt[fmtid];
        } catch (e3) {
          if (opts.WTF) throw e3;
        }
        if (p3.t === "z" && !opts.cellStyles) return;
        if (p3.t === "d" && typeof p3.v === "string") p3.v = parseDate(p3.v);
        if ((!opts || opts.cellText !== false) && p3.t !== "z") try {
          if (table_fmt[fmtid] == null) SSF_load(SSFImplicit[fmtid] || "General", fmtid);
          if (p3.t === "e") p3.w = p3.w || BErr[p3.v];
          else if (fmtid === 0) {
            if (p3.t === "n") {
              if ((p3.v | 0) === p3.v) p3.w = p3.v.toString(10);
              else p3.w = SSF_general_num(p3.v);
            } else if (p3.t === "d") {
              var dd = datenum(p3.v);
              if ((dd | 0) === dd) p3.w = dd.toString(10);
              else p3.w = SSF_general_num(dd);
            } else if (p3.v === void 0) return "";
            else p3.w = SSF_general(p3.v, _ssfopts);
          } else if (p3.t === "d") p3.w = SSF_format(fmtid, datenum(p3.v), _ssfopts);
          else p3.w = SSF_format(fmtid, p3.v, _ssfopts);
        } catch (e3) {
          if (opts.WTF) throw e3;
        }
        if (!opts.cellStyles) return;
        if (fillid != null) try {
          p3.s = styles.Fills[fillid];
          if (p3.s.fgColor && p3.s.fgColor.theme && !p3.s.fgColor.rgb) {
            p3.s.fgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p3.s.fgColor.theme].rgb, p3.s.fgColor.tint || 0);
            if (opts.WTF) p3.s.fgColor.raw_rgb = themes.themeElements.clrScheme[p3.s.fgColor.theme].rgb;
          }
          if (p3.s.bgColor && p3.s.bgColor.theme) {
            p3.s.bgColor.rgb = rgb_tint(themes.themeElements.clrScheme[p3.s.bgColor.theme].rgb, p3.s.bgColor.tint || 0);
            if (opts.WTF) p3.s.bgColor.raw_rgb = themes.themeElements.clrScheme[p3.s.bgColor.theme].rgb;
          }
        } catch (e3) {
          if (opts.WTF && styles.Fills) throw e3;
        }
      }
      function check_ws(ws, sname, i3) {
        if (ws && ws["!ref"]) {
          var range = safe_decode_range(ws["!ref"]);
          if (range.e.c < range.s.c || range.e.r < range.s.r) throw new Error("Bad range (" + i3 + "): " + ws["!ref"]);
        }
      }
      function parse_ws_xml_dim(ws, s3) {
        var d3 = safe_decode_range(s3);
        if (d3.s.r <= d3.e.r && d3.s.c <= d3.e.c && d3.s.r >= 0 && d3.s.c >= 0) ws["!ref"] = encode_range(d3);
      }
      var mergecregex = /<(?:\w:)?mergeCell ref="[A-Z0-9:]+"\s*[\/]?>/g;
      var sheetdataregex = /<(?:\w+:)?sheetData[^>]*>([\s\S]*)<\/(?:\w+:)?sheetData>/;
      var hlinkregex = /<(?:\w:)?hyperlink [^>]*>/mg;
      var dimregex = /"(\w*:\w*)"/;
      var colregex = /<(?:\w:)?col\b[^>]*[\/]?>/g;
      var afregex = /<(?:\w:)?autoFilter[^>]*([\/]|>([\s\S]*)<\/(?:\w:)?autoFilter)>/g;
      var marginregex = /<(?:\w:)?pageMargins[^>]*\/>/g;
      var sheetprregex = /<(?:\w:)?sheetPr\b(?:[^>a-z][^>]*)?\/>/;
      var sheetprregex2 = /<(?:\w:)?sheetPr[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetPr)>/;
      var svsregex = /<(?:\w:)?sheetViews[^>]*(?:[\/]|>([\s\S]*)<\/(?:\w:)?sheetViews)>/;
      function parse_ws_xml(data, opts, idx, rels, wb, themes, styles) {
        if (!data) return data;
        if (!rels) rels = { "!id": {} };
        if (DENSE != null && opts.dense == null) opts.dense = DENSE;
        var s3 = opts.dense ? [] : {};
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        var data1 = "", data2 = "";
        var mtch = data.match(sheetdataregex);
        if (mtch) {
          data1 = data.slice(0, mtch.index);
          data2 = data.slice(mtch.index + mtch[0].length);
        } else data1 = data2 = data;
        var sheetPr = data1.match(sheetprregex);
        if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s3, wb, idx);
        else if (sheetPr = data1.match(sheetprregex2)) parse_ws_xml_sheetpr2(sheetPr[0], sheetPr[1] || "", s3, wb, idx, styles, themes);
        var ridx = (data1.match(/<(?:\w*:)?dimension/) || { index: -1 }).index;
        if (ridx > 0) {
          var ref = data1.slice(ridx, ridx + 50).match(dimregex);
          if (ref) parse_ws_xml_dim(s3, ref[1]);
        }
        var svs = data1.match(svsregex);
        if (svs && svs[1]) parse_ws_xml_sheetviews(svs[1], wb);
        var columns = [];
        if (opts.cellStyles) {
          var cols = data1.match(colregex);
          if (cols) parse_ws_xml_cols(columns, cols);
        }
        if (mtch) parse_ws_xml_data(mtch[1], s3, opts, refguess, themes, styles);
        var afilter = data2.match(afregex);
        if (afilter) s3["!autofilter"] = parse_ws_xml_autofilter(afilter[0]);
        var merges = [];
        var _merge = data2.match(mergecregex);
        if (_merge) for (ridx = 0; ridx != _merge.length; ++ridx)
          merges[ridx] = safe_decode_range(_merge[ridx].slice(_merge[ridx].indexOf('"') + 1));
        var hlink = data2.match(hlinkregex);
        if (hlink) parse_ws_xml_hlinks(s3, hlink, rels);
        var margins = data2.match(marginregex);
        if (margins) s3["!margins"] = parse_ws_xml_margins(parsexmltag(margins[0]));
        if (!s3["!ref"] && refguess.e.c >= refguess.s.c && refguess.e.r >= refguess.s.r) s3["!ref"] = encode_range(refguess);
        if (opts.sheetRows > 0 && s3["!ref"]) {
          var tmpref = safe_decode_range(s3["!ref"]);
          if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
            s3["!fullref"] = s3["!ref"];
            s3["!ref"] = encode_range(tmpref);
          }
        }
        if (columns.length > 0) s3["!cols"] = columns;
        if (merges.length > 0) s3["!merges"] = merges;
        return s3;
      }
      function write_ws_xml_merges(merges) {
        if (merges.length === 0) return "";
        var o3 = '<mergeCells count="' + merges.length + '">';
        for (var i3 = 0; i3 != merges.length; ++i3) o3 += '<mergeCell ref="' + encode_range(merges[i3]) + '"/>';
        return o3 + "</mergeCells>";
      }
      function parse_ws_xml_sheetpr(sheetPr, s3, wb, idx) {
        var data = parsexmltag(sheetPr);
        if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
        if (data.codeName) wb.Sheets[idx].CodeName = unescapexml(utf8read(data.codeName));
      }
      function parse_ws_xml_sheetpr2(sheetPr, body, s3, wb, idx) {
        parse_ws_xml_sheetpr(sheetPr.slice(0, sheetPr.indexOf(">")), s3, wb, idx);
      }
      function write_ws_xml_sheetpr(ws, wb, idx, opts, o3) {
        var needed = false;
        var props = {}, payload = null;
        if (opts.bookType !== "xlsx" && wb.vbaraw) {
          var cname = wb.SheetNames[idx];
          try {
            if (wb.Workbook) cname = wb.Workbook.Sheets[idx].CodeName || cname;
          } catch (e3) {
          }
          needed = true;
          props.codeName = utf8write(escapexml(cname));
        }
        if (ws && ws["!outline"]) {
          var outlineprops = { summaryBelow: 1, summaryRight: 1 };
          if (ws["!outline"].above) outlineprops.summaryBelow = 0;
          if (ws["!outline"].left) outlineprops.summaryRight = 0;
          payload = (payload || "") + writextag("outlinePr", null, outlineprops);
        }
        if (!needed && !payload) return;
        o3[o3.length] = writextag("sheetPr", payload, props);
      }
      var sheetprot_deffalse = ["objects", "scenarios", "selectLockedCells", "selectUnlockedCells"];
      var sheetprot_deftrue = [
        "formatColumns",
        "formatRows",
        "formatCells",
        "insertColumns",
        "insertRows",
        "insertHyperlinks",
        "deleteColumns",
        "deleteRows",
        "sort",
        "autoFilter",
        "pivotTables"
      ];
      function write_ws_xml_protection(sp) {
        var o3 = { sheet: 1 };
        sheetprot_deffalse.forEach(function(n3) {
          if (sp[n3] != null && sp[n3]) o3[n3] = "1";
        });
        sheetprot_deftrue.forEach(function(n3) {
          if (sp[n3] != null && !sp[n3]) o3[n3] = "0";
        });
        if (sp.password) o3.password = crypto_CreatePasswordVerifier_Method1(sp.password).toString(16).toUpperCase();
        return writextag("sheetProtection", null, o3);
      }
      function parse_ws_xml_hlinks(s3, data, rels) {
        var dense = Array.isArray(s3);
        for (var i3 = 0; i3 != data.length; ++i3) {
          var val = parsexmltag(utf8read(data[i3]), true);
          if (!val.ref) return;
          var rel = ((rels || {})["!id"] || [])[val.id];
          if (rel) {
            val.Target = rel.Target;
            if (val.location) val.Target += "#" + unescapexml(val.location);
          } else {
            val.Target = "#" + unescapexml(val.location);
            rel = { Target: val.Target, TargetMode: "Internal" };
          }
          val.Rel = rel;
          if (val.tooltip) {
            val.Tooltip = val.tooltip;
            delete val.tooltip;
          }
          var rng = safe_decode_range(val.ref);
          for (var R2 = rng.s.r; R2 <= rng.e.r; ++R2) for (var C2 = rng.s.c; C2 <= rng.e.c; ++C2) {
            var addr = encode_cell({ c: C2, r: R2 });
            if (dense) {
              if (!s3[R2]) s3[R2] = [];
              if (!s3[R2][C2]) s3[R2][C2] = { t: "z", v: void 0 };
              s3[R2][C2].l = val;
            } else {
              if (!s3[addr]) s3[addr] = { t: "z", v: void 0 };
              s3[addr].l = val;
            }
          }
        }
      }
      function parse_ws_xml_margins(margin) {
        var o3 = {};
        ["left", "right", "top", "bottom", "header", "footer"].forEach(function(k3) {
          if (margin[k3]) o3[k3] = parseFloat(margin[k3]);
        });
        return o3;
      }
      function write_ws_xml_margins(margin) {
        default_margins(margin);
        return writextag("pageMargins", null, margin);
      }
      function parse_ws_xml_cols(columns, cols) {
        var seencol = false;
        for (var coli = 0; coli != cols.length; ++coli) {
          var coll = parsexmltag(cols[coli], true);
          if (coll.hidden) coll.hidden = parsexmlbool(coll.hidden);
          var colm = parseInt(coll.min, 10) - 1, colM = parseInt(coll.max, 10) - 1;
          if (coll.outlineLevel) coll.level = +coll.outlineLevel || 0;
          delete coll.min;
          delete coll.max;
          coll.width = +coll.width;
          if (!seencol && coll.width) {
            seencol = true;
            find_mdw_colw(coll.width);
          }
          process_col(coll);
          while (colm <= colM) columns[colm++] = dup(coll);
        }
      }
      function write_ws_xml_cols(ws, cols) {
        var o3 = ["<cols>"], col;
        for (var i3 = 0; i3 != cols.length; ++i3) {
          if (!(col = cols[i3])) continue;
          o3[o3.length] = writextag("col", null, col_obj_w(i3, col));
        }
        o3[o3.length] = "</cols>";
        return o3.join("");
      }
      function parse_ws_xml_autofilter(data) {
        var o3 = { ref: (data.match(/ref="([^"]*)"/) || [])[1] };
        return o3;
      }
      function write_ws_xml_autofilter(data, ws, wb, idx) {
        var ref = typeof data.ref == "string" ? data.ref : encode_range(data.ref);
        if (!wb.Workbook) wb.Workbook = { Sheets: [] };
        if (!wb.Workbook.Names) wb.Workbook.Names = [];
        var names = wb.Workbook.Names;
        var range = decode_range(ref);
        if (range.s.r == range.e.r) {
          range.e.r = decode_range(ws["!ref"]).e.r;
          ref = encode_range(range);
        }
        for (var i3 = 0; i3 < names.length; ++i3) {
          var name = names[i3];
          if (name.Name != "_xlnm._FilterDatabase") continue;
          if (name.Sheet != idx) continue;
          name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
          break;
        }
        if (i3 == names.length) names.push({ Name: "_xlnm._FilterDatabase", Sheet: idx, Ref: "'" + wb.SheetNames[idx] + "'!" + ref });
        return writextag("autoFilter", null, { ref });
      }
      var sviewregex = /<(?:\w:)?sheetView(?:[^>a-z][^>]*)?\/?>/;
      function parse_ws_xml_sheetviews(data, wb) {
        if (!wb.Views) wb.Views = [{}];
        (data.match(sviewregex) || []).forEach(function(r3, i3) {
          var tag = parsexmltag(r3);
          if (!wb.Views[i3]) wb.Views[i3] = {};
          if (+tag.zoomScale) wb.Views[i3].zoom = +tag.zoomScale;
          if (parsexmlbool(tag.rightToLeft)) wb.Views[i3].RTL = true;
        });
      }
      function write_ws_xml_sheetviews(ws, opts, idx, wb) {
        var sview = { workbookViewId: "0" };
        if ((((wb || {}).Workbook || {}).Views || [])[0]) sview.rightToLeft = wb.Workbook.Views[0].RTL ? "1" : "0";
        return writextag("sheetViews", writextag("sheetView", null, sview), {});
      }
      function write_ws_xml_cell(cell, ref, ws, opts) {
        if (cell.c) ws["!comments"].push([ref, cell.c]);
        if (cell.v === void 0 && typeof cell.f !== "string" || cell.t === "z" && !cell.f) return "";
        var vv = "";
        var oldt = cell.t, oldv = cell.v;
        if (cell.t !== "z") switch (cell.t) {
          case "b":
            vv = cell.v ? "1" : "0";
            break;
          case "n":
            vv = "" + cell.v;
            break;
          case "e":
            vv = BErr[cell.v];
            break;
          case "d":
            if (opts && opts.cellDates) vv = parseDate(cell.v, -1).toISOString();
            else {
              cell = dup(cell);
              cell.t = "n";
              vv = "" + (cell.v = datenum(parseDate(cell.v)));
            }
            if (typeof cell.z === "undefined") cell.z = table_fmt[14];
            break;
          default:
            vv = cell.v;
            break;
        }
        var v3 = writetag("v", escapexml(vv)), o3 = { r: ref };
        var os = get_cell_style(opts.cellXfs, cell, opts);
        if (os !== 0) o3.s = os;
        switch (cell.t) {
          case "n":
            break;
          case "d":
            o3.t = "d";
            break;
          case "b":
            o3.t = "b";
            break;
          case "e":
            o3.t = "e";
            break;
          case "z":
            break;
          default:
            if (cell.v == null) {
              delete cell.t;
              break;
            }
            if (cell.v.length > 32767) throw new Error("Text length must not exceed 32767 characters");
            if (opts && opts.bookSST) {
              v3 = writetag("v", "" + get_sst_id(opts.Strings, cell.v, opts.revStrings));
              o3.t = "s";
              break;
            }
            o3.t = "str";
            break;
        }
        if (cell.t != oldt) {
          cell.t = oldt;
          cell.v = oldv;
        }
        if (typeof cell.f == "string" && cell.f) {
          var ff = cell.F && cell.F.slice(0, ref.length) == ref ? { t: "array", ref: cell.F } : null;
          v3 = writextag("f", escapexml(cell.f), ff) + (cell.v != null ? v3 : "");
        }
        if (cell.l) ws["!links"].push([ref, cell.l]);
        if (cell.D) o3.cm = 1;
        return writextag("c", v3, o3);
      }
      var parse_ws_xml_data = function() {
        var cellregex = /<(?:\w+:)?c[ \/>]/, rowregex = /<\/(?:\w+:)?row>/;
        var rregex = /r=["']([^"']*)["']/, isregex = /<(?:\w+:)?is>([\S\s]*?)<\/(?:\w+:)?is>/;
        var refregex = /ref=["']([^"']*)["']/;
        var match_v = matchtag("v"), match_f = matchtag("f");
        return function parse_ws_xml_data2(sdata, s3, opts, guess, themes, styles) {
          var ri2 = 0, x3 = "", cells = [], cref = [], idx = 0, i3 = 0, cc = 0, d3 = "", p3;
          var tag, tagr = 0, tagc = 0;
          var sstr, ftag;
          var fmtid = 0, fillid = 0;
          var do_format = Array.isArray(styles.CellXf), cf;
          var arrayf = [];
          var sharedf = [];
          var dense = Array.isArray(s3);
          var rows = [], rowobj = {}, rowrite = false;
          var sheetStubs = !!opts.sheetStubs;
          for (var marr = sdata.split(rowregex), mt2 = 0, marrlen = marr.length; mt2 != marrlen; ++mt2) {
            x3 = marr[mt2].trim();
            var xlen = x3.length;
            if (xlen === 0) continue;
            var rstarti = 0;
            outa: for (ri2 = 0; ri2 < xlen; ++ri2) switch (
              /*x.charCodeAt(ri)*/
              x3[ri2]
            ) {
              case ">":
                if (
                  /*x.charCodeAt(ri-1) != 47*/
                  x3[ri2 - 1] != "/"
                ) {
                  ++ri2;
                  break outa;
                }
                if (opts && opts.cellStyles) {
                  tag = parsexmltag(x3.slice(rstarti, ri2), true);
                  tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
                  tagc = -1;
                  if (opts.sheetRows && opts.sheetRows < tagr) continue;
                  rowobj = {};
                  rowrite = false;
                  if (tag.ht) {
                    rowrite = true;
                    rowobj.hpt = parseFloat(tag.ht);
                    rowobj.hpx = pt2px(rowobj.hpt);
                  }
                  if (tag.hidden == "1") {
                    rowrite = true;
                    rowobj.hidden = true;
                  }
                  if (tag.outlineLevel != null) {
                    rowrite = true;
                    rowobj.level = +tag.outlineLevel;
                  }
                  if (rowrite) rows[tagr - 1] = rowobj;
                }
                break;
              case "<":
                rstarti = ri2;
                break;
            }
            if (rstarti >= ri2) break;
            tag = parsexmltag(x3.slice(rstarti, ri2), true);
            tagr = tag.r != null ? parseInt(tag.r, 10) : tagr + 1;
            tagc = -1;
            if (opts.sheetRows && opts.sheetRows < tagr) continue;
            if (guess.s.r > tagr - 1) guess.s.r = tagr - 1;
            if (guess.e.r < tagr - 1) guess.e.r = tagr - 1;
            if (opts && opts.cellStyles) {
              rowobj = {};
              rowrite = false;
              if (tag.ht) {
                rowrite = true;
                rowobj.hpt = parseFloat(tag.ht);
                rowobj.hpx = pt2px(rowobj.hpt);
              }
              if (tag.hidden == "1") {
                rowrite = true;
                rowobj.hidden = true;
              }
              if (tag.outlineLevel != null) {
                rowrite = true;
                rowobj.level = +tag.outlineLevel;
              }
              if (rowrite) rows[tagr - 1] = rowobj;
            }
            cells = x3.slice(ri2).split(cellregex);
            for (var rslice = 0; rslice != cells.length; ++rslice) if (cells[rslice].trim().charAt(0) != "<") break;
            cells = cells.slice(rslice);
            for (ri2 = 0; ri2 != cells.length; ++ri2) {
              x3 = cells[ri2].trim();
              if (x3.length === 0) continue;
              cref = x3.match(rregex);
              idx = ri2;
              i3 = 0;
              cc = 0;
              x3 = "<c " + (x3.slice(0, 1) == "<" ? ">" : "") + x3;
              if (cref != null && cref.length === 2) {
                idx = 0;
                d3 = cref[1];
                for (i3 = 0; i3 != d3.length; ++i3) {
                  if ((cc = d3.charCodeAt(i3) - 64) < 1 || cc > 26) break;
                  idx = 26 * idx + cc;
                }
                --idx;
                tagc = idx;
              } else ++tagc;
              for (i3 = 0; i3 != x3.length; ++i3) if (x3.charCodeAt(i3) === 62) break;
              ++i3;
              tag = parsexmltag(x3.slice(0, i3), true);
              if (!tag.r) tag.r = encode_cell({ r: tagr - 1, c: tagc });
              d3 = x3.slice(i3);
              p3 = { t: "" };
              if ((cref = d3.match(match_v)) != null && cref[1] !== "") p3.v = unescapexml(cref[1]);
              if (opts.cellFormula) {
                if ((cref = d3.match(match_f)) != null && cref[1] !== "") {
                  p3.f = unescapexml(utf8read(cref[1])).replace(/\r\n/g, "\n");
                  if (!opts.xlfn) p3.f = _xlfn(p3.f);
                  if (cref[0].indexOf('t="array"') > -1) {
                    p3.F = (d3.match(refregex) || [])[1];
                    if (p3.F.indexOf(":") > -1) arrayf.push([safe_decode_range(p3.F), p3.F]);
                  } else if (cref[0].indexOf('t="shared"') > -1) {
                    ftag = parsexmltag(cref[0]);
                    var ___f = unescapexml(utf8read(cref[1]));
                    if (!opts.xlfn) ___f = _xlfn(___f);
                    sharedf[parseInt(ftag.si, 10)] = [ftag, ___f, tag.r];
                  }
                } else if (cref = d3.match(/<f[^>]*\/>/)) {
                  ftag = parsexmltag(cref[0]);
                  if (sharedf[ftag.si]) p3.f = shift_formula_xlsx(sharedf[ftag.si][1], sharedf[ftag.si][2], tag.r);
                }
                var _tag = decode_cell(tag.r);
                for (i3 = 0; i3 < arrayf.length; ++i3)
                  if (_tag.r >= arrayf[i3][0].s.r && _tag.r <= arrayf[i3][0].e.r) {
                    if (_tag.c >= arrayf[i3][0].s.c && _tag.c <= arrayf[i3][0].e.c)
                      p3.F = arrayf[i3][1];
                  }
              }
              if (tag.t == null && p3.v === void 0) {
                if (p3.f || p3.F) {
                  p3.v = 0;
                  p3.t = "n";
                } else if (!sheetStubs) continue;
                else p3.t = "z";
              } else p3.t = tag.t || "n";
              if (guess.s.c > tagc) guess.s.c = tagc;
              if (guess.e.c < tagc) guess.e.c = tagc;
              switch (p3.t) {
                case "n":
                  if (p3.v == "" || p3.v == null) {
                    if (!sheetStubs) continue;
                    p3.t = "z";
                  } else p3.v = parseFloat(p3.v);
                  break;
                case "s":
                  if (typeof p3.v == "undefined") {
                    if (!sheetStubs) continue;
                    p3.t = "z";
                  } else {
                    sstr = strs[parseInt(p3.v, 10)];
                    p3.v = sstr.t;
                    p3.r = sstr.r;
                    if (opts.cellHTML) p3.h = sstr.h;
                  }
                  break;
                case "str":
                  p3.t = "s";
                  p3.v = p3.v != null ? utf8read(p3.v) : "";
                  if (opts.cellHTML) p3.h = escapehtml(p3.v);
                  break;
                case "inlineStr":
                  cref = d3.match(isregex);
                  p3.t = "s";
                  if (cref != null && (sstr = parse_si(cref[1]))) {
                    p3.v = sstr.t;
                    if (opts.cellHTML) p3.h = sstr.h;
                  } else p3.v = "";
                  break;
                case "b":
                  p3.v = parsexmlbool(p3.v);
                  break;
                case "d":
                  if (opts.cellDates) p3.v = parseDate(p3.v, 1);
                  else {
                    p3.v = datenum(parseDate(p3.v, 1));
                    p3.t = "n";
                  }
                  break;
                /* error string in .w, number in .v */
                case "e":
                  if (!opts || opts.cellText !== false) p3.w = p3.v;
                  p3.v = RBErr[p3.v];
                  break;
              }
              fmtid = fillid = 0;
              cf = null;
              if (do_format && tag.s !== void 0) {
                cf = styles.CellXf[tag.s];
                if (cf != null) {
                  if (cf.numFmtId != null) fmtid = cf.numFmtId;
                  if (opts.cellStyles) {
                    if (cf.fillId != null) fillid = cf.fillId;
                  }
                }
              }
              safe_format(p3, fmtid, fillid, opts, themes, styles);
              if (opts.cellDates && do_format && p3.t == "n" && fmt_is_date(table_fmt[fmtid])) {
                p3.t = "d";
                p3.v = numdate(p3.v);
              }
              if (tag.cm && opts.xlmeta) {
                var cm = (opts.xlmeta.Cell || [])[+tag.cm - 1];
                if (cm && cm.type == "XLDAPR") p3.D = true;
              }
              if (dense) {
                var _r2 = decode_cell(tag.r);
                if (!s3[_r2.r]) s3[_r2.r] = [];
                s3[_r2.r][_r2.c] = p3;
              } else s3[tag.r] = p3;
            }
          }
          if (rows.length > 0) s3["!rows"] = rows;
        };
      }();
      function write_ws_xml_data(ws, opts, idx, wb) {
        var o3 = [], r3 = [], range = safe_decode_range(ws["!ref"]), cell = "", ref, rr2 = "", cols = [], R2 = 0, C2 = 0, rows = ws["!rows"];
        var dense = Array.isArray(ws);
        var params = { r: rr2 }, row, height = -1;
        for (C2 = range.s.c; C2 <= range.e.c; ++C2) cols[C2] = encode_col(C2);
        for (R2 = range.s.r; R2 <= range.e.r; ++R2) {
          r3 = [];
          rr2 = encode_row(R2);
          for (C2 = range.s.c; C2 <= range.e.c; ++C2) {
            ref = cols[C2] + rr2;
            var _cell = dense ? (ws[R2] || [])[C2] : ws[ref];
            if (_cell === void 0) continue;
            if ((cell = write_ws_xml_cell(_cell, ref, ws, opts, idx, wb)) != null) r3.push(cell);
          }
          if (r3.length > 0 || rows && rows[R2]) {
            params = { r: rr2 };
            if (rows && rows[R2]) {
              row = rows[R2];
              if (row.hidden) params.hidden = 1;
              height = -1;
              if (row.hpx) height = px2pt(row.hpx);
              else if (row.hpt) height = row.hpt;
              if (height > -1) {
                params.ht = height;
                params.customHeight = 1;
              }
              if (row.level) {
                params.outlineLevel = row.level;
              }
            }
            o3[o3.length] = writextag("row", r3.join(""), params);
          }
        }
        if (rows) for (; R2 < rows.length; ++R2) {
          if (rows && rows[R2]) {
            params = { r: R2 + 1 };
            row = rows[R2];
            if (row.hidden) params.hidden = 1;
            height = -1;
            if (row.hpx) height = px2pt(row.hpx);
            else if (row.hpt) height = row.hpt;
            if (height > -1) {
              params.ht = height;
              params.customHeight = 1;
            }
            if (row.level) {
              params.outlineLevel = row.level;
            }
            o3[o3.length] = writextag("row", "", params);
          }
        }
        return o3.join("");
      }
      function write_ws_xml(idx, opts, wb, rels) {
        var o3 = [XML_HEADER, writextag("worksheet", null, {
          "xmlns": XMLNS_main[0],
          "xmlns:r": XMLNS.r
        })];
        var s3 = wb.SheetNames[idx], sidx = 0, rdata = "";
        var ws = wb.Sheets[s3];
        if (ws == null) ws = {};
        var ref = ws["!ref"] || "A1";
        var range = safe_decode_range(ref);
        if (range.e.c > 16383 || range.e.r > 1048575) {
          if (opts.WTF) throw new Error("Range " + ref + " exceeds format limit A1:XFD1048576");
          range.e.c = Math.min(range.e.c, 16383);
          range.e.r = Math.min(range.e.c, 1048575);
          ref = encode_range(range);
        }
        if (!rels) rels = {};
        ws["!comments"] = [];
        var _drawing = [];
        write_ws_xml_sheetpr(ws, wb, idx, opts, o3);
        o3[o3.length] = writextag("dimension", null, { "ref": ref });
        o3[o3.length] = write_ws_xml_sheetviews(ws, opts, idx, wb);
        if (opts.sheetFormat) o3[o3.length] = writextag("sheetFormatPr", null, {
          defaultRowHeight: opts.sheetFormat.defaultRowHeight || "16",
          baseColWidth: opts.sheetFormat.baseColWidth || "10",
          outlineLevelRow: opts.sheetFormat.outlineLevelRow || "7"
        });
        if (ws["!cols"] != null && ws["!cols"].length > 0) o3[o3.length] = write_ws_xml_cols(ws, ws["!cols"]);
        o3[sidx = o3.length] = "<sheetData/>";
        ws["!links"] = [];
        if (ws["!ref"] != null) {
          rdata = write_ws_xml_data(ws, opts, idx, wb, rels);
          if (rdata.length > 0) o3[o3.length] = rdata;
        }
        if (o3.length > sidx + 1) {
          o3[o3.length] = "</sheetData>";
          o3[sidx] = o3[sidx].replace("/>", ">");
        }
        if (ws["!protect"]) o3[o3.length] = write_ws_xml_protection(ws["!protect"]);
        if (ws["!autofilter"] != null) o3[o3.length] = write_ws_xml_autofilter(ws["!autofilter"], ws, wb, idx);
        if (ws["!merges"] != null && ws["!merges"].length > 0) o3[o3.length] = write_ws_xml_merges(ws["!merges"]);
        var relc = -1, rel, rId = -1;
        if (ws["!links"].length > 0) {
          o3[o3.length] = "<hyperlinks>";
          ws["!links"].forEach(function(l2) {
            if (!l2[1].Target) return;
            rel = { "ref": l2[0] };
            if (l2[1].Target.charAt(0) != "#") {
              rId = add_rels(rels, -1, escapexml(l2[1].Target).replace(/#.*$/, ""), RELS.HLINK);
              rel["r:id"] = "rId" + rId;
            }
            if ((relc = l2[1].Target.indexOf("#")) > -1) rel.location = escapexml(l2[1].Target.slice(relc + 1));
            if (l2[1].Tooltip) rel.tooltip = escapexml(l2[1].Tooltip);
            o3[o3.length] = writextag("hyperlink", null, rel);
          });
          o3[o3.length] = "</hyperlinks>";
        }
        delete ws["!links"];
        if (ws["!margins"] != null) o3[o3.length] = write_ws_xml_margins(ws["!margins"]);
        if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) o3[o3.length] = writetag("ignoredErrors", writextag("ignoredError", null, { numberStoredAsText: 1, sqref: ref }));
        if (_drawing.length > 0) {
          rId = add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
          o3[o3.length] = writextag("drawing", null, { "r:id": "rId" + rId });
          ws["!drawing"] = _drawing;
        }
        if (ws["!comments"].length > 0) {
          rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
          o3[o3.length] = writextag("legacyDrawing", null, { "r:id": "rId" + rId });
          ws["!legacy"] = rId;
        }
        if (o3.length > 1) {
          o3[o3.length] = "</worksheet>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      function parse_BrtRowHdr(data, length) {
        var z4 = {};
        var tgt = data.l + length;
        z4.r = data.read_shift(4);
        data.l += 4;
        var miyRw = data.read_shift(2);
        data.l += 1;
        var flags = data.read_shift(1);
        data.l = tgt;
        if (flags & 7) z4.level = flags & 7;
        if (flags & 16) z4.hidden = true;
        if (flags & 32) z4.hpt = miyRw / 20;
        return z4;
      }
      function write_BrtRowHdr(R2, range, ws) {
        var o3 = new_buf(17 + 8 * 16);
        var row = (ws["!rows"] || [])[R2] || {};
        o3.write_shift(4, R2);
        o3.write_shift(4, 0);
        var miyRw = 320;
        if (row.hpx) miyRw = px2pt(row.hpx) * 20;
        else if (row.hpt) miyRw = row.hpt * 20;
        o3.write_shift(2, miyRw);
        o3.write_shift(1, 0);
        var flags = 0;
        if (row.level) flags |= row.level;
        if (row.hidden) flags |= 16;
        if (row.hpx || row.hpt) flags |= 32;
        o3.write_shift(1, flags);
        o3.write_shift(1, 0);
        var ncolspan = 0, lcs = o3.l;
        o3.l += 4;
        var caddr = { r: R2, c: 0 };
        for (var i3 = 0; i3 < 16; ++i3) {
          if (range.s.c > i3 + 1 << 10 || range.e.c < i3 << 10) continue;
          var first = -1, last = -1;
          for (var j3 = i3 << 10; j3 < i3 + 1 << 10; ++j3) {
            caddr.c = j3;
            var cell = Array.isArray(ws) ? (ws[caddr.r] || [])[caddr.c] : ws[encode_cell(caddr)];
            if (cell) {
              if (first < 0) first = j3;
              last = j3;
            }
          }
          if (first < 0) continue;
          ++ncolspan;
          o3.write_shift(4, first);
          o3.write_shift(4, last);
        }
        var l2 = o3.l;
        o3.l = lcs;
        o3.write_shift(4, ncolspan);
        o3.l = l2;
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function write_row_header(ba2, ws, range, R2) {
        var o3 = write_BrtRowHdr(R2, range, ws);
        if (o3.length > 17 || (ws["!rows"] || [])[R2]) write_record(ba2, 0, o3);
      }
      var parse_BrtWsDim = parse_UncheckedRfX;
      var write_BrtWsDim = write_UncheckedRfX;
      function parse_BrtWsFmtInfo() {
      }
      function parse_BrtWsProp(data, length) {
        var z4 = {};
        var f2 = data[data.l];
        ++data.l;
        z4.above = !(f2 & 64);
        z4.left = !(f2 & 128);
        data.l += 18;
        z4.name = parse_XLSBCodeName(data, length - 19);
        return z4;
      }
      function write_BrtWsProp(str, outl, o3) {
        if (o3 == null) o3 = new_buf(84 + 4 * str.length);
        var f2 = 192;
        if (outl) {
          if (outl.above) f2 &= ~64;
          if (outl.left) f2 &= ~128;
        }
        o3.write_shift(1, f2);
        for (var i3 = 1; i3 < 3; ++i3) o3.write_shift(1, 0);
        write_BrtColor({ auto: 1 }, o3);
        o3.write_shift(-4, -1);
        o3.write_shift(-4, -1);
        write_XLSBCodeName(str, o3);
        return o3.slice(0, o3.l);
      }
      function parse_BrtCellBlank(data) {
        var cell = parse_XLSBCell(data);
        return [cell];
      }
      function write_BrtCellBlank(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(8);
        return write_XLSBCell(ncell, o3);
      }
      function parse_BrtShortBlank(data) {
        var cell = parse_XLSBShortCell(data);
        return [cell];
      }
      function write_BrtShortBlank(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(4);
        return write_XLSBShortCell(ncell, o3);
      }
      function parse_BrtCellBool(data) {
        var cell = parse_XLSBCell(data);
        var fBool = data.read_shift(1);
        return [cell, fBool, "b"];
      }
      function write_BrtCellBool(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(9);
        write_XLSBCell(ncell, o3);
        o3.write_shift(1, cell.v ? 1 : 0);
        return o3;
      }
      function parse_BrtShortBool(data) {
        var cell = parse_XLSBShortCell(data);
        var fBool = data.read_shift(1);
        return [cell, fBool, "b"];
      }
      function write_BrtShortBool(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(5);
        write_XLSBShortCell(ncell, o3);
        o3.write_shift(1, cell.v ? 1 : 0);
        return o3;
      }
      function parse_BrtCellError(data) {
        var cell = parse_XLSBCell(data);
        var bError = data.read_shift(1);
        return [cell, bError, "e"];
      }
      function write_BrtCellError(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(9);
        write_XLSBCell(ncell, o3);
        o3.write_shift(1, cell.v);
        return o3;
      }
      function parse_BrtShortError(data) {
        var cell = parse_XLSBShortCell(data);
        var bError = data.read_shift(1);
        return [cell, bError, "e"];
      }
      function write_BrtShortError(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(8);
        write_XLSBShortCell(ncell, o3);
        o3.write_shift(1, cell.v);
        o3.write_shift(2, 0);
        o3.write_shift(1, 0);
        return o3;
      }
      function parse_BrtCellIsst(data) {
        var cell = parse_XLSBCell(data);
        var isst = data.read_shift(4);
        return [cell, isst, "s"];
      }
      function write_BrtCellIsst(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(12);
        write_XLSBCell(ncell, o3);
        o3.write_shift(4, ncell.v);
        return o3;
      }
      function parse_BrtShortIsst(data) {
        var cell = parse_XLSBShortCell(data);
        var isst = data.read_shift(4);
        return [cell, isst, "s"];
      }
      function write_BrtShortIsst(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(8);
        write_XLSBShortCell(ncell, o3);
        o3.write_shift(4, ncell.v);
        return o3;
      }
      function parse_BrtCellReal(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_Xnum(data);
        return [cell, value, "n"];
      }
      function write_BrtCellReal(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(16);
        write_XLSBCell(ncell, o3);
        write_Xnum(cell.v, o3);
        return o3;
      }
      function parse_BrtShortReal(data) {
        var cell = parse_XLSBShortCell(data);
        var value = parse_Xnum(data);
        return [cell, value, "n"];
      }
      function write_BrtShortReal(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(12);
        write_XLSBShortCell(ncell, o3);
        write_Xnum(cell.v, o3);
        return o3;
      }
      function parse_BrtCellRk(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_RkNumber(data);
        return [cell, value, "n"];
      }
      function write_BrtCellRk(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(12);
        write_XLSBCell(ncell, o3);
        write_RkNumber(cell.v, o3);
        return o3;
      }
      function parse_BrtShortRk(data) {
        var cell = parse_XLSBShortCell(data);
        var value = parse_RkNumber(data);
        return [cell, value, "n"];
      }
      function write_BrtShortRk(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(8);
        write_XLSBShortCell(ncell, o3);
        write_RkNumber(cell.v, o3);
        return o3;
      }
      function parse_BrtCellRString(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_RichStr(data);
        return [cell, value, "is"];
      }
      function parse_BrtCellSt(data) {
        var cell = parse_XLSBCell(data);
        var value = parse_XLWideString(data);
        return [cell, value, "str"];
      }
      function write_BrtCellSt(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(12 + 4 * cell.v.length);
        write_XLSBCell(ncell, o3);
        write_XLWideString(cell.v, o3);
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function parse_BrtShortSt(data) {
        var cell = parse_XLSBShortCell(data);
        var value = parse_XLWideString(data);
        return [cell, value, "str"];
      }
      function write_BrtShortSt(cell, ncell, o3) {
        if (o3 == null) o3 = new_buf(8 + 4 * cell.v.length);
        write_XLSBShortCell(ncell, o3);
        write_XLWideString(cell.v, o3);
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function parse_BrtFmlaBool(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = data.read_shift(1);
        var o3 = [cell, value, "b"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o3[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else data.l = end;
        return o3;
      }
      function parse_BrtFmlaError(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = data.read_shift(1);
        var o3 = [cell, value, "e"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o3[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else data.l = end;
        return o3;
      }
      function parse_BrtFmlaNum(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = parse_Xnum(data);
        var o3 = [cell, value, "n"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o3[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else data.l = end;
        return o3;
      }
      function parse_BrtFmlaString(data, length, opts) {
        var end = data.l + length;
        var cell = parse_XLSBCell(data);
        cell.r = opts["!row"];
        var value = parse_XLWideString(data);
        var o3 = [cell, value, "str"];
        if (opts.cellFormula) {
          data.l += 2;
          var formula = parse_XLSBCellParsedFormula(data, end - data.l, opts);
          o3[3] = stringify_formula(formula, null, cell, opts.supbooks, opts);
        } else data.l = end;
        return o3;
      }
      var parse_BrtMergeCell = parse_UncheckedRfX;
      var write_BrtMergeCell = write_UncheckedRfX;
      function write_BrtBeginMergeCells(cnt, o3) {
        if (o3 == null) o3 = new_buf(4);
        o3.write_shift(4, cnt);
        return o3;
      }
      function parse_BrtHLink(data, length) {
        var end = data.l + length;
        var rfx = parse_UncheckedRfX(data, 16);
        var relId = parse_XLNullableWideString(data);
        var loc = parse_XLWideString(data);
        var tooltip = parse_XLWideString(data);
        var display = parse_XLWideString(data);
        data.l = end;
        var o3 = { rfx, relId, loc, display };
        if (tooltip) o3.Tooltip = tooltip;
        return o3;
      }
      function write_BrtHLink(l2, rId) {
        var o3 = new_buf(50 + 4 * (l2[1].Target.length + (l2[1].Tooltip || "").length));
        write_UncheckedRfX({ s: decode_cell(l2[0]), e: decode_cell(l2[0]) }, o3);
        write_RelID("rId" + rId, o3);
        var locidx = l2[1].Target.indexOf("#");
        var loc = locidx == -1 ? "" : l2[1].Target.slice(locidx + 1);
        write_XLWideString(loc || "", o3);
        write_XLWideString(l2[1].Tooltip || "", o3);
        write_XLWideString("", o3);
        return o3.slice(0, o3.l);
      }
      function parse_BrtPane() {
      }
      function parse_BrtArrFmla(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_RfX(data, 16);
        var fAlwaysCalc = data.read_shift(1);
        var o3 = [rfx];
        o3[2] = fAlwaysCalc;
        if (opts.cellFormula) {
          var formula = parse_XLSBArrayParsedFormula(data, end - data.l, opts);
          o3[1] = formula;
        } else data.l = end;
        return o3;
      }
      function parse_BrtShrFmla(data, length, opts) {
        var end = data.l + length;
        var rfx = parse_UncheckedRfX(data, 16);
        var o3 = [rfx];
        if (opts.cellFormula) {
          var formula = parse_XLSBSharedParsedFormula(data, end - data.l, opts);
          o3[1] = formula;
          data.l = end;
        } else data.l = end;
        return o3;
      }
      function write_BrtColInfo(C2, col, o3) {
        if (o3 == null) o3 = new_buf(18);
        var p3 = col_obj_w(C2, col);
        o3.write_shift(-4, C2);
        o3.write_shift(-4, C2);
        o3.write_shift(4, (p3.width || 10) * 256);
        o3.write_shift(
          4,
          0
          /*ixfe*/
        );
        var flags = 0;
        if (col.hidden) flags |= 1;
        if (typeof p3.width == "number") flags |= 2;
        if (col.level) flags |= col.level << 8;
        o3.write_shift(2, flags);
        return o3;
      }
      var BrtMarginKeys = ["left", "right", "top", "bottom", "header", "footer"];
      function parse_BrtMargins(data) {
        var margins = {};
        BrtMarginKeys.forEach(function(k3) {
          margins[k3] = parse_Xnum(data, 8);
        });
        return margins;
      }
      function write_BrtMargins(margins, o3) {
        if (o3 == null) o3 = new_buf(6 * 8);
        default_margins(margins);
        BrtMarginKeys.forEach(function(k3) {
          write_Xnum(margins[k3], o3);
        });
        return o3;
      }
      function parse_BrtBeginWsView(data) {
        var f2 = data.read_shift(2);
        data.l += 28;
        return { RTL: f2 & 32 };
      }
      function write_BrtBeginWsView(ws, Workbook, o3) {
        if (o3 == null) o3 = new_buf(30);
        var f2 = 924;
        if ((((Workbook || {}).Views || [])[0] || {}).RTL) f2 |= 32;
        o3.write_shift(2, f2);
        o3.write_shift(4, 0);
        o3.write_shift(4, 0);
        o3.write_shift(4, 0);
        o3.write_shift(1, 0);
        o3.write_shift(1, 0);
        o3.write_shift(2, 0);
        o3.write_shift(2, 100);
        o3.write_shift(2, 0);
        o3.write_shift(2, 0);
        o3.write_shift(2, 0);
        o3.write_shift(4, 0);
        return o3;
      }
      function write_BrtCellIgnoreEC(ref) {
        var o3 = new_buf(24);
        o3.write_shift(4, 4);
        o3.write_shift(4, 1);
        write_UncheckedRfX(ref, o3);
        return o3;
      }
      function write_BrtSheetProtection(sp, o3) {
        if (o3 == null) o3 = new_buf(16 * 4 + 2);
        o3.write_shift(2, sp.password ? crypto_CreatePasswordVerifier_Method1(sp.password) : 0);
        o3.write_shift(4, 1);
        [
          ["objects", false],
          // fObjects
          ["scenarios", false],
          // fScenarios
          ["formatCells", true],
          // fFormatCells
          ["formatColumns", true],
          // fFormatColumns
          ["formatRows", true],
          // fFormatRows
          ["insertColumns", true],
          // fInsertColumns
          ["insertRows", true],
          // fInsertRows
          ["insertHyperlinks", true],
          // fInsertHyperlinks
          ["deleteColumns", true],
          // fDeleteColumns
          ["deleteRows", true],
          // fDeleteRows
          ["selectLockedCells", false],
          // fSelLockedCells
          ["sort", true],
          // fSort
          ["autoFilter", true],
          // fAutoFilter
          ["pivotTables", true],
          // fPivotTables
          ["selectUnlockedCells", false]
          // fSelUnlockedCells
        ].forEach(function(n3) {
          if (n3[1]) o3.write_shift(4, sp[n3[0]] != null && !sp[n3[0]] ? 1 : 0);
          else o3.write_shift(4, sp[n3[0]] != null && sp[n3[0]] ? 0 : 1);
        });
        return o3;
      }
      function parse_BrtDVal() {
      }
      function parse_BrtDVal14() {
      }
      function parse_ws_bin(data, _opts, idx, rels, wb, themes, styles) {
        if (!data) return data;
        var opts = _opts || {};
        if (!rels) rels = { "!id": {} };
        if (DENSE != null && opts.dense == null) opts.dense = DENSE;
        var s3 = opts.dense ? [] : {};
        var ref;
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        var state = [];
        var pass = false, end = false;
        var row, p3, cf, R2, C2, addr, sstr, rr2, cell;
        var merges = [];
        opts.biff = 12;
        opts["!row"] = 0;
        var ai2 = 0, af = false;
        var arrayf = [];
        var sharedf = {};
        var supbooks = opts.supbooks || wb.supbooks || [[]];
        supbooks.sharedf = sharedf;
        supbooks.arrayf = arrayf;
        supbooks.SheetNames = wb.SheetNames || wb.Sheets.map(function(x3) {
          return x3.name;
        });
        if (!opts.supbooks) {
          opts.supbooks = supbooks;
          if (wb.Names) for (var i3 = 0; i3 < wb.Names.length; ++i3) supbooks[0][i3 + 1] = wb.Names[i3];
        }
        var colinfo = [], rowinfo = [];
        var seencol = false;
        XLSBRecordEnum[16] = { n: "BrtShortReal", f: parse_BrtShortReal };
        var cm, vm;
        recordhopper(data, function ws_parse(val, RR, RT) {
          if (end) return;
          switch (RT) {
            case 148:
              ref = val;
              break;
            case 0:
              row = val;
              if (opts.sheetRows && opts.sheetRows <= row.r) end = true;
              rr2 = encode_row(R2 = row.r);
              opts["!row"] = row.r;
              if (val.hidden || val.hpt || val.level != null) {
                if (val.hpt) val.hpx = pt2px(val.hpt);
                rowinfo[val.r] = val;
              }
              break;
            case 2:
            /* 'BrtCellRk' */
            case 3:
            /* 'BrtCellError' */
            case 4:
            /* 'BrtCellBool' */
            case 5:
            /* 'BrtCellReal' */
            case 6:
            /* 'BrtCellSt' */
            case 7:
            /* 'BrtCellIsst' */
            case 8:
            /* 'BrtFmlaString' */
            case 9:
            /* 'BrtFmlaNum' */
            case 10:
            /* 'BrtFmlaBool' */
            case 11:
            /* 'BrtFmlaError' */
            case 13:
            /* 'BrtShortRk' */
            case 14:
            /* 'BrtShortError' */
            case 15:
            /* 'BrtShortBool' */
            case 16:
            /* 'BrtShortReal' */
            case 17:
            /* 'BrtShortSt' */
            case 18:
            /* 'BrtShortIsst' */
            case 62:
              p3 = { t: val[2] };
              switch (val[2]) {
                case "n":
                  p3.v = val[1];
                  break;
                case "s":
                  sstr = strs[val[1]];
                  p3.v = sstr.t;
                  p3.r = sstr.r;
                  break;
                case "b":
                  p3.v = val[1] ? true : false;
                  break;
                case "e":
                  p3.v = val[1];
                  if (opts.cellText !== false) p3.w = BErr[p3.v];
                  break;
                case "str":
                  p3.t = "s";
                  p3.v = val[1];
                  break;
                case "is":
                  p3.t = "s";
                  p3.v = val[1].t;
                  break;
              }
              if (cf = styles.CellXf[val[0].iStyleRef]) safe_format(p3, cf.numFmtId, null, opts, themes, styles);
              C2 = val[0].c == -1 ? C2 + 1 : val[0].c;
              if (opts.dense) {
                if (!s3[R2]) s3[R2] = [];
                s3[R2][C2] = p3;
              } else s3[encode_col(C2) + rr2] = p3;
              if (opts.cellFormula) {
                af = false;
                for (ai2 = 0; ai2 < arrayf.length; ++ai2) {
                  var aii = arrayf[ai2];
                  if (row.r >= aii[0].s.r && row.r <= aii[0].e.r) {
                    if (C2 >= aii[0].s.c && C2 <= aii[0].e.c) {
                      p3.F = encode_range(aii[0]);
                      af = true;
                    }
                  }
                }
                if (!af && val.length > 3) p3.f = val[3];
              }
              if (refguess.s.r > row.r) refguess.s.r = row.r;
              if (refguess.s.c > C2) refguess.s.c = C2;
              if (refguess.e.r < row.r) refguess.e.r = row.r;
              if (refguess.e.c < C2) refguess.e.c = C2;
              if (opts.cellDates && cf && p3.t == "n" && fmt_is_date(table_fmt[cf.numFmtId])) {
                var _d = SSF_parse_date_code(p3.v);
                if (_d) {
                  p3.t = "d";
                  p3.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
                }
              }
              if (cm) {
                if (cm.type == "XLDAPR") p3.D = true;
                cm = void 0;
              }
              if (vm) vm = void 0;
              break;
            case 1:
            /* 'BrtCellBlank' */
            case 12:
              if (!opts.sheetStubs || pass) break;
              p3 = { t: "z", v: void 0 };
              C2 = val[0].c == -1 ? C2 + 1 : val[0].c;
              if (opts.dense) {
                if (!s3[R2]) s3[R2] = [];
                s3[R2][C2] = p3;
              } else s3[encode_col(C2) + rr2] = p3;
              if (refguess.s.r > row.r) refguess.s.r = row.r;
              if (refguess.s.c > C2) refguess.s.c = C2;
              if (refguess.e.r < row.r) refguess.e.r = row.r;
              if (refguess.e.c < C2) refguess.e.c = C2;
              if (cm) {
                if (cm.type == "XLDAPR") p3.D = true;
                cm = void 0;
              }
              if (vm) vm = void 0;
              break;
            case 176:
              merges.push(val);
              break;
            case 49:
              {
                cm = ((opts.xlmeta || {}).Cell || [])[val - 1];
              }
              break;
            case 494:
              var rel = rels["!id"][val.relId];
              if (rel) {
                val.Target = rel.Target;
                if (val.loc) val.Target += "#" + val.loc;
                val.Rel = rel;
              } else if (val.relId == "") {
                val.Target = "#" + val.loc;
              }
              for (R2 = val.rfx.s.r; R2 <= val.rfx.e.r; ++R2) for (C2 = val.rfx.s.c; C2 <= val.rfx.e.c; ++C2) {
                if (opts.dense) {
                  if (!s3[R2]) s3[R2] = [];
                  if (!s3[R2][C2]) s3[R2][C2] = { t: "z", v: void 0 };
                  s3[R2][C2].l = val;
                } else {
                  addr = encode_cell({ c: C2, r: R2 });
                  if (!s3[addr]) s3[addr] = { t: "z", v: void 0 };
                  s3[addr].l = val;
                }
              }
              break;
            case 426:
              if (!opts.cellFormula) break;
              arrayf.push(val);
              cell = opts.dense ? s3[R2][C2] : s3[encode_col(C2) + rr2];
              cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C2 }, supbooks, opts);
              cell.F = encode_range(val[0]);
              break;
            case 427:
              if (!opts.cellFormula) break;
              sharedf[encode_cell(val[0].s)] = val[1];
              cell = opts.dense ? s3[R2][C2] : s3[encode_col(C2) + rr2];
              cell.f = stringify_formula(val[1], refguess, { r: row.r, c: C2 }, supbooks, opts);
              break;
            /* identical to 'ColInfo' in XLS */
            case 60:
              if (!opts.cellStyles) break;
              while (val.e >= val.s) {
                colinfo[val.e--] = { width: val.w / 256, hidden: !!(val.flags & 1), level: val.level };
                if (!seencol) {
                  seencol = true;
                  find_mdw_colw(val.w / 256);
                }
                process_col(colinfo[val.e + 1]);
              }
              break;
            case 161:
              s3["!autofilter"] = { ref: encode_range(val) };
              break;
            case 476:
              s3["!margins"] = val;
              break;
            case 147:
              if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
              if (val.name) wb.Sheets[idx].CodeName = val.name;
              if (val.above || val.left) s3["!outline"] = { above: val.above, left: val.left };
              break;
            case 137:
              if (!wb.Views) wb.Views = [{}];
              if (!wb.Views[0]) wb.Views[0] = {};
              if (val.RTL) wb.Views[0].RTL = true;
              break;
            case 485:
              break;
            case 64:
            /* 'BrtDVal' */
            case 1053:
              break;
            case 151:
              break;
            case 152:
            /* 'BrtSel' */
            case 175:
            /* 'BrtAFilterDateGroupItem' */
            case 644:
            /* 'BrtActiveX' */
            case 625:
            /* 'BrtBigName' */
            case 562:
            /* 'BrtBkHim' */
            case 396:
            /* 'BrtBrk' */
            case 1112:
            /* 'BrtCFIcon' */
            case 1146:
            /* 'BrtCFRuleExt' */
            case 471:
            /* 'BrtCFVO' */
            case 1050:
            /* 'BrtCFVO14' */
            case 649:
            /* 'BrtCellIgnoreEC' */
            case 1105:
            /* 'BrtCellIgnoreEC14' */
            case 589:
            /* 'BrtCellSmartTagProperty' */
            case 607:
            /* 'BrtCellWatch' */
            case 564:
            /* 'BrtColor' */
            case 1055:
            /* 'BrtColor14' */
            case 168:
            /* 'BrtColorFilter' */
            case 174:
            /* 'BrtCustomFilter' */
            case 1180:
            /* 'BrtCustomFilter14' */
            case 499:
            /* 'BrtDRef' */
            case 507:
            /* 'BrtDXF' */
            case 550:
            /* 'BrtDrawing' */
            case 171:
            /* 'BrtDynamicFilter' */
            case 167:
            /* 'BrtFilter' */
            case 1177:
            /* 'BrtFilter14' */
            case 169:
            /* 'BrtIconFilter' */
            case 1181:
            /* 'BrtIconFilter14' */
            case 551:
            /* 'BrtLegacyDrawing' */
            case 552:
            /* 'BrtLegacyDrawingHF' */
            case 661:
            /* 'BrtListPart' */
            case 639:
            /* 'BrtOleObject' */
            case 478:
            /* 'BrtPageSetup' */
            case 537:
            /* 'BrtPhoneticInfo' */
            case 477:
            /* 'BrtPrintOptions' */
            case 536:
            /* 'BrtRangeProtection' */
            case 1103:
            /* 'BrtRangeProtection14' */
            case 680:
            /* 'BrtRangeProtectionIso' */
            case 1104:
            /* 'BrtRangeProtectionIso14' */
            case 1024:
            /* 'BrtRwDescent' */
            case 663:
            /* 'BrtSheetCalcProp' */
            case 535:
            /* 'BrtSheetProtection' */
            case 678:
            /* 'BrtSheetProtectionIso' */
            case 504:
            /* 'BrtSlc' */
            case 1043:
            /* 'BrtSparkline' */
            case 428:
            /* 'BrtTable' */
            case 170:
            /* 'BrtTop10Filter' */
            case 3072:
            /* 'BrtUid' */
            case 50:
            /* 'BrtValueMeta' */
            case 2070:
            /* 'BrtWebExtension' */
            case 1045:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              state.push(RT);
              pass = true;
              break;
            case 38:
              state.pop();
              pass = false;
              break;
            default:
              if (RR.T) {
              } else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        }, opts);
        delete opts.supbooks;
        delete opts["!row"];
        if (!s3["!ref"] && (refguess.s.r < 2e6 || ref && (ref.e.r > 0 || ref.e.c > 0 || ref.s.r > 0 || ref.s.c > 0))) s3["!ref"] = encode_range(ref || refguess);
        if (opts.sheetRows && s3["!ref"]) {
          var tmpref = safe_decode_range(s3["!ref"]);
          if (opts.sheetRows <= +tmpref.e.r) {
            tmpref.e.r = opts.sheetRows - 1;
            if (tmpref.e.r > refguess.e.r) tmpref.e.r = refguess.e.r;
            if (tmpref.e.r < tmpref.s.r) tmpref.s.r = tmpref.e.r;
            if (tmpref.e.c > refguess.e.c) tmpref.e.c = refguess.e.c;
            if (tmpref.e.c < tmpref.s.c) tmpref.s.c = tmpref.e.c;
            s3["!fullref"] = s3["!ref"];
            s3["!ref"] = encode_range(tmpref);
          }
        }
        if (merges.length > 0) s3["!merges"] = merges;
        if (colinfo.length > 0) s3["!cols"] = colinfo;
        if (rowinfo.length > 0) s3["!rows"] = rowinfo;
        return s3;
      }
      function write_ws_bin_cell(ba2, cell, R2, C2, opts, ws, last_seen) {
        if (cell.v === void 0) return false;
        var vv = "";
        switch (cell.t) {
          case "b":
            vv = cell.v ? "1" : "0";
            break;
          case "d":
            cell = dup(cell);
            cell.z = cell.z || table_fmt[14];
            cell.v = datenum(parseDate(cell.v));
            cell.t = "n";
            break;
          /* falls through */
          case "n":
          case "e":
            vv = "" + cell.v;
            break;
          default:
            vv = cell.v;
            break;
        }
        var o3 = { r: R2, c: C2 };
        o3.s = get_cell_style(opts.cellXfs, cell, opts);
        if (cell.l) ws["!links"].push([encode_cell(o3), cell.l]);
        if (cell.c) ws["!comments"].push([encode_cell(o3), cell.c]);
        switch (cell.t) {
          case "s":
          case "str":
            if (opts.bookSST) {
              vv = get_sst_id(opts.Strings, cell.v, opts.revStrings);
              o3.t = "s";
              o3.v = vv;
              if (last_seen) write_record(ba2, 18, write_BrtShortIsst(cell, o3));
              else write_record(ba2, 7, write_BrtCellIsst(cell, o3));
            } else {
              o3.t = "str";
              if (last_seen) write_record(ba2, 17, write_BrtShortSt(cell, o3));
              else write_record(ba2, 6, write_BrtCellSt(cell, o3));
            }
            return true;
          case "n":
            if (cell.v == (cell.v | 0) && cell.v > -1e3 && cell.v < 1e3) {
              if (last_seen) write_record(ba2, 13, write_BrtShortRk(cell, o3));
              else write_record(ba2, 2, write_BrtCellRk(cell, o3));
            } else {
              if (last_seen) write_record(ba2, 16, write_BrtShortReal(cell, o3));
              else write_record(ba2, 5, write_BrtCellReal(cell, o3));
            }
            return true;
          case "b":
            o3.t = "b";
            if (last_seen) write_record(ba2, 15, write_BrtShortBool(cell, o3));
            else write_record(ba2, 4, write_BrtCellBool(cell, o3));
            return true;
          case "e":
            o3.t = "e";
            if (last_seen) write_record(ba2, 14, write_BrtShortError(cell, o3));
            else write_record(ba2, 3, write_BrtCellError(cell, o3));
            return true;
        }
        if (last_seen) write_record(ba2, 12, write_BrtShortBlank(cell, o3));
        else write_record(ba2, 1, write_BrtCellBlank(cell, o3));
        return true;
      }
      function write_CELLTABLE(ba2, ws, idx, opts) {
        var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr2 = "", cols = [];
        write_record(
          ba2,
          145
          /* BrtBeginSheetData */
        );
        var dense = Array.isArray(ws);
        var cap = range.e.r;
        if (ws["!rows"]) cap = Math.max(range.e.r, ws["!rows"].length - 1);
        for (var R2 = range.s.r; R2 <= cap; ++R2) {
          rr2 = encode_row(R2);
          write_row_header(ba2, ws, range, R2);
          var last_seen = false;
          if (R2 <= range.e.r) for (var C2 = range.s.c; C2 <= range.e.c; ++C2) {
            if (R2 === range.s.r) cols[C2] = encode_col(C2);
            ref = cols[C2] + rr2;
            var cell = dense ? (ws[R2] || [])[C2] : ws[ref];
            if (!cell) {
              last_seen = false;
              continue;
            }
            last_seen = write_ws_bin_cell(ba2, cell, R2, C2, opts, ws, last_seen);
          }
        }
        write_record(
          ba2,
          146
          /* BrtEndSheetData */
        );
      }
      function write_MERGECELLS(ba2, ws) {
        if (!ws || !ws["!merges"]) return;
        write_record(ba2, 177, write_BrtBeginMergeCells(ws["!merges"].length));
        ws["!merges"].forEach(function(m3) {
          write_record(ba2, 176, write_BrtMergeCell(m3));
        });
        write_record(
          ba2,
          178
          /* BrtEndMergeCells */
        );
      }
      function write_COLINFOS(ba2, ws) {
        if (!ws || !ws["!cols"]) return;
        write_record(
          ba2,
          390
          /* BrtBeginColInfos */
        );
        ws["!cols"].forEach(function(m3, i3) {
          if (m3) write_record(ba2, 60, write_BrtColInfo(i3, m3));
        });
        write_record(
          ba2,
          391
          /* BrtEndColInfos */
        );
      }
      function write_IGNOREECS(ba2, ws) {
        if (!ws || !ws["!ref"]) return;
        write_record(
          ba2,
          648
          /* BrtBeginCellIgnoreECs */
        );
        write_record(ba2, 649, write_BrtCellIgnoreEC(safe_decode_range(ws["!ref"])));
        write_record(
          ba2,
          650
          /* BrtEndCellIgnoreECs */
        );
      }
      function write_HLINKS(ba2, ws, rels) {
        ws["!links"].forEach(function(l2) {
          if (!l2[1].Target) return;
          var rId = add_rels(rels, -1, l2[1].Target.replace(/#.*$/, ""), RELS.HLINK);
          write_record(ba2, 494, write_BrtHLink(l2, rId));
        });
        delete ws["!links"];
      }
      function write_LEGACYDRAWING(ba2, ws, idx, rels) {
        if (ws["!comments"].length > 0) {
          var rId = add_rels(rels, -1, "../drawings/vmlDrawing" + (idx + 1) + ".vml", RELS.VML);
          write_record(ba2, 551, write_RelID("rId" + rId));
          ws["!legacy"] = rId;
        }
      }
      function write_AUTOFILTER(ba2, ws, wb, idx) {
        if (!ws["!autofilter"]) return;
        var data = ws["!autofilter"];
        var ref = typeof data.ref === "string" ? data.ref : encode_range(data.ref);
        if (!wb.Workbook) wb.Workbook = { Sheets: [] };
        if (!wb.Workbook.Names) wb.Workbook.Names = [];
        var names = wb.Workbook.Names;
        var range = decode_range(ref);
        if (range.s.r == range.e.r) {
          range.e.r = decode_range(ws["!ref"]).e.r;
          ref = encode_range(range);
        }
        for (var i3 = 0; i3 < names.length; ++i3) {
          var name = names[i3];
          if (name.Name != "_xlnm._FilterDatabase") continue;
          if (name.Sheet != idx) continue;
          name.Ref = "'" + wb.SheetNames[idx] + "'!" + ref;
          break;
        }
        if (i3 == names.length) names.push({ Name: "_xlnm._FilterDatabase", Sheet: idx, Ref: "'" + wb.SheetNames[idx] + "'!" + ref });
        write_record(ba2, 161, write_UncheckedRfX(safe_decode_range(ref)));
        write_record(
          ba2,
          162
          /* BrtEndAFilter */
        );
      }
      function write_WSVIEWS2(ba2, ws, Workbook) {
        write_record(
          ba2,
          133
          /* BrtBeginWsViews */
        );
        {
          write_record(ba2, 137, write_BrtBeginWsView(ws, Workbook));
          write_record(
            ba2,
            138
            /* BrtEndWsView */
          );
        }
        write_record(
          ba2,
          134
          /* BrtEndWsViews */
        );
      }
      function write_WSFMTINFO() {
      }
      function write_SHEETPROTECT(ba2, ws) {
        if (!ws["!protect"]) return;
        write_record(ba2, 535, write_BrtSheetProtection(ws["!protect"]));
      }
      function write_ws_bin(idx, opts, wb, rels) {
        var ba2 = buf_array();
        var s3 = wb.SheetNames[idx], ws = wb.Sheets[s3] || {};
        var c3 = s3;
        try {
          if (wb && wb.Workbook) c3 = wb.Workbook.Sheets[idx].CodeName || c3;
        } catch (e3) {
        }
        var r3 = safe_decode_range(ws["!ref"] || "A1");
        if (r3.e.c > 16383 || r3.e.r > 1048575) {
          if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:XFD1048576");
          r3.e.c = Math.min(r3.e.c, 16383);
          r3.e.r = Math.min(r3.e.c, 1048575);
        }
        ws["!links"] = [];
        ws["!comments"] = [];
        write_record(
          ba2,
          129
          /* BrtBeginSheet */
        );
        if (wb.vbaraw || ws["!outline"]) write_record(ba2, 147, write_BrtWsProp(c3, ws["!outline"]));
        write_record(ba2, 148, write_BrtWsDim(r3));
        write_WSVIEWS2(ba2, ws, wb.Workbook);
        write_WSFMTINFO(ba2, ws);
        write_COLINFOS(ba2, ws, idx, opts, wb);
        write_CELLTABLE(ba2, ws, idx, opts, wb);
        write_SHEETPROTECT(ba2, ws);
        write_AUTOFILTER(ba2, ws, wb, idx);
        write_MERGECELLS(ba2, ws);
        write_HLINKS(ba2, ws, rels);
        if (ws["!margins"]) write_record(ba2, 476, write_BrtMargins(ws["!margins"]));
        if (!opts || opts.ignoreEC || opts.ignoreEC == void 0) write_IGNOREECS(ba2, ws);
        write_LEGACYDRAWING(ba2, ws, idx, rels);
        write_record(
          ba2,
          130
          /* BrtEndSheet */
        );
        return ba2.end();
      }
      function parse_Cache(data) {
        var col = [];
        var num = data.match(/^<c:numCache>/);
        var f2;
        (data.match(/<c:pt idx="(\d*)">(.*?)<\/c:pt>/mg) || []).forEach(function(pt2) {
          var q2 = pt2.match(/<c:pt idx="(\d*?)"><c:v>(.*)<\/c:v><\/c:pt>/);
          if (!q2) return;
          col[+q2[1]] = num ? +q2[2] : q2[2];
        });
        var nf = unescapexml((data.match(/<c:formatCode>([\s\S]*?)<\/c:formatCode>/) || ["", "General"])[1]);
        (data.match(/<c:f>(.*?)<\/c:f>/mg) || []).forEach(function(F2) {
          f2 = F2.replace(/<.*?>/g, "");
        });
        return [col, nf, f2];
      }
      function parse_chart(data, name, opts, rels, wb, csheet) {
        var cs = csheet || { "!type": "chart" };
        if (!data) return csheet;
        var C2 = 0, R2 = 0, col = "A";
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        (data.match(/<c:numCache>[\s\S]*?<\/c:numCache>/gm) || []).forEach(function(nc) {
          var cache = parse_Cache(nc);
          refguess.s.r = refguess.s.c = 0;
          refguess.e.c = C2;
          col = encode_col(C2);
          cache[0].forEach(function(n3, i3) {
            cs[col + encode_row(i3)] = { t: "n", v: n3, z: cache[1] };
            R2 = i3;
          });
          if (refguess.e.r < R2) refguess.e.r = R2;
          ++C2;
        });
        if (C2 > 0) cs["!ref"] = encode_range(refguess);
        return cs;
      }
      function parse_cs_xml(data, opts, idx, rels, wb) {
        if (!data) return data;
        if (!rels) rels = { "!id": {} };
        var s3 = { "!type": "chart", "!drawel": null, "!rel": "" };
        var m3;
        var sheetPr = data.match(sheetprregex);
        if (sheetPr) parse_ws_xml_sheetpr(sheetPr[0], s3, wb, idx);
        if (m3 = data.match(/drawing r:id="(.*?)"/)) s3["!rel"] = m3[1];
        if (rels["!id"][s3["!rel"]]) s3["!drawel"] = rels["!id"][s3["!rel"]];
        return s3;
      }
      function write_cs_xml(idx, opts, wb, rels) {
        var o3 = [XML_HEADER, writextag("chartsheet", null, {
          "xmlns": XMLNS_main[0],
          "xmlns:r": XMLNS.r
        })];
        o3[o3.length] = writextag("drawing", null, { "r:id": "rId1" });
        add_rels(rels, -1, "../drawings/drawing" + (idx + 1) + ".xml", RELS.DRAW);
        if (o3.length > 2) {
          o3[o3.length] = "</chartsheet>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      function parse_BrtCsProp(data, length) {
        data.l += 10;
        var name = parse_XLWideString(data, length - 10);
        return { name };
      }
      function parse_cs_bin(data, opts, idx, rels, wb) {
        if (!data) return data;
        if (!rels) rels = { "!id": {} };
        var s3 = { "!type": "chart", "!drawel": null, "!rel": "" };
        var state = [];
        var pass = false;
        recordhopper(data, function cs_parse(val, R2, RT) {
          switch (RT) {
            case 550:
              s3["!rel"] = val;
              break;
            case 651:
              if (!wb.Sheets[idx]) wb.Sheets[idx] = {};
              if (val.name) wb.Sheets[idx].CodeName = val.name;
              break;
            case 562:
            /* 'BrtBkHim' */
            case 652:
            /* 'BrtCsPageSetup' */
            case 669:
            /* 'BrtCsProtection' */
            case 679:
            /* 'BrtCsProtectionIso' */
            case 551:
            /* 'BrtLegacyDrawing' */
            case 552:
            /* 'BrtLegacyDrawingHF' */
            case 476:
            /* 'BrtMargins' */
            case 3072:
              break;
            case 35:
              pass = true;
              break;
            case 36:
              pass = false;
              break;
            case 37:
              state.push(RT);
              break;
            case 38:
              state.pop();
              break;
            default:
              if (R2.T > 0) state.push(RT);
              else if (R2.T < 0) state.pop();
              else if (!pass || opts.WTF) throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        }, opts);
        if (rels["!id"][s3["!rel"]]) s3["!drawel"] = rels["!id"][s3["!rel"]];
        return s3;
      }
      function write_cs_bin() {
        var ba2 = buf_array();
        write_record(
          ba2,
          129
          /* BrtBeginSheet */
        );
        write_record(
          ba2,
          130
          /* BrtEndSheet */
        );
        return ba2.end();
      }
      var WBPropsDef = [
        ["allowRefreshQuery", false, "bool"],
        ["autoCompressPictures", true, "bool"],
        ["backupFile", false, "bool"],
        ["checkCompatibility", false, "bool"],
        ["CodeName", ""],
        ["date1904", false, "bool"],
        ["defaultThemeVersion", 0, "int"],
        ["filterPrivacy", false, "bool"],
        ["hidePivotFieldList", false, "bool"],
        ["promptedSolutions", false, "bool"],
        ["publishItems", false, "bool"],
        ["refreshAllConnections", false, "bool"],
        ["saveExternalLinkValues", true, "bool"],
        ["showBorderUnselectedTables", true, "bool"],
        ["showInkAnnotation", true, "bool"],
        ["showObjects", "all"],
        ["showPivotChartFilter", false, "bool"],
        ["updateLinks", "userSet"]
      ];
      var WBViewDef = [
        ["activeTab", 0, "int"],
        ["autoFilterDateGrouping", true, "bool"],
        ["firstSheet", 0, "int"],
        ["minimized", false, "bool"],
        ["showHorizontalScroll", true, "bool"],
        ["showSheetTabs", true, "bool"],
        ["showVerticalScroll", true, "bool"],
        ["tabRatio", 600, "int"],
        ["visibility", "visible"]
        //window{Height,Width}, {x,y}Window
      ];
      var SheetDef = [
        //['state', 'visible']
      ];
      var CalcPrDef = [
        ["calcCompleted", "true"],
        ["calcMode", "auto"],
        ["calcOnSave", "true"],
        ["concurrentCalc", "true"],
        ["fullCalcOnLoad", "false"],
        ["fullPrecision", "true"],
        ["iterate", "false"],
        ["iterateCount", "100"],
        ["iterateDelta", "0.001"],
        ["refMode", "A1"]
      ];
      function push_defaults_array(target, defaults) {
        for (var j3 = 0; j3 != target.length; ++j3) {
          var w3 = target[j3];
          for (var i3 = 0; i3 != defaults.length; ++i3) {
            var z4 = defaults[i3];
            if (w3[z4[0]] == null) w3[z4[0]] = z4[1];
            else switch (z4[2]) {
              case "bool":
                if (typeof w3[z4[0]] == "string") w3[z4[0]] = parsexmlbool(w3[z4[0]]);
                break;
              case "int":
                if (typeof w3[z4[0]] == "string") w3[z4[0]] = parseInt(w3[z4[0]], 10);
                break;
            }
          }
        }
      }
      function push_defaults(target, defaults) {
        for (var i3 = 0; i3 != defaults.length; ++i3) {
          var z4 = defaults[i3];
          if (target[z4[0]] == null) target[z4[0]] = z4[1];
          else switch (z4[2]) {
            case "bool":
              if (typeof target[z4[0]] == "string") target[z4[0]] = parsexmlbool(target[z4[0]]);
              break;
            case "int":
              if (typeof target[z4[0]] == "string") target[z4[0]] = parseInt(target[z4[0]], 10);
              break;
          }
        }
      }
      function parse_wb_defaults(wb) {
        push_defaults(wb.WBProps, WBPropsDef);
        push_defaults(wb.CalcPr, CalcPrDef);
        push_defaults_array(wb.WBView, WBViewDef);
        push_defaults_array(wb.Sheets, SheetDef);
        _ssfopts.date1904 = parsexmlbool(wb.WBProps.date1904);
      }
      function safe1904(wb) {
        if (!wb.Workbook) return "false";
        if (!wb.Workbook.WBProps) return "false";
        return parsexmlbool(wb.Workbook.WBProps.date1904) ? "true" : "false";
      }
      var badchars = "][*?/\\".split("");
      function check_ws_name(n3, safe) {
        if (n3.length > 31) {
          if (safe) return false;
          throw new Error("Sheet names cannot exceed 31 chars");
        }
        var _good = true;
        badchars.forEach(function(c3) {
          if (n3.indexOf(c3) == -1) return;
          if (!safe) throw new Error("Sheet name cannot contain : \\ / ? * [ ]");
          _good = false;
        });
        return _good;
      }
      function check_wb_names(N2, S3, codes) {
        N2.forEach(function(n3, i3) {
          check_ws_name(n3);
          for (var j3 = 0; j3 < i3; ++j3) if (n3 == N2[j3]) throw new Error("Duplicate Sheet Name: " + n3);
          if (codes) {
            var cn = S3 && S3[i3] && S3[i3].CodeName || n3;
            if (cn.charCodeAt(0) == 95 && cn.length > 22) throw new Error("Bad Code Name: Worksheet" + cn);
          }
        });
      }
      function check_wb(wb) {
        if (!wb || !wb.SheetNames || !wb.Sheets) throw new Error("Invalid Workbook");
        if (!wb.SheetNames.length) throw new Error("Workbook is empty");
        var Sheets = wb.Workbook && wb.Workbook.Sheets || [];
        check_wb_names(wb.SheetNames, Sheets, !!wb.vbaraw);
        for (var i3 = 0; i3 < wb.SheetNames.length; ++i3) check_ws(wb.Sheets[wb.SheetNames[i3]], wb.SheetNames[i3], i3);
      }
      var wbnsregex = /<\w+:workbook/;
      function parse_wb_xml(data, opts) {
        if (!data) throw new Error("Could not find file");
        var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, Names: [], xmlns: "" };
        var pass = false, xmlns = "xmlns";
        var dname = {}, dnstart = 0;
        data.replace(tagregex, function xml_wb(x3, idx) {
          var y3 = parsexmltag(x3);
          switch (strip_ns(y3[0])) {
            case "<?xml":
              break;
            /* 18.2.27 workbook CT_Workbook 1 */
            case "<workbook":
              if (x3.match(wbnsregex)) xmlns = "xmlns" + x3.match(/<(\w+):/)[1];
              wb.xmlns = y3[xmlns];
              break;
            case "</workbook>":
              break;
            /* 18.2.13 fileVersion CT_FileVersion ? */
            case "<fileVersion":
              delete y3[0];
              wb.AppVersion = y3;
              break;
            case "<fileVersion/>":
            case "</fileVersion>":
              break;
            /* 18.2.12 fileSharing CT_FileSharing ? */
            case "<fileSharing":
              break;
            case "<fileSharing/>":
              break;
            /* 18.2.28 workbookPr CT_WorkbookPr ? */
            case "<workbookPr":
            case "<workbookPr/>":
              WBPropsDef.forEach(function(w3) {
                if (y3[w3[0]] == null) return;
                switch (w3[2]) {
                  case "bool":
                    wb.WBProps[w3[0]] = parsexmlbool(y3[w3[0]]);
                    break;
                  case "int":
                    wb.WBProps[w3[0]] = parseInt(y3[w3[0]], 10);
                    break;
                  default:
                    wb.WBProps[w3[0]] = y3[w3[0]];
                }
              });
              if (y3.codeName) wb.WBProps.CodeName = utf8read(y3.codeName);
              break;
            case "</workbookPr>":
              break;
            /* 18.2.29 workbookProtection CT_WorkbookProtection ? */
            case "<workbookProtection":
              break;
            case "<workbookProtection/>":
              break;
            /* 18.2.1  bookViews CT_BookViews ? */
            case "<bookViews":
            case "<bookViews>":
            case "</bookViews>":
              break;
            /* 18.2.30   workbookView CT_BookView + */
            case "<workbookView":
            case "<workbookView/>":
              delete y3[0];
              wb.WBView.push(y3);
              break;
            case "</workbookView>":
              break;
            /* 18.2.20 sheets CT_Sheets 1 */
            case "<sheets":
            case "<sheets>":
            case "</sheets>":
              break;
            // aggregate sheet
            /* 18.2.19   sheet CT_Sheet + */
            case "<sheet":
              switch (y3.state) {
                case "hidden":
                  y3.Hidden = 1;
                  break;
                case "veryHidden":
                  y3.Hidden = 2;
                  break;
                default:
                  y3.Hidden = 0;
              }
              delete y3.state;
              y3.name = unescapexml(utf8read(y3.name));
              delete y3[0];
              wb.Sheets.push(y3);
              break;
            case "</sheet>":
              break;
            /* 18.2.15 functionGroups CT_FunctionGroups ? */
            case "<functionGroups":
            case "<functionGroups/>":
              break;
            /* 18.2.14   functionGroup CT_FunctionGroup + */
            case "<functionGroup":
              break;
            /* 18.2.9  externalReferences CT_ExternalReferences ? */
            case "<externalReferences":
            case "</externalReferences>":
            case "<externalReferences>":
              break;
            /* 18.2.8    externalReference CT_ExternalReference + */
            case "<externalReference":
              break;
            /* 18.2.6  definedNames CT_DefinedNames ? */
            case "<definedNames/>":
              break;
            case "<definedNames>":
            case "<definedNames":
              pass = true;
              break;
            case "</definedNames>":
              pass = false;
              break;
            /* 18.2.5    definedName CT_DefinedName + */
            case "<definedName":
              {
                dname = {};
                dname.Name = utf8read(y3.name);
                if (y3.comment) dname.Comment = y3.comment;
                if (y3.localSheetId) dname.Sheet = +y3.localSheetId;
                if (parsexmlbool(y3.hidden || "0")) dname.Hidden = true;
                dnstart = idx + x3.length;
              }
              break;
            case "</definedName>":
              {
                dname.Ref = unescapexml(utf8read(data.slice(dnstart, idx)));
                wb.Names.push(dname);
              }
              break;
            case "<definedName/>":
              break;
            /* 18.2.2  calcPr CT_CalcPr ? */
            case "<calcPr":
              delete y3[0];
              wb.CalcPr = y3;
              break;
            case "<calcPr/>":
              delete y3[0];
              wb.CalcPr = y3;
              break;
            case "</calcPr>":
              break;
            /* 18.2.16 oleSize CT_OleSize ? (ref required) */
            case "<oleSize":
              break;
            /* 18.2.4  customWorkbookViews CT_CustomWorkbookViews ? */
            case "<customWorkbookViews>":
            case "</customWorkbookViews>":
            case "<customWorkbookViews":
              break;
            /* 18.2.3  customWorkbookView CT_CustomWorkbookView + */
            case "<customWorkbookView":
            case "</customWorkbookView>":
              break;
            /* 18.2.18 pivotCaches CT_PivotCaches ? */
            case "<pivotCaches>":
            case "</pivotCaches>":
            case "<pivotCaches":
              break;
            /* 18.2.17 pivotCache CT_PivotCache ? */
            case "<pivotCache":
              break;
            /* 18.2.21 smartTagPr CT_SmartTagPr ? */
            case "<smartTagPr":
            case "<smartTagPr/>":
              break;
            /* 18.2.23 smartTagTypes CT_SmartTagTypes ? */
            case "<smartTagTypes":
            case "<smartTagTypes>":
            case "</smartTagTypes>":
              break;
            /* 18.2.22 smartTagType CT_SmartTagType ? */
            case "<smartTagType":
              break;
            /* 18.2.24 webPublishing CT_WebPublishing ? */
            case "<webPublishing":
            case "<webPublishing/>":
              break;
            /* 18.2.11 fileRecoveryPr CT_FileRecoveryPr ? */
            case "<fileRecoveryPr":
            case "<fileRecoveryPr/>":
              break;
            /* 18.2.26 webPublishObjects CT_WebPublishObjects ? */
            case "<webPublishObjects>":
            case "<webPublishObjects":
            case "</webPublishObjects>":
              break;
            /* 18.2.25 webPublishObject CT_WebPublishObject ? */
            case "<webPublishObject":
              break;
            /* 18.2.10 extLst CT_ExtensionList ? */
            case "<extLst":
            case "<extLst>":
            case "</extLst>":
            case "<extLst/>":
              break;
            /* 18.2.7  ext CT_Extension + */
            case "<ext":
              pass = true;
              break;
            //TODO: check with versions of excel
            case "</ext>":
              pass = false;
              break;
            /* Others */
            case "<ArchID":
              break;
            case "<AlternateContent":
            case "<AlternateContent>":
              pass = true;
              break;
            case "</AlternateContent>":
              pass = false;
              break;
            /* TODO */
            case "<revisionPtr":
              break;
            default:
              if (!pass && opts.WTF) throw new Error("unrecognized " + y3[0] + " in workbook");
          }
          return x3;
        });
        if (XMLNS_main.indexOf(wb.xmlns) === -1) throw new Error("Unknown Namespace: " + wb.xmlns);
        parse_wb_defaults(wb);
        return wb;
      }
      function write_wb_xml(wb) {
        var o3 = [XML_HEADER];
        o3[o3.length] = writextag("workbook", null, {
          "xmlns": XMLNS_main[0],
          //'xmlns:mx': XMLNS.mx,
          //'xmlns:s': XMLNS_main[0],
          "xmlns:r": XMLNS.r
        });
        var write_names = wb.Workbook && (wb.Workbook.Names || []).length > 0;
        var workbookPr = { codeName: "ThisWorkbook" };
        if (wb.Workbook && wb.Workbook.WBProps) {
          WBPropsDef.forEach(function(x3) {
            if (wb.Workbook.WBProps[x3[0]] == null) return;
            if (wb.Workbook.WBProps[x3[0]] == x3[1]) return;
            workbookPr[x3[0]] = wb.Workbook.WBProps[x3[0]];
          });
          if (wb.Workbook.WBProps.CodeName) {
            workbookPr.codeName = wb.Workbook.WBProps.CodeName;
            delete workbookPr.CodeName;
          }
        }
        o3[o3.length] = writextag("workbookPr", null, workbookPr);
        var sheets = wb.Workbook && wb.Workbook.Sheets || [];
        var i3 = 0;
        if (sheets && sheets[0] && !!sheets[0].Hidden) {
          o3[o3.length] = "<bookViews>";
          for (i3 = 0; i3 != wb.SheetNames.length; ++i3) {
            if (!sheets[i3]) break;
            if (!sheets[i3].Hidden) break;
          }
          if (i3 == wb.SheetNames.length) i3 = 0;
          o3[o3.length] = '<workbookView firstSheet="' + i3 + '" activeTab="' + i3 + '"/>';
          o3[o3.length] = "</bookViews>";
        }
        o3[o3.length] = "<sheets>";
        for (i3 = 0; i3 != wb.SheetNames.length; ++i3) {
          var sht = { name: escapexml(wb.SheetNames[i3].slice(0, 31)) };
          sht.sheetId = "" + (i3 + 1);
          sht["r:id"] = "rId" + (i3 + 1);
          if (sheets[i3]) switch (sheets[i3].Hidden) {
            case 1:
              sht.state = "hidden";
              break;
            case 2:
              sht.state = "veryHidden";
              break;
          }
          o3[o3.length] = writextag("sheet", null, sht);
        }
        o3[o3.length] = "</sheets>";
        if (write_names) {
          o3[o3.length] = "<definedNames>";
          if (wb.Workbook && wb.Workbook.Names) wb.Workbook.Names.forEach(function(n3) {
            var d3 = { name: n3.Name };
            if (n3.Comment) d3.comment = n3.Comment;
            if (n3.Sheet != null) d3.localSheetId = "" + n3.Sheet;
            if (n3.Hidden) d3.hidden = "1";
            if (!n3.Ref) return;
            o3[o3.length] = writextag("definedName", escapexml(n3.Ref), d3);
          });
          o3[o3.length] = "</definedNames>";
        }
        if (o3.length > 2) {
          o3[o3.length] = "</workbook>";
          o3[1] = o3[1].replace("/>", ">");
        }
        return o3.join("");
      }
      function parse_BrtBundleSh(data, length) {
        var z4 = {};
        z4.Hidden = data.read_shift(4);
        z4.iTabID = data.read_shift(4);
        z4.strRelID = parse_RelID(data, length - 8);
        z4.name = parse_XLWideString(data);
        return z4;
      }
      function write_BrtBundleSh(data, o3) {
        if (!o3) o3 = new_buf(127);
        o3.write_shift(4, data.Hidden);
        o3.write_shift(4, data.iTabID);
        write_RelID(data.strRelID, o3);
        write_XLWideString(data.name.slice(0, 31), o3);
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function parse_BrtWbProp(data, length) {
        var o3 = {};
        var flags = data.read_shift(4);
        o3.defaultThemeVersion = data.read_shift(4);
        var strName = length > 8 ? parse_XLWideString(data) : "";
        if (strName.length > 0) o3.CodeName = strName;
        o3.autoCompressPictures = !!(flags & 65536);
        o3.backupFile = !!(flags & 64);
        o3.checkCompatibility = !!(flags & 4096);
        o3.date1904 = !!(flags & 1);
        o3.filterPrivacy = !!(flags & 8);
        o3.hidePivotFieldList = !!(flags & 1024);
        o3.promptedSolutions = !!(flags & 16);
        o3.publishItems = !!(flags & 2048);
        o3.refreshAllConnections = !!(flags & 262144);
        o3.saveExternalLinkValues = !!(flags & 128);
        o3.showBorderUnselectedTables = !!(flags & 4);
        o3.showInkAnnotation = !!(flags & 32);
        o3.showObjects = ["all", "placeholders", "none"][flags >> 13 & 3];
        o3.showPivotChartFilter = !!(flags & 32768);
        o3.updateLinks = ["userSet", "never", "always"][flags >> 8 & 3];
        return o3;
      }
      function write_BrtWbProp(data, o3) {
        if (!o3) o3 = new_buf(72);
        var flags = 0;
        if (data) {
          if (data.filterPrivacy) flags |= 8;
        }
        o3.write_shift(4, flags);
        o3.write_shift(4, 0);
        write_XLSBCodeName(data && data.CodeName || "ThisWorkbook", o3);
        return o3.slice(0, o3.l);
      }
      function parse_BrtFRTArchID$(data, length) {
        var o3 = {};
        data.read_shift(4);
        o3.ArchID = data.read_shift(4);
        data.l += length - 8;
        return o3;
      }
      function parse_BrtName(data, length, opts) {
        var end = data.l + length;
        data.l += 4;
        data.l += 1;
        var itab = data.read_shift(4);
        var name = parse_XLNameWideString(data);
        var formula = parse_XLSBNameParsedFormula(data, 0, opts);
        var comment = parse_XLNullableWideString(data);
        data.l = end;
        var out = { Name: name, Ptg: formula };
        if (itab < 268435455) out.Sheet = itab;
        if (comment) out.Comment = comment;
        return out;
      }
      function parse_wb_bin(data, opts) {
        var wb = { AppVersion: {}, WBProps: {}, WBView: [], Sheets: [], CalcPr: {}, xmlns: "" };
        var state = [];
        var pass = false;
        if (!opts) opts = {};
        opts.biff = 12;
        var Names = [];
        var supbooks = [[]];
        supbooks.SheetNames = [];
        supbooks.XTI = [];
        XLSBRecordEnum[16] = { n: "BrtFRTArchID$", f: parse_BrtFRTArchID$ };
        recordhopper(data, function hopper_wb(val, R2, RT) {
          switch (RT) {
            case 156:
              supbooks.SheetNames.push(val.name);
              wb.Sheets.push(val);
              break;
            case 153:
              wb.WBProps = val;
              break;
            case 39:
              if (val.Sheet != null) opts.SID = val.Sheet;
              val.Ref = stringify_formula(val.Ptg, null, null, supbooks, opts);
              delete opts.SID;
              delete val.Ptg;
              Names.push(val);
              break;
            case 1036:
              break;
            case 357:
            /* 'BrtSupSelf' */
            case 358:
            /* 'BrtSupSame' */
            case 355:
            /* 'BrtSupBookSrc' */
            case 667:
              if (!supbooks[0].length) supbooks[0] = [RT, val];
              else supbooks.push([RT, val]);
              supbooks[supbooks.length - 1].XTI = [];
              break;
            case 362:
              if (supbooks.length === 0) {
                supbooks[0] = [];
                supbooks[0].XTI = [];
              }
              supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
              supbooks.XTI = supbooks.XTI.concat(val);
              break;
            case 361:
              break;
            case 2071:
            /* 'BrtAbsPath15' */
            case 158:
            /* 'BrtBookView' */
            case 143:
            /* 'BrtBeginBundleShs' */
            case 664:
            /* 'BrtBeginFnGroup' */
            case 353:
              break;
            /* case 'BrtModelTimeGroupingCalcCol' */
            case 3072:
            /* 'BrtUid' */
            case 3073:
            /* 'BrtRevisionPtr' */
            case 534:
            /* 'BrtBookProtection' */
            case 677:
            /* 'BrtBookProtectionIso' */
            case 157:
            /* 'BrtCalcProp' */
            case 610:
            /* 'BrtCrashRecErr' */
            case 2050:
            /* 'BrtDecoupledPivotCacheID' */
            case 155:
            /* 'BrtFileRecover' */
            case 548:
            /* 'BrtFileSharing' */
            case 676:
            /* 'BrtFileSharingIso' */
            case 128:
            /* 'BrtFileVersion' */
            case 665:
            /* 'BrtFnGroup' */
            case 2128:
            /* 'BrtModelRelationship' */
            case 2125:
            /* 'BrtModelTable' */
            case 549:
            /* 'BrtOleSize' */
            case 2053:
            /* 'BrtPivotTableRef' */
            case 596:
            /* 'BrtSmartTagType' */
            case 2076:
            /* 'BrtTableSlicerCacheID' */
            case 2075:
            /* 'BrtTableSlicerCacheIDs' */
            case 2082:
            /* 'BrtTimelineCachePivotCacheID' */
            case 397:
            /* 'BrtUserBookView' */
            case 154:
            /* 'BrtWbFactoid' */
            case 1117:
            /* 'BrtWbProp14' */
            case 553:
            /* 'BrtWebOpt' */
            case 2091:
              break;
            case 35:
              state.push(RT);
              pass = true;
              break;
            case 36:
              state.pop();
              pass = false;
              break;
            case 37:
              state.push(RT);
              pass = true;
              break;
            case 38:
              state.pop();
              pass = false;
              break;
            case 16:
              break;
            default:
              if (R2.T) {
              } else if (!pass || opts.WTF && state[state.length - 1] != 37 && state[state.length - 1] != 35) throw new Error("Unexpected record 0x" + RT.toString(16));
          }
        }, opts);
        parse_wb_defaults(wb);
        wb.Names = Names;
        wb.supbooks = supbooks;
        return wb;
      }
      function write_BUNDLESHS(ba2, wb) {
        write_record(
          ba2,
          143
          /* BrtBeginBundleShs */
        );
        for (var idx = 0; idx != wb.SheetNames.length; ++idx) {
          var viz = wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx] && wb.Workbook.Sheets[idx].Hidden || 0;
          var d3 = { Hidden: viz, iTabID: idx + 1, strRelID: "rId" + (idx + 1), name: wb.SheetNames[idx] };
          write_record(ba2, 156, write_BrtBundleSh(d3));
        }
        write_record(
          ba2,
          144
          /* BrtEndBundleShs */
        );
      }
      function write_BrtFileVersion(data, o3) {
        if (!o3) o3 = new_buf(127);
        for (var i3 = 0; i3 != 4; ++i3) o3.write_shift(4, 0);
        write_XLWideString("SheetJS", o3);
        write_XLWideString(XLSX2.version, o3);
        write_XLWideString(XLSX2.version, o3);
        write_XLWideString("7262", o3);
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function write_BrtBookView(idx, o3) {
        if (!o3) o3 = new_buf(29);
        o3.write_shift(-4, 0);
        o3.write_shift(-4, 460);
        o3.write_shift(4, 28800);
        o3.write_shift(4, 17600);
        o3.write_shift(4, 500);
        o3.write_shift(4, idx);
        o3.write_shift(4, idx);
        var flags = 120;
        o3.write_shift(1, flags);
        return o3.length > o3.l ? o3.slice(0, o3.l) : o3;
      }
      function write_BOOKVIEWS(ba2, wb) {
        if (!wb.Workbook || !wb.Workbook.Sheets) return;
        var sheets = wb.Workbook.Sheets;
        var i3 = 0, vistab = -1, hidden = -1;
        for (; i3 < sheets.length; ++i3) {
          if (!sheets[i3] || !sheets[i3].Hidden && vistab == -1) vistab = i3;
          else if (sheets[i3].Hidden == 1 && hidden == -1) hidden = i3;
        }
        if (hidden > vistab) return;
        write_record(
          ba2,
          135
          /* BrtBeginBookViews */
        );
        write_record(ba2, 158, write_BrtBookView(vistab));
        write_record(
          ba2,
          136
          /* BrtEndBookViews */
        );
      }
      function write_wb_bin(wb, opts) {
        var ba2 = buf_array();
        write_record(
          ba2,
          131
          /* BrtBeginBook */
        );
        write_record(ba2, 128, write_BrtFileVersion());
        write_record(ba2, 153, write_BrtWbProp(wb.Workbook && wb.Workbook.WBProps || null));
        write_BOOKVIEWS(ba2, wb, opts);
        write_BUNDLESHS(ba2, wb, opts);
        write_record(
          ba2,
          132
          /* BrtEndBook */
        );
        return ba2.end();
      }
      function parse_wb(data, name, opts) {
        if (name.slice(-4) === ".bin") return parse_wb_bin(data, opts);
        return parse_wb_xml(data, opts);
      }
      function parse_ws(data, name, idx, opts, rels, wb, themes, styles) {
        if (name.slice(-4) === ".bin") return parse_ws_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_ws_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_cs(data, name, idx, opts, rels, wb, themes, styles) {
        if (name.slice(-4) === ".bin") return parse_cs_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_cs_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_ms(data, name, idx, opts, rels, wb, themes, styles) {
        if (name.slice(-4) === ".bin") return parse_ms_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_ms_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_ds(data, name, idx, opts, rels, wb, themes, styles) {
        if (name.slice(-4) === ".bin") return parse_ds_bin(data, opts, idx, rels, wb, themes, styles);
        return parse_ds_xml(data, opts, idx, rels, wb, themes, styles);
      }
      function parse_sty(data, name, themes, opts) {
        if (name.slice(-4) === ".bin") return parse_sty_bin(data, themes, opts);
        return parse_sty_xml(data, themes, opts);
      }
      function parse_theme(data, name, opts) {
        return parse_theme_xml(data, opts);
      }
      function parse_sst(data, name, opts) {
        if (name.slice(-4) === ".bin") return parse_sst_bin(data, opts);
        return parse_sst_xml(data, opts);
      }
      function parse_cmnt(data, name, opts) {
        if (name.slice(-4) === ".bin") return parse_comments_bin(data, opts);
        return parse_comments_xml(data, opts);
      }
      function parse_cc(data, name, opts) {
        if (name.slice(-4) === ".bin") return parse_cc_bin(data, name, opts);
        return parse_cc_xml(data, name, opts);
      }
      function parse_xlink(data, rel, name, opts) {
        if (name.slice(-4) === ".bin") return parse_xlink_bin(data, rel, name, opts);
        return parse_xlink_xml(data, rel, name, opts);
      }
      function parse_xlmeta(data, name, opts) {
        if (name.slice(-4) === ".bin") return parse_xlmeta_bin(data, name, opts);
        return parse_xlmeta_xml(data, name, opts);
      }
      function write_wb(wb, name, opts) {
        return (name.slice(-4) === ".bin" ? write_wb_bin : write_wb_xml)(wb, opts);
      }
      function write_ws(data, name, opts, wb, rels) {
        return (name.slice(-4) === ".bin" ? write_ws_bin : write_ws_xml)(data, opts, wb, rels);
      }
      function write_cs(data, name, opts, wb, rels) {
        return (name.slice(-4) === ".bin" ? write_cs_bin : write_cs_xml)(data, opts, wb, rels);
      }
      function write_sty(data, name, opts) {
        return (name.slice(-4) === ".bin" ? write_sty_bin : write_sty_xml)(data, opts);
      }
      function write_sst(data, name, opts) {
        return (name.slice(-4) === ".bin" ? write_sst_bin : write_sst_xml)(data, opts);
      }
      function write_cmnt(data, name, opts) {
        return (name.slice(-4) === ".bin" ? write_comments_bin : write_comments_xml)(data, opts);
      }
      function write_xlmeta(name) {
        return (name.slice(-4) === ".bin" ? write_xlmeta_bin : write_xlmeta_xml)();
      }
      var attregexg2 = /([\w:]+)=((?:")([^"]*)(?:")|(?:')([^']*)(?:'))/g;
      var attregex2 = /([\w:]+)=((?:")(?:[^"]*)(?:")|(?:')(?:[^']*)(?:'))/;
      function xlml_parsexmltag(tag, skip_root) {
        var words = tag.split(/\s+/);
        var z4 = [];
        if (!skip_root) z4[0] = words[0];
        if (words.length === 1) return z4;
        var m3 = tag.match(attregexg2), y3, j3, w3, i3;
        if (m3) for (i3 = 0; i3 != m3.length; ++i3) {
          y3 = m3[i3].match(attregex2);
          if ((j3 = y3[1].indexOf(":")) === -1) z4[y3[1]] = y3[2].slice(1, y3[2].length - 1);
          else {
            if (y3[1].slice(0, 6) === "xmlns:") w3 = "xmlns" + y3[1].slice(6);
            else w3 = y3[1].slice(j3 + 1);
            z4[w3] = y3[2].slice(1, y3[2].length - 1);
          }
        }
        return z4;
      }
      function xlml_parsexmltagobj(tag) {
        var words = tag.split(/\s+/);
        var z4 = {};
        if (words.length === 1) return z4;
        var m3 = tag.match(attregexg2), y3, j3, w3, i3;
        if (m3) for (i3 = 0; i3 != m3.length; ++i3) {
          y3 = m3[i3].match(attregex2);
          if ((j3 = y3[1].indexOf(":")) === -1) z4[y3[1]] = y3[2].slice(1, y3[2].length - 1);
          else {
            if (y3[1].slice(0, 6) === "xmlns:") w3 = "xmlns" + y3[1].slice(6);
            else w3 = y3[1].slice(j3 + 1);
            z4[w3] = y3[2].slice(1, y3[2].length - 1);
          }
        }
        return z4;
      }
      var XLMLFormatMap;
      function xlml_format(format, value) {
        var fmt = XLMLFormatMap[format] || unescapexml(format);
        if (fmt === "General") return SSF_general(value);
        return SSF_format(fmt, value);
      }
      function xlml_set_custprop(Custprops, key, cp, val) {
        var oval = val;
        switch ((cp[0].match(/dt:dt="([\w.]+)"/) || ["", ""])[1]) {
          case "boolean":
            oval = parsexmlbool(val);
            break;
          case "i2":
          case "int":
            oval = parseInt(val, 10);
            break;
          case "r4":
          case "float":
            oval = parseFloat(val);
            break;
          case "date":
          case "dateTime.tz":
            oval = parseDate(val);
            break;
          case "i8":
          case "string":
          case "fixed":
          case "uuid":
          case "bin.base64":
            break;
          default:
            throw new Error("bad custprop:" + cp[0]);
        }
        Custprops[unescapexml(key)] = oval;
      }
      function safe_format_xlml(cell, nf, o3) {
        if (cell.t === "z") return;
        if (!o3 || o3.cellText !== false) try {
          if (cell.t === "e") {
            cell.w = cell.w || BErr[cell.v];
          } else if (nf === "General") {
            if (cell.t === "n") {
              if ((cell.v | 0) === cell.v) cell.w = cell.v.toString(10);
              else cell.w = SSF_general_num(cell.v);
            } else cell.w = SSF_general(cell.v);
          } else cell.w = xlml_format(nf || "General", cell.v);
        } catch (e3) {
          if (o3.WTF) throw e3;
        }
        try {
          var z4 = XLMLFormatMap[nf] || nf || "General";
          if (o3.cellNF) cell.z = z4;
          if (o3.cellDates && cell.t == "n" && fmt_is_date(z4)) {
            var _d = SSF_parse_date_code(cell.v);
            if (_d) {
              cell.t = "d";
              cell.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
            }
          }
        } catch (e3) {
          if (o3.WTF) throw e3;
        }
      }
      function process_style_xlml(styles, stag, opts) {
        if (opts.cellStyles) {
          if (stag.Interior) {
            var I3 = stag.Interior;
            if (I3.Pattern) I3.patternType = XLMLPatternTypeMap[I3.Pattern] || I3.Pattern;
          }
        }
        styles[stag.ID] = stag;
      }
      function parse_xlml_data(xml, ss, data, cell, base, styles, csty, row, arrayf, o3) {
        var nf = "General", sid = cell.StyleID, S3 = {};
        o3 = o3 || {};
        var interiors = [];
        var i3 = 0;
        if (sid === void 0 && row) sid = row.StyleID;
        if (sid === void 0 && csty) sid = csty.StyleID;
        while (styles[sid] !== void 0) {
          if (styles[sid].nf) nf = styles[sid].nf;
          if (styles[sid].Interior) interiors.push(styles[sid].Interior);
          if (!styles[sid].Parent) break;
          sid = styles[sid].Parent;
        }
        switch (data.Type) {
          case "Boolean":
            cell.t = "b";
            cell.v = parsexmlbool(xml);
            break;
          case "String":
            cell.t = "s";
            cell.r = xlml_fixstr(unescapexml(xml));
            cell.v = xml.indexOf("<") > -1 ? unescapexml(ss || xml).replace(/<.*?>/g, "") : cell.r;
            break;
          case "DateTime":
            if (xml.slice(-1) != "Z") xml += "Z";
            cell.v = (parseDate(xml) - new Date(Date.UTC(1899, 11, 30))) / (24 * 60 * 60 * 1e3);
            if (cell.v !== cell.v) cell.v = unescapexml(xml);
            else if (cell.v < 60) cell.v = cell.v - 1;
            if (!nf || nf == "General") nf = "yyyy-mm-dd";
          /* falls through */
          case "Number":
            if (cell.v === void 0) cell.v = +xml;
            if (!cell.t) cell.t = "n";
            break;
          case "Error":
            cell.t = "e";
            cell.v = RBErr[xml];
            if (o3.cellText !== false) cell.w = xml;
            break;
          default:
            if (xml == "" && ss == "") {
              cell.t = "z";
            } else {
              cell.t = "s";
              cell.v = xlml_fixstr(ss || xml);
            }
            break;
        }
        safe_format_xlml(cell, nf, o3);
        if (o3.cellFormula !== false) {
          if (cell.Formula) {
            var fstr = unescapexml(cell.Formula);
            if (fstr.charCodeAt(0) == 61) fstr = fstr.slice(1);
            cell.f = rc_to_a1(fstr, base);
            delete cell.Formula;
            if (cell.ArrayRange == "RC") cell.F = rc_to_a1("RC:RC", base);
            else if (cell.ArrayRange) {
              cell.F = rc_to_a1(cell.ArrayRange, base);
              arrayf.push([safe_decode_range(cell.F), cell.F]);
            }
          } else {
            for (i3 = 0; i3 < arrayf.length; ++i3)
              if (base.r >= arrayf[i3][0].s.r && base.r <= arrayf[i3][0].e.r) {
                if (base.c >= arrayf[i3][0].s.c && base.c <= arrayf[i3][0].e.c)
                  cell.F = arrayf[i3][1];
              }
          }
        }
        if (o3.cellStyles) {
          interiors.forEach(function(x3) {
            if (!S3.patternType && x3.patternType) S3.patternType = x3.patternType;
          });
          cell.s = S3;
        }
        if (cell.StyleID !== void 0) cell.ixfe = cell.StyleID;
      }
      function xlml_clean_comment(comment) {
        comment.t = comment.v || "";
        comment.t = comment.t.replace(/\r\n/g, "\n").replace(/\r/g, "\n");
        comment.v = comment.w = comment.ixfe = void 0;
      }
      function parse_xlml_xml(d3, _opts) {
        var opts = _opts || {};
        make_ssf();
        var str = debom(xlml_normalize(d3));
        if (opts.type == "binary" || opts.type == "array" || opts.type == "base64") {
          if (typeof $cptable !== "undefined") str = $cptable.utils.decode(65001, char_codes(str));
          else str = utf8read(str);
        }
        var opening = str.slice(0, 1024).toLowerCase(), ishtml = false;
        opening = opening.replace(/".*?"/g, "");
        if ((opening.indexOf(">") & 1023) > Math.min(opening.indexOf(",") & 1023, opening.indexOf(";") & 1023)) {
          var _o = dup(opts);
          _o.type = "string";
          return PRN.to_workbook(str, _o);
        }
        if (opening.indexOf("<?xml") == -1) ["html", "table", "head", "meta", "script", "style", "div"].forEach(function(tag) {
          if (opening.indexOf("<" + tag) >= 0) ishtml = true;
        });
        if (ishtml) return html_to_workbook(str, opts);
        XLMLFormatMap = {
          "General Number": "General",
          "General Date": table_fmt[22],
          "Long Date": "dddd, mmmm dd, yyyy",
          "Medium Date": table_fmt[15],
          "Short Date": table_fmt[14],
          "Long Time": table_fmt[19],
          "Medium Time": table_fmt[18],
          "Short Time": table_fmt[20],
          "Currency": '"$"#,##0.00_);[Red]\\("$"#,##0.00\\)',
          "Fixed": table_fmt[2],
          "Standard": table_fmt[4],
          "Percent": table_fmt[10],
          "Scientific": table_fmt[11],
          "Yes/No": '"Yes";"Yes";"No";@',
          "True/False": '"True";"True";"False";@',
          "On/Off": '"Yes";"Yes";"No";@'
        };
        var Rn;
        var state = [], tmp;
        if (DENSE != null && opts.dense == null) opts.dense = DENSE;
        var sheets = {}, sheetnames = [], cursheet = opts.dense ? [] : {}, sheetname = "";
        var cell = {}, row = {};
        var dtag = xlml_parsexmltag('<Data ss:Type="String">'), didx = 0;
        var c3 = 0, r3 = 0;
        var refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
        var styles = {}, stag = {};
        var ss = "", fidx = 0;
        var merges = [];
        var Props = {}, Custprops = {}, pidx = 0, cp = [];
        var comments = [], comment = {};
        var cstys = [], csty, seencol = false;
        var arrayf = [];
        var rowinfo = [], rowobj = {}, cc = 0, rr2 = 0;
        var Workbook = { Sheets: [], WBProps: { date1904: false } }, wsprops = {};
        xlmlregex.lastIndex = 0;
        str = str.replace(/<!--([\s\S]*?)-->/mg, "");
        var raw_Rn3 = "";
        while (Rn = xlmlregex.exec(str)) switch (Rn[3] = (raw_Rn3 = Rn[3]).toLowerCase()) {
          case "data":
            if (raw_Rn3 == "data") {
              if (Rn[1] === "/") {
                if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
              } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
              break;
            }
            if (state[state.length - 1][1]) break;
            if (Rn[1] === "/") parse_xlml_data(str.slice(didx, Rn.index), ss, dtag, state[state.length - 1][0] == /*"Comment"*/
            "comment" ? comment : cell, { c: c3, r: r3 }, styles, cstys[c3], row, arrayf, opts);
            else {
              ss = "";
              dtag = xlml_parsexmltag(Rn[0]);
              didx = Rn.index + Rn[0].length;
            }
            break;
          case "cell":
            if (Rn[1] === "/") {
              if (comments.length > 0) cell.c = comments;
              if ((!opts.sheetRows || opts.sheetRows > r3) && cell.v !== void 0) {
                if (opts.dense) {
                  if (!cursheet[r3]) cursheet[r3] = [];
                  cursheet[r3][c3] = cell;
                } else cursheet[encode_col(c3) + encode_row(r3)] = cell;
              }
              if (cell.HRef) {
                cell.l = { Target: unescapexml(cell.HRef) };
                if (cell.HRefScreenTip) cell.l.Tooltip = cell.HRefScreenTip;
                delete cell.HRef;
                delete cell.HRefScreenTip;
              }
              if (cell.MergeAcross || cell.MergeDown) {
                cc = c3 + (parseInt(cell.MergeAcross, 10) | 0);
                rr2 = r3 + (parseInt(cell.MergeDown, 10) | 0);
                merges.push({ s: { c: c3, r: r3 }, e: { c: cc, r: rr2 } });
              }
              if (!opts.sheetStubs) {
                if (cell.MergeAcross) c3 = cc + 1;
                else ++c3;
              } else if (cell.MergeAcross || cell.MergeDown) {
                for (var cma = c3; cma <= cc; ++cma) {
                  for (var cmd = r3; cmd <= rr2; ++cmd) {
                    if (cma > c3 || cmd > r3) {
                      if (opts.dense) {
                        if (!cursheet[cmd]) cursheet[cmd] = [];
                        cursheet[cmd][cma] = { t: "z" };
                      } else cursheet[encode_col(cma) + encode_row(cmd)] = { t: "z" };
                    }
                  }
                }
                c3 = cc + 1;
              } else ++c3;
            } else {
              cell = xlml_parsexmltagobj(Rn[0]);
              if (cell.Index) c3 = +cell.Index - 1;
              if (c3 < refguess.s.c) refguess.s.c = c3;
              if (c3 > refguess.e.c) refguess.e.c = c3;
              if (Rn[0].slice(-2) === "/>") ++c3;
              comments = [];
            }
            break;
          case "row":
            if (Rn[1] === "/" || Rn[0].slice(-2) === "/>") {
              if (r3 < refguess.s.r) refguess.s.r = r3;
              if (r3 > refguess.e.r) refguess.e.r = r3;
              if (Rn[0].slice(-2) === "/>") {
                row = xlml_parsexmltag(Rn[0]);
                if (row.Index) r3 = +row.Index - 1;
              }
              c3 = 0;
              ++r3;
            } else {
              row = xlml_parsexmltag(Rn[0]);
              if (row.Index) r3 = +row.Index - 1;
              rowobj = {};
              if (row.AutoFitHeight == "0" || row.Height) {
                rowobj.hpx = parseInt(row.Height, 10);
                rowobj.hpt = px2pt(rowobj.hpx);
                rowinfo[r3] = rowobj;
              }
              if (row.Hidden == "1") {
                rowobj.hidden = true;
                rowinfo[r3] = rowobj;
              }
            }
            break;
          case "worksheet":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
              sheetnames.push(sheetname);
              if (refguess.s.r <= refguess.e.r && refguess.s.c <= refguess.e.c) {
                cursheet["!ref"] = encode_range(refguess);
                if (opts.sheetRows && opts.sheetRows <= refguess.e.r) {
                  cursheet["!fullref"] = cursheet["!ref"];
                  refguess.e.r = opts.sheetRows - 1;
                  cursheet["!ref"] = encode_range(refguess);
                }
              }
              if (merges.length) cursheet["!merges"] = merges;
              if (cstys.length > 0) cursheet["!cols"] = cstys;
              if (rowinfo.length > 0) cursheet["!rows"] = rowinfo;
              sheets[sheetname] = cursheet;
            } else {
              refguess = { s: { r: 2e6, c: 2e6 }, e: { r: 0, c: 0 } };
              r3 = c3 = 0;
              state.push([Rn[3], false]);
              tmp = xlml_parsexmltag(Rn[0]);
              sheetname = unescapexml(tmp.Name);
              cursheet = opts.dense ? [] : {};
              merges = [];
              arrayf = [];
              rowinfo = [];
              wsprops = { name: sheetname, Hidden: 0 };
              Workbook.Sheets.push(wsprops);
            }
            break;
          case "table":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].slice(-2) == "/>") break;
            else {
              state.push([Rn[3], false]);
              cstys = [];
              seencol = false;
            }
            break;
          case "style":
            if (Rn[1] === "/") process_style_xlml(styles, stag, opts);
            else stag = xlml_parsexmltag(Rn[0]);
            break;
          case "numberformat":
            stag.nf = unescapexml(xlml_parsexmltag(Rn[0]).Format || "General");
            if (XLMLFormatMap[stag.nf]) stag.nf = XLMLFormatMap[stag.nf];
            for (var ssfidx = 0; ssfidx != 392; ++ssfidx) if (table_fmt[ssfidx] == stag.nf) break;
            if (ssfidx == 392) {
              for (ssfidx = 57; ssfidx != 392; ++ssfidx) if (table_fmt[ssfidx] == null) {
                SSF_load(stag.nf, ssfidx);
                break;
              }
            }
            break;
          case "column":
            if (state[state.length - 1][0] !== /*'Table'*/
            "table") break;
            csty = xlml_parsexmltag(Rn[0]);
            if (csty.Hidden) {
              csty.hidden = true;
              delete csty.Hidden;
            }
            if (csty.Width) csty.wpx = parseInt(csty.Width, 10);
            if (!seencol && csty.wpx > 10) {
              seencol = true;
              MDW = DEF_MDW;
              for (var _col = 0; _col < cstys.length; ++_col) if (cstys[_col]) process_col(cstys[_col]);
            }
            if (seencol) process_col(csty);
            cstys[csty.Index - 1 || cstys.length] = csty;
            for (var i3 = 0; i3 < +csty.Span; ++i3) cstys[cstys.length] = dup(csty);
            break;
          case "namedrange":
            if (Rn[1] === "/") break;
            if (!Workbook.Names) Workbook.Names = [];
            var _NamedRange = parsexmltag(Rn[0]);
            var _DefinedName = {
              Name: _NamedRange.Name,
              Ref: rc_to_a1(_NamedRange.RefersTo.slice(1), { r: 0, c: 0 })
            };
            if (Workbook.Sheets.length > 0) _DefinedName.Sheet = Workbook.Sheets.length - 1;
            Workbook.Names.push(_DefinedName);
            break;
          case "namedcell":
            break;
          case "b":
            break;
          case "i":
            break;
          case "u":
            break;
          case "s":
            break;
          case "em":
            break;
          case "h2":
            break;
          case "h3":
            break;
          case "sub":
            break;
          case "sup":
            break;
          case "span":
            break;
          case "alignment":
            break;
          case "borders":
            break;
          case "border":
            break;
          case "font":
            if (Rn[0].slice(-2) === "/>") break;
            else if (Rn[1] === "/") ss += str.slice(fidx, Rn.index);
            else fidx = Rn.index + Rn[0].length;
            break;
          case "interior":
            if (!opts.cellStyles) break;
            stag.Interior = xlml_parsexmltag(Rn[0]);
            break;
          case "protection":
            break;
          case "author":
          case "title":
          case "description":
          case "created":
          case "keywords":
          case "subject":
          case "category":
          case "company":
          case "lastauthor":
          case "lastsaved":
          case "lastprinted":
          case "version":
          case "revision":
          case "totaltime":
          case "hyperlinkbase":
          case "manager":
          case "contentstatus":
          case "identifier":
          case "language":
          case "appname":
            if (Rn[0].slice(-2) === "/>") break;
            else if (Rn[1] === "/") xlml_set_prop(Props, raw_Rn3, str.slice(pidx, Rn.index));
            else pidx = Rn.index + Rn[0].length;
            break;
          case "paragraphs":
            break;
          case "styles":
          case "workbook":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else state.push([Rn[3], false]);
            break;
          case "comment":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
              xlml_clean_comment(comment);
              comments.push(comment);
            } else {
              state.push([Rn[3], false]);
              tmp = xlml_parsexmltag(Rn[0]);
              comment = { a: tmp.Author };
            }
            break;
          case "autofilter":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
              var AutoFilter = xlml_parsexmltag(Rn[0]);
              cursheet["!autofilter"] = { ref: rc_to_a1(AutoFilter.Range).replace(/\$/g, "") };
              state.push([Rn[3], true]);
            }
            break;
          case "name":
            break;
          case "datavalidation":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else {
              if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
            }
            break;
          case "pixelsperinch":
            break;
          case "componentoptions":
          case "documentproperties":
          case "customdocumentproperties":
          case "officedocumentsettings":
          case "pivottable":
          case "pivotcache":
          case "names":
          case "mapinfo":
          case "pagebreaks":
          case "querytable":
          case "sorting":
          case "schema":
          //case 'data' /*case 'data'*/:
          case "conditionalformatting":
          case "smarttagtype":
          case "smarttags":
          case "excelworkbook":
          case "workbookoptions":
          case "worksheetoptions":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw new Error("Bad state: " + tmp.join("|"));
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
            break;
          case "null":
            break;
          default:
            if (state.length == 0 && Rn[3] == "document") return parse_fods(str, opts);
            if (state.length == 0 && Rn[3] == "uof") return parse_fods(str, opts);
            var seen = true;
            switch (state[state.length - 1][0]) {
              /* OfficeDocumentSettings */
              case "officedocumentsettings":
                switch (Rn[3]) {
                  case "allowpng":
                    break;
                  case "removepersonalinformation":
                    break;
                  case "downloadcomponents":
                    break;
                  case "locationofcomponents":
                    break;
                  case "colors":
                    break;
                  case "color":
                    break;
                  case "index":
                    break;
                  case "rgb":
                    break;
                  case "targetscreensize":
                    break;
                  case "readonlyrecommended":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* ComponentOptions */
              case "componentoptions":
                switch (Rn[3]) {
                  case "toolbar":
                    break;
                  case "hideofficelogo":
                    break;
                  case "spreadsheetautofit":
                    break;
                  case "label":
                    break;
                  case "caption":
                    break;
                  case "maxheight":
                    break;
                  case "maxwidth":
                    break;
                  case "nextsheetnumber":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* ExcelWorkbook */
              case "excelworkbook":
                switch (Rn[3]) {
                  case "date1904":
                    Workbook.WBProps.date1904 = true;
                    break;
                  case "windowheight":
                    break;
                  case "windowwidth":
                    break;
                  case "windowtopx":
                    break;
                  case "windowtopy":
                    break;
                  case "tabratio":
                    break;
                  case "protectstructure":
                    break;
                  case "protectwindow":
                    break;
                  case "protectwindows":
                    break;
                  case "activesheet":
                    break;
                  case "displayinknotes":
                    break;
                  case "firstvisiblesheet":
                    break;
                  case "supbook":
                    break;
                  case "sheetname":
                    break;
                  case "sheetindex":
                    break;
                  case "sheetindexfirst":
                    break;
                  case "sheetindexlast":
                    break;
                  case "dll":
                    break;
                  case "acceptlabelsinformulas":
                    break;
                  case "donotsavelinkvalues":
                    break;
                  case "iteration":
                    break;
                  case "maxiterations":
                    break;
                  case "maxchange":
                    break;
                  case "path":
                    break;
                  case "xct":
                    break;
                  case "count":
                    break;
                  case "selectedsheets":
                    break;
                  case "calculation":
                    break;
                  case "uncalced":
                    break;
                  case "startupprompt":
                    break;
                  case "crn":
                    break;
                  case "externname":
                    break;
                  case "formula":
                    break;
                  case "colfirst":
                    break;
                  case "collast":
                    break;
                  case "wantadvise":
                    break;
                  case "boolean":
                    break;
                  case "error":
                    break;
                  case "text":
                    break;
                  case "ole":
                    break;
                  case "noautorecover":
                    break;
                  case "publishobjects":
                    break;
                  case "donotcalculatebeforesave":
                    break;
                  case "number":
                    break;
                  case "refmoder1c1":
                    break;
                  case "embedsavesmarttags":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* WorkbookOptions */
              case "workbookoptions":
                switch (Rn[3]) {
                  case "owcversion":
                    break;
                  case "height":
                    break;
                  case "width":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* WorksheetOptions */
              case "worksheetoptions":
                switch (Rn[3]) {
                  case "visible":
                    if (Rn[0].slice(-2) === "/>") {
                    } else if (Rn[1] === "/") switch (str.slice(pidx, Rn.index)) {
                      case "SheetHidden":
                        wsprops.Hidden = 1;
                        break;
                      case "SheetVeryHidden":
                        wsprops.Hidden = 2;
                        break;
                    }
                    else pidx = Rn.index + Rn[0].length;
                    break;
                  case "header":
                    if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
                    if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].header = +parsexmltag(Rn[0]).Margin;
                    break;
                  case "footer":
                    if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
                    if (!isNaN(+parsexmltag(Rn[0]).Margin)) cursheet["!margins"].footer = +parsexmltag(Rn[0]).Margin;
                    break;
                  case "pagemargins":
                    var pagemargins = parsexmltag(Rn[0]);
                    if (!cursheet["!margins"]) default_margins(cursheet["!margins"] = {}, "xlml");
                    if (!isNaN(+pagemargins.Top)) cursheet["!margins"].top = +pagemargins.Top;
                    if (!isNaN(+pagemargins.Left)) cursheet["!margins"].left = +pagemargins.Left;
                    if (!isNaN(+pagemargins.Right)) cursheet["!margins"].right = +pagemargins.Right;
                    if (!isNaN(+pagemargins.Bottom)) cursheet["!margins"].bottom = +pagemargins.Bottom;
                    break;
                  case "displayrighttoleft":
                    if (!Workbook.Views) Workbook.Views = [];
                    if (!Workbook.Views[0]) Workbook.Views[0] = {};
                    Workbook.Views[0].RTL = true;
                    break;
                  case "freezepanes":
                    break;
                  case "frozennosplit":
                    break;
                  case "splithorizontal":
                  case "splitvertical":
                    break;
                  case "donotdisplaygridlines":
                    break;
                  case "activerow":
                    break;
                  case "activecol":
                    break;
                  case "toprowbottompane":
                    break;
                  case "leftcolumnrightpane":
                    break;
                  case "unsynced":
                    break;
                  case "print":
                    break;
                  case "printerrors":
                    break;
                  case "panes":
                    break;
                  case "scale":
                    break;
                  case "pane":
                    break;
                  case "number":
                    break;
                  case "layout":
                    break;
                  case "pagesetup":
                    break;
                  case "selected":
                    break;
                  case "protectobjects":
                    break;
                  case "enableselection":
                    break;
                  case "protectscenarios":
                    break;
                  case "validprinterinfo":
                    break;
                  case "horizontalresolution":
                    break;
                  case "verticalresolution":
                    break;
                  case "numberofcopies":
                    break;
                  case "activepane":
                    break;
                  case "toprowvisible":
                    break;
                  case "leftcolumnvisible":
                    break;
                  case "fittopage":
                    break;
                  case "rangeselection":
                    break;
                  case "papersizeindex":
                    break;
                  case "pagelayoutzoom":
                    break;
                  case "pagebreakzoom":
                    break;
                  case "filteron":
                    break;
                  case "fitwidth":
                    break;
                  case "fitheight":
                    break;
                  case "commentslayout":
                    break;
                  case "zoom":
                    break;
                  case "lefttoright":
                    break;
                  case "gridlines":
                    break;
                  case "allowsort":
                    break;
                  case "allowfilter":
                    break;
                  case "allowinsertrows":
                    break;
                  case "allowdeleterows":
                    break;
                  case "allowinsertcols":
                    break;
                  case "allowdeletecols":
                    break;
                  case "allowinserthyperlinks":
                    break;
                  case "allowformatcells":
                    break;
                  case "allowsizecols":
                    break;
                  case "allowsizerows":
                    break;
                  case "nosummaryrowsbelowdetail":
                    if (!cursheet["!outline"]) cursheet["!outline"] = {};
                    cursheet["!outline"].above = true;
                    break;
                  case "tabcolorindex":
                    break;
                  case "donotdisplayheadings":
                    break;
                  case "showpagelayoutzoom":
                    break;
                  case "nosummarycolumnsrightdetail":
                    if (!cursheet["!outline"]) cursheet["!outline"] = {};
                    cursheet["!outline"].left = true;
                    break;
                  case "blackandwhite":
                    break;
                  case "donotdisplayzeros":
                    break;
                  case "displaypagebreak":
                    break;
                  case "rowcolheadings":
                    break;
                  case "donotdisplayoutline":
                    break;
                  case "noorientation":
                    break;
                  case "allowusepivottables":
                    break;
                  case "zeroheight":
                    break;
                  case "viewablerange":
                    break;
                  case "selection":
                    break;
                  case "protectcontents":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* PivotTable */
              case "pivottable":
              case "pivotcache":
                switch (Rn[3]) {
                  case "immediateitemsondrop":
                    break;
                  case "showpagemultipleitemlabel":
                    break;
                  case "compactrowindent":
                    break;
                  case "location":
                    break;
                  case "pivotfield":
                    break;
                  case "orientation":
                    break;
                  case "layoutform":
                    break;
                  case "layoutsubtotallocation":
                    break;
                  case "layoutcompactrow":
                    break;
                  case "position":
                    break;
                  case "pivotitem":
                    break;
                  case "datatype":
                    break;
                  case "datafield":
                    break;
                  case "sourcename":
                    break;
                  case "parentfield":
                    break;
                  case "ptlineitems":
                    break;
                  case "ptlineitem":
                    break;
                  case "countofsameitems":
                    break;
                  case "item":
                    break;
                  case "itemtype":
                    break;
                  case "ptsource":
                    break;
                  case "cacheindex":
                    break;
                  case "consolidationreference":
                    break;
                  case "filename":
                    break;
                  case "reference":
                    break;
                  case "nocolumngrand":
                    break;
                  case "norowgrand":
                    break;
                  case "blanklineafteritems":
                    break;
                  case "hidden":
                    break;
                  case "subtotal":
                    break;
                  case "basefield":
                    break;
                  case "mapchilditems":
                    break;
                  case "function":
                    break;
                  case "refreshonfileopen":
                    break;
                  case "printsettitles":
                    break;
                  case "mergelabels":
                    break;
                  case "defaultversion":
                    break;
                  case "refreshname":
                    break;
                  case "refreshdate":
                    break;
                  case "refreshdatecopy":
                    break;
                  case "versionlastrefresh":
                    break;
                  case "versionlastupdate":
                    break;
                  case "versionupdateablemin":
                    break;
                  case "versionrefreshablemin":
                    break;
                  case "calculation":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* PageBreaks */
              case "pagebreaks":
                switch (Rn[3]) {
                  case "colbreaks":
                    break;
                  case "colbreak":
                    break;
                  case "rowbreaks":
                    break;
                  case "rowbreak":
                    break;
                  case "colstart":
                    break;
                  case "colend":
                    break;
                  case "rowend":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* AutoFilter */
              case "autofilter":
                switch (Rn[3]) {
                  case "autofiltercolumn":
                    break;
                  case "autofiltercondition":
                    break;
                  case "autofilterand":
                    break;
                  case "autofilteror":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* QueryTable */
              case "querytable":
                switch (Rn[3]) {
                  case "id":
                    break;
                  case "autoformatfont":
                    break;
                  case "autoformatpattern":
                    break;
                  case "querysource":
                    break;
                  case "querytype":
                    break;
                  case "enableredirections":
                    break;
                  case "refreshedinxl9":
                    break;
                  case "urlstring":
                    break;
                  case "htmltables":
                    break;
                  case "connection":
                    break;
                  case "commandtext":
                    break;
                  case "refreshinfo":
                    break;
                  case "notitles":
                    break;
                  case "nextid":
                    break;
                  case "columninfo":
                    break;
                  case "overwritecells":
                    break;
                  case "donotpromptforfile":
                    break;
                  case "textwizardsettings":
                    break;
                  case "source":
                    break;
                  case "number":
                    break;
                  case "decimal":
                    break;
                  case "thousandseparator":
                    break;
                  case "trailingminusnumbers":
                    break;
                  case "formatsettings":
                    break;
                  case "fieldtype":
                    break;
                  case "delimiters":
                    break;
                  case "tab":
                    break;
                  case "comma":
                    break;
                  case "autoformatname":
                    break;
                  case "versionlastedit":
                    break;
                  case "versionlastrefresh":
                    break;
                  default:
                    seen = false;
                }
                break;
              case "datavalidation":
                switch (Rn[3]) {
                  case "range":
                    break;
                  case "type":
                    break;
                  case "min":
                    break;
                  case "max":
                    break;
                  case "sort":
                    break;
                  case "descending":
                    break;
                  case "order":
                    break;
                  case "casesensitive":
                    break;
                  case "value":
                    break;
                  case "errorstyle":
                    break;
                  case "errormessage":
                    break;
                  case "errortitle":
                    break;
                  case "inputmessage":
                    break;
                  case "inputtitle":
                    break;
                  case "combohide":
                    break;
                  case "inputhide":
                    break;
                  case "condition":
                    break;
                  case "qualifier":
                    break;
                  case "useblank":
                    break;
                  case "value1":
                    break;
                  case "value2":
                    break;
                  case "format":
                    break;
                  case "cellrangelist":
                    break;
                  default:
                    seen = false;
                }
                break;
              case "sorting":
              case "conditionalformatting":
                switch (Rn[3]) {
                  case "range":
                    break;
                  case "type":
                    break;
                  case "min":
                    break;
                  case "max":
                    break;
                  case "sort":
                    break;
                  case "descending":
                    break;
                  case "order":
                    break;
                  case "casesensitive":
                    break;
                  case "value":
                    break;
                  case "errorstyle":
                    break;
                  case "errormessage":
                    break;
                  case "errortitle":
                    break;
                  case "cellrangelist":
                    break;
                  case "inputmessage":
                    break;
                  case "inputtitle":
                    break;
                  case "combohide":
                    break;
                  case "inputhide":
                    break;
                  case "condition":
                    break;
                  case "qualifier":
                    break;
                  case "useblank":
                    break;
                  case "value1":
                    break;
                  case "value2":
                    break;
                  case "format":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* MapInfo (schema) */
              case "mapinfo":
              case "schema":
              case "data":
                switch (Rn[3]) {
                  case "map":
                    break;
                  case "entry":
                    break;
                  case "range":
                    break;
                  case "xpath":
                    break;
                  case "field":
                    break;
                  case "xsdtype":
                    break;
                  case "filteron":
                    break;
                  case "aggregate":
                    break;
                  case "elementtype":
                    break;
                  case "attributetype":
                    break;
                  /* These are from xsd (XML Schema Definition) */
                  case "schema":
                  case "element":
                  case "complextype":
                  case "datatype":
                  case "all":
                  case "attribute":
                  case "extends":
                    break;
                  case "row":
                    break;
                  default:
                    seen = false;
                }
                break;
              /* SmartTags (can be anything) */
              case "smarttags":
                break;
              default:
                seen = false;
                break;
            }
            if (seen) break;
            if (Rn[3].match(/!\[CDATA/)) break;
            if (!state[state.length - 1][1]) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
            if (state[state.length - 1][0] === /*'CustomDocumentProperties'*/
            "customdocumentproperties") {
              if (Rn[0].slice(-2) === "/>") break;
              else if (Rn[1] === "/") xlml_set_custprop(Custprops, raw_Rn3, cp, str.slice(pidx, Rn.index));
              else {
                cp = Rn;
                pidx = Rn.index + Rn[0].length;
              }
              break;
            }
            if (opts.WTF) throw "Unrecognized tag: " + Rn[3] + "|" + state.join("|");
        }
        var out = {};
        if (!opts.bookSheets && !opts.bookProps) out.Sheets = sheets;
        out.SheetNames = sheetnames;
        out.Workbook = Workbook;
        out.SSF = dup(table_fmt);
        out.Props = Props;
        out.Custprops = Custprops;
        return out;
      }
      function parse_xlml(data, opts) {
        fix_read_opts(opts = opts || {});
        switch (opts.type || "base64") {
          case "base64":
            return parse_xlml_xml(Base64_decode(data), opts);
          case "binary":
          case "buffer":
          case "file":
            return parse_xlml_xml(data, opts);
          case "array":
            return parse_xlml_xml(a2s(data), opts);
        }
      }
      function write_props_xlml(wb, opts) {
        var o3 = [];
        if (wb.Props) o3.push(xlml_write_docprops(wb.Props, opts));
        if (wb.Custprops) o3.push(xlml_write_custprops(wb.Props, wb.Custprops, opts));
        return o3.join("");
      }
      function write_wb_xlml() {
        return "";
      }
      function write_sty_xlml(wb, opts) {
        var styles = ['<Style ss:ID="Default" ss:Name="Normal"><NumberFormat/></Style>'];
        opts.cellXfs.forEach(function(xf, id) {
          var payload = [];
          payload.push(writextag("NumberFormat", null, { "ss:Format": escapexml(table_fmt[xf.numFmtId]) }));
          var o3 = { "ss:ID": "s" + (21 + id) };
          styles.push(writextag("Style", payload.join(""), o3));
        });
        return writextag("Styles", styles.join(""));
      }
      function write_name_xlml(n3) {
        return writextag("NamedRange", null, { "ss:Name": n3.Name, "ss:RefersTo": "=" + a1_to_rc(n3.Ref, { r: 0, c: 0 }) });
      }
      function write_names_xlml(wb) {
        if (!((wb || {}).Workbook || {}).Names) return "";
        var names = wb.Workbook.Names;
        var out = [];
        for (var i3 = 0; i3 < names.length; ++i3) {
          var n3 = names[i3];
          if (n3.Sheet != null) continue;
          if (n3.Name.match(/^_xlfn\./)) continue;
          out.push(write_name_xlml(n3));
        }
        return writextag("Names", out.join(""));
      }
      function write_ws_xlml_names(ws, opts, idx, wb) {
        if (!ws) return "";
        if (!((wb || {}).Workbook || {}).Names) return "";
        var names = wb.Workbook.Names;
        var out = [];
        for (var i3 = 0; i3 < names.length; ++i3) {
          var n3 = names[i3];
          if (n3.Sheet != idx) continue;
          if (n3.Name.match(/^_xlfn\./)) continue;
          out.push(write_name_xlml(n3));
        }
        return out.join("");
      }
      function write_ws_xlml_wsopts(ws, opts, idx, wb) {
        if (!ws) return "";
        var o3 = [];
        if (ws["!margins"]) {
          o3.push("<PageSetup>");
          if (ws["!margins"].header) o3.push(writextag("Header", null, { "x:Margin": ws["!margins"].header }));
          if (ws["!margins"].footer) o3.push(writextag("Footer", null, { "x:Margin": ws["!margins"].footer }));
          o3.push(writextag("PageMargins", null, {
            "x:Bottom": ws["!margins"].bottom || "0.75",
            "x:Left": ws["!margins"].left || "0.7",
            "x:Right": ws["!margins"].right || "0.7",
            "x:Top": ws["!margins"].top || "0.75"
          }));
          o3.push("</PageSetup>");
        }
        if (wb && wb.Workbook && wb.Workbook.Sheets && wb.Workbook.Sheets[idx]) {
          if (wb.Workbook.Sheets[idx].Hidden) o3.push(writextag("Visible", wb.Workbook.Sheets[idx].Hidden == 1 ? "SheetHidden" : "SheetVeryHidden", {}));
          else {
            for (var i3 = 0; i3 < idx; ++i3) if (wb.Workbook.Sheets[i3] && !wb.Workbook.Sheets[i3].Hidden) break;
            if (i3 == idx) o3.push("<Selected/>");
          }
        }
        if (((((wb || {}).Workbook || {}).Views || [])[0] || {}).RTL) o3.push("<DisplayRightToLeft/>");
        if (ws["!protect"]) {
          o3.push(writetag("ProtectContents", "True"));
          if (ws["!protect"].objects) o3.push(writetag("ProtectObjects", "True"));
          if (ws["!protect"].scenarios) o3.push(writetag("ProtectScenarios", "True"));
          if (ws["!protect"].selectLockedCells != null && !ws["!protect"].selectLockedCells) o3.push(writetag("EnableSelection", "NoSelection"));
          else if (ws["!protect"].selectUnlockedCells != null && !ws["!protect"].selectUnlockedCells) o3.push(writetag("EnableSelection", "UnlockedCells"));
          [
            ["formatCells", "AllowFormatCells"],
            ["formatColumns", "AllowSizeCols"],
            ["formatRows", "AllowSizeRows"],
            ["insertColumns", "AllowInsertCols"],
            ["insertRows", "AllowInsertRows"],
            ["insertHyperlinks", "AllowInsertHyperlinks"],
            ["deleteColumns", "AllowDeleteCols"],
            ["deleteRows", "AllowDeleteRows"],
            ["sort", "AllowSort"],
            ["autoFilter", "AllowFilter"],
            ["pivotTables", "AllowUsePivotTables"]
          ].forEach(function(x3) {
            if (ws["!protect"][x3[0]]) o3.push("<" + x3[1] + "/>");
          });
        }
        if (o3.length == 0) return "";
        return writextag("WorksheetOptions", o3.join(""), { xmlns: XLMLNS.x });
      }
      function write_ws_xlml_comment(comments) {
        return comments.map(function(c3) {
          var t3 = xlml_unfixstr(c3.t || "");
          var d3 = writextag("ss:Data", t3, { "xmlns": "http://www.w3.org/TR/REC-html40" });
          return writextag("Comment", d3, { "ss:Author": c3.a });
        }).join("");
      }
      function write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr) {
        if (!cell || cell.v == void 0 && cell.f == void 0) return "";
        var attr = {};
        if (cell.f) attr["ss:Formula"] = "=" + escapexml(a1_to_rc(cell.f, addr));
        if (cell.F && cell.F.slice(0, ref.length) == ref) {
          var end = decode_cell(cell.F.slice(ref.length + 1));
          attr["ss:ArrayRange"] = "RC:R" + (end.r == addr.r ? "" : "[" + (end.r - addr.r) + "]") + "C" + (end.c == addr.c ? "" : "[" + (end.c - addr.c) + "]");
        }
        if (cell.l && cell.l.Target) {
          attr["ss:HRef"] = escapexml(cell.l.Target);
          if (cell.l.Tooltip) attr["x:HRefScreenTip"] = escapexml(cell.l.Tooltip);
        }
        if (ws["!merges"]) {
          var marr = ws["!merges"];
          for (var mi = 0; mi != marr.length; ++mi) {
            if (marr[mi].s.c != addr.c || marr[mi].s.r != addr.r) continue;
            if (marr[mi].e.c > marr[mi].s.c) attr["ss:MergeAcross"] = marr[mi].e.c - marr[mi].s.c;
            if (marr[mi].e.r > marr[mi].s.r) attr["ss:MergeDown"] = marr[mi].e.r - marr[mi].s.r;
          }
        }
        var t3 = "", p3 = "";
        switch (cell.t) {
          case "z":
            if (!opts.sheetStubs) return "";
            break;
          case "n":
            t3 = "Number";
            p3 = String(cell.v);
            break;
          case "b":
            t3 = "Boolean";
            p3 = cell.v ? "1" : "0";
            break;
          case "e":
            t3 = "Error";
            p3 = BErr[cell.v];
            break;
          case "d":
            t3 = "DateTime";
            p3 = new Date(cell.v).toISOString();
            if (cell.z == null) cell.z = cell.z || table_fmt[14];
            break;
          case "s":
            t3 = "String";
            p3 = escapexlml(cell.v || "");
            break;
        }
        var os = get_cell_style(opts.cellXfs, cell, opts);
        attr["ss:StyleID"] = "s" + (21 + os);
        attr["ss:Index"] = addr.c + 1;
        var _v = cell.v != null ? p3 : "";
        var m3 = cell.t == "z" ? "" : '<Data ss:Type="' + t3 + '">' + _v + "</Data>";
        if ((cell.c || []).length > 0) m3 += write_ws_xlml_comment(cell.c);
        return writextag("Cell", m3, attr);
      }
      function write_ws_xlml_row(R2, row) {
        var o3 = '<Row ss:Index="' + (R2 + 1) + '"';
        if (row) {
          if (row.hpt && !row.hpx) row.hpx = pt2px(row.hpt);
          if (row.hpx) o3 += ' ss:AutoFitHeight="0" ss:Height="' + row.hpx + '"';
          if (row.hidden) o3 += ' ss:Hidden="1"';
        }
        return o3 + ">";
      }
      function write_ws_xlml_table(ws, opts, idx, wb) {
        if (!ws["!ref"]) return "";
        var range = safe_decode_range(ws["!ref"]);
        var marr = ws["!merges"] || [], mi = 0;
        var o3 = [];
        if (ws["!cols"]) ws["!cols"].forEach(function(n3, i3) {
          process_col(n3);
          var w3 = !!n3.width;
          var p3 = col_obj_w(i3, n3);
          var k3 = { "ss:Index": i3 + 1 };
          if (w3) k3["ss:Width"] = width2px(p3.width);
          if (n3.hidden) k3["ss:Hidden"] = "1";
          o3.push(writextag("Column", null, k3));
        });
        var dense = Array.isArray(ws);
        for (var R2 = range.s.r; R2 <= range.e.r; ++R2) {
          var row = [write_ws_xlml_row(R2, (ws["!rows"] || [])[R2])];
          for (var C2 = range.s.c; C2 <= range.e.c; ++C2) {
            var skip = false;
            for (mi = 0; mi != marr.length; ++mi) {
              if (marr[mi].s.c > C2) continue;
              if (marr[mi].s.r > R2) continue;
              if (marr[mi].e.c < C2) continue;
              if (marr[mi].e.r < R2) continue;
              if (marr[mi].s.c != C2 || marr[mi].s.r != R2) skip = true;
              break;
            }
            if (skip) continue;
            var addr = { r: R2, c: C2 };
            var ref = encode_cell(addr), cell = dense ? (ws[R2] || [])[C2] : ws[ref];
            row.push(write_ws_xlml_cell(cell, ref, ws, opts, idx, wb, addr));
          }
          row.push("</Row>");
          if (row.length > 2) o3.push(row.join(""));
        }
        return o3.join("");
      }
      function write_ws_xlml(idx, opts, wb) {
        var o3 = [];
        var s3 = wb.SheetNames[idx];
        var ws = wb.Sheets[s3];
        var t3 = ws ? write_ws_xlml_names(ws, opts, idx, wb) : "";
        if (t3.length > 0) o3.push("<Names>" + t3 + "</Names>");
        t3 = ws ? write_ws_xlml_table(ws, opts, idx, wb) : "";
        if (t3.length > 0) o3.push("<Table>" + t3 + "</Table>");
        o3.push(write_ws_xlml_wsopts(ws, opts, idx, wb));
        return o3.join("");
      }
      function write_xlml(wb, opts) {
        if (!opts) opts = {};
        if (!wb.SSF) wb.SSF = dup(table_fmt);
        if (wb.SSF) {
          make_ssf();
          SSF_load_table(wb.SSF);
          opts.revssf = evert_num(wb.SSF);
          opts.revssf[wb.SSF[65535]] = 0;
          opts.ssf = wb.SSF;
          opts.cellXfs = [];
          get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
        }
        var d3 = [];
        d3.push(write_props_xlml(wb, opts));
        d3.push(write_wb_xlml(wb, opts));
        d3.push("");
        d3.push("");
        for (var i3 = 0; i3 < wb.SheetNames.length; ++i3)
          d3.push(writextag("Worksheet", write_ws_xlml(i3, opts, wb), { "ss:Name": escapexml(wb.SheetNames[i3]) }));
        d3[2] = write_sty_xlml(wb, opts);
        d3[3] = write_names_xlml(wb, opts);
        return XML_HEADER + writextag("Workbook", d3.join(""), {
          "xmlns": XLMLNS.ss,
          "xmlns:o": XLMLNS.o,
          "xmlns:x": XLMLNS.x,
          "xmlns:ss": XLMLNS.ss,
          "xmlns:dt": XLMLNS.dt,
          "xmlns:html": XLMLNS.html
        });
      }
      function parse_compobj(obj) {
        var v3 = {};
        var o3 = obj.content;
        o3.l = 28;
        v3.AnsiUserType = o3.read_shift(0, "lpstr-ansi");
        v3.AnsiClipboardFormat = parse_ClipboardFormatOrAnsiString(o3);
        if (o3.length - o3.l <= 4) return v3;
        var m3 = o3.read_shift(4);
        if (m3 == 0 || m3 > 40) return v3;
        o3.l -= 4;
        v3.Reserved1 = o3.read_shift(0, "lpstr-ansi");
        if (o3.length - o3.l <= 4) return v3;
        m3 = o3.read_shift(4);
        if (m3 !== 1907505652) return v3;
        v3.UnicodeClipboardFormat = parse_ClipboardFormatOrUnicodeString(o3);
        m3 = o3.read_shift(4);
        if (m3 == 0 || m3 > 40) return v3;
        o3.l -= 4;
        v3.Reserved2 = o3.read_shift(0, "lpwstr");
      }
      var CONTINUE_RT = [60, 1084, 2066, 2165, 2175];
      function slurp(RecordType, R2, blob, length, opts) {
        var l2 = length;
        var bufs = [];
        var d3 = blob.slice(blob.l, blob.l + l2);
        if (opts && opts.enc && opts.enc.insitu && d3.length > 0) switch (RecordType) {
          case 9:
          case 521:
          case 1033:
          case 2057:
          case 47:
          case 405:
          case 225:
          case 406:
          case 312:
          case 404:
          case 10:
            break;
          case 133:
            break;
          default:
            opts.enc.insitu(d3);
        }
        bufs.push(d3);
        blob.l += l2;
        var nextrt = __readUInt16LE(blob, blob.l), next = XLSRecordEnum[nextrt];
        var start = 0;
        while (next != null && CONTINUE_RT.indexOf(nextrt) > -1) {
          l2 = __readUInt16LE(blob, blob.l + 2);
          start = blob.l + 4;
          if (nextrt == 2066) start += 4;
          else if (nextrt == 2165 || nextrt == 2175) {
            start += 12;
          }
          d3 = blob.slice(start, blob.l + 4 + l2);
          bufs.push(d3);
          blob.l += 4 + l2;
          next = XLSRecordEnum[nextrt = __readUInt16LE(blob, blob.l)];
        }
        var b3 = bconcat(bufs);
        prep_blob(b3, 0);
        var ll = 0;
        b3.lens = [];
        for (var j3 = 0; j3 < bufs.length; ++j3) {
          b3.lens.push(ll);
          ll += bufs[j3].length;
        }
        if (b3.length < length) throw "XLS Record 0x" + RecordType.toString(16) + " Truncated: " + b3.length + " < " + length;
        return R2.f(b3, b3.length, opts);
      }
      function safe_format_xf(p3, opts, date1904) {
        if (p3.t === "z") return;
        if (!p3.XF) return;
        var fmtid = 0;
        try {
          fmtid = p3.z || p3.XF.numFmtId || 0;
          if (opts.cellNF) p3.z = table_fmt[fmtid];
        } catch (e3) {
          if (opts.WTF) throw e3;
        }
        if (!opts || opts.cellText !== false) try {
          if (p3.t === "e") {
            p3.w = p3.w || BErr[p3.v];
          } else if (fmtid === 0 || fmtid == "General") {
            if (p3.t === "n") {
              if ((p3.v | 0) === p3.v) p3.w = p3.v.toString(10);
              else p3.w = SSF_general_num(p3.v);
            } else p3.w = SSF_general(p3.v);
          } else p3.w = SSF_format(fmtid, p3.v, { date1904: !!date1904, dateNF: opts && opts.dateNF });
        } catch (e3) {
          if (opts.WTF) throw e3;
        }
        if (opts.cellDates && fmtid && p3.t == "n" && fmt_is_date(table_fmt[fmtid] || String(fmtid))) {
          var _d = SSF_parse_date_code(p3.v);
          if (_d) {
            p3.t = "d";
            p3.v = new Date(_d.y, _d.m - 1, _d.d, _d.H, _d.M, _d.S, _d.u);
          }
        }
      }
      function make_cell(val, ixfe, t3) {
        return { v: val, ixfe, t: t3 };
      }
      function parse_workbook(blob, options) {
        var wb = { opts: {} };
        var Sheets = {};
        if (DENSE != null && options.dense == null) options.dense = DENSE;
        var out = options.dense ? [] : {};
        var Directory = {};
        var range = {};
        var last_formula = null;
        var sst = [];
        var cur_sheet = "";
        var Preamble = {};
        var lastcell, last_cell = "", cc, cmnt, rngC, rngR;
        var sharedf = {};
        var arrayf = [];
        var temp_val;
        var country;
        var XFs = [];
        var palette = [];
        var Workbook = { Sheets: [], WBProps: { date1904: false }, Views: [{}] }, wsprops = {};
        var get_rgb = function getrgb(icv) {
          if (icv < 8) return XLSIcv[icv];
          if (icv < 64) return palette[icv - 8] || XLSIcv[icv];
          return XLSIcv[icv];
        };
        var process_cell_style = function pcs(cell, line, options2) {
          var xfd = line.XF.data;
          if (!xfd || !xfd.patternType || !options2 || !options2.cellStyles) return;
          line.s = {};
          line.s.patternType = xfd.patternType;
          var t3;
          if (t3 = rgb2Hex(get_rgb(xfd.icvFore))) {
            line.s.fgColor = { rgb: t3 };
          }
          if (t3 = rgb2Hex(get_rgb(xfd.icvBack))) {
            line.s.bgColor = { rgb: t3 };
          }
        };
        var addcell = function addcell2(cell, line, options2) {
          if (file_depth > 1) return;
          if (options2.sheetRows && cell.r >= options2.sheetRows) return;
          if (options2.cellStyles && line.XF && line.XF.data) process_cell_style(cell, line, options2);
          delete line.ixfe;
          delete line.XF;
          lastcell = cell;
          last_cell = encode_cell(cell);
          if (!range || !range.s || !range.e) range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
          if (cell.r < range.s.r) range.s.r = cell.r;
          if (cell.c < range.s.c) range.s.c = cell.c;
          if (cell.r + 1 > range.e.r) range.e.r = cell.r + 1;
          if (cell.c + 1 > range.e.c) range.e.c = cell.c + 1;
          if (options2.cellFormula && line.f) {
            for (var afi = 0; afi < arrayf.length; ++afi) {
              if (arrayf[afi][0].s.c > cell.c || arrayf[afi][0].s.r > cell.r) continue;
              if (arrayf[afi][0].e.c < cell.c || arrayf[afi][0].e.r < cell.r) continue;
              line.F = encode_range(arrayf[afi][0]);
              if (arrayf[afi][0].s.c != cell.c || arrayf[afi][0].s.r != cell.r) delete line.f;
              if (line.f) line.f = "" + stringify_formula(arrayf[afi][1], range, cell, supbooks, opts);
              break;
            }
          }
          {
            if (options2.dense) {
              if (!out[cell.r]) out[cell.r] = [];
              out[cell.r][cell.c] = line;
            } else out[last_cell] = line;
          }
        };
        var opts = {
          enc: false,
          // encrypted
          sbcch: 0,
          // cch in the preceding SupBook
          snames: [],
          // sheetnames
          sharedf,
          // shared formulae by address
          arrayf,
          // array formulae array
          rrtabid: [],
          // RRTabId
          lastuser: "",
          // Last User from WriteAccess
          biff: 8,
          // BIFF version
          codepage: 0,
          // CP from CodePage record
          winlocked: 0,
          // fLockWn from WinProtect
          cellStyles: !!options && !!options.cellStyles,
          WTF: !!options && !!options.wtf
        };
        if (options.password) opts.password = options.password;
        var themes;
        var merges = [];
        var objects = [];
        var colinfo = [], rowinfo = [];
        var seencol = false;
        var supbooks = [];
        supbooks.SheetNames = opts.snames;
        supbooks.sharedf = opts.sharedf;
        supbooks.arrayf = opts.arrayf;
        supbooks.names = [];
        supbooks.XTI = [];
        var last_RT = 0;
        var file_depth = 0;
        var BIFF2Fmt = 0, BIFF2FmtTable = [];
        var FilterDatabases = [];
        var last_lbl;
        opts.codepage = 1200;
        set_cp(1200);
        var seen_codepage = false;
        while (blob.l < blob.length - 1) {
          var s3 = blob.l;
          var RecordType = blob.read_shift(2);
          if (RecordType === 0 && last_RT === 10) break;
          var length = blob.l === blob.length ? 0 : blob.read_shift(2);
          var R2 = XLSRecordEnum[RecordType];
          if (R2 && R2.f) {
            if (options.bookSheets) {
              if (last_RT === 133 && RecordType !== 133) break;
            }
            last_RT = RecordType;
            if (R2.r === 2 || R2.r == 12) {
              var rt2 = blob.read_shift(2);
              length -= 2;
              if (!opts.enc && rt2 !== RecordType && ((rt2 & 255) << 8 | rt2 >> 8) !== RecordType) throw new Error("rt mismatch: " + rt2 + "!=" + RecordType);
              if (R2.r == 12) {
                blob.l += 10;
                length -= 10;
              }
            }
            var val = {};
            if (RecordType === 10) val = R2.f(blob, length, opts);
            else val = slurp(RecordType, R2, blob, length, opts);
            if (file_depth == 0 && [9, 521, 1033, 2057].indexOf(last_RT) === -1) continue;
            switch (RecordType) {
              case 34:
                wb.opts.Date1904 = Workbook.WBProps.date1904 = val;
                break;
              case 134:
                wb.opts.WriteProtect = true;
                break;
              case 47:
                if (!opts.enc) blob.l = 0;
                opts.enc = val;
                if (!options.password) throw new Error("File is password-protected");
                if (val.valid == null) throw new Error("Encryption scheme unsupported");
                if (!val.valid) throw new Error("Password is incorrect");
                break;
              case 92:
                opts.lastuser = val;
                break;
              case 66:
                var cpval = Number(val);
                switch (cpval) {
                  case 21010:
                    cpval = 1200;
                    break;
                  case 32768:
                    cpval = 1e4;
                    break;
                  case 32769:
                    cpval = 1252;
                    break;
                }
                set_cp(opts.codepage = cpval);
                seen_codepage = true;
                break;
              case 317:
                opts.rrtabid = val;
                break;
              case 25:
                opts.winlocked = val;
                break;
              case 439:
                wb.opts["RefreshAll"] = val;
                break;
              case 12:
                wb.opts["CalcCount"] = val;
                break;
              case 16:
                wb.opts["CalcDelta"] = val;
                break;
              case 17:
                wb.opts["CalcIter"] = val;
                break;
              case 13:
                wb.opts["CalcMode"] = val;
                break;
              case 14:
                wb.opts["CalcPrecision"] = val;
                break;
              case 95:
                wb.opts["CalcSaveRecalc"] = val;
                break;
              case 15:
                opts.CalcRefMode = val;
                break;
              // TODO: implement R1C1
              case 2211:
                wb.opts.FullCalc = val;
                break;
              case 129:
                if (val.fDialog) out["!type"] = "dialog";
                if (!val.fBelow) (out["!outline"] || (out["!outline"] = {})).above = true;
                if (!val.fRight) (out["!outline"] || (out["!outline"] = {})).left = true;
                break;
              // TODO
              case 224:
                XFs.push(val);
                break;
              case 430:
                supbooks.push([val]);
                supbooks[supbooks.length - 1].XTI = [];
                break;
              case 35:
              case 547:
                supbooks[supbooks.length - 1].push(val);
                break;
              case 24:
              case 536:
                last_lbl = {
                  Name: val.Name,
                  Ref: stringify_formula(val.rgce, range, null, supbooks, opts)
                };
                if (val.itab > 0) last_lbl.Sheet = val.itab - 1;
                supbooks.names.push(last_lbl);
                if (!supbooks[0]) {
                  supbooks[0] = [];
                  supbooks[0].XTI = [];
                }
                supbooks[supbooks.length - 1].push(val);
                if (val.Name == "_xlnm._FilterDatabase" && val.itab > 0) {
                  if (val.rgce && val.rgce[0] && val.rgce[0][0] && val.rgce[0][0][0] == "PtgArea3d")
                    FilterDatabases[val.itab - 1] = { ref: encode_range(val.rgce[0][0][1][2]) };
                }
                break;
              case 22:
                opts.ExternCount = val;
                break;
              case 23:
                if (supbooks.length == 0) {
                  supbooks[0] = [];
                  supbooks[0].XTI = [];
                }
                supbooks[supbooks.length - 1].XTI = supbooks[supbooks.length - 1].XTI.concat(val);
                supbooks.XTI = supbooks.XTI.concat(val);
                break;
              case 2196:
                if (opts.biff < 8) break;
                if (last_lbl != null) last_lbl.Comment = val[1];
                break;
              case 18:
                out["!protect"] = val;
                break;
              /* for sheet or book */
              case 19:
                if (val !== 0 && opts.WTF) console.error("Password verifier: " + val);
                break;
              case 133:
                {
                  Directory[val.pos] = val;
                  opts.snames.push(val.name);
                }
                break;
              case 10:
                {
                  if (--file_depth) break;
                  if (range.e) {
                    if (range.e.r > 0 && range.e.c > 0) {
                      range.e.r--;
                      range.e.c--;
                      out["!ref"] = encode_range(range);
                      if (options.sheetRows && options.sheetRows <= range.e.r) {
                        var tmpri = range.e.r;
                        range.e.r = options.sheetRows - 1;
                        out["!fullref"] = out["!ref"];
                        out["!ref"] = encode_range(range);
                        range.e.r = tmpri;
                      }
                      range.e.r++;
                      range.e.c++;
                    }
                    if (merges.length > 0) out["!merges"] = merges;
                    if (objects.length > 0) out["!objects"] = objects;
                    if (colinfo.length > 0) out["!cols"] = colinfo;
                    if (rowinfo.length > 0) out["!rows"] = rowinfo;
                    Workbook.Sheets.push(wsprops);
                  }
                  if (cur_sheet === "") Preamble = out;
                  else Sheets[cur_sheet] = out;
                  out = options.dense ? [] : {};
                }
                break;
              case 9:
              case 521:
              case 1033:
              case 2057:
                {
                  if (opts.biff === 8) opts.biff = {
                    9: 2,
                    521: 3,
                    1033: 4
                  }[RecordType] || {
                    512: 2,
                    768: 3,
                    1024: 4,
                    1280: 5,
                    1536: 8,
                    2: 2,
                    7: 2
                  }[val.BIFFVer] || 8;
                  opts.biffguess = val.BIFFVer == 0;
                  if (val.BIFFVer == 0 && val.dt == 4096) {
                    opts.biff = 5;
                    seen_codepage = true;
                    set_cp(opts.codepage = 28591);
                  }
                  if (opts.biff == 8 && val.BIFFVer == 0 && val.dt == 16) opts.biff = 2;
                  if (file_depth++) break;
                  out = options.dense ? [] : {};
                  if (opts.biff < 8 && !seen_codepage) {
                    seen_codepage = true;
                    set_cp(opts.codepage = options.codepage || 1252);
                  }
                  if (opts.biff < 5 || val.BIFFVer == 0 && val.dt == 4096) {
                    if (cur_sheet === "") cur_sheet = "Sheet1";
                    range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
                    var fakebs8 = { pos: blob.l - length, name: cur_sheet };
                    Directory[fakebs8.pos] = fakebs8;
                    opts.snames.push(cur_sheet);
                  } else cur_sheet = (Directory[s3] || { name: "" }).name;
                  if (val.dt == 32) out["!type"] = "chart";
                  if (val.dt == 64) out["!type"] = "macro";
                  merges = [];
                  objects = [];
                  opts.arrayf = arrayf = [];
                  colinfo = [];
                  rowinfo = [];
                  seencol = false;
                  wsprops = { Hidden: (Directory[s3] || { hs: 0 }).hs, name: cur_sheet };
                }
                break;
              case 515:
              case 3:
              case 2:
                {
                  if (out["!type"] == "chart") {
                    if (options.dense ? (out[val.r] || [])[val.c] : out[encode_cell({ c: val.c, r: val.r })]) ++val.c;
                  }
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe] || {}, v: val.val, t: "n" };
                  if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case 5:
              case 517:
                {
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.val, t: val.t };
                  if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case 638:
                {
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], v: val.rknum, t: "n" };
                  if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case 189:
                {
                  for (var j3 = val.c; j3 <= val.C; ++j3) {
                    var ixfe = val.rkrec[j3 - val.c][0];
                    temp_val = { ixfe, XF: XFs[ixfe], v: val.rkrec[j3 - val.c][1], t: "n" };
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: j3, r: val.r }, temp_val, options);
                  }
                }
                break;
              case 6:
              case 518:
              case 1030:
                {
                  if (val.val == "String") {
                    last_formula = val;
                    break;
                  }
                  temp_val = make_cell(val.val, val.cell.ixfe, val.tt);
                  temp_val.XF = XFs[temp_val.ixfe];
                  if (options.cellFormula) {
                    var _f = val.formula;
                    if (_f && _f[0] && _f[0][0] && _f[0][0][0] == "PtgExp") {
                      var _fr = _f[0][0][1][0], _fc = _f[0][0][1][1];
                      var _fe = encode_cell({ r: _fr, c: _fc });
                      if (sharedf[_fe]) temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                      else temp_val.F = ((options.dense ? (out[_fr] || [])[_fc] : out[_fe]) || {}).F;
                    } else temp_val.f = "" + stringify_formula(val.formula, range, val.cell, supbooks, opts);
                  }
                  if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell(val.cell, temp_val, options);
                  last_formula = val;
                }
                break;
              case 7:
              case 519:
                {
                  if (last_formula) {
                    last_formula.val = val;
                    temp_val = make_cell(val, last_formula.cell.ixfe, "s");
                    temp_val.XF = XFs[temp_val.ixfe];
                    if (options.cellFormula) {
                      temp_val.f = "" + stringify_formula(last_formula.formula, range, last_formula.cell, supbooks, opts);
                    }
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell(last_formula.cell, temp_val, options);
                    last_formula = null;
                  } else throw new Error("String record expects Formula");
                }
                break;
              case 33:
              case 545:
                {
                  arrayf.push(val);
                  var _arraystart = encode_cell(val[0].s);
                  cc = options.dense ? (out[val[0].s.r] || [])[val[0].s.c] : out[_arraystart];
                  if (options.cellFormula && cc) {
                    if (!last_formula) break;
                    if (!_arraystart || !cc) break;
                    cc.f = "" + stringify_formula(val[1], range, val[0], supbooks, opts);
                    cc.F = encode_range(val[0]);
                  }
                }
                break;
              case 1212:
                {
                  if (!options.cellFormula) break;
                  if (last_cell) {
                    if (!last_formula) break;
                    sharedf[encode_cell(last_formula.cell)] = val[0];
                    cc = options.dense ? (out[last_formula.cell.r] || [])[last_formula.cell.c] : out[encode_cell(last_formula.cell)];
                    (cc || {}).f = "" + stringify_formula(val[0], range, lastcell, supbooks, opts);
                  }
                }
                break;
              case 253:
                temp_val = make_cell(sst[val.isst].t, val.ixfe, "s");
                if (sst[val.isst].h) temp_val.h = sst[val.isst].h;
                temp_val.XF = XFs[temp_val.ixfe];
                if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({ c: val.c, r: val.r }, temp_val, options);
                break;
              case 513:
                if (options.sheetStubs) {
                  temp_val = { ixfe: val.ixfe, XF: XFs[val.ixfe], t: "z" };
                  if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                  safe_format_xf(temp_val, options, wb.opts.Date1904);
                  addcell({ c: val.c, r: val.r }, temp_val, options);
                }
                break;
              case 190:
                if (options.sheetStubs) {
                  for (var _j = val.c; _j <= val.C; ++_j) {
                    var _ixfe = val.ixfe[_j - val.c];
                    temp_val = { ixfe: _ixfe, XF: XFs[_ixfe], t: "z" };
                    if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                    safe_format_xf(temp_val, options, wb.opts.Date1904);
                    addcell({ c: _j, r: val.r }, temp_val, options);
                  }
                }
                break;
              case 214:
              case 516:
              case 4:
                temp_val = make_cell(val.val, val.ixfe, "s");
                temp_val.XF = XFs[temp_val.ixfe];
                if (BIFF2Fmt > 0) temp_val.z = BIFF2FmtTable[temp_val.ixfe >> 8 & 63];
                safe_format_xf(temp_val, options, wb.opts.Date1904);
                addcell({ c: val.c, r: val.r }, temp_val, options);
                break;
              case 0:
              case 512:
                {
                  if (file_depth === 1) range = val;
                }
                break;
              case 252:
                {
                  sst = val;
                }
                break;
              case 1054:
                {
                  if (opts.biff == 4) {
                    BIFF2FmtTable[BIFF2Fmt++] = val[1];
                    for (var b4idx = 0; b4idx < BIFF2Fmt + 163; ++b4idx) if (table_fmt[b4idx] == val[1]) break;
                    if (b4idx >= 163) SSF_load(val[1], BIFF2Fmt + 163);
                  } else SSF_load(val[1], val[0]);
                }
                break;
              case 30:
                {
                  BIFF2FmtTable[BIFF2Fmt++] = val;
                  for (var b2idx = 0; b2idx < BIFF2Fmt + 163; ++b2idx) if (table_fmt[b2idx] == val) break;
                  if (b2idx >= 163) SSF_load(val, BIFF2Fmt + 163);
                }
                break;
              case 229:
                merges = merges.concat(val);
                break;
              case 93:
                objects[val.cmo[0]] = opts.lastobj = val;
                break;
              case 438:
                opts.lastobj.TxO = val;
                break;
              case 127:
                opts.lastobj.ImData = val;
                break;
              case 440:
                {
                  for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                    for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                      cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                      if (cc) cc.l = val[1];
                    }
                }
                break;
              case 2048:
                {
                  for (rngR = val[0].s.r; rngR <= val[0].e.r; ++rngR)
                    for (rngC = val[0].s.c; rngC <= val[0].e.c; ++rngC) {
                      cc = options.dense ? (out[rngR] || [])[rngC] : out[encode_cell({ c: rngC, r: rngR })];
                      if (cc && cc.l) cc.l.Tooltip = val[1];
                    }
                }
                break;
              case 28:
                {
                  if (opts.biff <= 5 && opts.biff >= 2) break;
                  cc = options.dense ? (out[val[0].r] || [])[val[0].c] : out[encode_cell(val[0])];
                  var noteobj = objects[val[2]];
                  if (!cc) {
                    if (options.dense) {
                      if (!out[val[0].r]) out[val[0].r] = [];
                      cc = out[val[0].r][val[0].c] = { t: "z" };
                    } else {
                      cc = out[encode_cell(val[0])] = { t: "z" };
                    }
                    range.e.r = Math.max(range.e.r, val[0].r);
                    range.s.r = Math.min(range.s.r, val[0].r);
                    range.e.c = Math.max(range.e.c, val[0].c);
                    range.s.c = Math.min(range.s.c, val[0].c);
                  }
                  if (!cc.c) cc.c = [];
                  cmnt = { a: val[1], t: noteobj.TxO.t };
                  cc.c.push(cmnt);
                }
                break;
              case 2173:
                update_xfext(XFs[val.ixfe], val.ext);
                break;
              case 125:
                {
                  if (!opts.cellStyles) break;
                  while (val.e >= val.s) {
                    colinfo[val.e--] = { width: val.w / 256, level: val.level || 0, hidden: !!(val.flags & 1) };
                    if (!seencol) {
                      seencol = true;
                      find_mdw_colw(val.w / 256);
                    }
                    process_col(colinfo[val.e + 1]);
                  }
                }
                break;
              case 520:
                {
                  var rowobj = {};
                  if (val.level != null) {
                    rowinfo[val.r] = rowobj;
                    rowobj.level = val.level;
                  }
                  if (val.hidden) {
                    rowinfo[val.r] = rowobj;
                    rowobj.hidden = true;
                  }
                  if (val.hpt) {
                    rowinfo[val.r] = rowobj;
                    rowobj.hpt = val.hpt;
                    rowobj.hpx = pt2px(val.hpt);
                  }
                }
                break;
              case 38:
              case 39:
              case 40:
              case 41:
                if (!out["!margins"]) default_margins(out["!margins"] = {});
                out["!margins"][{ 38: "left", 39: "right", 40: "top", 41: "bottom" }[RecordType]] = val;
                break;
              case 161:
                if (!out["!margins"]) default_margins(out["!margins"] = {});
                out["!margins"].header = val.header;
                out["!margins"].footer = val.footer;
                break;
              case 574:
                if (val.RTL) Workbook.Views[0].RTL = true;
                break;
              case 146:
                palette = val;
                break;
              case 2198:
                themes = val;
                break;
              case 140:
                country = val;
                break;
              case 442:
                {
                  if (!cur_sheet) Workbook.WBProps.CodeName = val || "ThisWorkbook";
                  else wsprops.CodeName = val || wsprops.name;
                }
                break;
            }
          } else {
            if (!R2) console.error("Missing Info for XLS Record 0x" + RecordType.toString(16));
            blob.l += length;
          }
        }
        wb.SheetNames = keys(Directory).sort(function(a2, b3) {
          return Number(a2) - Number(b3);
        }).map(function(x3) {
          return Directory[x3].name;
        });
        if (!options.bookSheets) wb.Sheets = Sheets;
        if (!wb.SheetNames.length && Preamble["!ref"]) {
          wb.SheetNames.push("Sheet1");
          if (wb.Sheets) wb.Sheets["Sheet1"] = Preamble;
        } else wb.Preamble = Preamble;
        if (wb.Sheets) FilterDatabases.forEach(function(r3, i3) {
          wb.Sheets[wb.SheetNames[i3]]["!autofilter"] = r3;
        });
        wb.Strings = sst;
        wb.SSF = dup(table_fmt);
        if (opts.enc) wb.Encryption = opts.enc;
        if (themes) wb.Themes = themes;
        wb.Metadata = {};
        if (country !== void 0) wb.Metadata.Country = country;
        if (supbooks.names.length > 0) Workbook.Names = supbooks.names;
        wb.Workbook = Workbook;
        return wb;
      }
      var PSCLSID = {
        SI: "e0859ff2f94f6810ab9108002b27b3d9",
        DSI: "02d5cdd59c2e1b10939708002b2cf9ae",
        UDI: "05d5cdd59c2e1b10939708002b2cf9ae"
      };
      function parse_xls_props(cfb, props, o3) {
        var DSI = CFB.find(cfb, "/!DocumentSummaryInformation");
        if (DSI && DSI.size > 0) try {
          var DocSummary = parse_PropertySetStream(DSI, DocSummaryPIDDSI, PSCLSID.DSI);
          for (var d3 in DocSummary) props[d3] = DocSummary[d3];
        } catch (e3) {
          if (o3.WTF) throw e3;
        }
        var SI = CFB.find(cfb, "/!SummaryInformation");
        if (SI && SI.size > 0) try {
          var Summary = parse_PropertySetStream(SI, SummaryPIDSI, PSCLSID.SI);
          for (var s3 in Summary) if (props[s3] == null) props[s3] = Summary[s3];
        } catch (e3) {
          if (o3.WTF) throw e3;
        }
        if (props.HeadingPairs && props.TitlesOfParts) {
          load_props_pairs(props.HeadingPairs, props.TitlesOfParts, props, o3);
          delete props.HeadingPairs;
          delete props.TitlesOfParts;
        }
      }
      function write_xls_props(wb, cfb) {
        var DSEntries = [], SEntries = [], CEntries = [];
        var i3 = 0, Keys;
        var DocSummaryRE = evert_key(DocSummaryPIDDSI, "n");
        var SummaryRE = evert_key(SummaryPIDSI, "n");
        if (wb.Props) {
          Keys = keys(wb.Props);
          for (i3 = 0; i3 < Keys.length; ++i3) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i3]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i3]) ? SEntries : CEntries).push([Keys[i3], wb.Props[Keys[i3]]]);
        }
        if (wb.Custprops) {
          Keys = keys(wb.Custprops);
          for (i3 = 0; i3 < Keys.length; ++i3) if (!Object.prototype.hasOwnProperty.call(wb.Props || {}, Keys[i3])) (Object.prototype.hasOwnProperty.call(DocSummaryRE, Keys[i3]) ? DSEntries : Object.prototype.hasOwnProperty.call(SummaryRE, Keys[i3]) ? SEntries : CEntries).push([Keys[i3], wb.Custprops[Keys[i3]]]);
        }
        var CEntries2 = [];
        for (i3 = 0; i3 < CEntries.length; ++i3) {
          if (XLSPSSkip.indexOf(CEntries[i3][0]) > -1 || PseudoPropsPairs.indexOf(CEntries[i3][0]) > -1) continue;
          if (CEntries[i3][1] == null) continue;
          CEntries2.push(CEntries[i3]);
        }
        if (SEntries.length) CFB.utils.cfb_add(cfb, "/SummaryInformation", write_PropertySetStream(SEntries, PSCLSID.SI, SummaryRE, SummaryPIDSI));
        if (DSEntries.length || CEntries2.length) CFB.utils.cfb_add(cfb, "/DocumentSummaryInformation", write_PropertySetStream(DSEntries, PSCLSID.DSI, DocSummaryRE, DocSummaryPIDDSI, CEntries2.length ? CEntries2 : null, PSCLSID.UDI));
      }
      function parse_xlscfb(cfb, options) {
        if (!options) options = {};
        fix_read_opts(options);
        reset_cp();
        if (options.codepage) set_ansi(options.codepage);
        var CompObj, WB;
        if (cfb.FullPaths) {
          if (CFB.find(cfb, "/encryption")) throw new Error("File is password-protected");
          CompObj = CFB.find(cfb, "!CompObj");
          WB = CFB.find(cfb, "/Workbook") || CFB.find(cfb, "/Book");
        } else {
          switch (options.type) {
            case "base64":
              cfb = s2a(Base64_decode(cfb));
              break;
            case "binary":
              cfb = s2a(cfb);
              break;
            case "buffer":
              break;
            case "array":
              if (!Array.isArray(cfb)) cfb = Array.prototype.slice.call(cfb);
              break;
          }
          prep_blob(cfb, 0);
          WB = { content: cfb };
        }
        var WorkbookP;
        var _data;
        if (CompObj) parse_compobj(CompObj);
        if (options.bookProps && !options.bookSheets) WorkbookP = {};
        else {
          var T3 = has_buf ? "buffer" : "array";
          if (WB && WB.content) WorkbookP = parse_workbook(WB.content, options);
          else if ((_data = CFB.find(cfb, "PerfectOffice_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T3, options));
          else if ((_data = CFB.find(cfb, "NativeContent_MAIN")) && _data.content) WorkbookP = WK_.to_workbook(_data.content, (options.type = T3, options));
          else if ((_data = CFB.find(cfb, "MN0")) && _data.content) throw new Error("Unsupported Works 4 for Mac file");
          else throw new Error("Cannot find Workbook stream");
          if (options.bookVBA && cfb.FullPaths && CFB.find(cfb, "/_VBA_PROJECT_CUR/VBA/dir")) WorkbookP.vbaraw = make_vba_xls(cfb);
        }
        var props = {};
        if (cfb.FullPaths) parse_xls_props(cfb, props, options);
        WorkbookP.Props = WorkbookP.Custprops = props;
        if (options.bookFiles) WorkbookP.cfb = cfb;
        return WorkbookP;
      }
      function write_xlscfb(wb, opts) {
        var o3 = opts || {};
        var cfb = CFB.utils.cfb_new({ root: "R" });
        var wbpath = "/Workbook";
        switch (o3.bookType || "xls") {
          case "xls":
            o3.bookType = "biff8";
          /* falls through */
          case "xla":
            if (!o3.bookType) o3.bookType = "xla";
          /* falls through */
          case "biff8":
            wbpath = "/Workbook";
            o3.biff = 8;
            break;
          case "biff5":
            wbpath = "/Book";
            o3.biff = 5;
            break;
          default:
            throw new Error("invalid type " + o3.bookType + " for XLS CFB");
        }
        CFB.utils.cfb_add(cfb, wbpath, write_biff_buf(wb, o3));
        if (o3.biff == 8 && (wb.Props || wb.Custprops)) write_xls_props(wb, cfb);
        if (o3.biff == 8 && wb.vbaraw) fill_vba_xls(cfb, CFB.read(wb.vbaraw, { type: typeof wb.vbaraw == "string" ? "binary" : "buffer" }));
        return cfb;
      }
      var XLSBRecordEnum = {
        0: {
          /* n:"BrtRowHdr", */
          f: parse_BrtRowHdr
        },
        1: {
          /* n:"BrtCellBlank", */
          f: parse_BrtCellBlank
        },
        2: {
          /* n:"BrtCellRk", */
          f: parse_BrtCellRk
        },
        3: {
          /* n:"BrtCellError", */
          f: parse_BrtCellError
        },
        4: {
          /* n:"BrtCellBool", */
          f: parse_BrtCellBool
        },
        5: {
          /* n:"BrtCellReal", */
          f: parse_BrtCellReal
        },
        6: {
          /* n:"BrtCellSt", */
          f: parse_BrtCellSt
        },
        7: {
          /* n:"BrtCellIsst", */
          f: parse_BrtCellIsst
        },
        8: {
          /* n:"BrtFmlaString", */
          f: parse_BrtFmlaString
        },
        9: {
          /* n:"BrtFmlaNum", */
          f: parse_BrtFmlaNum
        },
        10: {
          /* n:"BrtFmlaBool", */
          f: parse_BrtFmlaBool
        },
        11: {
          /* n:"BrtFmlaError", */
          f: parse_BrtFmlaError
        },
        12: {
          /* n:"BrtShortBlank", */
          f: parse_BrtShortBlank
        },
        13: {
          /* n:"BrtShortRk", */
          f: parse_BrtShortRk
        },
        14: {
          /* n:"BrtShortError", */
          f: parse_BrtShortError
        },
        15: {
          /* n:"BrtShortBool", */
          f: parse_BrtShortBool
        },
        16: {
          /* n:"BrtShortReal", */
          f: parse_BrtShortReal
        },
        17: {
          /* n:"BrtShortSt", */
          f: parse_BrtShortSt
        },
        18: {
          /* n:"BrtShortIsst", */
          f: parse_BrtShortIsst
        },
        19: {
          /* n:"BrtSSTItem", */
          f: parse_RichStr
        },
        20: {
          /* n:"BrtPCDIMissing" */
        },
        21: {
          /* n:"BrtPCDINumber" */
        },
        22: {
          /* n:"BrtPCDIBoolean" */
        },
        23: {
          /* n:"BrtPCDIError" */
        },
        24: {
          /* n:"BrtPCDIString" */
        },
        25: {
          /* n:"BrtPCDIDatetime" */
        },
        26: {
          /* n:"BrtPCDIIndex" */
        },
        27: {
          /* n:"BrtPCDIAMissing" */
        },
        28: {
          /* n:"BrtPCDIANumber" */
        },
        29: {
          /* n:"BrtPCDIABoolean" */
        },
        30: {
          /* n:"BrtPCDIAError" */
        },
        31: {
          /* n:"BrtPCDIAString" */
        },
        32: {
          /* n:"BrtPCDIADatetime" */
        },
        33: {
          /* n:"BrtPCRRecord" */
        },
        34: {
          /* n:"BrtPCRRecordDt" */
        },
        35: {
          /* n:"BrtFRTBegin", */
          T: 1
        },
        36: {
          /* n:"BrtFRTEnd", */
          T: -1
        },
        37: {
          /* n:"BrtACBegin", */
          T: 1
        },
        38: {
          /* n:"BrtACEnd", */
          T: -1
        },
        39: {
          /* n:"BrtName", */
          f: parse_BrtName
        },
        40: {
          /* n:"BrtIndexRowBlock" */
        },
        42: {
          /* n:"BrtIndexBlock" */
        },
        43: {
          /* n:"BrtFont", */
          f: parse_BrtFont
        },
        44: {
          /* n:"BrtFmt", */
          f: parse_BrtFmt
        },
        45: {
          /* n:"BrtFill", */
          f: parse_BrtFill
        },
        46: {
          /* n:"BrtBorder", */
          f: parse_BrtBorder
        },
        47: {
          /* n:"BrtXF", */
          f: parse_BrtXF
        },
        48: {
          /* n:"BrtStyle" */
        },
        49: {
          /* n:"BrtCellMeta", */
          f: parse_Int32LE
        },
        50: {
          /* n:"BrtValueMeta" */
        },
        51: {
          /* n:"BrtMdb" */
          f: parse_BrtMdb
        },
        52: {
          /* n:"BrtBeginFmd", */
          T: 1
        },
        53: {
          /* n:"BrtEndFmd", */
          T: -1
        },
        54: {
          /* n:"BrtBeginMdx", */
          T: 1
        },
        55: {
          /* n:"BrtEndMdx", */
          T: -1
        },
        56: {
          /* n:"BrtBeginMdxTuple", */
          T: 1
        },
        57: {
          /* n:"BrtEndMdxTuple", */
          T: -1
        },
        58: {
          /* n:"BrtMdxMbrIstr" */
        },
        59: {
          /* n:"BrtStr" */
        },
        60: {
          /* n:"BrtColInfo", */
          f: parse_ColInfo
        },
        62: {
          /* n:"BrtCellRString", */
          f: parse_BrtCellRString
        },
        63: {
          /* n:"BrtCalcChainItem$", */
          f: parse_BrtCalcChainItem$
        },
        64: {
          /* n:"BrtDVal", */
          f: parse_BrtDVal
        },
        65: {
          /* n:"BrtSxvcellNum" */
        },
        66: {
          /* n:"BrtSxvcellStr" */
        },
        67: {
          /* n:"BrtSxvcellBool" */
        },
        68: {
          /* n:"BrtSxvcellErr" */
        },
        69: {
          /* n:"BrtSxvcellDate" */
        },
        70: {
          /* n:"BrtSxvcellNil" */
        },
        128: {
          /* n:"BrtFileVersion" */
        },
        129: {
          /* n:"BrtBeginSheet", */
          T: 1
        },
        130: {
          /* n:"BrtEndSheet", */
          T: -1
        },
        131: {
          /* n:"BrtBeginBook", */
          T: 1,
          f: parsenoop,
          p: 0
        },
        132: {
          /* n:"BrtEndBook", */
          T: -1
        },
        133: {
          /* n:"BrtBeginWsViews", */
          T: 1
        },
        134: {
          /* n:"BrtEndWsViews", */
          T: -1
        },
        135: {
          /* n:"BrtBeginBookViews", */
          T: 1
        },
        136: {
          /* n:"BrtEndBookViews", */
          T: -1
        },
        137: {
          /* n:"BrtBeginWsView", */
          T: 1,
          f: parse_BrtBeginWsView
        },
        138: {
          /* n:"BrtEndWsView", */
          T: -1
        },
        139: {
          /* n:"BrtBeginCsViews", */
          T: 1
        },
        140: {
          /* n:"BrtEndCsViews", */
          T: -1
        },
        141: {
          /* n:"BrtBeginCsView", */
          T: 1
        },
        142: {
          /* n:"BrtEndCsView", */
          T: -1
        },
        143: {
          /* n:"BrtBeginBundleShs", */
          T: 1
        },
        144: {
          /* n:"BrtEndBundleShs", */
          T: -1
        },
        145: {
          /* n:"BrtBeginSheetData", */
          T: 1
        },
        146: {
          /* n:"BrtEndSheetData", */
          T: -1
        },
        147: {
          /* n:"BrtWsProp", */
          f: parse_BrtWsProp
        },
        148: {
          /* n:"BrtWsDim", */
          f: parse_BrtWsDim,
          p: 16
        },
        151: {
          /* n:"BrtPane", */
          f: parse_BrtPane
        },
        152: {
          /* n:"BrtSel" */
        },
        153: {
          /* n:"BrtWbProp", */
          f: parse_BrtWbProp
        },
        154: {
          /* n:"BrtWbFactoid" */
        },
        155: {
          /* n:"BrtFileRecover" */
        },
        156: {
          /* n:"BrtBundleSh", */
          f: parse_BrtBundleSh
        },
        157: {
          /* n:"BrtCalcProp" */
        },
        158: {
          /* n:"BrtBookView" */
        },
        159: {
          /* n:"BrtBeginSst", */
          T: 1,
          f: parse_BrtBeginSst
        },
        160: {
          /* n:"BrtEndSst", */
          T: -1
        },
        161: {
          /* n:"BrtBeginAFilter", */
          T: 1,
          f: parse_UncheckedRfX
        },
        162: {
          /* n:"BrtEndAFilter", */
          T: -1
        },
        163: {
          /* n:"BrtBeginFilterColumn", */
          T: 1
        },
        164: {
          /* n:"BrtEndFilterColumn", */
          T: -1
        },
        165: {
          /* n:"BrtBeginFilters", */
          T: 1
        },
        166: {
          /* n:"BrtEndFilters", */
          T: -1
        },
        167: {
          /* n:"BrtFilter" */
        },
        168: {
          /* n:"BrtColorFilter" */
        },
        169: {
          /* n:"BrtIconFilter" */
        },
        170: {
          /* n:"BrtTop10Filter" */
        },
        171: {
          /* n:"BrtDynamicFilter" */
        },
        172: {
          /* n:"BrtBeginCustomFilters", */
          T: 1
        },
        173: {
          /* n:"BrtEndCustomFilters", */
          T: -1
        },
        174: {
          /* n:"BrtCustomFilter" */
        },
        175: {
          /* n:"BrtAFilterDateGroupItem" */
        },
        176: {
          /* n:"BrtMergeCell", */
          f: parse_BrtMergeCell
        },
        177: {
          /* n:"BrtBeginMergeCells", */
          T: 1
        },
        178: {
          /* n:"BrtEndMergeCells", */
          T: -1
        },
        179: {
          /* n:"BrtBeginPivotCacheDef", */
          T: 1
        },
        180: {
          /* n:"BrtEndPivotCacheDef", */
          T: -1
        },
        181: {
          /* n:"BrtBeginPCDFields", */
          T: 1
        },
        182: {
          /* n:"BrtEndPCDFields", */
          T: -1
        },
        183: {
          /* n:"BrtBeginPCDField", */
          T: 1
        },
        184: {
          /* n:"BrtEndPCDField", */
          T: -1
        },
        185: {
          /* n:"BrtBeginPCDSource", */
          T: 1
        },
        186: {
          /* n:"BrtEndPCDSource", */
          T: -1
        },
        187: {
          /* n:"BrtBeginPCDSRange", */
          T: 1
        },
        188: {
          /* n:"BrtEndPCDSRange", */
          T: -1
        },
        189: {
          /* n:"BrtBeginPCDFAtbl", */
          T: 1
        },
        190: {
          /* n:"BrtEndPCDFAtbl", */
          T: -1
        },
        191: {
          /* n:"BrtBeginPCDIRun", */
          T: 1
        },
        192: {
          /* n:"BrtEndPCDIRun", */
          T: -1
        },
        193: {
          /* n:"BrtBeginPivotCacheRecords", */
          T: 1
        },
        194: {
          /* n:"BrtEndPivotCacheRecords", */
          T: -1
        },
        195: {
          /* n:"BrtBeginPCDHierarchies", */
          T: 1
        },
        196: {
          /* n:"BrtEndPCDHierarchies", */
          T: -1
        },
        197: {
          /* n:"BrtBeginPCDHierarchy", */
          T: 1
        },
        198: {
          /* n:"BrtEndPCDHierarchy", */
          T: -1
        },
        199: {
          /* n:"BrtBeginPCDHFieldsUsage", */
          T: 1
        },
        200: {
          /* n:"BrtEndPCDHFieldsUsage", */
          T: -1
        },
        201: {
          /* n:"BrtBeginExtConnection", */
          T: 1
        },
        202: {
          /* n:"BrtEndExtConnection", */
          T: -1
        },
        203: {
          /* n:"BrtBeginECDbProps", */
          T: 1
        },
        204: {
          /* n:"BrtEndECDbProps", */
          T: -1
        },
        205: {
          /* n:"BrtBeginECOlapProps", */
          T: 1
        },
        206: {
          /* n:"BrtEndECOlapProps", */
          T: -1
        },
        207: {
          /* n:"BrtBeginPCDSConsol", */
          T: 1
        },
        208: {
          /* n:"BrtEndPCDSConsol", */
          T: -1
        },
        209: {
          /* n:"BrtBeginPCDSCPages", */
          T: 1
        },
        210: {
          /* n:"BrtEndPCDSCPages", */
          T: -1
        },
        211: {
          /* n:"BrtBeginPCDSCPage", */
          T: 1
        },
        212: {
          /* n:"BrtEndPCDSCPage", */
          T: -1
        },
        213: {
          /* n:"BrtBeginPCDSCPItem", */
          T: 1
        },
        214: {
          /* n:"BrtEndPCDSCPItem", */
          T: -1
        },
        215: {
          /* n:"BrtBeginPCDSCSets", */
          T: 1
        },
        216: {
          /* n:"BrtEndPCDSCSets", */
          T: -1
        },
        217: {
          /* n:"BrtBeginPCDSCSet", */
          T: 1
        },
        218: {
          /* n:"BrtEndPCDSCSet", */
          T: -1
        },
        219: {
          /* n:"BrtBeginPCDFGroup", */
          T: 1
        },
        220: {
          /* n:"BrtEndPCDFGroup", */
          T: -1
        },
        221: {
          /* n:"BrtBeginPCDFGItems", */
          T: 1
        },
        222: {
          /* n:"BrtEndPCDFGItems", */
          T: -1
        },
        223: {
          /* n:"BrtBeginPCDFGRange", */
          T: 1
        },
        224: {
          /* n:"BrtEndPCDFGRange", */
          T: -1
        },
        225: {
          /* n:"BrtBeginPCDFGDiscrete", */
          T: 1
        },
        226: {
          /* n:"BrtEndPCDFGDiscrete", */
          T: -1
        },
        227: {
          /* n:"BrtBeginPCDSDTupleCache", */
          T: 1
        },
        228: {
          /* n:"BrtEndPCDSDTupleCache", */
          T: -1
        },
        229: {
          /* n:"BrtBeginPCDSDTCEntries", */
          T: 1
        },
        230: {
          /* n:"BrtEndPCDSDTCEntries", */
          T: -1
        },
        231: {
          /* n:"BrtBeginPCDSDTCEMembers", */
          T: 1
        },
        232: {
          /* n:"BrtEndPCDSDTCEMembers", */
          T: -1
        },
        233: {
          /* n:"BrtBeginPCDSDTCEMember", */
          T: 1
        },
        234: {
          /* n:"BrtEndPCDSDTCEMember", */
          T: -1
        },
        235: {
          /* n:"BrtBeginPCDSDTCQueries", */
          T: 1
        },
        236: {
          /* n:"BrtEndPCDSDTCQueries", */
          T: -1
        },
        237: {
          /* n:"BrtBeginPCDSDTCQuery", */
          T: 1
        },
        238: {
          /* n:"BrtEndPCDSDTCQuery", */
          T: -1
        },
        239: {
          /* n:"BrtBeginPCDSDTCSets", */
          T: 1
        },
        240: {
          /* n:"BrtEndPCDSDTCSets", */
          T: -1
        },
        241: {
          /* n:"BrtBeginPCDSDTCSet", */
          T: 1
        },
        242: {
          /* n:"BrtEndPCDSDTCSet", */
          T: -1
        },
        243: {
          /* n:"BrtBeginPCDCalcItems", */
          T: 1
        },
        244: {
          /* n:"BrtEndPCDCalcItems", */
          T: -1
        },
        245: {
          /* n:"BrtBeginPCDCalcItem", */
          T: 1
        },
        246: {
          /* n:"BrtEndPCDCalcItem", */
          T: -1
        },
        247: {
          /* n:"BrtBeginPRule", */
          T: 1
        },
        248: {
          /* n:"BrtEndPRule", */
          T: -1
        },
        249: {
          /* n:"BrtBeginPRFilters", */
          T: 1
        },
        250: {
          /* n:"BrtEndPRFilters", */
          T: -1
        },
        251: {
          /* n:"BrtBeginPRFilter", */
          T: 1
        },
        252: {
          /* n:"BrtEndPRFilter", */
          T: -1
        },
        253: {
          /* n:"BrtBeginPNames", */
          T: 1
        },
        254: {
          /* n:"BrtEndPNames", */
          T: -1
        },
        255: {
          /* n:"BrtBeginPName", */
          T: 1
        },
        256: {
          /* n:"BrtEndPName", */
          T: -1
        },
        257: {
          /* n:"BrtBeginPNPairs", */
          T: 1
        },
        258: {
          /* n:"BrtEndPNPairs", */
          T: -1
        },
        259: {
          /* n:"BrtBeginPNPair", */
          T: 1
        },
        260: {
          /* n:"BrtEndPNPair", */
          T: -1
        },
        261: {
          /* n:"BrtBeginECWebProps", */
          T: 1
        },
        262: {
          /* n:"BrtEndECWebProps", */
          T: -1
        },
        263: {
          /* n:"BrtBeginEcWpTables", */
          T: 1
        },
        264: {
          /* n:"BrtEndECWPTables", */
          T: -1
        },
        265: {
          /* n:"BrtBeginECParams", */
          T: 1
        },
        266: {
          /* n:"BrtEndECParams", */
          T: -1
        },
        267: {
          /* n:"BrtBeginECParam", */
          T: 1
        },
        268: {
          /* n:"BrtEndECParam", */
          T: -1
        },
        269: {
          /* n:"BrtBeginPCDKPIs", */
          T: 1
        },
        270: {
          /* n:"BrtEndPCDKPIs", */
          T: -1
        },
        271: {
          /* n:"BrtBeginPCDKPI", */
          T: 1
        },
        272: {
          /* n:"BrtEndPCDKPI", */
          T: -1
        },
        273: {
          /* n:"BrtBeginDims", */
          T: 1
        },
        274: {
          /* n:"BrtEndDims", */
          T: -1
        },
        275: {
          /* n:"BrtBeginDim", */
          T: 1
        },
        276: {
          /* n:"BrtEndDim", */
          T: -1
        },
        277: {
          /* n:"BrtIndexPartEnd" */
        },
        278: {
          /* n:"BrtBeginStyleSheet", */
          T: 1
        },
        279: {
          /* n:"BrtEndStyleSheet", */
          T: -1
        },
        280: {
          /* n:"BrtBeginSXView", */
          T: 1
        },
        281: {
          /* n:"BrtEndSXVI", */
          T: -1
        },
        282: {
          /* n:"BrtBeginSXVI", */
          T: 1
        },
        283: {
          /* n:"BrtBeginSXVIs", */
          T: 1
        },
        284: {
          /* n:"BrtEndSXVIs", */
          T: -1
        },
        285: {
          /* n:"BrtBeginSXVD", */
          T: 1
        },
        286: {
          /* n:"BrtEndSXVD", */
          T: -1
        },
        287: {
          /* n:"BrtBeginSXVDs", */
          T: 1
        },
        288: {
          /* n:"BrtEndSXVDs", */
          T: -1
        },
        289: {
          /* n:"BrtBeginSXPI", */
          T: 1
        },
        290: {
          /* n:"BrtEndSXPI", */
          T: -1
        },
        291: {
          /* n:"BrtBeginSXPIs", */
          T: 1
        },
        292: {
          /* n:"BrtEndSXPIs", */
          T: -1
        },
        293: {
          /* n:"BrtBeginSXDI", */
          T: 1
        },
        294: {
          /* n:"BrtEndSXDI", */
          T: -1
        },
        295: {
          /* n:"BrtBeginSXDIs", */
          T: 1
        },
        296: {
          /* n:"BrtEndSXDIs", */
          T: -1
        },
        297: {
          /* n:"BrtBeginSXLI", */
          T: 1
        },
        298: {
          /* n:"BrtEndSXLI", */
          T: -1
        },
        299: {
          /* n:"BrtBeginSXLIRws", */
          T: 1
        },
        300: {
          /* n:"BrtEndSXLIRws", */
          T: -1
        },
        301: {
          /* n:"BrtBeginSXLICols", */
          T: 1
        },
        302: {
          /* n:"BrtEndSXLICols", */
          T: -1
        },
        303: {
          /* n:"BrtBeginSXFormat", */
          T: 1
        },
        304: {
          /* n:"BrtEndSXFormat", */
          T: -1
        },
        305: {
          /* n:"BrtBeginSXFormats", */
          T: 1
        },
        306: {
          /* n:"BrtEndSxFormats", */
          T: -1
        },
        307: {
          /* n:"BrtBeginSxSelect", */
          T: 1
        },
        308: {
          /* n:"BrtEndSxSelect", */
          T: -1
        },
        309: {
          /* n:"BrtBeginISXVDRws", */
          T: 1
        },
        310: {
          /* n:"BrtEndISXVDRws", */
          T: -1
        },
        311: {
          /* n:"BrtBeginISXVDCols", */
          T: 1
        },
        312: {
          /* n:"BrtEndISXVDCols", */
          T: -1
        },
        313: {
          /* n:"BrtEndSXLocation", */
          T: -1
        },
        314: {
          /* n:"BrtBeginSXLocation", */
          T: 1
        },
        315: {
          /* n:"BrtEndSXView", */
          T: -1
        },
        316: {
          /* n:"BrtBeginSXTHs", */
          T: 1
        },
        317: {
          /* n:"BrtEndSXTHs", */
          T: -1
        },
        318: {
          /* n:"BrtBeginSXTH", */
          T: 1
        },
        319: {
          /* n:"BrtEndSXTH", */
          T: -1
        },
        320: {
          /* n:"BrtBeginISXTHRws", */
          T: 1
        },
        321: {
          /* n:"BrtEndISXTHRws", */
          T: -1
        },
        322: {
          /* n:"BrtBeginISXTHCols", */
          T: 1
        },
        323: {
          /* n:"BrtEndISXTHCols", */
          T: -1
        },
        324: {
          /* n:"BrtBeginSXTDMPS", */
          T: 1
        },
        325: {
          /* n:"BrtEndSXTDMPs", */
          T: -1
        },
        326: {
          /* n:"BrtBeginSXTDMP", */
          T: 1
        },
        327: {
          /* n:"BrtEndSXTDMP", */
          T: -1
        },
        328: {
          /* n:"BrtBeginSXTHItems", */
          T: 1
        },
        329: {
          /* n:"BrtEndSXTHItems", */
          T: -1
        },
        330: {
          /* n:"BrtBeginSXTHItem", */
          T: 1
        },
        331: {
          /* n:"BrtEndSXTHItem", */
          T: -1
        },
        332: {
          /* n:"BrtBeginMetadata", */
          T: 1
        },
        333: {
          /* n:"BrtEndMetadata", */
          T: -1
        },
        334: {
          /* n:"BrtBeginEsmdtinfo", */
          T: 1
        },
        335: {
          /* n:"BrtMdtinfo", */
          f: parse_BrtMdtinfo
        },
        336: {
          /* n:"BrtEndEsmdtinfo", */
          T: -1
        },
        337: {
          /* n:"BrtBeginEsmdb", */
          f: parse_BrtBeginEsmdb,
          T: 1
        },
        338: {
          /* n:"BrtEndEsmdb", */
          T: -1
        },
        339: {
          /* n:"BrtBeginEsfmd", */
          T: 1
        },
        340: {
          /* n:"BrtEndEsfmd", */
          T: -1
        },
        341: {
          /* n:"BrtBeginSingleCells", */
          T: 1
        },
        342: {
          /* n:"BrtEndSingleCells", */
          T: -1
        },
        343: {
          /* n:"BrtBeginList", */
          T: 1
        },
        344: {
          /* n:"BrtEndList", */
          T: -1
        },
        345: {
          /* n:"BrtBeginListCols", */
          T: 1
        },
        346: {
          /* n:"BrtEndListCols", */
          T: -1
        },
        347: {
          /* n:"BrtBeginListCol", */
          T: 1
        },
        348: {
          /* n:"BrtEndListCol", */
          T: -1
        },
        349: {
          /* n:"BrtBeginListXmlCPr", */
          T: 1
        },
        350: {
          /* n:"BrtEndListXmlCPr", */
          T: -1
        },
        351: {
          /* n:"BrtListCCFmla" */
        },
        352: {
          /* n:"BrtListTrFmla" */
        },
        353: {
          /* n:"BrtBeginExternals", */
          T: 1
        },
        354: {
          /* n:"BrtEndExternals", */
          T: -1
        },
        355: {
          /* n:"BrtSupBookSrc", */
          f: parse_RelID
        },
        357: {
          /* n:"BrtSupSelf" */
        },
        358: {
          /* n:"BrtSupSame" */
        },
        359: {
          /* n:"BrtSupTabs" */
        },
        360: {
          /* n:"BrtBeginSupBook", */
          T: 1
        },
        361: {
          /* n:"BrtPlaceholderName" */
        },
        362: {
          /* n:"BrtExternSheet", */
          f: parse_ExternSheet
        },
        363: {
          /* n:"BrtExternTableStart" */
        },
        364: {
          /* n:"BrtExternTableEnd" */
        },
        366: {
          /* n:"BrtExternRowHdr" */
        },
        367: {
          /* n:"BrtExternCellBlank" */
        },
        368: {
          /* n:"BrtExternCellReal" */
        },
        369: {
          /* n:"BrtExternCellBool" */
        },
        370: {
          /* n:"BrtExternCellError" */
        },
        371: {
          /* n:"BrtExternCellString" */
        },
        372: {
          /* n:"BrtBeginEsmdx", */
          T: 1
        },
        373: {
          /* n:"BrtEndEsmdx", */
          T: -1
        },
        374: {
          /* n:"BrtBeginMdxSet", */
          T: 1
        },
        375: {
          /* n:"BrtEndMdxSet", */
          T: -1
        },
        376: {
          /* n:"BrtBeginMdxMbrProp", */
          T: 1
        },
        377: {
          /* n:"BrtEndMdxMbrProp", */
          T: -1
        },
        378: {
          /* n:"BrtBeginMdxKPI", */
          T: 1
        },
        379: {
          /* n:"BrtEndMdxKPI", */
          T: -1
        },
        380: {
          /* n:"BrtBeginEsstr", */
          T: 1
        },
        381: {
          /* n:"BrtEndEsstr", */
          T: -1
        },
        382: {
          /* n:"BrtBeginPRFItem", */
          T: 1
        },
        383: {
          /* n:"BrtEndPRFItem", */
          T: -1
        },
        384: {
          /* n:"BrtBeginPivotCacheIDs", */
          T: 1
        },
        385: {
          /* n:"BrtEndPivotCacheIDs", */
          T: -1
        },
        386: {
          /* n:"BrtBeginPivotCacheID", */
          T: 1
        },
        387: {
          /* n:"BrtEndPivotCacheID", */
          T: -1
        },
        388: {
          /* n:"BrtBeginISXVIs", */
          T: 1
        },
        389: {
          /* n:"BrtEndISXVIs", */
          T: -1
        },
        390: {
          /* n:"BrtBeginColInfos", */
          T: 1
        },
        391: {
          /* n:"BrtEndColInfos", */
          T: -1
        },
        392: {
          /* n:"BrtBeginRwBrk", */
          T: 1
        },
        393: {
          /* n:"BrtEndRwBrk", */
          T: -1
        },
        394: {
          /* n:"BrtBeginColBrk", */
          T: 1
        },
        395: {
          /* n:"BrtEndColBrk", */
          T: -1
        },
        396: {
          /* n:"BrtBrk" */
        },
        397: {
          /* n:"BrtUserBookView" */
        },
        398: {
          /* n:"BrtInfo" */
        },
        399: {
          /* n:"BrtCUsr" */
        },
        400: {
          /* n:"BrtUsr" */
        },
        401: {
          /* n:"BrtBeginUsers", */
          T: 1
        },
        403: {
          /* n:"BrtEOF" */
        },
        404: {
          /* n:"BrtUCR" */
        },
        405: {
          /* n:"BrtRRInsDel" */
        },
        406: {
          /* n:"BrtRREndInsDel" */
        },
        407: {
          /* n:"BrtRRMove" */
        },
        408: {
          /* n:"BrtRREndMove" */
        },
        409: {
          /* n:"BrtRRChgCell" */
        },
        410: {
          /* n:"BrtRREndChgCell" */
        },
        411: {
          /* n:"BrtRRHeader" */
        },
        412: {
          /* n:"BrtRRUserView" */
        },
        413: {
          /* n:"BrtRRRenSheet" */
        },
        414: {
          /* n:"BrtRRInsertSh" */
        },
        415: {
          /* n:"BrtRRDefName" */
        },
        416: {
          /* n:"BrtRRNote" */
        },
        417: {
          /* n:"BrtRRConflict" */
        },
        418: {
          /* n:"BrtRRTQSIF" */
        },
        419: {
          /* n:"BrtRRFormat" */
        },
        420: {
          /* n:"BrtRREndFormat" */
        },
        421: {
          /* n:"BrtRRAutoFmt" */
        },
        422: {
          /* n:"BrtBeginUserShViews", */
          T: 1
        },
        423: {
          /* n:"BrtBeginUserShView", */
          T: 1
        },
        424: {
          /* n:"BrtEndUserShView", */
          T: -1
        },
        425: {
          /* n:"BrtEndUserShViews", */
          T: -1
        },
        426: {
          /* n:"BrtArrFmla", */
          f: parse_BrtArrFmla
        },
        427: {
          /* n:"BrtShrFmla", */
          f: parse_BrtShrFmla
        },
        428: {
          /* n:"BrtTable" */
        },
        429: {
          /* n:"BrtBeginExtConnections", */
          T: 1
        },
        430: {
          /* n:"BrtEndExtConnections", */
          T: -1
        },
        431: {
          /* n:"BrtBeginPCDCalcMems", */
          T: 1
        },
        432: {
          /* n:"BrtEndPCDCalcMems", */
          T: -1
        },
        433: {
          /* n:"BrtBeginPCDCalcMem", */
          T: 1
        },
        434: {
          /* n:"BrtEndPCDCalcMem", */
          T: -1
        },
        435: {
          /* n:"BrtBeginPCDHGLevels", */
          T: 1
        },
        436: {
          /* n:"BrtEndPCDHGLevels", */
          T: -1
        },
        437: {
          /* n:"BrtBeginPCDHGLevel", */
          T: 1
        },
        438: {
          /* n:"BrtEndPCDHGLevel", */
          T: -1
        },
        439: {
          /* n:"BrtBeginPCDHGLGroups", */
          T: 1
        },
        440: {
          /* n:"BrtEndPCDHGLGroups", */
          T: -1
        },
        441: {
          /* n:"BrtBeginPCDHGLGroup", */
          T: 1
        },
        442: {
          /* n:"BrtEndPCDHGLGroup", */
          T: -1
        },
        443: {
          /* n:"BrtBeginPCDHGLGMembers", */
          T: 1
        },
        444: {
          /* n:"BrtEndPCDHGLGMembers", */
          T: -1
        },
        445: {
          /* n:"BrtBeginPCDHGLGMember", */
          T: 1
        },
        446: {
          /* n:"BrtEndPCDHGLGMember", */
          T: -1
        },
        447: {
          /* n:"BrtBeginQSI", */
          T: 1
        },
        448: {
          /* n:"BrtEndQSI", */
          T: -1
        },
        449: {
          /* n:"BrtBeginQSIR", */
          T: 1
        },
        450: {
          /* n:"BrtEndQSIR", */
          T: -1
        },
        451: {
          /* n:"BrtBeginDeletedNames", */
          T: 1
        },
        452: {
          /* n:"BrtEndDeletedNames", */
          T: -1
        },
        453: {
          /* n:"BrtBeginDeletedName", */
          T: 1
        },
        454: {
          /* n:"BrtEndDeletedName", */
          T: -1
        },
        455: {
          /* n:"BrtBeginQSIFs", */
          T: 1
        },
        456: {
          /* n:"BrtEndQSIFs", */
          T: -1
        },
        457: {
          /* n:"BrtBeginQSIF", */
          T: 1
        },
        458: {
          /* n:"BrtEndQSIF", */
          T: -1
        },
        459: {
          /* n:"BrtBeginAutoSortScope", */
          T: 1
        },
        460: {
          /* n:"BrtEndAutoSortScope", */
          T: -1
        },
        461: {
          /* n:"BrtBeginConditionalFormatting", */
          T: 1
        },
        462: {
          /* n:"BrtEndConditionalFormatting", */
          T: -1
        },
        463: {
          /* n:"BrtBeginCFRule", */
          T: 1
        },
        464: {
          /* n:"BrtEndCFRule", */
          T: -1
        },
        465: {
          /* n:"BrtBeginIconSet", */
          T: 1
        },
        466: {
          /* n:"BrtEndIconSet", */
          T: -1
        },
        467: {
          /* n:"BrtBeginDatabar", */
          T: 1
        },
        468: {
          /* n:"BrtEndDatabar", */
          T: -1
        },
        469: {
          /* n:"BrtBeginColorScale", */
          T: 1
        },
        470: {
          /* n:"BrtEndColorScale", */
          T: -1
        },
        471: {
          /* n:"BrtCFVO" */
        },
        472: {
          /* n:"BrtExternValueMeta" */
        },
        473: {
          /* n:"BrtBeginColorPalette", */
          T: 1
        },
        474: {
          /* n:"BrtEndColorPalette", */
          T: -1
        },
        475: {
          /* n:"BrtIndexedColor" */
        },
        476: {
          /* n:"BrtMargins", */
          f: parse_BrtMargins
        },
        477: {
          /* n:"BrtPrintOptions" */
        },
        478: {
          /* n:"BrtPageSetup" */
        },
        479: {
          /* n:"BrtBeginHeaderFooter", */
          T: 1
        },
        480: {
          /* n:"BrtEndHeaderFooter", */
          T: -1
        },
        481: {
          /* n:"BrtBeginSXCrtFormat", */
          T: 1
        },
        482: {
          /* n:"BrtEndSXCrtFormat", */
          T: -1
        },
        483: {
          /* n:"BrtBeginSXCrtFormats", */
          T: 1
        },
        484: {
          /* n:"BrtEndSXCrtFormats", */
          T: -1
        },
        485: {
          /* n:"BrtWsFmtInfo", */
          f: parse_BrtWsFmtInfo
        },
        486: {
          /* n:"BrtBeginMgs", */
          T: 1
        },
        487: {
          /* n:"BrtEndMGs", */
          T: -1
        },
        488: {
          /* n:"BrtBeginMGMaps", */
          T: 1
        },
        489: {
          /* n:"BrtEndMGMaps", */
          T: -1
        },
        490: {
          /* n:"BrtBeginMG", */
          T: 1
        },
        491: {
          /* n:"BrtEndMG", */
          T: -1
        },
        492: {
          /* n:"BrtBeginMap", */
          T: 1
        },
        493: {
          /* n:"BrtEndMap", */
          T: -1
        },
        494: {
          /* n:"BrtHLink", */
          f: parse_BrtHLink
        },
        495: {
          /* n:"BrtBeginDCon", */
          T: 1
        },
        496: {
          /* n:"BrtEndDCon", */
          T: -1
        },
        497: {
          /* n:"BrtBeginDRefs", */
          T: 1
        },
        498: {
          /* n:"BrtEndDRefs", */
          T: -1
        },
        499: {
          /* n:"BrtDRef" */
        },
        500: {
          /* n:"BrtBeginScenMan", */
          T: 1
        },
        501: {
          /* n:"BrtEndScenMan", */
          T: -1
        },
        502: {
          /* n:"BrtBeginSct", */
          T: 1
        },
        503: {
          /* n:"BrtEndSct", */
          T: -1
        },
        504: {
          /* n:"BrtSlc" */
        },
        505: {
          /* n:"BrtBeginDXFs", */
          T: 1
        },
        506: {
          /* n:"BrtEndDXFs", */
          T: -1
        },
        507: {
          /* n:"BrtDXF" */
        },
        508: {
          /* n:"BrtBeginTableStyles", */
          T: 1
        },
        509: {
          /* n:"BrtEndTableStyles", */
          T: -1
        },
        510: {
          /* n:"BrtBeginTableStyle", */
          T: 1
        },
        511: {
          /* n:"BrtEndTableStyle", */
          T: -1
        },
        512: {
          /* n:"BrtTableStyleElement" */
        },
        513: {
          /* n:"BrtTableStyleClient" */
        },
        514: {
          /* n:"BrtBeginVolDeps", */
          T: 1
        },
        515: {
          /* n:"BrtEndVolDeps", */
          T: -1
        },
        516: {
          /* n:"BrtBeginVolType", */
          T: 1
        },
        517: {
          /* n:"BrtEndVolType", */
          T: -1
        },
        518: {
          /* n:"BrtBeginVolMain", */
          T: 1
        },
        519: {
          /* n:"BrtEndVolMain", */
          T: -1
        },
        520: {
          /* n:"BrtBeginVolTopic", */
          T: 1
        },
        521: {
          /* n:"BrtEndVolTopic", */
          T: -1
        },
        522: {
          /* n:"BrtVolSubtopic" */
        },
        523: {
          /* n:"BrtVolRef" */
        },
        524: {
          /* n:"BrtVolNum" */
        },
        525: {
          /* n:"BrtVolErr" */
        },
        526: {
          /* n:"BrtVolStr" */
        },
        527: {
          /* n:"BrtVolBool" */
        },
        528: {
          /* n:"BrtBeginCalcChain$", */
          T: 1
        },
        529: {
          /* n:"BrtEndCalcChain$", */
          T: -1
        },
        530: {
          /* n:"BrtBeginSortState", */
          T: 1
        },
        531: {
          /* n:"BrtEndSortState", */
          T: -1
        },
        532: {
          /* n:"BrtBeginSortCond", */
          T: 1
        },
        533: {
          /* n:"BrtEndSortCond", */
          T: -1
        },
        534: {
          /* n:"BrtBookProtection" */
        },
        535: {
          /* n:"BrtSheetProtection" */
        },
        536: {
          /* n:"BrtRangeProtection" */
        },
        537: {
          /* n:"BrtPhoneticInfo" */
        },
        538: {
          /* n:"BrtBeginECTxtWiz", */
          T: 1
        },
        539: {
          /* n:"BrtEndECTxtWiz", */
          T: -1
        },
        540: {
          /* n:"BrtBeginECTWFldInfoLst", */
          T: 1
        },
        541: {
          /* n:"BrtEndECTWFldInfoLst", */
          T: -1
        },
        542: {
          /* n:"BrtBeginECTwFldInfo", */
          T: 1
        },
        548: {
          /* n:"BrtFileSharing" */
        },
        549: {
          /* n:"BrtOleSize" */
        },
        550: {
          /* n:"BrtDrawing", */
          f: parse_RelID
        },
        551: {
          /* n:"BrtLegacyDrawing" */
        },
        552: {
          /* n:"BrtLegacyDrawingHF" */
        },
        553: {
          /* n:"BrtWebOpt" */
        },
        554: {
          /* n:"BrtBeginWebPubItems", */
          T: 1
        },
        555: {
          /* n:"BrtEndWebPubItems", */
          T: -1
        },
        556: {
          /* n:"BrtBeginWebPubItem", */
          T: 1
        },
        557: {
          /* n:"BrtEndWebPubItem", */
          T: -1
        },
        558: {
          /* n:"BrtBeginSXCondFmt", */
          T: 1
        },
        559: {
          /* n:"BrtEndSXCondFmt", */
          T: -1
        },
        560: {
          /* n:"BrtBeginSXCondFmts", */
          T: 1
        },
        561: {
          /* n:"BrtEndSXCondFmts", */
          T: -1
        },
        562: {
          /* n:"BrtBkHim" */
        },
        564: {
          /* n:"BrtColor" */
        },
        565: {
          /* n:"BrtBeginIndexedColors", */
          T: 1
        },
        566: {
          /* n:"BrtEndIndexedColors", */
          T: -1
        },
        569: {
          /* n:"BrtBeginMRUColors", */
          T: 1
        },
        570: {
          /* n:"BrtEndMRUColors", */
          T: -1
        },
        572: {
          /* n:"BrtMRUColor" */
        },
        573: {
          /* n:"BrtBeginDVals", */
          T: 1
        },
        574: {
          /* n:"BrtEndDVals", */
          T: -1
        },
        577: {
          /* n:"BrtSupNameStart" */
        },
        578: {
          /* n:"BrtSupNameValueStart" */
        },
        579: {
          /* n:"BrtSupNameValueEnd" */
        },
        580: {
          /* n:"BrtSupNameNum" */
        },
        581: {
          /* n:"BrtSupNameErr" */
        },
        582: {
          /* n:"BrtSupNameSt" */
        },
        583: {
          /* n:"BrtSupNameNil" */
        },
        584: {
          /* n:"BrtSupNameBool" */
        },
        585: {
          /* n:"BrtSupNameFmla" */
        },
        586: {
          /* n:"BrtSupNameBits" */
        },
        587: {
          /* n:"BrtSupNameEnd" */
        },
        588: {
          /* n:"BrtEndSupBook", */
          T: -1
        },
        589: {
          /* n:"BrtCellSmartTagProperty" */
        },
        590: {
          /* n:"BrtBeginCellSmartTag", */
          T: 1
        },
        591: {
          /* n:"BrtEndCellSmartTag", */
          T: -1
        },
        592: {
          /* n:"BrtBeginCellSmartTags", */
          T: 1
        },
        593: {
          /* n:"BrtEndCellSmartTags", */
          T: -1
        },
        594: {
          /* n:"BrtBeginSmartTags", */
          T: 1
        },
        595: {
          /* n:"BrtEndSmartTags", */
          T: -1
        },
        596: {
          /* n:"BrtSmartTagType" */
        },
        597: {
          /* n:"BrtBeginSmartTagTypes", */
          T: 1
        },
        598: {
          /* n:"BrtEndSmartTagTypes", */
          T: -1
        },
        599: {
          /* n:"BrtBeginSXFilters", */
          T: 1
        },
        600: {
          /* n:"BrtEndSXFilters", */
          T: -1
        },
        601: {
          /* n:"BrtBeginSXFILTER", */
          T: 1
        },
        602: {
          /* n:"BrtEndSXFilter", */
          T: -1
        },
        603: {
          /* n:"BrtBeginFills", */
          T: 1
        },
        604: {
          /* n:"BrtEndFills", */
          T: -1
        },
        605: {
          /* n:"BrtBeginCellWatches", */
          T: 1
        },
        606: {
          /* n:"BrtEndCellWatches", */
          T: -1
        },
        607: {
          /* n:"BrtCellWatch" */
        },
        608: {
          /* n:"BrtBeginCRErrs", */
          T: 1
        },
        609: {
          /* n:"BrtEndCRErrs", */
          T: -1
        },
        610: {
          /* n:"BrtCrashRecErr" */
        },
        611: {
          /* n:"BrtBeginFonts", */
          T: 1
        },
        612: {
          /* n:"BrtEndFonts", */
          T: -1
        },
        613: {
          /* n:"BrtBeginBorders", */
          T: 1
        },
        614: {
          /* n:"BrtEndBorders", */
          T: -1
        },
        615: {
          /* n:"BrtBeginFmts", */
          T: 1
        },
        616: {
          /* n:"BrtEndFmts", */
          T: -1
        },
        617: {
          /* n:"BrtBeginCellXFs", */
          T: 1
        },
        618: {
          /* n:"BrtEndCellXFs", */
          T: -1
        },
        619: {
          /* n:"BrtBeginStyles", */
          T: 1
        },
        620: {
          /* n:"BrtEndStyles", */
          T: -1
        },
        625: {
          /* n:"BrtBigName" */
        },
        626: {
          /* n:"BrtBeginCellStyleXFs", */
          T: 1
        },
        627: {
          /* n:"BrtEndCellStyleXFs", */
          T: -1
        },
        628: {
          /* n:"BrtBeginComments", */
          T: 1
        },
        629: {
          /* n:"BrtEndComments", */
          T: -1
        },
        630: {
          /* n:"BrtBeginCommentAuthors", */
          T: 1
        },
        631: {
          /* n:"BrtEndCommentAuthors", */
          T: -1
        },
        632: {
          /* n:"BrtCommentAuthor", */
          f: parse_BrtCommentAuthor
        },
        633: {
          /* n:"BrtBeginCommentList", */
          T: 1
        },
        634: {
          /* n:"BrtEndCommentList", */
          T: -1
        },
        635: {
          /* n:"BrtBeginComment", */
          T: 1,
          f: parse_BrtBeginComment
        },
        636: {
          /* n:"BrtEndComment", */
          T: -1
        },
        637: {
          /* n:"BrtCommentText", */
          f: parse_BrtCommentText
        },
        638: {
          /* n:"BrtBeginOleObjects", */
          T: 1
        },
        639: {
          /* n:"BrtOleObject" */
        },
        640: {
          /* n:"BrtEndOleObjects", */
          T: -1
        },
        641: {
          /* n:"BrtBeginSxrules", */
          T: 1
        },
        642: {
          /* n:"BrtEndSxRules", */
          T: -1
        },
        643: {
          /* n:"BrtBeginActiveXControls", */
          T: 1
        },
        644: {
          /* n:"BrtActiveX" */
        },
        645: {
          /* n:"BrtEndActiveXControls", */
          T: -1
        },
        646: {
          /* n:"BrtBeginPCDSDTCEMembersSortBy", */
          T: 1
        },
        648: {
          /* n:"BrtBeginCellIgnoreECs", */
          T: 1
        },
        649: {
          /* n:"BrtCellIgnoreEC" */
        },
        650: {
          /* n:"BrtEndCellIgnoreECs", */
          T: -1
        },
        651: {
          /* n:"BrtCsProp", */
          f: parse_BrtCsProp
        },
        652: {
          /* n:"BrtCsPageSetup" */
        },
        653: {
          /* n:"BrtBeginUserCsViews", */
          T: 1
        },
        654: {
          /* n:"BrtEndUserCsViews", */
          T: -1
        },
        655: {
          /* n:"BrtBeginUserCsView", */
          T: 1
        },
        656: {
          /* n:"BrtEndUserCsView", */
          T: -1
        },
        657: {
          /* n:"BrtBeginPcdSFCIEntries", */
          T: 1
        },
        658: {
          /* n:"BrtEndPCDSFCIEntries", */
          T: -1
        },
        659: {
          /* n:"BrtPCDSFCIEntry" */
        },
        660: {
          /* n:"BrtBeginListParts", */
          T: 1
        },
        661: {
          /* n:"BrtListPart" */
        },
        662: {
          /* n:"BrtEndListParts", */
          T: -1
        },
        663: {
          /* n:"BrtSheetCalcProp" */
        },
        664: {
          /* n:"BrtBeginFnGroup", */
          T: 1
        },
        665: {
          /* n:"BrtFnGroup" */
        },
        666: {
          /* n:"BrtEndFnGroup", */
          T: -1
        },
        667: {
          /* n:"BrtSupAddin" */
        },
        668: {
          /* n:"BrtSXTDMPOrder" */
        },
        669: {
          /* n:"BrtCsProtection" */
        },
        671: {
          /* n:"BrtBeginWsSortMap", */
          T: 1
        },
        672: {
          /* n:"BrtEndWsSortMap", */
          T: -1
        },
        673: {
          /* n:"BrtBeginRRSort", */
          T: 1
        },
        674: {
          /* n:"BrtEndRRSort", */
          T: -1
        },
        675: {
          /* n:"BrtRRSortItem" */
        },
        676: {
          /* n:"BrtFileSharingIso" */
        },
        677: {
          /* n:"BrtBookProtectionIso" */
        },
        678: {
          /* n:"BrtSheetProtectionIso" */
        },
        679: {
          /* n:"BrtCsProtectionIso" */
        },
        680: {
          /* n:"BrtRangeProtectionIso" */
        },
        681: {
          /* n:"BrtDValList" */
        },
        1024: {
          /* n:"BrtRwDescent" */
        },
        1025: {
          /* n:"BrtKnownFonts" */
        },
        1026: {
          /* n:"BrtBeginSXTupleSet", */
          T: 1
        },
        1027: {
          /* n:"BrtEndSXTupleSet", */
          T: -1
        },
        1028: {
          /* n:"BrtBeginSXTupleSetHeader", */
          T: 1
        },
        1029: {
          /* n:"BrtEndSXTupleSetHeader", */
          T: -1
        },
        1030: {
          /* n:"BrtSXTupleSetHeaderItem" */
        },
        1031: {
          /* n:"BrtBeginSXTupleSetData", */
          T: 1
        },
        1032: {
          /* n:"BrtEndSXTupleSetData", */
          T: -1
        },
        1033: {
          /* n:"BrtBeginSXTupleSetRow", */
          T: 1
        },
        1034: {
          /* n:"BrtEndSXTupleSetRow", */
          T: -1
        },
        1035: {
          /* n:"BrtSXTupleSetRowItem" */
        },
        1036: {
          /* n:"BrtNameExt" */
        },
        1037: {
          /* n:"BrtPCDH14" */
        },
        1038: {
          /* n:"BrtBeginPCDCalcMem14", */
          T: 1
        },
        1039: {
          /* n:"BrtEndPCDCalcMem14", */
          T: -1
        },
        1040: {
          /* n:"BrtSXTH14" */
        },
        1041: {
          /* n:"BrtBeginSparklineGroup", */
          T: 1
        },
        1042: {
          /* n:"BrtEndSparklineGroup", */
          T: -1
        },
        1043: {
          /* n:"BrtSparkline" */
        },
        1044: {
          /* n:"BrtSXDI14" */
        },
        1045: {
          /* n:"BrtWsFmtInfoEx14" */
        },
        1046: {
          /* n:"BrtBeginConditionalFormatting14", */
          T: 1
        },
        1047: {
          /* n:"BrtEndConditionalFormatting14", */
          T: -1
        },
        1048: {
          /* n:"BrtBeginCFRule14", */
          T: 1
        },
        1049: {
          /* n:"BrtEndCFRule14", */
          T: -1
        },
        1050: {
          /* n:"BrtCFVO14" */
        },
        1051: {
          /* n:"BrtBeginDatabar14", */
          T: 1
        },
        1052: {
          /* n:"BrtBeginIconSet14", */
          T: 1
        },
        1053: {
          /* n:"BrtDVal14", */
          f: parse_BrtDVal14
        },
        1054: {
          /* n:"BrtBeginDVals14", */
          T: 1
        },
        1055: {
          /* n:"BrtColor14" */
        },
        1056: {
          /* n:"BrtBeginSparklines", */
          T: 1
        },
        1057: {
          /* n:"BrtEndSparklines", */
          T: -1
        },
        1058: {
          /* n:"BrtBeginSparklineGroups", */
          T: 1
        },
        1059: {
          /* n:"BrtEndSparklineGroups", */
          T: -1
        },
        1061: {
          /* n:"BrtSXVD14" */
        },
        1062: {
          /* n:"BrtBeginSXView14", */
          T: 1
        },
        1063: {
          /* n:"BrtEndSXView14", */
          T: -1
        },
        1064: {
          /* n:"BrtBeginSXView16", */
          T: 1
        },
        1065: {
          /* n:"BrtEndSXView16", */
          T: -1
        },
        1066: {
          /* n:"BrtBeginPCD14", */
          T: 1
        },
        1067: {
          /* n:"BrtEndPCD14", */
          T: -1
        },
        1068: {
          /* n:"BrtBeginExtConn14", */
          T: 1
        },
        1069: {
          /* n:"BrtEndExtConn14", */
          T: -1
        },
        1070: {
          /* n:"BrtBeginSlicerCacheIDs", */
          T: 1
        },
        1071: {
          /* n:"BrtEndSlicerCacheIDs", */
          T: -1
        },
        1072: {
          /* n:"BrtBeginSlicerCacheID", */
          T: 1
        },
        1073: {
          /* n:"BrtEndSlicerCacheID", */
          T: -1
        },
        1075: {
          /* n:"BrtBeginSlicerCache", */
          T: 1
        },
        1076: {
          /* n:"BrtEndSlicerCache", */
          T: -1
        },
        1077: {
          /* n:"BrtBeginSlicerCacheDef", */
          T: 1
        },
        1078: {
          /* n:"BrtEndSlicerCacheDef", */
          T: -1
        },
        1079: {
          /* n:"BrtBeginSlicersEx", */
          T: 1
        },
        1080: {
          /* n:"BrtEndSlicersEx", */
          T: -1
        },
        1081: {
          /* n:"BrtBeginSlicerEx", */
          T: 1
        },
        1082: {
          /* n:"BrtEndSlicerEx", */
          T: -1
        },
        1083: {
          /* n:"BrtBeginSlicer", */
          T: 1
        },
        1084: {
          /* n:"BrtEndSlicer", */
          T: -1
        },
        1085: {
          /* n:"BrtSlicerCachePivotTables" */
        },
        1086: {
          /* n:"BrtBeginSlicerCacheOlapImpl", */
          T: 1
        },
        1087: {
          /* n:"BrtEndSlicerCacheOlapImpl", */
          T: -1
        },
        1088: {
          /* n:"BrtBeginSlicerCacheLevelsData", */
          T: 1
        },
        1089: {
          /* n:"BrtEndSlicerCacheLevelsData", */
          T: -1
        },
        1090: {
          /* n:"BrtBeginSlicerCacheLevelData", */
          T: 1
        },
        1091: {
          /* n:"BrtEndSlicerCacheLevelData", */
          T: -1
        },
        1092: {
          /* n:"BrtBeginSlicerCacheSiRanges", */
          T: 1
        },
        1093: {
          /* n:"BrtEndSlicerCacheSiRanges", */
          T: -1
        },
        1094: {
          /* n:"BrtBeginSlicerCacheSiRange", */
          T: 1
        },
        1095: {
          /* n:"BrtEndSlicerCacheSiRange", */
          T: -1
        },
        1096: {
          /* n:"BrtSlicerCacheOlapItem" */
        },
        1097: {
          /* n:"BrtBeginSlicerCacheSelections", */
          T: 1
        },
        1098: {
          /* n:"BrtSlicerCacheSelection" */
        },
        1099: {
          /* n:"BrtEndSlicerCacheSelections", */
          T: -1
        },
        1100: {
          /* n:"BrtBeginSlicerCacheNative", */
          T: 1
        },
        1101: {
          /* n:"BrtEndSlicerCacheNative", */
          T: -1
        },
        1102: {
          /* n:"BrtSlicerCacheNativeItem" */
        },
        1103: {
          /* n:"BrtRangeProtection14" */
        },
        1104: {
          /* n:"BrtRangeProtectionIso14" */
        },
        1105: {
          /* n:"BrtCellIgnoreEC14" */
        },
        1111: {
          /* n:"BrtList14" */
        },
        1112: {
          /* n:"BrtCFIcon" */
        },
        1113: {
          /* n:"BrtBeginSlicerCachesPivotCacheIDs", */
          T: 1
        },
        1114: {
          /* n:"BrtEndSlicerCachesPivotCacheIDs", */
          T: -1
        },
        1115: {
          /* n:"BrtBeginSlicers", */
          T: 1
        },
        1116: {
          /* n:"BrtEndSlicers", */
          T: -1
        },
        1117: {
          /* n:"BrtWbProp14" */
        },
        1118: {
          /* n:"BrtBeginSXEdit", */
          T: 1
        },
        1119: {
          /* n:"BrtEndSXEdit", */
          T: -1
        },
        1120: {
          /* n:"BrtBeginSXEdits", */
          T: 1
        },
        1121: {
          /* n:"BrtEndSXEdits", */
          T: -1
        },
        1122: {
          /* n:"BrtBeginSXChange", */
          T: 1
        },
        1123: {
          /* n:"BrtEndSXChange", */
          T: -1
        },
        1124: {
          /* n:"BrtBeginSXChanges", */
          T: 1
        },
        1125: {
          /* n:"BrtEndSXChanges", */
          T: -1
        },
        1126: {
          /* n:"BrtSXTupleItems" */
        },
        1128: {
          /* n:"BrtBeginSlicerStyle", */
          T: 1
        },
        1129: {
          /* n:"BrtEndSlicerStyle", */
          T: -1
        },
        1130: {
          /* n:"BrtSlicerStyleElement" */
        },
        1131: {
          /* n:"BrtBeginStyleSheetExt14", */
          T: 1
        },
        1132: {
          /* n:"BrtEndStyleSheetExt14", */
          T: -1
        },
        1133: {
          /* n:"BrtBeginSlicerCachesPivotCacheID", */
          T: 1
        },
        1134: {
          /* n:"BrtEndSlicerCachesPivotCacheID", */
          T: -1
        },
        1135: {
          /* n:"BrtBeginConditionalFormattings", */
          T: 1
        },
        1136: {
          /* n:"BrtEndConditionalFormattings", */
          T: -1
        },
        1137: {
          /* n:"BrtBeginPCDCalcMemExt", */
          T: 1
        },
        1138: {
          /* n:"BrtEndPCDCalcMemExt", */
          T: -1
        },
        1139: {
          /* n:"BrtBeginPCDCalcMemsExt", */
          T: 1
        },
        1140: {
          /* n:"BrtEndPCDCalcMemsExt", */
          T: -1
        },
        1141: {
          /* n:"BrtPCDField14" */
        },
        1142: {
          /* n:"BrtBeginSlicerStyles", */
          T: 1
        },
        1143: {
          /* n:"BrtEndSlicerStyles", */
          T: -1
        },
        1144: {
          /* n:"BrtBeginSlicerStyleElements", */
          T: 1
        },
        1145: {
          /* n:"BrtEndSlicerStyleElements", */
          T: -1
        },
        1146: {
          /* n:"BrtCFRuleExt" */
        },
        1147: {
          /* n:"BrtBeginSXCondFmt14", */
          T: 1
        },
        1148: {
          /* n:"BrtEndSXCondFmt14", */
          T: -1
        },
        1149: {
          /* n:"BrtBeginSXCondFmts14", */
          T: 1
        },
        1150: {
          /* n:"BrtEndSXCondFmts14", */
          T: -1
        },
        1152: {
          /* n:"BrtBeginSortCond14", */
          T: 1
        },
        1153: {
          /* n:"BrtEndSortCond14", */
          T: -1
        },
        1154: {
          /* n:"BrtEndDVals14", */
          T: -1
        },
        1155: {
          /* n:"BrtEndIconSet14", */
          T: -1
        },
        1156: {
          /* n:"BrtEndDatabar14", */
          T: -1
        },
        1157: {
          /* n:"BrtBeginColorScale14", */
          T: 1
        },
        1158: {
          /* n:"BrtEndColorScale14", */
          T: -1
        },
        1159: {
          /* n:"BrtBeginSxrules14", */
          T: 1
        },
        1160: {
          /* n:"BrtEndSxrules14", */
          T: -1
        },
        1161: {
          /* n:"BrtBeginPRule14", */
          T: 1
        },
        1162: {
          /* n:"BrtEndPRule14", */
          T: -1
        },
        1163: {
          /* n:"BrtBeginPRFilters14", */
          T: 1
        },
        1164: {
          /* n:"BrtEndPRFilters14", */
          T: -1
        },
        1165: {
          /* n:"BrtBeginPRFilter14", */
          T: 1
        },
        1166: {
          /* n:"BrtEndPRFilter14", */
          T: -1
        },
        1167: {
          /* n:"BrtBeginPRFItem14", */
          T: 1
        },
        1168: {
          /* n:"BrtEndPRFItem14", */
          T: -1
        },
        1169: {
          /* n:"BrtBeginCellIgnoreECs14", */
          T: 1
        },
        1170: {
          /* n:"BrtEndCellIgnoreECs14", */
          T: -1
        },
        1171: {
          /* n:"BrtDxf14" */
        },
        1172: {
          /* n:"BrtBeginDxF14s", */
          T: 1
        },
        1173: {
          /* n:"BrtEndDxf14s", */
          T: -1
        },
        1177: {
          /* n:"BrtFilter14" */
        },
        1178: {
          /* n:"BrtBeginCustomFilters14", */
          T: 1
        },
        1180: {
          /* n:"BrtCustomFilter14" */
        },
        1181: {
          /* n:"BrtIconFilter14" */
        },
        1182: {
          /* n:"BrtPivotCacheConnectionName" */
        },
        2048: {
          /* n:"BrtBeginDecoupledPivotCacheIDs", */
          T: 1
        },
        2049: {
          /* n:"BrtEndDecoupledPivotCacheIDs", */
          T: -1
        },
        2050: {
          /* n:"BrtDecoupledPivotCacheID" */
        },
        2051: {
          /* n:"BrtBeginPivotTableRefs", */
          T: 1
        },
        2052: {
          /* n:"BrtEndPivotTableRefs", */
          T: -1
        },
        2053: {
          /* n:"BrtPivotTableRef" */
        },
        2054: {
          /* n:"BrtSlicerCacheBookPivotTables" */
        },
        2055: {
          /* n:"BrtBeginSxvcells", */
          T: 1
        },
        2056: {
          /* n:"BrtEndSxvcells", */
          T: -1
        },
        2057: {
          /* n:"BrtBeginSxRow", */
          T: 1
        },
        2058: {
          /* n:"BrtEndSxRow", */
          T: -1
        },
        2060: {
          /* n:"BrtPcdCalcMem15" */
        },
        2067: {
          /* n:"BrtQsi15" */
        },
        2068: {
          /* n:"BrtBeginWebExtensions", */
          T: 1
        },
        2069: {
          /* n:"BrtEndWebExtensions", */
          T: -1
        },
        2070: {
          /* n:"BrtWebExtension" */
        },
        2071: {
          /* n:"BrtAbsPath15" */
        },
        2072: {
          /* n:"BrtBeginPivotTableUISettings", */
          T: 1
        },
        2073: {
          /* n:"BrtEndPivotTableUISettings", */
          T: -1
        },
        2075: {
          /* n:"BrtTableSlicerCacheIDs" */
        },
        2076: {
          /* n:"BrtTableSlicerCacheID" */
        },
        2077: {
          /* n:"BrtBeginTableSlicerCache", */
          T: 1
        },
        2078: {
          /* n:"BrtEndTableSlicerCache", */
          T: -1
        },
        2079: {
          /* n:"BrtSxFilter15" */
        },
        2080: {
          /* n:"BrtBeginTimelineCachePivotCacheIDs", */
          T: 1
        },
        2081: {
          /* n:"BrtEndTimelineCachePivotCacheIDs", */
          T: -1
        },
        2082: {
          /* n:"BrtTimelineCachePivotCacheID" */
        },
        2083: {
          /* n:"BrtBeginTimelineCacheIDs", */
          T: 1
        },
        2084: {
          /* n:"BrtEndTimelineCacheIDs", */
          T: -1
        },
        2085: {
          /* n:"BrtBeginTimelineCacheID", */
          T: 1
        },
        2086: {
          /* n:"BrtEndTimelineCacheID", */
          T: -1
        },
        2087: {
          /* n:"BrtBeginTimelinesEx", */
          T: 1
        },
        2088: {
          /* n:"BrtEndTimelinesEx", */
          T: -1
        },
        2089: {
          /* n:"BrtBeginTimelineEx", */
          T: 1
        },
        2090: {
          /* n:"BrtEndTimelineEx", */
          T: -1
        },
        2091: {
          /* n:"BrtWorkBookPr15" */
        },
        2092: {
          /* n:"BrtPCDH15" */
        },
        2093: {
          /* n:"BrtBeginTimelineStyle", */
          T: 1
        },
        2094: {
          /* n:"BrtEndTimelineStyle", */
          T: -1
        },
        2095: {
          /* n:"BrtTimelineStyleElement" */
        },
        2096: {
          /* n:"BrtBeginTimelineStylesheetExt15", */
          T: 1
        },
        2097: {
          /* n:"BrtEndTimelineStylesheetExt15", */
          T: -1
        },
        2098: {
          /* n:"BrtBeginTimelineStyles", */
          T: 1
        },
        2099: {
          /* n:"BrtEndTimelineStyles", */
          T: -1
        },
        2100: {
          /* n:"BrtBeginTimelineStyleElements", */
          T: 1
        },
        2101: {
          /* n:"BrtEndTimelineStyleElements", */
          T: -1
        },
        2102: {
          /* n:"BrtDxf15" */
        },
        2103: {
          /* n:"BrtBeginDxfs15", */
          T: 1
        },
        2104: {
          /* n:"BrtEndDxfs15", */
          T: -1
        },
        2105: {
          /* n:"BrtSlicerCacheHideItemsWithNoData" */
        },
        2106: {
          /* n:"BrtBeginItemUniqueNames", */
          T: 1
        },
        2107: {
          /* n:"BrtEndItemUniqueNames", */
          T: -1
        },
        2108: {
          /* n:"BrtItemUniqueName" */
        },
        2109: {
          /* n:"BrtBeginExtConn15", */
          T: 1
        },
        2110: {
          /* n:"BrtEndExtConn15", */
          T: -1
        },
        2111: {
          /* n:"BrtBeginOledbPr15", */
          T: 1
        },
        2112: {
          /* n:"BrtEndOledbPr15", */
          T: -1
        },
        2113: {
          /* n:"BrtBeginDataFeedPr15", */
          T: 1
        },
        2114: {
          /* n:"BrtEndDataFeedPr15", */
          T: -1
        },
        2115: {
          /* n:"BrtTextPr15" */
        },
        2116: {
          /* n:"BrtRangePr15" */
        },
        2117: {
          /* n:"BrtDbCommand15" */
        },
        2118: {
          /* n:"BrtBeginDbTables15", */
          T: 1
        },
        2119: {
          /* n:"BrtEndDbTables15", */
          T: -1
        },
        2120: {
          /* n:"BrtDbTable15" */
        },
        2121: {
          /* n:"BrtBeginDataModel", */
          T: 1
        },
        2122: {
          /* n:"BrtEndDataModel", */
          T: -1
        },
        2123: {
          /* n:"BrtBeginModelTables", */
          T: 1
        },
        2124: {
          /* n:"BrtEndModelTables", */
          T: -1
        },
        2125: {
          /* n:"BrtModelTable" */
        },
        2126: {
          /* n:"BrtBeginModelRelationships", */
          T: 1
        },
        2127: {
          /* n:"BrtEndModelRelationships", */
          T: -1
        },
        2128: {
          /* n:"BrtModelRelationship" */
        },
        2129: {
          /* n:"BrtBeginECTxtWiz15", */
          T: 1
        },
        2130: {
          /* n:"BrtEndECTxtWiz15", */
          T: -1
        },
        2131: {
          /* n:"BrtBeginECTWFldInfoLst15", */
          T: 1
        },
        2132: {
          /* n:"BrtEndECTWFldInfoLst15", */
          T: -1
        },
        2133: {
          /* n:"BrtBeginECTWFldInfo15", */
          T: 1
        },
        2134: {
          /* n:"BrtFieldListActiveItem" */
        },
        2135: {
          /* n:"BrtPivotCacheIdVersion" */
        },
        2136: {
          /* n:"BrtSXDI15" */
        },
        2137: {
          /* n:"BrtBeginModelTimeGroupings", */
          T: 1
        },
        2138: {
          /* n:"BrtEndModelTimeGroupings", */
          T: -1
        },
        2139: {
          /* n:"BrtBeginModelTimeGrouping", */
          T: 1
        },
        2140: {
          /* n:"BrtEndModelTimeGrouping", */
          T: -1
        },
        2141: {
          /* n:"BrtModelTimeGroupingCalcCol" */
        },
        3072: {
          /* n:"BrtUid" */
        },
        3073: {
          /* n:"BrtRevisionPtr" */
        },
        4096: {
          /* n:"BrtBeginDynamicArrayPr", */
          T: 1
        },
        4097: {
          /* n:"BrtEndDynamicArrayPr", */
          T: -1
        },
        5002: {
          /* n:"BrtBeginRichValueBlock", */
          T: 1
        },
        5003: {
          /* n:"BrtEndRichValueBlock", */
          T: -1
        },
        5081: {
          /* n:"BrtBeginRichFilters", */
          T: 1
        },
        5082: {
          /* n:"BrtEndRichFilters", */
          T: -1
        },
        5083: {
          /* n:"BrtRichFilter" */
        },
        5084: {
          /* n:"BrtBeginRichFilterColumn", */
          T: 1
        },
        5085: {
          /* n:"BrtEndRichFilterColumn", */
          T: -1
        },
        5086: {
          /* n:"BrtBeginCustomRichFilters", */
          T: 1
        },
        5087: {
          /* n:"BrtEndCustomRichFilters", */
          T: -1
        },
        5088: {
          /* n:"BrtCustomRichFilter" */
        },
        5089: {
          /* n:"BrtTop10RichFilter" */
        },
        5090: {
          /* n:"BrtDynamicRichFilter" */
        },
        5092: {
          /* n:"BrtBeginRichSortCondition", */
          T: 1
        },
        5093: {
          /* n:"BrtEndRichSortCondition", */
          T: -1
        },
        5094: {
          /* n:"BrtRichFilterDateGroupItem" */
        },
        5095: {
          /* n:"BrtBeginCalcFeatures", */
          T: 1
        },
        5096: {
          /* n:"BrtEndCalcFeatures", */
          T: -1
        },
        5097: {
          /* n:"BrtCalcFeature" */
        },
        5099: {
          /* n:"BrtExternalLinksPr" */
        },
        65535: { n: "" }
      };
      var XLSRecordEnum = {
        /* [MS-XLS] 2.3 Record Enumeration 2021-08-17 */
        6: {
          /* n:"Formula", */
          f: parse_Formula
        },
        10: {
          /* n:"EOF", */
          f: parsenoop2
        },
        12: {
          /* n:"CalcCount", */
          f: parseuint16
        },
        //
        13: {
          /* n:"CalcMode", */
          f: parseuint16
        },
        //
        14: {
          /* n:"CalcPrecision", */
          f: parsebool
        },
        //
        15: {
          /* n:"CalcRefMode", */
          f: parsebool
        },
        //
        16: {
          /* n:"CalcDelta", */
          f: parse_Xnum
        },
        //
        17: {
          /* n:"CalcIter", */
          f: parsebool
        },
        //
        18: {
          /* n:"Protect", */
          f: parsebool
        },
        19: {
          /* n:"Password", */
          f: parseuint16
        },
        20: {
          /* n:"Header", */
          f: parse_XLHeaderFooter
        },
        21: {
          /* n:"Footer", */
          f: parse_XLHeaderFooter
        },
        23: {
          /* n:"ExternSheet", */
          f: parse_ExternSheet
        },
        24: {
          /* n:"Lbl", */
          f: parse_Lbl
        },
        25: {
          /* n:"WinProtect", */
          f: parsebool
        },
        26: {
          /* n:"VerticalPageBreaks", */
        },
        27: {
          /* n:"HorizontalPageBreaks", */
        },
        28: {
          /* n:"Note", */
          f: parse_Note
        },
        29: {
          /* n:"Selection", */
        },
        34: {
          /* n:"Date1904", */
          f: parsebool
        },
        35: {
          /* n:"ExternName", */
          f: parse_ExternName
        },
        38: {
          /* n:"LeftMargin", */
          f: parse_Xnum
        },
        // *
        39: {
          /* n:"RightMargin", */
          f: parse_Xnum
        },
        // *
        40: {
          /* n:"TopMargin", */
          f: parse_Xnum
        },
        // *
        41: {
          /* n:"BottomMargin", */
          f: parse_Xnum
        },
        // *
        42: {
          /* n:"PrintRowCol", */
          f: parsebool
        },
        43: {
          /* n:"PrintGrid", */
          f: parsebool
        },
        47: {
          /* n:"FilePass", */
          f: parse_FilePass
        },
        49: {
          /* n:"Font", */
          f: parse_Font
        },
        51: {
          /* n:"PrintSize", */
          f: parseuint16
        },
        60: {
          /* n:"Continue", */
        },
        61: {
          /* n:"Window1", */
          f: parse_Window1
        },
        64: {
          /* n:"Backup", */
          f: parsebool
        },
        65: {
          /* n:"Pane", */
          f: parse_Pane
        },
        66: {
          /* n:"CodePage", */
          f: parseuint16
        },
        77: {
          /* n:"Pls", */
        },
        80: {
          /* n:"DCon", */
        },
        81: {
          /* n:"DConRef", */
        },
        82: {
          /* n:"DConName", */
        },
        85: {
          /* n:"DefColWidth", */
          f: parseuint16
        },
        89: {
          /* n:"XCT", */
        },
        90: {
          /* n:"CRN", */
        },
        91: {
          /* n:"FileSharing", */
        },
        92: {
          /* n:"WriteAccess", */
          f: parse_WriteAccess
        },
        93: {
          /* n:"Obj", */
          f: parse_Obj
        },
        94: {
          /* n:"Uncalced", */
        },
        95: {
          /* n:"CalcSaveRecalc", */
          f: parsebool
        },
        //
        96: {
          /* n:"Template", */
        },
        97: {
          /* n:"Intl", */
        },
        99: {
          /* n:"ObjProtect", */
          f: parsebool
        },
        125: {
          /* n:"ColInfo", */
          f: parse_ColInfo
        },
        128: {
          /* n:"Guts", */
          f: parse_Guts
        },
        129: {
          /* n:"WsBool", */
          f: parse_WsBool
        },
        130: {
          /* n:"GridSet", */
          f: parseuint16
        },
        131: {
          /* n:"HCenter", */
          f: parsebool
        },
        132: {
          /* n:"VCenter", */
          f: parsebool
        },
        133: {
          /* n:"BoundSheet8", */
          f: parse_BoundSheet8
        },
        134: {
          /* n:"WriteProtect", */
        },
        140: {
          /* n:"Country", */
          f: parse_Country
        },
        141: {
          /* n:"HideObj", */
          f: parseuint16
        },
        144: {
          /* n:"Sort", */
        },
        146: {
          /* n:"Palette", */
          f: parse_Palette
        },
        151: {
          /* n:"Sync", */
        },
        152: {
          /* n:"LPr", */
        },
        153: {
          /* n:"DxGCol", */
        },
        154: {
          /* n:"FnGroupName", */
        },
        155: {
          /* n:"FilterMode", */
        },
        156: {
          /* n:"BuiltInFnGroupCount", */
          f: parseuint16
        },
        157: {
          /* n:"AutoFilterInfo", */
        },
        158: {
          /* n:"AutoFilter", */
        },
        160: {
          /* n:"Scl", */
          f: parse_Scl
        },
        161: {
          /* n:"Setup", */
          f: parse_Setup
        },
        174: {
          /* n:"ScenMan", */
        },
        175: {
          /* n:"SCENARIO", */
        },
        176: {
          /* n:"SxView", */
        },
        177: {
          /* n:"Sxvd", */
        },
        178: {
          /* n:"SXVI", */
        },
        180: {
          /* n:"SxIvd", */
        },
        181: {
          /* n:"SXLI", */
        },
        182: {
          /* n:"SXPI", */
        },
        184: {
          /* n:"DocRoute", */
        },
        185: {
          /* n:"RecipName", */
        },
        189: {
          /* n:"MulRk", */
          f: parse_MulRk
        },
        190: {
          /* n:"MulBlank", */
          f: parse_MulBlank
        },
        193: {
          /* n:"Mms", */
          f: parsenoop2
        },
        197: {
          /* n:"SXDI", */
        },
        198: {
          /* n:"SXDB", */
        },
        199: {
          /* n:"SXFDB", */
        },
        200: {
          /* n:"SXDBB", */
        },
        201: {
          /* n:"SXNum", */
        },
        202: {
          /* n:"SxBool", */
          f: parsebool
        },
        203: {
          /* n:"SxErr", */
        },
        204: {
          /* n:"SXInt", */
        },
        205: {
          /* n:"SXString", */
        },
        206: {
          /* n:"SXDtr", */
        },
        207: {
          /* n:"SxNil", */
        },
        208: {
          /* n:"SXTbl", */
        },
        209: {
          /* n:"SXTBRGIITM", */
        },
        210: {
          /* n:"SxTbpg", */
        },
        211: {
          /* n:"ObProj", */
        },
        213: {
          /* n:"SXStreamID", */
        },
        215: {
          /* n:"DBCell", */
        },
        216: {
          /* n:"SXRng", */
        },
        217: {
          /* n:"SxIsxoper", */
        },
        218: {
          /* n:"BookBool", */
          f: parseuint16
        },
        220: {
          /* n:"DbOrParamQry", */
        },
        221: {
          /* n:"ScenarioProtect", */
          f: parsebool
        },
        222: {
          /* n:"OleObjectSize", */
        },
        224: {
          /* n:"XF", */
          f: parse_XF
        },
        225: {
          /* n:"InterfaceHdr", */
          f: parse_InterfaceHdr
        },
        226: {
          /* n:"InterfaceEnd", */
          f: parsenoop2
        },
        227: {
          /* n:"SXVS", */
        },
        229: {
          /* n:"MergeCells", */
          f: parse_MergeCells
        },
        233: {
          /* n:"BkHim", */
        },
        235: {
          /* n:"MsoDrawingGroup", */
        },
        236: {
          /* n:"MsoDrawing", */
        },
        237: {
          /* n:"MsoDrawingSelection", */
        },
        239: {
          /* n:"PhoneticInfo", */
        },
        240: {
          /* n:"SxRule", */
        },
        241: {
          /* n:"SXEx", */
        },
        242: {
          /* n:"SxFilt", */
        },
        244: {
          /* n:"SxDXF", */
        },
        245: {
          /* n:"SxItm", */
        },
        246: {
          /* n:"SxName", */
        },
        247: {
          /* n:"SxSelect", */
        },
        248: {
          /* n:"SXPair", */
        },
        249: {
          /* n:"SxFmla", */
        },
        251: {
          /* n:"SxFormat", */
        },
        252: {
          /* n:"SST", */
          f: parse_SST
        },
        253: {
          /* n:"LabelSst", */
          f: parse_LabelSst
        },
        255: {
          /* n:"ExtSST", */
          f: parse_ExtSST
        },
        256: {
          /* n:"SXVDEx", */
        },
        259: {
          /* n:"SXFormula", */
        },
        290: {
          /* n:"SXDBEx", */
        },
        311: {
          /* n:"RRDInsDel", */
        },
        312: {
          /* n:"RRDHead", */
        },
        315: {
          /* n:"RRDChgCell", */
        },
        317: {
          /* n:"RRTabId", */
          f: parseuint16a
        },
        318: {
          /* n:"RRDRenSheet", */
        },
        319: {
          /* n:"RRSort", */
        },
        320: {
          /* n:"RRDMove", */
        },
        330: {
          /* n:"RRFormat", */
        },
        331: {
          /* n:"RRAutoFmt", */
        },
        333: {
          /* n:"RRInsertSh", */
        },
        334: {
          /* n:"RRDMoveBegin", */
        },
        335: {
          /* n:"RRDMoveEnd", */
        },
        336: {
          /* n:"RRDInsDelBegin", */
        },
        337: {
          /* n:"RRDInsDelEnd", */
        },
        338: {
          /* n:"RRDConflict", */
        },
        339: {
          /* n:"RRDDefName", */
        },
        340: {
          /* n:"RRDRstEtxp", */
        },
        351: {
          /* n:"LRng", */
        },
        352: {
          /* n:"UsesELFs", */
          f: parsebool
        },
        353: {
          /* n:"DSF", */
          f: parsenoop2
        },
        401: {
          /* n:"CUsr", */
        },
        402: {
          /* n:"CbUsr", */
        },
        403: {
          /* n:"UsrInfo", */
        },
        404: {
          /* n:"UsrExcl", */
        },
        405: {
          /* n:"FileLock", */
        },
        406: {
          /* n:"RRDInfo", */
        },
        407: {
          /* n:"BCUsrs", */
        },
        408: {
          /* n:"UsrChk", */
        },
        425: {
          /* n:"UserBView", */
        },
        426: {
          /* n:"UserSViewBegin", */
        },
        427: {
          /* n:"UserSViewEnd", */
        },
        428: {
          /* n:"RRDUserView", */
        },
        429: {
          /* n:"Qsi", */
        },
        430: {
          /* n:"SupBook", */
          f: parse_SupBook
        },
        431: {
          /* n:"Prot4Rev", */
          f: parsebool
        },
        432: {
          /* n:"CondFmt", */
        },
        433: {
          /* n:"CF", */
        },
        434: {
          /* n:"DVal", */
        },
        437: {
          /* n:"DConBin", */
        },
        438: {
          /* n:"TxO", */
          f: parse_TxO
        },
        439: {
          /* n:"RefreshAll", */
          f: parsebool
        },
        //
        440: {
          /* n:"HLink", */
          f: parse_HLink
        },
        441: {
          /* n:"Lel", */
        },
        442: {
          /* n:"CodeName", */
          f: parse_XLUnicodeString
        },
        443: {
          /* n:"SXFDBType", */
        },
        444: {
          /* n:"Prot4RevPass", */
          f: parseuint16
        },
        445: {
          /* n:"ObNoMacros", */
        },
        446: {
          /* n:"Dv", */
        },
        448: {
          /* n:"Excel9File", */
          f: parsenoop2
        },
        449: {
          /* n:"RecalcId", */
          f: parse_RecalcId,
          r: 2
        },
        450: {
          /* n:"EntExU2", */
          f: parsenoop2
        },
        512: {
          /* n:"Dimensions", */
          f: parse_Dimensions
        },
        513: {
          /* n:"Blank", */
          f: parse_Blank
        },
        515: {
          /* n:"Number", */
          f: parse_Number
        },
        516: {
          /* n:"Label", */
          f: parse_Label
        },
        517: {
          /* n:"BoolErr", */
          f: parse_BoolErr
        },
        519: {
          /* n:"String", */
          f: parse_String
        },
        520: {
          /* n:"Row", */
          f: parse_Row
        },
        523: {
          /* n:"Index", */
        },
        545: {
          /* n:"Array", */
          f: parse_Array
        },
        549: {
          /* n:"DefaultRowHeight", */
          f: parse_DefaultRowHeight
        },
        566: {
          /* n:"Table", */
        },
        574: {
          /* n:"Window2", */
          f: parse_Window2
        },
        638: {
          /* n:"RK", */
          f: parse_RK
        },
        659: {
          /* n:"Style", */
        },
        1048: {
          /* n:"BigName", */
        },
        1054: {
          /* n:"Format", */
          f: parse_Format
        },
        1084: {
          /* n:"ContinueBigName", */
        },
        1212: {
          /* n:"ShrFmla", */
          f: parse_ShrFmla
        },
        2048: {
          /* n:"HLinkTooltip", */
          f: parse_HLinkTooltip
        },
        2049: {
          /* n:"WebPub", */
        },
        2050: {
          /* n:"QsiSXTag", */
        },
        2051: {
          /* n:"DBQueryExt", */
        },
        2052: {
          /* n:"ExtString", */
        },
        2053: {
          /* n:"TxtQry", */
        },
        2054: {
          /* n:"Qsir", */
        },
        2055: {
          /* n:"Qsif", */
        },
        2056: {
          /* n:"RRDTQSIF", */
        },
        2057: {
          /* n:"BOF", */
          f: parse_BOF
        },
        2058: {
          /* n:"OleDbConn", */
        },
        2059: {
          /* n:"WOpt", */
        },
        2060: {
          /* n:"SXViewEx", */
        },
        2061: {
          /* n:"SXTH", */
        },
        2062: {
          /* n:"SXPIEx", */
        },
        2063: {
          /* n:"SXVDTEx", */
        },
        2064: {
          /* n:"SXViewEx9", */
        },
        2066: {
          /* n:"ContinueFrt", */
        },
        2067: {
          /* n:"RealTimeData", */
        },
        2128: {
          /* n:"ChartFrtInfo", */
        },
        2129: {
          /* n:"FrtWrapper", */
        },
        2130: {
          /* n:"StartBlock", */
        },
        2131: {
          /* n:"EndBlock", */
        },
        2132: {
          /* n:"StartObject", */
        },
        2133: {
          /* n:"EndObject", */
        },
        2134: {
          /* n:"CatLab", */
        },
        2135: {
          /* n:"YMult", */
        },
        2136: {
          /* n:"SXViewLink", */
        },
        2137: {
          /* n:"PivotChartBits", */
        },
        2138: {
          /* n:"FrtFontList", */
        },
        2146: {
          /* n:"SheetExt", */
        },
        2147: {
          /* n:"BookExt", */
          r: 12
        },
        2148: {
          /* n:"SXAddl", */
        },
        2149: {
          /* n:"CrErr", */
        },
        2150: {
          /* n:"HFPicture", */
        },
        2151: {
          /* n:"FeatHdr", */
          f: parsenoop2
        },
        2152: {
          /* n:"Feat", */
        },
        2154: {
          /* n:"DataLabExt", */
        },
        2155: {
          /* n:"DataLabExtContents", */
        },
        2156: {
          /* n:"CellWatch", */
        },
        2161: {
          /* n:"FeatHdr11", */
        },
        2162: {
          /* n:"Feature11", */
        },
        2164: {
          /* n:"DropDownObjIds", */
        },
        2165: {
          /* n:"ContinueFrt11", */
        },
        2166: {
          /* n:"DConn", */
        },
        2167: {
          /* n:"List12", */
        },
        2168: {
          /* n:"Feature12", */
        },
        2169: {
          /* n:"CondFmt12", */
        },
        2170: {
          /* n:"CF12", */
        },
        2171: {
          /* n:"CFEx", */
        },
        2172: {
          /* n:"XFCRC", */
          f: parse_XFCRC,
          r: 12
        },
        2173: {
          /* n:"XFExt", */
          f: parse_XFExt,
          r: 12
        },
        2174: {
          /* n:"AutoFilter12", */
        },
        2175: {
          /* n:"ContinueFrt12", */
        },
        2180: {
          /* n:"MDTInfo", */
        },
        2181: {
          /* n:"MDXStr", */
        },
        2182: {
          /* n:"MDXTuple", */
        },
        2183: {
          /* n:"MDXSet", */
        },
        2184: {
          /* n:"MDXProp", */
        },
        2185: {
          /* n:"MDXKPI", */
        },
        2186: {
          /* n:"MDB", */
        },
        2187: {
          /* n:"PLV", */
        },
        2188: {
          /* n:"Compat12", */
          f: parsebool,
          r: 12
        },
        2189: {
          /* n:"DXF", */
        },
        2190: {
          /* n:"TableStyles", */
          r: 12
        },
        2191: {
          /* n:"TableStyle", */
        },
        2192: {
          /* n:"TableStyleElement", */
        },
        2194: {
          /* n:"StyleExt", */
        },
        2195: {
          /* n:"NamePublish", */
        },
        2196: {
          /* n:"NameCmt", */
          f: parse_NameCmt,
          r: 12
        },
        2197: {
          /* n:"SortData", */
        },
        2198: {
          /* n:"Theme", */
          f: parse_Theme,
          r: 12
        },
        2199: {
          /* n:"GUIDTypeLib", */
        },
        2200: {
          /* n:"FnGrp12", */
        },
        2201: {
          /* n:"NameFnGrp12", */
        },
        2202: {
          /* n:"MTRSettings", */
          f: parse_MTRSettings,
          r: 12
        },
        2203: {
          /* n:"CompressPictures", */
          f: parsenoop2
        },
        2204: {
          /* n:"HeaderFooter", */
        },
        2205: {
          /* n:"CrtLayout12", */
        },
        2206: {
          /* n:"CrtMlFrt", */
        },
        2207: {
          /* n:"CrtMlFrtContinue", */
        },
        2211: {
          /* n:"ForceFullCalculation", */
          f: parse_ForceFullCalculation
        },
        2212: {
          /* n:"ShapePropsStream", */
        },
        2213: {
          /* n:"TextPropsStream", */
        },
        2214: {
          /* n:"RichTextStream", */
        },
        2215: {
          /* n:"CrtLayout12A", */
        },
        4097: {
          /* n:"Units", */
        },
        4098: {
          /* n:"Chart", */
        },
        4099: {
          /* n:"Series", */
        },
        4102: {
          /* n:"DataFormat", */
        },
        4103: {
          /* n:"LineFormat", */
        },
        4105: {
          /* n:"MarkerFormat", */
        },
        4106: {
          /* n:"AreaFormat", */
        },
        4107: {
          /* n:"PieFormat", */
        },
        4108: {
          /* n:"AttachedLabel", */
        },
        4109: {
          /* n:"SeriesText", */
        },
        4116: {
          /* n:"ChartFormat", */
        },
        4117: {
          /* n:"Legend", */
        },
        4118: {
          /* n:"SeriesList", */
        },
        4119: {
          /* n:"Bar", */
        },
        4120: {
          /* n:"Line", */
        },
        4121: {
          /* n:"Pie", */
        },
        4122: {
          /* n:"Area", */
        },
        4123: {
          /* n:"Scatter", */
        },
        4124: {
          /* n:"CrtLine", */
        },
        4125: {
          /* n:"Axis", */
        },
        4126: {
          /* n:"Tick", */
        },
        4127: {
          /* n:"ValueRange", */
        },
        4128: {
          /* n:"CatSerRange", */
        },
        4129: {
          /* n:"AxisLine", */
        },
        4130: {
          /* n:"CrtLink", */
        },
        4132: {
          /* n:"DefaultText", */
        },
        4133: {
          /* n:"Text", */
        },
        4134: {
          /* n:"FontX", */
          f: parseuint16
        },
        4135: {
          /* n:"ObjectLink", */
        },
        4146: {
          /* n:"Frame", */
        },
        4147: {
          /* n:"Begin", */
        },
        4148: {
          /* n:"End", */
        },
        4149: {
          /* n:"PlotArea", */
        },
        4154: {
          /* n:"Chart3d", */
        },
        4156: {
          /* n:"PicF", */
        },
        4157: {
          /* n:"DropBar", */
        },
        4158: {
          /* n:"Radar", */
        },
        4159: {
          /* n:"Surf", */
        },
        4160: {
          /* n:"RadarArea", */
        },
        4161: {
          /* n:"AxisParent", */
        },
        4163: {
          /* n:"LegendException", */
        },
        4164: {
          /* n:"ShtProps", */
          f: parse_ShtProps
        },
        4165: {
          /* n:"SerToCrt", */
        },
        4166: {
          /* n:"AxesUsed", */
        },
        4168: {
          /* n:"SBaseRef", */
        },
        4170: {
          /* n:"SerParent", */
        },
        4171: {
          /* n:"SerAuxTrend", */
        },
        4174: {
          /* n:"IFmtRecord", */
        },
        4175: {
          /* n:"Pos", */
        },
        4176: {
          /* n:"AlRuns", */
        },
        4177: {
          /* n:"BRAI", */
        },
        4187: {
          /* n:"SerAuxErrBar", */
        },
        4188: {
          /* n:"ClrtClient", */
          f: parse_ClrtClient
        },
        4189: {
          /* n:"SerFmt", */
        },
        4191: {
          /* n:"Chart3DBarShape", */
        },
        4192: {
          /* n:"Fbi", */
        },
        4193: {
          /* n:"BopPop", */
        },
        4194: {
          /* n:"AxcExt", */
        },
        4195: {
          /* n:"Dat", */
        },
        4196: {
          /* n:"PlotGrowth", */
        },
        4197: {
          /* n:"SIIndex", */
        },
        4198: {
          /* n:"GelFrame", */
        },
        4199: {
          /* n:"BopPopCustom", */
        },
        4200: {
          /* n:"Fbi2", */
        },
        0: {
          /* n:"Dimensions", */
          f: parse_Dimensions
        },
        1: {
          /* n:"BIFF2BLANK", */
        },
        2: {
          /* n:"BIFF2INT", */
          f: parse_BIFF2INT
        },
        3: {
          /* n:"BIFF2NUM", */
          f: parse_BIFF2NUM
        },
        4: {
          /* n:"BIFF2STR", */
          f: parse_BIFF2STR
        },
        5: {
          /* n:"BoolErr", */
          f: parse_BoolErr
        },
        7: {
          /* n:"String", */
          f: parse_BIFF2STRING
        },
        8: {
          /* n:"BIFF2ROW", */
        },
        9: {
          /* n:"BOF", */
          f: parse_BOF
        },
        11: {
          /* n:"Index", */
        },
        22: {
          /* n:"ExternCount", */
          f: parseuint16
        },
        30: {
          /* n:"BIFF2FORMAT", */
          f: parse_BIFF2Format
        },
        31: {
          /* n:"BIFF2FMTCNT", */
        },
        /* 16-bit cnt of BIFF2FORMAT records */
        32: {
          /* n:"BIFF2COLINFO", */
        },
        33: {
          /* n:"Array", */
          f: parse_Array
        },
        36: {
          /* n:"COLWIDTH", */
        },
        37: {
          /* n:"DefaultRowHeight", */
          f: parse_DefaultRowHeight
        },
        // 0x2c ??
        // 0x2d ??
        // 0x2e ??
        // 0x30 FONTCOUNT: number of fonts
        50: {
          /* n:"BIFF2FONTXTRA", */
          f: parse_BIFF2FONTXTRA
        },
        // 0x35: INFOOPTS
        // 0x36: TABLE (BIFF2 only)
        // 0x37: TABLE2 (BIFF2 only)
        // 0x38: WNDESK
        // 0x39 ??
        // 0x3a: BEGINPREF
        // 0x3b: ENDPREF
        62: {
          /* n:"BIFF2WINDOW2", */
        },
        // 0x3f ??
        // 0x46: SHOWSCROLL
        // 0x47: SHOWFORMULA
        // 0x48: STATUSBAR
        // 0x49: SHORTMENUS
        // 0x4A:
        // 0x4B:
        // 0x4C:
        // 0x4E:
        // 0x4F:
        // 0x58: TOOLBAR (BIFF3)
        /* - - - */
        52: {
          /* n:"DDEObjName", */
        },
        67: {
          /* n:"BIFF2XF", */
        },
        68: {
          /* n:"BIFF2XFINDEX", */
          f: parseuint16
        },
        69: {
          /* n:"BIFF2FONTCLR", */
        },
        86: {
          /* n:"BIFF4FMTCNT", */
        },
        /* 16-bit cnt, similar to BIFF2 */
        126: {
          /* n:"RK", */
        },
        /* Not necessarily same as 0x027e */
        127: {
          /* n:"ImData", */
          f: parse_ImData
        },
        135: {
          /* n:"Addin", */
        },
        136: {
          /* n:"Edg", */
        },
        137: {
          /* n:"Pub", */
        },
        // 0x8A
        // 0x8B LH: alternate menu key flag (BIFF3/4)
        // 0x8E
        // 0x8F
        145: {
          /* n:"Sub", */
        },
        // 0x93 STYLE
        148: {
          /* n:"LHRecord", */
        },
        149: {
          /* n:"LHNGraph", */
        },
        150: {
          /* n:"Sound", */
        },
        // 0xA2 FNPROTO: function prototypes (BIFF4)
        // 0xA3
        // 0xA8
        169: {
          /* n:"CoordList", */
        },
        171: {
          /* n:"GCW", */
        },
        188: {
          /* n:"ShrFmla", */
        },
        /* Not necessarily same as 0x04bc */
        191: {
          /* n:"ToolbarHdr", */
        },
        192: {
          /* n:"ToolbarEnd", */
        },
        194: {
          /* n:"AddMenu", */
        },
        195: {
          /* n:"DelMenu", */
        },
        214: {
          /* n:"RString", */
          f: parse_RString
        },
        223: {
          /* n:"UDDesc", */
        },
        234: {
          /* n:"TabIdConf", */
        },
        354: {
          /* n:"XL5Modify", */
        },
        421: {
          /* n:"FileSharing2", */
        },
        518: {
          /* n:"Formula", */
          f: parse_Formula
        },
        521: {
          /* n:"BOF", */
          f: parse_BOF
        },
        536: {
          /* n:"Lbl", */
          f: parse_Lbl
        },
        547: {
          /* n:"ExternName", */
          f: parse_ExternName
        },
        561: {
          /* n:"Font", */
        },
        579: {
          /* n:"BIFF3XF", */
        },
        1030: {
          /* n:"Formula", */
          f: parse_Formula
        },
        1033: {
          /* n:"BOF", */
          f: parse_BOF
        },
        1091: {
          /* n:"BIFF4XF", */
        },
        2157: {
          /* n:"FeatInfo", */
        },
        2163: {
          /* n:"FeatInfo11", */
        },
        2177: {
          /* n:"SXAddl12", */
        },
        2240: {
          /* n:"AutoWebPub", */
        },
        2241: {
          /* n:"ListObj", */
        },
        2242: {
          /* n:"ListField", */
        },
        2243: {
          /* n:"ListDV", */
        },
        2244: {
          /* n:"ListCondFmt", */
        },
        2245: {
          /* n:"ListCF", */
        },
        2246: {
          /* n:"FMQry", */
        },
        2247: {
          /* n:"FMSQry", */
        },
        2248: {
          /* n:"PLV", */
        },
        2249: {
          /* n:"LnExt", */
        },
        2250: {
          /* n:"MkrExt", */
        },
        2251: {
          /* n:"CrtCoopt", */
        },
        2262: {
          /* n:"FRTArchId$", */
          r: 12
        },
        29282: {}
      };
      function write_biff_rec(ba2, type, payload, length) {
        var t3 = type;
        if (isNaN(t3)) return;
        var len = length || (payload || []).length || 0;
        var o3 = ba2.next(4);
        o3.write_shift(2, t3);
        o3.write_shift(2, len);
        if (len > 0 && is_buf(payload)) ba2.push(payload);
      }
      function write_biff_continue(ba2, type, payload, length) {
        var len = length || (payload || []).length || 0;
        if (len <= 8224) return write_biff_rec(ba2, type, payload, len);
        var t3 = type;
        if (isNaN(t3)) return;
        var parts = payload.parts || [], sidx = 0;
        var i3 = 0, w3 = 0;
        while (w3 + (parts[sidx] || 8224) <= 8224) {
          w3 += parts[sidx] || 8224;
          sidx++;
        }
        var o3 = ba2.next(4);
        o3.write_shift(2, t3);
        o3.write_shift(2, w3);
        ba2.push(payload.slice(i3, i3 + w3));
        i3 += w3;
        while (i3 < len) {
          o3 = ba2.next(4);
          o3.write_shift(2, 60);
          w3 = 0;
          while (w3 + (parts[sidx] || 8224) <= 8224) {
            w3 += parts[sidx] || 8224;
            sidx++;
          }
          o3.write_shift(2, w3);
          ba2.push(payload.slice(i3, i3 + w3));
          i3 += w3;
        }
      }
      function write_BIFF2Cell(out, r3, c3) {
        if (!out) out = new_buf(7);
        out.write_shift(2, r3);
        out.write_shift(2, c3);
        out.write_shift(2, 0);
        out.write_shift(1, 0);
        return out;
      }
      function write_BIFF2BERR(r3, c3, val, t3) {
        var out = new_buf(9);
        write_BIFF2Cell(out, r3, c3);
        write_Bes(val, t3 || "b", out);
        return out;
      }
      function write_BIFF2LABEL(r3, c3, val) {
        var out = new_buf(8 + 2 * val.length);
        write_BIFF2Cell(out, r3, c3);
        out.write_shift(1, val.length);
        out.write_shift(val.length, val, "sbcs");
        return out.l < out.length ? out.slice(0, out.l) : out;
      }
      function write_ws_biff2_cell(ba2, cell, R2, C2) {
        if (cell.v != null) switch (cell.t) {
          case "d":
          case "n":
            var v3 = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
            if (v3 == (v3 | 0) && v3 >= 0 && v3 < 65536)
              write_biff_rec(ba2, 2, write_BIFF2INT(R2, C2, v3));
            else
              write_biff_rec(ba2, 3, write_BIFF2NUM(R2, C2, v3));
            return;
          case "b":
          case "e":
            write_biff_rec(ba2, 5, write_BIFF2BERR(R2, C2, cell.v, cell.t));
            return;
          /* TODO: codepage, sst */
          case "s":
          case "str":
            write_biff_rec(ba2, 4, write_BIFF2LABEL(R2, C2, (cell.v || "").slice(0, 255)));
            return;
        }
        write_biff_rec(ba2, 1, write_BIFF2Cell(null, R2, C2));
      }
      function write_ws_biff2(ba2, ws, idx, opts) {
        var dense = Array.isArray(ws);
        var range = safe_decode_range(ws["!ref"] || "A1"), ref, rr2 = "", cols = [];
        if (range.e.c > 255 || range.e.r > 16383) {
          if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
          range.e.c = Math.min(range.e.c, 255);
          range.e.r = Math.min(range.e.c, 16383);
          ref = encode_range(range);
        }
        for (var R2 = range.s.r; R2 <= range.e.r; ++R2) {
          rr2 = encode_row(R2);
          for (var C2 = range.s.c; C2 <= range.e.c; ++C2) {
            if (R2 === range.s.r) cols[C2] = encode_col(C2);
            ref = cols[C2] + rr2;
            var cell = dense ? (ws[R2] || [])[C2] : ws[ref];
            if (!cell) continue;
            write_ws_biff2_cell(ba2, cell, R2, C2, opts);
          }
        }
      }
      function write_biff2_buf(wb, opts) {
        var o3 = opts || {};
        if (DENSE != null && o3.dense == null) o3.dense = DENSE;
        var ba2 = buf_array();
        var idx = 0;
        for (var i3 = 0; i3 < wb.SheetNames.length; ++i3) if (wb.SheetNames[i3] == o3.sheet) idx = i3;
        if (idx == 0 && !!o3.sheet && wb.SheetNames[0] != o3.sheet) throw new Error("Sheet not found: " + o3.sheet);
        write_biff_rec(ba2, o3.biff == 4 ? 1033 : o3.biff == 3 ? 521 : 9, write_BOF(wb, 16, o3));
        write_ws_biff2(ba2, wb.Sheets[wb.SheetNames[idx]], idx, o3, wb);
        write_biff_rec(ba2, 10);
        return ba2.end();
      }
      function write_FONTS_biff8(ba2, data, opts) {
        write_biff_rec(ba2, 49, write_Font({
          sz: 12,
          color: { theme: 1 },
          name: "Arial",
          family: 2,
          scheme: "minor"
        }, opts));
      }
      function write_FMTS_biff8(ba2, NF, opts) {
        if (!NF) return;
        [[5, 8], [23, 26], [41, 44], [
          /*63*/
          50,
          /*66],[164,*/
          392
        ]].forEach(function(r3) {
          for (var i3 = r3[0]; i3 <= r3[1]; ++i3) if (NF[i3] != null) write_biff_rec(ba2, 1054, write_Format(i3, NF[i3], opts));
        });
      }
      function write_FEAT(ba2, ws) {
        var o3 = new_buf(19);
        o3.write_shift(4, 2151);
        o3.write_shift(4, 0);
        o3.write_shift(4, 0);
        o3.write_shift(2, 3);
        o3.write_shift(1, 1);
        o3.write_shift(4, 0);
        write_biff_rec(ba2, 2151, o3);
        o3 = new_buf(39);
        o3.write_shift(4, 2152);
        o3.write_shift(4, 0);
        o3.write_shift(4, 0);
        o3.write_shift(2, 3);
        o3.write_shift(1, 0);
        o3.write_shift(4, 0);
        o3.write_shift(2, 1);
        o3.write_shift(4, 4);
        o3.write_shift(2, 0);
        write_Ref8U(safe_decode_range(ws["!ref"] || "A1"), o3);
        o3.write_shift(4, 4);
        write_biff_rec(ba2, 2152, o3);
      }
      function write_CELLXFS_biff8(ba2, opts) {
        for (var i3 = 0; i3 < 16; ++i3) write_biff_rec(ba2, 224, write_XF({ numFmtId: 0, style: true }, 0, opts));
        opts.cellXfs.forEach(function(c3) {
          write_biff_rec(ba2, 224, write_XF(c3, 0, opts));
        });
      }
      function write_ws_biff8_hlinks(ba2, ws) {
        for (var R2 = 0; R2 < ws["!links"].length; ++R2) {
          var HL = ws["!links"][R2];
          write_biff_rec(ba2, 440, write_HLink(HL));
          if (HL[1].Tooltip) write_biff_rec(ba2, 2048, write_HLinkTooltip(HL));
        }
        delete ws["!links"];
      }
      function write_ws_cols_biff8(ba2, cols) {
        if (!cols) return;
        var cnt = 0;
        cols.forEach(function(col, idx) {
          if (++cnt <= 256 && col) {
            write_biff_rec(ba2, 125, write_ColInfo(col_obj_w(idx, col), idx));
          }
        });
      }
      function write_ws_biff8_cell(ba2, cell, R2, C2, opts) {
        var os = 16 + get_cell_style(opts.cellXfs, cell, opts);
        if (cell.v == null && !cell.bf) {
          write_biff_rec(ba2, 513, write_XLSCell(R2, C2, os));
          return;
        }
        if (cell.bf) write_biff_rec(ba2, 6, write_Formula(cell, R2, C2, opts, os));
        else switch (cell.t) {
          case "d":
          case "n":
            var v3 = cell.t == "d" ? datenum(parseDate(cell.v)) : cell.v;
            write_biff_rec(ba2, 515, write_Number(R2, C2, v3, os, opts));
            break;
          case "b":
          case "e":
            write_biff_rec(ba2, 517, write_BoolErr(R2, C2, cell.v, os, opts, cell.t));
            break;
          /* TODO: codepage, sst */
          case "s":
          case "str":
            if (opts.bookSST) {
              var isst = get_sst_id(opts.Strings, cell.v, opts.revStrings);
              write_biff_rec(ba2, 253, write_LabelSst(R2, C2, isst, os, opts));
            } else write_biff_rec(ba2, 516, write_Label(R2, C2, (cell.v || "").slice(0, 255), os, opts));
            break;
          default:
            write_biff_rec(ba2, 513, write_XLSCell(R2, C2, os));
        }
      }
      function write_ws_biff8(idx, opts, wb) {
        var ba2 = buf_array();
        var s3 = wb.SheetNames[idx], ws = wb.Sheets[s3] || {};
        var _WB = (wb || {}).Workbook || {};
        var _sheet = (_WB.Sheets || [])[idx] || {};
        var dense = Array.isArray(ws);
        var b8 = opts.biff == 8;
        var ref, rr2 = "", cols = [];
        var range = safe_decode_range(ws["!ref"] || "A1");
        var MAX_ROWS = b8 ? 65536 : 16384;
        if (range.e.c > 255 || range.e.r >= MAX_ROWS) {
          if (opts.WTF) throw new Error("Range " + (ws["!ref"] || "A1") + " exceeds format limit A1:IV16384");
          range.e.c = Math.min(range.e.c, 255);
          range.e.r = Math.min(range.e.c, MAX_ROWS - 1);
        }
        write_biff_rec(ba2, 2057, write_BOF(wb, 16, opts));
        write_biff_rec(ba2, 13, writeuint16(1));
        write_biff_rec(ba2, 12, writeuint16(100));
        write_biff_rec(ba2, 15, writebool(true));
        write_biff_rec(ba2, 17, writebool(false));
        write_biff_rec(ba2, 16, write_Xnum(1e-3));
        write_biff_rec(ba2, 95, writebool(true));
        write_biff_rec(ba2, 42, writebool(false));
        write_biff_rec(ba2, 43, writebool(false));
        write_biff_rec(ba2, 130, writeuint16(1));
        write_biff_rec(ba2, 128, write_Guts([0, 0]));
        write_biff_rec(ba2, 131, writebool(false));
        write_biff_rec(ba2, 132, writebool(false));
        if (b8) write_ws_cols_biff8(ba2, ws["!cols"]);
        write_biff_rec(ba2, 512, write_Dimensions(range, opts));
        if (b8) ws["!links"] = [];
        for (var R2 = range.s.r; R2 <= range.e.r; ++R2) {
          rr2 = encode_row(R2);
          for (var C2 = range.s.c; C2 <= range.e.c; ++C2) {
            if (R2 === range.s.r) cols[C2] = encode_col(C2);
            ref = cols[C2] + rr2;
            var cell = dense ? (ws[R2] || [])[C2] : ws[ref];
            if (!cell) continue;
            write_ws_biff8_cell(ba2, cell, R2, C2, opts);
            if (b8 && cell.l) ws["!links"].push([ref, cell.l]);
          }
        }
        var cname = _sheet.CodeName || _sheet.name || s3;
        if (b8) write_biff_rec(ba2, 574, write_Window2((_WB.Views || [])[0]));
        if (b8 && (ws["!merges"] || []).length) write_biff_rec(ba2, 229, write_MergeCells(ws["!merges"]));
        if (b8) write_ws_biff8_hlinks(ba2, ws);
        write_biff_rec(ba2, 442, write_XLUnicodeString(cname, opts));
        if (b8) write_FEAT(ba2, ws);
        write_biff_rec(
          ba2,
          10
          /* EOF */
        );
        return ba2.end();
      }
      function write_biff8_global(wb, bufs, opts) {
        var A3 = buf_array();
        var _WB = (wb || {}).Workbook || {};
        var _sheets = _WB.Sheets || [];
        var _wb = _WB.WBProps || {};
        var b8 = opts.biff == 8, b5 = opts.biff == 5;
        write_biff_rec(A3, 2057, write_BOF(wb, 5, opts));
        if (opts.bookType == "xla") write_biff_rec(
          A3,
          135
          /* Addin */
        );
        write_biff_rec(A3, 225, b8 ? writeuint16(1200) : null);
        write_biff_rec(A3, 193, writezeroes(2));
        if (b5) write_biff_rec(
          A3,
          191
          /* ToolbarHdr */
        );
        if (b5) write_biff_rec(
          A3,
          192
          /* ToolbarEnd */
        );
        write_biff_rec(
          A3,
          226
          /* InterfaceEnd */
        );
        write_biff_rec(A3, 92, write_WriteAccess("SheetJS", opts));
        write_biff_rec(A3, 66, writeuint16(b8 ? 1200 : 1252));
        if (b8) write_biff_rec(A3, 353, writeuint16(0));
        if (b8) write_biff_rec(
          A3,
          448
          /* Excel9File */
        );
        write_biff_rec(A3, 317, write_RRTabId(wb.SheetNames.length));
        if (b8 && wb.vbaraw) write_biff_rec(
          A3,
          211
          /* ObProj */
        );
        if (b8 && wb.vbaraw) {
          var cname = _wb.CodeName || "ThisWorkbook";
          write_biff_rec(A3, 442, write_XLUnicodeString(cname, opts));
        }
        write_biff_rec(A3, 156, writeuint16(17));
        write_biff_rec(A3, 25, writebool(false));
        write_biff_rec(A3, 18, writebool(false));
        write_biff_rec(A3, 19, writeuint16(0));
        if (b8) write_biff_rec(A3, 431, writebool(false));
        if (b8) write_biff_rec(A3, 444, writeuint16(0));
        write_biff_rec(A3, 61, write_Window1(opts));
        write_biff_rec(A3, 64, writebool(false));
        write_biff_rec(A3, 141, writeuint16(0));
        write_biff_rec(A3, 34, writebool(safe1904(wb) == "true"));
        write_biff_rec(A3, 14, writebool(true));
        if (b8) write_biff_rec(A3, 439, writebool(false));
        write_biff_rec(A3, 218, writeuint16(0));
        write_FONTS_biff8(A3, wb, opts);
        write_FMTS_biff8(A3, wb.SSF, opts);
        write_CELLXFS_biff8(A3, opts);
        if (b8) write_biff_rec(A3, 352, writebool(false));
        var a2 = A3.end();
        var C2 = buf_array();
        if (b8) write_biff_rec(C2, 140, write_Country());
        if (b8 && opts.Strings) write_biff_continue(C2, 252, write_SST(opts.Strings, opts));
        write_biff_rec(
          C2,
          10
          /* EOF */
        );
        var c3 = C2.end();
        var B3 = buf_array();
        var blen = 0, j3 = 0;
        for (j3 = 0; j3 < wb.SheetNames.length; ++j3) blen += (b8 ? 12 : 11) + (b8 ? 2 : 1) * wb.SheetNames[j3].length;
        var start = a2.length + blen + c3.length;
        for (j3 = 0; j3 < wb.SheetNames.length; ++j3) {
          var _sheet = _sheets[j3] || {};
          write_biff_rec(B3, 133, write_BoundSheet8({ pos: start, hs: _sheet.Hidden || 0, dt: 0, name: wb.SheetNames[j3] }, opts));
          start += bufs[j3].length;
        }
        var b3 = B3.end();
        if (blen != b3.length) throw new Error("BS8 " + blen + " != " + b3.length);
        var out = [];
        if (a2.length) out.push(a2);
        if (b3.length) out.push(b3);
        if (c3.length) out.push(c3);
        return bconcat(out);
      }
      function write_biff8_buf(wb, opts) {
        var o3 = opts || {};
        var bufs = [];
        if (wb && !wb.SSF) {
          wb.SSF = dup(table_fmt);
        }
        if (wb && wb.SSF) {
          make_ssf();
          SSF_load_table(wb.SSF);
          o3.revssf = evert_num(wb.SSF);
          o3.revssf[wb.SSF[65535]] = 0;
          o3.ssf = wb.SSF;
        }
        o3.Strings = [];
        o3.Strings.Count = 0;
        o3.Strings.Unique = 0;
        fix_write_opts(o3);
        o3.cellXfs = [];
        get_cell_style(o3.cellXfs, {}, { revssf: { "General": 0 } });
        if (!wb.Props) wb.Props = {};
        for (var i3 = 0; i3 < wb.SheetNames.length; ++i3) bufs[bufs.length] = write_ws_biff8(i3, o3, wb);
        bufs.unshift(write_biff8_global(wb, bufs, o3));
        return bconcat(bufs);
      }
      function write_biff_buf(wb, opts) {
        for (var i3 = 0; i3 <= wb.SheetNames.length; ++i3) {
          var ws = wb.Sheets[wb.SheetNames[i3]];
          if (!ws || !ws["!ref"]) continue;
          var range = decode_range(ws["!ref"]);
          if (range.e.c > 255) {
            if (typeof console != "undefined" && console.error) console.error("Worksheet '" + wb.SheetNames[i3] + "' extends beyond column IV (255).  Data may be lost.");
          }
        }
        var o3 = opts || {};
        switch (o3.biff || 2) {
          case 8:
          case 5:
            return write_biff8_buf(wb, opts);
          case 4:
          case 3:
          case 2:
            return write_biff2_buf(wb, opts);
        }
        throw new Error("invalid type " + o3.bookType + " for BIFF");
      }
      function html_to_sheet(str, _opts) {
        var opts = _opts || {};
        if (DENSE != null && opts.dense == null) opts.dense = DENSE;
        var ws = opts.dense ? [] : {};
        str = str.replace(/<!--.*?-->/g, "");
        var mtch = str.match(/<table/i);
        if (!mtch) throw new Error("Invalid HTML: could not find <table>");
        var mtch2 = str.match(/<\/table/i);
        var i3 = mtch.index, j3 = mtch2 && mtch2.index || str.length;
        var rows = split_regex(str.slice(i3, j3), /(:?<tr[^>]*>)/i, "<tr>");
        var R2 = -1, C2 = 0, RS = 0, CS = 0;
        var range = { s: { r: 1e7, c: 1e7 }, e: { r: 0, c: 0 } };
        var merges = [];
        for (i3 = 0; i3 < rows.length; ++i3) {
          var row = rows[i3].trim();
          var hd = row.slice(0, 3).toLowerCase();
          if (hd == "<tr") {
            ++R2;
            if (opts.sheetRows && opts.sheetRows <= R2) {
              --R2;
              break;
            }
            C2 = 0;
            continue;
          }
          if (hd != "<td" && hd != "<th") continue;
          var cells = row.split(/<\/t[dh]>/i);
          for (j3 = 0; j3 < cells.length; ++j3) {
            var cell = cells[j3].trim();
            if (!cell.match(/<t[dh]/i)) continue;
            var m3 = cell, cc = 0;
            while (m3.charAt(0) == "<" && (cc = m3.indexOf(">")) > -1) m3 = m3.slice(cc + 1);
            for (var midx = 0; midx < merges.length; ++midx) {
              var _merge = merges[midx];
              if (_merge.s.c == C2 && _merge.s.r < R2 && R2 <= _merge.e.r) {
                C2 = _merge.e.c + 1;
                midx = -1;
              }
            }
            var tag = parsexmltag(cell.slice(0, cell.indexOf(">")));
            CS = tag.colspan ? +tag.colspan : 1;
            if ((RS = +tag.rowspan) > 1 || CS > 1) merges.push({ s: { r: R2, c: C2 }, e: { r: R2 + (RS || 1) - 1, c: C2 + CS - 1 } });
            var _t2 = tag.t || tag["data-t"] || "";
            if (!m3.length) {
              C2 += CS;
              continue;
            }
            m3 = htmldecode(m3);
            if (range.s.r > R2) range.s.r = R2;
            if (range.e.r < R2) range.e.r = R2;
            if (range.s.c > C2) range.s.c = C2;
            if (range.e.c < C2) range.e.c = C2;
            if (!m3.length) {
              C2 += CS;
              continue;
            }
            var o3 = { t: "s", v: m3 };
            if (opts.raw || !m3.trim().length || _t2 == "s") {
            } else if (m3 === "TRUE") o3 = { t: "b", v: true };
            else if (m3 === "FALSE") o3 = { t: "b", v: false };
            else if (!isNaN(fuzzynum(m3))) o3 = { t: "n", v: fuzzynum(m3) };
            else if (!isNaN(fuzzydate(m3).getDate())) {
              o3 = { t: "d", v: parseDate(m3) };
              if (!opts.cellDates) o3 = { t: "n", v: datenum(o3.v) };
              o3.z = opts.dateNF || table_fmt[14];
            }
            if (opts.dense) {
              if (!ws[R2]) ws[R2] = [];
              ws[R2][C2] = o3;
            } else ws[encode_cell({ r: R2, c: C2 })] = o3;
            C2 += CS;
          }
        }
        ws["!ref"] = encode_range(range);
        if (merges.length) ws["!merges"] = merges;
        return ws;
      }
      function make_html_row(ws, r3, R2, o3) {
        var M2 = ws["!merges"] || [];
        var oo = [];
        for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
          var RS = 0, CS = 0;
          for (var j3 = 0; j3 < M2.length; ++j3) {
            if (M2[j3].s.r > R2 || M2[j3].s.c > C2) continue;
            if (M2[j3].e.r < R2 || M2[j3].e.c < C2) continue;
            if (M2[j3].s.r < R2 || M2[j3].s.c < C2) {
              RS = -1;
              break;
            }
            RS = M2[j3].e.r - M2[j3].s.r + 1;
            CS = M2[j3].e.c - M2[j3].s.c + 1;
            break;
          }
          if (RS < 0) continue;
          var coord = encode_cell({ r: R2, c: C2 });
          var cell = o3.dense ? (ws[R2] || [])[C2] : ws[coord];
          var w3 = cell && cell.v != null && (cell.h || escapehtml(cell.w || (format_cell(cell), cell.w) || "")) || "";
          var sp = {};
          if (RS > 1) sp.rowspan = RS;
          if (CS > 1) sp.colspan = CS;
          if (o3.editable) w3 = '<span contenteditable="true">' + w3 + "</span>";
          else if (cell) {
            sp["data-t"] = cell && cell.t || "z";
            if (cell.v != null) sp["data-v"] = cell.v;
            if (cell.z != null) sp["data-z"] = cell.z;
            if (cell.l && (cell.l.Target || "#").charAt(0) != "#") w3 = '<a href="' + cell.l.Target + '">' + w3 + "</a>";
          }
          sp.id = (o3.id || "sjs") + "-" + coord;
          oo.push(writextag("td", w3, sp));
        }
        var preamble = "<tr>";
        return preamble + oo.join("") + "</tr>";
      }
      var HTML_BEGIN = '<html><head><meta charset="utf-8"/><title>SheetJS Table Export</title></head><body>';
      var HTML_END = "</body></html>";
      function html_to_workbook(str, opts) {
        var mtch = str.match(/<table[\s\S]*?>[\s\S]*?<\/table>/gi);
        if (!mtch || mtch.length == 0) throw new Error("Invalid HTML: could not find <table>");
        if (mtch.length == 1) return sheet_to_workbook(html_to_sheet(mtch[0], opts), opts);
        var wb = book_new();
        mtch.forEach(function(s3, idx) {
          book_append_sheet(wb, html_to_sheet(s3, opts), "Sheet" + (idx + 1));
        });
        return wb;
      }
      function make_html_preamble(ws, R2, o3) {
        var out = [];
        return out.join("") + "<table" + (o3 && o3.id ? ' id="' + o3.id + '"' : "") + ">";
      }
      function sheet_to_html(ws, opts) {
        var o3 = opts || {};
        var header = o3.header != null ? o3.header : HTML_BEGIN;
        var footer = o3.footer != null ? o3.footer : HTML_END;
        var out = [header];
        var r3 = decode_range(ws["!ref"]);
        o3.dense = Array.isArray(ws);
        out.push(make_html_preamble(ws, r3, o3));
        for (var R2 = r3.s.r; R2 <= r3.e.r; ++R2) out.push(make_html_row(ws, r3, R2, o3));
        out.push("</table>" + footer);
        return out.join("");
      }
      function sheet_add_dom(ws, table, _opts) {
        var opts = _opts || {};
        if (DENSE != null) opts.dense = DENSE;
        var or_R = 0, or_C = 0;
        if (opts.origin != null) {
          if (typeof opts.origin == "number") or_R = opts.origin;
          else {
            var _origin = typeof opts.origin == "string" ? decode_cell(opts.origin) : opts.origin;
            or_R = _origin.r;
            or_C = _origin.c;
          }
        }
        var rows = table.getElementsByTagName("tr");
        var sheetRows = Math.min(opts.sheetRows || 1e7, rows.length);
        var range = { s: { r: 0, c: 0 }, e: { r: or_R, c: or_C } };
        if (ws["!ref"]) {
          var _range = decode_range(ws["!ref"]);
          range.s.r = Math.min(range.s.r, _range.s.r);
          range.s.c = Math.min(range.s.c, _range.s.c);
          range.e.r = Math.max(range.e.r, _range.e.r);
          range.e.c = Math.max(range.e.c, _range.e.c);
          if (or_R == -1) range.e.r = or_R = _range.e.r + 1;
        }
        var merges = [], midx = 0;
        var rowinfo = ws["!rows"] || (ws["!rows"] = []);
        var _R = 0, R2 = 0, _C = 0, C2 = 0, RS = 0, CS = 0;
        if (!ws["!cols"]) ws["!cols"] = [];
        for (; _R < rows.length && R2 < sheetRows; ++_R) {
          var row = rows[_R];
          if (is_dom_element_hidden(row)) {
            if (opts.display) continue;
            rowinfo[R2] = { hidden: true };
          }
          var elts = row.children;
          for (_C = C2 = 0; _C < elts.length; ++_C) {
            var elt = elts[_C];
            if (opts.display && is_dom_element_hidden(elt)) continue;
            var v3 = elt.hasAttribute("data-v") ? elt.getAttribute("data-v") : elt.hasAttribute("v") ? elt.getAttribute("v") : htmldecode(elt.innerHTML);
            var z4 = elt.getAttribute("data-z") || elt.getAttribute("z");
            for (midx = 0; midx < merges.length; ++midx) {
              var m3 = merges[midx];
              if (m3.s.c == C2 + or_C && m3.s.r < R2 + or_R && R2 + or_R <= m3.e.r) {
                C2 = m3.e.c + 1 - or_C;
                midx = -1;
              }
            }
            CS = +elt.getAttribute("colspan") || 1;
            if ((RS = +elt.getAttribute("rowspan") || 1) > 1 || CS > 1) merges.push({ s: { r: R2 + or_R, c: C2 + or_C }, e: { r: R2 + or_R + (RS || 1) - 1, c: C2 + or_C + (CS || 1) - 1 } });
            var o3 = { t: "s", v: v3 };
            var _t2 = elt.getAttribute("data-t") || elt.getAttribute("t") || "";
            if (v3 != null) {
              if (v3.length == 0) o3.t = _t2 || "z";
              else if (opts.raw || v3.trim().length == 0 || _t2 == "s") {
              } else if (v3 === "TRUE") o3 = { t: "b", v: true };
              else if (v3 === "FALSE") o3 = { t: "b", v: false };
              else if (!isNaN(fuzzynum(v3))) o3 = { t: "n", v: fuzzynum(v3) };
              else if (!isNaN(fuzzydate(v3).getDate())) {
                o3 = { t: "d", v: parseDate(v3) };
                if (!opts.cellDates) o3 = { t: "n", v: datenum(o3.v) };
                o3.z = opts.dateNF || table_fmt[14];
              }
            }
            if (o3.z === void 0 && z4 != null) o3.z = z4;
            var l2 = "", Aelts = elt.getElementsByTagName("A");
            if (Aelts && Aelts.length) {
              for (var Aelti = 0; Aelti < Aelts.length; ++Aelti) if (Aelts[Aelti].hasAttribute("href")) {
                l2 = Aelts[Aelti].getAttribute("href");
                if (l2.charAt(0) != "#") break;
              }
            }
            if (l2 && l2.charAt(0) != "#") o3.l = { Target: l2 };
            if (opts.dense) {
              if (!ws[R2 + or_R]) ws[R2 + or_R] = [];
              ws[R2 + or_R][C2 + or_C] = o3;
            } else ws[encode_cell({ c: C2 + or_C, r: R2 + or_R })] = o3;
            if (range.e.c < C2 + or_C) range.e.c = C2 + or_C;
            C2 += CS;
          }
          ++R2;
        }
        if (merges.length) ws["!merges"] = (ws["!merges"] || []).concat(merges);
        range.e.r = Math.max(range.e.r, R2 - 1 + or_R);
        ws["!ref"] = encode_range(range);
        if (R2 >= sheetRows) ws["!fullref"] = encode_range((range.e.r = rows.length - _R + R2 - 1 + or_R, range));
        return ws;
      }
      function parse_dom_table(table, _opts) {
        var opts = _opts || {};
        var ws = opts.dense ? [] : {};
        return sheet_add_dom(ws, table, _opts);
      }
      function table_to_book(table, opts) {
        return sheet_to_workbook(parse_dom_table(table, opts), opts);
      }
      function is_dom_element_hidden(element) {
        var display = "";
        var get_computed_style = get_get_computed_style_function(element);
        if (get_computed_style) display = get_computed_style(element).getPropertyValue("display");
        if (!display) display = element.style && element.style.display;
        return display === "none";
      }
      function get_get_computed_style_function(element) {
        if (element.ownerDocument.defaultView && typeof element.ownerDocument.defaultView.getComputedStyle === "function") return element.ownerDocument.defaultView.getComputedStyle;
        if (typeof getComputedStyle === "function") return getComputedStyle;
        return null;
      }
      function parse_text_p(text) {
        var fixed = text.replace(/[\t\r\n]/g, " ").trim().replace(/ +/g, " ").replace(/<text:s\/>/g, " ").replace(/<text:s text:c="(\d+)"\/>/g, function($$, $1) {
          return Array(parseInt($1, 10) + 1).join(" ");
        }).replace(/<text:tab[^>]*\/>/g, "	").replace(/<text:line-break\/>/g, "\n");
        var v3 = unescapexml(fixed.replace(/<[^>]*>/g, ""));
        return [v3];
      }
      var number_formats_ods = {
        /* ods name: [short ssf fmt, long ssf fmt] */
        day: ["d", "dd"],
        month: ["m", "mm"],
        year: ["y", "yy"],
        hours: ["h", "hh"],
        minutes: ["m", "mm"],
        seconds: ["s", "ss"],
        "am-pm": ["A/P", "AM/PM"],
        "day-of-week": ["ddd", "dddd"],
        era: ["e", "ee"],
        /* there is no native representation of LO "Q" format */
        quarter: ["\\Qm", 'm\\"th quarter"']
      };
      function parse_content_xml(d3, _opts) {
        var opts = _opts || {};
        if (DENSE != null && opts.dense == null) opts.dense = DENSE;
        var str = xlml_normalize(d3);
        var state = [], tmp;
        var tag;
        var NFtag = { name: "" }, NF = "", pidx = 0;
        var sheetag;
        var rowtag;
        var Sheets = {}, SheetNames = [];
        var ws = opts.dense ? [] : {};
        var Rn, q2;
        var ctag = { value: "" };
        var textp = "", textpidx = 0, textptag;
        var textR = [];
        var R2 = -1, C2 = -1, range = { s: { r: 1e6, c: 1e7 }, e: { r: 0, c: 0 } };
        var row_ol = 0;
        var number_format_map = {};
        var merges = [], mrange = {}, mR = 0, mC = 0;
        var rowinfo = [], rowpeat = 1, colpeat = 1;
        var arrayf = [];
        var WB = { Names: [] };
        var atag = {};
        var _Ref = ["", ""];
        var comments = [], comment = {};
        var creator = "", creatoridx = 0;
        var isstub = false, intable = false;
        var i3 = 0;
        xlmlregex.lastIndex = 0;
        str = str.replace(/<!--([\s\S]*?)-->/mg, "").replace(/<!DOCTYPE[^\[]*\[[^\]]*\]>/gm, "");
        while (Rn = xlmlregex.exec(str)) switch (Rn[3] = Rn[3].replace(/_.*$/, "")) {
          case "table":
          case "工作表":
            if (Rn[1] === "/") {
              if (range.e.c >= range.s.c && range.e.r >= range.s.r) ws["!ref"] = encode_range(range);
              else ws["!ref"] = "A1:A1";
              if (opts.sheetRows > 0 && opts.sheetRows <= range.e.r) {
                ws["!fullref"] = ws["!ref"];
                range.e.r = opts.sheetRows - 1;
                ws["!ref"] = encode_range(range);
              }
              if (merges.length) ws["!merges"] = merges;
              if (rowinfo.length) ws["!rows"] = rowinfo;
              sheetag.name = sheetag["名称"] || sheetag.name;
              if (typeof JSON !== "undefined") JSON.stringify(sheetag);
              SheetNames.push(sheetag.name);
              Sheets[sheetag.name] = ws;
              intable = false;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
              sheetag = parsexmltag(Rn[0], false);
              R2 = C2 = -1;
              range.s.r = range.s.c = 1e7;
              range.e.r = range.e.c = 0;
              ws = opts.dense ? [] : {};
              merges = [];
              rowinfo = [];
              intable = true;
            }
            break;
          case "table-row-group":
            if (Rn[1] === "/") --row_ol;
            else ++row_ol;
            break;
          case "table-row":
          case "行":
            if (Rn[1] === "/") {
              R2 += rowpeat;
              rowpeat = 1;
              break;
            }
            rowtag = parsexmltag(Rn[0], false);
            if (rowtag["行号"]) R2 = rowtag["行号"] - 1;
            else if (R2 == -1) R2 = 0;
            rowpeat = +rowtag["number-rows-repeated"] || 1;
            if (rowpeat < 10) {
              for (i3 = 0; i3 < rowpeat; ++i3) if (row_ol > 0) rowinfo[R2 + i3] = { level: row_ol };
            }
            C2 = -1;
            break;
          case "covered-table-cell":
            if (Rn[1] !== "/") ++C2;
            if (opts.sheetStubs) {
              if (opts.dense) {
                if (!ws[R2]) ws[R2] = [];
                ws[R2][C2] = { t: "z" };
              } else ws[encode_cell({ r: R2, c: C2 })] = { t: "z" };
            }
            textp = "";
            textR = [];
            break;
          /* stub */
          case "table-cell":
          case "数据":
            if (Rn[0].charAt(Rn[0].length - 2) === "/") {
              ++C2;
              ctag = parsexmltag(Rn[0], false);
              colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
              q2 = { t: "z", v: null };
              if (ctag.formula && opts.cellFormula != false) q2.f = ods_to_csf_formula(unescapexml(ctag.formula));
              if ((ctag["数据类型"] || ctag["value-type"]) == "string") {
                q2.t = "s";
                q2.v = unescapexml(ctag["string-value"] || "");
                if (opts.dense) {
                  if (!ws[R2]) ws[R2] = [];
                  ws[R2][C2] = q2;
                } else {
                  ws[encode_cell({ r: R2, c: C2 })] = q2;
                }
              }
              C2 += colpeat - 1;
            } else if (Rn[1] !== "/") {
              ++C2;
              textp = "";
              textpidx = 0;
              textR = [];
              colpeat = 1;
              var rptR = rowpeat ? R2 + rowpeat - 1 : R2;
              if (C2 > range.e.c) range.e.c = C2;
              if (C2 < range.s.c) range.s.c = C2;
              if (R2 < range.s.r) range.s.r = R2;
              if (rptR > range.e.r) range.e.r = rptR;
              ctag = parsexmltag(Rn[0], false);
              comments = [];
              comment = {};
              q2 = { t: ctag["数据类型"] || ctag["value-type"], v: null };
              if (opts.cellFormula) {
                if (ctag.formula) ctag.formula = unescapexml(ctag.formula);
                if (ctag["number-matrix-columns-spanned"] && ctag["number-matrix-rows-spanned"]) {
                  mR = parseInt(ctag["number-matrix-rows-spanned"], 10) || 0;
                  mC = parseInt(ctag["number-matrix-columns-spanned"], 10) || 0;
                  mrange = { s: { r: R2, c: C2 }, e: { r: R2 + mR - 1, c: C2 + mC - 1 } };
                  q2.F = encode_range(mrange);
                  arrayf.push([mrange, q2.F]);
                }
                if (ctag.formula) q2.f = ods_to_csf_formula(ctag.formula);
                else for (i3 = 0; i3 < arrayf.length; ++i3)
                  if (R2 >= arrayf[i3][0].s.r && R2 <= arrayf[i3][0].e.r) {
                    if (C2 >= arrayf[i3][0].s.c && C2 <= arrayf[i3][0].e.c)
                      q2.F = arrayf[i3][1];
                  }
              }
              if (ctag["number-columns-spanned"] || ctag["number-rows-spanned"]) {
                mR = parseInt(ctag["number-rows-spanned"], 10) || 0;
                mC = parseInt(ctag["number-columns-spanned"], 10) || 0;
                mrange = { s: { r: R2, c: C2 }, e: { r: R2 + mR - 1, c: C2 + mC - 1 } };
                merges.push(mrange);
              }
              if (ctag["number-columns-repeated"]) colpeat = parseInt(ctag["number-columns-repeated"], 10);
              switch (q2.t) {
                case "boolean":
                  q2.t = "b";
                  q2.v = parsexmlbool(ctag["boolean-value"]);
                  break;
                case "float":
                  q2.t = "n";
                  q2.v = parseFloat(ctag.value);
                  break;
                case "percentage":
                  q2.t = "n";
                  q2.v = parseFloat(ctag.value);
                  break;
                case "currency":
                  q2.t = "n";
                  q2.v = parseFloat(ctag.value);
                  break;
                case "date":
                  q2.t = "d";
                  q2.v = parseDate(ctag["date-value"]);
                  if (!opts.cellDates) {
                    q2.t = "n";
                    q2.v = datenum(q2.v);
                  }
                  q2.z = "m/d/yy";
                  break;
                case "time":
                  q2.t = "n";
                  q2.v = parse_isodur(ctag["time-value"]) / 86400;
                  if (opts.cellDates) {
                    q2.t = "d";
                    q2.v = numdate(q2.v);
                  }
                  q2.z = "HH:MM:SS";
                  break;
                case "number":
                  q2.t = "n";
                  q2.v = parseFloat(ctag["数据数值"]);
                  break;
                default:
                  if (q2.t === "string" || q2.t === "text" || !q2.t) {
                    q2.t = "s";
                    if (ctag["string-value"] != null) {
                      textp = unescapexml(ctag["string-value"]);
                      textR = [];
                    }
                  } else throw new Error("Unsupported value type " + q2.t);
              }
            } else {
              isstub = false;
              if (q2.t === "s") {
                q2.v = textp || "";
                if (textR.length) q2.R = textR;
                isstub = textpidx == 0;
              }
              if (atag.Target) q2.l = atag;
              if (comments.length > 0) {
                q2.c = comments;
                comments = [];
              }
              if (textp && opts.cellText !== false) q2.w = textp;
              if (isstub) {
                q2.t = "z";
                delete q2.v;
              }
              if (!isstub || opts.sheetStubs) {
                if (!(opts.sheetRows && opts.sheetRows <= R2)) {
                  for (var rpt = 0; rpt < rowpeat; ++rpt) {
                    colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
                    if (opts.dense) {
                      if (!ws[R2 + rpt]) ws[R2 + rpt] = [];
                      ws[R2 + rpt][C2] = rpt == 0 ? q2 : dup(q2);
                      while (--colpeat > 0) ws[R2 + rpt][C2 + colpeat] = dup(q2);
                    } else {
                      ws[encode_cell({ r: R2 + rpt, c: C2 })] = q2;
                      while (--colpeat > 0) ws[encode_cell({ r: R2 + rpt, c: C2 + colpeat })] = dup(q2);
                    }
                    if (range.e.c <= C2) range.e.c = C2;
                  }
                }
              }
              colpeat = parseInt(ctag["number-columns-repeated"] || "1", 10);
              C2 += colpeat - 1;
              colpeat = 0;
              q2 = {};
              textp = "";
              textR = [];
            }
            atag = {};
            break;
          // 9.1.4 <table:table-cell>
          /* pure state */
          case "document":
          // TODO: <office:document> is the root for FODS
          case "document-content":
          case "电子表格文档":
          // 3.1.3.2 <office:document-content>
          case "spreadsheet":
          case "主体":
          // 3.7 <office:spreadsheet>
          case "scripts":
          // 3.12 <office:scripts>
          case "styles":
          // TODO <office:styles>
          case "font-face-decls":
          // 3.14 <office:font-face-decls>
          case "master-styles":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], true]);
            break;
          case "annotation":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
              comment.t = textp;
              if (textR.length) comment.R = textR;
              comment.a = creator;
              comments.push(comment);
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
              state.push([Rn[3], false]);
            }
            creator = "";
            creatoridx = 0;
            textp = "";
            textpidx = 0;
            textR = [];
            break;
          case "creator":
            if (Rn[1] === "/") {
              creator = str.slice(creatoridx, Rn.index);
            } else creatoridx = Rn.index + Rn[0].length;
            break;
          /* ignore state */
          case "meta":
          case "元数据":
          // TODO: <office:meta> <uof:元数据> FODS/UOF
          case "settings":
          // TODO: <office:settings>
          case "config-item-set":
          // TODO: <office:config-item-set>
          case "config-item-map-indexed":
          // TODO: <office:config-item-map-indexed>
          case "config-item-map-entry":
          // TODO: <office:config-item-map-entry>
          case "config-item-map-named":
          // TODO: <office:config-item-map-entry>
          case "shapes":
          // 9.2.8 <table:shapes>
          case "frame":
          // 10.4.2 <draw:frame>
          case "text-box":
          // 10.4.3 <draw:text-box>
          case "image":
          // 10.4.4 <draw:image>
          case "data-pilot-tables":
          // 9.6.2 <table:data-pilot-tables>
          case "list-style":
          // 16.30 <text:list-style>
          case "form":
          // 13.13 <form:form>
          case "dde-links":
          // 9.8 <table:dde-links>
          case "event-listeners":
          // TODO
          case "chart":
            if (Rn[1] === "/") {
              if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") state.push([Rn[3], false]);
            textp = "";
            textpidx = 0;
            textR = [];
            break;
          case "scientific-number":
            break;
          case "currency-symbol":
            break;
          case "currency-style":
            break;
          case "number-style":
          // 16.27.2 <number:number-style>
          case "percentage-style":
          // 16.27.9 <number:percentage-style>
          case "date-style":
          // 16.27.10 <number:date-style>
          case "time-style":
            if (Rn[1] === "/") {
              number_format_map[NFtag.name] = NF;
              if ((tmp = state.pop())[0] !== Rn[3]) throw "Bad state: " + tmp;
            } else if (Rn[0].charAt(Rn[0].length - 2) !== "/") {
              NF = "";
              NFtag = parsexmltag(Rn[0], false);
              state.push([Rn[3], true]);
            }
            break;
          case "script":
            break;
          // 3.13 <office:script>
          case "libraries":
            break;
          // TODO: <ooo:libraries>
          case "automatic-styles":
            break;
          // 3.15.3 <office:automatic-styles>
          case "default-style":
          // TODO: <style:default-style>
          case "page-layout":
            break;
          // TODO: <style:page-layout>
          case "style":
            break;
          case "map":
            break;
          // 16.3 <style:map>
          case "font-face":
            break;
          // 16.21 <style:font-face>
          case "paragraph-properties":
            break;
          // 17.6 <style:paragraph-properties>
          case "table-properties":
            break;
          // 17.15 <style:table-properties>
          case "table-column-properties":
            break;
          // 17.16 <style:table-column-properties>
          case "table-row-properties":
            break;
          // 17.17 <style:table-row-properties>
          case "table-cell-properties":
            break;
          // 17.18 <style:table-cell-properties>
          case "number":
            switch (state[state.length - 1][0]) {
              case "time-style":
              case "date-style":
                tag = parsexmltag(Rn[0], false);
                NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
                break;
            }
            break;
          case "fraction":
            break;
          // TODO 16.27.6 <number:fraction>
          case "day":
          // 16.27.11 <number:day>
          case "month":
          // 16.27.12 <number:month>
          case "year":
          // 16.27.13 <number:year>
          case "era":
          // 16.27.14 <number:era>
          case "day-of-week":
          // 16.27.15 <number:day-of-week>
          case "week-of-year":
          // 16.27.16 <number:week-of-year>
          case "quarter":
          // 16.27.17 <number:quarter>
          case "hours":
          // 16.27.19 <number:hours>
          case "minutes":
          // 16.27.20 <number:minutes>
          case "seconds":
          // 16.27.21 <number:seconds>
          case "am-pm":
            switch (state[state.length - 1][0]) {
              case "time-style":
              case "date-style":
                tag = parsexmltag(Rn[0], false);
                NF += number_formats_ods[Rn[3]][tag.style === "long" ? 1 : 0];
                break;
            }
            break;
          case "boolean-style":
            break;
          // 16.27.23 <number:boolean-style>
          case "boolean":
            break;
          // 16.27.24 <number:boolean>
          case "text-style":
            break;
          // 16.27.25 <number:text-style>
          case "text":
            if (Rn[0].slice(-2) === "/>") break;
            else if (Rn[1] === "/") switch (state[state.length - 1][0]) {
              case "number-style":
              case "date-style":
              case "time-style":
                NF += str.slice(pidx, Rn.index);
                break;
            }
            else pidx = Rn.index + Rn[0].length;
            break;
          case "named-range":
            tag = parsexmltag(Rn[0], false);
            _Ref = ods_to_csf_3D(tag["cell-range-address"]);
            var nrange = { Name: tag.name, Ref: _Ref[0] + "!" + _Ref[1] };
            if (intable) nrange.Sheet = SheetNames.length;
            WB.Names.push(nrange);
            break;
          case "text-content":
            break;
          // 16.27.27 <number:text-content>
          case "text-properties":
            break;
          // 16.27.27 <style:text-properties>
          case "embedded-text":
            break;
          // 16.27.4 <number:embedded-text>
          case "body":
          case "电子表格":
            break;
          // 3.3 16.9.6 19.726.3
          case "forms":
            break;
          // 12.25.2 13.2
          case "table-column":
            break;
          // 9.1.6 <table:table-column>
          case "table-header-rows":
            break;
          // 9.1.7 <table:table-header-rows>
          case "table-rows":
            break;
          // 9.1.12 <table:table-rows>
          /* TODO: outline levels */
          case "table-column-group":
            break;
          // 9.1.10 <table:table-column-group>
          case "table-header-columns":
            break;
          // 9.1.11 <table:table-header-columns>
          case "table-columns":
            break;
          // 9.1.12 <table:table-columns>
          case "null-date":
            break;
          // 9.4.2 <table:null-date> TODO: date1904
          case "graphic-properties":
            break;
          // 17.21 <style:graphic-properties>
          case "calculation-settings":
            break;
          // 9.4.1 <table:calculation-settings>
          case "named-expressions":
            break;
          // 9.4.11 <table:named-expressions>
          case "label-range":
            break;
          // 9.4.9 <table:label-range>
          case "label-ranges":
            break;
          // 9.4.10 <table:label-ranges>
          case "named-expression":
            break;
          // 9.4.13 <table:named-expression>
          case "sort":
            break;
          // 9.4.19 <table:sort>
          case "sort-by":
            break;
          // 9.4.20 <table:sort-by>
          case "sort-groups":
            break;
          // 9.4.22 <table:sort-groups>
          case "tab":
            break;
          // 6.1.4 <text:tab>
          case "line-break":
            break;
          // 6.1.5 <text:line-break>
          case "span":
            break;
          // 6.1.7 <text:span>
          case "p":
          case "文本串":
            if (["master-styles"].indexOf(state[state.length - 1][0]) > -1) break;
            if (Rn[1] === "/" && (!ctag || !ctag["string-value"])) {
              var ptp = parse_text_p(str.slice(textpidx, Rn.index), textptag);
              textp = (textp.length > 0 ? textp + "\n" : "") + ptp[0];
            } else {
              textptag = parsexmltag(Rn[0], false);
              textpidx = Rn.index + Rn[0].length;
            }
            break;
          // <text:p>
          case "s":
            break;
          // <text:s>
          case "database-range":
            if (Rn[1] === "/") break;
            try {
              _Ref = ods_to_csf_3D(parsexmltag(Rn[0])["target-range-address"]);
              Sheets[_Ref[0]]["!autofilter"] = { ref: _Ref[1] };
            } catch (e3) {
            }
            break;
          case "date":
            break;
          // <*:date>
          case "object":
            break;
          // 10.4.6.2 <draw:object>
          case "title":
          case "标题":
            break;
          // <*:title> OR <uof:标题>
          case "desc":
            break;
          // <*:desc>
          case "binary-data":
            break;
          // 10.4.5 TODO: b64 blob
          /* 9.2 Advanced Tables */
          case "table-source":
            break;
          // 9.2.6
          case "scenario":
            break;
          // 9.2.6
          case "iteration":
            break;
          // 9.4.3 <table:iteration>
          case "content-validations":
            break;
          // 9.4.4 <table:
          case "content-validation":
            break;
          // 9.4.5 <table:
          case "help-message":
            break;
          // 9.4.6 <table:
          case "error-message":
            break;
          // 9.4.7 <table:
          case "database-ranges":
            break;
          // 9.4.14 <table:database-ranges>
          case "filter":
            break;
          // 9.5.2 <table:filter>
          case "filter-and":
            break;
          // 9.5.3 <table:filter-and>
          case "filter-or":
            break;
          // 9.5.4 <table:filter-or>
          case "filter-condition":
            break;
          // 9.5.5 <table:filter-condition>
          case "list-level-style-bullet":
            break;
          // 16.31 <text:
          case "list-level-style-number":
            break;
          // 16.32 <text:
          case "list-level-properties":
            break;
          // 17.19 <style:
          /* 7.3 Document Fields */
          case "sender-firstname":
          // 7.3.6.2
          case "sender-lastname":
          // 7.3.6.3
          case "sender-initials":
          // 7.3.6.4
          case "sender-title":
          // 7.3.6.5
          case "sender-position":
          // 7.3.6.6
          case "sender-email":
          // 7.3.6.7
          case "sender-phone-private":
          // 7.3.6.8
          case "sender-fax":
          // 7.3.6.9
          case "sender-company":
          // 7.3.6.10
          case "sender-phone-work":
          // 7.3.6.11
          case "sender-street":
          // 7.3.6.12
          case "sender-city":
          // 7.3.6.13
          case "sender-postal-code":
          // 7.3.6.14
          case "sender-country":
          // 7.3.6.15
          case "sender-state-or-province":
          // 7.3.6.16
          case "author-name":
          // 7.3.7.1
          case "author-initials":
          // 7.3.7.2
          case "chapter":
          // 7.3.8
          case "file-name":
          // 7.3.9
          case "template-name":
          // 7.3.9
          case "sheet-name":
            break;
          case "event-listener":
            break;
          /* TODO: FODS Properties */
          case "initial-creator":
          case "creation-date":
          case "print-date":
          case "generator":
          case "document-statistic":
          case "user-defined":
          case "editing-duration":
          case "editing-cycles":
            break;
          /* TODO: FODS Config */
          case "config-item":
            break;
          /* TODO: style tokens */
          case "page-number":
            break;
          // TODO <text:page-number>
          case "page-count":
            break;
          // TODO <text:page-count>
          case "time":
            break;
          // TODO <text:time>
          /* 9.3 Advanced Table Cells */
          case "cell-range-source":
            break;
          // 9.3.1 <table:
          case "detective":
            break;
          // 9.3.2 <table:
          case "operation":
            break;
          // 9.3.3 <table:
          case "highlighted-range":
            break;
          // 9.3.4 <table:
          /* 9.6 Data Pilot Tables <table: */
          case "data-pilot-table":
          // 9.6.3
          case "source-cell-range":
          // 9.6.5
          case "source-service":
          // 9.6.6
          case "data-pilot-field":
          // 9.6.7
          case "data-pilot-level":
          // 9.6.8
          case "data-pilot-subtotals":
          // 9.6.9
          case "data-pilot-subtotal":
          // 9.6.10
          case "data-pilot-members":
          // 9.6.11
          case "data-pilot-member":
          // 9.6.12
          case "data-pilot-display-info":
          // 9.6.13
          case "data-pilot-sort-info":
          // 9.6.14
          case "data-pilot-layout-info":
          // 9.6.15
          case "data-pilot-field-reference":
          // 9.6.16
          case "data-pilot-groups":
          // 9.6.17
          case "data-pilot-group":
          // 9.6.18
          case "data-pilot-group-member":
            break;
          /* 10.3 Drawing Shapes */
          case "rect":
            break;
          /* 14.6 DDE Connections */
          case "dde-connection-decls":
          // 14.6.2 <text:
          case "dde-connection-decl":
          // 14.6.3 <text:
          case "dde-link":
          // 14.6.4 <table:
          case "dde-source":
            break;
          case "properties":
            break;
          // 13.7 <form:properties>
          case "property":
            break;
          // 13.8 <form:property>
          case "a":
            if (Rn[1] !== "/") {
              atag = parsexmltag(Rn[0], false);
              if (!atag.href) break;
              atag.Target = unescapexml(atag.href);
              delete atag.href;
              if (atag.Target.charAt(0) == "#" && atag.Target.indexOf(".") > -1) {
                _Ref = ods_to_csf_3D(atag.Target.slice(1));
                atag.Target = "#" + _Ref[0] + "!" + _Ref[1];
              } else if (atag.Target.match(/^\.\.[\\\/]/)) atag.Target = atag.Target.slice(3);
            }
            break;
          /* non-standard */
          case "table-protection":
            break;
          case "data-pilot-grand-total":
            break;
          // <table:
          case "office-document-common-attrs":
            break;
          // bare
          default:
            switch (Rn[2]) {
              case "dc:":
              // TODO: properties
              case "calcext:":
              // ignore undocumented extensions
              case "loext:":
              // ignore undocumented extensions
              case "ooo:":
              // ignore undocumented extensions
              case "chartooo:":
              // ignore undocumented extensions
              case "draw:":
              // TODO: drawing
              case "style:":
              // TODO: styles
              case "chart:":
              // TODO: charts
              case "form:":
              // TODO: forms
              case "uof:":
              // TODO: uof
              case "表:":
              // TODO: uof
              case "字:":
                break;
              default:
                if (opts.WTF) throw new Error(Rn);
            }
        }
        var out = {
          Sheets,
          SheetNames,
          Workbook: WB
        };
        if (opts.bookSheets) delete out.Sheets;
        return out;
      }
      function parse_ods(zip, opts) {
        opts = opts || {};
        if (safegetzipfile(zip, "META-INF/manifest.xml")) parse_manifest(getzipdata(zip, "META-INF/manifest.xml"), opts);
        var content = getzipstr(zip, "content.xml");
        if (!content) throw new Error("Missing content.xml in ODS / UOF file");
        var wb = parse_content_xml(utf8read(content), opts);
        if (safegetzipfile(zip, "meta.xml")) wb.Props = parse_core_props(getzipdata(zip, "meta.xml"));
        return wb;
      }
      function parse_fods(data, opts) {
        return parse_content_xml(data, opts);
      }
      var write_styles_ods = /* @__PURE__ */ function() {
        var master_styles = [
          "<office:master-styles>",
          '<style:master-page style:name="mp1" style:page-layout-name="mp1">',
          "<style:header/>",
          '<style:header-left style:display="false"/>',
          "<style:footer/>",
          '<style:footer-left style:display="false"/>',
          "</style:master-page>",
          "</office:master-styles>"
        ].join("");
        var payload = "<office:document-styles " + wxt_helper({
          "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
          "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
          "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
          "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
          "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
          "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
          "xmlns:xlink": "http://www.w3.org/1999/xlink",
          "xmlns:dc": "http://purl.org/dc/elements/1.1/",
          "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
          "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
          "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
          "office:version": "1.2"
        }) + ">" + master_styles + "</office:document-styles>";
        return function wso() {
          return XML_HEADER + payload;
        };
      }();
      var write_content_ods = /* @__PURE__ */ function() {
        var write_text_p = function(text) {
          return escapexml(text).replace(/  +/g, function($$) {
            return '<text:s text:c="' + $$.length + '"/>';
          }).replace(/\t/g, "<text:tab/>").replace(/\n/g, "</text:p><text:p>").replace(/^ /, "<text:s/>").replace(/ $/, "<text:s/>");
        };
        var null_cell_xml = "          <table:table-cell />\n";
        var covered_cell_xml = "          <table:covered-table-cell/>\n";
        var write_ws2 = function(ws, wb, i3) {
          var o3 = [];
          o3.push('      <table:table table:name="' + escapexml(wb.SheetNames[i3]) + '" table:style-name="ta1">\n');
          var R2 = 0, C2 = 0, range = decode_range(ws["!ref"] || "A1");
          var marr = ws["!merges"] || [], mi = 0;
          var dense = Array.isArray(ws);
          if (ws["!cols"]) {
            for (C2 = 0; C2 <= range.e.c; ++C2) o3.push("        <table:table-column" + (ws["!cols"][C2] ? ' table:style-name="co' + ws["!cols"][C2].ods + '"' : "") + "></table:table-column>\n");
          }
          var H2 = "", ROWS = ws["!rows"] || [];
          for (R2 = 0; R2 < range.s.r; ++R2) {
            H2 = ROWS[R2] ? ' table:style-name="ro' + ROWS[R2].ods + '"' : "";
            o3.push("        <table:table-row" + H2 + "></table:table-row>\n");
          }
          for (; R2 <= range.e.r; ++R2) {
            H2 = ROWS[R2] ? ' table:style-name="ro' + ROWS[R2].ods + '"' : "";
            o3.push("        <table:table-row" + H2 + ">\n");
            for (C2 = 0; C2 < range.s.c; ++C2) o3.push(null_cell_xml);
            for (; C2 <= range.e.c; ++C2) {
              var skip = false, ct2 = {}, textp = "";
              for (mi = 0; mi != marr.length; ++mi) {
                if (marr[mi].s.c > C2) continue;
                if (marr[mi].s.r > R2) continue;
                if (marr[mi].e.c < C2) continue;
                if (marr[mi].e.r < R2) continue;
                if (marr[mi].s.c != C2 || marr[mi].s.r != R2) skip = true;
                ct2["table:number-columns-spanned"] = marr[mi].e.c - marr[mi].s.c + 1;
                ct2["table:number-rows-spanned"] = marr[mi].e.r - marr[mi].s.r + 1;
                break;
              }
              if (skip) {
                o3.push(covered_cell_xml);
                continue;
              }
              var ref = encode_cell({ r: R2, c: C2 }), cell = dense ? (ws[R2] || [])[C2] : ws[ref];
              if (cell && cell.f) {
                ct2["table:formula"] = escapexml(csf_to_ods_formula(cell.f));
                if (cell.F) {
                  if (cell.F.slice(0, ref.length) == ref) {
                    var _Fref = decode_range(cell.F);
                    ct2["table:number-matrix-columns-spanned"] = _Fref.e.c - _Fref.s.c + 1;
                    ct2["table:number-matrix-rows-spanned"] = _Fref.e.r - _Fref.s.r + 1;
                  }
                }
              }
              if (!cell) {
                o3.push(null_cell_xml);
                continue;
              }
              switch (cell.t) {
                case "b":
                  textp = cell.v ? "TRUE" : "FALSE";
                  ct2["office:value-type"] = "boolean";
                  ct2["office:boolean-value"] = cell.v ? "true" : "false";
                  break;
                case "n":
                  textp = cell.w || String(cell.v || 0);
                  ct2["office:value-type"] = "float";
                  ct2["office:value"] = cell.v || 0;
                  break;
                case "s":
                case "str":
                  textp = cell.v == null ? "" : cell.v;
                  ct2["office:value-type"] = "string";
                  break;
                case "d":
                  textp = cell.w || parseDate(cell.v).toISOString();
                  ct2["office:value-type"] = "date";
                  ct2["office:date-value"] = parseDate(cell.v).toISOString();
                  ct2["table:style-name"] = "ce1";
                  break;
                //case 'e':
                default:
                  o3.push(null_cell_xml);
                  continue;
              }
              var text_p = write_text_p(textp);
              if (cell.l && cell.l.Target) {
                var _tgt = cell.l.Target;
                _tgt = _tgt.charAt(0) == "#" ? "#" + csf_to_ods_3D(_tgt.slice(1)) : _tgt;
                if (_tgt.charAt(0) != "#" && !_tgt.match(/^\w+:/)) _tgt = "../" + _tgt;
                text_p = writextag("text:a", text_p, { "xlink:href": _tgt.replace(/&/g, "&amp;") });
              }
              o3.push("          " + writextag("table:table-cell", writextag("text:p", text_p, {}), ct2) + "\n");
            }
            o3.push("        </table:table-row>\n");
          }
          o3.push("      </table:table>\n");
          return o3.join("");
        };
        var write_automatic_styles_ods = function(o3, wb) {
          o3.push(" <office:automatic-styles>\n");
          o3.push('  <number:date-style style:name="N37" number:automatic-order="true">\n');
          o3.push('   <number:month number:style="long"/>\n');
          o3.push("   <number:text>/</number:text>\n");
          o3.push('   <number:day number:style="long"/>\n');
          o3.push("   <number:text>/</number:text>\n");
          o3.push("   <number:year/>\n");
          o3.push("  </number:date-style>\n");
          var cidx = 0;
          wb.SheetNames.map(function(n3) {
            return wb.Sheets[n3];
          }).forEach(function(ws) {
            if (!ws) return;
            if (ws["!cols"]) {
              for (var C2 = 0; C2 < ws["!cols"].length; ++C2) if (ws["!cols"][C2]) {
                var colobj = ws["!cols"][C2];
                if (colobj.width == null && colobj.wpx == null && colobj.wch == null) continue;
                process_col(colobj);
                colobj.ods = cidx;
                var w3 = ws["!cols"][C2].wpx + "px";
                o3.push('  <style:style style:name="co' + cidx + '" style:family="table-column">\n');
                o3.push('   <style:table-column-properties fo:break-before="auto" style:column-width="' + w3 + '"/>\n');
                o3.push("  </style:style>\n");
                ++cidx;
              }
            }
          });
          var ridx = 0;
          wb.SheetNames.map(function(n3) {
            return wb.Sheets[n3];
          }).forEach(function(ws) {
            if (!ws) return;
            if (ws["!rows"]) {
              for (var R2 = 0; R2 < ws["!rows"].length; ++R2) if (ws["!rows"][R2]) {
                ws["!rows"][R2].ods = ridx;
                var h3 = ws["!rows"][R2].hpx + "px";
                o3.push('  <style:style style:name="ro' + ridx + '" style:family="table-row">\n');
                o3.push('   <style:table-row-properties fo:break-before="auto" style:row-height="' + h3 + '"/>\n');
                o3.push("  </style:style>\n");
                ++ridx;
              }
            }
          });
          o3.push('  <style:style style:name="ta1" style:family="table" style:master-page-name="mp1">\n');
          o3.push('   <style:table-properties table:display="true" style:writing-mode="lr-tb"/>\n');
          o3.push("  </style:style>\n");
          o3.push('  <style:style style:name="ce1" style:family="table-cell" style:parent-style-name="Default" style:data-style-name="N37"/>\n');
          o3.push(" </office:automatic-styles>\n");
        };
        return function wcx(wb, opts) {
          var o3 = [XML_HEADER];
          var attr = wxt_helper({
            "xmlns:office": "urn:oasis:names:tc:opendocument:xmlns:office:1.0",
            "xmlns:table": "urn:oasis:names:tc:opendocument:xmlns:table:1.0",
            "xmlns:style": "urn:oasis:names:tc:opendocument:xmlns:style:1.0",
            "xmlns:text": "urn:oasis:names:tc:opendocument:xmlns:text:1.0",
            "xmlns:draw": "urn:oasis:names:tc:opendocument:xmlns:drawing:1.0",
            "xmlns:fo": "urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0",
            "xmlns:xlink": "http://www.w3.org/1999/xlink",
            "xmlns:dc": "http://purl.org/dc/elements/1.1/",
            "xmlns:meta": "urn:oasis:names:tc:opendocument:xmlns:meta:1.0",
            "xmlns:number": "urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0",
            "xmlns:presentation": "urn:oasis:names:tc:opendocument:xmlns:presentation:1.0",
            "xmlns:svg": "urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0",
            "xmlns:chart": "urn:oasis:names:tc:opendocument:xmlns:chart:1.0",
            "xmlns:dr3d": "urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0",
            "xmlns:math": "http://www.w3.org/1998/Math/MathML",
            "xmlns:form": "urn:oasis:names:tc:opendocument:xmlns:form:1.0",
            "xmlns:script": "urn:oasis:names:tc:opendocument:xmlns:script:1.0",
            "xmlns:ooo": "http://openoffice.org/2004/office",
            "xmlns:ooow": "http://openoffice.org/2004/writer",
            "xmlns:oooc": "http://openoffice.org/2004/calc",
            "xmlns:dom": "http://www.w3.org/2001/xml-events",
            "xmlns:xforms": "http://www.w3.org/2002/xforms",
            "xmlns:xsd": "http://www.w3.org/2001/XMLSchema",
            "xmlns:xsi": "http://www.w3.org/2001/XMLSchema-instance",
            "xmlns:sheet": "urn:oasis:names:tc:opendocument:sh33tjs:1.0",
            "xmlns:rpt": "http://openoffice.org/2005/report",
            "xmlns:of": "urn:oasis:names:tc:opendocument:xmlns:of:1.2",
            "xmlns:xhtml": "http://www.w3.org/1999/xhtml",
            "xmlns:grddl": "http://www.w3.org/2003/g/data-view#",
            "xmlns:tableooo": "http://openoffice.org/2009/table",
            "xmlns:drawooo": "http://openoffice.org/2010/draw",
            "xmlns:calcext": "urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0",
            "xmlns:loext": "urn:org:documentfoundation:names:experimental:office:xmlns:loext:1.0",
            "xmlns:field": "urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0",
            "xmlns:formx": "urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0",
            "xmlns:css3t": "http://www.w3.org/TR/css3-text/",
            "office:version": "1.2"
          });
          var fods = wxt_helper({
            "xmlns:config": "urn:oasis:names:tc:opendocument:xmlns:config:1.0",
            "office:mimetype": "application/vnd.oasis.opendocument.spreadsheet"
          });
          if (opts.bookType == "fods") {
            o3.push("<office:document" + attr + fods + ">\n");
            o3.push(write_meta_ods().replace(/office:document-meta/g, "office:meta"));
          } else o3.push("<office:document-content" + attr + ">\n");
          write_automatic_styles_ods(o3, wb);
          o3.push("  <office:body>\n");
          o3.push("    <office:spreadsheet>\n");
          for (var i3 = 0; i3 != wb.SheetNames.length; ++i3) o3.push(write_ws2(wb.Sheets[wb.SheetNames[i3]], wb, i3, opts));
          o3.push("    </office:spreadsheet>\n");
          o3.push("  </office:body>\n");
          if (opts.bookType == "fods") o3.push("</office:document>");
          else o3.push("</office:document-content>");
          return o3.join("");
        };
      }();
      function write_ods(wb, opts) {
        if (opts.bookType == "fods") return write_content_ods(wb, opts);
        var zip = zip_new();
        var f2 = "";
        var manifest = [];
        var rdf = [];
        f2 = "mimetype";
        zip_add_file(zip, f2, "application/vnd.oasis.opendocument.spreadsheet");
        f2 = "content.xml";
        zip_add_file(zip, f2, write_content_ods(wb, opts));
        manifest.push([f2, "text/xml"]);
        rdf.push([f2, "ContentFile"]);
        f2 = "styles.xml";
        zip_add_file(zip, f2, write_styles_ods(wb, opts));
        manifest.push([f2, "text/xml"]);
        rdf.push([f2, "StylesFile"]);
        f2 = "meta.xml";
        zip_add_file(zip, f2, XML_HEADER + write_meta_ods());
        manifest.push([f2, "text/xml"]);
        rdf.push([f2, "MetadataFile"]);
        f2 = "manifest.rdf";
        zip_add_file(zip, f2, write_rdf(
          rdf
          /*, opts*/
        ));
        manifest.push([f2, "application/rdf+xml"]);
        f2 = "META-INF/manifest.xml";
        zip_add_file(zip, f2, write_manifest(
          manifest
          /*, opts*/
        ));
        return zip;
      }
      function u8_to_dataview(array) {
        return new DataView(array.buffer, array.byteOffset, array.byteLength);
      }
      function u8str(u8) {
        return typeof TextDecoder != "undefined" ? new TextDecoder().decode(u8) : utf8read(a2s(u8));
      }
      function stru8(str) {
        return typeof TextEncoder != "undefined" ? new TextEncoder().encode(str) : s2a(utf8write(str));
      }
      function u8contains(body, search) {
        outer:
          for (var L2 = 0; L2 <= body.length - search.length; ++L2) {
            for (var j3 = 0; j3 < search.length; ++j3)
              if (body[L2 + j3] != search[j3])
                continue outer;
            return true;
          }
        return false;
      }
      function u8concat(u8a) {
        var len = u8a.reduce(function(acc, x3) {
          return acc + x3.length;
        }, 0);
        var out = new Uint8Array(len);
        var off = 0;
        u8a.forEach(function(u8) {
          out.set(u8, off);
          off += u8.length;
        });
        return out;
      }
      function popcnt(x3) {
        x3 -= x3 >> 1 & 1431655765;
        x3 = (x3 & 858993459) + (x3 >> 2 & 858993459);
        return (x3 + (x3 >> 4) & 252645135) * 16843009 >>> 24;
      }
      function readDecimal128LE(buf, offset) {
        var exp = (buf[offset + 15] & 127) << 7 | buf[offset + 14] >> 1;
        var mantissa = buf[offset + 14] & 1;
        for (var j3 = offset + 13; j3 >= offset; --j3)
          mantissa = mantissa * 256 + buf[j3];
        return (buf[offset + 15] & 128 ? -mantissa : mantissa) * Math.pow(10, exp - 6176);
      }
      function writeDecimal128LE(buf, offset, value) {
        var exp = Math.floor(value == 0 ? 0 : Math.LOG10E * Math.log(Math.abs(value))) + 6176 - 20;
        var mantissa = value / Math.pow(10, exp - 6176);
        buf[offset + 15] |= exp >> 7;
        buf[offset + 14] |= (exp & 127) << 1;
        for (var i3 = 0; mantissa >= 1; ++i3, mantissa /= 256)
          buf[offset + i3] = mantissa & 255;
        buf[offset + 15] |= value >= 0 ? 0 : 128;
      }
      function parse_varint49(buf, ptr) {
        var l2 = ptr ? ptr[0] : 0;
        var usz = buf[l2] & 127;
        varint:
          if (buf[l2++] >= 128) {
            usz |= (buf[l2] & 127) << 7;
            if (buf[l2++] < 128)
              break varint;
            usz |= (buf[l2] & 127) << 14;
            if (buf[l2++] < 128)
              break varint;
            usz |= (buf[l2] & 127) << 21;
            if (buf[l2++] < 128)
              break varint;
            usz += (buf[l2] & 127) * Math.pow(2, 28);
            ++l2;
            if (buf[l2++] < 128)
              break varint;
            usz += (buf[l2] & 127) * Math.pow(2, 35);
            ++l2;
            if (buf[l2++] < 128)
              break varint;
            usz += (buf[l2] & 127) * Math.pow(2, 42);
            ++l2;
            if (buf[l2++] < 128)
              break varint;
          }
        if (ptr)
          ptr[0] = l2;
        return usz;
      }
      function write_varint49(v3) {
        var usz = new Uint8Array(7);
        usz[0] = v3 & 127;
        var L2 = 1;
        sz:
          if (v3 > 127) {
            usz[L2 - 1] |= 128;
            usz[L2] = v3 >> 7 & 127;
            ++L2;
            if (v3 <= 16383)
              break sz;
            usz[L2 - 1] |= 128;
            usz[L2] = v3 >> 14 & 127;
            ++L2;
            if (v3 <= 2097151)
              break sz;
            usz[L2 - 1] |= 128;
            usz[L2] = v3 >> 21 & 127;
            ++L2;
            if (v3 <= 268435455)
              break sz;
            usz[L2 - 1] |= 128;
            usz[L2] = v3 / 256 >>> 21 & 127;
            ++L2;
            if (v3 <= 34359738367)
              break sz;
            usz[L2 - 1] |= 128;
            usz[L2] = v3 / 65536 >>> 21 & 127;
            ++L2;
            if (v3 <= 4398046511103)
              break sz;
            usz[L2 - 1] |= 128;
            usz[L2] = v3 / 16777216 >>> 21 & 127;
            ++L2;
          }
        return usz.slice(0, L2);
      }
      function varint_to_i32(buf) {
        var l2 = 0, i32 = buf[l2] & 127;
        varint:
          if (buf[l2++] >= 128) {
            i32 |= (buf[l2] & 127) << 7;
            if (buf[l2++] < 128)
              break varint;
            i32 |= (buf[l2] & 127) << 14;
            if (buf[l2++] < 128)
              break varint;
            i32 |= (buf[l2] & 127) << 21;
            if (buf[l2++] < 128)
              break varint;
            i32 |= (buf[l2] & 127) << 28;
          }
        return i32;
      }
      function parse_shallow(buf) {
        var out = [], ptr = [0];
        while (ptr[0] < buf.length) {
          var off = ptr[0];
          var num = parse_varint49(buf, ptr);
          var type = num & 7;
          num = Math.floor(num / 8);
          var len = 0;
          var res;
          if (num == 0)
            break;
          switch (type) {
            case 0:
              {
                var l2 = ptr[0];
                while (buf[ptr[0]++] >= 128)
                  ;
                res = buf.slice(l2, ptr[0]);
              }
              break;
            case 5:
              len = 4;
              res = buf.slice(ptr[0], ptr[0] + len);
              ptr[0] += len;
              break;
            case 1:
              len = 8;
              res = buf.slice(ptr[0], ptr[0] + len);
              ptr[0] += len;
              break;
            case 2:
              len = parse_varint49(buf, ptr);
              res = buf.slice(ptr[0], ptr[0] + len);
              ptr[0] += len;
              break;
            case 3:
            case 4:
            default:
              throw new Error("PB Type ".concat(type, " for Field ").concat(num, " at offset ").concat(off));
          }
          var v3 = { data: res, type };
          if (out[num] == null)
            out[num] = [v3];
          else
            out[num].push(v3);
        }
        return out;
      }
      function write_shallow(proto) {
        var out = [];
        proto.forEach(function(field, idx) {
          field.forEach(function(item) {
            if (!item.data)
              return;
            out.push(write_varint49(idx * 8 + item.type));
            if (item.type == 2)
              out.push(write_varint49(item.data.length));
            out.push(item.data);
          });
        });
        return u8concat(out);
      }
      function mappa(data, cb) {
        return (data == null ? void 0 : data.map(function(d3) {
          return cb(d3.data);
        })) || [];
      }
      function parse_iwa_file(buf) {
        var _a2;
        var out = [], ptr = [0];
        while (ptr[0] < buf.length) {
          var len = parse_varint49(buf, ptr);
          var ai2 = parse_shallow(buf.slice(ptr[0], ptr[0] + len));
          ptr[0] += len;
          var res = {
            id: varint_to_i32(ai2[1][0].data),
            messages: []
          };
          ai2[2].forEach(function(b3) {
            var mi = parse_shallow(b3.data);
            var fl = varint_to_i32(mi[3][0].data);
            res.messages.push({
              meta: mi,
              data: buf.slice(ptr[0], ptr[0] + fl)
            });
            ptr[0] += fl;
          });
          if ((_a2 = ai2[3]) == null ? void 0 : _a2[0])
            res.merge = varint_to_i32(ai2[3][0].data) >>> 0 > 0;
          out.push(res);
        }
        return out;
      }
      function write_iwa_file(ias) {
        var bufs = [];
        ias.forEach(function(ia2) {
          var ai2 = [];
          ai2[1] = [{ data: write_varint49(ia2.id), type: 0 }];
          ai2[2] = [];
          if (ia2.merge != null)
            ai2[3] = [{ data: write_varint49(+!!ia2.merge), type: 0 }];
          var midata = [];
          ia2.messages.forEach(function(mi) {
            midata.push(mi.data);
            mi.meta[3] = [{ type: 0, data: write_varint49(mi.data.length) }];
            ai2[2].push({ data: write_shallow(mi.meta), type: 2 });
          });
          var aipayload = write_shallow(ai2);
          bufs.push(write_varint49(aipayload.length));
          bufs.push(aipayload);
          midata.forEach(function(mid) {
            return bufs.push(mid);
          });
        });
        return u8concat(bufs);
      }
      function parse_snappy_chunk(type, buf) {
        if (type != 0)
          throw new Error("Unexpected Snappy chunk type ".concat(type));
        var ptr = [0];
        var usz = parse_varint49(buf, ptr);
        var chunks = [];
        while (ptr[0] < buf.length) {
          var tag = buf[ptr[0]] & 3;
          if (tag == 0) {
            var len = buf[ptr[0]++] >> 2;
            if (len < 60)
              ++len;
            else {
              var c3 = len - 59;
              len = buf[ptr[0]];
              if (c3 > 1)
                len |= buf[ptr[0] + 1] << 8;
              if (c3 > 2)
                len |= buf[ptr[0] + 2] << 16;
              if (c3 > 3)
                len |= buf[ptr[0] + 3] << 24;
              len >>>= 0;
              len++;
              ptr[0] += c3;
            }
            chunks.push(buf.slice(ptr[0], ptr[0] + len));
            ptr[0] += len;
            continue;
          } else {
            var offset = 0, length = 0;
            if (tag == 1) {
              length = (buf[ptr[0]] >> 2 & 7) + 4;
              offset = (buf[ptr[0]++] & 224) << 3;
              offset |= buf[ptr[0]++];
            } else {
              length = (buf[ptr[0]++] >> 2) + 1;
              if (tag == 2) {
                offset = buf[ptr[0]] | buf[ptr[0] + 1] << 8;
                ptr[0] += 2;
              } else {
                offset = (buf[ptr[0]] | buf[ptr[0] + 1] << 8 | buf[ptr[0] + 2] << 16 | buf[ptr[0] + 3] << 24) >>> 0;
                ptr[0] += 4;
              }
            }
            chunks = [u8concat(chunks)];
            if (offset == 0)
              throw new Error("Invalid offset 0");
            if (offset > chunks[0].length)
              throw new Error("Invalid offset beyond length");
            if (length >= offset) {
              chunks.push(chunks[0].slice(-offset));
              length -= offset;
              while (length >= chunks[chunks.length - 1].length) {
                chunks.push(chunks[chunks.length - 1]);
                length -= chunks[chunks.length - 1].length;
              }
            }
            chunks.push(chunks[0].slice(-offset, -offset + length));
          }
        }
        var o3 = u8concat(chunks);
        if (o3.length != usz)
          throw new Error("Unexpected length: ".concat(o3.length, " != ").concat(usz));
        return o3;
      }
      function decompress_iwa_file(buf) {
        var out = [];
        var l2 = 0;
        while (l2 < buf.length) {
          var t3 = buf[l2++];
          var len = buf[l2] | buf[l2 + 1] << 8 | buf[l2 + 2] << 16;
          l2 += 3;
          out.push(parse_snappy_chunk(t3, buf.slice(l2, l2 + len)));
          l2 += len;
        }
        if (l2 !== buf.length)
          throw new Error("data is not a valid framed stream!");
        return u8concat(out);
      }
      function compress_iwa_file(buf) {
        var out = [];
        var l2 = 0;
        while (l2 < buf.length) {
          var c3 = Math.min(buf.length - l2, 268435455);
          var frame = new Uint8Array(4);
          out.push(frame);
          var usz = write_varint49(c3);
          var L2 = usz.length;
          out.push(usz);
          if (c3 <= 60) {
            L2++;
            out.push(new Uint8Array([c3 - 1 << 2]));
          } else if (c3 <= 256) {
            L2 += 2;
            out.push(new Uint8Array([240, c3 - 1 & 255]));
          } else if (c3 <= 65536) {
            L2 += 3;
            out.push(new Uint8Array([244, c3 - 1 & 255, c3 - 1 >> 8 & 255]));
          } else if (c3 <= 16777216) {
            L2 += 4;
            out.push(new Uint8Array([248, c3 - 1 & 255, c3 - 1 >> 8 & 255, c3 - 1 >> 16 & 255]));
          } else if (c3 <= 4294967296) {
            L2 += 5;
            out.push(new Uint8Array([252, c3 - 1 & 255, c3 - 1 >> 8 & 255, c3 - 1 >> 16 & 255, c3 - 1 >>> 24 & 255]));
          }
          out.push(buf.slice(l2, l2 + c3));
          L2 += c3;
          frame[0] = 0;
          frame[1] = L2 & 255;
          frame[2] = L2 >> 8 & 255;
          frame[3] = L2 >> 16 & 255;
          l2 += c3;
        }
        return u8concat(out);
      }
      function parse_old_storage(buf, sst, rsst, v3) {
        var dv = u8_to_dataview(buf);
        var flags = dv.getUint32(4, true);
        var data_offset = (v3 > 1 ? 12 : 8) + popcnt(flags & (v3 > 1 ? 3470 : 398)) * 4;
        var ridx = -1, sidx = -1, ieee = NaN, dt2 = new Date(2001, 0, 1);
        if (flags & 512) {
          ridx = dv.getUint32(data_offset, true);
          data_offset += 4;
        }
        data_offset += popcnt(flags & (v3 > 1 ? 12288 : 4096)) * 4;
        if (flags & 16) {
          sidx = dv.getUint32(data_offset, true);
          data_offset += 4;
        }
        if (flags & 32) {
          ieee = dv.getFloat64(data_offset, true);
          data_offset += 8;
        }
        if (flags & 64) {
          dt2.setTime(dt2.getTime() + dv.getFloat64(data_offset, true) * 1e3);
          data_offset += 8;
        }
        var ret;
        switch (buf[2]) {
          case 0:
            break;
          case 2:
            ret = { t: "n", v: ieee };
            break;
          case 3:
            ret = { t: "s", v: sst[sidx] };
            break;
          case 5:
            ret = { t: "d", v: dt2 };
            break;
          case 6:
            ret = { t: "b", v: ieee > 0 };
            break;
          case 7:
            ret = { t: "n", v: ieee / 86400 };
            break;
          case 8:
            ret = { t: "e", v: 0 };
            break;
          case 9:
            {
              if (ridx > -1)
                ret = { t: "s", v: rsst[ridx] };
              else if (sidx > -1)
                ret = { t: "s", v: sst[sidx] };
              else if (!isNaN(ieee))
                ret = { t: "n", v: ieee };
              else
                throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
            }
            break;
          default:
            throw new Error("Unsupported cell type ".concat(buf.slice(0, 4)));
        }
        return ret;
      }
      function parse_new_storage(buf, sst, rsst) {
        var dv = u8_to_dataview(buf);
        var flags = dv.getUint32(8, true);
        var data_offset = 12;
        var ridx = -1, sidx = -1, d128 = NaN, ieee = NaN, dt2 = new Date(2001, 0, 1);
        if (flags & 1) {
          d128 = readDecimal128LE(buf, data_offset);
          data_offset += 16;
        }
        if (flags & 2) {
          ieee = dv.getFloat64(data_offset, true);
          data_offset += 8;
        }
        if (flags & 4) {
          dt2.setTime(dt2.getTime() + dv.getFloat64(data_offset, true) * 1e3);
          data_offset += 8;
        }
        if (flags & 8) {
          sidx = dv.getUint32(data_offset, true);
          data_offset += 4;
        }
        if (flags & 16) {
          ridx = dv.getUint32(data_offset, true);
          data_offset += 4;
        }
        var ret;
        switch (buf[1]) {
          case 0:
            break;
          case 2:
            ret = { t: "n", v: d128 };
            break;
          case 3:
            ret = { t: "s", v: sst[sidx] };
            break;
          case 5:
            ret = { t: "d", v: dt2 };
            break;
          case 6:
            ret = { t: "b", v: ieee > 0 };
            break;
          case 7:
            ret = { t: "n", v: ieee / 86400 };
            break;
          case 8:
            ret = { t: "e", v: 0 };
            break;
          case 9:
            {
              if (ridx > -1)
                ret = { t: "s", v: rsst[ridx] };
              else
                throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
            }
            break;
          case 10:
            ret = { t: "n", v: d128 };
            break;
          default:
            throw new Error("Unsupported cell type ".concat(buf[1], " : ").concat(flags & 31, " : ").concat(buf.slice(0, 4)));
        }
        return ret;
      }
      function write_new_storage(cell, sst) {
        var out = new Uint8Array(32), dv = u8_to_dataview(out), l2 = 12, flags = 0;
        out[0] = 5;
        switch (cell.t) {
          case "n":
            out[1] = 2;
            writeDecimal128LE(out, l2, cell.v);
            flags |= 1;
            l2 += 16;
            break;
          case "b":
            out[1] = 6;
            dv.setFloat64(l2, cell.v ? 1 : 0, true);
            flags |= 2;
            l2 += 8;
            break;
          case "s":
            if (sst.indexOf(cell.v) == -1)
              throw new Error("Value ".concat(cell.v, " missing from SST!"));
            out[1] = 3;
            dv.setUint32(l2, sst.indexOf(cell.v), true);
            flags |= 8;
            l2 += 4;
            break;
          default:
            throw "unsupported cell type " + cell.t;
        }
        dv.setUint32(8, flags, true);
        return out.slice(0, l2);
      }
      function write_old_storage(cell, sst) {
        var out = new Uint8Array(32), dv = u8_to_dataview(out), l2 = 12, flags = 0;
        out[0] = 3;
        switch (cell.t) {
          case "n":
            out[2] = 2;
            dv.setFloat64(l2, cell.v, true);
            flags |= 32;
            l2 += 8;
            break;
          case "b":
            out[2] = 6;
            dv.setFloat64(l2, cell.v ? 1 : 0, true);
            flags |= 32;
            l2 += 8;
            break;
          case "s":
            if (sst.indexOf(cell.v) == -1)
              throw new Error("Value ".concat(cell.v, " missing from SST!"));
            out[2] = 3;
            dv.setUint32(l2, sst.indexOf(cell.v), true);
            flags |= 16;
            l2 += 4;
            break;
          default:
            throw "unsupported cell type " + cell.t;
        }
        dv.setUint32(4, flags, true);
        return out.slice(0, l2);
      }
      function parse_cell_storage(buf, sst, rsst) {
        switch (buf[0]) {
          case 0:
          case 1:
          case 2:
          case 3:
            return parse_old_storage(buf, sst, rsst, buf[0]);
          case 5:
            return parse_new_storage(buf, sst, rsst);
          default:
            throw new Error("Unsupported payload version ".concat(buf[0]));
        }
      }
      function parse_TSP_Reference(buf) {
        var pb = parse_shallow(buf);
        return parse_varint49(pb[1][0].data);
      }
      function write_TSP_Reference(idx) {
        var out = [];
        out[1] = [{ type: 0, data: write_varint49(idx) }];
        return write_shallow(out);
      }
      function parse_TST_TableDataList(M2, root) {
        var pb = parse_shallow(root.data);
        var type = varint_to_i32(pb[1][0].data);
        var entries = pb[3];
        var data = [];
        (entries || []).forEach(function(entry) {
          var le2 = parse_shallow(entry.data);
          var key = varint_to_i32(le2[1][0].data) >>> 0;
          switch (type) {
            case 1:
              data[key] = u8str(le2[3][0].data);
              break;
            case 8:
              {
                var rt2 = M2[parse_TSP_Reference(le2[9][0].data)][0];
                var rtp = parse_shallow(rt2.data);
                var rtpref = M2[parse_TSP_Reference(rtp[1][0].data)][0];
                var mtype = varint_to_i32(rtpref.meta[1][0].data);
                if (mtype != 2001)
                  throw new Error("2000 unexpected reference to ".concat(mtype));
                var tswpsa = parse_shallow(rtpref.data);
                data[key] = tswpsa[3].map(function(x3) {
                  return u8str(x3.data);
                }).join("");
              }
              break;
          }
        });
        return data;
      }
      function parse_TST_TileRowInfo(u8, type) {
        var _a2, _b, _c, _d, _e2, _f, _g, _h, _i, _j, _k, _l, _m, _n;
        var pb = parse_shallow(u8);
        var R2 = varint_to_i32(pb[1][0].data) >>> 0;
        var cnt = varint_to_i32(pb[2][0].data) >>> 0;
        var wide_offsets = ((_b = (_a2 = pb[8]) == null ? void 0 : _a2[0]) == null ? void 0 : _b.data) && varint_to_i32(pb[8][0].data) > 0 || false;
        var used_storage_u8, used_storage;
        if (((_d = (_c = pb[7]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && type != 0) {
          used_storage_u8 = (_f = (_e2 = pb[7]) == null ? void 0 : _e2[0]) == null ? void 0 : _f.data;
          used_storage = (_h = (_g = pb[6]) == null ? void 0 : _g[0]) == null ? void 0 : _h.data;
        } else if (((_j = (_i = pb[4]) == null ? void 0 : _i[0]) == null ? void 0 : _j.data) && type != 1) {
          used_storage_u8 = (_l = (_k = pb[4]) == null ? void 0 : _k[0]) == null ? void 0 : _l.data;
          used_storage = (_n = (_m = pb[3]) == null ? void 0 : _m[0]) == null ? void 0 : _n.data;
        } else
          throw "NUMBERS Tile missing ".concat(type, " cell storage");
        var width = wide_offsets ? 4 : 1;
        var used_storage_offsets = u8_to_dataview(used_storage_u8);
        var offsets = [];
        for (var C2 = 0; C2 < used_storage_u8.length / 2; ++C2) {
          var off = used_storage_offsets.getUint16(C2 * 2, true);
          if (off < 65535)
            offsets.push([C2, off]);
        }
        if (offsets.length != cnt)
          throw "Expected ".concat(cnt, " cells, found ").concat(offsets.length);
        var cells = [];
        for (C2 = 0; C2 < offsets.length - 1; ++C2)
          cells[offsets[C2][0]] = used_storage.subarray(offsets[C2][1] * width, offsets[C2 + 1][1] * width);
        if (offsets.length >= 1)
          cells[offsets[offsets.length - 1][0]] = used_storage.subarray(offsets[offsets.length - 1][1] * width);
        return { R: R2, cells };
      }
      function parse_TST_Tile(M2, root) {
        var _a2;
        var pb = parse_shallow(root.data);
        var storage = ((_a2 = pb == null ? void 0 : pb[7]) == null ? void 0 : _a2[0]) ? varint_to_i32(pb[7][0].data) >>> 0 > 0 ? 1 : 0 : -1;
        var ri2 = mappa(pb[5], function(u8) {
          return parse_TST_TileRowInfo(u8, storage);
        });
        return {
          nrows: varint_to_i32(pb[4][0].data) >>> 0,
          data: ri2.reduce(function(acc, x3) {
            if (!acc[x3.R])
              acc[x3.R] = [];
            x3.cells.forEach(function(cell, C2) {
              if (acc[x3.R][C2])
                throw new Error("Duplicate cell r=".concat(x3.R, " c=").concat(C2));
              acc[x3.R][C2] = cell;
            });
            return acc;
          }, [])
        };
      }
      function parse_TST_TableModelArchive(M2, root, ws) {
        var _a2;
        var pb = parse_shallow(root.data);
        var range = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
        range.e.r = (varint_to_i32(pb[6][0].data) >>> 0) - 1;
        if (range.e.r < 0)
          throw new Error("Invalid row varint ".concat(pb[6][0].data));
        range.e.c = (varint_to_i32(pb[7][0].data) >>> 0) - 1;
        if (range.e.c < 0)
          throw new Error("Invalid col varint ".concat(pb[7][0].data));
        ws["!ref"] = encode_range(range);
        var store = parse_shallow(pb[4][0].data);
        var sst = parse_TST_TableDataList(M2, M2[parse_TSP_Reference(store[4][0].data)][0]);
        var rsst = ((_a2 = store[17]) == null ? void 0 : _a2[0]) ? parse_TST_TableDataList(M2, M2[parse_TSP_Reference(store[17][0].data)][0]) : [];
        var tile = parse_shallow(store[3][0].data);
        var _R = 0;
        tile[1].forEach(function(t3) {
          var tl = parse_shallow(t3.data);
          var ref = M2[parse_TSP_Reference(tl[2][0].data)][0];
          var mtype = varint_to_i32(ref.meta[1][0].data);
          if (mtype != 6002)
            throw new Error("6001 unexpected reference to ".concat(mtype));
          var _tile = parse_TST_Tile(M2, ref);
          _tile.data.forEach(function(row, R2) {
            row.forEach(function(buf, C2) {
              var addr = encode_cell({ r: _R + R2, c: C2 });
              var res = parse_cell_storage(buf, sst, rsst);
              if (res)
                ws[addr] = res;
            });
          });
          _R += _tile.nrows;
        });
      }
      function parse_TST_TableInfoArchive(M2, root) {
        var pb = parse_shallow(root.data);
        var out = { "!ref": "A1" };
        var tableref = M2[parse_TSP_Reference(pb[2][0].data)];
        var mtype = varint_to_i32(tableref[0].meta[1][0].data);
        if (mtype != 6001)
          throw new Error("6000 unexpected reference to ".concat(mtype));
        parse_TST_TableModelArchive(M2, tableref[0], out);
        return out;
      }
      function parse_TN_SheetArchive(M2, root) {
        var _a2;
        var pb = parse_shallow(root.data);
        var out = {
          name: ((_a2 = pb[1]) == null ? void 0 : _a2[0]) ? u8str(pb[1][0].data) : "",
          sheets: []
        };
        var shapeoffs = mappa(pb[2], parse_TSP_Reference);
        shapeoffs.forEach(function(off) {
          M2[off].forEach(function(m3) {
            var mtype = varint_to_i32(m3.meta[1][0].data);
            if (mtype == 6e3)
              out.sheets.push(parse_TST_TableInfoArchive(M2, m3));
          });
        });
        return out;
      }
      function parse_TN_DocumentArchive(M2, root) {
        var out = book_new();
        var pb = parse_shallow(root.data);
        var sheetoffs = mappa(pb[1], parse_TSP_Reference);
        sheetoffs.forEach(function(off) {
          M2[off].forEach(function(m3) {
            var mtype = varint_to_i32(m3.meta[1][0].data);
            if (mtype == 2) {
              var root2 = parse_TN_SheetArchive(M2, m3);
              root2.sheets.forEach(function(sheet, idx) {
                book_append_sheet(out, sheet, idx == 0 ? root2.name : root2.name + "_" + idx, true);
              });
            }
          });
        });
        if (out.SheetNames.length == 0)
          throw new Error("Empty NUMBERS file");
        return out;
      }
      function parse_numbers_iwa(cfb) {
        var _a2, _b, _c, _d;
        var M2 = {}, indices = [];
        cfb.FullPaths.forEach(function(p3) {
          if (p3.match(/\.iwpv2/))
            throw new Error("Unsupported password protection");
        });
        cfb.FileIndex.forEach(function(s3) {
          if (!s3.name.match(/\.iwa$/))
            return;
          var o3;
          try {
            o3 = decompress_iwa_file(s3.content);
          } catch (e3) {
            return console.log("?? " + s3.content.length + " " + (e3.message || e3));
          }
          var packets;
          try {
            packets = parse_iwa_file(o3);
          } catch (e3) {
            return console.log("## " + (e3.message || e3));
          }
          packets.forEach(function(packet) {
            M2[packet.id] = packet.messages;
            indices.push(packet.id);
          });
        });
        if (!indices.length)
          throw new Error("File has no messages");
        var docroot = ((_d = (_c = (_b = (_a2 = M2 == null ? void 0 : M2[1]) == null ? void 0 : _a2[0]) == null ? void 0 : _b.meta) == null ? void 0 : _c[1]) == null ? void 0 : _d[0].data) && varint_to_i32(M2[1][0].meta[1][0].data) == 1 && M2[1][0];
        if (!docroot)
          indices.forEach(function(idx) {
            M2[idx].forEach(function(iwam) {
              var mtype = varint_to_i32(iwam.meta[1][0].data) >>> 0;
              if (mtype == 1) {
                if (!docroot)
                  docroot = iwam;
                else
                  throw new Error("Document has multiple roots");
              }
            });
          });
        if (!docroot)
          throw new Error("Cannot find Document root");
        return parse_TN_DocumentArchive(M2, docroot);
      }
      function write_tile_row(tri, data, SST) {
        var _a2, _b, _c, _d;
        if (!((_a2 = tri[6]) == null ? void 0 : _a2[0]) || !((_b = tri[7]) == null ? void 0 : _b[0]))
          throw "Mutation only works on post-BNC storages!";
        var wide_offsets = ((_d = (_c = tri[8]) == null ? void 0 : _c[0]) == null ? void 0 : _d.data) && varint_to_i32(tri[8][0].data) > 0 || false;
        if (wide_offsets)
          throw "Math only works with normal offsets";
        var cnt = 0;
        var dv = u8_to_dataview(tri[7][0].data), last_offset = 0, cell_storage = [];
        var _dv = u8_to_dataview(tri[4][0].data), _last_offset = 0, _cell_storage = [];
        for (var C2 = 0; C2 < data.length; ++C2) {
          if (data[C2] == null) {
            dv.setUint16(C2 * 2, 65535, true);
            _dv.setUint16(C2 * 2, 65535);
            continue;
          }
          dv.setUint16(C2 * 2, last_offset, true);
          _dv.setUint16(C2 * 2, _last_offset, true);
          var celload, _celload;
          switch (typeof data[C2]) {
            case "string":
              celload = write_new_storage({ t: "s", v: data[C2] }, SST);
              _celload = write_old_storage({ t: "s", v: data[C2] }, SST);
              break;
            case "number":
              celload = write_new_storage({ t: "n", v: data[C2] }, SST);
              _celload = write_old_storage({ t: "n", v: data[C2] }, SST);
              break;
            case "boolean":
              celload = write_new_storage({ t: "b", v: data[C2] }, SST);
              _celload = write_old_storage({ t: "b", v: data[C2] }, SST);
              break;
            default:
              throw new Error("Unsupported value " + data[C2]);
          }
          cell_storage.push(celload);
          last_offset += celload.length;
          _cell_storage.push(_celload);
          _last_offset += _celload.length;
          ++cnt;
        }
        tri[2][0].data = write_varint49(cnt);
        for (; C2 < tri[7][0].data.length / 2; ++C2) {
          dv.setUint16(C2 * 2, 65535, true);
          _dv.setUint16(C2 * 2, 65535, true);
        }
        tri[6][0].data = u8concat(cell_storage);
        tri[3][0].data = u8concat(_cell_storage);
        return cnt;
      }
      function write_numbers_iwa(wb, opts) {
        if (!opts || !opts.numbers)
          throw new Error("Must pass a `numbers` option -- check the README");
        var ws = wb.Sheets[wb.SheetNames[0]];
        if (wb.SheetNames.length > 1)
          console.error("The Numbers writer currently writes only the first table");
        var range = decode_range(ws["!ref"]);
        range.s.r = range.s.c = 0;
        var trunc = false;
        if (range.e.c > 9) {
          trunc = true;
          range.e.c = 9;
        }
        if (range.e.r > 49) {
          trunc = true;
          range.e.r = 49;
        }
        if (trunc)
          console.error("The Numbers writer is currently limited to ".concat(encode_range(range)));
        var data = sheet_to_json(ws, { range, header: 1 });
        var SST = ["~Sh33tJ5~"];
        data.forEach(function(row) {
          return row.forEach(function(cell) {
            if (typeof cell == "string")
              SST.push(cell);
          });
        });
        var dependents = {};
        var indices = [];
        var cfb = CFB.read(opts.numbers, { type: "base64" });
        cfb.FileIndex.map(function(fi2, idx) {
          return [fi2, cfb.FullPaths[idx]];
        }).forEach(function(row) {
          var fi2 = row[0], fp = row[1];
          if (fi2.type != 2)
            return;
          if (!fi2.name.match(/\.iwa/))
            return;
          var old_content = fi2.content;
          var raw1 = decompress_iwa_file(old_content);
          var x22 = parse_iwa_file(raw1);
          x22.forEach(function(packet2) {
            indices.push(packet2.id);
            dependents[packet2.id] = { deps: [], location: fp, type: varint_to_i32(packet2.messages[0].meta[1][0].data) };
          });
        });
        indices.sort(function(x22, y22) {
          return x22 - y22;
        });
        var indices_varint = indices.filter(function(x22) {
          return x22 > 1;
        }).map(function(x22) {
          return [x22, write_varint49(x22)];
        });
        cfb.FileIndex.map(function(fi2, idx) {
          return [fi2, cfb.FullPaths[idx]];
        }).forEach(function(row) {
          var fi2 = row[0], fp = row[1];
          if (!fi2.name.match(/\.iwa/))
            return;
          var x22 = parse_iwa_file(decompress_iwa_file(fi2.content));
          x22.forEach(function(ia2) {
            ia2.messages.forEach(function(m3) {
              indices_varint.forEach(function(ivi) {
                if (ia2.messages.some(function(mess) {
                  return varint_to_i32(mess.meta[1][0].data) != 11006 && u8contains(mess.data, ivi[1]);
                })) {
                  dependents[ivi[0]].deps.push(ia2.id);
                }
              });
            });
          });
        });
        function get_unique_msgid() {
          for (var i3 = 927262; i3 < 2e6; ++i3)
            if (!dependents[i3])
              return i3;
          throw new Error("Too many messages");
        }
        var entry = CFB.find(cfb, dependents[1].location);
        var x3 = parse_iwa_file(decompress_iwa_file(entry.content));
        var docroot;
        for (var xi = 0; xi < x3.length; ++xi) {
          var packet = x3[xi];
          if (packet.id == 1)
            docroot = packet;
        }
        var sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[1][0].data);
        entry = CFB.find(cfb, dependents[sheetrootref].location);
        x3 = parse_iwa_file(decompress_iwa_file(entry.content));
        for (xi = 0; xi < x3.length; ++xi) {
          packet = x3[xi];
          if (packet.id == sheetrootref)
            docroot = packet;
        }
        sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
        entry = CFB.find(cfb, dependents[sheetrootref].location);
        x3 = parse_iwa_file(decompress_iwa_file(entry.content));
        for (xi = 0; xi < x3.length; ++xi) {
          packet = x3[xi];
          if (packet.id == sheetrootref)
            docroot = packet;
        }
        sheetrootref = parse_TSP_Reference(parse_shallow(docroot.messages[0].data)[2][0].data);
        entry = CFB.find(cfb, dependents[sheetrootref].location);
        x3 = parse_iwa_file(decompress_iwa_file(entry.content));
        for (xi = 0; xi < x3.length; ++xi) {
          packet = x3[xi];
          if (packet.id == sheetrootref)
            docroot = packet;
        }
        var pb = parse_shallow(docroot.messages[0].data);
        {
          pb[6][0].data = write_varint49(range.e.r + 1);
          pb[7][0].data = write_varint49(range.e.c + 1);
          var cruidsref = parse_TSP_Reference(pb[46][0].data);
          var oldbucket = CFB.find(cfb, dependents[cruidsref].location);
          var _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
          {
            for (var j3 = 0; j3 < _x.length; ++j3) {
              if (_x[j3].id == cruidsref)
                break;
            }
            if (_x[j3].id != cruidsref)
              throw "Bad ColumnRowUIDMapArchive";
            var cruids = parse_shallow(_x[j3].messages[0].data);
            cruids[1] = [];
            cruids[2] = [], cruids[3] = [];
            for (var C2 = 0; C2 <= range.e.c; ++C2) {
              var uuid = [];
              uuid[1] = uuid[2] = [{ type: 0, data: write_varint49(C2 + 420690) }];
              cruids[1].push({ type: 2, data: write_shallow(uuid) });
              cruids[2].push({ type: 0, data: write_varint49(C2) });
              cruids[3].push({ type: 0, data: write_varint49(C2) });
            }
            cruids[4] = [];
            cruids[5] = [], cruids[6] = [];
            for (var R2 = 0; R2 <= range.e.r; ++R2) {
              uuid = [];
              uuid[1] = uuid[2] = [{ type: 0, data: write_varint49(R2 + 726270) }];
              cruids[4].push({ type: 2, data: write_shallow(uuid) });
              cruids[5].push({ type: 0, data: write_varint49(R2) });
              cruids[6].push({ type: 0, data: write_varint49(R2) });
            }
            _x[j3].messages[0].data = write_shallow(cruids);
          }
          oldbucket.content = compress_iwa_file(write_iwa_file(_x));
          oldbucket.size = oldbucket.content.length;
          delete pb[46];
          var store = parse_shallow(pb[4][0].data);
          {
            store[7][0].data = write_varint49(range.e.r + 1);
            var row_headers = parse_shallow(store[1][0].data);
            var row_header_ref = parse_TSP_Reference(row_headers[2][0].data);
            oldbucket = CFB.find(cfb, dependents[row_header_ref].location);
            _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
            {
              if (_x[0].id != row_header_ref)
                throw "Bad HeaderStorageBucket";
              var base_bucket = parse_shallow(_x[0].messages[0].data);
              for (R2 = 0; R2 < data.length; ++R2) {
                var _bucket = parse_shallow(base_bucket[2][0].data);
                _bucket[1][0].data = write_varint49(R2);
                _bucket[4][0].data = write_varint49(data[R2].length);
                base_bucket[2][R2] = { type: base_bucket[2][0].type, data: write_shallow(_bucket) };
              }
              _x[0].messages[0].data = write_shallow(base_bucket);
            }
            oldbucket.content = compress_iwa_file(write_iwa_file(_x));
            oldbucket.size = oldbucket.content.length;
            var col_header_ref = parse_TSP_Reference(store[2][0].data);
            oldbucket = CFB.find(cfb, dependents[col_header_ref].location);
            _x = parse_iwa_file(decompress_iwa_file(oldbucket.content));
            {
              if (_x[0].id != col_header_ref)
                throw "Bad HeaderStorageBucket";
              base_bucket = parse_shallow(_x[0].messages[0].data);
              for (C2 = 0; C2 <= range.e.c; ++C2) {
                _bucket = parse_shallow(base_bucket[2][0].data);
                _bucket[1][0].data = write_varint49(C2);
                _bucket[4][0].data = write_varint49(range.e.r + 1);
                base_bucket[2][C2] = { type: base_bucket[2][0].type, data: write_shallow(_bucket) };
              }
              _x[0].messages[0].data = write_shallow(base_bucket);
            }
            oldbucket.content = compress_iwa_file(write_iwa_file(_x));
            oldbucket.size = oldbucket.content.length;
            var sstref = parse_TSP_Reference(store[4][0].data);
            (function() {
              var sentry = CFB.find(cfb, dependents[sstref].location);
              var sx = parse_iwa_file(decompress_iwa_file(sentry.content));
              var sstroot;
              for (var sxi = 0; sxi < sx.length; ++sxi) {
                var packet2 = sx[sxi];
                if (packet2.id == sstref)
                  sstroot = packet2;
              }
              var sstdata = parse_shallow(sstroot.messages[0].data);
              {
                sstdata[3] = [];
                var newsst = [];
                SST.forEach(function(str, i3) {
                  newsst[1] = [{ type: 0, data: write_varint49(i3) }];
                  newsst[2] = [{ type: 0, data: write_varint49(1) }];
                  newsst[3] = [{ type: 2, data: stru8(str) }];
                  sstdata[3].push({ type: 2, data: write_shallow(newsst) });
                });
              }
              sstroot.messages[0].data = write_shallow(sstdata);
              var sy = write_iwa_file(sx);
              var raw32 = compress_iwa_file(sy);
              sentry.content = raw32;
              sentry.size = sentry.content.length;
            })();
            var tile = parse_shallow(store[3][0].data);
            {
              var t3 = tile[1][0];
              delete tile[2];
              var tl = parse_shallow(t3.data);
              {
                var tileref = parse_TSP_Reference(tl[2][0].data);
                (function() {
                  var tentry = CFB.find(cfb, dependents[tileref].location);
                  var tx = parse_iwa_file(decompress_iwa_file(tentry.content));
                  var tileroot;
                  for (var sxi = 0; sxi < tx.length; ++sxi) {
                    var packet2 = tx[sxi];
                    if (packet2.id == tileref)
                      tileroot = packet2;
                  }
                  var tiledata = parse_shallow(tileroot.messages[0].data);
                  {
                    delete tiledata[6];
                    delete tile[7];
                    var rowload = new Uint8Array(tiledata[5][0].data);
                    tiledata[5] = [];
                    var cnt = 0;
                    for (var R22 = 0; R22 <= range.e.r; ++R22) {
                      var tilerow = parse_shallow(rowload);
                      cnt += write_tile_row(tilerow, data[R22], SST);
                      tilerow[1][0].data = write_varint49(R22);
                      tiledata[5].push({ data: write_shallow(tilerow), type: 2 });
                    }
                    tiledata[1] = [{ type: 0, data: write_varint49(range.e.c + 1) }];
                    tiledata[2] = [{ type: 0, data: write_varint49(range.e.r + 1) }];
                    tiledata[3] = [{ type: 0, data: write_varint49(cnt) }];
                    tiledata[4] = [{ type: 0, data: write_varint49(range.e.r + 1) }];
                  }
                  tileroot.messages[0].data = write_shallow(tiledata);
                  var ty = write_iwa_file(tx);
                  var raw32 = compress_iwa_file(ty);
                  tentry.content = raw32;
                  tentry.size = tentry.content.length;
                })();
              }
              t3.data = write_shallow(tl);
            }
            store[3][0].data = write_shallow(tile);
          }
          pb[4][0].data = write_shallow(store);
        }
        docroot.messages[0].data = write_shallow(pb);
        var y3 = write_iwa_file(x3);
        var raw3 = compress_iwa_file(y3);
        entry.content = raw3;
        entry.size = entry.content.length;
        return cfb;
      }
      function fix_opts_func(defaults) {
        return function fix_opts(opts) {
          for (var i3 = 0; i3 != defaults.length; ++i3) {
            var d3 = defaults[i3];
            if (opts[d3[0]] === void 0) opts[d3[0]] = d3[1];
            if (d3[2] === "n") opts[d3[0]] = Number(opts[d3[0]]);
          }
        };
      }
      function fix_read_opts(opts) {
        fix_opts_func([
          ["cellNF", false],
          /* emit cell number format string as .z */
          ["cellHTML", true],
          /* emit html string as .h */
          ["cellFormula", true],
          /* emit formulae as .f */
          ["cellStyles", false],
          /* emits style/theme as .s */
          ["cellText", true],
          /* emit formatted text as .w */
          ["cellDates", false],
          /* emit date cells with type `d` */
          ["sheetStubs", false],
          /* emit empty cells */
          ["sheetRows", 0, "n"],
          /* read n rows (0 = read all rows) */
          ["bookDeps", false],
          /* parse calculation chains */
          ["bookSheets", false],
          /* only try to get sheet names (no Sheets) */
          ["bookProps", false],
          /* only try to get properties (no Sheets) */
          ["bookFiles", false],
          /* include raw file structure (keys, files, cfb) */
          ["bookVBA", false],
          /* include vba raw data (vbaraw) */
          ["password", ""],
          /* password */
          ["WTF", false]
          /* WTF mode (throws errors) */
        ])(opts);
      }
      function fix_write_opts(opts) {
        fix_opts_func([
          ["cellDates", false],
          /* write date cells with type `d` */
          ["bookSST", false],
          /* Generate Shared String Table */
          ["bookType", "xlsx"],
          /* Type of workbook (xlsx/m/b) */
          ["compression", false],
          /* Use file compression */
          ["WTF", false]
          /* WTF mode (throws errors) */
        ])(opts);
      }
      function get_sheet_type(n3) {
        if (RELS.WS.indexOf(n3) > -1) return "sheet";
        if (RELS.CS && n3 == RELS.CS) return "chart";
        if (RELS.DS && n3 == RELS.DS) return "dialog";
        if (RELS.MS && n3 == RELS.MS) return "macro";
        return n3 && n3.length ? n3 : "sheet";
      }
      function safe_parse_wbrels(wbrels, sheets) {
        if (!wbrels) return 0;
        try {
          wbrels = sheets.map(function pwbr(w3) {
            if (!w3.id) w3.id = w3.strRelID;
            return [w3.name, wbrels["!id"][w3.id].Target, get_sheet_type(wbrels["!id"][w3.id].Type)];
          });
        } catch (e3) {
          return null;
        }
        return !wbrels || wbrels.length === 0 ? null : wbrels;
      }
      function safe_parse_sheet(zip, path, relsPath, sheet, idx, sheetRels, sheets, stype, opts, wb, themes, styles) {
        try {
          sheetRels[sheet] = parse_rels(getzipstr(zip, relsPath, true), path);
          var data = getzipdata(zip, path);
          var _ws;
          switch (stype) {
            case "sheet":
              _ws = parse_ws(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              break;
            case "chart":
              _ws = parse_cs(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              if (!_ws || !_ws["!drawel"]) break;
              var dfile = resolve_path(_ws["!drawel"].Target, path);
              var drelsp = get_rels_path(dfile);
              var draw = parse_drawing(getzipstr(zip, dfile, true), parse_rels(getzipstr(zip, drelsp, true), dfile));
              var chartp = resolve_path(draw, dfile);
              var crelsp = get_rels_path(chartp);
              _ws = parse_chart(getzipstr(zip, chartp, true), chartp, opts, parse_rels(getzipstr(zip, crelsp, true), chartp), wb, _ws);
              break;
            case "macro":
              _ws = parse_ms(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              break;
            case "dialog":
              _ws = parse_ds(data, path, idx, opts, sheetRels[sheet], wb, themes, styles);
              break;
            default:
              throw new Error("Unrecognized sheet type " + stype);
          }
          sheets[sheet] = _ws;
          var tcomments = [];
          if (sheetRels && sheetRels[sheet]) keys(sheetRels[sheet]).forEach(function(n3) {
            var dfile2 = "";
            if (sheetRels[sheet][n3].Type == RELS.CMNT) {
              dfile2 = resolve_path(sheetRels[sheet][n3].Target, path);
              var comments = parse_cmnt(getzipdata(zip, dfile2, true), dfile2, opts);
              if (!comments || !comments.length) return;
              sheet_insert_comments(_ws, comments, false);
            }
            if (sheetRels[sheet][n3].Type == RELS.TCMNT) {
              dfile2 = resolve_path(sheetRels[sheet][n3].Target, path);
              tcomments = tcomments.concat(parse_tcmnt_xml(getzipdata(zip, dfile2, true), opts));
            }
          });
          if (tcomments && tcomments.length) sheet_insert_comments(_ws, tcomments, true, opts.people || []);
        } catch (e3) {
          if (opts.WTF) throw e3;
        }
      }
      function strip_front_slash(x3) {
        return x3.charAt(0) == "/" ? x3.slice(1) : x3;
      }
      function parse_zip(zip, opts) {
        make_ssf();
        opts = opts || {};
        fix_read_opts(opts);
        if (safegetzipfile(zip, "META-INF/manifest.xml")) return parse_ods(zip, opts);
        if (safegetzipfile(zip, "objectdata.xml")) return parse_ods(zip, opts);
        if (safegetzipfile(zip, "Index/Document.iwa")) {
          if (typeof Uint8Array == "undefined") throw new Error("NUMBERS file parsing requires Uint8Array support");
          if (typeof parse_numbers_iwa != "undefined") {
            if (zip.FileIndex) return parse_numbers_iwa(zip);
            var _zip = CFB.utils.cfb_new();
            zipentries(zip).forEach(function(e3) {
              zip_add_file(_zip, e3, getzipbin(zip, e3));
            });
            return parse_numbers_iwa(_zip);
          }
          throw new Error("Unsupported NUMBERS file");
        }
        if (!safegetzipfile(zip, "[Content_Types].xml")) {
          if (safegetzipfile(zip, "index.xml.gz")) throw new Error("Unsupported NUMBERS 08 file");
          if (safegetzipfile(zip, "index.xml")) throw new Error("Unsupported NUMBERS 09 file");
          throw new Error("Unsupported ZIP file");
        }
        var entries = zipentries(zip);
        var dir = parse_ct(getzipstr(zip, "[Content_Types].xml"));
        var xlsb = false;
        var sheets, binname;
        if (dir.workbooks.length === 0) {
          binname = "xl/workbook.xml";
          if (getzipdata(zip, binname, true)) dir.workbooks.push(binname);
        }
        if (dir.workbooks.length === 0) {
          binname = "xl/workbook.bin";
          if (!getzipdata(zip, binname, true)) throw new Error("Could not find workbook");
          dir.workbooks.push(binname);
          xlsb = true;
        }
        if (dir.workbooks[0].slice(-3) == "bin") xlsb = true;
        var themes = {};
        var styles = {};
        if (!opts.bookSheets && !opts.bookProps) {
          strs = [];
          if (dir.sst) try {
            strs = parse_sst(getzipdata(zip, strip_front_slash(dir.sst)), dir.sst, opts);
          } catch (e3) {
            if (opts.WTF) throw e3;
          }
          if (opts.cellStyles && dir.themes.length) themes = parse_theme(getzipstr(zip, dir.themes[0].replace(/^\//, ""), true) || "", dir.themes[0], opts);
          if (dir.style) styles = parse_sty(getzipdata(zip, strip_front_slash(dir.style)), dir.style, themes, opts);
        }
        dir.links.map(function(link) {
          try {
            var rels = parse_rels(getzipstr(zip, get_rels_path(strip_front_slash(link))), link);
            return parse_xlink(getzipdata(zip, strip_front_slash(link)), rels, link, opts);
          } catch (e3) {
          }
        });
        var wb = parse_wb(getzipdata(zip, strip_front_slash(dir.workbooks[0])), dir.workbooks[0], opts);
        var props = {}, propdata = "";
        if (dir.coreprops.length) {
          propdata = getzipdata(zip, strip_front_slash(dir.coreprops[0]), true);
          if (propdata) props = parse_core_props(propdata);
          if (dir.extprops.length !== 0) {
            propdata = getzipdata(zip, strip_front_slash(dir.extprops[0]), true);
            if (propdata) parse_ext_props(propdata, props, opts);
          }
        }
        var custprops = {};
        if (!opts.bookSheets || opts.bookProps) {
          if (dir.custprops.length !== 0) {
            propdata = getzipstr(zip, strip_front_slash(dir.custprops[0]), true);
            if (propdata) custprops = parse_cust_props(propdata, opts);
          }
        }
        var out = {};
        if (opts.bookSheets || opts.bookProps) {
          if (wb.Sheets) sheets = wb.Sheets.map(function pluck(x3) {
            return x3.name;
          });
          else if (props.Worksheets && props.SheetNames.length > 0) sheets = props.SheetNames;
          if (opts.bookProps) {
            out.Props = props;
            out.Custprops = custprops;
          }
          if (opts.bookSheets && typeof sheets !== "undefined") out.SheetNames = sheets;
          if (opts.bookSheets ? out.SheetNames : opts.bookProps) return out;
        }
        sheets = {};
        var deps = {};
        if (opts.bookDeps && dir.calcchain) deps = parse_cc(getzipdata(zip, strip_front_slash(dir.calcchain)), dir.calcchain, opts);
        var i3 = 0;
        var sheetRels = {};
        var path, relsPath;
        {
          var wbsheets = wb.Sheets;
          props.Worksheets = wbsheets.length;
          props.SheetNames = [];
          for (var j3 = 0; j3 != wbsheets.length; ++j3) {
            props.SheetNames[j3] = wbsheets[j3].name;
          }
        }
        var wbext = xlsb ? "bin" : "xml";
        var wbrelsi = dir.workbooks[0].lastIndexOf("/");
        var wbrelsfile = (dir.workbooks[0].slice(0, wbrelsi + 1) + "_rels/" + dir.workbooks[0].slice(wbrelsi + 1) + ".rels").replace(/^\//, "");
        if (!safegetzipfile(zip, wbrelsfile)) wbrelsfile = "xl/_rels/workbook." + wbext + ".rels";
        var wbrels = parse_rels(getzipstr(zip, wbrelsfile, true), wbrelsfile.replace(/_rels.*/, "s5s"));
        if ((dir.metadata || []).length >= 1) {
          opts.xlmeta = parse_xlmeta(getzipdata(zip, strip_front_slash(dir.metadata[0])), dir.metadata[0], opts);
        }
        if ((dir.people || []).length >= 1) {
          opts.people = parse_people_xml(getzipdata(zip, strip_front_slash(dir.people[0])), opts);
        }
        if (wbrels) wbrels = safe_parse_wbrels(wbrels, wb.Sheets);
        var nmode = getzipdata(zip, "xl/worksheets/sheet.xml", true) ? 1 : 0;
        wsloop: for (i3 = 0; i3 != props.Worksheets; ++i3) {
          var stype = "sheet";
          if (wbrels && wbrels[i3]) {
            path = "xl/" + wbrels[i3][1].replace(/[\/]?xl\//, "");
            if (!safegetzipfile(zip, path)) path = wbrels[i3][1];
            if (!safegetzipfile(zip, path)) path = wbrelsfile.replace(/_rels\/.*$/, "") + wbrels[i3][1];
            stype = wbrels[i3][2];
          } else {
            path = "xl/worksheets/sheet" + (i3 + 1 - nmode) + "." + wbext;
            path = path.replace(/sheet0\./, "sheet.");
          }
          relsPath = path.replace(/^(.*)(\/)([^\/]*)$/, "$1/_rels/$3.rels");
          if (opts && opts.sheets != null) switch (typeof opts.sheets) {
            case "number":
              if (i3 != opts.sheets) continue wsloop;
              break;
            case "string":
              if (props.SheetNames[i3].toLowerCase() != opts.sheets.toLowerCase()) continue wsloop;
              break;
            default:
              if (Array.isArray && Array.isArray(opts.sheets)) {
                var snjseen = false;
                for (var snj = 0; snj != opts.sheets.length; ++snj) {
                  if (typeof opts.sheets[snj] == "number" && opts.sheets[snj] == i3) snjseen = 1;
                  if (typeof opts.sheets[snj] == "string" && opts.sheets[snj].toLowerCase() == props.SheetNames[i3].toLowerCase()) snjseen = 1;
                }
                if (!snjseen) continue wsloop;
              }
          }
          safe_parse_sheet(zip, path, relsPath, props.SheetNames[i3], i3, sheetRels, sheets, stype, opts, wb, themes, styles);
        }
        out = {
          Directory: dir,
          Workbook: wb,
          Props: props,
          Custprops: custprops,
          Deps: deps,
          Sheets: sheets,
          SheetNames: props.SheetNames,
          Strings: strs,
          Styles: styles,
          Themes: themes,
          SSF: dup(table_fmt)
        };
        if (opts && opts.bookFiles) {
          if (zip.files) {
            out.keys = entries;
            out.files = zip.files;
          } else {
            out.keys = [];
            out.files = {};
            zip.FullPaths.forEach(function(p3, idx) {
              p3 = p3.replace(/^Root Entry[\/]/, "");
              out.keys.push(p3);
              out.files[p3] = zip.FileIndex[idx];
            });
          }
        }
        if (opts && opts.bookVBA) {
          if (dir.vba.length > 0) out.vbaraw = getzipdata(zip, strip_front_slash(dir.vba[0]), true);
          else if (dir.defaults && dir.defaults.bin === CT_VBA) out.vbaraw = getzipdata(zip, "xl/vbaProject.bin", true);
        }
        return out;
      }
      function parse_xlsxcfb(cfb, _opts) {
        var opts = _opts || {};
        var f2 = "Workbook", data = CFB.find(cfb, f2);
        try {
          f2 = "/!DataSpaces/Version";
          data = CFB.find(cfb, f2);
          if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f2);
          parse_DataSpaceVersionInfo(data.content);
          f2 = "/!DataSpaces/DataSpaceMap";
          data = CFB.find(cfb, f2);
          if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f2);
          var dsm = parse_DataSpaceMap(data.content);
          if (dsm.length !== 1 || dsm[0].comps.length !== 1 || dsm[0].comps[0].t !== 0 || dsm[0].name !== "StrongEncryptionDataSpace" || dsm[0].comps[0].v !== "EncryptedPackage")
            throw new Error("ECMA-376 Encrypted file bad " + f2);
          f2 = "/!DataSpaces/DataSpaceInfo/StrongEncryptionDataSpace";
          data = CFB.find(cfb, f2);
          if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f2);
          var seds = parse_DataSpaceDefinition(data.content);
          if (seds.length != 1 || seds[0] != "StrongEncryptionTransform")
            throw new Error("ECMA-376 Encrypted file bad " + f2);
          f2 = "/!DataSpaces/TransformInfo/StrongEncryptionTransform/!Primary";
          data = CFB.find(cfb, f2);
          if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f2);
          parse_Primary(data.content);
        } catch (e3) {
        }
        f2 = "/EncryptionInfo";
        data = CFB.find(cfb, f2);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f2);
        var einfo = parse_EncryptionInfo(data.content);
        f2 = "/EncryptedPackage";
        data = CFB.find(cfb, f2);
        if (!data || !data.content) throw new Error("ECMA-376 Encrypted file missing " + f2);
        if (einfo[0] == 4 && typeof decrypt_agile !== "undefined") return decrypt_agile(einfo[1], data.content, opts.password || "", opts);
        if (einfo[0] == 2 && typeof decrypt_std76 !== "undefined") return decrypt_std76(einfo[1], data.content, opts.password || "", opts);
        throw new Error("File is password-protected");
      }
      function write_zip(wb, opts) {
        if (opts.bookType == "ods") return write_ods(wb, opts);
        if (opts.bookType == "numbers") return write_numbers_iwa(wb, opts);
        if (opts.bookType == "xlsb") return write_zip_xlsxb(wb, opts);
        return write_zip_xlsx(wb, opts);
      }
      function write_zip_xlsxb(wb, opts) {
        _shapeid = 1024;
        if (wb && !wb.SSF) {
          wb.SSF = dup(table_fmt);
        }
        if (wb && wb.SSF) {
          make_ssf();
          SSF_load_table(wb.SSF);
          opts.revssf = evert_num(wb.SSF);
          opts.revssf[wb.SSF[65535]] = 0;
          opts.ssf = wb.SSF;
        }
        opts.rels = {};
        opts.wbrels = {};
        opts.Strings = [];
        opts.Strings.Count = 0;
        opts.Strings.Unique = 0;
        if (browser_has_Map) opts.revStrings = /* @__PURE__ */ new Map();
        else {
          opts.revStrings = {};
          opts.revStrings.foo = [];
          delete opts.revStrings.foo;
        }
        var wbext = opts.bookType == "xlsb" ? "bin" : "xml";
        var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
        var ct2 = new_ct();
        fix_write_opts(opts = opts || {});
        var zip = zip_new();
        var f2 = "", rId = 0;
        opts.cellXfs = [];
        get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
        if (!wb.Props) wb.Props = {};
        f2 = "docProps/core.xml";
        zip_add_file(zip, f2, write_core_props(wb.Props, opts));
        ct2.coreprops.push(f2);
        add_rels(opts.rels, 2, f2, RELS.CORE_PROPS);
        f2 = "docProps/app.xml";
        if (wb.Props && wb.Props.SheetNames) {
        } else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
        else {
          var _sn = [];
          for (var _i = 0; _i < wb.SheetNames.length; ++_i)
            if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
          wb.Props.SheetNames = _sn;
        }
        wb.Props.Worksheets = wb.Props.SheetNames.length;
        zip_add_file(zip, f2, write_ext_props(wb.Props, opts));
        ct2.extprops.push(f2);
        add_rels(opts.rels, 3, f2, RELS.EXT_PROPS);
        if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
          f2 = "docProps/custom.xml";
          zip_add_file(zip, f2, write_cust_props(wb.Custprops, opts));
          ct2.custprops.push(f2);
          add_rels(opts.rels, 4, f2, RELS.CUST_PROPS);
        }
        for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
          var wsrels = { "!id": {} };
          var ws = wb.Sheets[wb.SheetNames[rId - 1]];
          var _type = (ws || {})["!type"] || "sheet";
          switch (_type) {
            case "chart":
            /* falls through */
            default:
              f2 = "xl/worksheets/sheet" + rId + "." + wbext;
              zip_add_file(zip, f2, write_ws(rId - 1, f2, opts, wb, wsrels));
              ct2.sheets.push(f2);
              add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
          }
          if (ws) {
            var comments = ws["!comments"];
            var need_vml = false;
            var cf = "";
            if (comments && comments.length > 0) {
              cf = "xl/comments" + rId + "." + wbext;
              zip_add_file(zip, cf, write_cmnt(comments, cf, opts));
              ct2.comments.push(cf);
              add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
              need_vml = true;
            }
            if (ws["!legacy"]) {
              if (need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"]));
            }
            delete ws["!comments"];
            delete ws["!legacy"];
          }
          if (wsrels["!id"].rId1) zip_add_file(zip, get_rels_path(f2), write_rels(wsrels));
        }
        if (opts.Strings != null && opts.Strings.length > 0) {
          f2 = "xl/sharedStrings." + wbext;
          zip_add_file(zip, f2, write_sst(opts.Strings, f2, opts));
          ct2.strs.push(f2);
          add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
        }
        f2 = "xl/workbook." + wbext;
        zip_add_file(zip, f2, write_wb(wb, f2, opts));
        ct2.workbooks.push(f2);
        add_rels(opts.rels, 1, f2, RELS.WB);
        f2 = "xl/theme/theme1.xml";
        zip_add_file(zip, f2, write_theme(wb.Themes, opts));
        ct2.themes.push(f2);
        add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
        f2 = "xl/styles." + wbext;
        zip_add_file(zip, f2, write_sty(wb, f2, opts));
        ct2.styles.push(f2);
        add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
        if (wb.vbaraw && vbafmt) {
          f2 = "xl/vbaProject.bin";
          zip_add_file(zip, f2, wb.vbaraw);
          ct2.vba.push(f2);
          add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
        }
        f2 = "xl/metadata." + wbext;
        zip_add_file(zip, f2, write_xlmeta(f2));
        ct2.metadata.push(f2);
        add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
        zip_add_file(zip, "[Content_Types].xml", write_ct(ct2, opts));
        zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
        zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
        delete opts.revssf;
        delete opts.ssf;
        return zip;
      }
      function write_zip_xlsx(wb, opts) {
        _shapeid = 1024;
        if (wb && !wb.SSF) {
          wb.SSF = dup(table_fmt);
        }
        if (wb && wb.SSF) {
          make_ssf();
          SSF_load_table(wb.SSF);
          opts.revssf = evert_num(wb.SSF);
          opts.revssf[wb.SSF[65535]] = 0;
          opts.ssf = wb.SSF;
        }
        opts.rels = {};
        opts.wbrels = {};
        opts.Strings = [];
        opts.Strings.Count = 0;
        opts.Strings.Unique = 0;
        if (browser_has_Map) opts.revStrings = /* @__PURE__ */ new Map();
        else {
          opts.revStrings = {};
          opts.revStrings.foo = [];
          delete opts.revStrings.foo;
        }
        var wbext = "xml";
        var vbafmt = VBAFMTS.indexOf(opts.bookType) > -1;
        var ct2 = new_ct();
        fix_write_opts(opts = opts || {});
        var zip = zip_new();
        var f2 = "", rId = 0;
        opts.cellXfs = [];
        get_cell_style(opts.cellXfs, {}, { revssf: { "General": 0 } });
        if (!wb.Props) wb.Props = {};
        f2 = "docProps/core.xml";
        zip_add_file(zip, f2, write_core_props(wb.Props, opts));
        ct2.coreprops.push(f2);
        add_rels(opts.rels, 2, f2, RELS.CORE_PROPS);
        f2 = "docProps/app.xml";
        if (wb.Props && wb.Props.SheetNames) {
        } else if (!wb.Workbook || !wb.Workbook.Sheets) wb.Props.SheetNames = wb.SheetNames;
        else {
          var _sn = [];
          for (var _i = 0; _i < wb.SheetNames.length; ++_i)
            if ((wb.Workbook.Sheets[_i] || {}).Hidden != 2) _sn.push(wb.SheetNames[_i]);
          wb.Props.SheetNames = _sn;
        }
        wb.Props.Worksheets = wb.Props.SheetNames.length;
        zip_add_file(zip, f2, write_ext_props(wb.Props, opts));
        ct2.extprops.push(f2);
        add_rels(opts.rels, 3, f2, RELS.EXT_PROPS);
        if (wb.Custprops !== wb.Props && keys(wb.Custprops || {}).length > 0) {
          f2 = "docProps/custom.xml";
          zip_add_file(zip, f2, write_cust_props(wb.Custprops, opts));
          ct2.custprops.push(f2);
          add_rels(opts.rels, 4, f2, RELS.CUST_PROPS);
        }
        var people = ["SheetJ5"];
        opts.tcid = 0;
        for (rId = 1; rId <= wb.SheetNames.length; ++rId) {
          var wsrels = { "!id": {} };
          var ws = wb.Sheets[wb.SheetNames[rId - 1]];
          var _type = (ws || {})["!type"] || "sheet";
          switch (_type) {
            case "chart":
            /* falls through */
            default:
              f2 = "xl/worksheets/sheet" + rId + "." + wbext;
              zip_add_file(zip, f2, write_ws_xml(rId - 1, opts, wb, wsrels));
              ct2.sheets.push(f2);
              add_rels(opts.wbrels, -1, "worksheets/sheet" + rId + "." + wbext, RELS.WS[0]);
          }
          if (ws) {
            var comments = ws["!comments"];
            var need_vml = false;
            var cf = "";
            if (comments && comments.length > 0) {
              var needtc = false;
              comments.forEach(function(carr) {
                carr[1].forEach(function(c3) {
                  if (c3.T == true) needtc = true;
                });
              });
              if (needtc) {
                cf = "xl/threadedComments/threadedComment" + rId + "." + wbext;
                zip_add_file(zip, cf, write_tcmnt_xml(comments, people, opts));
                ct2.threadedcomments.push(cf);
                add_rels(wsrels, -1, "../threadedComments/threadedComment" + rId + "." + wbext, RELS.TCMNT);
              }
              cf = "xl/comments" + rId + "." + wbext;
              zip_add_file(zip, cf, write_comments_xml(comments, opts));
              ct2.comments.push(cf);
              add_rels(wsrels, -1, "../comments" + rId + "." + wbext, RELS.CMNT);
              need_vml = true;
            }
            if (ws["!legacy"]) {
              if (need_vml) zip_add_file(zip, "xl/drawings/vmlDrawing" + rId + ".vml", write_comments_vml(rId, ws["!comments"]));
            }
            delete ws["!comments"];
            delete ws["!legacy"];
          }
          if (wsrels["!id"].rId1) zip_add_file(zip, get_rels_path(f2), write_rels(wsrels));
        }
        if (opts.Strings != null && opts.Strings.length > 0) {
          f2 = "xl/sharedStrings." + wbext;
          zip_add_file(zip, f2, write_sst_xml(opts.Strings, opts));
          ct2.strs.push(f2);
          add_rels(opts.wbrels, -1, "sharedStrings." + wbext, RELS.SST);
        }
        f2 = "xl/workbook." + wbext;
        zip_add_file(zip, f2, write_wb_xml(wb, opts));
        ct2.workbooks.push(f2);
        add_rels(opts.rels, 1, f2, RELS.WB);
        f2 = "xl/theme/theme1.xml";
        zip_add_file(zip, f2, write_theme(wb.Themes, opts));
        ct2.themes.push(f2);
        add_rels(opts.wbrels, -1, "theme/theme1.xml", RELS.THEME);
        f2 = "xl/styles." + wbext;
        zip_add_file(zip, f2, write_sty_xml(wb, opts));
        ct2.styles.push(f2);
        add_rels(opts.wbrels, -1, "styles." + wbext, RELS.STY);
        if (wb.vbaraw && vbafmt) {
          f2 = "xl/vbaProject.bin";
          zip_add_file(zip, f2, wb.vbaraw);
          ct2.vba.push(f2);
          add_rels(opts.wbrels, -1, "vbaProject.bin", RELS.VBA);
        }
        f2 = "xl/metadata." + wbext;
        zip_add_file(zip, f2, write_xlmeta_xml());
        ct2.metadata.push(f2);
        add_rels(opts.wbrels, -1, "metadata." + wbext, RELS.XLMETA);
        if (people.length > 1) {
          f2 = "xl/persons/person.xml";
          zip_add_file(zip, f2, write_people_xml(people, opts));
          ct2.people.push(f2);
          add_rels(opts.wbrels, -1, "persons/person.xml", RELS.PEOPLE);
        }
        zip_add_file(zip, "[Content_Types].xml", write_ct(ct2, opts));
        zip_add_file(zip, "_rels/.rels", write_rels(opts.rels));
        zip_add_file(zip, "xl/_rels/workbook." + wbext + ".rels", write_rels(opts.wbrels));
        delete opts.revssf;
        delete opts.ssf;
        return zip;
      }
      function firstbyte(f2, o3) {
        var x3 = "";
        switch ((o3 || {}).type || "base64") {
          case "buffer":
            return [f2[0], f2[1], f2[2], f2[3], f2[4], f2[5], f2[6], f2[7]];
          case "base64":
            x3 = Base64_decode(f2.slice(0, 12));
            break;
          case "binary":
            x3 = f2;
            break;
          case "array":
            return [f2[0], f2[1], f2[2], f2[3], f2[4], f2[5], f2[6], f2[7]];
          default:
            throw new Error("Unrecognized type " + (o3 && o3.type || "undefined"));
        }
        return [x3.charCodeAt(0), x3.charCodeAt(1), x3.charCodeAt(2), x3.charCodeAt(3), x3.charCodeAt(4), x3.charCodeAt(5), x3.charCodeAt(6), x3.charCodeAt(7)];
      }
      function read_cfb(cfb, opts) {
        if (CFB.find(cfb, "EncryptedPackage")) return parse_xlsxcfb(cfb, opts);
        return parse_xlscfb(cfb, opts);
      }
      function read_zip(data, opts) {
        var zip, d3 = data;
        var o3 = opts || {};
        if (!o3.type) o3.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
        zip = zip_read(d3, o3);
        return parse_zip(zip, o3);
      }
      function read_plaintext(data, o3) {
        var i3 = 0;
        main: while (i3 < data.length) switch (data.charCodeAt(i3)) {
          case 10:
          case 13:
          case 32:
            ++i3;
            break;
          case 60:
            return parse_xlml(data.slice(i3), o3);
          default:
            break main;
        }
        return PRN.to_workbook(data, o3);
      }
      function read_plaintext_raw(data, o3) {
        var str = "", bytes = firstbyte(data, o3);
        switch (o3.type) {
          case "base64":
            str = Base64_decode(data);
            break;
          case "binary":
            str = data;
            break;
          case "buffer":
            str = data.toString("binary");
            break;
          case "array":
            str = cc2str(data);
            break;
          default:
            throw new Error("Unrecognized type " + o3.type);
        }
        if (bytes[0] == 239 && bytes[1] == 187 && bytes[2] == 191) str = utf8read(str);
        o3.type = "binary";
        return read_plaintext(str, o3);
      }
      function read_utf16(data, o3) {
        var d3 = data;
        if (o3.type == "base64") d3 = Base64_decode(d3);
        d3 = $cptable.utils.decode(1200, d3.slice(2), "str");
        o3.type = "binary";
        return read_plaintext(d3, o3);
      }
      function bstrify(data) {
        return !data.match(/[^\x00-\x7F]/) ? data : utf8write(data);
      }
      function read_prn(data, d3, o3, str) {
        if (str) {
          o3.type = "string";
          return PRN.to_workbook(data, o3);
        }
        return PRN.to_workbook(d3, o3);
      }
      function readSync(data, opts) {
        reset_cp();
        var o3 = opts || {};
        if (typeof ArrayBuffer !== "undefined" && data instanceof ArrayBuffer) return readSync(new Uint8Array(data), (o3 = dup(o3), o3.type = "array", o3));
        if (typeof Uint8Array !== "undefined" && data instanceof Uint8Array && !o3.type) o3.type = typeof Deno !== "undefined" ? "buffer" : "array";
        var d3 = data, n3 = [0, 0, 0, 0], str = false;
        if (o3.cellStyles) {
          o3.cellNF = true;
          o3.sheetStubs = true;
        }
        _ssfopts = {};
        if (o3.dateNF) _ssfopts.dateNF = o3.dateNF;
        if (!o3.type) o3.type = has_buf && Buffer.isBuffer(data) ? "buffer" : "base64";
        if (o3.type == "file") {
          o3.type = has_buf ? "buffer" : "binary";
          d3 = read_binary(data);
          if (typeof Uint8Array !== "undefined" && !has_buf) o3.type = "array";
        }
        if (o3.type == "string") {
          str = true;
          o3.type = "binary";
          o3.codepage = 65001;
          d3 = bstrify(data);
        }
        if (o3.type == "array" && typeof Uint8Array !== "undefined" && data instanceof Uint8Array && typeof ArrayBuffer !== "undefined") {
          var ab = new ArrayBuffer(3), vu = new Uint8Array(ab);
          vu.foo = "bar";
          if (!vu.foo) {
            o3 = dup(o3);
            o3.type = "array";
            return readSync(ab2a(d3), o3);
          }
        }
        switch ((n3 = firstbyte(d3, o3))[0]) {
          case 208:
            if (n3[1] === 207 && n3[2] === 17 && n3[3] === 224 && n3[4] === 161 && n3[5] === 177 && n3[6] === 26 && n3[7] === 225) return read_cfb(CFB.read(d3, o3), o3);
            break;
          case 9:
            if (n3[1] <= 8) return parse_xlscfb(d3, o3);
            break;
          case 60:
            return parse_xlml(d3, o3);
          case 73:
            if (n3[1] === 73 && n3[2] === 42 && n3[3] === 0) throw new Error("TIFF Image File is not a spreadsheet");
            if (n3[1] === 68) return read_wb_ID(d3, o3);
            break;
          case 84:
            if (n3[1] === 65 && n3[2] === 66 && n3[3] === 76) return DIF.to_workbook(d3, o3);
            break;
          case 80:
            return n3[1] === 75 && n3[2] < 9 && n3[3] < 9 ? read_zip(d3, o3) : read_prn(data, d3, o3, str);
          case 239:
            return n3[3] === 60 ? parse_xlml(d3, o3) : read_prn(data, d3, o3, str);
          case 255:
            if (n3[1] === 254) {
              return read_utf16(d3, o3);
            } else if (n3[1] === 0 && n3[2] === 2 && n3[3] === 0) return WK_.to_workbook(d3, o3);
            break;
          case 0:
            if (n3[1] === 0) {
              if (n3[2] >= 2 && n3[3] === 0) return WK_.to_workbook(d3, o3);
              if (n3[2] === 0 && (n3[3] === 8 || n3[3] === 9)) return WK_.to_workbook(d3, o3);
            }
            break;
          case 3:
          case 131:
          case 139:
          case 140:
            return DBF.to_workbook(d3, o3);
          case 123:
            if (n3[1] === 92 && n3[2] === 114 && n3[3] === 116) return RTF.to_workbook(d3, o3);
            break;
          case 10:
          case 13:
          case 32:
            return read_plaintext_raw(d3, o3);
          case 137:
            if (n3[1] === 80 && n3[2] === 78 && n3[3] === 71) throw new Error("PNG Image File is not a spreadsheet");
            break;
        }
        if (DBF_SUPPORTED_VERSIONS.indexOf(n3[0]) > -1 && n3[2] <= 12 && n3[3] <= 31) return DBF.to_workbook(d3, o3);
        return read_prn(data, d3, o3, str);
      }
      function readFileSync(filename, opts) {
        var o3 = opts || {};
        o3.type = "file";
        return readSync(filename, o3);
      }
      function write_cfb_ctr(cfb, o3) {
        switch (o3.type) {
          case "base64":
          case "binary":
            break;
          case "buffer":
          case "array":
            o3.type = "";
            break;
          case "file":
            return write_dl(o3.file, CFB.write(cfb, { type: has_buf ? "buffer" : "" }));
          case "string":
            throw new Error("'string' output type invalid for '" + o3.bookType + "' files");
          default:
            throw new Error("Unrecognized type " + o3.type);
        }
        return CFB.write(cfb, o3);
      }
      function write_zip_type(wb, opts) {
        var o3 = dup(opts || {});
        var z4 = write_zip(wb, o3);
        return write_zip_denouement(z4, o3);
      }
      function write_zip_typeXLSX(wb, opts) {
        var o3 = dup(opts || {});
        var z4 = write_zip_xlsx(wb, o3);
        return write_zip_denouement(z4, o3);
      }
      function write_zip_denouement(z4, o3) {
        var oopts = {};
        var ftype = has_buf ? "nodebuffer" : typeof Uint8Array !== "undefined" ? "array" : "string";
        if (o3.compression) oopts.compression = "DEFLATE";
        if (o3.password) oopts.type = ftype;
        else switch (o3.type) {
          case "base64":
            oopts.type = "base64";
            break;
          case "binary":
            oopts.type = "string";
            break;
          case "string":
            throw new Error("'string' output type invalid for '" + o3.bookType + "' files");
          case "buffer":
          case "file":
            oopts.type = ftype;
            break;
          default:
            throw new Error("Unrecognized type " + o3.type);
        }
        var out = z4.FullPaths ? CFB.write(z4, { fileType: "zip", type: { "nodebuffer": "buffer", "string": "binary" }[oopts.type] || oopts.type, compression: !!o3.compression }) : z4.generate(oopts);
        if (typeof Deno !== "undefined") {
          if (typeof out == "string") {
            if (o3.type == "binary" || o3.type == "base64") return out;
            out = new Uint8Array(s2ab(out));
          }
        }
        if (o3.password && typeof encrypt_agile !== "undefined") return write_cfb_ctr(encrypt_agile(out, o3.password), o3);
        if (o3.type === "file") return write_dl(o3.file, out);
        return o3.type == "string" ? utf8read(out) : out;
      }
      function write_cfb_type(wb, opts) {
        var o3 = opts || {};
        var cfb = write_xlscfb(wb, o3);
        return write_cfb_ctr(cfb, o3);
      }
      function write_string_type(out, opts, bom) {
        if (!bom) bom = "";
        var o3 = bom + out;
        switch (opts.type) {
          case "base64":
            return Base64_encode(utf8write(o3));
          case "binary":
            return utf8write(o3);
          case "string":
            return out;
          case "file":
            return write_dl(opts.file, o3, "utf8");
          case "buffer": {
            if (has_buf) return Buffer_from(o3, "utf8");
            else if (typeof TextEncoder !== "undefined") return new TextEncoder().encode(o3);
            else return write_string_type(o3, { type: "binary" }).split("").map(function(c3) {
              return c3.charCodeAt(0);
            });
          }
        }
        throw new Error("Unrecognized type " + opts.type);
      }
      function write_stxt_type(out, opts) {
        switch (opts.type) {
          case "base64":
            return Base64_encode(out);
          case "binary":
            return out;
          case "string":
            return out;
          /* override in sheet_to_txt */
          case "file":
            return write_dl(opts.file, out, "binary");
          case "buffer": {
            if (has_buf) return Buffer_from(out, "binary");
            else return out.split("").map(function(c3) {
              return c3.charCodeAt(0);
            });
          }
        }
        throw new Error("Unrecognized type " + opts.type);
      }
      function write_binary_type(out, opts) {
        switch (opts.type) {
          case "string":
          case "base64":
          case "binary":
            var bstr = "";
            for (var i3 = 0; i3 < out.length; ++i3) bstr += String.fromCharCode(out[i3]);
            return opts.type == "base64" ? Base64_encode(bstr) : opts.type == "string" ? utf8read(bstr) : bstr;
          case "file":
            return write_dl(opts.file, out);
          case "buffer":
            return out;
          default:
            throw new Error("Unrecognized type " + opts.type);
        }
      }
      function writeSyncXLSX(wb, opts) {
        reset_cp();
        check_wb(wb);
        var o3 = dup(opts || {});
        if (o3.cellStyles) {
          o3.cellNF = true;
          o3.sheetStubs = true;
        }
        if (o3.type == "array") {
          o3.type = "binary";
          var out = writeSyncXLSX(wb, o3);
          o3.type = "array";
          return s2ab(out);
        }
        return write_zip_typeXLSX(wb, o3);
      }
      function writeSync(wb, opts) {
        reset_cp();
        check_wb(wb);
        var o3 = dup(opts || {});
        if (o3.cellStyles) {
          o3.cellNF = true;
          o3.sheetStubs = true;
        }
        if (o3.type == "array") {
          o3.type = "binary";
          var out = writeSync(wb, o3);
          o3.type = "array";
          return s2ab(out);
        }
        var idx = 0;
        if (o3.sheet) {
          if (typeof o3.sheet == "number") idx = o3.sheet;
          else idx = wb.SheetNames.indexOf(o3.sheet);
          if (!wb.SheetNames[idx]) throw new Error("Sheet not found: " + o3.sheet + " : " + typeof o3.sheet);
        }
        switch (o3.bookType || "xlsb") {
          case "xml":
          case "xlml":
            return write_string_type(write_xlml(wb, o3), o3);
          case "slk":
          case "sylk":
            return write_string_type(SYLK.from_sheet(wb.Sheets[wb.SheetNames[idx]], o3), o3);
          case "htm":
          case "html":
            return write_string_type(sheet_to_html(wb.Sheets[wb.SheetNames[idx]], o3), o3);
          case "txt":
            return write_stxt_type(sheet_to_txt(wb.Sheets[wb.SheetNames[idx]], o3), o3);
          case "csv":
            return write_string_type(sheet_to_csv(wb.Sheets[wb.SheetNames[idx]], o3), o3, "\uFEFF");
          case "dif":
            return write_string_type(DIF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o3), o3);
          case "dbf":
            return write_binary_type(DBF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o3), o3);
          case "prn":
            return write_string_type(PRN.from_sheet(wb.Sheets[wb.SheetNames[idx]], o3), o3);
          case "rtf":
            return write_string_type(RTF.from_sheet(wb.Sheets[wb.SheetNames[idx]], o3), o3);
          case "eth":
            return write_string_type(ETH.from_sheet(wb.Sheets[wb.SheetNames[idx]], o3), o3);
          case "fods":
            return write_string_type(write_ods(wb, o3), o3);
          case "wk1":
            return write_binary_type(WK_.sheet_to_wk1(wb.Sheets[wb.SheetNames[idx]], o3), o3);
          case "wk3":
            return write_binary_type(WK_.book_to_wk3(wb, o3), o3);
          case "biff2":
            if (!o3.biff) o3.biff = 2;
          /* falls through */
          case "biff3":
            if (!o3.biff) o3.biff = 3;
          /* falls through */
          case "biff4":
            if (!o3.biff) o3.biff = 4;
            return write_binary_type(write_biff_buf(wb, o3), o3);
          case "biff5":
            if (!o3.biff) o3.biff = 5;
          /* falls through */
          case "biff8":
          case "xla":
          case "xls":
            if (!o3.biff) o3.biff = 8;
            return write_cfb_type(wb, o3);
          case "xlsx":
          case "xlsm":
          case "xlam":
          case "xlsb":
          case "numbers":
          case "ods":
            return write_zip_type(wb, o3);
          default:
            throw new Error("Unrecognized bookType |" + o3.bookType + "|");
        }
      }
      function resolve_book_type(o3) {
        if (o3.bookType) return;
        var _BT = {
          "xls": "biff8",
          "htm": "html",
          "slk": "sylk",
          "socialcalc": "eth",
          "Sh33tJS": "WTF"
        };
        var ext = o3.file.slice(o3.file.lastIndexOf(".")).toLowerCase();
        if (ext.match(/^\.[a-z]+$/)) o3.bookType = ext.slice(1);
        o3.bookType = _BT[o3.bookType] || o3.bookType;
      }
      function writeFileSync(wb, filename, opts) {
        var o3 = opts || {};
        o3.type = "file";
        o3.file = filename;
        resolve_book_type(o3);
        return writeSync(wb, o3);
      }
      function writeFileSyncXLSX(wb, filename, opts) {
        var o3 = opts || {};
        o3.type = "file";
        o3.file = filename;
        resolve_book_type(o3);
        return writeSyncXLSX(wb, o3);
      }
      function writeFileAsync(filename, wb, opts, cb) {
        var o3 = opts || {};
        o3.type = "file";
        o3.file = filename;
        resolve_book_type(o3);
        o3.type = "buffer";
        var _cb = cb;
        if (!(_cb instanceof Function)) _cb = opts;
        return _fs.writeFile(filename, writeSync(wb, o3), _cb);
      }
      function make_json_row(sheet, r3, R2, cols, header, hdr, dense, o3) {
        var rr2 = encode_row(R2);
        var defval = o3.defval, raw = o3.raw || !Object.prototype.hasOwnProperty.call(o3, "raw");
        var isempty = true;
        var row = header === 1 ? [] : {};
        if (header !== 1) {
          if (Object.defineProperty) try {
            Object.defineProperty(row, "__rowNum__", { value: R2, enumerable: false });
          } catch (e3) {
            row.__rowNum__ = R2;
          }
          else row.__rowNum__ = R2;
        }
        if (!dense || sheet[R2]) for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
          var val = dense ? sheet[R2][C2] : sheet[cols[C2] + rr2];
          if (val === void 0 || val.t === void 0) {
            if (defval === void 0) continue;
            if (hdr[C2] != null) {
              row[hdr[C2]] = defval;
            }
            continue;
          }
          var v3 = val.v;
          switch (val.t) {
            case "z":
              if (v3 == null) break;
              continue;
            case "e":
              v3 = v3 == 0 ? null : void 0;
              break;
            case "s":
            case "d":
            case "b":
            case "n":
              break;
            default:
              throw new Error("unrecognized type " + val.t);
          }
          if (hdr[C2] != null) {
            if (v3 == null) {
              if (val.t == "e" && v3 === null) row[hdr[C2]] = null;
              else if (defval !== void 0) row[hdr[C2]] = defval;
              else if (raw && v3 === null) row[hdr[C2]] = null;
              else continue;
            } else {
              row[hdr[C2]] = raw && (val.t !== "n" || val.t === "n" && o3.rawNumbers !== false) ? v3 : format_cell(val, v3, o3);
            }
            if (v3 != null) isempty = false;
          }
        }
        return { row, isempty };
      }
      function sheet_to_json(sheet, opts) {
        if (sheet == null || sheet["!ref"] == null) return [];
        var val = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v3 = 0, vv = "";
        var r3 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
        var o3 = opts || {};
        var range = o3.range != null ? o3.range : sheet["!ref"];
        if (o3.header === 1) header = 1;
        else if (o3.header === "A") header = 2;
        else if (Array.isArray(o3.header)) header = 3;
        else if (o3.header == null) header = 0;
        switch (typeof range) {
          case "string":
            r3 = safe_decode_range(range);
            break;
          case "number":
            r3 = safe_decode_range(sheet["!ref"]);
            r3.s.r = range;
            break;
          default:
            r3 = range;
        }
        if (header > 0) offset = 0;
        var rr2 = encode_row(r3.s.r);
        var cols = [];
        var out = [];
        var outi = 0, counter = 0;
        var dense = Array.isArray(sheet);
        var R2 = r3.s.r, C2 = 0;
        var header_cnt = {};
        if (dense && !sheet[R2]) sheet[R2] = [];
        var colinfo = o3.skipHidden && sheet["!cols"] || [];
        var rowinfo = o3.skipHidden && sheet["!rows"] || [];
        for (C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
          if ((colinfo[C2] || {}).hidden) continue;
          cols[C2] = encode_col(C2);
          val = dense ? sheet[R2][C2] : sheet[cols[C2] + rr2];
          switch (header) {
            case 1:
              hdr[C2] = C2 - r3.s.c;
              break;
            case 2:
              hdr[C2] = cols[C2];
              break;
            case 3:
              hdr[C2] = o3.header[C2 - r3.s.c];
              break;
            default:
              if (val == null) val = { w: "__EMPTY", t: "s" };
              vv = v3 = format_cell(val, null, o3);
              counter = header_cnt[v3] || 0;
              if (!counter) header_cnt[v3] = 1;
              else {
                do {
                  vv = v3 + "_" + counter++;
                } while (header_cnt[vv]);
                header_cnt[v3] = counter;
                header_cnt[vv] = 1;
              }
              hdr[C2] = vv;
          }
        }
        for (R2 = r3.s.r + offset; R2 <= r3.e.r; ++R2) {
          if ((rowinfo[R2] || {}).hidden) continue;
          var row = make_json_row(sheet, r3, R2, cols, header, hdr, dense, o3);
          if (row.isempty === false || (header === 1 ? o3.blankrows !== false : !!o3.blankrows)) out[outi++] = row.row;
        }
        out.length = outi;
        return out;
      }
      var qreg = /"/g;
      function make_csv_row(sheet, r3, R2, cols, fs, rs, FS, o3) {
        var isempty = true;
        var row = [], txt = "", rr2 = encode_row(R2);
        for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
          if (!cols[C2]) continue;
          var val = o3.dense ? (sheet[R2] || [])[C2] : sheet[cols[C2] + rr2];
          if (val == null) txt = "";
          else if (val.v != null) {
            isempty = false;
            txt = "" + (o3.rawNumbers && val.t == "n" ? val.v : format_cell(val, null, o3));
            for (var i3 = 0, cc = 0; i3 !== txt.length; ++i3) if ((cc = txt.charCodeAt(i3)) === fs || cc === rs || cc === 34 || o3.forceQuotes) {
              txt = '"' + txt.replace(qreg, '""') + '"';
              break;
            }
            if (txt == "ID") txt = '"ID"';
          } else if (val.f != null && !val.F) {
            isempty = false;
            txt = "=" + val.f;
            if (txt.indexOf(",") >= 0) txt = '"' + txt.replace(qreg, '""') + '"';
          } else txt = "";
          row.push(txt);
        }
        if (o3.blankrows === false && isempty) return null;
        return row.join(FS);
      }
      function sheet_to_csv(sheet, opts) {
        var out = [];
        var o3 = opts == null ? {} : opts;
        if (sheet == null || sheet["!ref"] == null) return "";
        var r3 = safe_decode_range(sheet["!ref"]);
        var FS = o3.FS !== void 0 ? o3.FS : ",", fs = FS.charCodeAt(0);
        var RS = o3.RS !== void 0 ? o3.RS : "\n", rs = RS.charCodeAt(0);
        var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
        var row = "", cols = [];
        o3.dense = Array.isArray(sheet);
        var colinfo = o3.skipHidden && sheet["!cols"] || [];
        var rowinfo = o3.skipHidden && sheet["!rows"] || [];
        for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) if (!(colinfo[C2] || {}).hidden) cols[C2] = encode_col(C2);
        var w3 = 0;
        for (var R2 = r3.s.r; R2 <= r3.e.r; ++R2) {
          if ((rowinfo[R2] || {}).hidden) continue;
          row = make_csv_row(sheet, r3, R2, cols, fs, rs, FS, o3);
          if (row == null) {
            continue;
          }
          if (o3.strip) row = row.replace(endregex, "");
          if (row || o3.blankrows !== false) out.push((w3++ ? RS : "") + row);
        }
        delete o3.dense;
        return out.join("");
      }
      function sheet_to_txt(sheet, opts) {
        if (!opts) opts = {};
        opts.FS = "	";
        opts.RS = "\n";
        var s3 = sheet_to_csv(sheet, opts);
        if (typeof $cptable == "undefined" || opts.type == "string") return s3;
        var o3 = $cptable.utils.encode(1200, s3, "str");
        return String.fromCharCode(255) + String.fromCharCode(254) + o3;
      }
      function sheet_to_formulae(sheet) {
        var y3 = "", x3, val = "";
        if (sheet == null || sheet["!ref"] == null) return [];
        var r3 = safe_decode_range(sheet["!ref"]), rr2 = "", cols = [], C2;
        var cmds = [];
        var dense = Array.isArray(sheet);
        for (C2 = r3.s.c; C2 <= r3.e.c; ++C2) cols[C2] = encode_col(C2);
        for (var R2 = r3.s.r; R2 <= r3.e.r; ++R2) {
          rr2 = encode_row(R2);
          for (C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
            y3 = cols[C2] + rr2;
            x3 = dense ? (sheet[R2] || [])[C2] : sheet[y3];
            val = "";
            if (x3 === void 0) continue;
            else if (x3.F != null) {
              y3 = x3.F;
              if (!x3.f) continue;
              val = x3.f;
              if (y3.indexOf(":") == -1) y3 = y3 + ":" + y3;
            }
            if (x3.f != null) val = x3.f;
            else if (x3.t == "z") continue;
            else if (x3.t == "n" && x3.v != null) val = "" + x3.v;
            else if (x3.t == "b") val = x3.v ? "TRUE" : "FALSE";
            else if (x3.w !== void 0) val = "'" + x3.w;
            else if (x3.v === void 0) continue;
            else if (x3.t == "s") val = "'" + x3.v;
            else val = "" + x3.v;
            cmds[cmds.length] = y3 + "=" + val;
          }
        }
        return cmds;
      }
      function sheet_add_json(_ws, js, opts) {
        var o3 = opts || {};
        var offset = +!o3.skipHeader;
        var ws = _ws || {};
        var _R = 0, _C = 0;
        if (ws && o3.origin != null) {
          if (typeof o3.origin == "number") _R = o3.origin;
          else {
            var _origin = typeof o3.origin == "string" ? decode_cell(o3.origin) : o3.origin;
            _R = _origin.r;
            _C = _origin.c;
          }
        }
        var cell;
        var range = { s: { c: 0, r: 0 }, e: { c: _C, r: _R + js.length - 1 + offset } };
        if (ws["!ref"]) {
          var _range = safe_decode_range(ws["!ref"]);
          range.e.c = Math.max(range.e.c, _range.e.c);
          range.e.r = Math.max(range.e.r, _range.e.r);
          if (_R == -1) {
            _R = _range.e.r + 1;
            range.e.r = _R + js.length - 1 + offset;
          }
        } else {
          if (_R == -1) {
            _R = 0;
            range.e.r = js.length - 1 + offset;
          }
        }
        var hdr = o3.header || [], C2 = 0;
        js.forEach(function(JS, R2) {
          keys(JS).forEach(function(k3) {
            if ((C2 = hdr.indexOf(k3)) == -1) hdr[C2 = hdr.length] = k3;
            var v3 = JS[k3];
            var t3 = "z";
            var z4 = "";
            var ref = encode_cell({ c: _C + C2, r: _R + R2 + offset });
            cell = ws_get_cell_stub(ws, ref);
            if (v3 && typeof v3 === "object" && !(v3 instanceof Date)) {
              ws[ref] = v3;
            } else {
              if (typeof v3 == "number") t3 = "n";
              else if (typeof v3 == "boolean") t3 = "b";
              else if (typeof v3 == "string") t3 = "s";
              else if (v3 instanceof Date) {
                t3 = "d";
                if (!o3.cellDates) {
                  t3 = "n";
                  v3 = datenum(v3);
                }
                z4 = o3.dateNF || table_fmt[14];
              } else if (v3 === null && o3.nullError) {
                t3 = "e";
                v3 = 0;
              }
              if (!cell) ws[ref] = cell = { t: t3, v: v3 };
              else {
                cell.t = t3;
                cell.v = v3;
                delete cell.w;
                delete cell.R;
                if (z4) cell.z = z4;
              }
              if (z4) cell.z = z4;
            }
          });
        });
        range.e.c = Math.max(range.e.c, _C + hdr.length - 1);
        var __R = encode_row(_R);
        if (offset) for (C2 = 0; C2 < hdr.length; ++C2) ws[encode_col(C2 + _C) + __R] = { t: "s", v: hdr[C2] };
        ws["!ref"] = encode_range(range);
        return ws;
      }
      function json_to_sheet(js, opts) {
        return sheet_add_json(null, js, opts);
      }
      function ws_get_cell_stub(ws, R2, C2) {
        if (typeof R2 == "string") {
          if (Array.isArray(ws)) {
            var RC = decode_cell(R2);
            if (!ws[RC.r]) ws[RC.r] = [];
            return ws[RC.r][RC.c] || (ws[RC.r][RC.c] = { t: "z" });
          }
          return ws[R2] || (ws[R2] = { t: "z" });
        }
        if (typeof R2 != "number") return ws_get_cell_stub(ws, encode_cell(R2));
        return ws_get_cell_stub(ws, encode_cell({ r: R2, c: C2 || 0 }));
      }
      function wb_sheet_idx(wb, sh) {
        if (typeof sh == "number") {
          if (sh >= 0 && wb.SheetNames.length > sh) return sh;
          throw new Error("Cannot find sheet # " + sh);
        } else if (typeof sh == "string") {
          var idx = wb.SheetNames.indexOf(sh);
          if (idx > -1) return idx;
          throw new Error("Cannot find sheet name |" + sh + "|");
        } else throw new Error("Cannot find sheet |" + sh + "|");
      }
      function book_new() {
        return { SheetNames: [], Sheets: {} };
      }
      function book_append_sheet(wb, ws, name, roll) {
        var i3 = 1;
        if (!name) {
          for (; i3 <= 65535; ++i3, name = void 0) if (wb.SheetNames.indexOf(name = "Sheet" + i3) == -1) break;
        }
        if (!name || wb.SheetNames.length >= 65535) throw new Error("Too many worksheets");
        if (roll && wb.SheetNames.indexOf(name) >= 0) {
          var m3 = name.match(/(^.*?)(\d+)$/);
          i3 = m3 && +m3[2] || 0;
          var root = m3 && m3[1] || name;
          for (++i3; i3 <= 65535; ++i3) if (wb.SheetNames.indexOf(name = root + i3) == -1) break;
        }
        check_ws_name(name);
        if (wb.SheetNames.indexOf(name) >= 0) throw new Error("Worksheet with name |" + name + "| already exists!");
        wb.SheetNames.push(name);
        wb.Sheets[name] = ws;
        return name;
      }
      function book_set_sheet_visibility(wb, sh, vis) {
        if (!wb.Workbook) wb.Workbook = {};
        if (!wb.Workbook.Sheets) wb.Workbook.Sheets = [];
        var idx = wb_sheet_idx(wb, sh);
        if (!wb.Workbook.Sheets[idx]) wb.Workbook.Sheets[idx] = {};
        switch (vis) {
          case 0:
          case 1:
          case 2:
            break;
          default:
            throw new Error("Bad sheet visibility setting " + vis);
        }
        wb.Workbook.Sheets[idx].Hidden = vis;
      }
      function cell_set_number_format(cell, fmt) {
        cell.z = fmt;
        return cell;
      }
      function cell_set_hyperlink(cell, target, tooltip) {
        if (!target) {
          delete cell.l;
        } else {
          cell.l = { Target: target };
          if (tooltip) cell.l.Tooltip = tooltip;
        }
        return cell;
      }
      function cell_set_internal_link(cell, range, tooltip) {
        return cell_set_hyperlink(cell, "#" + range, tooltip);
      }
      function cell_add_comment(cell, text, author) {
        if (!cell.c) cell.c = [];
        cell.c.push({ t: text, a: author || "SheetJS" });
      }
      function sheet_set_array_formula(ws, range, formula, dynamic) {
        var rng = typeof range != "string" ? range : safe_decode_range(range);
        var rngstr = typeof range == "string" ? range : encode_range(range);
        for (var R2 = rng.s.r; R2 <= rng.e.r; ++R2) for (var C2 = rng.s.c; C2 <= rng.e.c; ++C2) {
          var cell = ws_get_cell_stub(ws, R2, C2);
          cell.t = "n";
          cell.F = rngstr;
          delete cell.v;
          if (R2 == rng.s.r && C2 == rng.s.c) {
            cell.f = formula;
            if (dynamic) cell.D = true;
          }
        }
        return ws;
      }
      var utils2 = {
        encode_col,
        encode_row,
        encode_cell,
        encode_range,
        decode_col,
        decode_row,
        split_cell,
        decode_cell,
        decode_range,
        format_cell,
        sheet_add_aoa,
        sheet_add_json,
        sheet_add_dom,
        aoa_to_sheet,
        json_to_sheet,
        table_to_sheet: parse_dom_table,
        table_to_book,
        sheet_to_csv,
        sheet_to_txt,
        sheet_to_json,
        sheet_to_html,
        sheet_to_formulae,
        sheet_to_row_object_array: sheet_to_json,
        sheet_get_cell: ws_get_cell_stub,
        book_new,
        book_append_sheet,
        book_set_sheet_visibility,
        cell_set_number_format,
        cell_set_hyperlink,
        cell_set_internal_link,
        cell_add_comment,
        sheet_set_array_formula,
        consts: {
          SHEET_VISIBLE: 0,
          SHEET_HIDDEN: 1,
          SHEET_VERY_HIDDEN: 2
        }
      };
      var _Readable;
      function set_readable(R2) {
        _Readable = R2;
      }
      function write_csv_stream(sheet, opts) {
        var stream = _Readable();
        var o3 = opts == null ? {} : opts;
        if (sheet == null || sheet["!ref"] == null) {
          stream.push(null);
          return stream;
        }
        var r3 = safe_decode_range(sheet["!ref"]);
        var FS = o3.FS !== void 0 ? o3.FS : ",", fs = FS.charCodeAt(0);
        var RS = o3.RS !== void 0 ? o3.RS : "\n", rs = RS.charCodeAt(0);
        var endregex = new RegExp((FS == "|" ? "\\|" : FS) + "+$");
        var row = "", cols = [];
        o3.dense = Array.isArray(sheet);
        var colinfo = o3.skipHidden && sheet["!cols"] || [];
        var rowinfo = o3.skipHidden && sheet["!rows"] || [];
        for (var C2 = r3.s.c; C2 <= r3.e.c; ++C2) if (!(colinfo[C2] || {}).hidden) cols[C2] = encode_col(C2);
        var R2 = r3.s.r;
        var BOM = false, w3 = 0;
        stream._read = function() {
          if (!BOM) {
            BOM = true;
            return stream.push("\uFEFF");
          }
          while (R2 <= r3.e.r) {
            ++R2;
            if ((rowinfo[R2 - 1] || {}).hidden) continue;
            row = make_csv_row(sheet, r3, R2 - 1, cols, fs, rs, FS, o3);
            if (row != null) {
              if (o3.strip) row = row.replace(endregex, "");
              if (row || o3.blankrows !== false) return stream.push((w3++ ? RS : "") + row);
            }
          }
          return stream.push(null);
        };
        return stream;
      }
      function write_html_stream(ws, opts) {
        var stream = _Readable();
        var o3 = opts || {};
        var header = o3.header != null ? o3.header : HTML_BEGIN;
        var footer = o3.footer != null ? o3.footer : HTML_END;
        stream.push(header);
        var r3 = decode_range(ws["!ref"]);
        o3.dense = Array.isArray(ws);
        stream.push(make_html_preamble(ws, r3, o3));
        var R2 = r3.s.r;
        var end = false;
        stream._read = function() {
          if (R2 > r3.e.r) {
            if (!end) {
              end = true;
              stream.push("</table>" + footer);
            }
            return stream.push(null);
          }
          while (R2 <= r3.e.r) {
            stream.push(make_html_row(ws, r3, R2, o3));
            ++R2;
            break;
          }
        };
        return stream;
      }
      function write_json_stream(sheet, opts) {
        var stream = _Readable({ objectMode: true });
        if (sheet == null || sheet["!ref"] == null) {
          stream.push(null);
          return stream;
        }
        var val = { t: "n", v: 0 }, header = 0, offset = 1, hdr = [], v3 = 0, vv = "";
        var r3 = { s: { r: 0, c: 0 }, e: { r: 0, c: 0 } };
        var o3 = opts || {};
        var range = o3.range != null ? o3.range : sheet["!ref"];
        if (o3.header === 1) header = 1;
        else if (o3.header === "A") header = 2;
        else if (Array.isArray(o3.header)) header = 3;
        switch (typeof range) {
          case "string":
            r3 = safe_decode_range(range);
            break;
          case "number":
            r3 = safe_decode_range(sheet["!ref"]);
            r3.s.r = range;
            break;
          default:
            r3 = range;
        }
        if (header > 0) offset = 0;
        var rr2 = encode_row(r3.s.r);
        var cols = [];
        var counter = 0;
        var dense = Array.isArray(sheet);
        var R2 = r3.s.r, C2 = 0;
        var header_cnt = {};
        if (dense && !sheet[R2]) sheet[R2] = [];
        var colinfo = o3.skipHidden && sheet["!cols"] || [];
        var rowinfo = o3.skipHidden && sheet["!rows"] || [];
        for (C2 = r3.s.c; C2 <= r3.e.c; ++C2) {
          if ((colinfo[C2] || {}).hidden) continue;
          cols[C2] = encode_col(C2);
          val = dense ? sheet[R2][C2] : sheet[cols[C2] + rr2];
          switch (header) {
            case 1:
              hdr[C2] = C2 - r3.s.c;
              break;
            case 2:
              hdr[C2] = cols[C2];
              break;
            case 3:
              hdr[C2] = o3.header[C2 - r3.s.c];
              break;
            default:
              if (val == null) val = { w: "__EMPTY", t: "s" };
              vv = v3 = format_cell(val, null, o3);
              counter = header_cnt[v3] || 0;
              if (!counter) header_cnt[v3] = 1;
              else {
                do {
                  vv = v3 + "_" + counter++;
                } while (header_cnt[vv]);
                header_cnt[v3] = counter;
                header_cnt[vv] = 1;
              }
              hdr[C2] = vv;
          }
        }
        R2 = r3.s.r + offset;
        stream._read = function() {
          while (R2 <= r3.e.r) {
            if ((rowinfo[R2 - 1] || {}).hidden) continue;
            var row = make_json_row(sheet, r3, R2, cols, header, hdr, dense, o3);
            ++R2;
            if (row.isempty === false || (header === 1 ? o3.blankrows !== false : !!o3.blankrows)) {
              stream.push(row.row);
              return;
            }
          }
          return stream.push(null);
        };
        return stream;
      }
      var __stream = {
        to_json: write_json_stream,
        to_html: write_html_stream,
        to_csv: write_csv_stream,
        set_readable
      };
      if (typeof parse_xlscfb !== "undefined") XLSX2.parse_xlscfb = parse_xlscfb;
      XLSX2.parse_zip = parse_zip;
      XLSX2.read = readSync;
      XLSX2.readFile = readFileSync;
      XLSX2.readFileSync = readFileSync;
      XLSX2.write = writeSync;
      XLSX2.writeFile = writeFileSync;
      XLSX2.writeFileSync = writeFileSync;
      XLSX2.writeFileAsync = writeFileAsync;
      XLSX2.utils = utils2;
      XLSX2.writeXLSX = writeSyncXLSX;
      XLSX2.writeFileXLSX = writeFileSyncXLSX;
      XLSX2.SSF = SSF;
      if (typeof __stream !== "undefined") XLSX2.stream = __stream;
      if (typeof CFB !== "undefined") XLSX2.CFB = CFB;
      if (typeof __require !== "undefined") {
        var strmod = __require("stream");
        if ((strmod || {}).Readable) set_readable(strmod.Readable);
      }
    }
    if (typeof exports !== "undefined") make_xlsx_lib(exports);
    else if (typeof module !== "undefined" && module.exports) make_xlsx_lib(module.exports);
    else if (typeof define === "function" && define.amd) define("xlsx", function() {
      if (!XLSX.version) make_xlsx_lib(XLSX);
      return XLSX;
    });
    else make_xlsx_lib(XLSX);
    if (typeof window !== "undefined" && !window.XLSX) try {
      window.XLSX = XLSX;
    } catch (e3) {
    }
  }
});

// ../../node_modules/xml2js/lib/defaults.js
var require_defaults = __commonJS({
  "../../node_modules/xml2js/lib/defaults.js"(exports) {
    init_esm();
    (function() {
      exports.defaults = {
        "0.1": {
          explicitCharkey: false,
          trim: true,
          normalize: true,
          normalizeTags: false,
          attrkey: "@",
          charkey: "#",
          explicitArray: false,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: false,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          childkey: "@@",
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          emptyTag: ""
        },
        "0.2": {
          explicitCharkey: false,
          trim: false,
          normalize: false,
          normalizeTags: false,
          attrkey: "$",
          charkey: "_",
          explicitArray: true,
          ignoreAttrs: false,
          mergeAttrs: false,
          explicitRoot: true,
          validator: null,
          xmlns: false,
          explicitChildren: false,
          preserveChildrenOrder: false,
          childkey: "$$",
          charsAsChildren: false,
          includeWhiteChars: false,
          async: false,
          strict: true,
          attrNameProcessors: null,
          attrValueProcessors: null,
          tagNameProcessors: null,
          valueProcessors: null,
          rootName: "root",
          xmldec: {
            "version": "1.0",
            "encoding": "UTF-8",
            "standalone": true
          },
          doctype: null,
          renderOpts: {
            "pretty": true,
            "indent": "  ",
            "newline": "\n"
          },
          headless: false,
          chunkSize: 1e4,
          emptyTag: "",
          cdata: false
        }
      };
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/Utility.js
var require_Utility = __commonJS({
  "../../node_modules/xmlbuilder/lib/Utility.js"(exports, module) {
    init_esm();
    (function() {
      var assign, getValue, isArray, isEmpty, isFunction2, isObject2, isPlainObject, slice = [].slice, hasProp = {}.hasOwnProperty;
      assign = function() {
        var i3, key, len, source, sources, target;
        target = arguments[0], sources = 2 <= arguments.length ? slice.call(arguments, 1) : [];
        if (isFunction2(Object.assign)) {
          Object.assign.apply(null, arguments);
        } else {
          for (i3 = 0, len = sources.length; i3 < len; i3++) {
            source = sources[i3];
            if (source != null) {
              for (key in source) {
                if (!hasProp.call(source, key)) continue;
                target[key] = source[key];
              }
            }
          }
        }
        return target;
      };
      isFunction2 = function(val) {
        return !!val && Object.prototype.toString.call(val) === "[object Function]";
      };
      isObject2 = function(val) {
        var ref;
        return !!val && ((ref = typeof val) === "function" || ref === "object");
      };
      isArray = function(val) {
        if (isFunction2(Array.isArray)) {
          return Array.isArray(val);
        } else {
          return Object.prototype.toString.call(val) === "[object Array]";
        }
      };
      isEmpty = function(val) {
        var key;
        if (isArray(val)) {
          return !val.length;
        } else {
          for (key in val) {
            if (!hasProp.call(val, key)) continue;
            return false;
          }
          return true;
        }
      };
      isPlainObject = function(val) {
        var ctor, proto;
        return isObject2(val) && (proto = Object.getPrototypeOf(val)) && (ctor = proto.constructor) && typeof ctor === "function" && ctor instanceof ctor && Function.prototype.toString.call(ctor) === Function.prototype.toString.call(Object);
      };
      getValue = function(obj) {
        if (isFunction2(obj.valueOf)) {
          return obj.valueOf();
        } else {
          return obj;
        }
      };
      module.exports.assign = assign;
      module.exports.isFunction = isFunction2;
      module.exports.isObject = isObject2;
      module.exports.isArray = isArray;
      module.exports.isEmpty = isEmpty;
      module.exports.isPlainObject = isPlainObject;
      module.exports.getValue = getValue;
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDOMImplementation.js
var require_XMLDOMImplementation = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDOMImplementation.js"(exports, module) {
    init_esm();
    (function() {
      var XMLDOMImplementation;
      module.exports = XMLDOMImplementation = function() {
        function XMLDOMImplementation2() {
        }
        XMLDOMImplementation2.prototype.hasFeature = function(feature, version) {
          return true;
        };
        XMLDOMImplementation2.prototype.createDocumentType = function(qualifiedName, publicId, systemId) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation2.prototype.createDocument = function(namespaceURI, qualifiedName, doctype) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation2.prototype.createHTMLDocument = function(title) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLDOMImplementation2.prototype.getFeature = function(feature, version) {
          throw new Error("This DOM method is not implemented.");
        };
        return XMLDOMImplementation2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js
var require_XMLDOMErrorHandler = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDOMErrorHandler.js"(exports, module) {
    init_esm();
    (function() {
      var XMLDOMErrorHandler;
      module.exports = XMLDOMErrorHandler = function() {
        function XMLDOMErrorHandler2() {
        }
        XMLDOMErrorHandler2.prototype.handleError = function(error) {
          throw new Error(error);
        };
        return XMLDOMErrorHandler2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDOMStringList.js
var require_XMLDOMStringList = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDOMStringList.js"(exports, module) {
    init_esm();
    (function() {
      var XMLDOMStringList;
      module.exports = XMLDOMStringList = function() {
        function XMLDOMStringList2(arr) {
          this.arr = arr || [];
        }
        Object.defineProperty(XMLDOMStringList2.prototype, "length", {
          get: function() {
            return this.arr.length;
          }
        });
        XMLDOMStringList2.prototype.item = function(index) {
          return this.arr[index] || null;
        };
        XMLDOMStringList2.prototype.contains = function(str) {
          return this.arr.indexOf(str) !== -1;
        };
        return XMLDOMStringList2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDOMConfiguration.js
var require_XMLDOMConfiguration = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDOMConfiguration.js"(exports, module) {
    init_esm();
    (function() {
      var XMLDOMConfiguration, XMLDOMErrorHandler, XMLDOMStringList;
      XMLDOMErrorHandler = require_XMLDOMErrorHandler();
      XMLDOMStringList = require_XMLDOMStringList();
      module.exports = XMLDOMConfiguration = function() {
        function XMLDOMConfiguration2() {
          var clonedSelf;
          this.defaultParams = {
            "canonical-form": false,
            "cdata-sections": false,
            "comments": false,
            "datatype-normalization": false,
            "element-content-whitespace": true,
            "entities": true,
            "error-handler": new XMLDOMErrorHandler(),
            "infoset": true,
            "validate-if-schema": false,
            "namespaces": true,
            "namespace-declarations": true,
            "normalize-characters": false,
            "schema-location": "",
            "schema-type": "",
            "split-cdata-sections": true,
            "validate": false,
            "well-formed": true
          };
          this.params = clonedSelf = Object.create(this.defaultParams);
        }
        Object.defineProperty(XMLDOMConfiguration2.prototype, "parameterNames", {
          get: function() {
            return new XMLDOMStringList(Object.keys(this.defaultParams));
          }
        });
        XMLDOMConfiguration2.prototype.getParameter = function(name) {
          if (this.params.hasOwnProperty(name)) {
            return this.params[name];
          } else {
            return null;
          }
        };
        XMLDOMConfiguration2.prototype.canSetParameter = function(name, value) {
          return true;
        };
        XMLDOMConfiguration2.prototype.setParameter = function(name, value) {
          if (value != null) {
            return this.params[name] = value;
          } else {
            return delete this.params[name];
          }
        };
        return XMLDOMConfiguration2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/NodeType.js
var require_NodeType = __commonJS({
  "../../node_modules/xmlbuilder/lib/NodeType.js"(exports, module) {
    init_esm();
    (function() {
      module.exports = {
        Element: 1,
        Attribute: 2,
        Text: 3,
        CData: 4,
        EntityReference: 5,
        EntityDeclaration: 6,
        ProcessingInstruction: 7,
        Comment: 8,
        Document: 9,
        DocType: 10,
        DocumentFragment: 11,
        NotationDeclaration: 12,
        Declaration: 201,
        Raw: 202,
        AttributeDeclaration: 203,
        ElementDeclaration: 204,
        Dummy: 205
      };
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLAttribute.js
var require_XMLAttribute = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLAttribute.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLAttribute, XMLNode;
      NodeType = require_NodeType();
      XMLNode = require_XMLNode();
      module.exports = XMLAttribute = function() {
        function XMLAttribute2(parent, name, value) {
          this.parent = parent;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          if (name == null) {
            throw new Error("Missing attribute name. " + this.debugInfo(name));
          }
          this.name = this.stringify.name(name);
          this.value = this.stringify.attValue(value);
          this.type = NodeType.Attribute;
          this.isId = false;
          this.schemaTypeInfo = null;
        }
        Object.defineProperty(XMLAttribute2.prototype, "nodeType", {
          get: function() {
            return this.type;
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "ownerElement", {
          get: function() {
            return this.parent;
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "textContent", {
          get: function() {
            return this.value;
          },
          set: function(value) {
            return this.value = value || "";
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "namespaceURI", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "prefix", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "localName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLAttribute2.prototype, "specified", {
          get: function() {
            return true;
          }
        });
        XMLAttribute2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLAttribute2.prototype.toString = function(options) {
          return this.options.writer.attribute(this, this.options.writer.filterOptions(options));
        };
        XMLAttribute2.prototype.debugInfo = function(name) {
          name = name || this.name;
          if (name == null) {
            return "parent: <" + this.parent.name + ">";
          } else {
            return "attribute: {" + name + "}, parent: <" + this.parent.name + ">";
          }
        };
        XMLAttribute2.prototype.isEqualNode = function(node) {
          if (node.namespaceURI !== this.namespaceURI) {
            return false;
          }
          if (node.prefix !== this.prefix) {
            return false;
          }
          if (node.localName !== this.localName) {
            return false;
          }
          if (node.value !== this.value) {
            return false;
          }
          return true;
        };
        return XMLAttribute2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js
var require_XMLNamedNodeMap = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLNamedNodeMap.js"(exports, module) {
    init_esm();
    (function() {
      var XMLNamedNodeMap;
      module.exports = XMLNamedNodeMap = function() {
        function XMLNamedNodeMap2(nodes) {
          this.nodes = nodes;
        }
        Object.defineProperty(XMLNamedNodeMap2.prototype, "length", {
          get: function() {
            return Object.keys(this.nodes).length || 0;
          }
        });
        XMLNamedNodeMap2.prototype.clone = function() {
          return this.nodes = null;
        };
        XMLNamedNodeMap2.prototype.getNamedItem = function(name) {
          return this.nodes[name];
        };
        XMLNamedNodeMap2.prototype.setNamedItem = function(node) {
          var oldNode;
          oldNode = this.nodes[node.nodeName];
          this.nodes[node.nodeName] = node;
          return oldNode || null;
        };
        XMLNamedNodeMap2.prototype.removeNamedItem = function(name) {
          var oldNode;
          oldNode = this.nodes[name];
          delete this.nodes[name];
          return oldNode || null;
        };
        XMLNamedNodeMap2.prototype.item = function(index) {
          return this.nodes[Object.keys(this.nodes)[index]] || null;
        };
        XMLNamedNodeMap2.prototype.getNamedItemNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap2.prototype.setNamedItemNS = function(node) {
          throw new Error("This DOM method is not implemented.");
        };
        XMLNamedNodeMap2.prototype.removeNamedItemNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented.");
        };
        return XMLNamedNodeMap2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLElement.js
var require_XMLElement = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLElement.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLAttribute, XMLElement, XMLNamedNodeMap, XMLNode, getValue, isFunction2, isObject2, ref, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject2 = ref.isObject, isFunction2 = ref.isFunction, getValue = ref.getValue;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      XMLAttribute = require_XMLAttribute();
      XMLNamedNodeMap = require_XMLNamedNodeMap();
      module.exports = XMLElement = function(superClass) {
        extend(XMLElement2, superClass);
        function XMLElement2(parent, name, attributes) {
          var child, j3, len, ref1;
          XMLElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing element name. " + this.debugInfo());
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.Element;
          this.attribs = {};
          this.schemaTypeInfo = null;
          if (attributes != null) {
            this.attribute(attributes);
          }
          if (parent.type === NodeType.Document) {
            this.isRoot = true;
            this.documentObject = parent;
            parent.rootObject = this;
            if (parent.children) {
              ref1 = parent.children;
              for (j3 = 0, len = ref1.length; j3 < len; j3++) {
                child = ref1[j3];
                if (child.type === NodeType.DocType) {
                  child.name = this.name;
                  break;
                }
              }
            }
          }
        }
        Object.defineProperty(XMLElement2.prototype, "tagName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLElement2.prototype, "namespaceURI", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLElement2.prototype, "prefix", {
          get: function() {
            return "";
          }
        });
        Object.defineProperty(XMLElement2.prototype, "localName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLElement2.prototype, "id", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement2.prototype, "className", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement2.prototype, "classList", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLElement2.prototype, "attributes", {
          get: function() {
            if (!this.attributeMap || !this.attributeMap.nodes) {
              this.attributeMap = new XMLNamedNodeMap(this.attribs);
            }
            return this.attributeMap;
          }
        });
        XMLElement2.prototype.clone = function() {
          var att, attName, clonedSelf, ref1;
          clonedSelf = Object.create(this);
          if (clonedSelf.isRoot) {
            clonedSelf.documentObject = null;
          }
          clonedSelf.attribs = {};
          ref1 = this.attribs;
          for (attName in ref1) {
            if (!hasProp.call(ref1, attName)) continue;
            att = ref1[attName];
            clonedSelf.attribs[attName] = att.clone();
          }
          clonedSelf.children = [];
          this.children.forEach(function(child) {
            var clonedChild;
            clonedChild = child.clone();
            clonedChild.parent = clonedSelf;
            return clonedSelf.children.push(clonedChild);
          });
          return clonedSelf;
        };
        XMLElement2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (name != null) {
            name = getValue(name);
          }
          if (isObject2(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName)) continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction2(value)) {
              value = value.apply();
            }
            if (this.options.keepNullAttributes && value == null) {
              this.attribs[name] = new XMLAttribute(this, name, "");
            } else if (value != null) {
              this.attribs[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLElement2.prototype.removeAttribute = function(name) {
          var attName, j3, len;
          if (name == null) {
            throw new Error("Missing attribute name. " + this.debugInfo());
          }
          name = getValue(name);
          if (Array.isArray(name)) {
            for (j3 = 0, len = name.length; j3 < len; j3++) {
              attName = name[j3];
              delete this.attribs[attName];
            }
          } else {
            delete this.attribs[name];
          }
          return this;
        };
        XMLElement2.prototype.toString = function(options) {
          return this.options.writer.element(this, this.options.writer.filterOptions(options));
        };
        XMLElement2.prototype.att = function(name, value) {
          return this.attribute(name, value);
        };
        XMLElement2.prototype.a = function(name, value) {
          return this.attribute(name, value);
        };
        XMLElement2.prototype.getAttribute = function(name) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name].value;
          } else {
            return null;
          }
        };
        XMLElement2.prototype.setAttribute = function(name, value) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getAttributeNode = function(name) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name];
          } else {
            return null;
          }
        };
        XMLElement2.prototype.setAttributeNode = function(newAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.removeAttributeNode = function(oldAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagName = function(name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getAttributeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setAttributeNS = function(namespaceURI, qualifiedName, value) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.removeAttributeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getAttributeNodeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setAttributeNodeNS = function(newAttr) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.hasAttribute = function(name) {
          return this.attribs.hasOwnProperty(name);
        };
        XMLElement2.prototype.hasAttributeNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setIdAttribute = function(name, isId) {
          if (this.attribs.hasOwnProperty(name)) {
            return this.attribs[name].isId;
          } else {
            return isId;
          }
        };
        XMLElement2.prototype.setIdAttributeNS = function(namespaceURI, localName, isId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.setIdAttributeNode = function(idAttr, isId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagName = function(tagname) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.getElementsByClassName = function(classNames) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLElement2.prototype.isEqualNode = function(node) {
          var i3, j3, ref1;
          if (!XMLElement2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.namespaceURI !== this.namespaceURI) {
            return false;
          }
          if (node.prefix !== this.prefix) {
            return false;
          }
          if (node.localName !== this.localName) {
            return false;
          }
          if (node.attribs.length !== this.attribs.length) {
            return false;
          }
          for (i3 = j3 = 0, ref1 = this.attribs.length - 1; 0 <= ref1 ? j3 <= ref1 : j3 >= ref1; i3 = 0 <= ref1 ? ++j3 : --j3) {
            if (!this.attribs[i3].isEqualNode(node.attribs[i3])) {
              return false;
            }
          }
          return true;
        };
        return XMLElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLCharacterData.js
var require_XMLCharacterData = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLCharacterData.js"(exports, module) {
    init_esm();
    (function() {
      var XMLCharacterData, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      module.exports = XMLCharacterData = function(superClass) {
        extend(XMLCharacterData2, superClass);
        function XMLCharacterData2(parent) {
          XMLCharacterData2.__super__.constructor.call(this, parent);
          this.value = "";
        }
        Object.defineProperty(XMLCharacterData2.prototype, "data", {
          get: function() {
            return this.value;
          },
          set: function(value) {
            return this.value = value || "";
          }
        });
        Object.defineProperty(XMLCharacterData2.prototype, "length", {
          get: function() {
            return this.value.length;
          }
        });
        Object.defineProperty(XMLCharacterData2.prototype, "textContent", {
          get: function() {
            return this.value;
          },
          set: function(value) {
            return this.value = value || "";
          }
        });
        XMLCharacterData2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLCharacterData2.prototype.substringData = function(offset, count) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.appendData = function(arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.insertData = function(offset, arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.deleteData = function(offset, count) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.replaceData = function(offset, count, arg) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLCharacterData2.prototype.isEqualNode = function(node) {
          if (!XMLCharacterData2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.data !== this.data) {
            return false;
          }
          return true;
        };
        return XMLCharacterData2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLCData.js
var require_XMLCData = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLCData.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLCData, XMLCharacterData, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module.exports = XMLCData = function(superClass) {
        extend(XMLCData2, superClass);
        function XMLCData2(parent, text) {
          XMLCData2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing CDATA text. " + this.debugInfo());
          }
          this.name = "#cdata-section";
          this.type = NodeType.CData;
          this.value = this.stringify.cdata(text);
        }
        XMLCData2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLCData2.prototype.toString = function(options) {
          return this.options.writer.cdata(this, this.options.writer.filterOptions(options));
        };
        return XMLCData2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLComment.js
var require_XMLComment = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLComment.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLCharacterData, XMLComment, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module.exports = XMLComment = function(superClass) {
        extend(XMLComment2, superClass);
        function XMLComment2(parent, text) {
          XMLComment2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing comment text. " + this.debugInfo());
          }
          this.name = "#comment";
          this.type = NodeType.Comment;
          this.value = this.stringify.comment(text);
        }
        XMLComment2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLComment2.prototype.toString = function(options) {
          return this.options.writer.comment(this, this.options.writer.filterOptions(options));
        };
        return XMLComment2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDeclaration.js
var require_XMLDeclaration = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDeclaration.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLDeclaration, XMLNode, isObject2, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject2 = require_Utility().isObject;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module.exports = XMLDeclaration = function(superClass) {
        extend(XMLDeclaration2, superClass);
        function XMLDeclaration2(parent, version, encoding, standalone) {
          var ref;
          XMLDeclaration2.__super__.constructor.call(this, parent);
          if (isObject2(version)) {
            ref = version, version = ref.version, encoding = ref.encoding, standalone = ref.standalone;
          }
          if (!version) {
            version = "1.0";
          }
          this.type = NodeType.Declaration;
          this.version = this.stringify.xmlVersion(version);
          if (encoding != null) {
            this.encoding = this.stringify.xmlEncoding(encoding);
          }
          if (standalone != null) {
            this.standalone = this.stringify.xmlStandalone(standalone);
          }
        }
        XMLDeclaration2.prototype.toString = function(options) {
          return this.options.writer.declaration(this, this.options.writer.filterOptions(options));
        };
        return XMLDeclaration2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDTDAttList.js
var require_XMLDTDAttList = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDTDAttList.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLDTDAttList, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module.exports = XMLDTDAttList = function(superClass) {
        extend(XMLDTDAttList2, superClass);
        function XMLDTDAttList2(parent, elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          XMLDTDAttList2.__super__.constructor.call(this, parent);
          if (elementName == null) {
            throw new Error("Missing DTD element name. " + this.debugInfo());
          }
          if (attributeName == null) {
            throw new Error("Missing DTD attribute name. " + this.debugInfo(elementName));
          }
          if (!attributeType) {
            throw new Error("Missing DTD attribute type. " + this.debugInfo(elementName));
          }
          if (!defaultValueType) {
            throw new Error("Missing DTD attribute default. " + this.debugInfo(elementName));
          }
          if (defaultValueType.indexOf("#") !== 0) {
            defaultValueType = "#" + defaultValueType;
          }
          if (!defaultValueType.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/)) {
            throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT. " + this.debugInfo(elementName));
          }
          if (defaultValue && !defaultValueType.match(/^(#FIXED|#DEFAULT)$/)) {
            throw new Error("Default value only applies to #FIXED or #DEFAULT. " + this.debugInfo(elementName));
          }
          this.elementName = this.stringify.name(elementName);
          this.type = NodeType.AttributeDeclaration;
          this.attributeName = this.stringify.name(attributeName);
          this.attributeType = this.stringify.dtdAttType(attributeType);
          if (defaultValue) {
            this.defaultValue = this.stringify.dtdAttDefault(defaultValue);
          }
          this.defaultValueType = defaultValueType;
        }
        XMLDTDAttList2.prototype.toString = function(options) {
          return this.options.writer.dtdAttList(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDAttList2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDTDEntity.js
var require_XMLDTDEntity = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDTDEntity.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLDTDEntity, XMLNode, isObject2, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject2 = require_Utility().isObject;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module.exports = XMLDTDEntity = function(superClass) {
        extend(XMLDTDEntity2, superClass);
        function XMLDTDEntity2(parent, pe2, name, value) {
          XMLDTDEntity2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD entity name. " + this.debugInfo(name));
          }
          if (value == null) {
            throw new Error("Missing DTD entity value. " + this.debugInfo(name));
          }
          this.pe = !!pe2;
          this.name = this.stringify.name(name);
          this.type = NodeType.EntityDeclaration;
          if (!isObject2(value)) {
            this.value = this.stringify.dtdEntityValue(value);
            this.internal = true;
          } else {
            if (!value.pubID && !value.sysID) {
              throw new Error("Public and/or system identifiers are required for an external entity. " + this.debugInfo(name));
            }
            if (value.pubID && !value.sysID) {
              throw new Error("System identifier is required for a public external entity. " + this.debugInfo(name));
            }
            this.internal = false;
            if (value.pubID != null) {
              this.pubID = this.stringify.dtdPubID(value.pubID);
            }
            if (value.sysID != null) {
              this.sysID = this.stringify.dtdSysID(value.sysID);
            }
            if (value.nData != null) {
              this.nData = this.stringify.dtdNData(value.nData);
            }
            if (this.pe && this.nData) {
              throw new Error("Notation declaration is not allowed in a parameter entity. " + this.debugInfo(name));
            }
          }
        }
        Object.defineProperty(XMLDTDEntity2.prototype, "publicId", {
          get: function() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "systemId", {
          get: function() {
            return this.sysID;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "notationName", {
          get: function() {
            return this.nData || null;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "inputEncoding", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "xmlEncoding", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDTDEntity2.prototype, "xmlVersion", {
          get: function() {
            return null;
          }
        });
        XMLDTDEntity2.prototype.toString = function(options) {
          return this.options.writer.dtdEntity(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDEntity2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDTDElement.js
var require_XMLDTDElement = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDTDElement.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLDTDElement, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module.exports = XMLDTDElement = function(superClass) {
        extend(XMLDTDElement2, superClass);
        function XMLDTDElement2(parent, name, value) {
          XMLDTDElement2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD element name. " + this.debugInfo());
          }
          if (!value) {
            value = "(#PCDATA)";
          }
          if (Array.isArray(value)) {
            value = "(" + value.join(",") + ")";
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.ElementDeclaration;
          this.value = this.stringify.dtdElementValue(value);
        }
        XMLDTDElement2.prototype.toString = function(options) {
          return this.options.writer.dtdElement(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDElement2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDTDNotation.js
var require_XMLDTDNotation = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDTDNotation.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLDTDNotation, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module.exports = XMLDTDNotation = function(superClass) {
        extend(XMLDTDNotation2, superClass);
        function XMLDTDNotation2(parent, name, value) {
          XMLDTDNotation2.__super__.constructor.call(this, parent);
          if (name == null) {
            throw new Error("Missing DTD notation name. " + this.debugInfo(name));
          }
          if (!value.pubID && !value.sysID) {
            throw new Error("Public or system identifiers are required for an external entity. " + this.debugInfo(name));
          }
          this.name = this.stringify.name(name);
          this.type = NodeType.NotationDeclaration;
          if (value.pubID != null) {
            this.pubID = this.stringify.dtdPubID(value.pubID);
          }
          if (value.sysID != null) {
            this.sysID = this.stringify.dtdSysID(value.sysID);
          }
        }
        Object.defineProperty(XMLDTDNotation2.prototype, "publicId", {
          get: function() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDTDNotation2.prototype, "systemId", {
          get: function() {
            return this.sysID;
          }
        });
        XMLDTDNotation2.prototype.toString = function(options) {
          return this.options.writer.dtdNotation(this, this.options.writer.filterOptions(options));
        };
        return XMLDTDNotation2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDocType.js
var require_XMLDocType = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDocType.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDocType, XMLNamedNodeMap, XMLNode, isObject2, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isObject2 = require_Utility().isObject;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLNamedNodeMap = require_XMLNamedNodeMap();
      module.exports = XMLDocType = function(superClass) {
        extend(XMLDocType2, superClass);
        function XMLDocType2(parent, pubID, sysID) {
          var child, i3, len, ref, ref1, ref2;
          XMLDocType2.__super__.constructor.call(this, parent);
          this.type = NodeType.DocType;
          if (parent.children) {
            ref = parent.children;
            for (i3 = 0, len = ref.length; i3 < len; i3++) {
              child = ref[i3];
              if (child.type === NodeType.Element) {
                this.name = child.name;
                break;
              }
            }
          }
          this.documentObject = parent;
          if (isObject2(pubID)) {
            ref1 = pubID, pubID = ref1.pubID, sysID = ref1.sysID;
          }
          if (sysID == null) {
            ref2 = [pubID, sysID], sysID = ref2[0], pubID = ref2[1];
          }
          if (pubID != null) {
            this.pubID = this.stringify.dtdPubID(pubID);
          }
          if (sysID != null) {
            this.sysID = this.stringify.dtdSysID(sysID);
          }
        }
        Object.defineProperty(XMLDocType2.prototype, "entities", {
          get: function() {
            var child, i3, len, nodes, ref;
            nodes = {};
            ref = this.children;
            for (i3 = 0, len = ref.length; i3 < len; i3++) {
              child = ref[i3];
              if (child.type === NodeType.EntityDeclaration && !child.pe) {
                nodes[child.name] = child;
              }
            }
            return new XMLNamedNodeMap(nodes);
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "notations", {
          get: function() {
            var child, i3, len, nodes, ref;
            nodes = {};
            ref = this.children;
            for (i3 = 0, len = ref.length; i3 < len; i3++) {
              child = ref[i3];
              if (child.type === NodeType.NotationDeclaration) {
                nodes[child.name] = child;
              }
            }
            return new XMLNamedNodeMap(nodes);
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "publicId", {
          get: function() {
            return this.pubID;
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "systemId", {
          get: function() {
            return this.sysID;
          }
        });
        Object.defineProperty(XMLDocType2.prototype, "internalSubset", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        XMLDocType2.prototype.element = function(name, value) {
          var child;
          child = new XMLDTDElement(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var child;
          child = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.entity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, false, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.pEntity = function(name, value) {
          var child;
          child = new XMLDTDEntity(this, true, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.notation = function(name, value) {
          var child;
          child = new XMLDTDNotation(this, name, value);
          this.children.push(child);
          return this;
        };
        XMLDocType2.prototype.toString = function(options) {
          return this.options.writer.docType(this, this.options.writer.filterOptions(options));
        };
        XMLDocType2.prototype.ele = function(name, value) {
          return this.element(name, value);
        };
        XMLDocType2.prototype.att = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          return this.attList(elementName, attributeName, attributeType, defaultValueType, defaultValue);
        };
        XMLDocType2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocType2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocType2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        XMLDocType2.prototype.up = function() {
          return this.root() || this.documentObject;
        };
        XMLDocType2.prototype.isEqualNode = function(node) {
          if (!XMLDocType2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.name !== this.name) {
            return false;
          }
          if (node.publicId !== this.publicId) {
            return false;
          }
          if (node.systemId !== this.systemId) {
            return false;
          }
          return true;
        };
        return XMLDocType2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLRaw.js
var require_XMLRaw = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLRaw.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLNode, XMLRaw, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLNode = require_XMLNode();
      module.exports = XMLRaw = function(superClass) {
        extend(XMLRaw2, superClass);
        function XMLRaw2(parent, text) {
          XMLRaw2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing raw text. " + this.debugInfo());
          }
          this.type = NodeType.Raw;
          this.value = this.stringify.raw(text);
        }
        XMLRaw2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLRaw2.prototype.toString = function(options) {
          return this.options.writer.raw(this, this.options.writer.filterOptions(options));
        };
        return XMLRaw2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLText.js
var require_XMLText = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLText.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLCharacterData, XMLText, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module.exports = XMLText = function(superClass) {
        extend(XMLText2, superClass);
        function XMLText2(parent, text) {
          XMLText2.__super__.constructor.call(this, parent);
          if (text == null) {
            throw new Error("Missing element text. " + this.debugInfo());
          }
          this.name = "#text";
          this.type = NodeType.Text;
          this.value = this.stringify.text(text);
        }
        Object.defineProperty(XMLText2.prototype, "isElementContentWhitespace", {
          get: function() {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        Object.defineProperty(XMLText2.prototype, "wholeText", {
          get: function() {
            var next, prev, str;
            str = "";
            prev = this.previousSibling;
            while (prev) {
              str = prev.data + str;
              prev = prev.previousSibling;
            }
            str += this.data;
            next = this.nextSibling;
            while (next) {
              str = str + next.data;
              next = next.nextSibling;
            }
            return str;
          }
        });
        XMLText2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLText2.prototype.toString = function(options) {
          return this.options.writer.text(this, this.options.writer.filterOptions(options));
        };
        XMLText2.prototype.splitText = function(offset) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLText2.prototype.replaceWholeText = function(content) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLText2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js
var require_XMLProcessingInstruction = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLProcessingInstruction.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLCharacterData, XMLProcessingInstruction, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLCharacterData = require_XMLCharacterData();
      module.exports = XMLProcessingInstruction = function(superClass) {
        extend(XMLProcessingInstruction2, superClass);
        function XMLProcessingInstruction2(parent, target, value) {
          XMLProcessingInstruction2.__super__.constructor.call(this, parent);
          if (target == null) {
            throw new Error("Missing instruction target. " + this.debugInfo());
          }
          this.type = NodeType.ProcessingInstruction;
          this.target = this.stringify.insTarget(target);
          this.name = this.target;
          if (value) {
            this.value = this.stringify.insValue(value);
          }
        }
        XMLProcessingInstruction2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLProcessingInstruction2.prototype.toString = function(options) {
          return this.options.writer.processingInstruction(this, this.options.writer.filterOptions(options));
        };
        XMLProcessingInstruction2.prototype.isEqualNode = function(node) {
          if (!XMLProcessingInstruction2.__super__.isEqualNode.apply(this, arguments).isEqualNode(node)) {
            return false;
          }
          if (node.target !== this.target) {
            return false;
          }
          return true;
        };
        return XMLProcessingInstruction2;
      }(XMLCharacterData);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDummy.js
var require_XMLDummy = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDummy.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLDummy, XMLNode, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      module.exports = XMLDummy = function(superClass) {
        extend(XMLDummy2, superClass);
        function XMLDummy2(parent) {
          XMLDummy2.__super__.constructor.call(this, parent);
          this.type = NodeType.Dummy;
        }
        XMLDummy2.prototype.clone = function() {
          return Object.create(this);
        };
        XMLDummy2.prototype.toString = function(options) {
          return "";
        };
        return XMLDummy2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLNodeList.js
var require_XMLNodeList = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLNodeList.js"(exports, module) {
    init_esm();
    (function() {
      var XMLNodeList;
      module.exports = XMLNodeList = function() {
        function XMLNodeList2(nodes) {
          this.nodes = nodes;
        }
        Object.defineProperty(XMLNodeList2.prototype, "length", {
          get: function() {
            return this.nodes.length || 0;
          }
        });
        XMLNodeList2.prototype.clone = function() {
          return this.nodes = null;
        };
        XMLNodeList2.prototype.item = function(index) {
          return this.nodes[index] || null;
        };
        return XMLNodeList2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/DocumentPosition.js
var require_DocumentPosition = __commonJS({
  "../../node_modules/xmlbuilder/lib/DocumentPosition.js"(exports, module) {
    init_esm();
    (function() {
      module.exports = {
        Disconnected: 1,
        Preceding: 2,
        Following: 4,
        Contains: 8,
        ContainedBy: 16,
        ImplementationSpecific: 32
      };
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLNode.js
var require_XMLNode = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLNode.js"(exports, module) {
    init_esm();
    (function() {
      var DocumentPosition, NodeType, XMLCData, XMLComment, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLNamedNodeMap, XMLNode, XMLNodeList, XMLProcessingInstruction, XMLRaw, XMLText, getValue, isEmpty, isFunction2, isObject2, ref1, hasProp = {}.hasOwnProperty;
      ref1 = require_Utility(), isObject2 = ref1.isObject, isFunction2 = ref1.isFunction, isEmpty = ref1.isEmpty, getValue = ref1.getValue;
      XMLElement = null;
      XMLCData = null;
      XMLComment = null;
      XMLDeclaration = null;
      XMLDocType = null;
      XMLRaw = null;
      XMLText = null;
      XMLProcessingInstruction = null;
      XMLDummy = null;
      NodeType = null;
      XMLNodeList = null;
      XMLNamedNodeMap = null;
      DocumentPosition = null;
      module.exports = XMLNode = function() {
        function XMLNode2(parent1) {
          this.parent = parent1;
          if (this.parent) {
            this.options = this.parent.options;
            this.stringify = this.parent.stringify;
          }
          this.value = null;
          this.children = [];
          this.baseURI = null;
          if (!XMLElement) {
            XMLElement = require_XMLElement();
            XMLCData = require_XMLCData();
            XMLComment = require_XMLComment();
            XMLDeclaration = require_XMLDeclaration();
            XMLDocType = require_XMLDocType();
            XMLRaw = require_XMLRaw();
            XMLText = require_XMLText();
            XMLProcessingInstruction = require_XMLProcessingInstruction();
            XMLDummy = require_XMLDummy();
            NodeType = require_NodeType();
            XMLNodeList = require_XMLNodeList();
            XMLNamedNodeMap = require_XMLNamedNodeMap();
            DocumentPosition = require_DocumentPosition();
          }
        }
        Object.defineProperty(XMLNode2.prototype, "nodeName", {
          get: function() {
            return this.name;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "nodeType", {
          get: function() {
            return this.type;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "nodeValue", {
          get: function() {
            return this.value;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "parentNode", {
          get: function() {
            return this.parent;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "childNodes", {
          get: function() {
            if (!this.childNodeList || !this.childNodeList.nodes) {
              this.childNodeList = new XMLNodeList(this.children);
            }
            return this.childNodeList;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "firstChild", {
          get: function() {
            return this.children[0] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "lastChild", {
          get: function() {
            return this.children[this.children.length - 1] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "previousSibling", {
          get: function() {
            var i3;
            i3 = this.parent.children.indexOf(this);
            return this.parent.children[i3 - 1] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "nextSibling", {
          get: function() {
            var i3;
            i3 = this.parent.children.indexOf(this);
            return this.parent.children[i3 + 1] || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "ownerDocument", {
          get: function() {
            return this.document() || null;
          }
        });
        Object.defineProperty(XMLNode2.prototype, "textContent", {
          get: function() {
            var child, j3, len, ref2, str;
            if (this.nodeType === NodeType.Element || this.nodeType === NodeType.DocumentFragment) {
              str = "";
              ref2 = this.children;
              for (j3 = 0, len = ref2.length; j3 < len; j3++) {
                child = ref2[j3];
                if (child.textContent) {
                  str += child.textContent;
                }
              }
              return str;
            } else {
              return null;
            }
          },
          set: function(value) {
            throw new Error("This DOM method is not implemented." + this.debugInfo());
          }
        });
        XMLNode2.prototype.setParent = function(parent) {
          var child, j3, len, ref2, results;
          this.parent = parent;
          if (parent) {
            this.options = parent.options;
            this.stringify = parent.stringify;
          }
          ref2 = this.children;
          results = [];
          for (j3 = 0, len = ref2.length; j3 < len; j3++) {
            child = ref2[j3];
            results.push(child.setParent(this));
          }
          return results;
        };
        XMLNode2.prototype.element = function(name, attributes, text) {
          var childNode, item, j3, k3, key, lastChild, len, len1, ref2, ref3, val;
          lastChild = null;
          if (attributes === null && text == null) {
            ref2 = [{}, null], attributes = ref2[0], text = ref2[1];
          }
          if (attributes == null) {
            attributes = {};
          }
          attributes = getValue(attributes);
          if (!isObject2(attributes)) {
            ref3 = [attributes, text], text = ref3[0], attributes = ref3[1];
          }
          if (name != null) {
            name = getValue(name);
          }
          if (Array.isArray(name)) {
            for (j3 = 0, len = name.length; j3 < len; j3++) {
              item = name[j3];
              lastChild = this.element(item);
            }
          } else if (isFunction2(name)) {
            lastChild = this.element(name.apply());
          } else if (isObject2(name)) {
            for (key in name) {
              if (!hasProp.call(name, key)) continue;
              val = name[key];
              if (isFunction2(val)) {
                val = val.apply();
              }
              if (!this.options.ignoreDecorators && this.stringify.convertAttKey && key.indexOf(this.stringify.convertAttKey) === 0) {
                lastChild = this.attribute(key.substr(this.stringify.convertAttKey.length), val);
              } else if (!this.options.separateArrayItems && Array.isArray(val) && isEmpty(val)) {
                lastChild = this.dummy();
              } else if (isObject2(val) && isEmpty(val)) {
                lastChild = this.element(key);
              } else if (!this.options.keepNullNodes && val == null) {
                lastChild = this.dummy();
              } else if (!this.options.separateArrayItems && Array.isArray(val)) {
                for (k3 = 0, len1 = val.length; k3 < len1; k3++) {
                  item = val[k3];
                  childNode = {};
                  childNode[key] = item;
                  lastChild = this.element(childNode);
                }
              } else if (isObject2(val)) {
                if (!this.options.ignoreDecorators && this.stringify.convertTextKey && key.indexOf(this.stringify.convertTextKey) === 0) {
                  lastChild = this.element(val);
                } else {
                  lastChild = this.element(key);
                  lastChild.element(val);
                }
              } else {
                lastChild = this.element(key, val);
              }
            }
          } else if (!this.options.keepNullNodes && text === null) {
            lastChild = this.dummy();
          } else {
            if (!this.options.ignoreDecorators && this.stringify.convertTextKey && name.indexOf(this.stringify.convertTextKey) === 0) {
              lastChild = this.text(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCDataKey && name.indexOf(this.stringify.convertCDataKey) === 0) {
              lastChild = this.cdata(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertCommentKey && name.indexOf(this.stringify.convertCommentKey) === 0) {
              lastChild = this.comment(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertRawKey && name.indexOf(this.stringify.convertRawKey) === 0) {
              lastChild = this.raw(text);
            } else if (!this.options.ignoreDecorators && this.stringify.convertPIKey && name.indexOf(this.stringify.convertPIKey) === 0) {
              lastChild = this.instruction(name.substr(this.stringify.convertPIKey.length), text);
            } else {
              lastChild = this.node(name, attributes, text);
            }
          }
          if (lastChild == null) {
            throw new Error("Could not create any elements with: " + name + ". " + this.debugInfo());
          }
          return lastChild;
        };
        XMLNode2.prototype.insertBefore = function(name, attributes, text) {
          var child, i3, newChild, refChild, removed;
          if (name != null ? name.type : void 0) {
            newChild = name;
            refChild = attributes;
            newChild.setParent(this);
            if (refChild) {
              i3 = children.indexOf(refChild);
              removed = children.splice(i3);
              children.push(newChild);
              Array.prototype.push.apply(children, removed);
            } else {
              children.push(newChild);
            }
            return newChild;
          } else {
            if (this.isRoot) {
              throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
            }
            i3 = this.parent.children.indexOf(this);
            removed = this.parent.children.splice(i3);
            child = this.parent.element(name, attributes, text);
            Array.prototype.push.apply(this.parent.children, removed);
            return child;
          }
        };
        XMLNode2.prototype.insertAfter = function(name, attributes, text) {
          var child, i3, removed;
          if (this.isRoot) {
            throw new Error("Cannot insert elements at root level. " + this.debugInfo(name));
          }
          i3 = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i3 + 1);
          child = this.parent.element(name, attributes, text);
          Array.prototype.push.apply(this.parent.children, removed);
          return child;
        };
        XMLNode2.prototype.remove = function() {
          var i3, ref2;
          if (this.isRoot) {
            throw new Error("Cannot remove the root element. " + this.debugInfo());
          }
          i3 = this.parent.children.indexOf(this);
          [].splice.apply(this.parent.children, [i3, i3 - i3 + 1].concat(ref2 = [])), ref2;
          return this.parent;
        };
        XMLNode2.prototype.node = function(name, attributes, text) {
          var child, ref2;
          if (name != null) {
            name = getValue(name);
          }
          attributes || (attributes = {});
          attributes = getValue(attributes);
          if (!isObject2(attributes)) {
            ref2 = [attributes, text], text = ref2[0], attributes = ref2[1];
          }
          child = new XMLElement(this, name, attributes);
          if (text != null) {
            child.text(text);
          }
          this.children.push(child);
          return child;
        };
        XMLNode2.prototype.text = function(value) {
          var child;
          if (isObject2(value)) {
            this.element(value);
          }
          child = new XMLText(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.cdata = function(value) {
          var child;
          child = new XMLCData(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.comment = function(value) {
          var child;
          child = new XMLComment(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.commentBefore = function(value) {
          var child, i3, removed;
          i3 = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i3);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.commentAfter = function(value) {
          var child, i3, removed;
          i3 = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i3 + 1);
          child = this.parent.comment(value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.raw = function(value) {
          var child;
          child = new XMLRaw(this, value);
          this.children.push(child);
          return this;
        };
        XMLNode2.prototype.dummy = function() {
          var child;
          child = new XMLDummy(this);
          return child;
        };
        XMLNode2.prototype.instruction = function(target, value) {
          var insTarget, insValue, instruction, j3, len;
          if (target != null) {
            target = getValue(target);
          }
          if (value != null) {
            value = getValue(value);
          }
          if (Array.isArray(target)) {
            for (j3 = 0, len = target.length; j3 < len; j3++) {
              insTarget = target[j3];
              this.instruction(insTarget);
            }
          } else if (isObject2(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget)) continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction2(value)) {
              value = value.apply();
            }
            instruction = new XMLProcessingInstruction(this, target, value);
            this.children.push(instruction);
          }
          return this;
        };
        XMLNode2.prototype.instructionBefore = function(target, value) {
          var child, i3, removed;
          i3 = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i3);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.instructionAfter = function(target, value) {
          var child, i3, removed;
          i3 = this.parent.children.indexOf(this);
          removed = this.parent.children.splice(i3 + 1);
          child = this.parent.instruction(target, value);
          Array.prototype.push.apply(this.parent.children, removed);
          return this;
        };
        XMLNode2.prototype.declaration = function(version, encoding, standalone) {
          var doc, xmldec;
          doc = this.document();
          xmldec = new XMLDeclaration(doc, version, encoding, standalone);
          if (doc.children.length === 0) {
            doc.children.unshift(xmldec);
          } else if (doc.children[0].type === NodeType.Declaration) {
            doc.children[0] = xmldec;
          } else {
            doc.children.unshift(xmldec);
          }
          return doc.root() || doc;
        };
        XMLNode2.prototype.dtd = function(pubID, sysID) {
          var child, doc, doctype, i3, j3, k3, len, len1, ref2, ref3;
          doc = this.document();
          doctype = new XMLDocType(doc, pubID, sysID);
          ref2 = doc.children;
          for (i3 = j3 = 0, len = ref2.length; j3 < len; i3 = ++j3) {
            child = ref2[i3];
            if (child.type === NodeType.DocType) {
              doc.children[i3] = doctype;
              return doctype;
            }
          }
          ref3 = doc.children;
          for (i3 = k3 = 0, len1 = ref3.length; k3 < len1; i3 = ++k3) {
            child = ref3[i3];
            if (child.isRoot) {
              doc.children.splice(i3, 0, doctype);
              return doctype;
            }
          }
          doc.children.push(doctype);
          return doctype;
        };
        XMLNode2.prototype.up = function() {
          if (this.isRoot) {
            throw new Error("The root node has no parent. Use doc() if you need to get the document object.");
          }
          return this.parent;
        };
        XMLNode2.prototype.root = function() {
          var node;
          node = this;
          while (node) {
            if (node.type === NodeType.Document) {
              return node.rootObject;
            } else if (node.isRoot) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.document = function() {
          var node;
          node = this;
          while (node) {
            if (node.type === NodeType.Document) {
              return node;
            } else {
              node = node.parent;
            }
          }
        };
        XMLNode2.prototype.end = function(options) {
          return this.document().end(options);
        };
        XMLNode2.prototype.prev = function() {
          var i3;
          i3 = this.parent.children.indexOf(this);
          if (i3 < 1) {
            throw new Error("Already at the first node. " + this.debugInfo());
          }
          return this.parent.children[i3 - 1];
        };
        XMLNode2.prototype.next = function() {
          var i3;
          i3 = this.parent.children.indexOf(this);
          if (i3 === -1 || i3 === this.parent.children.length - 1) {
            throw new Error("Already at the last node. " + this.debugInfo());
          }
          return this.parent.children[i3 + 1];
        };
        XMLNode2.prototype.importDocument = function(doc) {
          var clonedRoot;
          clonedRoot = doc.root().clone();
          clonedRoot.parent = this;
          clonedRoot.isRoot = false;
          this.children.push(clonedRoot);
          return this;
        };
        XMLNode2.prototype.debugInfo = function(name) {
          var ref2, ref3;
          name = name || this.name;
          if (name == null && !((ref2 = this.parent) != null ? ref2.name : void 0)) {
            return "";
          } else if (name == null) {
            return "parent: <" + this.parent.name + ">";
          } else if (!((ref3 = this.parent) != null ? ref3.name : void 0)) {
            return "node: <" + name + ">";
          } else {
            return "node: <" + name + ">, parent: <" + this.parent.name + ">";
          }
        };
        XMLNode2.prototype.ele = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.doc = function() {
          return this.document();
        };
        XMLNode2.prototype.dec = function(version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLNode2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLNode2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLNode2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLNode2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLNode2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLNode2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLNode2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLNode2.prototype.u = function() {
          return this.up();
        };
        XMLNode2.prototype.importXMLBuilder = function(doc) {
          return this.importDocument(doc);
        };
        XMLNode2.prototype.replaceChild = function(newChild, oldChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.removeChild = function(oldChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.appendChild = function(newChild) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.hasChildNodes = function() {
          return this.children.length !== 0;
        };
        XMLNode2.prototype.cloneNode = function(deep) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.normalize = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.isSupported = function(feature, version) {
          return true;
        };
        XMLNode2.prototype.hasAttributes = function() {
          return this.attribs.length !== 0;
        };
        XMLNode2.prototype.compareDocumentPosition = function(other) {
          var ref, res;
          ref = this;
          if (ref === other) {
            return 0;
          } else if (this.document() !== other.document()) {
            res = DocumentPosition.Disconnected | DocumentPosition.ImplementationSpecific;
            if (Math.random() < 0.5) {
              res |= DocumentPosition.Preceding;
            } else {
              res |= DocumentPosition.Following;
            }
            return res;
          } else if (ref.isAncestor(other)) {
            return DocumentPosition.Contains | DocumentPosition.Preceding;
          } else if (ref.isDescendant(other)) {
            return DocumentPosition.Contains | DocumentPosition.Following;
          } else if (ref.isPreceding(other)) {
            return DocumentPosition.Preceding;
          } else {
            return DocumentPosition.Following;
          }
        };
        XMLNode2.prototype.isSameNode = function(other) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.lookupPrefix = function(namespaceURI) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.isDefaultNamespace = function(namespaceURI) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.lookupNamespaceURI = function(prefix) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.isEqualNode = function(node) {
          var i3, j3, ref2;
          if (node.nodeType !== this.nodeType) {
            return false;
          }
          if (node.children.length !== this.children.length) {
            return false;
          }
          for (i3 = j3 = 0, ref2 = this.children.length - 1; 0 <= ref2 ? j3 <= ref2 : j3 >= ref2; i3 = 0 <= ref2 ? ++j3 : --j3) {
            if (!this.children[i3].isEqualNode(node.children[i3])) {
              return false;
            }
          }
          return true;
        };
        XMLNode2.prototype.getFeature = function(feature, version) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.setUserData = function(key, data, handler) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.getUserData = function(key) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLNode2.prototype.contains = function(other) {
          if (!other) {
            return false;
          }
          return other === this || this.isDescendant(other);
        };
        XMLNode2.prototype.isDescendant = function(node) {
          var child, isDescendantChild, j3, len, ref2;
          ref2 = this.children;
          for (j3 = 0, len = ref2.length; j3 < len; j3++) {
            child = ref2[j3];
            if (node === child) {
              return true;
            }
            isDescendantChild = child.isDescendant(node);
            if (isDescendantChild) {
              return true;
            }
          }
          return false;
        };
        XMLNode2.prototype.isAncestor = function(node) {
          return node.isDescendant(this);
        };
        XMLNode2.prototype.isPreceding = function(node) {
          var nodePos, thisPos;
          nodePos = this.treePosition(node);
          thisPos = this.treePosition(this);
          if (nodePos === -1 || thisPos === -1) {
            return false;
          } else {
            return nodePos < thisPos;
          }
        };
        XMLNode2.prototype.isFollowing = function(node) {
          var nodePos, thisPos;
          nodePos = this.treePosition(node);
          thisPos = this.treePosition(this);
          if (nodePos === -1 || thisPos === -1) {
            return false;
          } else {
            return nodePos > thisPos;
          }
        };
        XMLNode2.prototype.treePosition = function(node) {
          var found, pos;
          pos = 0;
          found = false;
          this.foreachTreeNode(this.document(), function(childNode) {
            pos++;
            if (!found && childNode === node) {
              return found = true;
            }
          });
          if (found) {
            return pos;
          } else {
            return -1;
          }
        };
        XMLNode2.prototype.foreachTreeNode = function(node, func) {
          var child, j3, len, ref2, res;
          node || (node = this.document());
          ref2 = node.children;
          for (j3 = 0, len = ref2.length; j3 < len; j3++) {
            child = ref2[j3];
            if (res = func(child)) {
              return res;
            } else {
              res = this.foreachTreeNode(child, func);
              if (res) {
                return res;
              }
            }
          }
        };
        return XMLNode2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLStringifier.js
var require_XMLStringifier = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLStringifier.js"(exports, module) {
    init_esm();
    (function() {
      var XMLStringifier, bind = function(fn, me2) {
        return function() {
          return fn.apply(me2, arguments);
        };
      }, hasProp = {}.hasOwnProperty;
      module.exports = XMLStringifier = function() {
        function XMLStringifier2(options) {
          this.assertLegalName = bind(this.assertLegalName, this);
          this.assertLegalChar = bind(this.assertLegalChar, this);
          var key, ref, value;
          options || (options = {});
          this.options = options;
          if (!this.options.version) {
            this.options.version = "1.0";
          }
          ref = options.stringify || {};
          for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            value = ref[key];
            this[key] = value;
          }
        }
        XMLStringifier2.prototype.name = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalName("" + val || "");
        };
        XMLStringifier2.prototype.text = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar(this.textEscape("" + val || ""));
        };
        XMLStringifier2.prototype.cdata = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          val = val.replace("]]>", "]]]]><![CDATA[>");
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.comment = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (val.match(/--/)) {
            throw new Error("Comment text cannot contain double-hypen: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.raw = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return "" + val || "";
        };
        XMLStringifier2.prototype.attValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar(this.attEscape(val = "" + val || ""));
        };
        XMLStringifier2.prototype.insTarget = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.insValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (val.match(/\?>/)) {
            throw new Error("Invalid processing instruction value: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.xmlVersion = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (!val.match(/1\.[0-9]+/)) {
            throw new Error("Invalid version number: " + val);
          }
          return val;
        };
        XMLStringifier2.prototype.xmlEncoding = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          val = "" + val || "";
          if (!val.match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/)) {
            throw new Error("Invalid encoding: " + val);
          }
          return this.assertLegalChar(val);
        };
        XMLStringifier2.prototype.xmlStandalone = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          if (val) {
            return "yes";
          } else {
            return "no";
          }
        };
        XMLStringifier2.prototype.dtdPubID = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdSysID = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdElementValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdAttType = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdAttDefault = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdEntityValue = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.dtdNData = function(val) {
          if (this.options.noValidation) {
            return val;
          }
          return this.assertLegalChar("" + val || "");
        };
        XMLStringifier2.prototype.convertAttKey = "@";
        XMLStringifier2.prototype.convertPIKey = "?";
        XMLStringifier2.prototype.convertTextKey = "#text";
        XMLStringifier2.prototype.convertCDataKey = "#cdata";
        XMLStringifier2.prototype.convertCommentKey = "#comment";
        XMLStringifier2.prototype.convertRawKey = "#raw";
        XMLStringifier2.prototype.assertLegalChar = function(str) {
          var regex, res;
          if (this.options.noValidation) {
            return str;
          }
          regex = "";
          if (this.options.version === "1.0") {
            regex = /[\0-\x08\x0B\f\x0E-\x1F\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
            if (res = str.match(regex)) {
              throw new Error("Invalid character in string: " + str + " at index " + res.index);
            }
          } else if (this.options.version === "1.1") {
            regex = /[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/;
            if (res = str.match(regex)) {
              throw new Error("Invalid character in string: " + str + " at index " + res.index);
            }
          }
          return str;
        };
        XMLStringifier2.prototype.assertLegalName = function(str) {
          var regex;
          if (this.options.noValidation) {
            return str;
          }
          this.assertLegalChar(str);
          regex = /^([:A-Z_a-z\xC0-\xD6\xD8-\xF6\xF8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])([\x2D\.0-:A-Z_a-z\xB7\xC0-\xD6\xD8-\xF6\xF8-\u037D\u037F-\u1FFF\u200C\u200D\u203F\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])*$/;
          if (!str.match(regex)) {
            throw new Error("Invalid character in name");
          }
          return str;
        };
        XMLStringifier2.prototype.textEscape = function(str) {
          var ampregex;
          if (this.options.noValidation) {
            return str;
          }
          ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;").replace(/\r/g, "&#xD;");
        };
        XMLStringifier2.prototype.attEscape = function(str) {
          var ampregex;
          if (this.options.noValidation) {
            return str;
          }
          ampregex = this.options.noDoubleEncoding ? /(?!&\S+;)&/g : /&/g;
          return str.replace(ampregex, "&amp;").replace(/</g, "&lt;").replace(/"/g, "&quot;").replace(/\t/g, "&#x9;").replace(/\n/g, "&#xA;").replace(/\r/g, "&#xD;");
        };
        return XMLStringifier2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/WriterState.js
var require_WriterState = __commonJS({
  "../../node_modules/xmlbuilder/lib/WriterState.js"(exports, module) {
    init_esm();
    (function() {
      module.exports = {
        None: 0,
        OpenTag: 1,
        InsideTag: 2,
        CloseTag: 3
      };
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLWriterBase.js
var require_XMLWriterBase = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLWriterBase.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, WriterState, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDummy, XMLElement, XMLProcessingInstruction, XMLRaw, XMLText, XMLWriterBase, assign, hasProp = {}.hasOwnProperty;
      assign = require_Utility().assign;
      NodeType = require_NodeType();
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLElement = require_XMLElement();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDummy = require_XMLDummy();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDNotation = require_XMLDTDNotation();
      WriterState = require_WriterState();
      module.exports = XMLWriterBase = function() {
        function XMLWriterBase2(options) {
          var key, ref, value;
          options || (options = {});
          this.options = options;
          ref = options.writer || {};
          for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            value = ref[key];
            this["_" + key] = this[key];
            this[key] = value;
          }
        }
        XMLWriterBase2.prototype.filterOptions = function(options) {
          var filteredOptions, ref, ref1, ref2, ref3, ref4, ref5, ref6;
          options || (options = {});
          options = assign({}, this.options, options);
          filteredOptions = {
            writer: this
          };
          filteredOptions.pretty = options.pretty || false;
          filteredOptions.allowEmpty = options.allowEmpty || false;
          filteredOptions.indent = (ref = options.indent) != null ? ref : "  ";
          filteredOptions.newline = (ref1 = options.newline) != null ? ref1 : "\n";
          filteredOptions.offset = (ref2 = options.offset) != null ? ref2 : 0;
          filteredOptions.dontPrettyTextNodes = (ref3 = (ref4 = options.dontPrettyTextNodes) != null ? ref4 : options.dontprettytextnodes) != null ? ref3 : 0;
          filteredOptions.spaceBeforeSlash = (ref5 = (ref6 = options.spaceBeforeSlash) != null ? ref6 : options.spacebeforeslash) != null ? ref5 : "";
          if (filteredOptions.spaceBeforeSlash === true) {
            filteredOptions.spaceBeforeSlash = " ";
          }
          filteredOptions.suppressPrettyCount = 0;
          filteredOptions.user = {};
          filteredOptions.state = WriterState.None;
          return filteredOptions;
        };
        XMLWriterBase2.prototype.indent = function(node, options, level) {
          var indentLevel;
          if (!options.pretty || options.suppressPrettyCount) {
            return "";
          } else if (options.pretty) {
            indentLevel = (level || 0) + options.offset + 1;
            if (indentLevel > 0) {
              return new Array(indentLevel).join(options.indent);
            }
          }
          return "";
        };
        XMLWriterBase2.prototype.endline = function(node, options, level) {
          if (!options.pretty || options.suppressPrettyCount) {
            return "";
          } else {
            return options.newline;
          }
        };
        XMLWriterBase2.prototype.attribute = function(att, options, level) {
          var r3;
          this.openAttribute(att, options, level);
          r3 = " " + att.name + '="' + att.value + '"';
          this.closeAttribute(att, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.cdata = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level) + "<![CDATA[";
          options.state = WriterState.InsideTag;
          r3 += node.value;
          options.state = WriterState.CloseTag;
          r3 += "]]>" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.comment = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level) + "<!-- ";
          options.state = WriterState.InsideTag;
          r3 += node.value;
          options.state = WriterState.CloseTag;
          r3 += " -->" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.declaration = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level) + "<?xml";
          options.state = WriterState.InsideTag;
          r3 += ' version="' + node.version + '"';
          if (node.encoding != null) {
            r3 += ' encoding="' + node.encoding + '"';
          }
          if (node.standalone != null) {
            r3 += ' standalone="' + node.standalone + '"';
          }
          options.state = WriterState.CloseTag;
          r3 += options.spaceBeforeSlash + "?>";
          r3 += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.docType = function(node, options, level) {
          var child, i3, len, r3, ref;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level);
          r3 += "<!DOCTYPE " + node.root().name;
          if (node.pubID && node.sysID) {
            r3 += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.sysID) {
            r3 += ' SYSTEM "' + node.sysID + '"';
          }
          if (node.children.length > 0) {
            r3 += " [";
            r3 += this.endline(node, options, level);
            options.state = WriterState.InsideTag;
            ref = node.children;
            for (i3 = 0, len = ref.length; i3 < len; i3++) {
              child = ref[i3];
              r3 += this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            r3 += "]";
          }
          options.state = WriterState.CloseTag;
          r3 += options.spaceBeforeSlash + ">";
          r3 += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.element = function(node, options, level) {
          var att, child, childNodeCount, firstChildNode, i3, j3, len, len1, name, prettySuppressed, r3, ref, ref1, ref2;
          level || (level = 0);
          prettySuppressed = false;
          r3 = "";
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 += this.indent(node, options, level) + "<" + node.name;
          ref = node.attribs;
          for (name in ref) {
            if (!hasProp.call(ref, name)) continue;
            att = ref[name];
            r3 += this.attribute(att, options, level);
          }
          childNodeCount = node.children.length;
          firstChildNode = childNodeCount === 0 ? null : node.children[0];
          if (childNodeCount === 0 || node.children.every(function(e3) {
            return (e3.type === NodeType.Text || e3.type === NodeType.Raw) && e3.value === "";
          })) {
            if (options.allowEmpty) {
              r3 += ">";
              options.state = WriterState.CloseTag;
              r3 += "</" + node.name + ">" + this.endline(node, options, level);
            } else {
              options.state = WriterState.CloseTag;
              r3 += options.spaceBeforeSlash + "/>" + this.endline(node, options, level);
            }
          } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
            r3 += ">";
            options.state = WriterState.InsideTag;
            options.suppressPrettyCount++;
            prettySuppressed = true;
            r3 += this.writeChildNode(firstChildNode, options, level + 1);
            options.suppressPrettyCount--;
            prettySuppressed = false;
            options.state = WriterState.CloseTag;
            r3 += "</" + node.name + ">" + this.endline(node, options, level);
          } else {
            if (options.dontPrettyTextNodes) {
              ref1 = node.children;
              for (i3 = 0, len = ref1.length; i3 < len; i3++) {
                child = ref1[i3];
                if ((child.type === NodeType.Text || child.type === NodeType.Raw) && child.value != null) {
                  options.suppressPrettyCount++;
                  prettySuppressed = true;
                  break;
                }
              }
            }
            r3 += ">" + this.endline(node, options, level);
            options.state = WriterState.InsideTag;
            ref2 = node.children;
            for (j3 = 0, len1 = ref2.length; j3 < len1; j3++) {
              child = ref2[j3];
              r3 += this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            r3 += this.indent(node, options, level) + "</" + node.name + ">";
            if (prettySuppressed) {
              options.suppressPrettyCount--;
            }
            r3 += this.endline(node, options, level);
            options.state = WriterState.None;
          }
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.writeChildNode = function(node, options, level) {
          switch (node.type) {
            case NodeType.CData:
              return this.cdata(node, options, level);
            case NodeType.Comment:
              return this.comment(node, options, level);
            case NodeType.Element:
              return this.element(node, options, level);
            case NodeType.Raw:
              return this.raw(node, options, level);
            case NodeType.Text:
              return this.text(node, options, level);
            case NodeType.ProcessingInstruction:
              return this.processingInstruction(node, options, level);
            case NodeType.Dummy:
              return "";
            case NodeType.Declaration:
              return this.declaration(node, options, level);
            case NodeType.DocType:
              return this.docType(node, options, level);
            case NodeType.AttributeDeclaration:
              return this.dtdAttList(node, options, level);
            case NodeType.ElementDeclaration:
              return this.dtdElement(node, options, level);
            case NodeType.EntityDeclaration:
              return this.dtdEntity(node, options, level);
            case NodeType.NotationDeclaration:
              return this.dtdNotation(node, options, level);
            default:
              throw new Error("Unknown XML node type: " + node.constructor.name);
          }
        };
        XMLWriterBase2.prototype.processingInstruction = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level) + "<?";
          options.state = WriterState.InsideTag;
          r3 += node.target;
          if (node.value) {
            r3 += " " + node.value;
          }
          options.state = WriterState.CloseTag;
          r3 += options.spaceBeforeSlash + "?>";
          r3 += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.raw = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level);
          options.state = WriterState.InsideTag;
          r3 += node.value;
          options.state = WriterState.CloseTag;
          r3 += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.text = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level);
          options.state = WriterState.InsideTag;
          r3 += node.value;
          options.state = WriterState.CloseTag;
          r3 += this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.dtdAttList = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level) + "<!ATTLIST";
          options.state = WriterState.InsideTag;
          r3 += " " + node.elementName + " " + node.attributeName + " " + node.attributeType;
          if (node.defaultValueType !== "#DEFAULT") {
            r3 += " " + node.defaultValueType;
          }
          if (node.defaultValue) {
            r3 += ' "' + node.defaultValue + '"';
          }
          options.state = WriterState.CloseTag;
          r3 += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.dtdElement = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level) + "<!ELEMENT";
          options.state = WriterState.InsideTag;
          r3 += " " + node.name + " " + node.value;
          options.state = WriterState.CloseTag;
          r3 += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.dtdEntity = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level) + "<!ENTITY";
          options.state = WriterState.InsideTag;
          if (node.pe) {
            r3 += " %";
          }
          r3 += " " + node.name;
          if (node.value) {
            r3 += ' "' + node.value + '"';
          } else {
            if (node.pubID && node.sysID) {
              r3 += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
            } else if (node.sysID) {
              r3 += ' SYSTEM "' + node.sysID + '"';
            }
            if (node.nData) {
              r3 += " NDATA " + node.nData;
            }
          }
          options.state = WriterState.CloseTag;
          r3 += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.dtdNotation = function(node, options, level) {
          var r3;
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          r3 = this.indent(node, options, level) + "<!NOTATION";
          options.state = WriterState.InsideTag;
          r3 += " " + node.name;
          if (node.pubID && node.sysID) {
            r3 += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
          } else if (node.pubID) {
            r3 += ' PUBLIC "' + node.pubID + '"';
          } else if (node.sysID) {
            r3 += ' SYSTEM "' + node.sysID + '"';
          }
          options.state = WriterState.CloseTag;
          r3 += options.spaceBeforeSlash + ">" + this.endline(node, options, level);
          options.state = WriterState.None;
          this.closeNode(node, options, level);
          return r3;
        };
        XMLWriterBase2.prototype.openNode = function(node, options, level) {
        };
        XMLWriterBase2.prototype.closeNode = function(node, options, level) {
        };
        XMLWriterBase2.prototype.openAttribute = function(att, options, level) {
        };
        XMLWriterBase2.prototype.closeAttribute = function(att, options, level) {
        };
        return XMLWriterBase2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLStringWriter.js
var require_XMLStringWriter = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLStringWriter.js"(exports, module) {
    init_esm();
    (function() {
      var XMLStringWriter, XMLWriterBase, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      XMLWriterBase = require_XMLWriterBase();
      module.exports = XMLStringWriter = function(superClass) {
        extend(XMLStringWriter2, superClass);
        function XMLStringWriter2(options) {
          XMLStringWriter2.__super__.constructor.call(this, options);
        }
        XMLStringWriter2.prototype.document = function(doc, options) {
          var child, i3, len, r3, ref;
          options = this.filterOptions(options);
          r3 = "";
          ref = doc.children;
          for (i3 = 0, len = ref.length; i3 < len; i3++) {
            child = ref[i3];
            r3 += this.writeChildNode(child, options, 0);
          }
          if (options.pretty && r3.slice(-options.newline.length) === options.newline) {
            r3 = r3.slice(0, -options.newline.length);
          }
          return r3;
        };
        return XMLStringWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDocument.js
var require_XMLDocument = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDocument.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, XMLDOMConfiguration, XMLDOMImplementation, XMLDocument, XMLNode, XMLStringWriter, XMLStringifier, isPlainObject, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      isPlainObject = require_Utility().isPlainObject;
      XMLDOMImplementation = require_XMLDOMImplementation();
      XMLDOMConfiguration = require_XMLDOMConfiguration();
      XMLNode = require_XMLNode();
      NodeType = require_NodeType();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      module.exports = XMLDocument = function(superClass) {
        extend(XMLDocument2, superClass);
        function XMLDocument2(options) {
          XMLDocument2.__super__.constructor.call(this, null);
          this.name = "#document";
          this.type = NodeType.Document;
          this.documentURI = null;
          this.domConfig = new XMLDOMConfiguration();
          options || (options = {});
          if (!options.writer) {
            options.writer = new XMLStringWriter();
          }
          this.options = options;
          this.stringify = new XMLStringifier(options);
        }
        Object.defineProperty(XMLDocument2.prototype, "implementation", {
          value: new XMLDOMImplementation()
        });
        Object.defineProperty(XMLDocument2.prototype, "doctype", {
          get: function() {
            var child, i3, len, ref;
            ref = this.children;
            for (i3 = 0, len = ref.length; i3 < len; i3++) {
              child = ref[i3];
              if (child.type === NodeType.DocType) {
                return child;
              }
            }
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "documentElement", {
          get: function() {
            return this.rootObject || null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "inputEncoding", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "strictErrorChecking", {
          get: function() {
            return false;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "xmlEncoding", {
          get: function() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].encoding;
            } else {
              return null;
            }
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "xmlStandalone", {
          get: function() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].standalone === "yes";
            } else {
              return false;
            }
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "xmlVersion", {
          get: function() {
            if (this.children.length !== 0 && this.children[0].type === NodeType.Declaration) {
              return this.children[0].version;
            } else {
              return "1.0";
            }
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "URL", {
          get: function() {
            return this.documentURI;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "origin", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "compatMode", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "characterSet", {
          get: function() {
            return null;
          }
        });
        Object.defineProperty(XMLDocument2.prototype, "contentType", {
          get: function() {
            return null;
          }
        });
        XMLDocument2.prototype.end = function(writer) {
          var writerOptions;
          writerOptions = {};
          if (!writer) {
            writer = this.options.writer;
          } else if (isPlainObject(writer)) {
            writerOptions = writer;
            writer = this.options.writer;
          }
          return writer.document(this, writer.filterOptions(writerOptions));
        };
        XMLDocument2.prototype.toString = function(options) {
          return this.options.writer.document(this, this.options.writer.filterOptions(options));
        };
        XMLDocument2.prototype.createElement = function(tagName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createDocumentFragment = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createTextNode = function(data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createComment = function(data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createCDATASection = function(data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createProcessingInstruction = function(target, data) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createAttribute = function(name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createEntityReference = function(name) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementsByTagName = function(tagname) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.importNode = function(importedNode, deep) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createElementNS = function(namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createAttributeNS = function(namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementsByTagNameNS = function(namespaceURI, localName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementById = function(elementId) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.adoptNode = function(source) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.normalizeDocument = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.renameNode = function(node, namespaceURI, qualifiedName) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.getElementsByClassName = function(classNames) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createEvent = function(eventInterface) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createRange = function() {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createNodeIterator = function(root, whatToShow, filter) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        XMLDocument2.prototype.createTreeWalker = function(root, whatToShow, filter) {
          throw new Error("This DOM method is not implemented." + this.debugInfo());
        };
        return XMLDocument2;
      }(XMLNode);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLDocumentCB.js
var require_XMLDocumentCB = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLDocumentCB.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, WriterState, XMLAttribute, XMLCData, XMLComment, XMLDTDAttList, XMLDTDElement, XMLDTDEntity, XMLDTDNotation, XMLDeclaration, XMLDocType, XMLDocument, XMLDocumentCB, XMLElement, XMLProcessingInstruction, XMLRaw, XMLStringWriter, XMLStringifier, XMLText, getValue, isFunction2, isObject2, isPlainObject, ref, hasProp = {}.hasOwnProperty;
      ref = require_Utility(), isObject2 = ref.isObject, isFunction2 = ref.isFunction, isPlainObject = ref.isPlainObject, getValue = ref.getValue;
      NodeType = require_NodeType();
      XMLDocument = require_XMLDocument();
      XMLElement = require_XMLElement();
      XMLCData = require_XMLCData();
      XMLComment = require_XMLComment();
      XMLRaw = require_XMLRaw();
      XMLText = require_XMLText();
      XMLProcessingInstruction = require_XMLProcessingInstruction();
      XMLDeclaration = require_XMLDeclaration();
      XMLDocType = require_XMLDocType();
      XMLDTDAttList = require_XMLDTDAttList();
      XMLDTDEntity = require_XMLDTDEntity();
      XMLDTDElement = require_XMLDTDElement();
      XMLDTDNotation = require_XMLDTDNotation();
      XMLAttribute = require_XMLAttribute();
      XMLStringifier = require_XMLStringifier();
      XMLStringWriter = require_XMLStringWriter();
      WriterState = require_WriterState();
      module.exports = XMLDocumentCB = function() {
        function XMLDocumentCB2(options, onData, onEnd) {
          var writerOptions;
          this.name = "?xml";
          this.type = NodeType.Document;
          options || (options = {});
          writerOptions = {};
          if (!options.writer) {
            options.writer = new XMLStringWriter();
          } else if (isPlainObject(options.writer)) {
            writerOptions = options.writer;
            options.writer = new XMLStringWriter();
          }
          this.options = options;
          this.writer = options.writer;
          this.writerOptions = this.writer.filterOptions(writerOptions);
          this.stringify = new XMLStringifier(options);
          this.onDataCallback = onData || function() {
          };
          this.onEndCallback = onEnd || function() {
          };
          this.currentNode = null;
          this.currentLevel = -1;
          this.openTags = {};
          this.documentStarted = false;
          this.documentCompleted = false;
          this.root = null;
        }
        XMLDocumentCB2.prototype.createChildNode = function(node) {
          var att, attName, attributes, child, i3, len, ref1, ref2;
          switch (node.type) {
            case NodeType.CData:
              this.cdata(node.value);
              break;
            case NodeType.Comment:
              this.comment(node.value);
              break;
            case NodeType.Element:
              attributes = {};
              ref1 = node.attribs;
              for (attName in ref1) {
                if (!hasProp.call(ref1, attName)) continue;
                att = ref1[attName];
                attributes[attName] = att.value;
              }
              this.node(node.name, attributes);
              break;
            case NodeType.Dummy:
              this.dummy();
              break;
            case NodeType.Raw:
              this.raw(node.value);
              break;
            case NodeType.Text:
              this.text(node.value);
              break;
            case NodeType.ProcessingInstruction:
              this.instruction(node.target, node.value);
              break;
            default:
              throw new Error("This XML node type is not supported in a JS object: " + node.constructor.name);
          }
          ref2 = node.children;
          for (i3 = 0, len = ref2.length; i3 < len; i3++) {
            child = ref2[i3];
            this.createChildNode(child);
            if (child.type === NodeType.Element) {
              this.up();
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.dummy = function() {
          return this;
        };
        XMLDocumentCB2.prototype.node = function(name, attributes, text) {
          var ref1;
          if (name == null) {
            throw new Error("Missing node name.");
          }
          if (this.root && this.currentLevel === -1) {
            throw new Error("Document can only have one root node. " + this.debugInfo(name));
          }
          this.openCurrent();
          name = getValue(name);
          if (attributes == null) {
            attributes = {};
          }
          attributes = getValue(attributes);
          if (!isObject2(attributes)) {
            ref1 = [attributes, text], text = ref1[0], attributes = ref1[1];
          }
          this.currentNode = new XMLElement(this, name, attributes);
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          if (text != null) {
            this.text(text);
          }
          return this;
        };
        XMLDocumentCB2.prototype.element = function(name, attributes, text) {
          var child, i3, len, oldValidationFlag, ref1, root;
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            this.dtdElement.apply(this, arguments);
          } else {
            if (Array.isArray(name) || isObject2(name) || isFunction2(name)) {
              oldValidationFlag = this.options.noValidation;
              this.options.noValidation = true;
              root = new XMLDocument(this.options).element("TEMP_ROOT");
              root.element(name);
              this.options.noValidation = oldValidationFlag;
              ref1 = root.children;
              for (i3 = 0, len = ref1.length; i3 < len; i3++) {
                child = ref1[i3];
                this.createChildNode(child);
                if (child.type === NodeType.Element) {
                  this.up();
                }
              }
            } else {
              this.node(name, attributes, text);
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.attribute = function(name, value) {
          var attName, attValue;
          if (!this.currentNode || this.currentNode.children) {
            throw new Error("att() can only be used immediately after an ele() call in callback mode. " + this.debugInfo(name));
          }
          if (name != null) {
            name = getValue(name);
          }
          if (isObject2(name)) {
            for (attName in name) {
              if (!hasProp.call(name, attName)) continue;
              attValue = name[attName];
              this.attribute(attName, attValue);
            }
          } else {
            if (isFunction2(value)) {
              value = value.apply();
            }
            if (this.options.keepNullAttributes && value == null) {
              this.currentNode.attribs[name] = new XMLAttribute(this, name, "");
            } else if (value != null) {
              this.currentNode.attribs[name] = new XMLAttribute(this, name, value);
            }
          }
          return this;
        };
        XMLDocumentCB2.prototype.text = function(value) {
          var node;
          this.openCurrent();
          node = new XMLText(this, value);
          this.onData(this.writer.text(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.cdata = function(value) {
          var node;
          this.openCurrent();
          node = new XMLCData(this, value);
          this.onData(this.writer.cdata(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.comment = function(value) {
          var node;
          this.openCurrent();
          node = new XMLComment(this, value);
          this.onData(this.writer.comment(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.raw = function(value) {
          var node;
          this.openCurrent();
          node = new XMLRaw(this, value);
          this.onData(this.writer.raw(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.instruction = function(target, value) {
          var i3, insTarget, insValue, len, node;
          this.openCurrent();
          if (target != null) {
            target = getValue(target);
          }
          if (value != null) {
            value = getValue(value);
          }
          if (Array.isArray(target)) {
            for (i3 = 0, len = target.length; i3 < len; i3++) {
              insTarget = target[i3];
              this.instruction(insTarget);
            }
          } else if (isObject2(target)) {
            for (insTarget in target) {
              if (!hasProp.call(target, insTarget)) continue;
              insValue = target[insTarget];
              this.instruction(insTarget, insValue);
            }
          } else {
            if (isFunction2(value)) {
              value = value.apply();
            }
            node = new XMLProcessingInstruction(this, target, value);
            this.onData(this.writer.processingInstruction(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          }
          return this;
        };
        XMLDocumentCB2.prototype.declaration = function(version, encoding, standalone) {
          var node;
          this.openCurrent();
          if (this.documentStarted) {
            throw new Error("declaration() must be the first node.");
          }
          node = new XMLDeclaration(this, version, encoding, standalone);
          this.onData(this.writer.declaration(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.doctype = function(root, pubID, sysID) {
          this.openCurrent();
          if (root == null) {
            throw new Error("Missing root node name.");
          }
          if (this.root) {
            throw new Error("dtd() must come before the root node.");
          }
          this.currentNode = new XMLDocType(this, pubID, sysID);
          this.currentNode.rootNodeName = root;
          this.currentNode.children = false;
          this.currentLevel++;
          this.openTags[this.currentLevel] = this.currentNode;
          return this;
        };
        XMLDocumentCB2.prototype.dtdElement = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDElement(this, name, value);
          this.onData(this.writer.dtdElement(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.attList = function(elementName, attributeName, attributeType, defaultValueType, defaultValue) {
          var node;
          this.openCurrent();
          node = new XMLDTDAttList(this, elementName, attributeName, attributeType, defaultValueType, defaultValue);
          this.onData(this.writer.dtdAttList(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.entity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, false, name, value);
          this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.pEntity = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDEntity(this, true, name, value);
          this.onData(this.writer.dtdEntity(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.notation = function(name, value) {
          var node;
          this.openCurrent();
          node = new XMLDTDNotation(this, name, value);
          this.onData(this.writer.dtdNotation(node, this.writerOptions, this.currentLevel + 1), this.currentLevel + 1);
          return this;
        };
        XMLDocumentCB2.prototype.up = function() {
          if (this.currentLevel < 0) {
            throw new Error("The document node has no parent.");
          }
          if (this.currentNode) {
            if (this.currentNode.children) {
              this.closeNode(this.currentNode);
            } else {
              this.openNode(this.currentNode);
            }
            this.currentNode = null;
          } else {
            this.closeNode(this.openTags[this.currentLevel]);
          }
          delete this.openTags[this.currentLevel];
          this.currentLevel--;
          return this;
        };
        XMLDocumentCB2.prototype.end = function() {
          while (this.currentLevel >= 0) {
            this.up();
          }
          return this.onEnd();
        };
        XMLDocumentCB2.prototype.openCurrent = function() {
          if (this.currentNode) {
            this.currentNode.children = true;
            return this.openNode(this.currentNode);
          }
        };
        XMLDocumentCB2.prototype.openNode = function(node) {
          var att, chunk, name, ref1;
          if (!node.isOpen) {
            if (!this.root && this.currentLevel === 0 && node.type === NodeType.Element) {
              this.root = node;
            }
            chunk = "";
            if (node.type === NodeType.Element) {
              this.writerOptions.state = WriterState.OpenTag;
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<" + node.name;
              ref1 = node.attribs;
              for (name in ref1) {
                if (!hasProp.call(ref1, name)) continue;
                att = ref1[name];
                chunk += this.writer.attribute(att, this.writerOptions, this.currentLevel);
              }
              chunk += (node.children ? ">" : "/>") + this.writer.endline(node, this.writerOptions, this.currentLevel);
              this.writerOptions.state = WriterState.InsideTag;
            } else {
              this.writerOptions.state = WriterState.OpenTag;
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "<!DOCTYPE " + node.rootNodeName;
              if (node.pubID && node.sysID) {
                chunk += ' PUBLIC "' + node.pubID + '" "' + node.sysID + '"';
              } else if (node.sysID) {
                chunk += ' SYSTEM "' + node.sysID + '"';
              }
              if (node.children) {
                chunk += " [";
                this.writerOptions.state = WriterState.InsideTag;
              } else {
                this.writerOptions.state = WriterState.CloseTag;
                chunk += ">";
              }
              chunk += this.writer.endline(node, this.writerOptions, this.currentLevel);
            }
            this.onData(chunk, this.currentLevel);
            return node.isOpen = true;
          }
        };
        XMLDocumentCB2.prototype.closeNode = function(node) {
          var chunk;
          if (!node.isClosed) {
            chunk = "";
            this.writerOptions.state = WriterState.CloseTag;
            if (node.type === NodeType.Element) {
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "</" + node.name + ">" + this.writer.endline(node, this.writerOptions, this.currentLevel);
            } else {
              chunk = this.writer.indent(node, this.writerOptions, this.currentLevel) + "]>" + this.writer.endline(node, this.writerOptions, this.currentLevel);
            }
            this.writerOptions.state = WriterState.None;
            this.onData(chunk, this.currentLevel);
            return node.isClosed = true;
          }
        };
        XMLDocumentCB2.prototype.onData = function(chunk, level) {
          this.documentStarted = true;
          return this.onDataCallback(chunk, level + 1);
        };
        XMLDocumentCB2.prototype.onEnd = function() {
          this.documentCompleted = true;
          return this.onEndCallback();
        };
        XMLDocumentCB2.prototype.debugInfo = function(name) {
          if (name == null) {
            return "";
          } else {
            return "node: <" + name + ">";
          }
        };
        XMLDocumentCB2.prototype.ele = function() {
          return this.element.apply(this, arguments);
        };
        XMLDocumentCB2.prototype.nod = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.txt = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.dat = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.com = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.ins = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.dec = function(version, encoding, standalone) {
          return this.declaration(version, encoding, standalone);
        };
        XMLDocumentCB2.prototype.dtd = function(root, pubID, sysID) {
          return this.doctype(root, pubID, sysID);
        };
        XMLDocumentCB2.prototype.e = function(name, attributes, text) {
          return this.element(name, attributes, text);
        };
        XMLDocumentCB2.prototype.n = function(name, attributes, text) {
          return this.node(name, attributes, text);
        };
        XMLDocumentCB2.prototype.t = function(value) {
          return this.text(value);
        };
        XMLDocumentCB2.prototype.d = function(value) {
          return this.cdata(value);
        };
        XMLDocumentCB2.prototype.c = function(value) {
          return this.comment(value);
        };
        XMLDocumentCB2.prototype.r = function(value) {
          return this.raw(value);
        };
        XMLDocumentCB2.prototype.i = function(target, value) {
          return this.instruction(target, value);
        };
        XMLDocumentCB2.prototype.att = function() {
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.a = function() {
          if (this.currentNode && this.currentNode.type === NodeType.DocType) {
            return this.attList.apply(this, arguments);
          } else {
            return this.attribute.apply(this, arguments);
          }
        };
        XMLDocumentCB2.prototype.ent = function(name, value) {
          return this.entity(name, value);
        };
        XMLDocumentCB2.prototype.pent = function(name, value) {
          return this.pEntity(name, value);
        };
        XMLDocumentCB2.prototype.not = function(name, value) {
          return this.notation(name, value);
        };
        return XMLDocumentCB2;
      }();
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/XMLStreamWriter.js
var require_XMLStreamWriter = __commonJS({
  "../../node_modules/xmlbuilder/lib/XMLStreamWriter.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, WriterState, XMLStreamWriter, XMLWriterBase, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      NodeType = require_NodeType();
      XMLWriterBase = require_XMLWriterBase();
      WriterState = require_WriterState();
      module.exports = XMLStreamWriter = function(superClass) {
        extend(XMLStreamWriter2, superClass);
        function XMLStreamWriter2(stream, options) {
          this.stream = stream;
          XMLStreamWriter2.__super__.constructor.call(this, options);
        }
        XMLStreamWriter2.prototype.endline = function(node, options, level) {
          if (node.isLastRootNode && options.state === WriterState.CloseTag) {
            return "";
          } else {
            return XMLStreamWriter2.__super__.endline.call(this, node, options, level);
          }
        };
        XMLStreamWriter2.prototype.document = function(doc, options) {
          var child, i3, j3, k3, len, len1, ref, ref1, results;
          ref = doc.children;
          for (i3 = j3 = 0, len = ref.length; j3 < len; i3 = ++j3) {
            child = ref[i3];
            child.isLastRootNode = i3 === doc.children.length - 1;
          }
          options = this.filterOptions(options);
          ref1 = doc.children;
          results = [];
          for (k3 = 0, len1 = ref1.length; k3 < len1; k3++) {
            child = ref1[k3];
            results.push(this.writeChildNode(child, options, 0));
          }
          return results;
        };
        XMLStreamWriter2.prototype.attribute = function(att, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.attribute.call(this, att, options, level));
        };
        XMLStreamWriter2.prototype.cdata = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.cdata.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.comment = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.comment.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.declaration = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.declaration.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.docType = function(node, options, level) {
          var child, j3, len, ref;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          this.stream.write(this.indent(node, options, level));
          this.stream.write("<!DOCTYPE " + node.root().name);
          if (node.pubID && node.sysID) {
            this.stream.write(' PUBLIC "' + node.pubID + '" "' + node.sysID + '"');
          } else if (node.sysID) {
            this.stream.write(' SYSTEM "' + node.sysID + '"');
          }
          if (node.children.length > 0) {
            this.stream.write(" [");
            this.stream.write(this.endline(node, options, level));
            options.state = WriterState.InsideTag;
            ref = node.children;
            for (j3 = 0, len = ref.length; j3 < len; j3++) {
              child = ref[j3];
              this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            this.stream.write("]");
          }
          options.state = WriterState.CloseTag;
          this.stream.write(options.spaceBeforeSlash + ">");
          this.stream.write(this.endline(node, options, level));
          options.state = WriterState.None;
          return this.closeNode(node, options, level);
        };
        XMLStreamWriter2.prototype.element = function(node, options, level) {
          var att, child, childNodeCount, firstChildNode, j3, len, name, prettySuppressed, ref, ref1;
          level || (level = 0);
          this.openNode(node, options, level);
          options.state = WriterState.OpenTag;
          this.stream.write(this.indent(node, options, level) + "<" + node.name);
          ref = node.attribs;
          for (name in ref) {
            if (!hasProp.call(ref, name)) continue;
            att = ref[name];
            this.attribute(att, options, level);
          }
          childNodeCount = node.children.length;
          firstChildNode = childNodeCount === 0 ? null : node.children[0];
          if (childNodeCount === 0 || node.children.every(function(e3) {
            return (e3.type === NodeType.Text || e3.type === NodeType.Raw) && e3.value === "";
          })) {
            if (options.allowEmpty) {
              this.stream.write(">");
              options.state = WriterState.CloseTag;
              this.stream.write("</" + node.name + ">");
            } else {
              options.state = WriterState.CloseTag;
              this.stream.write(options.spaceBeforeSlash + "/>");
            }
          } else if (options.pretty && childNodeCount === 1 && (firstChildNode.type === NodeType.Text || firstChildNode.type === NodeType.Raw) && firstChildNode.value != null) {
            this.stream.write(">");
            options.state = WriterState.InsideTag;
            options.suppressPrettyCount++;
            prettySuppressed = true;
            this.writeChildNode(firstChildNode, options, level + 1);
            options.suppressPrettyCount--;
            prettySuppressed = false;
            options.state = WriterState.CloseTag;
            this.stream.write("</" + node.name + ">");
          } else {
            this.stream.write(">" + this.endline(node, options, level));
            options.state = WriterState.InsideTag;
            ref1 = node.children;
            for (j3 = 0, len = ref1.length; j3 < len; j3++) {
              child = ref1[j3];
              this.writeChildNode(child, options, level + 1);
            }
            options.state = WriterState.CloseTag;
            this.stream.write(this.indent(node, options, level) + "</" + node.name + ">");
          }
          this.stream.write(this.endline(node, options, level));
          options.state = WriterState.None;
          return this.closeNode(node, options, level);
        };
        XMLStreamWriter2.prototype.processingInstruction = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.processingInstruction.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.raw = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.raw.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.text = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.text.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdAttList = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdAttList.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdElement = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdElement.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdEntity = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdEntity.call(this, node, options, level));
        };
        XMLStreamWriter2.prototype.dtdNotation = function(node, options, level) {
          return this.stream.write(XMLStreamWriter2.__super__.dtdNotation.call(this, node, options, level));
        };
        return XMLStreamWriter2;
      }(XMLWriterBase);
    }).call(exports);
  }
});

// ../../node_modules/xmlbuilder/lib/index.js
var require_lib2 = __commonJS({
  "../../node_modules/xmlbuilder/lib/index.js"(exports, module) {
    init_esm();
    (function() {
      var NodeType, WriterState, XMLDOMImplementation, XMLDocument, XMLDocumentCB, XMLStreamWriter, XMLStringWriter, assign, isFunction2, ref;
      ref = require_Utility(), assign = ref.assign, isFunction2 = ref.isFunction;
      XMLDOMImplementation = require_XMLDOMImplementation();
      XMLDocument = require_XMLDocument();
      XMLDocumentCB = require_XMLDocumentCB();
      XMLStringWriter = require_XMLStringWriter();
      XMLStreamWriter = require_XMLStreamWriter();
      NodeType = require_NodeType();
      WriterState = require_WriterState();
      module.exports.create = function(name, xmldec, doctype, options) {
        var doc, root;
        if (name == null) {
          throw new Error("Root element needs a name.");
        }
        options = assign({}, xmldec, doctype, options);
        doc = new XMLDocument(options);
        root = doc.element(name);
        if (!options.headless) {
          doc.declaration(options);
          if (options.pubID != null || options.sysID != null) {
            doc.dtd(options);
          }
        }
        return root;
      };
      module.exports.begin = function(options, onData, onEnd) {
        var ref1;
        if (isFunction2(options)) {
          ref1 = [options, onData], onData = ref1[0], onEnd = ref1[1];
          options = {};
        }
        if (onData) {
          return new XMLDocumentCB(options, onData, onEnd);
        } else {
          return new XMLDocument(options);
        }
      };
      module.exports.stringWriter = function(options) {
        return new XMLStringWriter(options);
      };
      module.exports.streamWriter = function(stream, options) {
        return new XMLStreamWriter(stream, options);
      };
      module.exports.implementation = new XMLDOMImplementation();
      module.exports.nodeType = NodeType;
      module.exports.writerState = WriterState;
    }).call(exports);
  }
});

// ../../node_modules/xml2js/lib/builder.js
var require_builder = __commonJS({
  "../../node_modules/xml2js/lib/builder.js"(exports) {
    init_esm();
    (function() {
      "use strict";
      var builder, defaults, escapeCDATA, requiresCDATA, wrapCDATA, hasProp = {}.hasOwnProperty;
      builder = require_lib2();
      defaults = require_defaults().defaults;
      requiresCDATA = function(entry) {
        return typeof entry === "string" && (entry.indexOf("&") >= 0 || entry.indexOf(">") >= 0 || entry.indexOf("<") >= 0);
      };
      wrapCDATA = function(entry) {
        return "<![CDATA[" + escapeCDATA(entry) + "]]>";
      };
      escapeCDATA = function(entry) {
        return entry.replace("]]>", "]]]]><![CDATA[>");
      };
      exports.Builder = function() {
        function Builder(opts) {
          var key, ref, value;
          this.options = {};
          ref = defaults["0.2"];
          for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            value = ref[key];
            this.options[key] = value;
          }
          for (key in opts) {
            if (!hasProp.call(opts, key)) continue;
            value = opts[key];
            this.options[key] = value;
          }
        }
        Builder.prototype.buildObject = function(rootObj) {
          var attrkey, charkey, render, rootElement, rootName;
          attrkey = this.options.attrkey;
          charkey = this.options.charkey;
          if (Object.keys(rootObj).length === 1 && this.options.rootName === defaults["0.2"].rootName) {
            rootName = Object.keys(rootObj)[0];
            rootObj = rootObj[rootName];
          } else {
            rootName = this.options.rootName;
          }
          render = /* @__PURE__ */ function(_this) {
            return function(element, obj) {
              var attr, child, entry, index, key, value;
              if (typeof obj !== "object") {
                if (_this.options.cdata && requiresCDATA(obj)) {
                  element.raw(wrapCDATA(obj));
                } else {
                  element.txt(obj);
                }
              } else if (Array.isArray(obj)) {
                for (index in obj) {
                  if (!hasProp.call(obj, index)) continue;
                  child = obj[index];
                  for (key in child) {
                    entry = child[key];
                    element = render(element.ele(key), entry).up();
                  }
                }
              } else {
                for (key in obj) {
                  if (!hasProp.call(obj, key)) continue;
                  child = obj[key];
                  if (key === attrkey) {
                    if (typeof child === "object") {
                      for (attr in child) {
                        value = child[attr];
                        element = element.att(attr, value);
                      }
                    }
                  } else if (key === charkey) {
                    if (_this.options.cdata && requiresCDATA(child)) {
                      element = element.raw(wrapCDATA(child));
                    } else {
                      element = element.txt(child);
                    }
                  } else if (Array.isArray(child)) {
                    for (index in child) {
                      if (!hasProp.call(child, index)) continue;
                      entry = child[index];
                      if (typeof entry === "string") {
                        if (_this.options.cdata && requiresCDATA(entry)) {
                          element = element.ele(key).raw(wrapCDATA(entry)).up();
                        } else {
                          element = element.ele(key, entry).up();
                        }
                      } else {
                        element = render(element.ele(key), entry).up();
                      }
                    }
                  } else if (typeof child === "object") {
                    element = render(element.ele(key), child).up();
                  } else {
                    if (typeof child === "string" && _this.options.cdata && requiresCDATA(child)) {
                      element = element.ele(key).raw(wrapCDATA(child)).up();
                    } else {
                      if (child == null) {
                        child = "";
                      }
                      element = element.ele(key, child.toString()).up();
                    }
                  }
                }
              }
              return element;
            };
          }(this);
          rootElement = builder.create(rootName, this.options.xmldec, this.options.doctype, {
            headless: this.options.headless,
            allowSurrogateChars: this.options.allowSurrogateChars
          });
          return render(rootElement, rootObj).end(this.options.renderOpts);
        };
        return Builder;
      }();
    }).call(exports);
  }
});

// ../../node_modules/sax/lib/sax.js
var require_sax2 = __commonJS({
  "../../node_modules/sax/lib/sax.js"(exports) {
    init_esm();
    (function(sax) {
      sax.parser = function(strict, opt) {
        return new SAXParser(strict, opt);
      };
      sax.SAXParser = SAXParser;
      sax.SAXStream = SAXStream;
      sax.createStream = createStream;
      sax.MAX_BUFFER_LENGTH = 64 * 1024;
      var buffers = [
        "comment",
        "sgmlDecl",
        "textNode",
        "tagName",
        "doctype",
        "procInstName",
        "procInstBody",
        "entity",
        "attribName",
        "attribValue",
        "cdata",
        "script"
      ];
      sax.EVENTS = [
        "text",
        "processinginstruction",
        "sgmldeclaration",
        "doctype",
        "comment",
        "opentagstart",
        "attribute",
        "opentag",
        "closetag",
        "opencdata",
        "cdata",
        "closecdata",
        "error",
        "end",
        "ready",
        "script",
        "opennamespace",
        "closenamespace"
      ];
      function SAXParser(strict, opt) {
        if (!(this instanceof SAXParser)) {
          return new SAXParser(strict, opt);
        }
        var parser = this;
        clearBuffers(parser);
        parser.q = parser.c = "";
        parser.bufferCheckPosition = sax.MAX_BUFFER_LENGTH;
        parser.opt = opt || {};
        parser.opt.lowercase = parser.opt.lowercase || parser.opt.lowercasetags;
        parser.looseCase = parser.opt.lowercase ? "toLowerCase" : "toUpperCase";
        parser.tags = [];
        parser.closed = parser.closedRoot = parser.sawRoot = false;
        parser.tag = parser.error = null;
        parser.strict = !!strict;
        parser.noscript = !!(strict || parser.opt.noscript);
        parser.state = S3.BEGIN;
        parser.strictEntities = parser.opt.strictEntities;
        parser.ENTITIES = parser.strictEntities ? Object.create(sax.XML_ENTITIES) : Object.create(sax.ENTITIES);
        parser.attribList = [];
        if (parser.opt.xmlns) {
          parser.ns = Object.create(rootNS);
        }
        if (parser.opt.unquotedAttributeValues === void 0) {
          parser.opt.unquotedAttributeValues = !strict;
        }
        parser.trackPosition = parser.opt.position !== false;
        if (parser.trackPosition) {
          parser.position = parser.line = parser.column = 0;
        }
        emit(parser, "onready");
      }
      if (!Object.create) {
        Object.create = function(o3) {
          function F2() {
          }
          F2.prototype = o3;
          var newf = new F2();
          return newf;
        };
      }
      if (!Object.keys) {
        Object.keys = function(o3) {
          var a2 = [];
          for (var i3 in o3) if (o3.hasOwnProperty(i3)) a2.push(i3);
          return a2;
        };
      }
      function checkBufferLength(parser) {
        var maxAllowed = Math.max(sax.MAX_BUFFER_LENGTH, 10);
        var maxActual = 0;
        for (var i3 = 0, l2 = buffers.length; i3 < l2; i3++) {
          var len = parser[buffers[i3]].length;
          if (len > maxAllowed) {
            switch (buffers[i3]) {
              case "textNode":
                closeText(parser);
                break;
              case "cdata":
                emitNode(parser, "oncdata", parser.cdata);
                parser.cdata = "";
                break;
              case "script":
                emitNode(parser, "onscript", parser.script);
                parser.script = "";
                break;
              default:
                error(parser, "Max buffer length exceeded: " + buffers[i3]);
            }
          }
          maxActual = Math.max(maxActual, len);
        }
        var m3 = sax.MAX_BUFFER_LENGTH - maxActual;
        parser.bufferCheckPosition = m3 + parser.position;
      }
      function clearBuffers(parser) {
        for (var i3 = 0, l2 = buffers.length; i3 < l2; i3++) {
          parser[buffers[i3]] = "";
        }
      }
      function flushBuffers(parser) {
        closeText(parser);
        if (parser.cdata !== "") {
          emitNode(parser, "oncdata", parser.cdata);
          parser.cdata = "";
        }
        if (parser.script !== "") {
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
      }
      SAXParser.prototype = {
        end: function() {
          end(this);
        },
        write,
        resume: function() {
          this.error = null;
          return this;
        },
        close: function() {
          return this.write(null);
        },
        flush: function() {
          flushBuffers(this);
        }
      };
      var Stream3;
      try {
        Stream3 = __require("stream").Stream;
      } catch (ex) {
        Stream3 = function() {
        };
      }
      if (!Stream3) Stream3 = function() {
      };
      var streamWraps = sax.EVENTS.filter(function(ev) {
        return ev !== "error" && ev !== "end";
      });
      function createStream(strict, opt) {
        return new SAXStream(strict, opt);
      }
      function SAXStream(strict, opt) {
        if (!(this instanceof SAXStream)) {
          return new SAXStream(strict, opt);
        }
        Stream3.apply(this);
        this._parser = new SAXParser(strict, opt);
        this.writable = true;
        this.readable = true;
        var me2 = this;
        this._parser.onend = function() {
          me2.emit("end");
        };
        this._parser.onerror = function(er2) {
          me2.emit("error", er2);
          me2._parser.error = null;
        };
        this._decoder = null;
        streamWraps.forEach(function(ev) {
          Object.defineProperty(me2, "on" + ev, {
            get: function() {
              return me2._parser["on" + ev];
            },
            set: function(h3) {
              if (!h3) {
                me2.removeAllListeners(ev);
                me2._parser["on" + ev] = h3;
                return h3;
              }
              me2.on(ev, h3);
            },
            enumerable: true,
            configurable: false
          });
        });
      }
      SAXStream.prototype = Object.create(Stream3.prototype, {
        constructor: {
          value: SAXStream
        }
      });
      SAXStream.prototype.write = function(data) {
        if (typeof Buffer === "function" && typeof Buffer.isBuffer === "function" && Buffer.isBuffer(data)) {
          if (!this._decoder) {
            var SD = __require("string_decoder").StringDecoder;
            this._decoder = new SD("utf8");
          }
          data = this._decoder.write(data);
        }
        this._parser.write(data.toString());
        this.emit("data", data);
        return true;
      };
      SAXStream.prototype.end = function(chunk) {
        if (chunk && chunk.length) {
          this.write(chunk);
        }
        this._parser.end();
        return true;
      };
      SAXStream.prototype.on = function(ev, handler) {
        var me2 = this;
        if (!me2._parser["on" + ev] && streamWraps.indexOf(ev) !== -1) {
          me2._parser["on" + ev] = function() {
            var args = arguments.length === 1 ? [arguments[0]] : Array.apply(null, arguments);
            args.splice(0, 0, ev);
            me2.emit.apply(me2, args);
          };
        }
        return Stream3.prototype.on.call(me2, ev, handler);
      };
      var CDATA = "[CDATA[";
      var DOCTYPE = "DOCTYPE";
      var XML_NAMESPACE = "http://www.w3.org/XML/1998/namespace";
      var XMLNS_NAMESPACE = "http://www.w3.org/2000/xmlns/";
      var rootNS = { xml: XML_NAMESPACE, xmlns: XMLNS_NAMESPACE };
      var nameStart = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var nameBody = /[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      var entityStart = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/;
      var entityBody = /[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;
      function isWhitespace(c3) {
        return c3 === " " || c3 === "\n" || c3 === "\r" || c3 === "	";
      }
      function isQuote(c3) {
        return c3 === '"' || c3 === "'";
      }
      function isAttribEnd(c3) {
        return c3 === ">" || isWhitespace(c3);
      }
      function isMatch(regex, c3) {
        return regex.test(c3);
      }
      function notMatch(regex, c3) {
        return !isMatch(regex, c3);
      }
      var S3 = 0;
      sax.STATE = {
        BEGIN: S3++,
        // leading byte order mark or whitespace
        BEGIN_WHITESPACE: S3++,
        // leading whitespace
        TEXT: S3++,
        // general stuff
        TEXT_ENTITY: S3++,
        // &amp and such.
        OPEN_WAKA: S3++,
        // <
        SGML_DECL: S3++,
        // <!BLARG
        SGML_DECL_QUOTED: S3++,
        // <!BLARG foo "bar
        DOCTYPE: S3++,
        // <!DOCTYPE
        DOCTYPE_QUOTED: S3++,
        // <!DOCTYPE "//blah
        DOCTYPE_DTD: S3++,
        // <!DOCTYPE "//blah" [ ...
        DOCTYPE_DTD_QUOTED: S3++,
        // <!DOCTYPE "//blah" [ "foo
        COMMENT_STARTING: S3++,
        // <!-
        COMMENT: S3++,
        // <!--
        COMMENT_ENDING: S3++,
        // <!-- blah -
        COMMENT_ENDED: S3++,
        // <!-- blah --
        CDATA: S3++,
        // <![CDATA[ something
        CDATA_ENDING: S3++,
        // ]
        CDATA_ENDING_2: S3++,
        // ]]
        PROC_INST: S3++,
        // <?hi
        PROC_INST_BODY: S3++,
        // <?hi there
        PROC_INST_ENDING: S3++,
        // <?hi "there" ?
        OPEN_TAG: S3++,
        // <strong
        OPEN_TAG_SLASH: S3++,
        // <strong /
        ATTRIB: S3++,
        // <a
        ATTRIB_NAME: S3++,
        // <a foo
        ATTRIB_NAME_SAW_WHITE: S3++,
        // <a foo _
        ATTRIB_VALUE: S3++,
        // <a foo=
        ATTRIB_VALUE_QUOTED: S3++,
        // <a foo="bar
        ATTRIB_VALUE_CLOSED: S3++,
        // <a foo="bar"
        ATTRIB_VALUE_UNQUOTED: S3++,
        // <a foo=bar
        ATTRIB_VALUE_ENTITY_Q: S3++,
        // <foo bar="&quot;"
        ATTRIB_VALUE_ENTITY_U: S3++,
        // <foo bar=&quot
        CLOSE_TAG: S3++,
        // </a
        CLOSE_TAG_SAW_WHITE: S3++,
        // </a   >
        SCRIPT: S3++,
        // <script> ...
        SCRIPT_ENDING: S3++
        // <script> ... <
      };
      sax.XML_ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'"
      };
      sax.ENTITIES = {
        "amp": "&",
        "gt": ">",
        "lt": "<",
        "quot": '"',
        "apos": "'",
        "AElig": 198,
        "Aacute": 193,
        "Acirc": 194,
        "Agrave": 192,
        "Aring": 197,
        "Atilde": 195,
        "Auml": 196,
        "Ccedil": 199,
        "ETH": 208,
        "Eacute": 201,
        "Ecirc": 202,
        "Egrave": 200,
        "Euml": 203,
        "Iacute": 205,
        "Icirc": 206,
        "Igrave": 204,
        "Iuml": 207,
        "Ntilde": 209,
        "Oacute": 211,
        "Ocirc": 212,
        "Ograve": 210,
        "Oslash": 216,
        "Otilde": 213,
        "Ouml": 214,
        "THORN": 222,
        "Uacute": 218,
        "Ucirc": 219,
        "Ugrave": 217,
        "Uuml": 220,
        "Yacute": 221,
        "aacute": 225,
        "acirc": 226,
        "aelig": 230,
        "agrave": 224,
        "aring": 229,
        "atilde": 227,
        "auml": 228,
        "ccedil": 231,
        "eacute": 233,
        "ecirc": 234,
        "egrave": 232,
        "eth": 240,
        "euml": 235,
        "iacute": 237,
        "icirc": 238,
        "igrave": 236,
        "iuml": 239,
        "ntilde": 241,
        "oacute": 243,
        "ocirc": 244,
        "ograve": 242,
        "oslash": 248,
        "otilde": 245,
        "ouml": 246,
        "szlig": 223,
        "thorn": 254,
        "uacute": 250,
        "ucirc": 251,
        "ugrave": 249,
        "uuml": 252,
        "yacute": 253,
        "yuml": 255,
        "copy": 169,
        "reg": 174,
        "nbsp": 160,
        "iexcl": 161,
        "cent": 162,
        "pound": 163,
        "curren": 164,
        "yen": 165,
        "brvbar": 166,
        "sect": 167,
        "uml": 168,
        "ordf": 170,
        "laquo": 171,
        "not": 172,
        "shy": 173,
        "macr": 175,
        "deg": 176,
        "plusmn": 177,
        "sup1": 185,
        "sup2": 178,
        "sup3": 179,
        "acute": 180,
        "micro": 181,
        "para": 182,
        "middot": 183,
        "cedil": 184,
        "ordm": 186,
        "raquo": 187,
        "frac14": 188,
        "frac12": 189,
        "frac34": 190,
        "iquest": 191,
        "times": 215,
        "divide": 247,
        "OElig": 338,
        "oelig": 339,
        "Scaron": 352,
        "scaron": 353,
        "Yuml": 376,
        "fnof": 402,
        "circ": 710,
        "tilde": 732,
        "Alpha": 913,
        "Beta": 914,
        "Gamma": 915,
        "Delta": 916,
        "Epsilon": 917,
        "Zeta": 918,
        "Eta": 919,
        "Theta": 920,
        "Iota": 921,
        "Kappa": 922,
        "Lambda": 923,
        "Mu": 924,
        "Nu": 925,
        "Xi": 926,
        "Omicron": 927,
        "Pi": 928,
        "Rho": 929,
        "Sigma": 931,
        "Tau": 932,
        "Upsilon": 933,
        "Phi": 934,
        "Chi": 935,
        "Psi": 936,
        "Omega": 937,
        "alpha": 945,
        "beta": 946,
        "gamma": 947,
        "delta": 948,
        "epsilon": 949,
        "zeta": 950,
        "eta": 951,
        "theta": 952,
        "iota": 953,
        "kappa": 954,
        "lambda": 955,
        "mu": 956,
        "nu": 957,
        "xi": 958,
        "omicron": 959,
        "pi": 960,
        "rho": 961,
        "sigmaf": 962,
        "sigma": 963,
        "tau": 964,
        "upsilon": 965,
        "phi": 966,
        "chi": 967,
        "psi": 968,
        "omega": 969,
        "thetasym": 977,
        "upsih": 978,
        "piv": 982,
        "ensp": 8194,
        "emsp": 8195,
        "thinsp": 8201,
        "zwnj": 8204,
        "zwj": 8205,
        "lrm": 8206,
        "rlm": 8207,
        "ndash": 8211,
        "mdash": 8212,
        "lsquo": 8216,
        "rsquo": 8217,
        "sbquo": 8218,
        "ldquo": 8220,
        "rdquo": 8221,
        "bdquo": 8222,
        "dagger": 8224,
        "Dagger": 8225,
        "bull": 8226,
        "hellip": 8230,
        "permil": 8240,
        "prime": 8242,
        "Prime": 8243,
        "lsaquo": 8249,
        "rsaquo": 8250,
        "oline": 8254,
        "frasl": 8260,
        "euro": 8364,
        "image": 8465,
        "weierp": 8472,
        "real": 8476,
        "trade": 8482,
        "alefsym": 8501,
        "larr": 8592,
        "uarr": 8593,
        "rarr": 8594,
        "darr": 8595,
        "harr": 8596,
        "crarr": 8629,
        "lArr": 8656,
        "uArr": 8657,
        "rArr": 8658,
        "dArr": 8659,
        "hArr": 8660,
        "forall": 8704,
        "part": 8706,
        "exist": 8707,
        "empty": 8709,
        "nabla": 8711,
        "isin": 8712,
        "notin": 8713,
        "ni": 8715,
        "prod": 8719,
        "sum": 8721,
        "minus": 8722,
        "lowast": 8727,
        "radic": 8730,
        "prop": 8733,
        "infin": 8734,
        "ang": 8736,
        "and": 8743,
        "or": 8744,
        "cap": 8745,
        "cup": 8746,
        "int": 8747,
        "there4": 8756,
        "sim": 8764,
        "cong": 8773,
        "asymp": 8776,
        "ne": 8800,
        "equiv": 8801,
        "le": 8804,
        "ge": 8805,
        "sub": 8834,
        "sup": 8835,
        "nsub": 8836,
        "sube": 8838,
        "supe": 8839,
        "oplus": 8853,
        "otimes": 8855,
        "perp": 8869,
        "sdot": 8901,
        "lceil": 8968,
        "rceil": 8969,
        "lfloor": 8970,
        "rfloor": 8971,
        "lang": 9001,
        "rang": 9002,
        "loz": 9674,
        "spades": 9824,
        "clubs": 9827,
        "hearts": 9829,
        "diams": 9830
      };
      Object.keys(sax.ENTITIES).forEach(function(key) {
        var e3 = sax.ENTITIES[key];
        var s4 = typeof e3 === "number" ? String.fromCharCode(e3) : e3;
        sax.ENTITIES[key] = s4;
      });
      for (var s3 in sax.STATE) {
        sax.STATE[sax.STATE[s3]] = s3;
      }
      S3 = sax.STATE;
      function emit(parser, event, data) {
        parser[event] && parser[event](data);
      }
      function emitNode(parser, nodeType, data) {
        if (parser.textNode) closeText(parser);
        emit(parser, nodeType, data);
      }
      function closeText(parser) {
        parser.textNode = textopts(parser.opt, parser.textNode);
        if (parser.textNode) emit(parser, "ontext", parser.textNode);
        parser.textNode = "";
      }
      function textopts(opt, text) {
        if (opt.trim) text = text.trim();
        if (opt.normalize) text = text.replace(/\s+/g, " ");
        return text;
      }
      function error(parser, er2) {
        closeText(parser);
        if (parser.trackPosition) {
          er2 += "\nLine: " + parser.line + "\nColumn: " + parser.column + "\nChar: " + parser.c;
        }
        er2 = new Error(er2);
        parser.error = er2;
        emit(parser, "onerror", er2);
        return parser;
      }
      function end(parser) {
        if (parser.sawRoot && !parser.closedRoot) strictFail(parser, "Unclosed root tag");
        if (parser.state !== S3.BEGIN && parser.state !== S3.BEGIN_WHITESPACE && parser.state !== S3.TEXT) {
          error(parser, "Unexpected end");
        }
        closeText(parser);
        parser.c = "";
        parser.closed = true;
        emit(parser, "onend");
        SAXParser.call(parser, parser.strict, parser.opt);
        return parser;
      }
      function strictFail(parser, message) {
        if (typeof parser !== "object" || !(parser instanceof SAXParser)) {
          throw new Error("bad call to strictFail");
        }
        if (parser.strict) {
          error(parser, message);
        }
      }
      function newTag(parser) {
        if (!parser.strict) parser.tagName = parser.tagName[parser.looseCase]();
        var parent = parser.tags[parser.tags.length - 1] || parser;
        var tag = parser.tag = { name: parser.tagName, attributes: {} };
        if (parser.opt.xmlns) {
          tag.ns = parent.ns;
        }
        parser.attribList.length = 0;
        emitNode(parser, "onopentagstart", tag);
      }
      function qname(name, attribute) {
        var i3 = name.indexOf(":");
        var qualName = i3 < 0 ? ["", name] : name.split(":");
        var prefix = qualName[0];
        var local = qualName[1];
        if (attribute && name === "xmlns") {
          prefix = "xmlns";
          local = "";
        }
        return { prefix, local };
      }
      function attrib(parser) {
        if (!parser.strict) {
          parser.attribName = parser.attribName[parser.looseCase]();
        }
        if (parser.attribList.indexOf(parser.attribName) !== -1 || parser.tag.attributes.hasOwnProperty(parser.attribName)) {
          parser.attribName = parser.attribValue = "";
          return;
        }
        if (parser.opt.xmlns) {
          var qn = qname(parser.attribName, true);
          var prefix = qn.prefix;
          var local = qn.local;
          if (prefix === "xmlns") {
            if (local === "xml" && parser.attribValue !== XML_NAMESPACE) {
              strictFail(
                parser,
                "xml: prefix must be bound to " + XML_NAMESPACE + "\nActual: " + parser.attribValue
              );
            } else if (local === "xmlns" && parser.attribValue !== XMLNS_NAMESPACE) {
              strictFail(
                parser,
                "xmlns: prefix must be bound to " + XMLNS_NAMESPACE + "\nActual: " + parser.attribValue
              );
            } else {
              var tag = parser.tag;
              var parent = parser.tags[parser.tags.length - 1] || parser;
              if (tag.ns === parent.ns) {
                tag.ns = Object.create(parent.ns);
              }
              tag.ns[local] = parser.attribValue;
            }
          }
          parser.attribList.push([parser.attribName, parser.attribValue]);
        } else {
          parser.tag.attributes[parser.attribName] = parser.attribValue;
          emitNode(parser, "onattribute", {
            name: parser.attribName,
            value: parser.attribValue
          });
        }
        parser.attribName = parser.attribValue = "";
      }
      function openTag(parser, selfClosing) {
        if (parser.opt.xmlns) {
          var tag = parser.tag;
          var qn = qname(parser.tagName);
          tag.prefix = qn.prefix;
          tag.local = qn.local;
          tag.uri = tag.ns[qn.prefix] || "";
          if (tag.prefix && !tag.uri) {
            strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(parser.tagName));
            tag.uri = qn.prefix;
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (tag.ns && parent.ns !== tag.ns) {
            Object.keys(tag.ns).forEach(function(p3) {
              emitNode(parser, "onopennamespace", {
                prefix: p3,
                uri: tag.ns[p3]
              });
            });
          }
          for (var i3 = 0, l2 = parser.attribList.length; i3 < l2; i3++) {
            var nv = parser.attribList[i3];
            var name = nv[0];
            var value = nv[1];
            var qualName = qname(name, true);
            var prefix = qualName.prefix;
            var local = qualName.local;
            var uri = prefix === "" ? "" : tag.ns[prefix] || "";
            var a2 = {
              name,
              value,
              prefix,
              local,
              uri
            };
            if (prefix && prefix !== "xmlns" && !uri) {
              strictFail(parser, "Unbound namespace prefix: " + JSON.stringify(prefix));
              a2.uri = prefix;
            }
            parser.tag.attributes[name] = a2;
            emitNode(parser, "onattribute", a2);
          }
          parser.attribList.length = 0;
        }
        parser.tag.isSelfClosing = !!selfClosing;
        parser.sawRoot = true;
        parser.tags.push(parser.tag);
        emitNode(parser, "onopentag", parser.tag);
        if (!selfClosing) {
          if (!parser.noscript && parser.tagName.toLowerCase() === "script") {
            parser.state = S3.SCRIPT;
          } else {
            parser.state = S3.TEXT;
          }
          parser.tag = null;
          parser.tagName = "";
        }
        parser.attribName = parser.attribValue = "";
        parser.attribList.length = 0;
      }
      function closeTag(parser) {
        if (!parser.tagName) {
          strictFail(parser, "Weird empty close tag.");
          parser.textNode += "</>";
          parser.state = S3.TEXT;
          return;
        }
        if (parser.script) {
          if (parser.tagName !== "script") {
            parser.script += "</" + parser.tagName + ">";
            parser.tagName = "";
            parser.state = S3.SCRIPT;
            return;
          }
          emitNode(parser, "onscript", parser.script);
          parser.script = "";
        }
        var t3 = parser.tags.length;
        var tagName = parser.tagName;
        if (!parser.strict) {
          tagName = tagName[parser.looseCase]();
        }
        var closeTo = tagName;
        while (t3--) {
          var close = parser.tags[t3];
          if (close.name !== closeTo) {
            strictFail(parser, "Unexpected close tag");
          } else {
            break;
          }
        }
        if (t3 < 0) {
          strictFail(parser, "Unmatched closing tag: " + parser.tagName);
          parser.textNode += "</" + parser.tagName + ">";
          parser.state = S3.TEXT;
          return;
        }
        parser.tagName = tagName;
        var s4 = parser.tags.length;
        while (s4-- > t3) {
          var tag = parser.tag = parser.tags.pop();
          parser.tagName = parser.tag.name;
          emitNode(parser, "onclosetag", parser.tagName);
          var x3 = {};
          for (var i3 in tag.ns) {
            x3[i3] = tag.ns[i3];
          }
          var parent = parser.tags[parser.tags.length - 1] || parser;
          if (parser.opt.xmlns && tag.ns !== parent.ns) {
            Object.keys(tag.ns).forEach(function(p3) {
              var n3 = tag.ns[p3];
              emitNode(parser, "onclosenamespace", { prefix: p3, uri: n3 });
            });
          }
        }
        if (t3 === 0) parser.closedRoot = true;
        parser.tagName = parser.attribValue = parser.attribName = "";
        parser.attribList.length = 0;
        parser.state = S3.TEXT;
      }
      function parseEntity(parser) {
        var entity = parser.entity;
        var entityLC = entity.toLowerCase();
        var num;
        var numStr = "";
        if (parser.ENTITIES[entity]) {
          return parser.ENTITIES[entity];
        }
        if (parser.ENTITIES[entityLC]) {
          return parser.ENTITIES[entityLC];
        }
        entity = entityLC;
        if (entity.charAt(0) === "#") {
          if (entity.charAt(1) === "x") {
            entity = entity.slice(2);
            num = parseInt(entity, 16);
            numStr = num.toString(16);
          } else {
            entity = entity.slice(1);
            num = parseInt(entity, 10);
            numStr = num.toString(10);
          }
        }
        entity = entity.replace(/^0+/, "");
        if (isNaN(num) || numStr.toLowerCase() !== entity) {
          strictFail(parser, "Invalid character entity");
          return "&" + parser.entity + ";";
        }
        return String.fromCodePoint(num);
      }
      function beginWhiteSpace(parser, c3) {
        if (c3 === "<") {
          parser.state = S3.OPEN_WAKA;
          parser.startTagPosition = parser.position;
        } else if (!isWhitespace(c3)) {
          strictFail(parser, "Non-whitespace before first tag.");
          parser.textNode = c3;
          parser.state = S3.TEXT;
        }
      }
      function charAt(chunk, i3) {
        var result = "";
        if (i3 < chunk.length) {
          result = chunk.charAt(i3);
        }
        return result;
      }
      function write(chunk) {
        var parser = this;
        if (this.error) {
          throw this.error;
        }
        if (parser.closed) {
          return error(
            parser,
            "Cannot write after close. Assign an onready handler."
          );
        }
        if (chunk === null) {
          return end(parser);
        }
        if (typeof chunk === "object") {
          chunk = chunk.toString();
        }
        var i3 = 0;
        var c3 = "";
        while (true) {
          c3 = charAt(chunk, i3++);
          parser.c = c3;
          if (!c3) {
            break;
          }
          if (parser.trackPosition) {
            parser.position++;
            if (c3 === "\n") {
              parser.line++;
              parser.column = 0;
            } else {
              parser.column++;
            }
          }
          switch (parser.state) {
            case S3.BEGIN:
              parser.state = S3.BEGIN_WHITESPACE;
              if (c3 === "\uFEFF") {
                continue;
              }
              beginWhiteSpace(parser, c3);
              continue;
            case S3.BEGIN_WHITESPACE:
              beginWhiteSpace(parser, c3);
              continue;
            case S3.TEXT:
              if (parser.sawRoot && !parser.closedRoot) {
                var starti = i3 - 1;
                while (c3 && c3 !== "<" && c3 !== "&") {
                  c3 = charAt(chunk, i3++);
                  if (c3 && parser.trackPosition) {
                    parser.position++;
                    if (c3 === "\n") {
                      parser.line++;
                      parser.column = 0;
                    } else {
                      parser.column++;
                    }
                  }
                }
                parser.textNode += chunk.substring(starti, i3 - 1);
              }
              if (c3 === "<" && !(parser.sawRoot && parser.closedRoot && !parser.strict)) {
                parser.state = S3.OPEN_WAKA;
                parser.startTagPosition = parser.position;
              } else {
                if (!isWhitespace(c3) && (!parser.sawRoot || parser.closedRoot)) {
                  strictFail(parser, "Text data outside of root node.");
                }
                if (c3 === "&") {
                  parser.state = S3.TEXT_ENTITY;
                } else {
                  parser.textNode += c3;
                }
              }
              continue;
            case S3.SCRIPT:
              if (c3 === "<") {
                parser.state = S3.SCRIPT_ENDING;
              } else {
                parser.script += c3;
              }
              continue;
            case S3.SCRIPT_ENDING:
              if (c3 === "/") {
                parser.state = S3.CLOSE_TAG;
              } else {
                parser.script += "<" + c3;
                parser.state = S3.SCRIPT;
              }
              continue;
            case S3.OPEN_WAKA:
              if (c3 === "!") {
                parser.state = S3.SGML_DECL;
                parser.sgmlDecl = "";
              } else if (isWhitespace(c3)) {
              } else if (isMatch(nameStart, c3)) {
                parser.state = S3.OPEN_TAG;
                parser.tagName = c3;
              } else if (c3 === "/") {
                parser.state = S3.CLOSE_TAG;
                parser.tagName = "";
              } else if (c3 === "?") {
                parser.state = S3.PROC_INST;
                parser.procInstName = parser.procInstBody = "";
              } else {
                strictFail(parser, "Unencoded <");
                if (parser.startTagPosition + 1 < parser.position) {
                  var pad = parser.position - parser.startTagPosition;
                  c3 = new Array(pad).join(" ") + c3;
                }
                parser.textNode += "<" + c3;
                parser.state = S3.TEXT;
              }
              continue;
            case S3.SGML_DECL:
              if (parser.sgmlDecl + c3 === "--") {
                parser.state = S3.COMMENT;
                parser.comment = "";
                parser.sgmlDecl = "";
                continue;
              }
              if (parser.doctype && parser.doctype !== true && parser.sgmlDecl) {
                parser.state = S3.DOCTYPE_DTD;
                parser.doctype += "<!" + parser.sgmlDecl + c3;
                parser.sgmlDecl = "";
              } else if ((parser.sgmlDecl + c3).toUpperCase() === CDATA) {
                emitNode(parser, "onopencdata");
                parser.state = S3.CDATA;
                parser.sgmlDecl = "";
                parser.cdata = "";
              } else if ((parser.sgmlDecl + c3).toUpperCase() === DOCTYPE) {
                parser.state = S3.DOCTYPE;
                if (parser.doctype || parser.sawRoot) {
                  strictFail(
                    parser,
                    "Inappropriately located doctype declaration"
                  );
                }
                parser.doctype = "";
                parser.sgmlDecl = "";
              } else if (c3 === ">") {
                emitNode(parser, "onsgmldeclaration", parser.sgmlDecl);
                parser.sgmlDecl = "";
                parser.state = S3.TEXT;
              } else if (isQuote(c3)) {
                parser.state = S3.SGML_DECL_QUOTED;
                parser.sgmlDecl += c3;
              } else {
                parser.sgmlDecl += c3;
              }
              continue;
            case S3.SGML_DECL_QUOTED:
              if (c3 === parser.q) {
                parser.state = S3.SGML_DECL;
                parser.q = "";
              }
              parser.sgmlDecl += c3;
              continue;
            case S3.DOCTYPE:
              if (c3 === ">") {
                parser.state = S3.TEXT;
                emitNode(parser, "ondoctype", parser.doctype);
                parser.doctype = true;
              } else {
                parser.doctype += c3;
                if (c3 === "[") {
                  parser.state = S3.DOCTYPE_DTD;
                } else if (isQuote(c3)) {
                  parser.state = S3.DOCTYPE_QUOTED;
                  parser.q = c3;
                }
              }
              continue;
            case S3.DOCTYPE_QUOTED:
              parser.doctype += c3;
              if (c3 === parser.q) {
                parser.q = "";
                parser.state = S3.DOCTYPE;
              }
              continue;
            case S3.DOCTYPE_DTD:
              if (c3 === "]") {
                parser.doctype += c3;
                parser.state = S3.DOCTYPE;
              } else if (c3 === "<") {
                parser.state = S3.OPEN_WAKA;
                parser.startTagPosition = parser.position;
              } else if (isQuote(c3)) {
                parser.doctype += c3;
                parser.state = S3.DOCTYPE_DTD_QUOTED;
                parser.q = c3;
              } else {
                parser.doctype += c3;
              }
              continue;
            case S3.DOCTYPE_DTD_QUOTED:
              parser.doctype += c3;
              if (c3 === parser.q) {
                parser.state = S3.DOCTYPE_DTD;
                parser.q = "";
              }
              continue;
            case S3.COMMENT:
              if (c3 === "-") {
                parser.state = S3.COMMENT_ENDING;
              } else {
                parser.comment += c3;
              }
              continue;
            case S3.COMMENT_ENDING:
              if (c3 === "-") {
                parser.state = S3.COMMENT_ENDED;
                parser.comment = textopts(parser.opt, parser.comment);
                if (parser.comment) {
                  emitNode(parser, "oncomment", parser.comment);
                }
                parser.comment = "";
              } else {
                parser.comment += "-" + c3;
                parser.state = S3.COMMENT;
              }
              continue;
            case S3.COMMENT_ENDED:
              if (c3 !== ">") {
                strictFail(parser, "Malformed comment");
                parser.comment += "--" + c3;
                parser.state = S3.COMMENT;
              } else if (parser.doctype && parser.doctype !== true) {
                parser.state = S3.DOCTYPE_DTD;
              } else {
                parser.state = S3.TEXT;
              }
              continue;
            case S3.CDATA:
              if (c3 === "]") {
                parser.state = S3.CDATA_ENDING;
              } else {
                parser.cdata += c3;
              }
              continue;
            case S3.CDATA_ENDING:
              if (c3 === "]") {
                parser.state = S3.CDATA_ENDING_2;
              } else {
                parser.cdata += "]" + c3;
                parser.state = S3.CDATA;
              }
              continue;
            case S3.CDATA_ENDING_2:
              if (c3 === ">") {
                if (parser.cdata) {
                  emitNode(parser, "oncdata", parser.cdata);
                }
                emitNode(parser, "onclosecdata");
                parser.cdata = "";
                parser.state = S3.TEXT;
              } else if (c3 === "]") {
                parser.cdata += "]";
              } else {
                parser.cdata += "]]" + c3;
                parser.state = S3.CDATA;
              }
              continue;
            case S3.PROC_INST:
              if (c3 === "?") {
                parser.state = S3.PROC_INST_ENDING;
              } else if (isWhitespace(c3)) {
                parser.state = S3.PROC_INST_BODY;
              } else {
                parser.procInstName += c3;
              }
              continue;
            case S3.PROC_INST_BODY:
              if (!parser.procInstBody && isWhitespace(c3)) {
                continue;
              } else if (c3 === "?") {
                parser.state = S3.PROC_INST_ENDING;
              } else {
                parser.procInstBody += c3;
              }
              continue;
            case S3.PROC_INST_ENDING:
              if (c3 === ">") {
                emitNode(parser, "onprocessinginstruction", {
                  name: parser.procInstName,
                  body: parser.procInstBody
                });
                parser.procInstName = parser.procInstBody = "";
                parser.state = S3.TEXT;
              } else {
                parser.procInstBody += "?" + c3;
                parser.state = S3.PROC_INST_BODY;
              }
              continue;
            case S3.OPEN_TAG:
              if (isMatch(nameBody, c3)) {
                parser.tagName += c3;
              } else {
                newTag(parser);
                if (c3 === ">") {
                  openTag(parser);
                } else if (c3 === "/") {
                  parser.state = S3.OPEN_TAG_SLASH;
                } else {
                  if (!isWhitespace(c3)) {
                    strictFail(parser, "Invalid character in tag name");
                  }
                  parser.state = S3.ATTRIB;
                }
              }
              continue;
            case S3.OPEN_TAG_SLASH:
              if (c3 === ">") {
                openTag(parser, true);
                closeTag(parser);
              } else {
                strictFail(parser, "Forward-slash in opening tag not followed by >");
                parser.state = S3.ATTRIB;
              }
              continue;
            case S3.ATTRIB:
              if (isWhitespace(c3)) {
                continue;
              } else if (c3 === ">") {
                openTag(parser);
              } else if (c3 === "/") {
                parser.state = S3.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c3)) {
                parser.attribName = c3;
                parser.attribValue = "";
                parser.state = S3.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S3.ATTRIB_NAME:
              if (c3 === "=") {
                parser.state = S3.ATTRIB_VALUE;
              } else if (c3 === ">") {
                strictFail(parser, "Attribute without value");
                parser.attribValue = parser.attribName;
                attrib(parser);
                openTag(parser);
              } else if (isWhitespace(c3)) {
                parser.state = S3.ATTRIB_NAME_SAW_WHITE;
              } else if (isMatch(nameBody, c3)) {
                parser.attribName += c3;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S3.ATTRIB_NAME_SAW_WHITE:
              if (c3 === "=") {
                parser.state = S3.ATTRIB_VALUE;
              } else if (isWhitespace(c3)) {
                continue;
              } else {
                strictFail(parser, "Attribute without value");
                parser.tag.attributes[parser.attribName] = "";
                parser.attribValue = "";
                emitNode(parser, "onattribute", {
                  name: parser.attribName,
                  value: ""
                });
                parser.attribName = "";
                if (c3 === ">") {
                  openTag(parser);
                } else if (isMatch(nameStart, c3)) {
                  parser.attribName = c3;
                  parser.state = S3.ATTRIB_NAME;
                } else {
                  strictFail(parser, "Invalid attribute name");
                  parser.state = S3.ATTRIB;
                }
              }
              continue;
            case S3.ATTRIB_VALUE:
              if (isWhitespace(c3)) {
                continue;
              } else if (isQuote(c3)) {
                parser.q = c3;
                parser.state = S3.ATTRIB_VALUE_QUOTED;
              } else {
                if (!parser.opt.unquotedAttributeValues) {
                  error(parser, "Unquoted attribute value");
                }
                parser.state = S3.ATTRIB_VALUE_UNQUOTED;
                parser.attribValue = c3;
              }
              continue;
            case S3.ATTRIB_VALUE_QUOTED:
              if (c3 !== parser.q) {
                if (c3 === "&") {
                  parser.state = S3.ATTRIB_VALUE_ENTITY_Q;
                } else {
                  parser.attribValue += c3;
                }
                continue;
              }
              attrib(parser);
              parser.q = "";
              parser.state = S3.ATTRIB_VALUE_CLOSED;
              continue;
            case S3.ATTRIB_VALUE_CLOSED:
              if (isWhitespace(c3)) {
                parser.state = S3.ATTRIB;
              } else if (c3 === ">") {
                openTag(parser);
              } else if (c3 === "/") {
                parser.state = S3.OPEN_TAG_SLASH;
              } else if (isMatch(nameStart, c3)) {
                strictFail(parser, "No whitespace between attributes");
                parser.attribName = c3;
                parser.attribValue = "";
                parser.state = S3.ATTRIB_NAME;
              } else {
                strictFail(parser, "Invalid attribute name");
              }
              continue;
            case S3.ATTRIB_VALUE_UNQUOTED:
              if (!isAttribEnd(c3)) {
                if (c3 === "&") {
                  parser.state = S3.ATTRIB_VALUE_ENTITY_U;
                } else {
                  parser.attribValue += c3;
                }
                continue;
              }
              attrib(parser);
              if (c3 === ">") {
                openTag(parser);
              } else {
                parser.state = S3.ATTRIB;
              }
              continue;
            case S3.CLOSE_TAG:
              if (!parser.tagName) {
                if (isWhitespace(c3)) {
                  continue;
                } else if (notMatch(nameStart, c3)) {
                  if (parser.script) {
                    parser.script += "</" + c3;
                    parser.state = S3.SCRIPT;
                  } else {
                    strictFail(parser, "Invalid tagname in closing tag.");
                  }
                } else {
                  parser.tagName = c3;
                }
              } else if (c3 === ">") {
                closeTag(parser);
              } else if (isMatch(nameBody, c3)) {
                parser.tagName += c3;
              } else if (parser.script) {
                parser.script += "</" + parser.tagName;
                parser.tagName = "";
                parser.state = S3.SCRIPT;
              } else {
                if (!isWhitespace(c3)) {
                  strictFail(parser, "Invalid tagname in closing tag");
                }
                parser.state = S3.CLOSE_TAG_SAW_WHITE;
              }
              continue;
            case S3.CLOSE_TAG_SAW_WHITE:
              if (isWhitespace(c3)) {
                continue;
              }
              if (c3 === ">") {
                closeTag(parser);
              } else {
                strictFail(parser, "Invalid characters in closing tag");
              }
              continue;
            case S3.TEXT_ENTITY:
            case S3.ATTRIB_VALUE_ENTITY_Q:
            case S3.ATTRIB_VALUE_ENTITY_U:
              var returnState;
              var buffer;
              switch (parser.state) {
                case S3.TEXT_ENTITY:
                  returnState = S3.TEXT;
                  buffer = "textNode";
                  break;
                case S3.ATTRIB_VALUE_ENTITY_Q:
                  returnState = S3.ATTRIB_VALUE_QUOTED;
                  buffer = "attribValue";
                  break;
                case S3.ATTRIB_VALUE_ENTITY_U:
                  returnState = S3.ATTRIB_VALUE_UNQUOTED;
                  buffer = "attribValue";
                  break;
              }
              if (c3 === ";") {
                var parsedEntity = parseEntity(parser);
                if (parser.opt.unparsedEntities && !Object.values(sax.XML_ENTITIES).includes(parsedEntity)) {
                  parser.entity = "";
                  parser.state = returnState;
                  parser.write(parsedEntity);
                } else {
                  parser[buffer] += parsedEntity;
                  parser.entity = "";
                  parser.state = returnState;
                }
              } else if (isMatch(parser.entity.length ? entityBody : entityStart, c3)) {
                parser.entity += c3;
              } else {
                strictFail(parser, "Invalid character in entity name");
                parser[buffer] += "&" + parser.entity + c3;
                parser.entity = "";
                parser.state = returnState;
              }
              continue;
            default: {
              throw new Error(parser, "Unknown state: " + parser.state);
            }
          }
        }
        if (parser.position >= parser.bufferCheckPosition) {
          checkBufferLength(parser);
        }
        return parser;
      }
      if (!String.fromCodePoint) {
        (function() {
          var stringFromCharCode = String.fromCharCode;
          var floor = Math.floor;
          var fromCodePoint = function() {
            var MAX_SIZE = 16384;
            var codeUnits = [];
            var highSurrogate;
            var lowSurrogate;
            var index = -1;
            var length = arguments.length;
            if (!length) {
              return "";
            }
            var result = "";
            while (++index < length) {
              var codePoint = Number(arguments[index]);
              if (!isFinite(codePoint) || // `NaN`, `+Infinity`, or `-Infinity`
              codePoint < 0 || // not a valid Unicode code point
              codePoint > 1114111 || // not a valid Unicode code point
              floor(codePoint) !== codePoint) {
                throw RangeError("Invalid code point: " + codePoint);
              }
              if (codePoint <= 65535) {
                codeUnits.push(codePoint);
              } else {
                codePoint -= 65536;
                highSurrogate = (codePoint >> 10) + 55296;
                lowSurrogate = codePoint % 1024 + 56320;
                codeUnits.push(highSurrogate, lowSurrogate);
              }
              if (index + 1 === length || codeUnits.length > MAX_SIZE) {
                result += stringFromCharCode.apply(null, codeUnits);
                codeUnits.length = 0;
              }
            }
            return result;
          };
          if (Object.defineProperty) {
            Object.defineProperty(String, "fromCodePoint", {
              value: fromCodePoint,
              configurable: true,
              writable: true
            });
          } else {
            String.fromCodePoint = fromCodePoint;
          }
        })();
      }
    })(typeof exports === "undefined" ? exports.sax = {} : exports);
  }
});

// ../../node_modules/xml2js/lib/bom.js
var require_bom = __commonJS({
  "../../node_modules/xml2js/lib/bom.js"(exports) {
    init_esm();
    (function() {
      "use strict";
      exports.stripBOM = function(str) {
        if (str[0] === "\uFEFF") {
          return str.substring(1);
        } else {
          return str;
        }
      };
    }).call(exports);
  }
});

// ../../node_modules/xml2js/lib/processors.js
var require_processors = __commonJS({
  "../../node_modules/xml2js/lib/processors.js"(exports) {
    init_esm();
    (function() {
      "use strict";
      var prefixMatch;
      prefixMatch = new RegExp(/(?!xmlns)^.*:/);
      exports.normalize = function(str) {
        return str.toLowerCase();
      };
      exports.firstCharLowerCase = function(str) {
        return str.charAt(0).toLowerCase() + str.slice(1);
      };
      exports.stripPrefix = function(str) {
        return str.replace(prefixMatch, "");
      };
      exports.parseNumbers = function(str) {
        if (!isNaN(str)) {
          str = str % 1 === 0 ? parseInt(str, 10) : parseFloat(str);
        }
        return str;
      };
      exports.parseBooleans = function(str) {
        if (/^(?:true|false)$/i.test(str)) {
          str = str.toLowerCase() === "true";
        }
        return str;
      };
    }).call(exports);
  }
});

// ../../node_modules/xml2js/lib/parser.js
var require_parser = __commonJS({
  "../../node_modules/xml2js/lib/parser.js"(exports) {
    init_esm();
    (function() {
      "use strict";
      var bom, defaults, defineProperty, events, isEmpty, processItem, processors, sax, setImmediate, bind = function(fn, me2) {
        return function() {
          return fn.apply(me2, arguments);
        };
      }, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      sax = require_sax2();
      events = __require("events");
      bom = require_bom();
      processors = require_processors();
      setImmediate = __require("timers").setImmediate;
      defaults = require_defaults().defaults;
      isEmpty = function(thing) {
        return typeof thing === "object" && thing != null && Object.keys(thing).length === 0;
      };
      processItem = function(processors2, item, key) {
        var i3, len, process2;
        for (i3 = 0, len = processors2.length; i3 < len; i3++) {
          process2 = processors2[i3];
          item = process2(item, key);
        }
        return item;
      };
      defineProperty = function(obj, key, value) {
        var descriptor;
        descriptor = /* @__PURE__ */ Object.create(null);
        descriptor.value = value;
        descriptor.writable = true;
        descriptor.enumerable = true;
        descriptor.configurable = true;
        return Object.defineProperty(obj, key, descriptor);
      };
      exports.Parser = function(superClass) {
        extend(Parser, superClass);
        function Parser(opts) {
          this.parseStringPromise = bind(this.parseStringPromise, this);
          this.parseString = bind(this.parseString, this);
          this.reset = bind(this.reset, this);
          this.assignOrPush = bind(this.assignOrPush, this);
          this.processAsync = bind(this.processAsync, this);
          var key, ref, value;
          if (!(this instanceof exports.Parser)) {
            return new exports.Parser(opts);
          }
          this.options = {};
          ref = defaults["0.2"];
          for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            value = ref[key];
            this.options[key] = value;
          }
          for (key in opts) {
            if (!hasProp.call(opts, key)) continue;
            value = opts[key];
            this.options[key] = value;
          }
          if (this.options.xmlns) {
            this.options.xmlnskey = this.options.attrkey + "ns";
          }
          if (this.options.normalizeTags) {
            if (!this.options.tagNameProcessors) {
              this.options.tagNameProcessors = [];
            }
            this.options.tagNameProcessors.unshift(processors.normalize);
          }
          this.reset();
        }
        Parser.prototype.processAsync = function() {
          var chunk, err;
          try {
            if (this.remaining.length <= this.options.chunkSize) {
              chunk = this.remaining;
              this.remaining = "";
              this.saxParser = this.saxParser.write(chunk);
              return this.saxParser.close();
            } else {
              chunk = this.remaining.substr(0, this.options.chunkSize);
              this.remaining = this.remaining.substr(this.options.chunkSize, this.remaining.length);
              this.saxParser = this.saxParser.write(chunk);
              return setImmediate(this.processAsync);
            }
          } catch (error1) {
            err = error1;
            if (!this.saxParser.errThrown) {
              this.saxParser.errThrown = true;
              return this.emit(err);
            }
          }
        };
        Parser.prototype.assignOrPush = function(obj, key, newValue) {
          if (!(key in obj)) {
            if (!this.options.explicitArray) {
              return defineProperty(obj, key, newValue);
            } else {
              return defineProperty(obj, key, [newValue]);
            }
          } else {
            if (!(obj[key] instanceof Array)) {
              defineProperty(obj, key, [obj[key]]);
            }
            return obj[key].push(newValue);
          }
        };
        Parser.prototype.reset = function() {
          var attrkey, charkey, ontext, stack;
          this.removeAllListeners();
          this.saxParser = sax.parser(this.options.strict, {
            trim: false,
            normalize: false,
            xmlns: this.options.xmlns
          });
          this.saxParser.errThrown = false;
          this.saxParser.onerror = /* @__PURE__ */ function(_this) {
            return function(error) {
              _this.saxParser.resume();
              if (!_this.saxParser.errThrown) {
                _this.saxParser.errThrown = true;
                return _this.emit("error", error);
              }
            };
          }(this);
          this.saxParser.onend = /* @__PURE__ */ function(_this) {
            return function() {
              if (!_this.saxParser.ended) {
                _this.saxParser.ended = true;
                return _this.emit("end", _this.resultObject);
              }
            };
          }(this);
          this.saxParser.ended = false;
          this.EXPLICIT_CHARKEY = this.options.explicitCharkey;
          this.resultObject = null;
          stack = [];
          attrkey = this.options.attrkey;
          charkey = this.options.charkey;
          this.saxParser.onopentag = /* @__PURE__ */ function(_this) {
            return function(node) {
              var key, newValue, obj, processedKey, ref;
              obj = {};
              obj[charkey] = "";
              if (!_this.options.ignoreAttrs) {
                ref = node.attributes;
                for (key in ref) {
                  if (!hasProp.call(ref, key)) continue;
                  if (!(attrkey in obj) && !_this.options.mergeAttrs) {
                    obj[attrkey] = {};
                  }
                  newValue = _this.options.attrValueProcessors ? processItem(_this.options.attrValueProcessors, node.attributes[key], key) : node.attributes[key];
                  processedKey = _this.options.attrNameProcessors ? processItem(_this.options.attrNameProcessors, key) : key;
                  if (_this.options.mergeAttrs) {
                    _this.assignOrPush(obj, processedKey, newValue);
                  } else {
                    defineProperty(obj[attrkey], processedKey, newValue);
                  }
                }
              }
              obj["#name"] = _this.options.tagNameProcessors ? processItem(_this.options.tagNameProcessors, node.name) : node.name;
              if (_this.options.xmlns) {
                obj[_this.options.xmlnskey] = {
                  uri: node.uri,
                  local: node.local
                };
              }
              return stack.push(obj);
            };
          }(this);
          this.saxParser.onclosetag = /* @__PURE__ */ function(_this) {
            return function() {
              var cdata, emptyStr, key, node, nodeName, obj, objClone, old, s3, xpath;
              obj = stack.pop();
              nodeName = obj["#name"];
              if (!_this.options.explicitChildren || !_this.options.preserveChildrenOrder) {
                delete obj["#name"];
              }
              if (obj.cdata === true) {
                cdata = obj.cdata;
                delete obj.cdata;
              }
              s3 = stack[stack.length - 1];
              if (obj[charkey].match(/^\s*$/) && !cdata) {
                emptyStr = obj[charkey];
                delete obj[charkey];
              } else {
                if (_this.options.trim) {
                  obj[charkey] = obj[charkey].trim();
                }
                if (_this.options.normalize) {
                  obj[charkey] = obj[charkey].replace(/\s{2,}/g, " ").trim();
                }
                obj[charkey] = _this.options.valueProcessors ? processItem(_this.options.valueProcessors, obj[charkey], nodeName) : obj[charkey];
                if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                  obj = obj[charkey];
                }
              }
              if (isEmpty(obj)) {
                if (typeof _this.options.emptyTag === "function") {
                  obj = _this.options.emptyTag();
                } else {
                  obj = _this.options.emptyTag !== "" ? _this.options.emptyTag : emptyStr;
                }
              }
              if (_this.options.validator != null) {
                xpath = "/" + function() {
                  var i3, len, results;
                  results = [];
                  for (i3 = 0, len = stack.length; i3 < len; i3++) {
                    node = stack[i3];
                    results.push(node["#name"]);
                  }
                  return results;
                }().concat(nodeName).join("/");
                (function() {
                  var err;
                  try {
                    return obj = _this.options.validator(xpath, s3 && s3[nodeName], obj);
                  } catch (error1) {
                    err = error1;
                    return _this.emit("error", err);
                  }
                })();
              }
              if (_this.options.explicitChildren && !_this.options.mergeAttrs && typeof obj === "object") {
                if (!_this.options.preserveChildrenOrder) {
                  node = {};
                  if (_this.options.attrkey in obj) {
                    node[_this.options.attrkey] = obj[_this.options.attrkey];
                    delete obj[_this.options.attrkey];
                  }
                  if (!_this.options.charsAsChildren && _this.options.charkey in obj) {
                    node[_this.options.charkey] = obj[_this.options.charkey];
                    delete obj[_this.options.charkey];
                  }
                  if (Object.getOwnPropertyNames(obj).length > 0) {
                    node[_this.options.childkey] = obj;
                  }
                  obj = node;
                } else if (s3) {
                  s3[_this.options.childkey] = s3[_this.options.childkey] || [];
                  objClone = {};
                  for (key in obj) {
                    if (!hasProp.call(obj, key)) continue;
                    defineProperty(objClone, key, obj[key]);
                  }
                  s3[_this.options.childkey].push(objClone);
                  delete obj["#name"];
                  if (Object.keys(obj).length === 1 && charkey in obj && !_this.EXPLICIT_CHARKEY) {
                    obj = obj[charkey];
                  }
                }
              }
              if (stack.length > 0) {
                return _this.assignOrPush(s3, nodeName, obj);
              } else {
                if (_this.options.explicitRoot) {
                  old = obj;
                  obj = {};
                  defineProperty(obj, nodeName, old);
                }
                _this.resultObject = obj;
                _this.saxParser.ended = true;
                return _this.emit("end", _this.resultObject);
              }
            };
          }(this);
          ontext = /* @__PURE__ */ function(_this) {
            return function(text) {
              var charChild, s3;
              s3 = stack[stack.length - 1];
              if (s3) {
                s3[charkey] += text;
                if (_this.options.explicitChildren && _this.options.preserveChildrenOrder && _this.options.charsAsChildren && (_this.options.includeWhiteChars || text.replace(/\\n/g, "").trim() !== "")) {
                  s3[_this.options.childkey] = s3[_this.options.childkey] || [];
                  charChild = {
                    "#name": "__text__"
                  };
                  charChild[charkey] = text;
                  if (_this.options.normalize) {
                    charChild[charkey] = charChild[charkey].replace(/\s{2,}/g, " ").trim();
                  }
                  s3[_this.options.childkey].push(charChild);
                }
                return s3;
              }
            };
          }(this);
          this.saxParser.ontext = ontext;
          return this.saxParser.oncdata = /* @__PURE__ */ function(_this) {
            return function(text) {
              var s3;
              s3 = ontext(text);
              if (s3) {
                return s3.cdata = true;
              }
            };
          }(this);
        };
        Parser.prototype.parseString = function(str, cb) {
          var err;
          if (cb != null && typeof cb === "function") {
            this.on("end", function(result) {
              this.reset();
              return cb(null, result);
            });
            this.on("error", function(err2) {
              this.reset();
              return cb(err2);
            });
          }
          try {
            str = str.toString();
            if (str.trim() === "") {
              this.emit("end", null);
              return true;
            }
            str = bom.stripBOM(str);
            if (this.options.async) {
              this.remaining = str;
              setImmediate(this.processAsync);
              return this.saxParser;
            }
            return this.saxParser.write(str).close();
          } catch (error1) {
            err = error1;
            if (!(this.saxParser.errThrown || this.saxParser.ended)) {
              this.emit("error", err);
              return this.saxParser.errThrown = true;
            } else if (this.saxParser.ended) {
              throw err;
            }
          }
        };
        Parser.prototype.parseStringPromise = function(str) {
          return new Promise(/* @__PURE__ */ function(_this) {
            return function(resolve, reject) {
              return _this.parseString(str, function(err, value) {
                if (err) {
                  return reject(err);
                } else {
                  return resolve(value);
                }
              });
            };
          }(this));
        };
        return Parser;
      }(events);
      exports.parseString = function(str, a2, b3) {
        var cb, options, parser;
        if (b3 != null) {
          if (typeof b3 === "function") {
            cb = b3;
          }
          if (typeof a2 === "object") {
            options = a2;
          }
        } else {
          if (typeof a2 === "function") {
            cb = a2;
          }
          options = {};
        }
        parser = new exports.Parser(options);
        return parser.parseString(str, cb);
      };
      exports.parseStringPromise = function(str, a2) {
        var options, parser;
        if (typeof a2 === "object") {
          options = a2;
        }
        parser = new exports.Parser(options);
        return parser.parseStringPromise(str);
      };
    }).call(exports);
  }
});

// ../../node_modules/xml2js/lib/xml2js.js
var require_xml2js = __commonJS({
  "../../node_modules/xml2js/lib/xml2js.js"(exports) {
    init_esm();
    (function() {
      "use strict";
      var builder, defaults, parser, processors, extend = function(child, parent) {
        for (var key in parent) {
          if (hasProp.call(parent, key)) child[key] = parent[key];
        }
        function ctor() {
          this.constructor = child;
        }
        ctor.prototype = parent.prototype;
        child.prototype = new ctor();
        child.__super__ = parent.prototype;
        return child;
      }, hasProp = {}.hasOwnProperty;
      defaults = require_defaults();
      builder = require_builder();
      parser = require_parser();
      processors = require_processors();
      exports.defaults = defaults.defaults;
      exports.processors = processors;
      exports.ValidationError = function(superClass) {
        extend(ValidationError, superClass);
        function ValidationError(message) {
          this.message = message;
        }
        return ValidationError;
      }(Error);
      exports.Builder = builder.Builder;
      exports.Parser = parser.Parser;
      exports.parseString = parser.parseString;
      exports.parseStringPromise = parser.parseStringPromise;
    }).call(exports);
  }
});

// trigger/example.ts
init_esm();
import { TeamMemberRole } from "@prisma/client";

// ../../node_modules/node-fetch/src/index.js
init_esm();
import http2 from "node:http";
import https from "node:https";
import zlib from "node:zlib";
import Stream2, { PassThrough as PassThrough2, pipeline as pump } from "node:stream";
import { Buffer as Buffer3 } from "node:buffer";

// ../../node_modules/data-uri-to-buffer/dist/index.js
init_esm();
function dataUriToBuffer(uri) {
  if (!/^data:/i.test(uri)) {
    throw new TypeError('`uri` does not appear to be a Data URI (must begin with "data:")');
  }
  uri = uri.replace(/\r?\n/g, "");
  const firstComma = uri.indexOf(",");
  if (firstComma === -1 || firstComma <= 4) {
    throw new TypeError("malformed data: URI");
  }
  const meta = uri.substring(5, firstComma).split(";");
  let charset = "";
  let base64 = false;
  const type = meta[0] || "text/plain";
  let typeFull = type;
  for (let i3 = 1; i3 < meta.length; i3++) {
    if (meta[i3] === "base64") {
      base64 = true;
    } else if (meta[i3]) {
      typeFull += `;${meta[i3]}`;
      if (meta[i3].indexOf("charset=") === 0) {
        charset = meta[i3].substring(8);
      }
    }
  }
  if (!meta[0] && !charset.length) {
    typeFull += ";charset=US-ASCII";
    charset = "US-ASCII";
  }
  const encoding = base64 ? "base64" : "ascii";
  const data = unescape(uri.substring(firstComma + 1));
  const buffer = Buffer.from(data, encoding);
  buffer.type = type;
  buffer.typeFull = typeFull;
  buffer.charset = charset;
  return buffer;
}
var dist_default = dataUriToBuffer;

// ../../node_modules/node-fetch/src/body.js
init_esm();
import Stream, { PassThrough } from "node:stream";
import { types, deprecate, promisify } from "node:util";
import { Buffer as Buffer2 } from "node:buffer";

// ../../node_modules/node-fetch/src/errors/fetch-error.js
init_esm();

// ../../node_modules/node-fetch/src/errors/base.js
init_esm();
var FetchBaseError = class extends Error {
  constructor(message, type) {
    super(message);
    Error.captureStackTrace(this, this.constructor);
    this.type = type;
  }
  get name() {
    return this.constructor.name;
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
};

// ../../node_modules/node-fetch/src/errors/fetch-error.js
var FetchError = class extends FetchBaseError {
  /**
   * @param  {string} message -      Error message for human
   * @param  {string} [type] -        Error type for machine
   * @param  {SystemError} [systemError] - For Node.js system error
   */
  constructor(message, type, systemError) {
    super(message, type);
    if (systemError) {
      this.code = this.errno = systemError.code;
      this.erroredSysCall = systemError.syscall;
    }
  }
};

// ../../node_modules/node-fetch/src/utils/is.js
init_esm();
var NAME = Symbol.toStringTag;
var isURLSearchParameters = (object) => {
  return typeof object === "object" && typeof object.append === "function" && typeof object.delete === "function" && typeof object.get === "function" && typeof object.getAll === "function" && typeof object.has === "function" && typeof object.set === "function" && typeof object.sort === "function" && object[NAME] === "URLSearchParams";
};
var isBlob = (object) => {
  return object && typeof object === "object" && typeof object.arrayBuffer === "function" && typeof object.type === "string" && typeof object.stream === "function" && typeof object.constructor === "function" && /^(Blob|File)$/.test(object[NAME]);
};
var isAbortSignal = (object) => {
  return typeof object === "object" && (object[NAME] === "AbortSignal" || object[NAME] === "EventTarget");
};
var isDomainOrSubdomain = (destination, original) => {
  const orig = new URL(original).hostname;
  const dest = new URL(destination).hostname;
  return orig === dest || orig.endsWith(`.${dest}`);
};
var isSameProtocol = (destination, original) => {
  const orig = new URL(original).protocol;
  const dest = new URL(destination).protocol;
  return orig === dest;
};

// ../../node_modules/node-fetch/src/body.js
var pipeline = promisify(Stream.pipeline);
var INTERNALS = Symbol("Body internals");
var Body = class {
  constructor(body, {
    size = 0
  } = {}) {
    let boundary = null;
    if (body === null) {
      body = null;
    } else if (isURLSearchParameters(body)) {
      body = Buffer2.from(body.toString());
    } else if (isBlob(body)) {
    } else if (Buffer2.isBuffer(body)) {
    } else if (types.isAnyArrayBuffer(body)) {
      body = Buffer2.from(body);
    } else if (ArrayBuffer.isView(body)) {
      body = Buffer2.from(body.buffer, body.byteOffset, body.byteLength);
    } else if (body instanceof Stream) {
    } else if (body instanceof FormData) {
      body = formDataToBlob(body);
      boundary = body.type.split("=")[1];
    } else {
      body = Buffer2.from(String(body));
    }
    let stream = body;
    if (Buffer2.isBuffer(body)) {
      stream = Stream.Readable.from(body);
    } else if (isBlob(body)) {
      stream = Stream.Readable.from(body.stream());
    }
    this[INTERNALS] = {
      body,
      stream,
      boundary,
      disturbed: false,
      error: null
    };
    this.size = size;
    if (body instanceof Stream) {
      body.on("error", (error_) => {
        const error = error_ instanceof FetchBaseError ? error_ : new FetchError(`Invalid response body while trying to fetch ${this.url}: ${error_.message}`, "system", error_);
        this[INTERNALS].error = error;
      });
    }
  }
  get body() {
    return this[INTERNALS].stream;
  }
  get bodyUsed() {
    return this[INTERNALS].disturbed;
  }
  /**
   * Decode response as ArrayBuffer
   *
   * @return  Promise
   */
  async arrayBuffer() {
    const { buffer, byteOffset, byteLength } = await consumeBody(this);
    return buffer.slice(byteOffset, byteOffset + byteLength);
  }
  async formData() {
    const ct2 = this.headers.get("content-type");
    if (ct2.startsWith("application/x-www-form-urlencoded")) {
      const formData = new FormData();
      const parameters = new URLSearchParams(await this.text());
      for (const [name, value] of parameters) {
        formData.append(name, value);
      }
      return formData;
    }
    const { toFormData } = await import("./multipart-parser-Z42LU2TV.mjs");
    return toFormData(this.body, ct2);
  }
  /**
   * Return raw response as Blob
   *
   * @return Promise
   */
  async blob() {
    const ct2 = this.headers && this.headers.get("content-type") || this[INTERNALS].body && this[INTERNALS].body.type || "";
    const buf = await this.arrayBuffer();
    return new fetch_blob_default([buf], {
      type: ct2
    });
  }
  /**
   * Decode response as json
   *
   * @return  Promise
   */
  async json() {
    const text = await this.text();
    return JSON.parse(text);
  }
  /**
   * Decode response as text
   *
   * @return  Promise
   */
  async text() {
    const buffer = await consumeBody(this);
    return new TextDecoder().decode(buffer);
  }
  /**
   * Decode response as buffer (non-spec api)
   *
   * @return  Promise
   */
  buffer() {
    return consumeBody(this);
  }
};
Body.prototype.buffer = deprecate(Body.prototype.buffer, "Please use 'response.arrayBuffer()' instead of 'response.buffer()'", "node-fetch#buffer");
Object.defineProperties(Body.prototype, {
  body: { enumerable: true },
  bodyUsed: { enumerable: true },
  arrayBuffer: { enumerable: true },
  blob: { enumerable: true },
  json: { enumerable: true },
  text: { enumerable: true },
  data: { get: deprecate(
    () => {
    },
    "data doesn't exist, use json(), text(), arrayBuffer(), or body instead",
    "https://github.com/node-fetch/node-fetch/issues/1000 (response)"
  ) }
});
async function consumeBody(data) {
  if (data[INTERNALS].disturbed) {
    throw new TypeError(`body used already for: ${data.url}`);
  }
  data[INTERNALS].disturbed = true;
  if (data[INTERNALS].error) {
    throw data[INTERNALS].error;
  }
  const { body } = data;
  if (body === null) {
    return Buffer2.alloc(0);
  }
  if (!(body instanceof Stream)) {
    return Buffer2.alloc(0);
  }
  const accum = [];
  let accumBytes = 0;
  try {
    for await (const chunk of body) {
      if (data.size > 0 && accumBytes + chunk.length > data.size) {
        const error = new FetchError(`content size at ${data.url} over limit: ${data.size}`, "max-size");
        body.destroy(error);
        throw error;
      }
      accumBytes += chunk.length;
      accum.push(chunk);
    }
  } catch (error) {
    const error_ = error instanceof FetchBaseError ? error : new FetchError(`Invalid response body while trying to fetch ${data.url}: ${error.message}`, "system", error);
    throw error_;
  }
  if (body.readableEnded === true || body._readableState.ended === true) {
    try {
      if (accum.every((c3) => typeof c3 === "string")) {
        return Buffer2.from(accum.join(""));
      }
      return Buffer2.concat(accum, accumBytes);
    } catch (error) {
      throw new FetchError(`Could not create Buffer from response body for ${data.url}: ${error.message}`, "system", error);
    }
  } else {
    throw new FetchError(`Premature close of server response while trying to fetch ${data.url}`);
  }
}
var clone = (instance, highWaterMark) => {
  let p1;
  let p22;
  let { body } = instance[INTERNALS];
  if (instance.bodyUsed) {
    throw new Error("cannot clone body after it is used");
  }
  if (body instanceof Stream && typeof body.getBoundary !== "function") {
    p1 = new PassThrough({ highWaterMark });
    p22 = new PassThrough({ highWaterMark });
    body.pipe(p1);
    body.pipe(p22);
    instance[INTERNALS].stream = p1;
    body = p22;
  }
  return body;
};
var getNonSpecFormDataBoundary = deprecate(
  (body) => body.getBoundary(),
  "form-data doesn't follow the spec and requires special treatment. Use alternative package",
  "https://github.com/node-fetch/node-fetch/issues/1167"
);
var extractContentType = (body, request) => {
  if (body === null) {
    return null;
  }
  if (typeof body === "string") {
    return "text/plain;charset=UTF-8";
  }
  if (isURLSearchParameters(body)) {
    return "application/x-www-form-urlencoded;charset=UTF-8";
  }
  if (isBlob(body)) {
    return body.type || null;
  }
  if (Buffer2.isBuffer(body) || types.isAnyArrayBuffer(body) || ArrayBuffer.isView(body)) {
    return null;
  }
  if (body instanceof FormData) {
    return `multipart/form-data; boundary=${request[INTERNALS].boundary}`;
  }
  if (body && typeof body.getBoundary === "function") {
    return `multipart/form-data;boundary=${getNonSpecFormDataBoundary(body)}`;
  }
  if (body instanceof Stream) {
    return null;
  }
  return "text/plain;charset=UTF-8";
};
var getTotalBytes = (request) => {
  const { body } = request[INTERNALS];
  if (body === null) {
    return 0;
  }
  if (isBlob(body)) {
    return body.size;
  }
  if (Buffer2.isBuffer(body)) {
    return body.length;
  }
  if (body && typeof body.getLengthSync === "function") {
    return body.hasKnownLength && body.hasKnownLength() ? body.getLengthSync() : null;
  }
  return null;
};
var writeToStream = async (dest, { body }) => {
  if (body === null) {
    dest.end();
  } else {
    await pipeline(body, dest);
  }
};

// ../../node_modules/node-fetch/src/response.js
init_esm();

// ../../node_modules/node-fetch/src/headers.js
init_esm();
import { types as types2 } from "node:util";
import http from "node:http";
var validateHeaderName = typeof http.validateHeaderName === "function" ? http.validateHeaderName : (name) => {
  if (!/^[\^`\-\w!#$%&'*+.|~]+$/.test(name)) {
    const error = new TypeError(`Header name must be a valid HTTP token [${name}]`);
    Object.defineProperty(error, "code", { value: "ERR_INVALID_HTTP_TOKEN" });
    throw error;
  }
};
var validateHeaderValue = typeof http.validateHeaderValue === "function" ? http.validateHeaderValue : (name, value) => {
  if (/[^\t\u0020-\u007E\u0080-\u00FF]/.test(value)) {
    const error = new TypeError(`Invalid character in header content ["${name}"]`);
    Object.defineProperty(error, "code", { value: "ERR_INVALID_CHAR" });
    throw error;
  }
};
var Headers = class _Headers extends URLSearchParams {
  /**
   * Headers class
   *
   * @constructor
   * @param {HeadersInit} [init] - Response headers
   */
  constructor(init) {
    let result = [];
    if (init instanceof _Headers) {
      const raw = init.raw();
      for (const [name, values] of Object.entries(raw)) {
        result.push(...values.map((value) => [name, value]));
      }
    } else if (init == null) {
    } else if (typeof init === "object" && !types2.isBoxedPrimitive(init)) {
      const method = init[Symbol.iterator];
      if (method == null) {
        result.push(...Object.entries(init));
      } else {
        if (typeof method !== "function") {
          throw new TypeError("Header pairs must be iterable");
        }
        result = [...init].map((pair) => {
          if (typeof pair !== "object" || types2.isBoxedPrimitive(pair)) {
            throw new TypeError("Each header pair must be an iterable object");
          }
          return [...pair];
        }).map((pair) => {
          if (pair.length !== 2) {
            throw new TypeError("Each header pair must be a name/value tuple");
          }
          return [...pair];
        });
      }
    } else {
      throw new TypeError("Failed to construct 'Headers': The provided value is not of type '(sequence<sequence<ByteString>> or record<ByteString, ByteString>)");
    }
    result = result.length > 0 ? result.map(([name, value]) => {
      validateHeaderName(name);
      validateHeaderValue(name, String(value));
      return [String(name).toLowerCase(), String(value)];
    }) : void 0;
    super(result);
    return new Proxy(this, {
      get(target, p3, receiver) {
        switch (p3) {
          case "append":
          case "set":
            return (name, value) => {
              validateHeaderName(name);
              validateHeaderValue(name, String(value));
              return URLSearchParams.prototype[p3].call(
                target,
                String(name).toLowerCase(),
                String(value)
              );
            };
          case "delete":
          case "has":
          case "getAll":
            return (name) => {
              validateHeaderName(name);
              return URLSearchParams.prototype[p3].call(
                target,
                String(name).toLowerCase()
              );
            };
          case "keys":
            return () => {
              target.sort();
              return new Set(URLSearchParams.prototype.keys.call(target)).keys();
            };
          default:
            return Reflect.get(target, p3, receiver);
        }
      }
    });
  }
  get [Symbol.toStringTag]() {
    return this.constructor.name;
  }
  toString() {
    return Object.prototype.toString.call(this);
  }
  get(name) {
    const values = this.getAll(name);
    if (values.length === 0) {
      return null;
    }
    let value = values.join(", ");
    if (/^content-encoding$/i.test(name)) {
      value = value.toLowerCase();
    }
    return value;
  }
  forEach(callback, thisArg = void 0) {
    for (const name of this.keys()) {
      Reflect.apply(callback, thisArg, [this.get(name), name, this]);
    }
  }
  *values() {
    for (const name of this.keys()) {
      yield this.get(name);
    }
  }
  /**
   * @type {() => IterableIterator<[string, string]>}
   */
  *entries() {
    for (const name of this.keys()) {
      yield [name, this.get(name)];
    }
  }
  [Symbol.iterator]() {
    return this.entries();
  }
  /**
   * Node-fetch non-spec method
   * returning all headers and their values as array
   * @returns {Record<string, string[]>}
   */
  raw() {
    return [...this.keys()].reduce((result, key) => {
      result[key] = this.getAll(key);
      return result;
    }, {});
  }
  /**
   * For better console.log(headers) and also to convert Headers into Node.js Request compatible format
   */
  [Symbol.for("nodejs.util.inspect.custom")]() {
    return [...this.keys()].reduce((result, key) => {
      const values = this.getAll(key);
      if (key === "host") {
        result[key] = values[0];
      } else {
        result[key] = values.length > 1 ? values : values[0];
      }
      return result;
    }, {});
  }
};
Object.defineProperties(
  Headers.prototype,
  ["get", "entries", "forEach", "values"].reduce((result, property) => {
    result[property] = { enumerable: true };
    return result;
  }, {})
);
function fromRawHeaders(headers = []) {
  return new Headers(
    headers.reduce((result, value, index, array) => {
      if (index % 2 === 0) {
        result.push(array.slice(index, index + 2));
      }
      return result;
    }, []).filter(([name, value]) => {
      try {
        validateHeaderName(name);
        validateHeaderValue(name, String(value));
        return true;
      } catch {
        return false;
      }
    })
  );
}

// ../../node_modules/node-fetch/src/utils/is-redirect.js
init_esm();
var redirectStatus = /* @__PURE__ */ new Set([301, 302, 303, 307, 308]);
var isRedirect = (code) => {
  return redirectStatus.has(code);
};

// ../../node_modules/node-fetch/src/response.js
var INTERNALS2 = Symbol("Response internals");
var Response = class _Response extends Body {
  constructor(body = null, options = {}) {
    super(body, options);
    const status = options.status != null ? options.status : 200;
    const headers = new Headers(options.headers);
    if (body !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(body, this);
      if (contentType) {
        headers.append("Content-Type", contentType);
      }
    }
    this[INTERNALS2] = {
      type: "default",
      url: options.url,
      status,
      statusText: options.statusText || "",
      headers,
      counter: options.counter,
      highWaterMark: options.highWaterMark
    };
  }
  get type() {
    return this[INTERNALS2].type;
  }
  get url() {
    return this[INTERNALS2].url || "";
  }
  get status() {
    return this[INTERNALS2].status;
  }
  /**
   * Convenience property representing if the request ended normally
   */
  get ok() {
    return this[INTERNALS2].status >= 200 && this[INTERNALS2].status < 300;
  }
  get redirected() {
    return this[INTERNALS2].counter > 0;
  }
  get statusText() {
    return this[INTERNALS2].statusText;
  }
  get headers() {
    return this[INTERNALS2].headers;
  }
  get highWaterMark() {
    return this[INTERNALS2].highWaterMark;
  }
  /**
   * Clone this response
   *
   * @return  Response
   */
  clone() {
    return new _Response(clone(this, this.highWaterMark), {
      type: this.type,
      url: this.url,
      status: this.status,
      statusText: this.statusText,
      headers: this.headers,
      ok: this.ok,
      redirected: this.redirected,
      size: this.size,
      highWaterMark: this.highWaterMark
    });
  }
  /**
   * @param {string} url    The URL that the new response is to originate from.
   * @param {number} status An optional status code for the response (e.g., 302.)
   * @returns {Response}    A Response object.
   */
  static redirect(url, status = 302) {
    if (!isRedirect(status)) {
      throw new RangeError('Failed to execute "redirect" on "response": Invalid status code');
    }
    return new _Response(null, {
      headers: {
        location: new URL(url).toString()
      },
      status
    });
  }
  static error() {
    const response = new _Response(null, { status: 0, statusText: "" });
    response[INTERNALS2].type = "error";
    return response;
  }
  static json(data = void 0, init = {}) {
    const body = JSON.stringify(data);
    if (body === void 0) {
      throw new TypeError("data is not JSON serializable");
    }
    const headers = new Headers(init && init.headers);
    if (!headers.has("content-type")) {
      headers.set("content-type", "application/json");
    }
    return new _Response(body, {
      ...init,
      headers
    });
  }
  get [Symbol.toStringTag]() {
    return "Response";
  }
};
Object.defineProperties(Response.prototype, {
  type: { enumerable: true },
  url: { enumerable: true },
  status: { enumerable: true },
  ok: { enumerable: true },
  redirected: { enumerable: true },
  statusText: { enumerable: true },
  headers: { enumerable: true },
  clone: { enumerable: true }
});

// ../../node_modules/node-fetch/src/request.js
init_esm();
import { format as formatUrl } from "node:url";
import { deprecate as deprecate2 } from "node:util";

// ../../node_modules/node-fetch/src/utils/get-search.js
init_esm();
var getSearch = (parsedURL) => {
  if (parsedURL.search) {
    return parsedURL.search;
  }
  const lastOffset = parsedURL.href.length - 1;
  const hash = parsedURL.hash || (parsedURL.href[lastOffset] === "#" ? "#" : "");
  return parsedURL.href[lastOffset - hash.length] === "?" ? "?" : "";
};

// ../../node_modules/node-fetch/src/utils/referrer.js
init_esm();
import { isIP } from "node:net";
function stripURLForUseAsAReferrer(url, originOnly = false) {
  if (url == null) {
    return "no-referrer";
  }
  url = new URL(url);
  if (/^(about|blob|data):$/.test(url.protocol)) {
    return "no-referrer";
  }
  url.username = "";
  url.password = "";
  url.hash = "";
  if (originOnly) {
    url.pathname = "";
    url.search = "";
  }
  return url;
}
var ReferrerPolicy = /* @__PURE__ */ new Set([
  "",
  "no-referrer",
  "no-referrer-when-downgrade",
  "same-origin",
  "origin",
  "strict-origin",
  "origin-when-cross-origin",
  "strict-origin-when-cross-origin",
  "unsafe-url"
]);
var DEFAULT_REFERRER_POLICY = "strict-origin-when-cross-origin";
function validateReferrerPolicy(referrerPolicy) {
  if (!ReferrerPolicy.has(referrerPolicy)) {
    throw new TypeError(`Invalid referrerPolicy: ${referrerPolicy}`);
  }
  return referrerPolicy;
}
function isOriginPotentiallyTrustworthy(url) {
  if (/^(http|ws)s:$/.test(url.protocol)) {
    return true;
  }
  const hostIp = url.host.replace(/(^\[)|(]$)/g, "");
  const hostIPVersion = isIP(hostIp);
  if (hostIPVersion === 4 && /^127\./.test(hostIp)) {
    return true;
  }
  if (hostIPVersion === 6 && /^(((0+:){7})|(::(0+:){0,6}))0*1$/.test(hostIp)) {
    return true;
  }
  if (url.host === "localhost" || url.host.endsWith(".localhost")) {
    return false;
  }
  if (url.protocol === "file:") {
    return true;
  }
  return false;
}
function isUrlPotentiallyTrustworthy(url) {
  if (/^about:(blank|srcdoc)$/.test(url)) {
    return true;
  }
  if (url.protocol === "data:") {
    return true;
  }
  if (/^(blob|filesystem):$/.test(url.protocol)) {
    return true;
  }
  return isOriginPotentiallyTrustworthy(url);
}
function determineRequestsReferrer(request, { referrerURLCallback, referrerOriginCallback } = {}) {
  if (request.referrer === "no-referrer" || request.referrerPolicy === "") {
    return null;
  }
  const policy = request.referrerPolicy;
  if (request.referrer === "about:client") {
    return "no-referrer";
  }
  const referrerSource = request.referrer;
  let referrerURL = stripURLForUseAsAReferrer(referrerSource);
  let referrerOrigin = stripURLForUseAsAReferrer(referrerSource, true);
  if (referrerURL.toString().length > 4096) {
    referrerURL = referrerOrigin;
  }
  if (referrerURLCallback) {
    referrerURL = referrerURLCallback(referrerURL);
  }
  if (referrerOriginCallback) {
    referrerOrigin = referrerOriginCallback(referrerOrigin);
  }
  const currentURL = new URL(request.url);
  switch (policy) {
    case "no-referrer":
      return "no-referrer";
    case "origin":
      return referrerOrigin;
    case "unsafe-url":
      return referrerURL;
    case "strict-origin":
      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
        return "no-referrer";
      }
      return referrerOrigin.toString();
    case "strict-origin-when-cross-origin":
      if (referrerURL.origin === currentURL.origin) {
        return referrerURL;
      }
      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
        return "no-referrer";
      }
      return referrerOrigin;
    case "same-origin":
      if (referrerURL.origin === currentURL.origin) {
        return referrerURL;
      }
      return "no-referrer";
    case "origin-when-cross-origin":
      if (referrerURL.origin === currentURL.origin) {
        return referrerURL;
      }
      return referrerOrigin;
    case "no-referrer-when-downgrade":
      if (isUrlPotentiallyTrustworthy(referrerURL) && !isUrlPotentiallyTrustworthy(currentURL)) {
        return "no-referrer";
      }
      return referrerURL;
    default:
      throw new TypeError(`Invalid referrerPolicy: ${policy}`);
  }
}
function parseReferrerPolicyFromHeader(headers) {
  const policyTokens = (headers.get("referrer-policy") || "").split(/[,\s]+/);
  let policy = "";
  for (const token of policyTokens) {
    if (token && ReferrerPolicy.has(token)) {
      policy = token;
    }
  }
  return policy;
}

// ../../node_modules/node-fetch/src/request.js
var INTERNALS3 = Symbol("Request internals");
var isRequest = (object) => {
  return typeof object === "object" && typeof object[INTERNALS3] === "object";
};
var doBadDataWarn = deprecate2(
  () => {
  },
  ".data is not a valid RequestInit property, use .body instead",
  "https://github.com/node-fetch/node-fetch/issues/1000 (request)"
);
var Request = class _Request extends Body {
  constructor(input, init = {}) {
    let parsedURL;
    if (isRequest(input)) {
      parsedURL = new URL(input.url);
    } else {
      parsedURL = new URL(input);
      input = {};
    }
    if (parsedURL.username !== "" || parsedURL.password !== "") {
      throw new TypeError(`${parsedURL} is an url with embedded credentials.`);
    }
    let method = init.method || input.method || "GET";
    if (/^(delete|get|head|options|post|put)$/i.test(method)) {
      method = method.toUpperCase();
    }
    if (!isRequest(init) && "data" in init) {
      doBadDataWarn();
    }
    if ((init.body != null || isRequest(input) && input.body !== null) && (method === "GET" || method === "HEAD")) {
      throw new TypeError("Request with GET/HEAD method cannot have body");
    }
    const inputBody = init.body ? init.body : isRequest(input) && input.body !== null ? clone(input) : null;
    super(inputBody, {
      size: init.size || input.size || 0
    });
    const headers = new Headers(init.headers || input.headers || {});
    if (inputBody !== null && !headers.has("Content-Type")) {
      const contentType = extractContentType(inputBody, this);
      if (contentType) {
        headers.set("Content-Type", contentType);
      }
    }
    let signal = isRequest(input) ? input.signal : null;
    if ("signal" in init) {
      signal = init.signal;
    }
    if (signal != null && !isAbortSignal(signal)) {
      throw new TypeError("Expected signal to be an instanceof AbortSignal or EventTarget");
    }
    let referrer = init.referrer == null ? input.referrer : init.referrer;
    if (referrer === "") {
      referrer = "no-referrer";
    } else if (referrer) {
      const parsedReferrer = new URL(referrer);
      referrer = /^about:(\/\/)?client$/.test(parsedReferrer) ? "client" : parsedReferrer;
    } else {
      referrer = void 0;
    }
    this[INTERNALS3] = {
      method,
      redirect: init.redirect || input.redirect || "follow",
      headers,
      parsedURL,
      signal,
      referrer
    };
    this.follow = init.follow === void 0 ? input.follow === void 0 ? 20 : input.follow : init.follow;
    this.compress = init.compress === void 0 ? input.compress === void 0 ? true : input.compress : init.compress;
    this.counter = init.counter || input.counter || 0;
    this.agent = init.agent || input.agent;
    this.highWaterMark = init.highWaterMark || input.highWaterMark || 16384;
    this.insecureHTTPParser = init.insecureHTTPParser || input.insecureHTTPParser || false;
    this.referrerPolicy = init.referrerPolicy || input.referrerPolicy || "";
  }
  /** @returns {string} */
  get method() {
    return this[INTERNALS3].method;
  }
  /** @returns {string} */
  get url() {
    return formatUrl(this[INTERNALS3].parsedURL);
  }
  /** @returns {Headers} */
  get headers() {
    return this[INTERNALS3].headers;
  }
  get redirect() {
    return this[INTERNALS3].redirect;
  }
  /** @returns {AbortSignal} */
  get signal() {
    return this[INTERNALS3].signal;
  }
  // https://fetch.spec.whatwg.org/#dom-request-referrer
  get referrer() {
    if (this[INTERNALS3].referrer === "no-referrer") {
      return "";
    }
    if (this[INTERNALS3].referrer === "client") {
      return "about:client";
    }
    if (this[INTERNALS3].referrer) {
      return this[INTERNALS3].referrer.toString();
    }
    return void 0;
  }
  get referrerPolicy() {
    return this[INTERNALS3].referrerPolicy;
  }
  set referrerPolicy(referrerPolicy) {
    this[INTERNALS3].referrerPolicy = validateReferrerPolicy(referrerPolicy);
  }
  /**
   * Clone this request
   *
   * @return  Request
   */
  clone() {
    return new _Request(this);
  }
  get [Symbol.toStringTag]() {
    return "Request";
  }
};
Object.defineProperties(Request.prototype, {
  method: { enumerable: true },
  url: { enumerable: true },
  headers: { enumerable: true },
  redirect: { enumerable: true },
  clone: { enumerable: true },
  signal: { enumerable: true },
  referrer: { enumerable: true },
  referrerPolicy: { enumerable: true }
});
var getNodeRequestOptions = (request) => {
  const { parsedURL } = request[INTERNALS3];
  const headers = new Headers(request[INTERNALS3].headers);
  if (!headers.has("Accept")) {
    headers.set("Accept", "*/*");
  }
  let contentLengthValue = null;
  if (request.body === null && /^(post|put)$/i.test(request.method)) {
    contentLengthValue = "0";
  }
  if (request.body !== null) {
    const totalBytes = getTotalBytes(request);
    if (typeof totalBytes === "number" && !Number.isNaN(totalBytes)) {
      contentLengthValue = String(totalBytes);
    }
  }
  if (contentLengthValue) {
    headers.set("Content-Length", contentLengthValue);
  }
  if (request.referrerPolicy === "") {
    request.referrerPolicy = DEFAULT_REFERRER_POLICY;
  }
  if (request.referrer && request.referrer !== "no-referrer") {
    request[INTERNALS3].referrer = determineRequestsReferrer(request);
  } else {
    request[INTERNALS3].referrer = "no-referrer";
  }
  if (request[INTERNALS3].referrer instanceof URL) {
    headers.set("Referer", request.referrer);
  }
  if (!headers.has("User-Agent")) {
    headers.set("User-Agent", "node-fetch");
  }
  if (request.compress && !headers.has("Accept-Encoding")) {
    headers.set("Accept-Encoding", "gzip, deflate, br");
  }
  let { agent } = request;
  if (typeof agent === "function") {
    agent = agent(parsedURL);
  }
  const search = getSearch(parsedURL);
  const options = {
    // Overwrite search to retain trailing ? (issue #776)
    path: parsedURL.pathname + search,
    // The following options are not expressed in the URL
    method: request.method,
    headers: headers[Symbol.for("nodejs.util.inspect.custom")](),
    insecureHTTPParser: request.insecureHTTPParser,
    agent
  };
  return {
    /** @type {URL} */
    parsedURL,
    options
  };
};

// ../../node_modules/node-fetch/src/errors/abort-error.js
init_esm();
var AbortError = class extends FetchBaseError {
  constructor(message, type = "aborted") {
    super(message, type);
  }
};

// ../../node_modules/node-fetch/src/index.js
var supportedSchemas = /* @__PURE__ */ new Set(["data:", "http:", "https:"]);
async function fetch2(url, options_) {
  return new Promise((resolve, reject) => {
    const request = new Request(url, options_);
    const { parsedURL, options } = getNodeRequestOptions(request);
    if (!supportedSchemas.has(parsedURL.protocol)) {
      throw new TypeError(`node-fetch cannot load ${url}. URL scheme "${parsedURL.protocol.replace(/:$/, "")}" is not supported.`);
    }
    if (parsedURL.protocol === "data:") {
      const data = dist_default(request.url);
      const response2 = new Response(data, { headers: { "Content-Type": data.typeFull } });
      resolve(response2);
      return;
    }
    const send = (parsedURL.protocol === "https:" ? https : http2).request;
    const { signal } = request;
    let response = null;
    const abort = () => {
      const error = new AbortError("The operation was aborted.");
      reject(error);
      if (request.body && request.body instanceof Stream2.Readable) {
        request.body.destroy(error);
      }
      if (!response || !response.body) {
        return;
      }
      response.body.emit("error", error);
    };
    if (signal && signal.aborted) {
      abort();
      return;
    }
    const abortAndFinalize = () => {
      abort();
      finalize();
    };
    const request_ = send(parsedURL.toString(), options);
    if (signal) {
      signal.addEventListener("abort", abortAndFinalize);
    }
    const finalize = () => {
      request_.abort();
      if (signal) {
        signal.removeEventListener("abort", abortAndFinalize);
      }
    };
    request_.on("error", (error) => {
      reject(new FetchError(`request to ${request.url} failed, reason: ${error.message}`, "system", error));
      finalize();
    });
    fixResponseChunkedTransferBadEnding(request_, (error) => {
      if (response && response.body) {
        response.body.destroy(error);
      }
    });
    if (process.version < "v14") {
      request_.on("socket", (s3) => {
        let endedWithEventsCount;
        s3.prependListener("end", () => {
          endedWithEventsCount = s3._eventsCount;
        });
        s3.prependListener("close", (hadError) => {
          if (response && endedWithEventsCount < s3._eventsCount && !hadError) {
            const error = new Error("Premature close");
            error.code = "ERR_STREAM_PREMATURE_CLOSE";
            response.body.emit("error", error);
          }
        });
      });
    }
    request_.on("response", (response_) => {
      request_.setTimeout(0);
      const headers = fromRawHeaders(response_.rawHeaders);
      if (isRedirect(response_.statusCode)) {
        const location = headers.get("Location");
        let locationURL = null;
        try {
          locationURL = location === null ? null : new URL(location, request.url);
        } catch {
          if (request.redirect !== "manual") {
            reject(new FetchError(`uri requested responds with an invalid redirect URL: ${location}`, "invalid-redirect"));
            finalize();
            return;
          }
        }
        switch (request.redirect) {
          case "error":
            reject(new FetchError(`uri requested responds with a redirect, redirect mode is set to error: ${request.url}`, "no-redirect"));
            finalize();
            return;
          case "manual":
            break;
          case "follow": {
            if (locationURL === null) {
              break;
            }
            if (request.counter >= request.follow) {
              reject(new FetchError(`maximum redirect reached at: ${request.url}`, "max-redirect"));
              finalize();
              return;
            }
            const requestOptions = {
              headers: new Headers(request.headers),
              follow: request.follow,
              counter: request.counter + 1,
              agent: request.agent,
              compress: request.compress,
              method: request.method,
              body: clone(request),
              signal: request.signal,
              size: request.size,
              referrer: request.referrer,
              referrerPolicy: request.referrerPolicy
            };
            if (!isDomainOrSubdomain(request.url, locationURL) || !isSameProtocol(request.url, locationURL)) {
              for (const name of ["authorization", "www-authenticate", "cookie", "cookie2"]) {
                requestOptions.headers.delete(name);
              }
            }
            if (response_.statusCode !== 303 && request.body && options_.body instanceof Stream2.Readable) {
              reject(new FetchError("Cannot follow redirect with body being a readable stream", "unsupported-redirect"));
              finalize();
              return;
            }
            if (response_.statusCode === 303 || (response_.statusCode === 301 || response_.statusCode === 302) && request.method === "POST") {
              requestOptions.method = "GET";
              requestOptions.body = void 0;
              requestOptions.headers.delete("content-length");
            }
            const responseReferrerPolicy = parseReferrerPolicyFromHeader(headers);
            if (responseReferrerPolicy) {
              requestOptions.referrerPolicy = responseReferrerPolicy;
            }
            resolve(fetch2(new Request(locationURL, requestOptions)));
            finalize();
            return;
          }
          default:
            return reject(new TypeError(`Redirect option '${request.redirect}' is not a valid value of RequestRedirect`));
        }
      }
      if (signal) {
        response_.once("end", () => {
          signal.removeEventListener("abort", abortAndFinalize);
        });
      }
      let body = pump(response_, new PassThrough2(), (error) => {
        if (error) {
          reject(error);
        }
      });
      if (process.version < "v12.10") {
        response_.on("aborted", abortAndFinalize);
      }
      const responseOptions = {
        url: request.url,
        status: response_.statusCode,
        statusText: response_.statusMessage,
        headers,
        size: request.size,
        counter: request.counter,
        highWaterMark: request.highWaterMark
      };
      const codings = headers.get("Content-Encoding");
      if (!request.compress || request.method === "HEAD" || codings === null || response_.statusCode === 204 || response_.statusCode === 304) {
        response = new Response(body, responseOptions);
        resolve(response);
        return;
      }
      const zlibOptions = {
        flush: zlib.Z_SYNC_FLUSH,
        finishFlush: zlib.Z_SYNC_FLUSH
      };
      if (codings === "gzip" || codings === "x-gzip") {
        body = pump(body, zlib.createGunzip(zlibOptions), (error) => {
          if (error) {
            reject(error);
          }
        });
        response = new Response(body, responseOptions);
        resolve(response);
        return;
      }
      if (codings === "deflate" || codings === "x-deflate") {
        const raw = pump(response_, new PassThrough2(), (error) => {
          if (error) {
            reject(error);
          }
        });
        raw.once("data", (chunk) => {
          if ((chunk[0] & 15) === 8) {
            body = pump(body, zlib.createInflate(), (error) => {
              if (error) {
                reject(error);
              }
            });
          } else {
            body = pump(body, zlib.createInflateRaw(), (error) => {
              if (error) {
                reject(error);
              }
            });
          }
          response = new Response(body, responseOptions);
          resolve(response);
        });
        raw.once("end", () => {
          if (!response) {
            response = new Response(body, responseOptions);
            resolve(response);
          }
        });
        return;
      }
      if (codings === "br") {
        body = pump(body, zlib.createBrotliDecompress(), (error) => {
          if (error) {
            reject(error);
          }
        });
        response = new Response(body, responseOptions);
        resolve(response);
        return;
      }
      response = new Response(body, responseOptions);
      resolve(response);
    });
    writeToStream(request_, request).catch(reject);
  });
}
function fixResponseChunkedTransferBadEnding(request, errorCallback) {
  const LAST_CHUNK = Buffer3.from("0\r\n\r\n");
  let isChunkedTransfer = false;
  let properLastChunkReceived = false;
  let previousChunk;
  request.on("response", (response) => {
    const { headers } = response;
    isChunkedTransfer = headers["transfer-encoding"] === "chunked" && !headers["content-length"];
  });
  request.on("socket", (socket) => {
    const onSocketClose = () => {
      if (isChunkedTransfer && !properLastChunkReceived) {
        const error = new Error("Premature close");
        error.code = "ERR_STREAM_PREMATURE_CLOSE";
        errorCallback(error);
      }
    };
    const onData = (buf) => {
      properLastChunkReceived = Buffer3.compare(buf.slice(-5), LAST_CHUNK) === 0;
      if (!properLastChunkReceived && previousChunk) {
        properLastChunkReceived = Buffer3.compare(previousChunk.slice(-3), LAST_CHUNK.slice(0, 3)) === 0 && Buffer3.compare(buf.slice(-2), LAST_CHUNK.slice(3)) === 0;
      }
      previousChunk = buf;
    };
    socket.prependListener("close", onSocketClose);
    socket.on("data", onData);
    request.on("close", () => {
      socket.removeListener("close", onSocketClose);
      socket.removeListener("data", onData);
    });
  });
}

// ../../node_modules/ts-pattern/dist/index.js
init_esm();
var t = Symbol.for("@ts-pattern/matcher");
var e = Symbol.for("@ts-pattern/isVariadic");
var n = "@ts-pattern/anonymous-select-key";
var r = (t3) => Boolean(t3 && "object" == typeof t3);
var i = (e3) => e3 && !!e3[t];
var s = (n3, o3, c3) => {
  if (i(n3)) {
    const e3 = n3[t](), { matched: r3, selections: i3 } = e3.match(o3);
    return r3 && i3 && Object.keys(i3).forEach((t3) => c3(t3, i3[t3])), r3;
  }
  if (r(n3)) {
    if (!r(o3)) return false;
    if (Array.isArray(n3)) {
      if (!Array.isArray(o3)) return false;
      let t3 = [], r3 = [], a2 = [];
      for (const s3 of n3.keys()) {
        const o4 = n3[s3];
        i(o4) && o4[e] ? a2.push(o4) : a2.length ? r3.push(o4) : t3.push(o4);
      }
      if (a2.length) {
        if (a2.length > 1) throw new Error("Pattern error: Using `...P.array(...)` several times in a single pattern is not allowed.");
        if (o3.length < t3.length + r3.length) return false;
        const e3 = o3.slice(0, t3.length), n4 = 0 === r3.length ? [] : o3.slice(-r3.length), i3 = o3.slice(t3.length, 0 === r3.length ? Infinity : -r3.length);
        return t3.every((t4, n5) => s(t4, e3[n5], c3)) && r3.every((t4, e4) => s(t4, n4[e4], c3)) && (0 === a2.length || s(a2[0], i3, c3));
      }
      return n3.length === o3.length && n3.every((t4, e3) => s(t4, o3[e3], c3));
    }
    return Reflect.ownKeys(n3).every((e3) => {
      const r3 = n3[e3];
      return (e3 in o3 || i(a2 = r3) && "optional" === a2[t]().matcherType) && s(r3, o3[e3], c3);
      var a2;
    });
  }
  return Object.is(o3, n3);
};
var o = (e3) => {
  var n3, s3, a2;
  return r(e3) ? i(e3) ? null != (n3 = null == (s3 = (a2 = e3[t]()).getSelectionKeys) ? void 0 : s3.call(a2)) ? n3 : [] : Array.isArray(e3) ? c(e3, o) : c(Object.values(e3), o) : [];
};
var c = (t3, e3) => t3.reduce((t4, n3) => t4.concat(e3(n3)), []);
function u(t3) {
  return Object.assign(t3, { optional: () => h(t3), and: (e3) => m(t3, e3), or: (e3) => d(t3, e3), select: (e3) => void 0 === e3 ? y(t3) : y(e3, t3) });
}
function h(e3) {
  return u({ [t]: () => ({ match: (t3) => {
    let n3 = {};
    const r3 = (t4, e4) => {
      n3[t4] = e4;
    };
    return void 0 === t3 ? (o(e3).forEach((t4) => r3(t4, void 0)), { matched: true, selections: n3 }) : { matched: s(e3, t3, r3), selections: n3 };
  }, getSelectionKeys: () => o(e3), matcherType: "optional" }) });
}
function m(...e3) {
  return u({ [t]: () => ({ match: (t3) => {
    let n3 = {};
    const r3 = (t4, e4) => {
      n3[t4] = e4;
    };
    return { matched: e3.every((e4) => s(e4, t3, r3)), selections: n3 };
  }, getSelectionKeys: () => c(e3, o), matcherType: "and" }) });
}
function d(...e3) {
  return u({ [t]: () => ({ match: (t3) => {
    let n3 = {};
    const r3 = (t4, e4) => {
      n3[t4] = e4;
    };
    return c(e3, o).forEach((t4) => r3(t4, void 0)), { matched: e3.some((e4) => s(e4, t3, r3)), selections: n3 };
  }, getSelectionKeys: () => c(e3, o), matcherType: "or" }) });
}
function p(e3) {
  return { [t]: () => ({ match: (t3) => ({ matched: Boolean(e3(t3)) }) }) };
}
function y(...e3) {
  const r3 = "string" == typeof e3[0] ? e3[0] : void 0, i3 = 2 === e3.length ? e3[1] : "string" == typeof e3[0] ? void 0 : e3[0];
  return u({ [t]: () => ({ match: (t3) => {
    let e4 = { [null != r3 ? r3 : n]: t3 };
    return { matched: void 0 === i3 || s(i3, t3, (t4, n3) => {
      e4[t4] = n3;
    }), selections: e4 };
  }, getSelectionKeys: () => [null != r3 ? r3 : n].concat(void 0 === i3 ? [] : o(i3)) }) });
}
function v(t3) {
  return "number" == typeof t3;
}
function b(t3) {
  return "string" == typeof t3;
}
function w(t3) {
  return "bigint" == typeof t3;
}
var S = u(p(function(t3) {
  return true;
}));
var j = (t3) => Object.assign(u(t3), { startsWith: (e3) => {
  return j(m(t3, (n3 = e3, p((t4) => b(t4) && t4.startsWith(n3)))));
  var n3;
}, endsWith: (e3) => {
  return j(m(t3, (n3 = e3, p((t4) => b(t4) && t4.endsWith(n3)))));
  var n3;
}, minLength: (e3) => j(m(t3, ((t4) => p((e4) => b(e4) && e4.length >= t4))(e3))), length: (e3) => j(m(t3, ((t4) => p((e4) => b(e4) && e4.length === t4))(e3))), maxLength: (e3) => j(m(t3, ((t4) => p((e4) => b(e4) && e4.length <= t4))(e3))), includes: (e3) => {
  return j(m(t3, (n3 = e3, p((t4) => b(t4) && t4.includes(n3)))));
  var n3;
}, regex: (e3) => {
  return j(m(t3, (n3 = e3, p((t4) => b(t4) && Boolean(t4.match(n3))))));
  var n3;
} });
var K = j(p(b));
var x = (t3) => Object.assign(u(t3), { between: (e3, n3) => x(m(t3, ((t4, e4) => p((n4) => v(n4) && t4 <= n4 && e4 >= n4))(e3, n3))), lt: (e3) => x(m(t3, ((t4) => p((e4) => v(e4) && e4 < t4))(e3))), gt: (e3) => x(m(t3, ((t4) => p((e4) => v(e4) && e4 > t4))(e3))), lte: (e3) => x(m(t3, ((t4) => p((e4) => v(e4) && e4 <= t4))(e3))), gte: (e3) => x(m(t3, ((t4) => p((e4) => v(e4) && e4 >= t4))(e3))), int: () => x(m(t3, p((t4) => v(t4) && Number.isInteger(t4)))), finite: () => x(m(t3, p((t4) => v(t4) && Number.isFinite(t4)))), positive: () => x(m(t3, p((t4) => v(t4) && t4 > 0))), negative: () => x(m(t3, p((t4) => v(t4) && t4 < 0))) });
var E = x(p(v));
var A = (t3) => Object.assign(u(t3), { between: (e3, n3) => A(m(t3, ((t4, e4) => p((n4) => w(n4) && t4 <= n4 && e4 >= n4))(e3, n3))), lt: (e3) => A(m(t3, ((t4) => p((e4) => w(e4) && e4 < t4))(e3))), gt: (e3) => A(m(t3, ((t4) => p((e4) => w(e4) && e4 > t4))(e3))), lte: (e3) => A(m(t3, ((t4) => p((e4) => w(e4) && e4 <= t4))(e3))), gte: (e3) => A(m(t3, ((t4) => p((e4) => w(e4) && e4 >= t4))(e3))), positive: () => A(m(t3, p((t4) => w(t4) && t4 > 0))), negative: () => A(m(t3, p((t4) => w(t4) && t4 < 0))) });
var P = A(p(w));
var T = u(p(function(t3) {
  return "boolean" == typeof t3;
}));
var B = u(p(function(t3) {
  return "symbol" == typeof t3;
}));
var _ = u(p(function(t3) {
  return null == t3;
}));
var k = u(p(function(t3) {
  return null != t3;
}));
var W = class extends Error {
  constructor(t3) {
    let e3;
    try {
      e3 = JSON.stringify(t3);
    } catch (n3) {
      e3 = t3;
    }
    super(`Pattern matching error: no pattern matches value ${e3}`), this.input = void 0, this.input = t3;
  }
};
var $2 = { matched: false, value: void 0 };
function z2(t3) {
  return new I(t3, $2);
}
var I = class _I {
  constructor(t3, e3) {
    this.input = void 0, this.state = void 0, this.input = t3, this.state = e3;
  }
  with(...t3) {
    if (this.state.matched) return this;
    const e3 = t3[t3.length - 1], r3 = [t3[0]];
    let i3;
    3 === t3.length && "function" == typeof t3[1] ? i3 = t3[1] : t3.length > 2 && r3.push(...t3.slice(1, t3.length - 1));
    let o3 = false, c3 = {};
    const a2 = (t4, e4) => {
      o3 = true, c3[t4] = e4;
    }, u3 = !r3.some((t4) => s(t4, this.input, a2)) || i3 && !Boolean(i3(this.input)) ? $2 : { matched: true, value: e3(o3 ? n in c3 ? c3[n] : c3 : this.input, this.input) };
    return new _I(this.input, u3);
  }
  when(t3, e3) {
    if (this.state.matched) return this;
    const n3 = Boolean(t3(this.input));
    return new _I(this.input, n3 ? { matched: true, value: e3(this.input, this.input) } : $2);
  }
  otherwise(t3) {
    return this.state.matched ? this.state.value : t3(this.input);
  }
  exhaustive() {
    if (this.state.matched) return this.state.value;
    throw new W(this.input);
  }
  run() {
    return this.exhaustive();
  }
  returnType() {
    return this;
  }
};

// types/document-visibility.ts
init_esm();
import { DocumentVisibility as DocumentVisibilityEnum } from "@prisma/client";
var ZDocumentVisibilitySchema = z.nativeEnum(DocumentVisibilityEnum);
var DocumentVisibility = ZDocumentVisibilitySchema.enum;

// ../prisma/index.ts
init_esm();
import { PrismaClient } from "@prisma/client";

// ../../node_modules/kysely/dist/esm/kysely.js
init_esm();

// ../../node_modules/kysely/dist/esm/schema/schema.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/alter-table-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/util/object-utils.js
init_esm();
function isUndefined(obj) {
  return typeof obj === "undefined" || obj === void 0;
}
function isString(obj) {
  return typeof obj === "string";
}
function isNumber(obj) {
  return typeof obj === "number";
}
function isBoolean(obj) {
  return typeof obj === "boolean";
}
function isNull(obj) {
  return obj === null;
}
function isDate(obj) {
  return obj instanceof Date;
}
function isBigInt(obj) {
  return typeof obj === "bigint";
}
function isFunction(obj) {
  return typeof obj === "function";
}
function isObject(obj) {
  return typeof obj === "object" && obj !== null;
}
function freeze(obj) {
  return Object.freeze(obj);
}
function isReadonlyArray(arg) {
  return Array.isArray(arg);
}
function noop(obj) {
  return obj;
}

// ../../node_modules/kysely/dist/esm/operation-node/alter-table-node.js
var AlterTableNode = freeze({
  is(node) {
    return node.kind === "AlterTableNode";
  },
  create(table) {
    return freeze({
      kind: "AlterTableNode",
      table
    });
  },
  cloneWithTableProps(node, props) {
    return freeze({
      ...node,
      ...props
    });
  },
  cloneWithColumnAlteration(node, columnAlteration) {
    return freeze({
      ...node,
      columnAlterations: node.columnAlterations ? [...node.columnAlterations, columnAlteration] : [columnAlteration]
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/create-index-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/identifier-node.js
init_esm();
var IdentifierNode = freeze({
  is(node) {
    return node.kind === "IdentifierNode";
  },
  create(name) {
    return freeze({
      kind: "IdentifierNode",
      name
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/create-index-node.js
var CreateIndexNode = freeze({
  is(node) {
    return node.kind === "CreateIndexNode";
  },
  create(name) {
    return freeze({
      kind: "CreateIndexNode",
      name: IdentifierNode.create(name)
    });
  },
  cloneWith(node, props) {
    return freeze({
      ...node,
      ...props
    });
  },
  cloneWithColumns(node, columns) {
    return freeze({
      ...node,
      columns: [...node.columns || [], ...columns]
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/create-schema-node.js
init_esm();
var CreateSchemaNode = freeze({
  is(node) {
    return node.kind === "CreateSchemaNode";
  },
  create(schema, params) {
    return freeze({
      kind: "CreateSchemaNode",
      schema: IdentifierNode.create(schema),
      ...params
    });
  },
  cloneWith(createSchema, params) {
    return freeze({
      ...createSchema,
      ...params
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/create-table-node.js
init_esm();
var ON_COMMIT_ACTIONS = ["preserve rows", "delete rows", "drop"];
var CreateTableNode = freeze({
  is(node) {
    return node.kind === "CreateTableNode";
  },
  create(table) {
    return freeze({
      kind: "CreateTableNode",
      table,
      columns: freeze([])
    });
  },
  cloneWithColumn(createTable, column) {
    return freeze({
      ...createTable,
      columns: freeze([...createTable.columns, column])
    });
  },
  cloneWithConstraint(createTable, constraint) {
    return freeze({
      ...createTable,
      constraints: createTable.constraints ? freeze([...createTable.constraints, constraint]) : freeze([constraint])
    });
  },
  cloneWithFrontModifier(createTable, modifier) {
    return freeze({
      ...createTable,
      frontModifiers: createTable.frontModifiers ? freeze([...createTable.frontModifiers, modifier]) : freeze([modifier])
    });
  },
  cloneWithEndModifier(createTable, modifier) {
    return freeze({
      ...createTable,
      endModifiers: createTable.endModifiers ? freeze([...createTable.endModifiers, modifier]) : freeze([modifier])
    });
  },
  cloneWith(createTable, params) {
    return freeze({
      ...createTable,
      ...params
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/drop-index-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/schemable-identifier-node.js
init_esm();
var SchemableIdentifierNode = freeze({
  is(node) {
    return node.kind === "SchemableIdentifierNode";
  },
  create(identifier) {
    return freeze({
      kind: "SchemableIdentifierNode",
      identifier: IdentifierNode.create(identifier)
    });
  },
  createWithSchema(schema, identifier) {
    return freeze({
      kind: "SchemableIdentifierNode",
      schema: IdentifierNode.create(schema),
      identifier: IdentifierNode.create(identifier)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/drop-index-node.js
var DropIndexNode = freeze({
  is(node) {
    return node.kind === "DropIndexNode";
  },
  create(name, params) {
    return freeze({
      kind: "DropIndexNode",
      name: SchemableIdentifierNode.create(name),
      ...params
    });
  },
  cloneWith(dropIndex, props) {
    return freeze({
      ...dropIndex,
      ...props
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/drop-schema-node.js
init_esm();
var DropSchemaNode = freeze({
  is(node) {
    return node.kind === "DropSchemaNode";
  },
  create(schema, params) {
    return freeze({
      kind: "DropSchemaNode",
      schema: IdentifierNode.create(schema),
      ...params
    });
  },
  cloneWith(dropSchema, params) {
    return freeze({
      ...dropSchema,
      ...params
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/drop-table-node.js
init_esm();
var DropTableNode = freeze({
  is(node) {
    return node.kind === "DropTableNode";
  },
  create(table, params) {
    return freeze({
      kind: "DropTableNode",
      table,
      ...params
    });
  },
  cloneWith(dropIndex, params) {
    return freeze({
      ...dropIndex,
      ...params
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/table-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/alias-node.js
init_esm();
var AliasNode = freeze({
  is(node) {
    return node.kind === "AliasNode";
  },
  create(node, alias) {
    return freeze({
      kind: "AliasNode",
      node,
      alias
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/table-node.js
init_esm();
var TableNode = freeze({
  is(node) {
    return node.kind === "TableNode";
  },
  create(table) {
    return freeze({
      kind: "TableNode",
      table: SchemableIdentifierNode.create(table)
    });
  },
  createWithSchema(schema, table) {
    return freeze({
      kind: "TableNode",
      table: SchemableIdentifierNode.createWithSchema(schema, table)
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/expression-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/expression/expression.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/operation-node-source.js
init_esm();
function isOperationNodeSource(obj) {
  return isObject(obj) && isFunction(obj.toOperationNode);
}

// ../../node_modules/kysely/dist/esm/expression/expression.js
function isExpression(obj) {
  return isObject(obj) && "expressionType" in obj && isOperationNodeSource(obj);
}
function isAliasedExpression(obj) {
  return isObject(obj) && "expression" in obj && isString(obj.alias) && isOperationNodeSource(obj);
}

// ../../node_modules/kysely/dist/esm/expression/expression-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/query-builder/select-query-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/select-modifier-node.js
init_esm();
var SelectModifierNode = freeze({
  is(node) {
    return node.kind === "SelectModifierNode";
  },
  create(modifier) {
    return freeze({
      kind: "SelectModifierNode",
      modifier
    });
  },
  createWithExpression(modifier) {
    return freeze({
      kind: "SelectModifierNode",
      rawModifier: modifier
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/join-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/join-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/on-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/and-node.js
init_esm();
var AndNode = freeze({
  is(node) {
    return node.kind === "AndNode";
  },
  create(left, right) {
    return freeze({
      kind: "AndNode",
      left,
      right
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/or-node.js
init_esm();
var OrNode = freeze({
  is(node) {
    return node.kind === "OrNode";
  },
  create(left, right) {
    return freeze({
      kind: "OrNode",
      left,
      right
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/on-node.js
var OnNode = freeze({
  is(node) {
    return node.kind === "OnNode";
  },
  create(filter) {
    return freeze({
      kind: "OnNode",
      on: filter
    });
  },
  cloneWithOperation(onNode, operator, operation) {
    return freeze({
      ...onNode,
      on: operator === "And" ? AndNode.create(onNode.on, operation) : OrNode.create(onNode.on, operation)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/join-node.js
var JoinNode = freeze({
  is(node) {
    return node.kind === "JoinNode";
  },
  create(joinType, table) {
    return freeze({
      kind: "JoinNode",
      joinType,
      table,
      on: void 0
    });
  },
  createWithOn(joinType, table, on) {
    return freeze({
      kind: "JoinNode",
      joinType,
      table,
      on: OnNode.create(on)
    });
  },
  cloneWithOn(joinNode, operation) {
    return freeze({
      ...joinNode,
      on: joinNode.on ? OnNode.cloneWithOperation(joinNode.on, "And", operation) : OnNode.create(operation)
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/binary-operation-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/binary-operation-node.js
init_esm();
var BinaryOperationNode = freeze({
  is(node) {
    return node.kind === "BinaryOperationNode";
  },
  create(leftOperand, operator, rightOperand) {
    return freeze({
      kind: "BinaryOperationNode",
      leftOperand,
      operator,
      rightOperand
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/operator-node.js
init_esm();
var COMPARISON_OPERATORS = [
  "=",
  "==",
  "!=",
  "<>",
  ">",
  ">=",
  "<",
  "<=",
  "in",
  "not in",
  "is",
  "is not",
  "like",
  "not like",
  "match",
  "ilike",
  "not ilike",
  "@>",
  "<@",
  "&&",
  "?",
  "?&",
  "!<",
  "!>",
  "<=>",
  "!~",
  "~",
  "~*",
  "!~*",
  "@@",
  "@@@",
  "!!",
  "<->",
  "regexp"
];
var ARITHMETIC_OPERATORS = [
  "+",
  "-",
  "*",
  "/",
  "%",
  "^",
  "&",
  "|",
  "#",
  "<<",
  ">>"
];
var JSON_OPERATORS = ["->", "->>"];
var BINARY_OPERATORS = [
  ...COMPARISON_OPERATORS,
  ...ARITHMETIC_OPERATORS,
  "&&",
  "||"
];
var UNARY_FILTER_OPERATORS = ["exists", "not exists"];
var UNARY_OPERATORS = ["not", "-", ...UNARY_FILTER_OPERATORS];
var OPERATORS = [
  ...BINARY_OPERATORS,
  ...JSON_OPERATORS,
  ...UNARY_OPERATORS,
  "between",
  "between symmetric"
];
var OperatorNode = freeze({
  is(node) {
    return node.kind === "OperatorNode";
  },
  create(operator) {
    return freeze({
      kind: "OperatorNode",
      operator
    });
  }
});
function isJSONOperator(op) {
  return isString(op) && JSON_OPERATORS.includes(op);
}

// ../../node_modules/kysely/dist/esm/parser/reference-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/column-node.js
init_esm();
var ColumnNode = freeze({
  is(node) {
    return node.kind === "ColumnNode";
  },
  create(column) {
    return freeze({
      kind: "ColumnNode",
      column: IdentifierNode.create(column)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/reference-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/select-all-node.js
init_esm();
var SelectAllNode = freeze({
  is(node) {
    return node.kind === "SelectAllNode";
  },
  create() {
    return freeze({
      kind: "SelectAllNode"
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/reference-node.js
var ReferenceNode = freeze({
  is(node) {
    return node.kind === "ReferenceNode";
  },
  create(column, table) {
    return freeze({
      kind: "ReferenceNode",
      table,
      column
    });
  },
  createSelectAll(table) {
    return freeze({
      kind: "ReferenceNode",
      table,
      column: SelectAllNode.create()
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/order-by-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/dynamic/dynamic-reference-builder.js
init_esm();
var DynamicReferenceBuilder = class {
  #dynamicReference;
  get dynamicReference() {
    return this.#dynamicReference;
  }
  /**
   * @private
   *
   * This needs to be here just so that the typings work. Without this
   * the generated .d.ts file contains no reference to the type param R
   * which causes this type to be equal to DynamicReferenceBuilder with
   * any R.
   */
  get refType() {
    return void 0;
  }
  constructor(reference) {
    this.#dynamicReference = reference;
  }
  toOperationNode() {
    return parseSimpleReferenceExpression(this.#dynamicReference);
  }
};
function isDynamicReferenceBuilder(obj) {
  return isObject(obj) && isOperationNodeSource(obj) && isString(obj.dynamicReference);
}

// ../../node_modules/kysely/dist/esm/operation-node/order-by-item-node.js
init_esm();
var OrderByItemNode = freeze({
  is(node) {
    return node.kind === "OrderByItemNode";
  },
  create(orderBy, direction) {
    return freeze({
      kind: "OrderByItemNode",
      orderBy,
      direction
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/raw-node.js
init_esm();
var RawNode = freeze({
  is(node) {
    return node.kind === "RawNode";
  },
  create(sqlFragments, parameters) {
    return freeze({
      kind: "RawNode",
      sqlFragments: freeze(sqlFragments),
      parameters: freeze(parameters)
    });
  },
  createWithSql(sql2) {
    return RawNode.create([sql2], []);
  },
  createWithChild(child) {
    return RawNode.create(["", ""], [child]);
  },
  createWithChildren(children2) {
    return RawNode.create(new Array(children2.length + 1).fill(""), children2);
  }
});

// ../../node_modules/kysely/dist/esm/parser/order-by-parser.js
function isOrderByDirection(thing) {
  return thing === "asc" || thing === "desc";
}
function parseOrderBy(args) {
  if (args.length === 2) {
    return [parseOrderByItem(args[0], args[1])];
  }
  if (args.length === 1) {
    const [orderBy] = args;
    if (Array.isArray(orderBy)) {
      return orderBy.map((item) => parseOrderByItem(item));
    }
    return [parseOrderByItem(orderBy)];
  }
  throw new Error(`Invalid number of arguments at order by! expected 1-2, received ${args.length}`);
}
function parseOrderByItem(ref, direction) {
  const parsedRef = parseOrderByExpression(ref);
  if (OrderByItemNode.is(parsedRef)) {
    if (direction) {
      throw new Error("Cannot specify direction twice!");
    }
    return parsedRef;
  }
  return OrderByItemNode.create(parsedRef, parseOrderByDirectionExpression(direction));
}
function parseOrderByExpression(expr) {
  if (isExpressionOrFactory(expr)) {
    return parseExpression(expr);
  }
  if (isDynamicReferenceBuilder(expr)) {
    return expr.toOperationNode();
  }
  const [ref, direction] = expr.split(" ");
  if (direction) {
    if (!isOrderByDirection(direction)) {
      throw new Error(`Invalid order by direction: ${direction}`);
    }
    return OrderByItemNode.create(parseStringReference(ref), parseOrderByDirectionExpression(direction));
  }
  return parseStringReference(expr);
}
function parseOrderByDirectionExpression(expr) {
  if (!expr) {
    return void 0;
  }
  if (expr === "asc" || expr === "desc") {
    return RawNode.createWithSql(expr);
  }
  return expr.toOperationNode();
}

// ../../node_modules/kysely/dist/esm/operation-node/json-reference-node.js
init_esm();
var JSONReferenceNode = freeze({
  is(node) {
    return node.kind === "JSONReferenceNode";
  },
  create(reference, traversal) {
    return freeze({
      kind: "JSONReferenceNode",
      reference,
      traversal
    });
  },
  cloneWithTraversal(node, traversal) {
    return freeze({
      ...node,
      traversal
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/json-operator-chain-node.js
init_esm();
var JSONOperatorChainNode = freeze({
  is(node) {
    return node.kind === "JSONOperatorChainNode";
  },
  create(operator) {
    return freeze({
      kind: "JSONOperatorChainNode",
      operator,
      values: freeze([])
    });
  },
  cloneWithValue(node, value) {
    return freeze({
      ...node,
      values: freeze([...node.values, value])
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/json-path-node.js
init_esm();
var JSONPathNode = freeze({
  is(node) {
    return node.kind === "JSONPathNode";
  },
  create(inOperator) {
    return freeze({
      kind: "JSONPathNode",
      inOperator,
      pathLegs: freeze([])
    });
  },
  cloneWithLeg(jsonPathNode, pathLeg) {
    return freeze({
      ...jsonPathNode,
      pathLegs: freeze([...jsonPathNode.pathLegs, pathLeg])
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/reference-parser.js
function parseSimpleReferenceExpression(exp) {
  if (isString(exp)) {
    return parseStringReference(exp);
  }
  return exp.toOperationNode();
}
function parseReferenceExpressionOrList(arg) {
  if (isReadonlyArray(arg)) {
    return arg.map((it2) => parseReferenceExpression(it2));
  } else {
    return [parseReferenceExpression(arg)];
  }
}
function parseReferenceExpression(exp) {
  if (isExpressionOrFactory(exp)) {
    return parseExpression(exp);
  }
  return parseSimpleReferenceExpression(exp);
}
function parseJSONReference(ref, op) {
  const referenceNode = parseStringReference(ref);
  if (isJSONOperator(op)) {
    return JSONReferenceNode.create(referenceNode, JSONOperatorChainNode.create(OperatorNode.create(op)));
  }
  const opWithoutLastChar = op.slice(0, -1);
  if (isJSONOperator(opWithoutLastChar)) {
    return JSONReferenceNode.create(referenceNode, JSONPathNode.create(OperatorNode.create(opWithoutLastChar)));
  }
  throw new Error(`Invalid JSON operator: ${op}`);
}
function parseStringReference(ref) {
  const COLUMN_SEPARATOR = ".";
  if (!ref.includes(COLUMN_SEPARATOR)) {
    return ReferenceNode.create(ColumnNode.create(ref));
  }
  const parts = ref.split(COLUMN_SEPARATOR).map(trim);
  if (parts.length === 3) {
    return parseStringReferenceWithTableAndSchema(parts);
  }
  if (parts.length === 2) {
    return parseStringReferenceWithTable(parts);
  }
  throw new Error(`invalid column reference ${ref}`);
}
function parseAliasedStringReference(ref) {
  const ALIAS_SEPARATOR = " as ";
  if (ref.includes(ALIAS_SEPARATOR)) {
    const [columnRef, alias] = ref.split(ALIAS_SEPARATOR).map(trim);
    return AliasNode.create(parseStringReference(columnRef), IdentifierNode.create(alias));
  } else {
    return parseStringReference(ref);
  }
}
function parseColumnName(column) {
  return ColumnNode.create(column);
}
function parseOrderedColumnName(column) {
  const ORDER_SEPARATOR = " ";
  if (column.includes(ORDER_SEPARATOR)) {
    const [columnName, order] = column.split(ORDER_SEPARATOR).map(trim);
    if (!isOrderByDirection(order)) {
      throw new Error(`invalid order direction "${order}" next to "${columnName}"`);
    }
    return parseOrderBy([columnName, order])[0];
  } else {
    return parseColumnName(column);
  }
}
function parseStringReferenceWithTableAndSchema(parts) {
  const [schema, table, column] = parts;
  return ReferenceNode.create(ColumnNode.create(column), TableNode.createWithSchema(schema, table));
}
function parseStringReferenceWithTable(parts) {
  const [table, column] = parts;
  return ReferenceNode.create(ColumnNode.create(column), TableNode.create(table));
}
function trim(str) {
  return str.trim();
}

// ../../node_modules/kysely/dist/esm/parser/value-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/primitive-value-list-node.js
init_esm();
var PrimitiveValueListNode = freeze({
  is(node) {
    return node.kind === "PrimitiveValueListNode";
  },
  create(values) {
    return freeze({
      kind: "PrimitiveValueListNode",
      values: freeze([...values])
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/value-list-node.js
init_esm();
var ValueListNode = freeze({
  is(node) {
    return node.kind === "ValueListNode";
  },
  create(values) {
    return freeze({
      kind: "ValueListNode",
      values: freeze(values)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/value-node.js
init_esm();
var ValueNode = freeze({
  is(node) {
    return node.kind === "ValueNode";
  },
  create(value) {
    return freeze({
      kind: "ValueNode",
      value
    });
  },
  createImmediate(value) {
    return freeze({
      kind: "ValueNode",
      value,
      immediate: true
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/value-parser.js
function parseValueExpressionOrList(arg) {
  if (isReadonlyArray(arg)) {
    return parseValueExpressionList(arg);
  }
  return parseValueExpression(arg);
}
function parseValueExpression(exp) {
  if (isExpressionOrFactory(exp)) {
    return parseExpression(exp);
  }
  return ValueNode.create(exp);
}
function isSafeImmediateValue(value) {
  return isNumber(value) || isBoolean(value) || isNull(value);
}
function parseSafeImmediateValue(value) {
  if (!isSafeImmediateValue(value)) {
    throw new Error(`unsafe immediate value ${JSON.stringify(value)}`);
  }
  return ValueNode.createImmediate(value);
}
function parseValueExpressionList(arg) {
  if (arg.some(isExpressionOrFactory)) {
    return ValueListNode.create(arg.map((it2) => parseValueExpression(it2)));
  }
  return PrimitiveValueListNode.create(arg);
}

// ../../node_modules/kysely/dist/esm/operation-node/parens-node.js
init_esm();
var ParensNode = freeze({
  is(node) {
    return node.kind === "ParensNode";
  },
  create(node) {
    return freeze({
      kind: "ParensNode",
      node
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/binary-operation-parser.js
function parseValueBinaryOperationOrExpression(args) {
  if (args.length === 3) {
    return parseValueBinaryOperation(args[0], args[1], args[2]);
  } else if (args.length === 1) {
    return parseValueExpression(args[0]);
  }
  throw new Error(`invalid arguments: ${JSON.stringify(args)}`);
}
function parseValueBinaryOperation(left, operator, right) {
  if (isIsOperator(operator) && needsIsOperator(right)) {
    return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), ValueNode.createImmediate(right));
  }
  return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseValueExpressionOrList(right));
}
function parseReferentialBinaryOperation(left, operator, right) {
  return BinaryOperationNode.create(parseReferenceExpression(left), parseOperator(operator), parseReferenceExpression(right));
}
function parseFilterObject(obj, combinator) {
  return parseFilterList(Object.entries(obj).filter(([, v3]) => !isUndefined(v3)).map(([k3, v3]) => parseValueBinaryOperation(k3, needsIsOperator(v3) ? "is" : "=", v3)), combinator);
}
function parseFilterList(list, combinator) {
  const combine = combinator === "and" ? AndNode.create : OrNode.create;
  if (list.length === 0) {
    return ValueNode.createImmediate(combinator === "and");
  }
  let node = toOperationNode(list[0]);
  for (let i3 = 1; i3 < list.length; ++i3) {
    node = combine(node, toOperationNode(list[i3]));
  }
  if (list.length > 1) {
    return ParensNode.create(node);
  }
  return node;
}
function isIsOperator(operator) {
  return operator === "is" || operator === "is not";
}
function needsIsOperator(value) {
  return isNull(value) || isBoolean(value);
}
function parseOperator(operator) {
  if (isString(operator) && OPERATORS.includes(operator)) {
    return OperatorNode.create(operator);
  }
  if (isOperationNodeSource(operator)) {
    return operator.toOperationNode();
  }
  throw new Error(`invalid operator ${JSON.stringify(operator)}`);
}
function toOperationNode(nodeOrSource) {
  return isOperationNodeSource(nodeOrSource) ? nodeOrSource.toOperationNode() : nodeOrSource;
}

// ../../node_modules/kysely/dist/esm/parser/parse-utils.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/over-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/order-by-node.js
init_esm();
var OrderByNode = freeze({
  is(node) {
    return node.kind === "OrderByNode";
  },
  create(items) {
    return freeze({
      kind: "OrderByNode",
      items: freeze([...items])
    });
  },
  cloneWithItems(orderBy, items) {
    return freeze({
      ...orderBy,
      items: freeze([...orderBy.items, ...items])
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/partition-by-node.js
init_esm();
var PartitionByNode = freeze({
  is(node) {
    return node.kind === "PartitionByNode";
  },
  create(items) {
    return freeze({
      kind: "PartitionByNode",
      items: freeze(items)
    });
  },
  cloneWithItems(partitionBy, items) {
    return freeze({
      ...partitionBy,
      items: freeze([...partitionBy.items, ...items])
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/over-node.js
var OverNode = freeze({
  is(node) {
    return node.kind === "OverNode";
  },
  create() {
    return freeze({
      kind: "OverNode"
    });
  },
  cloneWithOrderByItems(overNode, items) {
    return freeze({
      ...overNode,
      orderBy: overNode.orderBy ? OrderByNode.cloneWithItems(overNode.orderBy, items) : OrderByNode.create(items)
    });
  },
  cloneWithPartitionByItems(overNode, items) {
    return freeze({
      ...overNode,
      partitionBy: overNode.partitionBy ? PartitionByNode.cloneWithItems(overNode.partitionBy, items) : PartitionByNode.create(items)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/select-query-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/from-node.js
init_esm();
var FromNode = freeze({
  is(node) {
    return node.kind === "FromNode";
  },
  create(froms) {
    return freeze({
      kind: "FromNode",
      froms: freeze(froms)
    });
  },
  cloneWithFroms(from, froms) {
    return freeze({
      ...from,
      froms: freeze([...from.froms, ...froms])
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/group-by-node.js
init_esm();
var GroupByNode = freeze({
  is(node) {
    return node.kind === "GroupByNode";
  },
  create(items) {
    return freeze({
      kind: "GroupByNode",
      items: freeze(items)
    });
  },
  cloneWithItems(groupBy, items) {
    return freeze({
      ...groupBy,
      items: freeze([...groupBy.items, ...items])
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/having-node.js
init_esm();
var HavingNode = freeze({
  is(node) {
    return node.kind === "HavingNode";
  },
  create(filter) {
    return freeze({
      kind: "HavingNode",
      having: filter
    });
  },
  cloneWithOperation(havingNode, operator, operation) {
    return freeze({
      ...havingNode,
      having: operator === "And" ? AndNode.create(havingNode.having, operation) : OrNode.create(havingNode.having, operation)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/select-query-node.js
var SelectQueryNode = freeze({
  is(node) {
    return node.kind === "SelectQueryNode";
  },
  create(withNode) {
    return freeze({
      kind: "SelectQueryNode",
      ...withNode && { with: withNode }
    });
  },
  createFrom(fromItems, withNode) {
    return freeze({
      kind: "SelectQueryNode",
      from: FromNode.create(fromItems),
      ...withNode && { with: withNode }
    });
  },
  cloneWithSelections(select, selections) {
    return freeze({
      ...select,
      selections: select.selections ? freeze([...select.selections, ...selections]) : freeze(selections)
    });
  },
  cloneWithDistinctOn(select, expressions) {
    return freeze({
      ...select,
      distinctOn: select.distinctOn ? freeze([...select.distinctOn, ...expressions]) : freeze(expressions)
    });
  },
  cloneWithFrontModifier(select, modifier) {
    return freeze({
      ...select,
      frontModifiers: select.frontModifiers ? freeze([...select.frontModifiers, modifier]) : freeze([modifier])
    });
  },
  cloneWithEndModifier(select, modifier) {
    return freeze({
      ...select,
      endModifiers: select.endModifiers ? freeze([...select.endModifiers, modifier]) : freeze([modifier])
    });
  },
  cloneWithOrderByItems(selectNode, items) {
    return freeze({
      ...selectNode,
      orderBy: selectNode.orderBy ? OrderByNode.cloneWithItems(selectNode.orderBy, items) : OrderByNode.create(items)
    });
  },
  cloneWithGroupByItems(selectNode, items) {
    return freeze({
      ...selectNode,
      groupBy: selectNode.groupBy ? GroupByNode.cloneWithItems(selectNode.groupBy, items) : GroupByNode.create(items)
    });
  },
  cloneWithLimit(selectNode, limit) {
    return freeze({
      ...selectNode,
      limit
    });
  },
  cloneWithOffset(selectNode, offset) {
    return freeze({
      ...selectNode,
      offset
    });
  },
  cloneWithHaving(selectNode, operation) {
    return freeze({
      ...selectNode,
      having: selectNode.having ? HavingNode.cloneWithOperation(selectNode.having, "And", operation) : HavingNode.create(operation)
    });
  },
  cloneWithSetOperations(selectNode, setOperations) {
    return freeze({
      ...selectNode,
      setOperations: selectNode.setOperations ? freeze([...selectNode.setOperations, ...setOperations]) : freeze([...setOperations])
    });
  },
  cloneWithoutSelections(select) {
    return freeze({
      ...select,
      selections: []
    });
  },
  cloneWithoutLimit(select) {
    return freeze({
      ...select,
      limit: void 0
    });
  },
  cloneWithoutOffset(select) {
    return freeze({
      ...select,
      offset: void 0
    });
  },
  cloneWithoutOrderBy(select) {
    return freeze({
      ...select,
      orderBy: void 0
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-builder/join-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/util/prevent-await.js
init_esm();
function preventAwait(clazz, message) {
  Object.defineProperties(clazz.prototype, {
    then: {
      enumerable: false,
      value: () => {
        throw new Error(message);
      }
    }
  });
}

// ../../node_modules/kysely/dist/esm/query-builder/join-builder.js
var JoinBuilder = class _JoinBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  on(...args) {
    return new _JoinBuilder({
      ...this.#props,
      joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseValueBinaryOperationOrExpression(args))
    });
  }
  /**
   * Just like {@link WhereInterface.whereRef} but adds an item to the join's
   * `on` clause instead.
   *
   * See {@link WhereInterface.whereRef} for documentation and examples.
   */
  onRef(lhs, op, rhs) {
    return new _JoinBuilder({
      ...this.#props,
      joinNode: JoinNode.cloneWithOn(this.#props.joinNode, parseReferentialBinaryOperation(lhs, op, rhs))
    });
  }
  /**
   * Adds `on true`.
   */
  onTrue() {
    return new _JoinBuilder({
      ...this.#props,
      joinNode: JoinNode.cloneWithOn(this.#props.joinNode, RawNode.createWithSql("true"))
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.joinNode;
  }
};
preventAwait(JoinBuilder, "don't await JoinBuilder instances. They are never executed directly and are always just a part of a query.");

// ../../node_modules/kysely/dist/esm/query-builder/over-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/parser/partition-by-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/partition-by-item-node.js
init_esm();
var PartitionByItemNode = freeze({
  is(node) {
    return node.kind === "PartitionByItemNode";
  },
  create(partitionBy) {
    return freeze({
      kind: "PartitionByItemNode",
      partitionBy
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/partition-by-parser.js
function parsePartitionBy(partitionBy) {
  return parseReferenceExpressionOrList(partitionBy).map(PartitionByItemNode.create);
}

// ../../node_modules/kysely/dist/esm/query-builder/over-builder.js
var OverBuilder = class _OverBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  /**
   * Adds an order by clause item inside the over function.
   *
   * ```ts
   * const result = await db
   *   .selectFrom('person')
   *   .select(
   *     (eb) => eb.fn.avg<number>('age').over(
   *       ob => ob.orderBy('first_name', 'asc').orderBy('last_name', 'asc')
   *     ).as('average_age')
   *   )
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select avg("age") over(order by "first_name" asc, "last_name" asc) as "average_age"
   * from "person"
   * ```
   */
  orderBy(orderBy, direction) {
    return new _OverBuilder({
      overNode: OverNode.cloneWithOrderByItems(this.#props.overNode, parseOrderBy([orderBy, direction]))
    });
  }
  partitionBy(partitionBy) {
    return new _OverBuilder({
      overNode: OverNode.cloneWithPartitionByItems(this.#props.overNode, parsePartitionBy(partitionBy))
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.overNode;
  }
};
preventAwait(OverBuilder, "don't await OverBuilder instances. They are never executed directly and are always just a part of a query.");

// ../../node_modules/kysely/dist/esm/query-creator.js
init_esm();

// ../../node_modules/kysely/dist/esm/query-builder/insert-query-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/parser/select-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/selection-node.js
init_esm();
var SelectionNode = freeze({
  is(node) {
    return node.kind === "SelectionNode";
  },
  create(selection) {
    return freeze({
      kind: "SelectionNode",
      selection
    });
  },
  createSelectAll() {
    return freeze({
      kind: "SelectionNode",
      selection: SelectAllNode.create()
    });
  },
  createSelectAllFromTable(table) {
    return freeze({
      kind: "SelectionNode",
      selection: ReferenceNode.createSelectAll(table)
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/select-parser.js
function parseSelectArg(selection) {
  if (isFunction(selection)) {
    return parseSelectArg(selection(expressionBuilder()));
  } else if (isReadonlyArray(selection)) {
    return selection.map((it2) => parseSelectExpression(it2));
  } else {
    return [parseSelectExpression(selection)];
  }
}
function parseSelectExpression(selection) {
  if (isString(selection)) {
    return SelectionNode.create(parseAliasedStringReference(selection));
  } else if (isDynamicReferenceBuilder(selection)) {
    return SelectionNode.create(selection.toOperationNode());
  } else {
    return SelectionNode.create(parseAliasedExpression(selection));
  }
}
function parseSelectAll(table) {
  if (!table) {
    return [SelectionNode.createSelectAll()];
  } else if (Array.isArray(table)) {
    return table.map(parseSelectAllArg);
  } else {
    return [parseSelectAllArg(table)];
  }
}
function parseSelectAllArg(table) {
  if (isString(table)) {
    return SelectionNode.createSelectAllFromTable(parseTable(table));
  }
  throw new Error(`invalid value selectAll expression: ${JSON.stringify(table)}`);
}

// ../../node_modules/kysely/dist/esm/parser/insert-values-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/values-node.js
init_esm();
var ValuesNode = freeze({
  is(node) {
    return node.kind === "ValuesNode";
  },
  create(values) {
    return freeze({
      kind: "ValuesNode",
      values: freeze(values)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/default-insert-value-node.js
init_esm();
var DefaultInsertValueNode = freeze({
  is(node) {
    return node.kind === "DefaultInsertValueNode";
  },
  create() {
    return freeze({
      kind: "DefaultInsertValueNode"
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/insert-values-parser.js
function parseInsertExpression(arg) {
  const objectOrList = isFunction(arg) ? arg(expressionBuilder()) : arg;
  const list = isReadonlyArray(objectOrList) ? objectOrList : freeze([objectOrList]);
  return parseInsertColumnsAndValues(list);
}
function parseInsertColumnsAndValues(rows) {
  const columns = parseColumnNamesAndIndexes(rows);
  return [
    freeze([...columns.keys()].map(ColumnNode.create)),
    ValuesNode.create(rows.map((row) => parseRowValues(row, columns)))
  ];
}
function parseColumnNamesAndIndexes(rows) {
  const columns = /* @__PURE__ */ new Map();
  for (const row of rows) {
    const cols = Object.keys(row);
    for (const col of cols) {
      if (!columns.has(col) && row[col] !== void 0) {
        columns.set(col, columns.size);
      }
    }
  }
  return columns;
}
function parseRowValues(row, columns) {
  const rowColumns = Object.keys(row);
  const rowValues = Array.from({
    length: columns.size
  });
  let hasUndefinedOrComplexColumns = false;
  for (const col of rowColumns) {
    const columnIdx = columns.get(col);
    if (isUndefined(columnIdx)) {
      continue;
    }
    const value = row[col];
    if (isUndefined(value) || isExpressionOrFactory(value)) {
      hasUndefinedOrComplexColumns = true;
    }
    rowValues[columnIdx] = value;
  }
  const hasMissingColumns = rowColumns.length < columns.size;
  if (hasMissingColumns || hasUndefinedOrComplexColumns) {
    const defaultValue = DefaultInsertValueNode.create();
    return ValueListNode.create(rowValues.map((it2) => isUndefined(it2) ? defaultValue : parseValueExpression(it2)));
  }
  return PrimitiveValueListNode.create(rowValues);
}

// ../../node_modules/kysely/dist/esm/operation-node/insert-query-node.js
init_esm();
var InsertQueryNode = freeze({
  is(node) {
    return node.kind === "InsertQueryNode";
  },
  create(into, withNode, replace) {
    return freeze({
      kind: "InsertQueryNode",
      into,
      ...withNode && { with: withNode },
      replace
    });
  },
  cloneWith(insertQuery, props) {
    return freeze({
      ...insertQuery,
      ...props
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/query-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/update-query-node.js
init_esm();
var UpdateQueryNode = freeze({
  is(node) {
    return node.kind === "UpdateQueryNode";
  },
  create(table, withNode) {
    return freeze({
      kind: "UpdateQueryNode",
      table,
      ...withNode && { with: withNode }
    });
  },
  cloneWithFromItems(updateQuery, fromItems) {
    return freeze({
      ...updateQuery,
      from: updateQuery.from ? FromNode.cloneWithFroms(updateQuery.from, fromItems) : FromNode.create(fromItems)
    });
  },
  cloneWithUpdates(updateQuery, updates) {
    return freeze({
      ...updateQuery,
      updates: updateQuery.updates ? freeze([...updateQuery.updates, ...updates]) : updates
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/delete-query-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/using-node.js
init_esm();
var UsingNode = freeze({
  is(node) {
    return node.kind === "UsingNode";
  },
  create(tables) {
    return freeze({
      kind: "UsingNode",
      tables: freeze(tables)
    });
  },
  cloneWithTables(using, tables) {
    return freeze({
      ...using,
      tables: freeze([...using.tables, ...tables])
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/delete-query-node.js
var DeleteQueryNode = freeze({
  is(node) {
    return node.kind === "DeleteQueryNode";
  },
  create(fromItems, withNode) {
    return freeze({
      kind: "DeleteQueryNode",
      from: FromNode.create(fromItems),
      ...withNode && { with: withNode }
    });
  },
  cloneWithOrderByItems(deleteNode, items) {
    return freeze({
      ...deleteNode,
      orderBy: deleteNode.orderBy ? OrderByNode.cloneWithItems(deleteNode.orderBy, items) : OrderByNode.create(items)
    });
  },
  cloneWithLimit(deleteNode, limit) {
    return freeze({
      ...deleteNode,
      limit
    });
  },
  cloneWithUsing(deleteNode, tables) {
    return freeze({
      ...deleteNode,
      using: deleteNode.using !== void 0 ? UsingNode.cloneWithTables(deleteNode.using, tables) : UsingNode.create(tables)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/where-node.js
init_esm();
var WhereNode = freeze({
  is(node) {
    return node.kind === "WhereNode";
  },
  create(filter) {
    return freeze({
      kind: "WhereNode",
      where: filter
    });
  },
  cloneWithOperation(whereNode, operator, operation) {
    return freeze({
      ...whereNode,
      where: operator === "And" ? AndNode.create(whereNode.where, operation) : OrNode.create(whereNode.where, operation)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/returning-node.js
init_esm();
var ReturningNode = freeze({
  is(node) {
    return node.kind === "ReturningNode";
  },
  create(selections) {
    return freeze({
      kind: "ReturningNode",
      selections: freeze(selections)
    });
  },
  cloneWithSelections(returning, selections) {
    return freeze({
      ...returning,
      selections: returning.selections ? freeze([...returning.selections, ...selections]) : freeze(selections)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/explain-node.js
init_esm();
var ExplainNode = freeze({
  is(node) {
    return node.kind === "ExplainNode";
  },
  create(format, options) {
    return freeze({
      kind: "ExplainNode",
      format,
      options
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/query-node.js
var QueryNode = freeze({
  is(node) {
    return SelectQueryNode.is(node) || InsertQueryNode.is(node) || UpdateQueryNode.is(node) || DeleteQueryNode.is(node);
  },
  cloneWithWhere(node, operation) {
    return freeze({
      ...node,
      where: node.where ? WhereNode.cloneWithOperation(node.where, "And", operation) : WhereNode.create(operation)
    });
  },
  cloneWithJoin(node, join) {
    return freeze({
      ...node,
      joins: node.joins ? freeze([...node.joins, join]) : freeze([join])
    });
  },
  cloneWithReturning(node, selections) {
    return freeze({
      ...node,
      returning: node.returning ? ReturningNode.cloneWithSelections(node.returning, selections) : ReturningNode.create(selections)
    });
  },
  cloneWithoutWhere(node) {
    return freeze({
      ...node,
      where: void 0
    });
  },
  cloneWithExplain(node, format, options) {
    return freeze({
      ...node,
      explain: ExplainNode.create(format, options?.toOperationNode())
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/update-set-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/column-update-node.js
init_esm();
var ColumnUpdateNode = freeze({
  is(node) {
    return node.kind === "ColumnUpdateNode";
  },
  create(column, value) {
    return freeze({
      kind: "ColumnUpdateNode",
      column,
      value
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/update-set-parser.js
function parseUpdateExpression(update) {
  const updateObj = isFunction(update) ? update(expressionBuilder()) : update;
  return Object.entries(updateObj).filter(([_3, value]) => value !== void 0).map(([key, value]) => {
    return ColumnUpdateNode.create(ColumnNode.create(key), parseValueExpression(value));
  });
}

// ../../node_modules/kysely/dist/esm/operation-node/on-duplicate-key-node.js
init_esm();
var OnDuplicateKeyNode = freeze({
  is(node) {
    return node.kind === "OnDuplicateKeyNode";
  },
  create(updates) {
    return freeze({
      kind: "OnDuplicateKeyNode",
      updates
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-builder/insert-result.js
init_esm();
var InsertResult = class {
  /**
   * The auto incrementing primary key
   */
  insertId;
  /**
   * Affected rows count.
   */
  numInsertedOrUpdatedRows;
  constructor(insertId, numInsertedOrUpdatedRows) {
    this.insertId = insertId;
    this.numInsertedOrUpdatedRows = numInsertedOrUpdatedRows;
  }
};

// ../../node_modules/kysely/dist/esm/query-builder/no-result-error.js
init_esm();
var NoResultError = class extends Error {
  /**
   * The operation node tree of the query that was executed.
   */
  node;
  constructor(node) {
    super("no result");
    this.node = node;
  }
};
function isNoResultErrorConstructor(fn) {
  return Object.prototype.hasOwnProperty.call(fn, "prototype");
}

// ../../node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/on-conflict-node.js
init_esm();
var OnConflictNode = freeze({
  is(node) {
    return node.kind === "OnConflictNode";
  },
  create() {
    return freeze({
      kind: "OnConflictNode"
    });
  },
  cloneWith(node, props) {
    return freeze({
      ...node,
      ...props
    });
  },
  cloneWithIndexWhere(node, operation) {
    return freeze({
      ...node,
      indexWhere: node.indexWhere ? WhereNode.cloneWithOperation(node.indexWhere, "And", operation) : WhereNode.create(operation)
    });
  },
  cloneWithIndexOrWhere(node, operation) {
    return freeze({
      ...node,
      indexWhere: node.indexWhere ? WhereNode.cloneWithOperation(node.indexWhere, "Or", operation) : WhereNode.create(operation)
    });
  },
  cloneWithUpdateWhere(node, operation) {
    return freeze({
      ...node,
      updateWhere: node.updateWhere ? WhereNode.cloneWithOperation(node.updateWhere, "And", operation) : WhereNode.create(operation)
    });
  },
  cloneWithUpdateOrWhere(node, operation) {
    return freeze({
      ...node,
      updateWhere: node.updateWhere ? WhereNode.cloneWithOperation(node.updateWhere, "Or", operation) : WhereNode.create(operation)
    });
  },
  cloneWithoutIndexWhere(node) {
    return freeze({
      ...node,
      indexWhere: void 0
    });
  },
  cloneWithoutUpdateWhere(node) {
    return freeze({
      ...node,
      updateWhere: void 0
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-builder/on-conflict-builder.js
var OnConflictBuilder = class _OnConflictBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  /**
   * Specify a single column as the conflict target.
   *
   * Also see the {@link columns}, {@link constraint} and {@link expression}
   * methods for alternative ways to specify the conflict target.
   */
  column(column) {
    const columnNode = ColumnNode.create(column);
    return new _OnConflictBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
        columns: this.#props.onConflictNode.columns ? freeze([...this.#props.onConflictNode.columns, columnNode]) : freeze([columnNode])
      })
    });
  }
  /**
   * Specify a list of columns as the conflict target.
   *
   * Also see the {@link column}, {@link constraint} and {@link expression}
   * methods for alternative ways to specify the conflict target.
   */
  columns(columns) {
    const columnNodes = columns.map(ColumnNode.create);
    return new _OnConflictBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
        columns: this.#props.onConflictNode.columns ? freeze([...this.#props.onConflictNode.columns, ...columnNodes]) : freeze(columnNodes)
      })
    });
  }
  /**
   * Specify a specific constraint by name as the conflict target.
   *
   * Also see the {@link column}, {@link columns} and {@link expression}
   * methods for alternative ways to specify the conflict target.
   */
  constraint(constraintName) {
    return new _OnConflictBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
        constraint: IdentifierNode.create(constraintName)
      })
    });
  }
  /**
   * Specify an expression as the conflict target.
   *
   * This can be used if the unique index is an expression index.
   *
   * Also see the {@link column}, {@link columns} and {@link constraint}
   * methods for alternative ways to specify the conflict target.
   */
  expression(expression) {
    return new _OnConflictBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
        indexExpression: expression.toOperationNode()
      })
    });
  }
  where(...args) {
    return new _OnConflictBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args))
    });
  }
  /**
   * Specify an index predicate for the index target.
   *
   * See {@link WhereInterface.whereRef} for more info.
   */
  whereRef(lhs, op, rhs) {
    return new _OnConflictBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWithIndexWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs))
    });
  }
  clearWhere() {
    return new _OnConflictBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWithoutIndexWhere(this.#props.onConflictNode)
    });
  }
  /**
   * Adds the "do nothing" conflict action.
   *
   * ### Examples
   *
   * ```ts
   * await db
   *   .insertInto('person')
   *   .values({ first_name, pic })
   *   .onConflict((oc) => oc
   *     .column('pic')
   *     .doNothing()
   *   )
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * insert into "person" ("first_name", "pic")
   * values ($1, $2)
   * on conflict ("pic") do nothing
   * ```
   */
  doNothing() {
    return new OnConflictDoNothingBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
        doNothing: true
      })
    });
  }
  /**
   * Adds the "do update set" conflict action.
   *
   * ### Examples
   *
   * ```ts
   * await db
   *   .insertInto('person')
   *   .values({ first_name, pic })
   *   .onConflict((oc) => oc
   *     .column('pic')
   *     .doUpdateSet({ first_name })
   *   )
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * insert into "person" ("first_name", "pic")
   * values ($1, $2)
   * on conflict ("pic")
   * do update set "first_name" = $3
   * ```
   *
   * In the next example we use the `ref` method to reference
   * columns of the virtual table `excluded` in a type-safe way
   * to create an upsert operation:
   *
   * ```ts
   * db.insertInto('person')
   *   .values(person)
   *   .onConflict((oc) => oc
   *     .column('id')
   *     .doUpdateSet((eb) => ({
   *       first_name: eb.ref('excluded.first_name'),
   *       last_name: eb.ref('excluded.last_name')
   *     }))
   *   )
   * ```
   */
  doUpdateSet(update) {
    return new OnConflictUpdateBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWith(this.#props.onConflictNode, {
        updates: parseUpdateExpression(update)
      })
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
};
preventAwait(OnConflictBuilder, "don't await OnConflictBuilder instances.");
var OnConflictDoNothingBuilder = class {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  toOperationNode() {
    return this.#props.onConflictNode;
  }
};
preventAwait(OnConflictDoNothingBuilder, "don't await OnConflictDoNothingBuilder instances.");
var OnConflictUpdateBuilder = class _OnConflictUpdateBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  where(...args) {
    return new _OnConflictUpdateBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseValueBinaryOperationOrExpression(args))
    });
  }
  /**
   * Specify a where condition for the update operation.
   *
   * See {@link WhereInterface.whereRef} for more info.
   */
  whereRef(lhs, op, rhs) {
    return new _OnConflictUpdateBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWithUpdateWhere(this.#props.onConflictNode, parseReferentialBinaryOperation(lhs, op, rhs))
    });
  }
  clearWhere() {
    return new _OnConflictUpdateBuilder({
      ...this.#props,
      onConflictNode: OnConflictNode.cloneWithoutUpdateWhere(this.#props.onConflictNode)
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.onConflictNode;
  }
};
preventAwait(OnConflictUpdateBuilder, "don't await OnConflictUpdateBuilder instances.");

// ../../node_modules/kysely/dist/esm/query-builder/insert-query-builder.js
var InsertQueryBuilder = class _InsertQueryBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  values(insert) {
    const [columns, values] = parseInsertExpression(insert);
    return new _InsertQueryBuilder({
      ...this.#props,
      queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
        columns,
        values
      })
    });
  }
  /**
   * Sets the columns to insert.
   *
   * The {@link values} method sets both the columns and the values and this method
   * is not needed. But if you are using the {@link expression} method, you can use
   * this method to set the columns to insert.
   *
   * ### Examples
   *
   * ```ts
   * db.insertInto('person')
   *   .columns(['first_name'])
   *   .expression((eb) => eb.selectFrom('pet').select('pet.name'))
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * insert into "person" ("first_name")
   * select "pet"."name" from "pet"
   * ```
   */
  columns(columns) {
    return new _InsertQueryBuilder({
      ...this.#props,
      queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
        columns: freeze(columns.map(ColumnNode.create))
      })
    });
  }
  /**
   * Insert an arbitrary expression. For example the result of a select query.
   *
   * ### Examples
   *
   * <!-- siteExample("insert", "Insert subquery", 50) -->
   *
   * You can create an `INSERT INTO SELECT FROM` query using the `expression` method:
   *
   * ```ts
   * const result = await db.insertInto('person')
   *   .columns(['first_name', 'last_name', 'age'])
   *   .expression((eb) => eb
   *     .selectFrom('pet')
   *     .select((eb) => [
   *       'pet.name',
   *       eb.val('Petson').as('last_name'),
   *       eb.val(7).as('age'),
   *     ])
   *   )
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * insert into "person" ("first_name", "last_name", "age")
   * select "pet"."name", $1 as "first_name", $2 as "last_name" from "pet"
   * ```
   */
  expression(expression) {
    return new _InsertQueryBuilder({
      ...this.#props,
      queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
        values: parseExpression(expression)
      })
    });
  }
  /**
   * Changes an `insert into` query to an `insert ignore into` query.
   *
   * If you use the ignore modifier, ignorable errors that occur while executing the
   * insert statement are ignored. For example, without ignore, a row that duplicates
   * an existing unique index or primary key value in the table causes a duplicate-key
   * error and the statement is aborted. With ignore, the row is discarded and no error
   * occurs.
   *
   * This is only supported on some dialects like MySQL. On most dialects you should
   * use the {@link onConflict} method.
   *
   * ### Examples
   *
   * ```ts
   * await db.insertInto('person')
   *   .ignore()
   *   .values(values)
   *   .execute()
   * ```
   */
  ignore() {
    return new _InsertQueryBuilder({
      ...this.#props,
      queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
        ignore: true
      })
    });
  }
  /**
   * Adds an `on conflict` clause to the query.
   *
   * `on conflict` is only supported by some dialects like PostgreSQL and SQLite. On MySQL
   * you can use {@link ignore} and {@link onDuplicateKeyUpdate} to achieve similar results.
   *
   * ### Examples
   *
   * ```ts
   * await db
   *   .insertInto('pet')
   *   .values({
   *     name: 'Catto',
   *     species: 'cat',
   *   })
   *   .onConflict((oc) => oc
   *     .column('name')
   *     .doUpdateSet({ species: 'hamster' })
   *   )
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * insert into "pet" ("name", "species")
   * values ($1, $2)
   * on conflict ("name")
   * do update set "species" = $3
   * ```
   *
   * You can provide the name of the constraint instead of a column name:
   *
   * ```ts
   * await db
   *   .insertInto('pet')
   *   .values({
   *     name: 'Catto',
   *     species: 'cat',
   *   })
   *   .onConflict((oc) => oc
   *     .constraint('pet_name_key')
   *     .doUpdateSet({ species: 'hamster' })
   *   )
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * insert into "pet" ("name", "species")
   * values ($1, $2)
   * on conflict on constraint "pet_name_key"
   * do update set "species" = $3
   * ```
   *
   * You can also specify an expression as the conflict target in case
   * the unique index is an expression index:
   *
   * ```ts
   * import { sql } from 'kysely'
   *
   * await db
   *   .insertInto('pet')
   *   .values({
   *     name: 'Catto',
   *     species: 'cat',
   *   })
   *   .onConflict((oc) => oc
   *     .expression(sql`lower(name)`)
   *     .doUpdateSet({ species: 'hamster' })
   *   )
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * insert into "pet" ("name", "species")
   * values ($1, $2)
   * on conflict (lower(name))
   * do update set "species" = $3
   * ```
   *
   * You can add a filter for the update statement like this:
   *
   * ```ts
   * await db
   *   .insertInto('pet')
   *   .values({
   *     name: 'Catto',
   *     species: 'cat',
   *   })
   *   .onConflict((oc) => oc
   *     .column('name')
   *     .doUpdateSet({ species: 'hamster' })
   *     .where('excluded.name', '!=', 'Catto'')
   *   )
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * insert into "pet" ("name", "species")
   * values ($1, $2)
   * on conflict ("name")
   * do update set "species" = $3
   * where "excluded"."name" != $4
   * ```
   *
   * You can create an `on conflict do nothing` clauses like this:
   *
   * ```ts
   * await db
   *   .insertInto('pet')
   *   .values({
   *     name: 'Catto',
   *     species: 'cat',
   *   })
   *   .onConflict((oc) => oc
   *     .column('name')
   *     .doNothing()
   *   )
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * insert into "pet" ("name", "species")
   * values ($1, $2)
   * on conflict ("name") do nothing
   * ```
   *
   * You can refer to the columns of the virtual `excluded` table
   * in a type-safe way using a callback and the `ref` method of
   * `ExpressionBuilder`:
   *
   * ```ts
   * db.insertInto('person')
   *   .values(person)
   *   .onConflict(oc => oc
   *     .column('id')
   *     .doUpdateSet({
   *       first_name: (eb) => eb.ref('excluded.first_name'),
   *       last_name: (eb) => eb.ref('excluded.last_name')
   *     })
   *   )
   * ```
   */
  onConflict(callback) {
    return new _InsertQueryBuilder({
      ...this.#props,
      queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
        onConflict: callback(new OnConflictBuilder({
          onConflictNode: OnConflictNode.create()
        })).toOperationNode()
      })
    });
  }
  /**
   * Adds `on duplicate key update` to the query.
   *
   * If you specify `on duplicate key update`, and a row is inserted that would cause
   * a duplicate value in a unique index or primary key, an update of the old row occurs.
   *
   * This is only implemented by some dialects like MySQL. On most dialects you should
   * use {@link onConflict} instead.
   *
   * ### Examples
   *
   * ```ts
   * await db
   *   .insertInto('person')
   *   .values(values)
   *   .onDuplicateKeyUpdate({ species: 'hamster' })
   * ```
   */
  onDuplicateKeyUpdate(update) {
    return new _InsertQueryBuilder({
      ...this.#props,
      queryNode: InsertQueryNode.cloneWith(this.#props.queryNode, {
        onDuplicateKey: OnDuplicateKeyNode.create(parseUpdateExpression(update))
      })
    });
  }
  returning(selection) {
    return new _InsertQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection))
    });
  }
  returningAll() {
    return new _InsertQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll())
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   *
   * If you want to conditionally call a method on `this`, see
   * the {@link $if} method.
   *
   * ### Examples
   *
   * The next example uses a helper function `log` to log a query:
   *
   * ```ts
   * function log<T extends Compilable>(qb: T): T {
   *   console.log(qb.compile())
   *   return qb
   * }
   *
   * db.updateTable('person')
   *   .set(values)
   *   .$call(log)
   *   .execute()
   * ```
   */
  $call(func) {
    return func(this);
  }
  /**
   * Call `func(this)` if `condition` is true.
   *
   * This method is especially handy with optional selects. Any `returning` or `returningAll`
   * method calls add columns as optional fields to the output type when called inside
   * the `func` callback. This is because we can't know if those selections were actually
   * made before running the code.
   *
   * You can also call any other methods inside the callback.
   *
   * ### Examples
   *
   * ```ts
   * async function insertPerson(values: InsertablePerson, returnLastName: boolean) {
   *   return await db
   *     .insertInto('person')
   *     .values(values)
   *     .returning(['id', 'first_name'])
   *     .$if(returnLastName, (qb) => qb.returning('last_name'))
   *     .executeTakeFirstOrThrow()
   * }
   * ```
   *
   * Any selections added inside the `if` callback will be added as optional fields to the
   * output type since we can't know if the selections were actually made before running
   * the code. In the example above the return type of the `insertPerson` function is:
   *
   * ```ts
   * {
   *   id: number
   *   first_name: string
   *   last_name?: string
   * }
   * ```
   */
  $if(condition, func) {
    if (condition) {
      return func(this);
    }
    return new _InsertQueryBuilder({
      ...this.#props
    });
  }
  /**
   * Change the output type of the query.
   *
   * You should only use this method as the last resort if the types
   * don't support your use case.
   */
  $castTo() {
    return new _InsertQueryBuilder(this.#props);
  }
  /**
   * Narrows (parts of) the output type of the query.
   *
   * Kysely tries to be as type-safe as possible, but in some cases we have to make
   * compromises for better maintainability and compilation performance. At present,
   * Kysely doesn't narrow the output type of the query based on {@link values} input
   * when using {@link returning} or {@link returningAll}.
   *
   * This utility method is very useful for these situations, as it removes unncessary
   * runtime assertion/guard code. Its input type is limited to the output type
   * of the query, so you can't add a column that doesn't exist, or change a column's
   * type to something that doesn't exist in its union type.
   *
   * ### Examples
   *
   * Turn this code:
   *
   * ```ts
   * const person = await db.insertInto('person')
   *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })
   *   .returningAll()
   *   .executeTakeFirstOrThrow()
   *
   * if (nullable_column) {
   *   functionThatExpectsPersonWithNonNullValue(person)
   * }
   * ```
   *
   * Into this:
   *
   * ```ts
   * const person = await db.insertInto('person')
   *   .values({ ...inputPerson, nullable_column: 'hell yeah!' })
   *   .returningAll()
   *   .$narrowType<{ nullable_column: string }>()
   *   .executeTakeFirstOrThrow()
   *
   * functionThatExpectsPersonWithNonNullValue(person)
   * ```
   */
  $narrowType() {
    return new _InsertQueryBuilder(this.#props);
  }
  /**
   * Asserts that query's output row type equals the given type `T`.
   *
   * This method can be used to simplify excessively complex types to make typescript happy
   * and much faster.
   *
   * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much
   * for typescript and you get errors like this:
   *
   * ```
   * error TS2589: Type instantiation is excessively deep and possibly infinite.
   * ```
   *
   * In these case you can often use this method to help typescript a little bit. When you use this
   * method to assert the output type of a query, Kysely can drop the complex output type that
   * consists of multiple nested helper types and replace it with the simple asserted type.
   *
   * Using this method doesn't reduce type safety at all. You have to pass in a type that is
   * structurally equal to the current type.
   *
   * ### Examples
   *
   * ```ts
   * const result = await db
   *   .with('new_person', (qb) => qb
   *     .insertInto('person')
   *     .values(person)
   *     .returning('id')
   *     .$assertType<{ id: string }>()
   *   )
   *   .with('new_pet', (qb) => qb
   *     .insertInto('pet')
   *     .values((eb) => ({ owner_id: eb.selectFrom('new_person').select('id'), ...pet }))
   *     .returning(['name as pet_name', 'species'])
   *     .$assertType<{ pet_name: string, species: Species }>()
   *   )
   *   .selectFrom(['new_person', 'new_pet'])
   *   .selectAll()
   *   .executeTakeFirstOrThrow()
   * ```
   */
  $assertType() {
    return new _InsertQueryBuilder(this.#props);
  }
  /**
   * Returns a copy of this InsertQueryBuilder instance with the given plugin installed.
   */
  withPlugin(plugin) {
    return new _InsertQueryBuilder({
      ...this.#props,
      executor: this.#props.executor.withPlugin(plugin)
    });
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  /**
   * Executes the query and returns an array of rows.
   *
   * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.
   */
  async execute() {
    const compiledQuery = this.compile();
    const query = compiledQuery.query;
    const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);
    if (this.#props.executor.adapter.supportsReturning && query.returning) {
      return result.rows;
    }
    return [
      new InsertResult(
        result.insertId,
        // TODO: remove numUpdatedOrDeletedRows.
        result.numAffectedRows ?? result.numUpdatedOrDeletedRows
      )
    ];
  }
  /**
   * Executes the query and returns the first result or undefined if
   * the query returned no result.
   */
  async executeTakeFirst() {
    const [result] = await this.execute();
    return result;
  }
  /**
   * Executes the query and returns the first result or throws if
   * the query returned no result.
   *
   * By default an instance of {@link NoResultError} is thrown, but you can
   * provide a custom error class, or callback as the only argument to throw a different
   * error.
   */
  async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
    const result = await this.executeTakeFirst();
    if (result === void 0) {
      const error = isNoResultErrorConstructor(errorConstructor) ? new errorConstructor(this.toOperationNode()) : errorConstructor(this.toOperationNode());
      throw error;
    }
    return result;
  }
  async *stream(chunkSize = 100) {
    const compiledQuery = this.compile();
    const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);
    for await (const item of stream) {
      yield* item.rows;
    }
  }
  async explain(format, options) {
    const builder = new _InsertQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options)
    });
    return await builder.execute();
  }
};
preventAwait(InsertQueryBuilder, "don't await InsertQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.");

// ../../node_modules/kysely/dist/esm/query-builder/delete-query-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/query-builder/delete-result.js
init_esm();
var DeleteResult = class {
  numDeletedRows;
  constructor(numDeletedRows) {
    this.numDeletedRows = numDeletedRows;
  }
};

// ../../node_modules/kysely/dist/esm/operation-node/limit-node.js
init_esm();
var LimitNode = freeze({
  is(node) {
    return node.kind === "LimitNode";
  },
  create(limit) {
    return freeze({
      kind: "LimitNode",
      limit: ValueNode.create(limit)
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-builder/delete-query-builder.js
var DeleteQueryBuilder = class _DeleteQueryBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  where(...args) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args))
    });
  }
  whereRef(lhs, op, rhs) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs))
    });
  }
  clearWhere() {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode)
    });
  }
  using(tables) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: DeleteQueryNode.cloneWithUsing(this.#props.queryNode, parseTableExpressionOrList(tables))
    });
  }
  innerJoin(...args) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("InnerJoin", args))
    });
  }
  leftJoin(...args) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("LeftJoin", args))
    });
  }
  rightJoin(...args) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("RightJoin", args))
    });
  }
  fullJoin(...args) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("FullJoin", args))
    });
  }
  returning(selection) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection))
    });
  }
  returningAll(table) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll(table))
    });
  }
  /**
   * Adds an `order by` clause to the query.
   *
   * `orderBy` calls are additive. To order by multiple columns, call `orderBy`
   * multiple times.
   *
   * The first argument is the expression to order by and the second is the
   * order (`asc` or `desc`).
   *
   * An `order by` clause in a delete query is only supported by some dialects
   * like MySQL.
   *
   * See {@link SelectQueryBuilder.orderBy} for more examples.
   *
   * ### Examples
   *
   * Delete 5 oldest items in a table:
   *
   * ```ts
   * await db
   *   .deleteFrom('pet')
   *   .orderBy('created_at')
   *   .limit(5)
   *   .execute()
   * ```
   *
   * The generated SQL (MySQL):
   *
   * ```sql
   * delete from `pet`
   * order by `created_at`
   * limit ?
   * ```
   */
  orderBy(orderBy, direction) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: DeleteQueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy([orderBy, direction]))
    });
  }
  /**
   * Adds a limit clause to the query.
   *
   * A limit clause in a delete query is only supported by some dialects
   * like MySQL.
   *
   * ### Examples
   *
   * Delete 5 oldest items in a table:
   *
   * ```ts
   * await db
   *   .deleteFrom('pet')
   *   .orderBy('created_at')
   *   .limit(5)
   *   .execute()
   * ```
   */
  limit(limit) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: DeleteQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(limit))
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   *
   * If you want to conditionally call a method on `this`, see
   * the {@link $if} method.
   *
   * ### Examples
   *
   * The next example uses a helper function `log` to log a query:
   *
   * ```ts
   * function log<T extends Compilable>(qb: T): T {
   *   console.log(qb.compile())
   *   return qb
   * }
   *
   * db.deleteFrom('person')
   *   .$call(log)
   *   .execute()
   * ```
   */
  $call(func) {
    return func(this);
  }
  /**
   * Call `func(this)` if `condition` is true.
   *
   * This method is especially handy with optional selects. Any `returning` or `returningAll`
   * method calls add columns as optional fields to the output type when called inside
   * the `func` callback. This is because we can't know if those selections were actually
   * made before running the code.
   *
   * You can also call any other methods inside the callback.
   *
   * ### Examples
   *
   * ```ts
   * async function deletePerson(id: number, returnLastName: boolean) {
   *   return await db
   *     .deleteFrom('person')
   *     .where('id', '=', id)
   *     .returning(['id', 'first_name'])
   *     .$if(returnLastName, (qb) => qb.returning('last_name'))
   *     .executeTakeFirstOrThrow()
   * }
   * ```
   *
   * Any selections added inside the `if` callback will be added as optional fields to the
   * output type since we can't know if the selections were actually made before running
   * the code. In the example above the return type of the `deletePerson` function is:
   *
   * ```ts
   * {
   *   id: number
   *   first_name: string
   *   last_name?: string
   * }
   * ```
   */
  $if(condition, func) {
    if (condition) {
      return func(this);
    }
    return new _DeleteQueryBuilder({
      ...this.#props
    });
  }
  /**
   * Change the output type of the query.
   *
   * You should only use this method as the last resort if the types
   * don't support your use case.
   */
  $castTo() {
    return new _DeleteQueryBuilder(this.#props);
  }
  /**
   * Narrows (parts of) the output type of the query.
   *
   * Kysely tries to be as type-safe as possible, but in some cases we have to make
   * compromises for better maintainability and compilation performance. At present,
   * Kysely doesn't narrow the output type of the query when using {@link where} and {@link returning} or {@link returningAll}.
   *
   * This utility method is very useful for these situations, as it removes unncessary
   * runtime assertion/guard code. Its input type is limited to the output type
   * of the query, so you can't add a column that doesn't exist, or change a column's
   * type to something that doesn't exist in its union type.
   *
   * ### Examples
   *
   * Turn this code:
   *
   * ```ts
   * const person = await db.deleteFrom('person')
   *   .where('id', '=', id)
   *   .where('nullable_column', 'is not', null)
   *   .returningAll()
   *   .executeTakeFirstOrThrow()
   *
   * if (person.nullable_column) {
   *   functionThatExpectsPersonWithNonNullValue(person)
   * }
   * ```
   *
   * Into this:
   *
   * ```ts
   * const person = await db.deleteFrom('person')
   *   .where('id', '=', id)
   *   .where('nullable_column', 'is not', null)
   *   .returningAll()
   *   .$narrowType<{ nullable_column: string }>()
   *   .executeTakeFirstOrThrow()
   *
   * functionThatExpectsPersonWithNonNullValue(person)
   * ```
   */
  $narrowType() {
    return new _DeleteQueryBuilder(this.#props);
  }
  /**
   * Asserts that query's output row type equals the given type `T`.
   *
   * This method can be used to simplify excessively complex types to make typescript happy
   * and much faster.
   *
   * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much
   * for typescript and you get errors like this:
   *
   * ```
   * error TS2589: Type instantiation is excessively deep and possibly infinite.
   * ```
   *
   * In these case you can often use this method to help typescript a little bit. When you use this
   * method to assert the output type of a query, Kysely can drop the complex output type that
   * consists of multiple nested helper types and replace it with the simple asserted type.
   *
   * Using this method doesn't reduce type safety at all. You have to pass in a type that is
   * structurally equal to the current type.
   *
   * ### Examples
   *
   * ```ts
   * const result = await db
   *   .with('deleted_person', (qb) => qb
   *     .deleteFrom('person')
   *     .where('id', '=', person.id)
   *     .returning('first_name')
   *     .$assertType<{ first_name: string }>()
   *   )
   *   .with('deleted_pet', (qb) => qb
   *     .deleteFrom('pet')
   *     .where('owner_id', '=', person.id)
   *     .returning(['name as pet_name', 'species'])
   *     .$assertType<{ pet_name: string, species: Species }>()
   *   )
   *   .selectFrom(['deleted_person', 'deleted_pet'])
   *   .selectAll()
   *   .executeTakeFirstOrThrow()
   * ```
   */
  $assertType() {
    return new _DeleteQueryBuilder(this.#props);
  }
  /**
   * Returns a copy of this DeleteQueryBuilder instance with the given plugin installed.
   */
  withPlugin(plugin) {
    return new _DeleteQueryBuilder({
      ...this.#props,
      executor: this.#props.executor.withPlugin(plugin)
    });
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  /**
   * Executes the query and returns an array of rows.
   *
   * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.
   */
  async execute() {
    const compiledQuery = this.compile();
    const query = compiledQuery.query;
    const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);
    if (this.#props.executor.adapter.supportsReturning && query.returning) {
      return result.rows;
    }
    return [
      new DeleteResult(
        // TODO: remove numUpdatedOrDeletedRows.
        result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0)
      )
    ];
  }
  /**
   * Executes the query and returns the first result or undefined if
   * the query returned no result.
   */
  async executeTakeFirst() {
    const [result] = await this.execute();
    return result;
  }
  /**
   * Executes the query and returns the first result or throws if
   * the query returned no result.
   *
   * By default an instance of {@link NoResultError} is thrown, but you can
   * provide a custom error class, or callback as the only argument to throw a different
   * error.
   */
  async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
    const result = await this.executeTakeFirst();
    if (result === void 0) {
      const error = isNoResultErrorConstructor(errorConstructor) ? new errorConstructor(this.toOperationNode()) : errorConstructor(this.toOperationNode());
      throw error;
    }
    return result;
  }
  async *stream(chunkSize = 100) {
    const compiledQuery = this.compile();
    const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);
    for await (const item of stream) {
      yield* item.rows;
    }
  }
  async explain(format, options) {
    const builder = new _DeleteQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options)
    });
    return await builder.execute();
  }
};
preventAwait(DeleteQueryBuilder, "don't await DeleteQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.");

// ../../node_modules/kysely/dist/esm/query-builder/update-query-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/query-builder/update-result.js
init_esm();
var UpdateResult = class {
  numUpdatedRows;
  numChangedRows;
  constructor(numUpdatedRows, numChangedRows) {
    this.numUpdatedRows = numUpdatedRows;
    this.numChangedRows = numChangedRows;
  }
};

// ../../node_modules/kysely/dist/esm/query-builder/update-query-builder.js
var UpdateQueryBuilder = class _UpdateQueryBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  where(...args) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args))
    });
  }
  whereRef(lhs, op, rhs) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs))
    });
  }
  clearWhere() {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode)
    });
  }
  from(from) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: UpdateQueryNode.cloneWithFromItems(this.#props.queryNode, parseTableExpressionOrList(from))
    });
  }
  innerJoin(...args) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("InnerJoin", args))
    });
  }
  leftJoin(...args) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("LeftJoin", args))
    });
  }
  rightJoin(...args) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("RightJoin", args))
    });
  }
  fullJoin(...args) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("FullJoin", args))
    });
  }
  set(update) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: UpdateQueryNode.cloneWithUpdates(this.#props.queryNode, parseUpdateExpression(update))
    });
  }
  returning(selection) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectArg(selection))
    });
  }
  returningAll() {
    return new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithReturning(this.#props.queryNode, parseSelectAll())
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   *
   * If you want to conditionally call a method on `this`, see
   * the {@link $if} method.
   *
   * ### Examples
   *
   * The next example uses a helper function `log` to log a query:
   *
   * ```ts
   * function log<T extends Compilable>(qb: T): T {
   *   console.log(qb.compile())
   *   return qb
   * }
   *
   * db.updateTable('person')
   *   .set(values)
   *   .$call(log)
   *   .execute()
   * ```
   */
  $call(func) {
    return func(this);
  }
  /**
   * Call `func(this)` if `condition` is true.
   *
   * This method is especially handy with optional selects. Any `returning` or `returningAll`
   * method calls add columns as optional fields to the output type when called inside
   * the `func` callback. This is because we can't know if those selections were actually
   * made before running the code.
   *
   * You can also call any other methods inside the callback.
   *
   * ### Examples
   *
   * ```ts
   * async function updatePerson(id: number, updates: UpdateablePerson, returnLastName: boolean) {
   *   return await db
   *     .updateTable('person')
   *     .set(updates)
   *     .where('id', '=', id)
   *     .returning(['id', 'first_name'])
   *     .$if(returnLastName, (qb) => qb.returning('last_name'))
   *     .executeTakeFirstOrThrow()
   * }
   * ```
   *
   * Any selections added inside the `if` callback will be added as optional fields to the
   * output type since we can't know if the selections were actually made before running
   * the code. In the example above the return type of the `updatePerson` function is:
   *
   * ```ts
   * {
   *   id: number
   *   first_name: string
   *   last_name?: string
   * }
   * ```
   */
  $if(condition, func) {
    if (condition) {
      return func(this);
    }
    return new _UpdateQueryBuilder({
      ...this.#props
    });
  }
  /**
   * Change the output type of the query.
   *
   * You should only use this method as the last resort if the types
   * don't support your use case.
   */
  $castTo() {
    return new _UpdateQueryBuilder(this.#props);
  }
  /**
   * Narrows (parts of) the output type of the query.
   *
   * Kysely tries to be as type-safe as possible, but in some cases we have to make
   * compromises for better maintainability and compilation performance. At present,
   * Kysely doesn't narrow the output type of the query based on {@link set} input
   * when using {@link where} and/or {@link returning} or {@link returningAll}.
   *
   * This utility method is very useful for these situations, as it removes unncessary
   * runtime assertion/guard code. Its input type is limited to the output type
   * of the query, so you can't add a column that doesn't exist, or change a column's
   * type to something that doesn't exist in its union type.
   *
   * ### Examples
   *
   * Turn this code:
   *
   * ```ts
   * const person = await db.updateTable('person')
   *   .set({ deletedAt: now })
   *   .where('id', '=', id)
   *   .where('nullable_column', 'is not', null)
   *   .returningAll()
   *   .executeTakeFirstOrThrow()
   *
   * if (person.nullable_column) {
   *   functionThatExpectsPersonWithNonNullValue(person)
   * }
   * ```
   *
   * Into this:
   *
   * ```ts
   * const person = await db.updateTable('person')
   *   .set({ deletedAt: now })
   *   .where('id', '=', id)
   *   .where('nullable_column', 'is not', null)
   *   .returningAll()
   *   .$narrowType<{ deletedAt: Date; nullable_column: string }>()
   *   .executeTakeFirstOrThrow()
   *
   * functionThatExpectsPersonWithNonNullValue(person)
   * ```
   */
  $narrowType() {
    return new _UpdateQueryBuilder(this.#props);
  }
  /**
   * Asserts that query's output row type equals the given type `T`.
   *
   * This method can be used to simplify excessively complex types to make typescript happy
   * and much faster.
   *
   * Kysely uses complex type magic to achieve its type safety. This complexity is sometimes too much
   * for typescript and you get errors like this:
   *
   * ```
   * error TS2589: Type instantiation is excessively deep and possibly infinite.
   * ```
   *
   * In these case you can often use this method to help typescript a little bit. When you use this
   * method to assert the output type of a query, Kysely can drop the complex output type that
   * consists of multiple nested helper types and replace it with the simple asserted type.
   *
   * Using this method doesn't reduce type safety at all. You have to pass in a type that is
   * structurally equal to the current type.
   *
   * ### Examples
   *
   * ```ts
   * const result = await db
   *   .with('updated_person', (qb) => qb
   *     .updateTable('person')
   *     .set(person)
   *     .where('id', '=', person.id)
   *     .returning('first_name')
   *     .$assertType<{ first_name: string }>()
   *   )
   *   .with('updated_pet', (qb) => qb
   *     .updateTable('pet')
   *     .set(pet)
   *     .where('owner_id', '=', person.id)
   *     .returning(['name as pet_name', 'species'])
   *     .$assertType<{ pet_name: string, species: Species }>()
   *   )
   *   .selectFrom(['updated_person', 'updated_pet'])
   *   .selectAll()
   *   .executeTakeFirstOrThrow()
   * ```
   */
  $assertType() {
    return new _UpdateQueryBuilder(this.#props);
  }
  /**
   * Returns a copy of this UpdateQueryBuilder instance with the given plugin installed.
   */
  withPlugin(plugin) {
    return new _UpdateQueryBuilder({
      ...this.#props,
      executor: this.#props.executor.withPlugin(plugin)
    });
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  /**
   * Executes the query and returns an array of rows.
   *
   * Also see the {@link executeTakeFirst} and {@link executeTakeFirstOrThrow} methods.
   */
  async execute() {
    const compiledQuery = this.compile();
    const query = compiledQuery.query;
    const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);
    if (this.#props.executor.adapter.supportsReturning && query.returning) {
      return result.rows;
    }
    return [
      new UpdateResult(
        // TODO: remove numUpdatedOrDeletedRows.
        // TODO: https://github.com/kysely-org/kysely/pull/431#discussion_r1172330899
        result.numAffectedRows ?? result.numUpdatedOrDeletedRows ?? BigInt(0),
        result.numChangedRows
      )
    ];
  }
  /**
   * Executes the query and returns the first result or undefined if
   * the query returned no result.
   */
  async executeTakeFirst() {
    const [result] = await this.execute();
    return result;
  }
  /**
   * Executes the query and returns the first result or throws if
   * the query returned no result.
   *
   * By default an instance of {@link NoResultError} is thrown, but you can
   * provide a custom error class, or callback as the only argument to throw a different
   * error.
   */
  async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
    const result = await this.executeTakeFirst();
    if (result === void 0) {
      const error = isNoResultErrorConstructor(errorConstructor) ? new errorConstructor(this.toOperationNode()) : errorConstructor(this.toOperationNode());
      throw error;
    }
    return result;
  }
  async *stream(chunkSize = 100) {
    const compiledQuery = this.compile();
    const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);
    for await (const item of stream) {
      yield* item.rows;
    }
  }
  async explain(format, options) {
    const builder = new _UpdateQueryBuilder({
      ...this.#props,
      queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options)
    });
    return await builder.execute();
  }
};
preventAwait(UpdateQueryBuilder, "don't await UpdateQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.");

// ../../node_modules/kysely/dist/esm/parser/with-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/common-table-expression-name-node.js
init_esm();
var CommonTableExpressionNameNode = freeze({
  is(node) {
    return node.kind === "CommonTableExpressionNameNode";
  },
  create(tableName, columnNames) {
    return freeze({
      kind: "CommonTableExpressionNameNode",
      table: TableNode.create(tableName),
      columns: columnNames ? freeze(columnNames.map(ColumnNode.create)) : void 0
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-builder/cte-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/common-table-expression-node.js
init_esm();
var CommonTableExpressionNode = freeze({
  is(node) {
    return node.kind === "CommonTableExpressionNode";
  },
  create(name, expression) {
    return freeze({
      kind: "CommonTableExpressionNode",
      name,
      expression
    });
  },
  cloneWith(node, props) {
    return freeze({
      ...node,
      ...props
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-builder/cte-builder.js
var CTEBuilder = class _CTEBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  /**
   * Makes the common table expression materialized.
   */
  materialized() {
    return new _CTEBuilder({
      ...this.#props,
      node: CommonTableExpressionNode.cloneWith(this.#props.node, {
        materialized: true
      })
    });
  }
  /**
   * Makes the common table expression not materialized.
   */
  notMaterialized() {
    return new _CTEBuilder({
      ...this.#props,
      node: CommonTableExpressionNode.cloneWith(this.#props.node, {
        materialized: false
      })
    });
  }
  toOperationNode() {
    return this.#props.node;
  }
};
preventAwait(CTEBuilder, "don't await CTEBuilder instances. They are never executed directly and are always just a part of a query.");

// ../../node_modules/kysely/dist/esm/parser/with-parser.js
function parseCommonTableExpression(nameOrBuilderCallback, expression) {
  const expressionNode = expression(createQueryCreator()).toOperationNode();
  if (isFunction(nameOrBuilderCallback)) {
    return nameOrBuilderCallback(cteBuilderFactory(expressionNode)).toOperationNode();
  }
  return CommonTableExpressionNode.create(parseCommonTableExpressionName(nameOrBuilderCallback), expressionNode);
}
function cteBuilderFactory(expressionNode) {
  return (name) => {
    return new CTEBuilder({
      node: CommonTableExpressionNode.create(parseCommonTableExpressionName(name), expressionNode)
    });
  };
}
function parseCommonTableExpressionName(name) {
  if (name.includes("(")) {
    const parts = name.split(/[\(\)]/);
    const table = parts[0];
    const columns = parts[1].split(",").map((it2) => it2.trim());
    return CommonTableExpressionNameNode.create(table, columns);
  } else {
    return CommonTableExpressionNameNode.create(name);
  }
}

// ../../node_modules/kysely/dist/esm/operation-node/with-node.js
init_esm();
var WithNode = freeze({
  is(node) {
    return node.kind === "WithNode";
  },
  create(expression, params) {
    return freeze({
      kind: "WithNode",
      expressions: freeze([expression]),
      ...params
    });
  },
  cloneWithExpression(withNode, expression) {
    return freeze({
      ...withNode,
      expressions: freeze([...withNode.expressions, expression])
    });
  }
});

// ../../node_modules/kysely/dist/esm/util/query-id.js
init_esm();

// ../../node_modules/kysely/dist/esm/util/random-string.js
init_esm();
var CHARS = [
  "A",
  "B",
  "C",
  "D",
  "E",
  "F",
  "G",
  "H",
  "I",
  "J",
  "K",
  "L",
  "M",
  "N",
  "O",
  "P",
  "Q",
  "R",
  "S",
  "T",
  "U",
  "V",
  "W",
  "X",
  "Y",
  "Z",
  "a",
  "b",
  "c",
  "d",
  "e",
  "f",
  "g",
  "h",
  "i",
  "j",
  "k",
  "l",
  "m",
  "n",
  "o",
  "p",
  "q",
  "r",
  "s",
  "t",
  "u",
  "v",
  "w",
  "x",
  "y",
  "z",
  "0",
  "1",
  "2",
  "3",
  "4",
  "5",
  "6",
  "7",
  "8",
  "9"
];
function randomString(length) {
  let chars = "";
  for (let i3 = 0; i3 < length; ++i3) {
    chars += randomChar();
  }
  return chars;
}
function randomChar() {
  return CHARS[~~(Math.random() * CHARS.length)];
}

// ../../node_modules/kysely/dist/esm/util/query-id.js
function createQueryId() {
  return new LazyQueryId();
}
var LazyQueryId = class {
  #queryId;
  get queryId() {
    if (this.#queryId === void 0) {
      this.#queryId = randomString(8);
    }
    return this.#queryId;
  }
};

// ../../node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js
init_esm();

// ../../node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js
init_esm();

// ../../node_modules/kysely/dist/esm/util/require-all-props.js
init_esm();
function requireAllProps(obj) {
  return obj;
}

// ../../node_modules/kysely/dist/esm/operation-node/operation-node-transformer.js
var OperationNodeTransformer = class {
  nodeStack = [];
  #transformers = freeze({
    AliasNode: this.transformAlias.bind(this),
    ColumnNode: this.transformColumn.bind(this),
    IdentifierNode: this.transformIdentifier.bind(this),
    SchemableIdentifierNode: this.transformSchemableIdentifier.bind(this),
    RawNode: this.transformRaw.bind(this),
    ReferenceNode: this.transformReference.bind(this),
    SelectQueryNode: this.transformSelectQuery.bind(this),
    SelectionNode: this.transformSelection.bind(this),
    TableNode: this.transformTable.bind(this),
    FromNode: this.transformFrom.bind(this),
    SelectAllNode: this.transformSelectAll.bind(this),
    AndNode: this.transformAnd.bind(this),
    OrNode: this.transformOr.bind(this),
    ValueNode: this.transformValue.bind(this),
    ValueListNode: this.transformValueList.bind(this),
    PrimitiveValueListNode: this.transformPrimitiveValueList.bind(this),
    ParensNode: this.transformParens.bind(this),
    JoinNode: this.transformJoin.bind(this),
    OperatorNode: this.transformOperator.bind(this),
    WhereNode: this.transformWhere.bind(this),
    InsertQueryNode: this.transformInsertQuery.bind(this),
    DeleteQueryNode: this.transformDeleteQuery.bind(this),
    ReturningNode: this.transformReturning.bind(this),
    CreateTableNode: this.transformCreateTable.bind(this),
    AddColumnNode: this.transformAddColumn.bind(this),
    ColumnDefinitionNode: this.transformColumnDefinition.bind(this),
    DropTableNode: this.transformDropTable.bind(this),
    DataTypeNode: this.transformDataType.bind(this),
    OrderByNode: this.transformOrderBy.bind(this),
    OrderByItemNode: this.transformOrderByItem.bind(this),
    GroupByNode: this.transformGroupBy.bind(this),
    GroupByItemNode: this.transformGroupByItem.bind(this),
    UpdateQueryNode: this.transformUpdateQuery.bind(this),
    ColumnUpdateNode: this.transformColumnUpdate.bind(this),
    LimitNode: this.transformLimit.bind(this),
    OffsetNode: this.transformOffset.bind(this),
    OnConflictNode: this.transformOnConflict.bind(this),
    OnDuplicateKeyNode: this.transformOnDuplicateKey.bind(this),
    CreateIndexNode: this.transformCreateIndex.bind(this),
    DropIndexNode: this.transformDropIndex.bind(this),
    ListNode: this.transformList.bind(this),
    PrimaryKeyConstraintNode: this.transformPrimaryKeyConstraint.bind(this),
    UniqueConstraintNode: this.transformUniqueConstraint.bind(this),
    ReferencesNode: this.transformReferences.bind(this),
    CheckConstraintNode: this.transformCheckConstraint.bind(this),
    WithNode: this.transformWith.bind(this),
    CommonTableExpressionNode: this.transformCommonTableExpression.bind(this),
    CommonTableExpressionNameNode: this.transformCommonTableExpressionName.bind(this),
    HavingNode: this.transformHaving.bind(this),
    CreateSchemaNode: this.transformCreateSchema.bind(this),
    DropSchemaNode: this.transformDropSchema.bind(this),
    AlterTableNode: this.transformAlterTable.bind(this),
    DropColumnNode: this.transformDropColumn.bind(this),
    RenameColumnNode: this.transformRenameColumn.bind(this),
    AlterColumnNode: this.transformAlterColumn.bind(this),
    ModifyColumnNode: this.transformModifyColumn.bind(this),
    AddConstraintNode: this.transformAddConstraint.bind(this),
    DropConstraintNode: this.transformDropConstraint.bind(this),
    ForeignKeyConstraintNode: this.transformForeignKeyConstraint.bind(this),
    CreateViewNode: this.transformCreateView.bind(this),
    DropViewNode: this.transformDropView.bind(this),
    GeneratedNode: this.transformGenerated.bind(this),
    DefaultValueNode: this.transformDefaultValue.bind(this),
    OnNode: this.transformOn.bind(this),
    ValuesNode: this.transformValues.bind(this),
    SelectModifierNode: this.transformSelectModifier.bind(this),
    CreateTypeNode: this.transformCreateType.bind(this),
    DropTypeNode: this.transformDropType.bind(this),
    ExplainNode: this.transformExplain.bind(this),
    DefaultInsertValueNode: this.transformDefaultInsertValue.bind(this),
    AggregateFunctionNode: this.transformAggregateFunction.bind(this),
    OverNode: this.transformOver.bind(this),
    PartitionByNode: this.transformPartitionBy.bind(this),
    PartitionByItemNode: this.transformPartitionByItem.bind(this),
    SetOperationNode: this.transformSetOperation.bind(this),
    BinaryOperationNode: this.transformBinaryOperation.bind(this),
    UnaryOperationNode: this.transformUnaryOperation.bind(this),
    UsingNode: this.transformUsing.bind(this),
    FunctionNode: this.transformFunction.bind(this),
    CaseNode: this.transformCase.bind(this),
    WhenNode: this.transformWhen.bind(this),
    JSONReferenceNode: this.transformJSONReference.bind(this),
    JSONPathNode: this.transformJSONPath.bind(this),
    JSONPathLegNode: this.transformJSONPathLeg.bind(this),
    JSONOperatorChainNode: this.transformJSONOperatorChain.bind(this),
    TupleNode: this.transformTuple.bind(this)
  });
  transformNode(node) {
    if (!node) {
      return node;
    }
    this.nodeStack.push(node);
    const out = this.transformNodeImpl(node);
    this.nodeStack.pop();
    return freeze(out);
  }
  transformNodeImpl(node) {
    return this.#transformers[node.kind](node);
  }
  transformNodeList(list) {
    if (!list) {
      return list;
    }
    return freeze(list.map((node) => this.transformNode(node)));
  }
  transformSelectQuery(node) {
    return requireAllProps({
      kind: "SelectQueryNode",
      from: this.transformNode(node.from),
      selections: this.transformNodeList(node.selections),
      distinctOn: this.transformNodeList(node.distinctOn),
      joins: this.transformNodeList(node.joins),
      groupBy: this.transformNode(node.groupBy),
      orderBy: this.transformNode(node.orderBy),
      where: this.transformNode(node.where),
      frontModifiers: this.transformNodeList(node.frontModifiers),
      endModifiers: this.transformNodeList(node.endModifiers),
      limit: this.transformNode(node.limit),
      offset: this.transformNode(node.offset),
      with: this.transformNode(node.with),
      having: this.transformNode(node.having),
      explain: this.transformNode(node.explain),
      setOperations: this.transformNodeList(node.setOperations)
    });
  }
  transformSelection(node) {
    return requireAllProps({
      kind: "SelectionNode",
      selection: this.transformNode(node.selection)
    });
  }
  transformColumn(node) {
    return requireAllProps({
      kind: "ColumnNode",
      column: this.transformNode(node.column)
    });
  }
  transformAlias(node) {
    return requireAllProps({
      kind: "AliasNode",
      node: this.transformNode(node.node),
      alias: this.transformNode(node.alias)
    });
  }
  transformTable(node) {
    return requireAllProps({
      kind: "TableNode",
      table: this.transformNode(node.table)
    });
  }
  transformFrom(node) {
    return requireAllProps({
      kind: "FromNode",
      froms: this.transformNodeList(node.froms)
    });
  }
  transformReference(node) {
    return requireAllProps({
      kind: "ReferenceNode",
      column: this.transformNode(node.column),
      table: this.transformNode(node.table)
    });
  }
  transformAnd(node) {
    return requireAllProps({
      kind: "AndNode",
      left: this.transformNode(node.left),
      right: this.transformNode(node.right)
    });
  }
  transformOr(node) {
    return requireAllProps({
      kind: "OrNode",
      left: this.transformNode(node.left),
      right: this.transformNode(node.right)
    });
  }
  transformValueList(node) {
    return requireAllProps({
      kind: "ValueListNode",
      values: this.transformNodeList(node.values)
    });
  }
  transformParens(node) {
    return requireAllProps({
      kind: "ParensNode",
      node: this.transformNode(node.node)
    });
  }
  transformJoin(node) {
    return requireAllProps({
      kind: "JoinNode",
      joinType: node.joinType,
      table: this.transformNode(node.table),
      on: this.transformNode(node.on)
    });
  }
  transformRaw(node) {
    return requireAllProps({
      kind: "RawNode",
      sqlFragments: freeze([...node.sqlFragments]),
      parameters: this.transformNodeList(node.parameters)
    });
  }
  transformWhere(node) {
    return requireAllProps({
      kind: "WhereNode",
      where: this.transformNode(node.where)
    });
  }
  transformInsertQuery(node) {
    return requireAllProps({
      kind: "InsertQueryNode",
      into: this.transformNode(node.into),
      columns: this.transformNodeList(node.columns),
      values: this.transformNode(node.values),
      returning: this.transformNode(node.returning),
      onConflict: this.transformNode(node.onConflict),
      onDuplicateKey: this.transformNode(node.onDuplicateKey),
      with: this.transformNode(node.with),
      ignore: node.ignore,
      replace: node.replace,
      explain: this.transformNode(node.explain)
    });
  }
  transformValues(node) {
    return requireAllProps({
      kind: "ValuesNode",
      values: this.transformNodeList(node.values)
    });
  }
  transformDeleteQuery(node) {
    return requireAllProps({
      kind: "DeleteQueryNode",
      from: this.transformNode(node.from),
      using: this.transformNode(node.using),
      joins: this.transformNodeList(node.joins),
      where: this.transformNode(node.where),
      returning: this.transformNode(node.returning),
      with: this.transformNode(node.with),
      orderBy: this.transformNode(node.orderBy),
      limit: this.transformNode(node.limit),
      explain: this.transformNode(node.explain)
    });
  }
  transformReturning(node) {
    return requireAllProps({
      kind: "ReturningNode",
      selections: this.transformNodeList(node.selections)
    });
  }
  transformCreateTable(node) {
    return requireAllProps({
      kind: "CreateTableNode",
      table: this.transformNode(node.table),
      columns: this.transformNodeList(node.columns),
      constraints: this.transformNodeList(node.constraints),
      temporary: node.temporary,
      ifNotExists: node.ifNotExists,
      onCommit: node.onCommit,
      frontModifiers: this.transformNodeList(node.frontModifiers),
      endModifiers: this.transformNodeList(node.endModifiers)
    });
  }
  transformColumnDefinition(node) {
    return requireAllProps({
      kind: "ColumnDefinitionNode",
      column: this.transformNode(node.column),
      dataType: this.transformNode(node.dataType),
      references: this.transformNode(node.references),
      primaryKey: node.primaryKey,
      autoIncrement: node.autoIncrement,
      unique: node.unique,
      notNull: node.notNull,
      unsigned: node.unsigned,
      defaultTo: this.transformNode(node.defaultTo),
      check: this.transformNode(node.check),
      generated: this.transformNode(node.generated),
      frontModifiers: this.transformNodeList(node.frontModifiers),
      endModifiers: this.transformNodeList(node.endModifiers)
    });
  }
  transformAddColumn(node) {
    return requireAllProps({
      kind: "AddColumnNode",
      column: this.transformNode(node.column)
    });
  }
  transformDropTable(node) {
    return requireAllProps({
      kind: "DropTableNode",
      table: this.transformNode(node.table),
      ifExists: node.ifExists,
      cascade: node.cascade
    });
  }
  transformOrderBy(node) {
    return requireAllProps({
      kind: "OrderByNode",
      items: this.transformNodeList(node.items)
    });
  }
  transformOrderByItem(node) {
    return requireAllProps({
      kind: "OrderByItemNode",
      orderBy: this.transformNode(node.orderBy),
      direction: this.transformNode(node.direction)
    });
  }
  transformGroupBy(node) {
    return requireAllProps({
      kind: "GroupByNode",
      items: this.transformNodeList(node.items)
    });
  }
  transformGroupByItem(node) {
    return requireAllProps({
      kind: "GroupByItemNode",
      groupBy: this.transformNode(node.groupBy)
    });
  }
  transformUpdateQuery(node) {
    return requireAllProps({
      kind: "UpdateQueryNode",
      table: this.transformNode(node.table),
      from: this.transformNode(node.from),
      joins: this.transformNodeList(node.joins),
      where: this.transformNode(node.where),
      updates: this.transformNodeList(node.updates),
      returning: this.transformNode(node.returning),
      with: this.transformNode(node.with),
      explain: this.transformNode(node.explain)
    });
  }
  transformColumnUpdate(node) {
    return requireAllProps({
      kind: "ColumnUpdateNode",
      column: this.transformNode(node.column),
      value: this.transformNode(node.value)
    });
  }
  transformLimit(node) {
    return requireAllProps({
      kind: "LimitNode",
      limit: this.transformNode(node.limit)
    });
  }
  transformOffset(node) {
    return requireAllProps({
      kind: "OffsetNode",
      offset: this.transformNode(node.offset)
    });
  }
  transformOnConflict(node) {
    return requireAllProps({
      kind: "OnConflictNode",
      columns: this.transformNodeList(node.columns),
      constraint: this.transformNode(node.constraint),
      indexExpression: this.transformNode(node.indexExpression),
      indexWhere: this.transformNode(node.indexWhere),
      updates: this.transformNodeList(node.updates),
      updateWhere: this.transformNode(node.updateWhere),
      doNothing: node.doNothing
    });
  }
  transformOnDuplicateKey(node) {
    return requireAllProps({
      kind: "OnDuplicateKeyNode",
      updates: this.transformNodeList(node.updates)
    });
  }
  transformCreateIndex(node) {
    return requireAllProps({
      kind: "CreateIndexNode",
      name: this.transformNode(node.name),
      table: this.transformNode(node.table),
      columns: this.transformNodeList(node.columns),
      unique: node.unique,
      using: this.transformNode(node.using),
      ifNotExists: node.ifNotExists,
      where: this.transformNode(node.where)
    });
  }
  transformList(node) {
    return requireAllProps({
      kind: "ListNode",
      items: this.transformNodeList(node.items)
    });
  }
  transformDropIndex(node) {
    return requireAllProps({
      kind: "DropIndexNode",
      name: this.transformNode(node.name),
      table: this.transformNode(node.table),
      ifExists: node.ifExists,
      cascade: node.cascade
    });
  }
  transformPrimaryKeyConstraint(node) {
    return requireAllProps({
      kind: "PrimaryKeyConstraintNode",
      columns: this.transformNodeList(node.columns),
      name: this.transformNode(node.name)
    });
  }
  transformUniqueConstraint(node) {
    return requireAllProps({
      kind: "UniqueConstraintNode",
      columns: this.transformNodeList(node.columns),
      name: this.transformNode(node.name)
    });
  }
  transformForeignKeyConstraint(node) {
    return requireAllProps({
      kind: "ForeignKeyConstraintNode",
      columns: this.transformNodeList(node.columns),
      references: this.transformNode(node.references),
      name: this.transformNode(node.name),
      onDelete: node.onDelete,
      onUpdate: node.onUpdate
    });
  }
  transformSetOperation(node) {
    return requireAllProps({
      kind: "SetOperationNode",
      operator: node.operator,
      expression: this.transformNode(node.expression),
      all: node.all
    });
  }
  transformReferences(node) {
    return requireAllProps({
      kind: "ReferencesNode",
      table: this.transformNode(node.table),
      columns: this.transformNodeList(node.columns),
      onDelete: node.onDelete,
      onUpdate: node.onUpdate
    });
  }
  transformCheckConstraint(node) {
    return requireAllProps({
      kind: "CheckConstraintNode",
      expression: this.transformNode(node.expression),
      name: this.transformNode(node.name)
    });
  }
  transformWith(node) {
    return requireAllProps({
      kind: "WithNode",
      expressions: this.transformNodeList(node.expressions),
      recursive: node.recursive
    });
  }
  transformCommonTableExpression(node) {
    return requireAllProps({
      kind: "CommonTableExpressionNode",
      name: this.transformNode(node.name),
      materialized: node.materialized,
      expression: this.transformNode(node.expression)
    });
  }
  transformCommonTableExpressionName(node) {
    return requireAllProps({
      kind: "CommonTableExpressionNameNode",
      table: this.transformNode(node.table),
      columns: this.transformNodeList(node.columns)
    });
  }
  transformHaving(node) {
    return requireAllProps({
      kind: "HavingNode",
      having: this.transformNode(node.having)
    });
  }
  transformCreateSchema(node) {
    return requireAllProps({
      kind: "CreateSchemaNode",
      schema: this.transformNode(node.schema),
      ifNotExists: node.ifNotExists
    });
  }
  transformDropSchema(node) {
    return requireAllProps({
      kind: "DropSchemaNode",
      schema: this.transformNode(node.schema),
      ifExists: node.ifExists,
      cascade: node.cascade
    });
  }
  transformAlterTable(node) {
    return requireAllProps({
      kind: "AlterTableNode",
      table: this.transformNode(node.table),
      renameTo: this.transformNode(node.renameTo),
      setSchema: this.transformNode(node.setSchema),
      columnAlterations: this.transformNodeList(node.columnAlterations),
      addConstraint: this.transformNode(node.addConstraint),
      dropConstraint: this.transformNode(node.dropConstraint)
    });
  }
  transformDropColumn(node) {
    return requireAllProps({
      kind: "DropColumnNode",
      column: this.transformNode(node.column)
    });
  }
  transformRenameColumn(node) {
    return requireAllProps({
      kind: "RenameColumnNode",
      column: this.transformNode(node.column),
      renameTo: this.transformNode(node.renameTo)
    });
  }
  transformAlterColumn(node) {
    return requireAllProps({
      kind: "AlterColumnNode",
      column: this.transformNode(node.column),
      dataType: this.transformNode(node.dataType),
      dataTypeExpression: this.transformNode(node.dataTypeExpression),
      setDefault: this.transformNode(node.setDefault),
      dropDefault: node.dropDefault,
      setNotNull: node.setNotNull,
      dropNotNull: node.dropNotNull
    });
  }
  transformModifyColumn(node) {
    return requireAllProps({
      kind: "ModifyColumnNode",
      column: this.transformNode(node.column)
    });
  }
  transformAddConstraint(node) {
    return requireAllProps({
      kind: "AddConstraintNode",
      constraint: this.transformNode(node.constraint)
    });
  }
  transformDropConstraint(node) {
    return requireAllProps({
      kind: "DropConstraintNode",
      constraintName: this.transformNode(node.constraintName),
      ifExists: node.ifExists,
      modifier: node.modifier
    });
  }
  transformCreateView(node) {
    return requireAllProps({
      kind: "CreateViewNode",
      name: this.transformNode(node.name),
      temporary: node.temporary,
      orReplace: node.orReplace,
      ifNotExists: node.ifNotExists,
      materialized: node.materialized,
      columns: this.transformNodeList(node.columns),
      as: this.transformNode(node.as)
    });
  }
  transformDropView(node) {
    return requireAllProps({
      kind: "DropViewNode",
      name: this.transformNode(node.name),
      ifExists: node.ifExists,
      materialized: node.materialized,
      cascade: node.cascade
    });
  }
  transformGenerated(node) {
    return requireAllProps({
      kind: "GeneratedNode",
      byDefault: node.byDefault,
      always: node.always,
      identity: node.identity,
      stored: node.stored,
      expression: this.transformNode(node.expression)
    });
  }
  transformDefaultValue(node) {
    return requireAllProps({
      kind: "DefaultValueNode",
      defaultValue: this.transformNode(node.defaultValue)
    });
  }
  transformOn(node) {
    return requireAllProps({
      kind: "OnNode",
      on: this.transformNode(node.on)
    });
  }
  transformSelectModifier(node) {
    return requireAllProps({
      kind: "SelectModifierNode",
      modifier: node.modifier,
      rawModifier: this.transformNode(node.rawModifier)
    });
  }
  transformCreateType(node) {
    return requireAllProps({
      kind: "CreateTypeNode",
      name: this.transformNode(node.name),
      enum: this.transformNode(node.enum)
    });
  }
  transformDropType(node) {
    return requireAllProps({
      kind: "DropTypeNode",
      name: this.transformNode(node.name),
      ifExists: node.ifExists
    });
  }
  transformExplain(node) {
    return requireAllProps({
      kind: "ExplainNode",
      format: node.format,
      options: this.transformNode(node.options)
    });
  }
  transformSchemableIdentifier(node) {
    return requireAllProps({
      kind: "SchemableIdentifierNode",
      schema: this.transformNode(node.schema),
      identifier: this.transformNode(node.identifier)
    });
  }
  transformAggregateFunction(node) {
    return requireAllProps({
      kind: "AggregateFunctionNode",
      aggregated: this.transformNodeList(node.aggregated),
      distinct: node.distinct,
      filter: this.transformNode(node.filter),
      func: node.func,
      over: this.transformNode(node.over)
    });
  }
  transformOver(node) {
    return requireAllProps({
      kind: "OverNode",
      orderBy: this.transformNode(node.orderBy),
      partitionBy: this.transformNode(node.partitionBy)
    });
  }
  transformPartitionBy(node) {
    return requireAllProps({
      kind: "PartitionByNode",
      items: this.transformNodeList(node.items)
    });
  }
  transformPartitionByItem(node) {
    return requireAllProps({
      kind: "PartitionByItemNode",
      partitionBy: this.transformNode(node.partitionBy)
    });
  }
  transformBinaryOperation(node) {
    return requireAllProps({
      kind: "BinaryOperationNode",
      leftOperand: this.transformNode(node.leftOperand),
      operator: this.transformNode(node.operator),
      rightOperand: this.transformNode(node.rightOperand)
    });
  }
  transformUnaryOperation(node) {
    return requireAllProps({
      kind: "UnaryOperationNode",
      operator: this.transformNode(node.operator),
      operand: this.transformNode(node.operand)
    });
  }
  transformUsing(node) {
    return requireAllProps({
      kind: "UsingNode",
      tables: this.transformNodeList(node.tables)
    });
  }
  transformFunction(node) {
    return requireAllProps({
      kind: "FunctionNode",
      func: node.func,
      arguments: this.transformNodeList(node.arguments)
    });
  }
  transformCase(node) {
    return requireAllProps({
      kind: "CaseNode",
      value: this.transformNode(node.value),
      when: this.transformNodeList(node.when),
      else: this.transformNode(node.else),
      isStatement: node.isStatement
    });
  }
  transformWhen(node) {
    return requireAllProps({
      kind: "WhenNode",
      condition: this.transformNode(node.condition),
      result: this.transformNode(node.result)
    });
  }
  transformJSONReference(node) {
    return requireAllProps({
      kind: "JSONReferenceNode",
      reference: this.transformNode(node.reference),
      traversal: this.transformNode(node.traversal)
    });
  }
  transformJSONPath(node) {
    return requireAllProps({
      kind: "JSONPathNode",
      inOperator: this.transformNode(node.inOperator),
      pathLegs: this.transformNodeList(node.pathLegs)
    });
  }
  transformJSONPathLeg(node) {
    return requireAllProps({
      kind: "JSONPathLegNode",
      type: node.type,
      value: node.value
    });
  }
  transformJSONOperatorChain(node) {
    return requireAllProps({
      kind: "JSONOperatorChainNode",
      operator: this.transformNode(node.operator),
      values: this.transformNodeList(node.values)
    });
  }
  transformTuple(node) {
    return requireAllProps({
      kind: "TupleNode",
      values: this.transformNodeList(node.values)
    });
  }
  transformDataType(node) {
    return node;
  }
  transformSelectAll(node) {
    return node;
  }
  transformIdentifier(node) {
    return node;
  }
  transformValue(node) {
    return node;
  }
  transformPrimitiveValueList(node) {
    return node;
  }
  transformOperator(node) {
    return node;
  }
  transformDefaultInsertValue(node) {
    return node;
  }
};

// ../../node_modules/kysely/dist/esm/plugin/with-schema/with-schema-transformer.js
var ROOT_OPERATION_NODES = freeze({
  AlterTableNode: true,
  CreateIndexNode: true,
  CreateSchemaNode: true,
  CreateTableNode: true,
  CreateTypeNode: true,
  CreateViewNode: true,
  DeleteQueryNode: true,
  DropIndexNode: true,
  DropSchemaNode: true,
  DropTableNode: true,
  DropTypeNode: true,
  DropViewNode: true,
  InsertQueryNode: true,
  RawNode: true,
  SelectQueryNode: true,
  UpdateQueryNode: true
});
var WithSchemaTransformer = class extends OperationNodeTransformer {
  #schema;
  #schemableIds = /* @__PURE__ */ new Set();
  #ctes = /* @__PURE__ */ new Set();
  constructor(schema) {
    super();
    this.#schema = schema;
  }
  transformNodeImpl(node) {
    if (!this.#isRootOperationNode(node)) {
      return super.transformNodeImpl(node);
    }
    const ctes = this.#collectCTEs(node);
    for (const cte of ctes) {
      this.#ctes.add(cte);
    }
    const tables = this.#collectSchemableIds(node);
    for (const table of tables) {
      this.#schemableIds.add(table);
    }
    const transformed = super.transformNodeImpl(node);
    for (const table of tables) {
      this.#schemableIds.delete(table);
    }
    for (const cte of ctes) {
      this.#ctes.delete(cte);
    }
    return transformed;
  }
  transformSchemableIdentifier(node) {
    const transformed = super.transformSchemableIdentifier(node);
    if (transformed.schema || !this.#schemableIds.has(node.identifier.name)) {
      return transformed;
    }
    return {
      ...transformed,
      schema: IdentifierNode.create(this.#schema)
    };
  }
  transformReferences(node) {
    const transformed = super.transformReferences(node);
    if (transformed.table.table.schema) {
      return transformed;
    }
    return {
      ...transformed,
      table: TableNode.createWithSchema(this.#schema, transformed.table.table.identifier.name)
    };
  }
  #isRootOperationNode(node) {
    return node.kind in ROOT_OPERATION_NODES;
  }
  #collectSchemableIds(node) {
    const schemableIds = /* @__PURE__ */ new Set();
    if ("name" in node && node.name && SchemableIdentifierNode.is(node.name)) {
      this.#collectSchemableId(node.name, schemableIds);
    }
    if ("from" in node && node.from) {
      for (const from of node.from.froms) {
        this.#collectSchemableIdsFromTableExpr(from, schemableIds);
      }
    }
    if ("into" in node && node.into) {
      this.#collectSchemableIdsFromTableExpr(node.into, schemableIds);
    }
    if ("table" in node && node.table) {
      this.#collectSchemableIdsFromTableExpr(node.table, schemableIds);
    }
    if ("joins" in node && node.joins) {
      for (const join of node.joins) {
        this.#collectSchemableIdsFromTableExpr(join.table, schemableIds);
      }
    }
    return schemableIds;
  }
  #collectCTEs(node) {
    const ctes = /* @__PURE__ */ new Set();
    if ("with" in node && node.with) {
      this.#collectCTEIds(node.with, ctes);
    }
    return ctes;
  }
  #collectSchemableIdsFromTableExpr(node, schemableIds) {
    const table = TableNode.is(node) ? node : AliasNode.is(node) && TableNode.is(node.node) ? node.node : null;
    if (table) {
      this.#collectSchemableId(table.table, schemableIds);
    }
  }
  #collectSchemableId(node, schemableIds) {
    const id = node.identifier.name;
    if (!this.#schemableIds.has(id) && !this.#ctes.has(id)) {
      schemableIds.add(id);
    }
  }
  #collectCTEIds(node, ctes) {
    for (const expr of node.expressions) {
      const cteId = expr.name.table.table.identifier.name;
      if (!this.#ctes.has(cteId)) {
        ctes.add(cteId);
      }
    }
  }
};

// ../../node_modules/kysely/dist/esm/plugin/with-schema/with-schema-plugin.js
var WithSchemaPlugin = class {
  #transformer;
  constructor(schema) {
    this.#transformer = new WithSchemaTransformer(schema);
  }
  transformQuery(args) {
    return this.#transformer.transformNode(args.node);
  }
  async transformResult(args) {
    return args.result;
  }
};

// ../../node_modules/kysely/dist/esm/query-creator.js
var QueryCreator = class _QueryCreator {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  selectFrom(from) {
    return createSelectQueryBuilder({
      queryId: createQueryId(),
      executor: this.#props.executor,
      queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(from), this.#props.withNode)
    });
  }
  selectNoFrom(selection) {
    return createSelectQueryBuilder({
      queryId: createQueryId(),
      executor: this.#props.executor,
      queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(this.#props.withNode), parseSelectArg(selection))
    });
  }
  /**
   * Creates an insert query.
   *
   * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}
   * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of
   * the inserted row if the db returned one.
   *
   * See the {@link InsertQueryBuilder.values | values} method for more info and examples. Also see
   * the {@link ReturningInterface.returning | returning} method for a way to return columns
   * on supported databases like PostgreSQL.
   *
   * ### Examples
   *
   * ```ts
   * const result = await db
   *   .insertInto('person')
   *   .values({
   *     first_name: 'Jennifer',
   *     last_name: 'Aniston'
   *   })
   *   .executeTakeFirst()
   *
   * console.log(result.insertId)
   * ```
   *
   * Some databases like PostgreSQL support the `returning` method:
   *
   * ```ts
   * const { id } = await db
   *   .insertInto('person')
   *   .values({
   *     first_name: 'Jennifer',
   *     last_name: 'Aniston'
   *   })
   *   .returning('id')
   *   .executeTakeFirst()
   * ```
   */
  insertInto(table) {
    return new InsertQueryBuilder({
      queryId: createQueryId(),
      executor: this.#props.executor,
      queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode)
    });
  }
  /**
   * Creates a replace query.
   *
   * A MySQL-only statement similar to {@link InsertQueryBuilder.onDuplicateKeyUpdate}
   * that deletes and inserts values on collision instead of updating existing rows.
   *
   * The return value of this query is an instance of {@link InsertResult}. {@link InsertResult}
   * has the {@link InsertResult.insertId | insertId} field that holds the auto incremented id of
   * the inserted row if the db returned one.
   *
   * See the {@link InsertQueryBuilder.values | values} method for more info and examples.
   *
   * ### Examples
   *
   * ```ts
   * const result = await db
   *   .replaceInto('person')
   *   .values({
   *     first_name: 'Jennifer',
   *     last_name: 'Aniston'
   *   })
   *   .executeTakeFirst()
   *
   * console.log(result.insertId)
   * ```
   */
  replaceInto(table) {
    return new InsertQueryBuilder({
      queryId: createQueryId(),
      executor: this.#props.executor,
      queryNode: InsertQueryNode.create(parseTable(table), this.#props.withNode, true)
    });
  }
  deleteFrom(tables) {
    return new DeleteQueryBuilder({
      queryId: createQueryId(),
      executor: this.#props.executor,
      queryNode: DeleteQueryNode.create(parseTableExpressionOrList(tables), this.#props.withNode)
    });
  }
  updateTable(table) {
    return new UpdateQueryBuilder({
      queryId: createQueryId(),
      executor: this.#props.executor,
      queryNode: UpdateQueryNode.create(parseTableExpression(table), this.#props.withNode)
    });
  }
  /**
   * Creates a `with` query (Common Table Expression).
   *
   * ### Examples
   *
   * ```ts
   * await db
   *   .with('jennifers', (db) => db
   *     .selectFrom('person')
   *     .where('first_name', '=', 'Jennifer')
   *     .select(['id', 'age'])
   *   )
   *   .with('adult_jennifers', (db) => db
   *     .selectFrom('jennifers')
   *     .where('age', '>', 18)
   *     .select(['id', 'age'])
   *   )
   *   .selectFrom('adult_jennifers')
   *   .where('age', '<', 60)
   *   .selectAll()
   *   .execute()
   * ```
   *
   * The CTE name can optionally specify column names in addition to
   * a name. In that case Kysely requires the expression to retun
   * rows with the same columns.
   *
   * ```ts
   * await db
   *   .with('jennifers(id, age)', (db) => db
   *     .selectFrom('person')
   *     .where('first_name', '=', 'Jennifer')
   *     // This is ok since we return columns with the same
   *     // names as specified by `jennifers(id, age)`.
   *     .select(['id', 'age'])
   *   )
   *   .selectFrom('jennifers')
   *   .selectAll()
   *   .execute()
   * ```
   *
   * The first argument can also be a callback. The callback is passed
   * a `CTEBuilder` instance that can be used to configure the CTE:
   *
   * ```ts
   * await db
   *   .with(
   *     (cte) => cte('jennifers').materialized(),
   *     (db) => db
   *       .selectFrom('person')
   *       .where('first_name', '=', 'Jennifer')
   *       .select(['id', 'age'])
   *   )
   *   .selectFrom('jennifers')
   *   .selectAll()
   *   .execute()
   * ```
   */
  with(nameOrBuilder, expression) {
    const cte = parseCommonTableExpression(nameOrBuilder, expression);
    return new _QueryCreator({
      ...this.#props,
      withNode: this.#props.withNode ? WithNode.cloneWithExpression(this.#props.withNode, cte) : WithNode.create(cte)
    });
  }
  /**
   * Creates a recursive `with` query (Common Table Expression).
   *
   * Note that recursiveness is a property of the whole `with` statement.
   * You cannot have recursive and non-recursive CTEs in a same `with` statement.
   * Therefore the recursiveness is determined by the **first** `with` or
   * `withRecusive` call you make.
   *
   * See the {@link with} method for examples and more documentation.
   */
  withRecursive(nameOrBuilder, expression) {
    const cte = parseCommonTableExpression(nameOrBuilder, expression);
    return new _QueryCreator({
      ...this.#props,
      withNode: this.#props.withNode ? WithNode.cloneWithExpression(this.#props.withNode, cte) : WithNode.create(cte, { recursive: true })
    });
  }
  /**
   * Returns a copy of this query creator instance with the given plugin installed.
   */
  withPlugin(plugin) {
    return new _QueryCreator({
      ...this.#props,
      executor: this.#props.executor.withPlugin(plugin)
    });
  }
  /**
   * Returns a copy of this query creator instance without any plugins.
   */
  withoutPlugins() {
    return new _QueryCreator({
      ...this.#props,
      executor: this.#props.executor.withoutPlugins()
    });
  }
  /**
   * Sets the schema to be used for all table references that don't explicitly
   * specify a schema.
   *
   * This only affects the query created through the builder returned from
   * this method and doesn't modify the `db` instance.
   *
   * See [this recipe](https://github.com/koskimas/kysely/tree/master/site/docs/recipes/schemas.md)
   * for a more detailed explanation.
   *
   * ### Examples
   *
   * ```
   * await db
   *   .withSchema('mammals')
   *   .selectFrom('pet')
   *   .selectAll()
   *   .innerJoin('public.person', 'public.person.id', 'pet.owner_id')
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select * from "mammals"."pet"
   * inner join "public"."person"
   * on "public"."person"."id" = "mammals"."pet"."owner_id"
   * ```
   *
   * `withSchema` is smart enough to not add schema for aliases,
   * common table expressions or other places where the schema
   * doesn't belong to:
   *
   * ```
   * await db
   *   .withSchema('mammals')
   *   .selectFrom('pet as p')
   *   .select('p.name')
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select "p"."name" from "mammals"."pet" as "p"
   * ```
   */
  withSchema(schema) {
    return new _QueryCreator({
      ...this.#props,
      executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema))
    });
  }
};

// ../../node_modules/kysely/dist/esm/query-executor/noop-query-executor.js
init_esm();

// ../../node_modules/kysely/dist/esm/query-executor/query-executor-base.js
init_esm();

// ../../node_modules/kysely/dist/esm/util/deferred.js
init_esm();
var Deferred = class {
  #promise;
  #resolve;
  #reject;
  constructor() {
    this.#promise = new Promise((resolve, reject) => {
      this.#reject = reject;
      this.#resolve = resolve;
    });
  }
  get promise() {
    return this.#promise;
  }
  resolve = (value) => {
    if (this.#resolve) {
      this.#resolve(value);
    }
  };
  reject = (reason) => {
    if (this.#reject) {
      this.#reject(reason);
    }
  };
};

// ../../node_modules/kysely/dist/esm/util/log-once.js
init_esm();
var LOGGED_MESSAGES = /* @__PURE__ */ new Set();
function logOnce(message) {
  if (LOGGED_MESSAGES.has(message)) {
    return;
  }
  LOGGED_MESSAGES.add(message);
  console.log(message);
}

// ../../node_modules/kysely/dist/esm/query-executor/query-executor-base.js
var NO_PLUGINS = freeze([]);
var QueryExecutorBase = class {
  #plugins;
  constructor(plugins = NO_PLUGINS) {
    this.#plugins = plugins;
  }
  get plugins() {
    return this.#plugins;
  }
  transformQuery(node, queryId) {
    for (const plugin of this.#plugins) {
      const transformedNode = plugin.transformQuery({ node, queryId });
      if (transformedNode.kind === node.kind) {
        node = transformedNode;
      } else {
        throw new Error([
          `KyselyPlugin.transformQuery must return a node`,
          `of the same kind that was given to it.`,
          `The plugin was given a ${node.kind}`,
          `but it returned a ${transformedNode.kind}`
        ].join(" "));
      }
    }
    return node;
  }
  async executeQuery(compiledQuery, queryId) {
    return await this.provideConnection(async (connection) => {
      const result = await connection.executeQuery(compiledQuery);
      const transformedResult = await this.#transformResult(result, queryId);
      warnOfOutdatedDriverOrPlugins(result, transformedResult);
      return transformedResult;
    });
  }
  async *stream(compiledQuery, chunkSize, queryId) {
    const connectionDefer = new Deferred();
    const connectionReleaseDefer = new Deferred();
    this.provideConnection(async (connection2) => {
      connectionDefer.resolve(connection2);
      return await connectionReleaseDefer.promise;
    }).catch((ex) => connectionDefer.reject(ex));
    const connection = await connectionDefer.promise;
    try {
      for await (const result of connection.streamQuery(compiledQuery, chunkSize)) {
        yield await this.#transformResult(result, queryId);
      }
    } finally {
      connectionReleaseDefer.resolve();
    }
  }
  async #transformResult(result, queryId) {
    for (const plugin of this.#plugins) {
      result = await plugin.transformResult({ result, queryId });
    }
    return result;
  }
};
function warnOfOutdatedDriverOrPlugins(result, transformedResult) {
  const { numAffectedRows } = result;
  if (numAffectedRows === void 0 && result.numUpdatedOrDeletedRows === void 0 || numAffectedRows !== void 0 && transformedResult.numAffectedRows !== void 0) {
    return;
  }
  logOnce("kysely:warning: outdated driver/plugin detected! QueryResult.numUpdatedOrDeletedRows is deprecated and will be removed in a future release.");
}

// ../../node_modules/kysely/dist/esm/query-executor/noop-query-executor.js
var NoopQueryExecutor = class _NoopQueryExecutor extends QueryExecutorBase {
  get adapter() {
    throw new Error("this query cannot be compiled to SQL");
  }
  compileQuery() {
    throw new Error("this query cannot be compiled to SQL");
  }
  provideConnection() {
    throw new Error("this query cannot be executed");
  }
  withConnectionProvider() {
    throw new Error("this query cannot have a connection provider");
  }
  withPlugin(plugin) {
    return new _NoopQueryExecutor([...this.plugins, plugin]);
  }
  withPlugins(plugins) {
    return new _NoopQueryExecutor([...this.plugins, ...plugins]);
  }
  withPluginAtFront(plugin) {
    return new _NoopQueryExecutor([plugin, ...this.plugins]);
  }
  withoutPlugins() {
    return new _NoopQueryExecutor([]);
  }
};
var NOOP_QUERY_EXECUTOR = new NoopQueryExecutor();

// ../../node_modules/kysely/dist/esm/parser/parse-utils.js
function createQueryCreator() {
  return new QueryCreator({
    executor: NOOP_QUERY_EXECUTOR
  });
}
function createJoinBuilder(joinType, table) {
  return new JoinBuilder({
    joinNode: JoinNode.create(joinType, parseTableExpression(table))
  });
}
function createOverBuilder() {
  return new OverBuilder({
    overNode: OverNode.create()
  });
}

// ../../node_modules/kysely/dist/esm/parser/join-parser.js
function parseJoin(joinType, args) {
  if (args.length === 3) {
    return parseSingleOnJoin(joinType, args[0], args[1], args[2]);
  } else if (args.length === 2) {
    return parseCallbackJoin(joinType, args[0], args[1]);
  } else {
    throw new Error("not implemented");
  }
}
function parseCallbackJoin(joinType, from, callback) {
  return callback(createJoinBuilder(joinType, from)).toOperationNode();
}
function parseSingleOnJoin(joinType, from, lhsColumn, rhsColumn) {
  return JoinNode.createWithOn(joinType, parseTableExpression(from), parseReferentialBinaryOperation(lhsColumn, "=", rhsColumn));
}

// ../../node_modules/kysely/dist/esm/operation-node/offset-node.js
init_esm();
var OffsetNode = freeze({
  is(node) {
    return node.kind === "OffsetNode";
  },
  create(offset) {
    return freeze({
      kind: "OffsetNode",
      offset: ValueNode.create(offset)
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/group-by-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/group-by-item-node.js
init_esm();
var GroupByItemNode = freeze({
  is(node) {
    return node.kind === "GroupByItemNode";
  },
  create(groupBy) {
    return freeze({
      kind: "GroupByItemNode",
      groupBy
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/group-by-parser.js
function parseGroupBy(groupBy) {
  groupBy = isFunction(groupBy) ? groupBy(expressionBuilder()) : groupBy;
  return parseReferenceExpressionOrList(groupBy).map(GroupByItemNode.create);
}

// ../../node_modules/kysely/dist/esm/parser/set-operation-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/set-operation-node.js
init_esm();
var SetOperationNode = freeze({
  is(node) {
    return node.kind === "SetOperationNode";
  },
  create(operator, expression, all) {
    return freeze({
      kind: "SetOperationNode",
      operator,
      expression,
      all
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/set-operation-parser.js
function parseSetOperations(operator, expression, all) {
  if (isFunction(expression)) {
    expression = expression(createExpressionBuilder());
  }
  if (!isReadonlyArray(expression)) {
    expression = [expression];
  }
  return expression.map((expr) => SetOperationNode.create(operator, parseExpression(expr), all));
}

// ../../node_modules/kysely/dist/esm/expression/expression-wrapper.js
init_esm();
var ExpressionWrapper = class _ExpressionWrapper {
  #node;
  constructor(node) {
    this.#node = node;
  }
  /** @private */
  get expressionType() {
    return void 0;
  }
  as(alias) {
    return new AliasedExpressionWrapper(this, alias);
  }
  or(...args) {
    return new OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));
  }
  and(...args) {
    return new AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));
  }
  /**
   * Change the output type of the expression.
   *
   * This method call doesn't change the SQL in any way. This methods simply
   * returns a copy of this `ExpressionWrapper` with a new output type.
   */
  $castTo() {
    return new _ExpressionWrapper(this.#node);
  }
  toOperationNode() {
    return this.#node;
  }
};
var AliasedExpressionWrapper = class {
  #expr;
  #alias;
  constructor(expr, alias) {
    this.#expr = expr;
    this.#alias = alias;
  }
  /** @private */
  get expression() {
    return this.#expr;
  }
  /** @private */
  get alias() {
    return this.#alias;
  }
  toOperationNode() {
    return AliasNode.create(this.#expr.toOperationNode(), isOperationNodeSource(this.#alias) ? this.#alias.toOperationNode() : IdentifierNode.create(this.#alias));
  }
};
var OrWrapper = class _OrWrapper {
  #node;
  constructor(node) {
    this.#node = node;
  }
  /** @private */
  get expressionType() {
    return void 0;
  }
  as(alias) {
    return new AliasedExpressionWrapper(this, alias);
  }
  or(...args) {
    return new _OrWrapper(OrNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));
  }
  /**
   * Change the output type of the expression.
   *
   * This method call doesn't change the SQL in any way. This methods simply
   * returns a copy of this `OrWrapper` with a new output type.
   */
  $castTo() {
    return new _OrWrapper(this.#node);
  }
  toOperationNode() {
    return ParensNode.create(this.#node);
  }
};
var AndWrapper = class _AndWrapper {
  #node;
  constructor(node) {
    this.#node = node;
  }
  /** @private */
  get expressionType() {
    return void 0;
  }
  as(alias) {
    return new AliasedExpressionWrapper(this, alias);
  }
  and(...args) {
    return new _AndWrapper(AndNode.create(this.#node, parseValueBinaryOperationOrExpression(args)));
  }
  /**
   * Change the output type of the expression.
   *
   * This method call doesn't change the SQL in any way. This methods simply
   * returns a copy of this `AndWrapper` with a new output type.
   */
  $castTo() {
    return new _AndWrapper(this.#node);
  }
  toOperationNode() {
    return ParensNode.create(this.#node);
  }
};

// ../../node_modules/kysely/dist/esm/query-builder/select-query-builder.js
var SelectQueryBuilderImpl = class _SelectQueryBuilderImpl {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  get expressionType() {
    return void 0;
  }
  get isSelectQueryBuilder() {
    return true;
  }
  where(...args) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseValueBinaryOperationOrExpression(args))
    });
  }
  whereRef(lhs, op, rhs) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithWhere(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs))
    });
  }
  having(...args) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseValueBinaryOperationOrExpression(args))
    });
  }
  havingRef(lhs, op, rhs) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithHaving(this.#props.queryNode, parseReferentialBinaryOperation(lhs, op, rhs))
    });
  }
  select(selection) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectArg(selection))
    });
  }
  distinctOn(selection) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithDistinctOn(this.#props.queryNode, parseReferenceExpressionOrList(selection))
    });
  }
  modifyFront(modifier) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode()))
    });
  }
  modifyEnd(modifier) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.createWithExpression(modifier.toOperationNode()))
    });
  }
  distinct() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithFrontModifier(this.#props.queryNode, SelectModifierNode.create("Distinct"))
    });
  }
  forUpdate() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("ForUpdate"))
    });
  }
  forShare() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("ForShare"))
    });
  }
  forKeyShare() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("ForKeyShare"))
    });
  }
  forNoKeyUpdate() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("ForNoKeyUpdate"))
    });
  }
  skipLocked() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("SkipLocked"))
    });
  }
  noWait() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithEndModifier(this.#props.queryNode, SelectModifierNode.create("NoWait"))
    });
  }
  selectAll(table) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithSelections(this.#props.queryNode, parseSelectAll(table))
    });
  }
  innerJoin(...args) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("InnerJoin", args))
    });
  }
  leftJoin(...args) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("LeftJoin", args))
    });
  }
  rightJoin(...args) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("RightJoin", args))
    });
  }
  fullJoin(...args) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("FullJoin", args))
    });
  }
  innerJoinLateral(...args) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("LateralInnerJoin", args))
    });
  }
  leftJoinLateral(...args) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithJoin(this.#props.queryNode, parseJoin("LateralLeftJoin", args))
    });
  }
  orderBy(...args) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithOrderByItems(this.#props.queryNode, parseOrderBy(args))
    });
  }
  groupBy(groupBy) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithGroupByItems(this.#props.queryNode, parseGroupBy(groupBy))
    });
  }
  limit(limit) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithLimit(this.#props.queryNode, LimitNode.create(limit))
    });
  }
  offset(offset) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithOffset(this.#props.queryNode, OffsetNode.create(offset))
    });
  }
  union(expression) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("union", expression, false))
    });
  }
  unionAll(expression) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("union", expression, true))
    });
  }
  intersect(expression) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("intersect", expression, false))
    });
  }
  intersectAll(expression) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("intersect", expression, true))
    });
  }
  except(expression) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("except", expression, false))
    });
  }
  exceptAll(expression) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithSetOperations(this.#props.queryNode, parseSetOperations("except", expression, true))
    });
  }
  as(alias) {
    return new AliasedSelectQueryBuilderImpl(this, alias);
  }
  clearSelect() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithoutSelections(this.#props.queryNode)
    });
  }
  clearWhere() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithoutWhere(this.#props.queryNode)
    });
  }
  clearLimit() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithoutLimit(this.#props.queryNode)
    });
  }
  clearOffset() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithoutOffset(this.#props.queryNode)
    });
  }
  clearOrderBy() {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: SelectQueryNode.cloneWithoutOrderBy(this.#props.queryNode)
    });
  }
  $call(func) {
    return func(this);
  }
  $if(condition, func) {
    if (condition) {
      return func(this);
    }
    return new _SelectQueryBuilderImpl({
      ...this.#props
    });
  }
  $castTo() {
    return new _SelectQueryBuilderImpl(this.#props);
  }
  $narrowType() {
    return new _SelectQueryBuilderImpl(this.#props);
  }
  $assertType() {
    return new _SelectQueryBuilderImpl(this.#props);
  }
  $asTuple() {
    return new ExpressionWrapper(this.toOperationNode());
  }
  withPlugin(plugin) {
    return new _SelectQueryBuilderImpl({
      ...this.#props,
      executor: this.#props.executor.withPlugin(plugin)
    });
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.queryNode, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    const compiledQuery = this.compile();
    const result = await this.#props.executor.executeQuery(compiledQuery, this.#props.queryId);
    return result.rows;
  }
  async executeTakeFirst() {
    const [result] = await this.execute();
    return result;
  }
  async executeTakeFirstOrThrow(errorConstructor = NoResultError) {
    const result = await this.executeTakeFirst();
    if (result === void 0) {
      const error = isNoResultErrorConstructor(errorConstructor) ? new errorConstructor(this.toOperationNode()) : errorConstructor(this.toOperationNode());
      throw error;
    }
    return result;
  }
  async *stream(chunkSize = 100) {
    const compiledQuery = this.compile();
    const stream = this.#props.executor.stream(compiledQuery, chunkSize, this.#props.queryId);
    for await (const item of stream) {
      yield* item.rows;
    }
  }
  async explain(format, options) {
    const builder = new _SelectQueryBuilderImpl({
      ...this.#props,
      queryNode: QueryNode.cloneWithExplain(this.#props.queryNode, format, options)
    });
    return await builder.execute();
  }
};
preventAwait(SelectQueryBuilderImpl, "don't await SelectQueryBuilder instances directly. To execute the query you need to call `execute` or `executeTakeFirst`.");
function createSelectQueryBuilder(props) {
  return new SelectQueryBuilderImpl(props);
}
var AliasedSelectQueryBuilderImpl = class {
  #queryBuilder;
  #alias;
  constructor(queryBuilder, alias) {
    this.#queryBuilder = queryBuilder;
    this.#alias = alias;
  }
  get expression() {
    return this.#queryBuilder;
  }
  get alias() {
    return this.#alias;
  }
  get isAliasedSelectQueryBuilder() {
    return true;
  }
  toOperationNode() {
    return AliasNode.create(this.#queryBuilder.toOperationNode(), IdentifierNode.create(this.#alias));
  }
};
preventAwait(AliasedSelectQueryBuilderImpl, "don't await AliasedSelectQueryBuilder instances directly. AliasedSelectQueryBuilder should never be executed directly since it's always a part of another query.");

// ../../node_modules/kysely/dist/esm/query-builder/function-module.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/aggregate-function-node.js
init_esm();
var AggregateFunctionNode = freeze({
  is(node) {
    return node.kind === "AggregateFunctionNode";
  },
  create(aggregateFunction, aggregated = []) {
    return freeze({
      kind: "AggregateFunctionNode",
      func: aggregateFunction,
      aggregated
    });
  },
  cloneWithDistinct(aggregateFunctionNode) {
    return freeze({
      ...aggregateFunctionNode,
      distinct: true
    });
  },
  cloneWithFilter(aggregateFunctionNode, filter) {
    return freeze({
      ...aggregateFunctionNode,
      filter: aggregateFunctionNode.filter ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, "And", filter) : WhereNode.create(filter)
    });
  },
  cloneWithOrFilter(aggregateFunctionNode, filter) {
    return freeze({
      ...aggregateFunctionNode,
      filter: aggregateFunctionNode.filter ? WhereNode.cloneWithOperation(aggregateFunctionNode.filter, "Or", filter) : WhereNode.create(filter)
    });
  },
  cloneWithOver(aggregateFunctionNode, over) {
    return freeze({
      ...aggregateFunctionNode,
      over
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/function-node.js
init_esm();
var FunctionNode = freeze({
  is(node) {
    return node.kind === "FunctionNode";
  },
  create(func, args) {
    return freeze({
      kind: "FunctionNode",
      func,
      arguments: args
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-builder/aggregate-function-builder.js
init_esm();
var AggregateFunctionBuilder = class _AggregateFunctionBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  /** @private */
  get expressionType() {
    return void 0;
  }
  /**
   * Returns an aliased version of the function.
   *
   * In addition to slapping `as "the_alias"` to the end of the SQL,
   * this method also provides strict typing:
   *
   * ```ts
   * const result = await db
   *   .selectFrom('person')
   *   .select(
   *     (eb) => eb.fn.count<number>('id').as('person_count')
   *   )
   *   .executeTakeFirstOrThrow()
   *
   * // `person_count: number` field exists in the result type.
   * console.log(result.person_count)
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select count("id") as "person_count"
   * from "person"
   * ```
   */
  as(alias) {
    return new AliasedAggregateFunctionBuilder(this, alias);
  }
  /**
   * Adds a `distinct` clause inside the function.
   *
   * ### Examples
   *
   * ```ts
   * const result = await db
   *   .selectFrom('person')
   *   .select((eb) =>
   *     eb.fn.count<number>('first_name').distinct().as('first_name_count')
   *   )
   *   .executeTakeFirstOrThrow()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select count(distinct "first_name") as "first_name_count"
   * from "person"
   * ```
   */
  distinct() {
    return new _AggregateFunctionBuilder({
      ...this.#props,
      aggregateFunctionNode: AggregateFunctionNode.cloneWithDistinct(this.#props.aggregateFunctionNode)
    });
  }
  filterWhere(...args) {
    return new _AggregateFunctionBuilder({
      ...this.#props,
      aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseValueBinaryOperationOrExpression(args))
    });
  }
  /**
   * Adds a `filter` clause with a nested `where` clause after the function, where
   * both sides of the operator are references to columns.
   *
   * Similar to {@link WhereInterface}'s `whereRef` method.
   *
   * ### Examples
   *
   * Count people with same first and last names versus general public:
   *
   * ```ts
   * const result = await db
   *   .selectFrom('person')
   *   .select((eb) => [
   *     eb.fn
   *       .count<number>('id')
   *       .filterWhereRef('first_name', '=', 'last_name')
   *       .as('repeat_name_count'),
   *     eb.fn.count<number>('id').as('total_count'),
   *   ])
   *   .executeTakeFirstOrThrow()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select
   *   count("id") filter(where "first_name" = "last_name") as "repeat_name_count",
   *   count("id") as "total_count"
   * from "person"
   * ```
   */
  filterWhereRef(lhs, op, rhs) {
    return new _AggregateFunctionBuilder({
      ...this.#props,
      aggregateFunctionNode: AggregateFunctionNode.cloneWithFilter(this.#props.aggregateFunctionNode, parseReferentialBinaryOperation(lhs, op, rhs))
    });
  }
  /**
   * Adds an `over` clause (window functions) after the function.
   *
   * ### Examples
   *
   * ```ts
   * const result = await db
   *   .selectFrom('person')
   *   .select(
   *     (eb) => eb.fn.avg<number>('age').over().as('average_age')
   *   )
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select avg("age") over() as "average_age"
   * from "person"
   * ```
   *
   * Also supports passing a callback that returns an over builder,
   * allowing to add partition by and sort by clauses inside over.
   *
   * ```ts
   * const result = await db
   *   .selectFrom('person')
   *   .select(
   *     (eb) => eb.fn.avg<number>('age').over(
   *       ob => ob.partitionBy('last_name').orderBy('first_name', 'asc')
   *     ).as('average_age')
   *   )
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select avg("age") over(partition by "last_name" order by "first_name" asc) as "average_age"
   * from "person"
   * ```
   */
  over(over) {
    const builder = createOverBuilder();
    return new _AggregateFunctionBuilder({
      ...this.#props,
      aggregateFunctionNode: AggregateFunctionNode.cloneWithOver(this.#props.aggregateFunctionNode, (over ? over(builder) : builder).toOperationNode())
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.aggregateFunctionNode;
  }
};
preventAwait(AggregateFunctionBuilder, "don't await AggregateFunctionBuilder instances. They are never executed directly and are always just a part of a query.");
var AliasedAggregateFunctionBuilder = class {
  #aggregateFunctionBuilder;
  #alias;
  constructor(aggregateFunctionBuilder, alias) {
    this.#aggregateFunctionBuilder = aggregateFunctionBuilder;
    this.#alias = alias;
  }
  /** @private */
  get expression() {
    return this.#aggregateFunctionBuilder;
  }
  /** @private */
  get alias() {
    return this.#alias;
  }
  toOperationNode() {
    return AliasNode.create(this.#aggregateFunctionBuilder.toOperationNode(), IdentifierNode.create(this.#alias));
  }
};

// ../../node_modules/kysely/dist/esm/query-builder/function-module.js
function createFunctionModule() {
  const fn = (name, args) => {
    return new ExpressionWrapper(FunctionNode.create(name, parseReferenceExpressionOrList(args)));
  };
  const agg = (name, args) => {
    return new AggregateFunctionBuilder({
      aggregateFunctionNode: AggregateFunctionNode.create(name, args ? parseReferenceExpressionOrList(args) : void 0)
    });
  };
  return Object.assign(fn, {
    agg,
    avg(column) {
      return agg("avg", [column]);
    },
    coalesce(value, ...otherValues) {
      return fn("coalesce", [value, ...otherValues]);
    },
    count(column) {
      return agg("count", [column]);
    },
    countAll(table) {
      return new AggregateFunctionBuilder({
        aggregateFunctionNode: AggregateFunctionNode.create("count", parseSelectAll(table))
      });
    },
    max(column) {
      return agg("max", [column]);
    },
    min(column) {
      return agg("min", [column]);
    },
    sum(column) {
      return agg("sum", [column]);
    },
    any(column) {
      return fn("any", [column]);
    }
  });
}

// ../../node_modules/kysely/dist/esm/parser/unary-operation-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/unary-operation-node.js
init_esm();
var UnaryOperationNode = freeze({
  is(node) {
    return node.kind === "UnaryOperationNode";
  },
  create(operator, operand) {
    return freeze({
      kind: "UnaryOperationNode",
      operator,
      operand
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/unary-operation-parser.js
function parseUnaryOperation(operator, operand) {
  return UnaryOperationNode.create(OperatorNode.create(operator), parseReferenceExpression(operand));
}

// ../../node_modules/kysely/dist/esm/query-builder/case-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/case-node.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/when-node.js
init_esm();
var WhenNode = freeze({
  is(node) {
    return node.kind === "WhenNode";
  },
  create(condition) {
    return freeze({
      kind: "WhenNode",
      condition
    });
  },
  cloneWithResult(whenNode, result) {
    return freeze({
      ...whenNode,
      result
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/case-node.js
var CaseNode = freeze({
  is(node) {
    return node.kind === "CaseNode";
  },
  create(value) {
    return freeze({
      kind: "CaseNode",
      value
    });
  },
  cloneWithWhen(caseNode, when) {
    return freeze({
      ...caseNode,
      when: freeze(caseNode.when ? [...caseNode.when, when] : [when])
    });
  },
  cloneWithThen(caseNode, then) {
    return freeze({
      ...caseNode,
      when: caseNode.when ? freeze([
        ...caseNode.when.slice(0, -1),
        WhenNode.cloneWithResult(caseNode.when[caseNode.when.length - 1], then)
      ]) : void 0
    });
  },
  cloneWith(caseNode, props) {
    return freeze({
      ...caseNode,
      ...props
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-builder/case-builder.js
var CaseBuilder = class {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  when(...args) {
    return new CaseThenBuilder({
      ...this.#props,
      node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args)))
    });
  }
};
var CaseThenBuilder = class {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  then(valueExpression) {
    return new CaseWhenBuilder({
      ...this.#props,
      node: CaseNode.cloneWithThen(this.#props.node, isSafeImmediateValue(valueExpression) ? parseSafeImmediateValue(valueExpression) : parseValueExpression(valueExpression))
    });
  }
};
var CaseWhenBuilder = class {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  when(...args) {
    return new CaseThenBuilder({
      ...this.#props,
      node: CaseNode.cloneWithWhen(this.#props.node, WhenNode.create(parseValueBinaryOperationOrExpression(args)))
    });
  }
  else(valueExpression) {
    return new CaseEndBuilder({
      ...this.#props,
      node: CaseNode.cloneWith(this.#props.node, {
        else: isSafeImmediateValue(valueExpression) ? parseSafeImmediateValue(valueExpression) : parseValueExpression(valueExpression)
      })
    });
  }
  end() {
    return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));
  }
  endCase() {
    return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));
  }
};
var CaseEndBuilder = class {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  end() {
    return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: false }));
  }
  endCase() {
    return new ExpressionWrapper(CaseNode.cloneWith(this.#props.node, { isStatement: true }));
  }
};

// ../../node_modules/kysely/dist/esm/query-builder/json-path-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/json-path-leg-node.js
init_esm();
var JSONPathLegNode = freeze({
  is(node) {
    return node.kind === "JSONPathLegNode";
  },
  create(type, value) {
    return freeze({
      kind: "JSONPathLegNode",
      type,
      value
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-builder/json-path-builder.js
var JSONPathBuilder = class {
  #node;
  constructor(node) {
    this.#node = node;
  }
  /**
   * Access an element of a JSON array in a specific location.
   *
   * Since there's no guarantee an element exists in the given array location, the
   * resulting type is always nullable. If you're sure the element exists, you
   * should use {@link SelectQueryBuilder.$assertType} to narrow the type safely.
   *
   * See also {@link key} to access properties of JSON objects.
   *
   * ### Examples
   *
   * ```ts
   * db.selectFrom('person').select(eb =>
   *   eb.ref('nicknames', '->').at(0).as('primary_nickname')
   * )
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select "nicknames"->0 as "primary_nickname" from "person"
   *```
   *
   * Combined with {@link key}:
   *
   * ```ts
   * db.selectFrom('person').select(eb =>
   *   eb.ref('experience', '->').at(0).key('role').as('first_role')
   * )
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select "experience"->0->'role' as "first_role" from "person"
   * ```
   *
   * You can use `'last'` to access the last element of the array in MySQL:
   *
   * ```ts
   * db.selectFrom('person').select(eb =>
   *   eb.ref('nicknames', '->$').at('last').as('last_nickname')
   * )
   * ```
   *
   * The generated SQL (MySQL):
   *
   * ```sql
   * select `nicknames`->'$[last]' as `last_nickname` from `person`
   * ```
   *
   * Or `'#-1'` in SQLite:
   *
   * ```ts
   * db.selectFrom('person').select(eb =>
   *   eb.ref('nicknames', '->>$').at('#-1').as('last_nickname')
   * )
   * ```
   *
   * The generated SQL (SQLite):
   *
   * ```sql
   * select "nicknames"->>'$[#-1]' as `last_nickname` from `person`
   * ```
   */
  at(index) {
    return this.#createBuilderWithPathLeg("ArrayLocation", index);
  }
  /**
   * Access a property of a JSON object.
   *
   * If a field is optional, the resulting type will be nullable.
   *
   * See also {@link at} to access elements of JSON arrays.
   *
   * ### Examples
   *
   * ```ts
   * db.selectFrom('person').select(eb =>
   *   eb.ref('address', '->').key('city').as('city')
   * )
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select "address"->'city' as "city" from "person"
   * ```
   *
   * Going deeper:
   *
   * ```ts
   * db.selectFrom('person').select(eb =>
   *   eb.ref('profile', '->$').key('website').key('url').as('website_url')
   * )
   * ```
   *
   * The generated SQL (MySQL):
   *
   * ```sql
   * select `profile`->'$.website.url' as `website_url` from `person`
   * ```
   *
   * Combined with {@link at}:
   *
   * ```ts
   * db.selectFrom('person').select(eb =>
   *   eb.ref('profile', '->').key('addresses').at(0).key('city').as('city')
   * )
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select "profile"->'addresses'->0->'city' as "city" from "person"
   * ```
   */
  key(key) {
    return this.#createBuilderWithPathLeg("Member", key);
  }
  #createBuilderWithPathLeg(legType, value) {
    return new TraversedJSONPathBuilder(JSONReferenceNode.cloneWithTraversal(this.#node, JSONPathNode.is(this.#node.traversal) ? JSONPathNode.cloneWithLeg(this.#node.traversal, JSONPathLegNode.create(legType, value)) : JSONOperatorChainNode.cloneWithValue(this.#node.traversal, ValueNode.createImmediate(value))));
  }
};
var TraversedJSONPathBuilder = class extends JSONPathBuilder {
  #node;
  constructor(node) {
    super(node);
    this.#node = node;
  }
  /** @private */
  get expressionType() {
    return void 0;
  }
  as(alias) {
    return new AliasedJSONPathBuilder(this, alias);
  }
  /**
   * Change the output type of the json path.
   *
   * This method call doesn't change the SQL in any way. This methods simply
   * returns a copy of this `JSONPathBuilder` with a new output type.
   */
  $castTo() {
    return new JSONPathBuilder(this.#node);
  }
  toOperationNode() {
    return this.#node;
  }
};
var AliasedJSONPathBuilder = class {
  #jsonPath;
  #alias;
  constructor(jsonPath, alias) {
    this.#jsonPath = jsonPath;
    this.#alias = alias;
  }
  /** @private */
  get expression() {
    return this.#jsonPath;
  }
  /** @private */
  get alias() {
    return this.#alias;
  }
  toOperationNode() {
    return AliasNode.create(this.#jsonPath.toOperationNode(), isOperationNodeSource(this.#alias) ? this.#alias.toOperationNode() : IdentifierNode.create(this.#alias));
  }
};

// ../../node_modules/kysely/dist/esm/operation-node/tuple-node.js
init_esm();
var TupleNode = freeze({
  is(node) {
    return node.kind === "TupleNode";
  },
  create(values) {
    return freeze({
      kind: "TupleNode",
      values: freeze(values)
    });
  }
});

// ../../node_modules/kysely/dist/esm/expression/expression-builder.js
function createExpressionBuilder(executor = NOOP_QUERY_EXECUTOR) {
  function binary(lhs, op, rhs) {
    return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));
  }
  function unary(op, expr) {
    return new ExpressionWrapper(parseUnaryOperation(op, expr));
  }
  const eb = Object.assign(binary, {
    fn: void 0,
    eb: void 0,
    selectFrom(table) {
      return createSelectQueryBuilder({
        queryId: createQueryId(),
        executor,
        queryNode: SelectQueryNode.createFrom(parseTableExpressionOrList(table))
      });
    },
    selectNoFrom(selection) {
      return createSelectQueryBuilder({
        queryId: createQueryId(),
        executor,
        queryNode: SelectQueryNode.cloneWithSelections(SelectQueryNode.create(), parseSelectArg(selection))
      });
    },
    case(reference) {
      return new CaseBuilder({
        node: CaseNode.create(isUndefined(reference) ? void 0 : parseReferenceExpression(reference))
      });
    },
    ref(reference, op) {
      if (isUndefined(op)) {
        return new ExpressionWrapper(parseStringReference(reference));
      }
      return new JSONPathBuilder(parseJSONReference(reference, op));
    },
    val(value) {
      return new ExpressionWrapper(parseValueExpressionOrList(value));
    },
    refTuple(...values) {
      return new ExpressionWrapper(TupleNode.create(values.map(parseReferenceExpression)));
    },
    tuple(...values) {
      return new ExpressionWrapper(TupleNode.create(values.map(parseValueExpression)));
    },
    lit(value) {
      return new ExpressionWrapper(parseSafeImmediateValue(value));
    },
    // @deprecated
    cmpr(lhs, op, rhs) {
      return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));
    },
    // @deprecated
    bxp(lhs, op, rhs) {
      return new ExpressionWrapper(parseValueBinaryOperation(lhs, op, rhs));
    },
    unary,
    not(expr) {
      return unary("not", expr);
    },
    exists(expr) {
      return unary("exists", expr);
    },
    neg(expr) {
      return unary("-", expr);
    },
    between(expr, start, end) {
      return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create("between"), AndNode.create(parseValueExpression(start), parseValueExpression(end))));
    },
    betweenSymmetric(expr, start, end) {
      return new ExpressionWrapper(BinaryOperationNode.create(parseReferenceExpression(expr), OperatorNode.create("between symmetric"), AndNode.create(parseValueExpression(start), parseValueExpression(end))));
    },
    and(exprs) {
      if (isReadonlyArray(exprs)) {
        return new ExpressionWrapper(parseFilterList(exprs, "and"));
      }
      return new ExpressionWrapper(parseFilterObject(exprs, "and"));
    },
    or(exprs) {
      if (isReadonlyArray(exprs)) {
        return new ExpressionWrapper(parseFilterList(exprs, "or"));
      }
      return new ExpressionWrapper(parseFilterObject(exprs, "or"));
    },
    parens(...args) {
      const node = parseValueBinaryOperationOrExpression(args);
      if (ParensNode.is(node)) {
        return new ExpressionWrapper(node);
      } else {
        return new ExpressionWrapper(ParensNode.create(node));
      }
    },
    withSchema(schema) {
      return createExpressionBuilder(executor.withPluginAtFront(new WithSchemaPlugin(schema)));
    }
  });
  eb.fn = createFunctionModule();
  eb.eb = eb;
  return eb;
}
function expressionBuilder(_3) {
  return createExpressionBuilder();
}

// ../../node_modules/kysely/dist/esm/parser/expression-parser.js
function parseExpression(exp) {
  if (isOperationNodeSource(exp)) {
    return exp.toOperationNode();
  } else if (isFunction(exp)) {
    return exp(expressionBuilder()).toOperationNode();
  }
  throw new Error(`invalid expression: ${JSON.stringify(exp)}`);
}
function parseAliasedExpression(exp) {
  if (isOperationNodeSource(exp)) {
    return exp.toOperationNode();
  } else if (isFunction(exp)) {
    return exp(expressionBuilder()).toOperationNode();
  }
  throw new Error(`invalid aliased expression: ${JSON.stringify(exp)}`);
}
function isExpressionOrFactory(obj) {
  return isExpression(obj) || isAliasedExpression(obj) || isFunction(obj);
}

// ../../node_modules/kysely/dist/esm/parser/table-parser.js
function parseTableExpressionOrList(table) {
  if (isReadonlyArray(table)) {
    return table.map((it2) => parseTableExpression(it2));
  } else {
    return [parseTableExpression(table)];
  }
}
function parseTableExpression(table) {
  if (isString(table)) {
    return parseAliasedTable(table);
  } else {
    return parseAliasedExpression(table);
  }
}
function parseAliasedTable(from) {
  const ALIAS_SEPARATOR = " as ";
  if (from.includes(ALIAS_SEPARATOR)) {
    const [table, alias] = from.split(ALIAS_SEPARATOR).map(trim2);
    return AliasNode.create(parseTable(table), IdentifierNode.create(alias));
  } else {
    return parseTable(from);
  }
}
function parseTable(from) {
  const SCHEMA_SEPARATOR = ".";
  if (from.includes(SCHEMA_SEPARATOR)) {
    const [schema, table] = from.split(SCHEMA_SEPARATOR).map(trim2);
    return TableNode.createWithSchema(schema, table);
  } else {
    return TableNode.create(from);
  }
}
function trim2(str) {
  return str.trim();
}

// ../../node_modules/kysely/dist/esm/schema/alter-table-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/add-column-node.js
init_esm();
var AddColumnNode = freeze({
  is(node) {
    return node.kind === "AddColumnNode";
  },
  create(column) {
    return freeze({
      kind: "AddColumnNode",
      column
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/column-definition-node.js
init_esm();
var ColumnDefinitionNode = freeze({
  is(node) {
    return node.kind === "ColumnDefinitionNode";
  },
  create(column, dataType) {
    return freeze({
      kind: "ColumnDefinitionNode",
      column: ColumnNode.create(column),
      dataType
    });
  },
  cloneWithFrontModifier(node, modifier) {
    return freeze({
      ...node,
      frontModifiers: node.frontModifiers ? freeze([...node.frontModifiers, modifier]) : [modifier]
    });
  },
  cloneWithEndModifier(node, modifier) {
    return freeze({
      ...node,
      endModifiers: node.endModifiers ? freeze([...node.endModifiers, modifier]) : [modifier]
    });
  },
  cloneWith(node, props) {
    return freeze({
      ...node,
      ...props
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/drop-column-node.js
init_esm();
var DropColumnNode = freeze({
  is(node) {
    return node.kind === "DropColumnNode";
  },
  create(column) {
    return freeze({
      kind: "DropColumnNode",
      column: ColumnNode.create(column)
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/rename-column-node.js
init_esm();
var RenameColumnNode = freeze({
  is(node) {
    return node.kind === "RenameColumnNode";
  },
  create(column, newColumn) {
    return freeze({
      kind: "RenameColumnNode",
      column: ColumnNode.create(column),
      renameTo: ColumnNode.create(newColumn)
    });
  }
});

// ../../node_modules/kysely/dist/esm/schema/column-definition-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/check-constraint-node.js
init_esm();
var CheckConstraintNode = freeze({
  is(node) {
    return node.kind === "CheckConstraintNode";
  },
  create(expression, constraintName) {
    return freeze({
      kind: "CheckConstraintNode",
      expression,
      name: constraintName ? IdentifierNode.create(constraintName) : void 0
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/references-node.js
init_esm();
var ON_MODIFY_FOREIGN_ACTIONS = [
  "no action",
  "restrict",
  "cascade",
  "set null",
  "set default"
];
var ReferencesNode = freeze({
  is(node) {
    return node.kind === "ReferencesNode";
  },
  create(table, columns) {
    return freeze({
      kind: "ReferencesNode",
      table,
      columns: freeze([...columns])
    });
  },
  cloneWithOnDelete(references, onDelete) {
    return freeze({
      ...references,
      onDelete
    });
  },
  cloneWithOnUpdate(references, onUpdate) {
    return freeze({
      ...references,
      onUpdate
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/default-value-parser.js
init_esm();
function parseDefaultValueExpression(value) {
  return isOperationNodeSource(value) ? value.toOperationNode() : ValueNode.createImmediate(value);
}

// ../../node_modules/kysely/dist/esm/operation-node/generated-node.js
init_esm();
var GeneratedNode = freeze({
  is(node) {
    return node.kind === "GeneratedNode";
  },
  create(params) {
    return freeze({
      kind: "GeneratedNode",
      ...params
    });
  },
  createWithExpression(expression) {
    return freeze({
      kind: "GeneratedNode",
      always: true,
      expression
    });
  },
  cloneWith(node, params) {
    return freeze({
      ...node,
      ...params
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/default-value-node.js
init_esm();
var DefaultValueNode = freeze({
  is(node) {
    return node.kind === "DefaultValueNode";
  },
  create(defaultValue) {
    return freeze({
      kind: "DefaultValueNode",
      defaultValue
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/on-modify-action-parser.js
init_esm();
function parseOnModifyForeignAction(action) {
  if (ON_MODIFY_FOREIGN_ACTIONS.includes(action)) {
    return action;
  }
  throw new Error(`invalid OnModifyForeignAction ${action}`);
}

// ../../node_modules/kysely/dist/esm/schema/column-definition-builder.js
var ColumnDefinitionBuilder = class _ColumnDefinitionBuilder {
  #node;
  constructor(node) {
    this.#node = node;
  }
  /**
   * Adds `auto_increment` or `autoincrement` to the column definition
   * depending on the dialect.
   *
   * Some dialects like PostgreSQL don't support this. On PostgreSQL
   * you can use the `serial` or `bigserial` data type instead.
   */
  autoIncrement() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { autoIncrement: true }));
  }
  /**
   * Makes the column the primary key.
   *
   * If you want to specify a composite primary key use the
   * {@link CreateTableBuilder.addPrimaryKeyConstraint} method.
   */
  primaryKey() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { primaryKey: true }));
  }
  /**
   * Adds a foreign key constraint for the column.
   *
   * If your database engine doesn't support foreign key constraints in the
   * column definition (like MySQL 5) you need to call the table level
   * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.
   *
   * ### Examples
   *
   * ```ts
   * col.references('person.id')
   * ```
   */
  references(ref) {
    const references = parseStringReference(ref);
    if (!references.table || SelectAllNode.is(references.column)) {
      throw new Error(`invalid call references('${ref}'). The reference must have format table.column or schema.table.column`);
    }
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
      references: ReferencesNode.create(references.table, [
        references.column
      ])
    }));
  }
  /**
   * Adds an `on delete` constraint for the foreign key column.
   *
   * If your database engine doesn't support foreign key constraints in the
   * column definition (like MySQL 5) you need to call the table level
   * {@link CreateTableBuilder.addForeignKeyConstraint} method instead.
   *
   * ### Examples
   *
   * ```ts
   * col.references('person.id').onDelete('cascade')
   * ```
   */
  onDelete(onDelete) {
    if (!this.#node.references) {
      throw new Error("on delete constraint can only be added for foreign keys");
    }
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
      references: ReferencesNode.cloneWithOnDelete(this.#node.references, parseOnModifyForeignAction(onDelete))
    }));
  }
  /**
   * Adds an `on update` constraint for the foreign key column.
   *
   * ### Examples
   *
   * ```ts
   * col.references('person.id').onUpdate('cascade')
   * ```
   */
  onUpdate(onUpdate) {
    if (!this.#node.references) {
      throw new Error("on update constraint can only be added for foreign keys");
    }
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
      references: ReferencesNode.cloneWithOnUpdate(this.#node.references, parseOnModifyForeignAction(onUpdate))
    }));
  }
  /**
   * Adds a unique constraint for the column.
   */
  unique() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unique: true }));
  }
  /**
   * Adds a `not null` constraint for the column.
   */
  notNull() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { notNull: true }));
  }
  /**
   * Adds a `unsigned` modifier for the column.
   *
   * This only works on some dialects like MySQL.
   */
  unsigned() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, { unsigned: true }));
  }
  /**
   * Adds a default value constraint for the column.
   *
   * ### Examples
   *
   * ```ts
   * db.schema
   *   .createTable('pet')
   *   .addColumn('number_of_legs', 'integer', (col) => col.defaultTo(4))
   *   .execute()
   * ```
   *
   * Values passed to `defaultTo` are interpreted as value literals by default. You can define
   * an arbitrary SQL expression using the {@link sql} template tag:
   *
   * ```ts
   * import { sql } from 'kysely'
   *
   * db.schema
   *   .createTable('pet')
   *   .addColumn(
   *     'number_of_legs',
   *     'integer',
   *     (col) => col.defaultTo(sql`any SQL here`)
   *   )
   *   .execute()
   * ```
   */
  defaultTo(value) {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
      defaultTo: DefaultValueNode.create(parseDefaultValueExpression(value))
    }));
  }
  /**
   * Adds a check constraint for the column.
   *
   * ### Examples
   *
   * ```ts
   * import { sql } from 'kysely'
   *
   * db.schema
   *   .createTable('pet')
   *   .addColumn('number_of_legs', 'integer', (col) =>
   *     col.check(sql`number_of_legs < 5`)
   *   )
   *   .execute()
   * ```
   */
  check(expression) {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
      check: CheckConstraintNode.create(expression.toOperationNode())
    }));
  }
  /**
   * Makes the column a generated column using a `generated always as` statement.
   *
   * ### Examples
   *
   * ```ts
   * import { sql } from 'kysely'
   *
   * db.schema
   *   .createTable('person')
   *   .addColumn('full_name', 'varchar(255)',
   *     (col) => col.generatedAlwaysAs(sql`concat(first_name, ' ', last_name)`)
   *   )
   *   .execute()
   * ```
   */
  generatedAlwaysAs(expression) {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
      generated: GeneratedNode.createWithExpression(expression.toOperationNode())
    }));
  }
  /**
   * Adds the `generated always as identity` specifier on supported dialects.
   */
  generatedAlwaysAsIdentity() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
      generated: GeneratedNode.create({ identity: true, always: true })
    }));
  }
  /**
   * Adds the `generated by default as identity` specifier on supported dialects.
   */
  generatedByDefaultAsIdentity() {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
      generated: GeneratedNode.create({ identity: true, byDefault: true })
    }));
  }
  /**
   * Makes a generated column stored instead of virtual. This method can only
   * be used with {@link generatedAlwaysAs}
   *
   * ### Examples
   *
   * ```ts
   * db.schema
   *   .createTable('person')
   *   .addColumn('full_name', 'varchar(255)', (col) => col
   *     .generatedAlwaysAs("concat(first_name, ' ', last_name)")
   *     .stored()
   *   )
   *   .execute()
   * ```
   */
  stored() {
    if (!this.#node.generated) {
      throw new Error("stored() can only be called after generatedAlwaysAs");
    }
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWith(this.#node, {
      generated: GeneratedNode.cloneWith(this.#node.generated, {
        stored: true
      })
    }));
  }
  /**
   * This can be used to add any additional SQL right after the column's data type.
   *
   * ### Examples
   *
   * ```ts
   * db.schema.createTable('person')
   *  .addColumn('id', 'integer', col => col.primaryKey())
   *  .addColumn('first_name', 'varchar(36)', col => col.modifyFront(sql`collate utf8mb4_general_ci`).notNull())
   *  .execute()
   * ```
   *
   * The generated SQL (MySQL):
   *
   * ```sql
   * create table `person` (
   *   `id` integer primary key,
   *   `first_name` varchar(36) collate utf8mb4_general_ci not null
   * )
   * ```
   */
  modifyFront(modifier) {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithFrontModifier(this.#node, modifier.toOperationNode()));
  }
  /**
   * This can be used to add any additional SQL to the end of the column definition.
   *
   * ### Examples
   *
   * ```ts
   * db.schema.createTable('person')
   *  .addColumn('id', 'integer', col => col.primaryKey())
   *  .addColumn('age', 'integer', col => col.unsigned().notNull().modifyEnd(sql`comment ${sql.lit('it is not polite to ask a woman her age')}`))
   *  .execute()
   * ```
   *
   * The generated SQL (MySQL):
   *
   * ```sql
   * create table `person` (
   *   `id` integer primary key,
   *   `age` integer unsigned not null comment 'it is not polite to ask a woman her age'
   * )
   * ```
   */
  modifyEnd(modifier) {
    return new _ColumnDefinitionBuilder(ColumnDefinitionNode.cloneWithEndModifier(this.#node, modifier.toOperationNode()));
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#node;
  }
};
preventAwait(ColumnDefinitionBuilder, "don't await ColumnDefinitionBuilder instances directly.");

// ../../node_modules/kysely/dist/esm/operation-node/modify-column-node.js
init_esm();
var ModifyColumnNode = freeze({
  is(node) {
    return node.kind === "ModifyColumnNode";
  },
  create(column) {
    return freeze({
      kind: "ModifyColumnNode",
      column
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/data-type-parser.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/data-type-node.js
init_esm();
var DataTypeNode = freeze({
  is(node) {
    return node.kind === "DataTypeNode";
  },
  create(dataType) {
    return freeze({
      kind: "DataTypeNode",
      dataType
    });
  }
});

// ../../node_modules/kysely/dist/esm/parser/data-type-parser.js
function parseDataTypeExpression(dataType) {
  return isOperationNodeSource(dataType) ? dataType.toOperationNode() : DataTypeNode.create(dataType);
}

// ../../node_modules/kysely/dist/esm/schema/foreign-key-constraint-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/foreign-key-constraint-node.js
init_esm();
var ForeignKeyConstraintNode = freeze({
  is(node) {
    return node.kind === "ForeignKeyConstraintNode";
  },
  create(sourceColumns, targetTable, targetColumns, constraintName) {
    return freeze({
      kind: "ForeignKeyConstraintNode",
      columns: sourceColumns,
      references: ReferencesNode.create(targetTable, targetColumns),
      name: constraintName ? IdentifierNode.create(constraintName) : void 0
    });
  },
  cloneWith(node, props) {
    return freeze({
      ...node,
      ...props
    });
  }
});

// ../../node_modules/kysely/dist/esm/schema/foreign-key-constraint-builder.js
var ForeignKeyConstraintBuilder = class _ForeignKeyConstraintBuilder {
  #node;
  constructor(node) {
    this.#node = node;
  }
  onDelete(onDelete) {
    return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {
      onDelete: parseOnModifyForeignAction(onDelete)
    }));
  }
  onUpdate(onUpdate) {
    return new _ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.cloneWith(this.#node, {
      onUpdate: parseOnModifyForeignAction(onUpdate)
    }));
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#node;
  }
};
preventAwait(ForeignKeyConstraintBuilder, "don't await ForeignKeyConstraintBuilder instances directly.");

// ../../node_modules/kysely/dist/esm/operation-node/add-constraint-node.js
init_esm();
var AddConstraintNode = freeze({
  is(node) {
    return node.kind === "AddConstraintNode";
  },
  create(constraint) {
    return freeze({
      kind: "AddConstraintNode",
      constraint
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/unique-constraint-node.js
init_esm();
var UniqueConstraintNode = freeze({
  is(node) {
    return node.kind === "UniqueConstraintNode";
  },
  create(columns, constraintName) {
    return freeze({
      kind: "UniqueConstraintNode",
      columns: freeze(columns.map(ColumnNode.create)),
      name: constraintName ? IdentifierNode.create(constraintName) : void 0
    });
  }
});

// ../../node_modules/kysely/dist/esm/operation-node/drop-constraint-node.js
init_esm();
var DropConstraintNode = freeze({
  is(node) {
    return node.kind === "DropConstraintNode";
  },
  create(constraintName) {
    return freeze({
      kind: "DropConstraintNode",
      constraintName: IdentifierNode.create(constraintName)
    });
  },
  cloneWith(dropConstraint, props) {
    return freeze({
      ...dropConstraint,
      ...props
    });
  }
});

// ../../node_modules/kysely/dist/esm/schema/alter-column-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/alter-column-node.js
init_esm();
var AlterColumnNode = freeze({
  is(node) {
    return node.kind === "AlterColumnNode";
  },
  create(column, prop, value) {
    return freeze({
      kind: "AlterColumnNode",
      column: ColumnNode.create(column),
      [prop]: value
    });
  }
});

// ../../node_modules/kysely/dist/esm/schema/alter-column-builder.js
var AlterColumnBuilder = class {
  #column;
  constructor(column) {
    this.#column = column;
  }
  setDataType(dataType) {
    return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "dataType", parseDataTypeExpression(dataType)));
  }
  setDefault(value) {
    return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "setDefault", parseDefaultValueExpression(value)));
  }
  dropDefault() {
    return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "dropDefault", true));
  }
  setNotNull() {
    return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "setNotNull", true));
  }
  dropNotNull() {
    return new AlteredColumnBuilder(AlterColumnNode.create(this.#column, "dropNotNull", true));
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
};
var AlteredColumnBuilder = class {
  #alterColumnNode;
  constructor(alterColumnNode) {
    this.#alterColumnNode = alterColumnNode;
  }
  toOperationNode() {
    return this.#alterColumnNode;
  }
};

// ../../node_modules/kysely/dist/esm/schema/alter-table-executor.js
init_esm();
var AlterTableExecutor = class {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(AlterTableExecutor, "don't await AlterTableExecutor instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/alter-table-add-foreign-key-constraint-builder.js
init_esm();
var AlterTableAddForeignKeyConstraintBuilder = class _AlterTableAddForeignKeyConstraintBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  onDelete(onDelete) {
    return new _AlterTableAddForeignKeyConstraintBuilder({
      ...this.#props,
      constraintBuilder: this.#props.constraintBuilder.onDelete(onDelete)
    });
  }
  onUpdate(onUpdate) {
    return new _AlterTableAddForeignKeyConstraintBuilder({
      ...this.#props,
      constraintBuilder: this.#props.constraintBuilder.onUpdate(onUpdate)
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(AlterTableNode.cloneWithTableProps(this.#props.node, {
      addConstraint: AddConstraintNode.create(this.#props.constraintBuilder.toOperationNode())
    }), this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(AlterTableAddForeignKeyConstraintBuilder, "don't await AlterTableAddForeignKeyConstraintBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/alter-table-drop-constraint-builder.js
init_esm();
var AlterTableDropConstraintBuilder = class _AlterTableDropConstraintBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  ifExists() {
    return new _AlterTableDropConstraintBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithTableProps(this.#props.node, {
        dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {
          ifExists: true
        })
      })
    });
  }
  cascade() {
    return new _AlterTableDropConstraintBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithTableProps(this.#props.node, {
        dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {
          modifier: "cascade"
        })
      })
    });
  }
  restrict() {
    return new _AlterTableDropConstraintBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithTableProps(this.#props.node, {
        dropConstraint: DropConstraintNode.cloneWith(this.#props.node.dropConstraint, {
          modifier: "restrict"
        })
      })
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(AlterTableDropConstraintBuilder, "don't await AlterTableDropConstraintBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/operation-node/primary-constraint-node.js
init_esm();
var PrimaryConstraintNode = freeze({
  is(node) {
    return node.kind === "PrimaryKeyConstraintNode";
  },
  create(columns, constraintName) {
    return freeze({
      kind: "PrimaryKeyConstraintNode",
      columns: freeze(columns.map(ColumnNode.create)),
      name: constraintName ? IdentifierNode.create(constraintName) : void 0
    });
  }
});

// ../../node_modules/kysely/dist/esm/schema/alter-table-builder.js
var AlterTableBuilder = class {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  renameTo(newTableName) {
    return new AlterTableExecutor({
      ...this.#props,
      node: AlterTableNode.cloneWithTableProps(this.#props.node, {
        renameTo: parseTable(newTableName)
      })
    });
  }
  setSchema(newSchema) {
    return new AlterTableExecutor({
      ...this.#props,
      node: AlterTableNode.cloneWithTableProps(this.#props.node, {
        setSchema: IdentifierNode.create(newSchema)
      })
    });
  }
  alterColumn(column, alteration) {
    const builder = alteration(new AlterColumnBuilder(column));
    return new AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode())
    });
  }
  dropColumn(column) {
    return new AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column))
    });
  }
  renameColumn(column, newColumn) {
    return new AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn))
    });
  }
  addColumn(columnName, dataType, build = noop) {
    const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
    return new AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode()))
    });
  }
  modifyColumn(columnName, dataType, build = noop) {
    const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
    return new AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode()))
    });
  }
  /**
   * See {@link CreateTableBuilder.addUniqueConstraint}
   */
  addUniqueConstraint(constraintName, columns) {
    return new AlterTableExecutor({
      ...this.#props,
      node: AlterTableNode.cloneWithTableProps(this.#props.node, {
        addConstraint: AddConstraintNode.create(UniqueConstraintNode.create(columns, constraintName))
      })
    });
  }
  /**
   * See {@link CreateTableBuilder.addCheckConstraint}
   */
  addCheckConstraint(constraintName, checkExpression) {
    return new AlterTableExecutor({
      ...this.#props,
      node: AlterTableNode.cloneWithTableProps(this.#props.node, {
        addConstraint: AddConstraintNode.create(CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName))
      })
    });
  }
  /**
   * See {@link CreateTableBuilder.addForeignKeyConstraint}
   *
   * Unlike {@link CreateTableBuilder.addForeignKeyConstraint} this method returns
   * the constraint builder and doesn't take a callback as the last argument. This
   * is because you can only add one column per `ALTER TABLE` query.
   */
  addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns) {
    return new AlterTableAddForeignKeyConstraintBuilder({
      ...this.#props,
      constraintBuilder: new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName))
    });
  }
  /**
   * See {@link CreateTableBuilder.addPrimaryKeyConstraint}
   */
  addPrimaryKeyConstraint(constraintName, columns) {
    return new AlterTableExecutor({
      ...this.#props,
      node: AlterTableNode.cloneWithTableProps(this.#props.node, {
        addConstraint: AddConstraintNode.create(PrimaryConstraintNode.create(columns, constraintName))
      })
    });
  }
  dropConstraint(constraintName) {
    return new AlterTableDropConstraintBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithTableProps(this.#props.node, {
        dropConstraint: DropConstraintNode.create(constraintName)
      })
    });
  }
  /**
   * Calls the given function passing `this` as the only argument.
   *
   * See {@link CreateTableBuilder.$call}
   */
  $call(func) {
    return func(this);
  }
};
var AlterTableColumnAlteringBuilder = class _AlterTableColumnAlteringBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  alterColumn(column, alteration) {
    const builder = alteration(new AlterColumnBuilder(column));
    return new _AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, builder.toOperationNode())
    });
  }
  dropColumn(column) {
    return new _AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, DropColumnNode.create(column))
    });
  }
  renameColumn(column, newColumn) {
    return new _AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, RenameColumnNode.create(column, newColumn))
    });
  }
  addColumn(columnName, dataType, build = noop) {
    const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
    return new _AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, AddColumnNode.create(builder.toOperationNode()))
    });
  }
  modifyColumn(columnName, dataType, build = noop) {
    const builder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
    return new _AlterTableColumnAlteringBuilder({
      ...this.#props,
      node: AlterTableNode.cloneWithColumnAlteration(this.#props.node, ModifyColumnNode.create(builder.toOperationNode()))
    });
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(AlterTableBuilder, "don't await AlterTableBuilder instances");
preventAwait(AlterColumnBuilder, "don't await AlterColumnBuilder instances");
preventAwait(AlterTableColumnAlteringBuilder, "don't await AlterTableColumnAlteringBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/create-index-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-transformer.js
init_esm();
var ImmediateValueTransformer = class extends OperationNodeTransformer {
  transformValue(node) {
    return {
      ...super.transformValue(node),
      immediate: true
    };
  }
};

// ../../node_modules/kysely/dist/esm/schema/create-index-builder.js
var CreateIndexBuilder = class _CreateIndexBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  /**
   * Adds the "if not exists" modifier.
   *
   * If the index already exists, no error is thrown if this method has been called.
   */
  ifNotExists() {
    return new _CreateIndexBuilder({
      ...this.#props,
      node: CreateIndexNode.cloneWith(this.#props.node, {
        ifNotExists: true
      })
    });
  }
  /**
   * Makes the index unique.
   */
  unique() {
    return new _CreateIndexBuilder({
      ...this.#props,
      node: CreateIndexNode.cloneWith(this.#props.node, {
        unique: true
      })
    });
  }
  /**
   * Specifies the table for the index.
   */
  on(table) {
    return new _CreateIndexBuilder({
      ...this.#props,
      node: CreateIndexNode.cloneWith(this.#props.node, {
        table: parseTable(table)
      })
    });
  }
  /**
   * Adds a column to the index.
   *
   * Also see {@link columns} for adding multiple columns at once or {@link expression}
   * for specifying an arbitrary expression.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *         .createIndex('person_first_name_and_age_index')
   *         .on('person')
   *         .column('first_name')
   *         .column('age desc')
   *         .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * create index "person_first_name_and_age_index" on "person" ("first_name", "age" desc)
   * ```
   */
  column(column) {
    return new _CreateIndexBuilder({
      ...this.#props,
      node: CreateIndexNode.cloneWithColumns(this.#props.node, [
        parseOrderedColumnName(column)
      ])
    });
  }
  /**
   * Specifies a list of columns for the index.
   *
   * Also see {@link column} for adding a single column or {@link expression} for
   * specifying an arbitrary expression.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *         .createIndex('person_first_name_and_age_index')
   *         .on('person')
   *         .columns(['first_name', 'age desc'])
   *         .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * create index "person_first_name_and_age_index" on "person" ("first_name", "age" desc)
   * ```
   */
  columns(columns) {
    return new _CreateIndexBuilder({
      ...this.#props,
      node: CreateIndexNode.cloneWithColumns(this.#props.node, columns.map(parseOrderedColumnName))
    });
  }
  /**
   * Specifies an arbitrary expression for the index.
   *
   * ### Examples
   *
   * ```ts
   * import { sql } from 'kysely'
   *
   * await db.schema
   *   .createIndex('person_first_name_index')
   *   .on('person')
   *   .expression(sql`first_name COLLATE "fi_FI"`)
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * create index "person_first_name_index" on "person" (first_name COLLATE "fi_FI")
   * ```
   */
  expression(expression) {
    return new _CreateIndexBuilder({
      ...this.#props,
      node: CreateIndexNode.cloneWithColumns(this.#props.node, [
        expression.toOperationNode()
      ])
    });
  }
  using(indexType) {
    return new _CreateIndexBuilder({
      ...this.#props,
      node: CreateIndexNode.cloneWith(this.#props.node, {
        using: RawNode.createWithSql(indexType)
      })
    });
  }
  where(...args) {
    const transformer = new ImmediateValueTransformer();
    return new _CreateIndexBuilder({
      ...this.#props,
      node: QueryNode.cloneWithWhere(this.#props.node, transformer.transformNode(parseValueBinaryOperationOrExpression(args)))
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(CreateIndexBuilder, "don't await CreateIndexBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/create-schema-builder.js
init_esm();
var CreateSchemaBuilder = class _CreateSchemaBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  ifNotExists() {
    return new _CreateSchemaBuilder({
      ...this.#props,
      node: CreateSchemaNode.cloneWith(this.#props.node, { ifNotExists: true })
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(CreateSchemaBuilder, "don't await CreateSchemaBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/create-table-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/parser/on-commit-action-parse.js
init_esm();
function parseOnCommitAction(action) {
  if (ON_COMMIT_ACTIONS.includes(action)) {
    return action;
  }
  throw new Error(`invalid OnCommitAction ${action}`);
}

// ../../node_modules/kysely/dist/esm/schema/create-table-builder.js
var CreateTableBuilder = class _CreateTableBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  /**
   * Adds the "temporary" modifier.
   *
   * Use this to create a temporary table.
   */
  temporary() {
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWith(this.#props.node, {
        temporary: true
      })
    });
  }
  /**
   * Adds an "on commit" statement.
   *
   * This can be used in conjunction with temporary tables on supported databases
   * like PostgreSQL.
   */
  onCommit(onCommit) {
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWith(this.#props.node, {
        onCommit: parseOnCommitAction(onCommit)
      })
    });
  }
  /**
   * Adds the "if not exists" modifier.
   *
   * If the table already exists, no error is thrown if this method has been called.
   */
  ifNotExists() {
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWith(this.#props.node, {
        ifNotExists: true
      })
    });
  }
  /**
   * Adds a column to the table.
   *
   * ### Examples
   *
   * ```ts
   * import { sql } from 'kysely'
   *
   * await db.schema
   *   .createTable('person')
   *   .addColumn('id', 'integer', (col) => col.autoIncrement().primaryKey()),
   *   .addColumn('first_name', 'varchar(50)', (col) => col.notNull())
   *   .addColumn('last_name', 'varchar(255)')
   *   .addColumn('bank_balance', 'numeric(8, 2)')
   *   // You can specify any data type using the `sql` tag if the types
   *   // don't include it.
   *   .addColumn('data', sql`any_type_here`)
   *   .addColumn('parent_id', 'integer', (col) =>
   *     col.references('person.id').onDelete('cascade'))
   *   )
   * ```
   *
   * With this method, it's once again good to remember that Kysely just builds the
   * query and doesn't provide the same API for all databses. For example, some
   * databases like older MySQL don't support the `references` statement in the
   * column definition. Instead foreign key constraints need to be defined in the
   * `create table` query. See the next example:
   *
   * ```ts
   *   .addColumn('parent_id', 'integer')
   *   .addForeignKeyConstraint(
   *     'person_parent_id_fk', ['parent_id'], 'person', ['id'],
   *     (cb) => cb.onDelete('cascade')
   *   )
   * ```
   *
   * Another good example is that PostgreSQL doesn't support the `auto_increment`
   * keyword and you need to define an autoincrementing column for example using
   * `serial`:
   *
   * ```ts
   * await db.schema
   *   .createTable('person')
   *   .addColumn('id', 'serial', (col) => col.primaryKey()),
   * ```
   */
  addColumn(columnName, dataType, build = noop) {
    const columnBuilder = build(new ColumnDefinitionBuilder(ColumnDefinitionNode.create(columnName, parseDataTypeExpression(dataType))));
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWithColumn(this.#props.node, columnBuilder.toOperationNode())
    });
  }
  /**
   * Adds a primary key constraint for one or more columns.
   *
   * The constraint name can be anything you want, but it must be unique
   * across the whole database.
   *
   * ### Examples
   *
   * ```ts
   * addPrimaryKeyConstraint('primary_key', ['first_name', 'last_name'])
   * ```
   */
  addPrimaryKeyConstraint(constraintName, columns) {
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWithConstraint(this.#props.node, PrimaryConstraintNode.create(columns, constraintName))
    });
  }
  /**
   * Adds a unique constraint for one or more columns.
   *
   * The constraint name can be anything you want, but it must be unique
   * across the whole database.
   *
   * ### Examples
   *
   * ```ts
   * addUniqueConstraint('first_name_last_name_unique', ['first_name', 'last_name'])
   * ```
   */
  addUniqueConstraint(constraintName, columns) {
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWithConstraint(this.#props.node, UniqueConstraintNode.create(columns, constraintName))
    });
  }
  /**
   * Adds a check constraint.
   *
   * The constraint name can be anything you want, but it must be unique
   * across the whole database.
   *
   * ### Examples
   *
   * ```ts
   * import { sql } from 'kysely'
   *
   * addCheckConstraint('check_legs', sql`number_of_legs < 5`)
   * ```
   */
  addCheckConstraint(constraintName, checkExpression) {
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWithConstraint(this.#props.node, CheckConstraintNode.create(checkExpression.toOperationNode(), constraintName))
    });
  }
  /**
   * Adds a foreign key constraint.
   *
   * The constraint name can be anything you want, but it must be unique
   * across the whole database.
   *
   * ### Examples
   *
   * ```ts
   * addForeignKeyConstraint(
   *   'owner_id_foreign',
   *   ['owner_id'],
   *   'person',
   *   ['id'],
   * )
   * ```
   *
   * Add constraint for multiple columns:
   *
   * ```ts
   * addForeignKeyConstraint(
   *   'owner_id_foreign',
   *   ['owner_id1', 'owner_id2'],
   *   'person',
   *   ['id1', 'id2'],
   *   (cb) => cb.onDelete('cascade')
   * )
   * ```
   */
  addForeignKeyConstraint(constraintName, columns, targetTable, targetColumns, build = noop) {
    const builder = build(new ForeignKeyConstraintBuilder(ForeignKeyConstraintNode.create(columns.map(ColumnNode.create), parseTable(targetTable), targetColumns.map(ColumnNode.create), constraintName)));
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWithConstraint(this.#props.node, builder.toOperationNode())
    });
  }
  /**
   * This can be used to add any additional SQL to the front of the query __after__ the `create` keyword.
   *
   * Also see {@link temporary}.
   *
   * ### Examples
   *
   * ```ts
   * db.schema.createTable('person')
   *   .modifyFront(sql`global temporary`)
   *   .addColumn('id', 'integer', col => col.primaryKey())
   *   .addColumn('first_name', 'varchar(64)', col => col.notNull())
   *   .addColumn('last_name', 'varchar(64), col => col.notNull())
   *   .execute()
   * ```
   *
   * The generated SQL (Postgres):
   *
   * ```sql
   * create global temporary table "person" (
   *   "id" integer primary key,
   *   "first_name" varchar(64) not null,
   *   "last_name" varchar(64) not null
   * )
   * ```
   */
  modifyFront(modifier) {
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWithFrontModifier(this.#props.node, modifier.toOperationNode())
    });
  }
  /**
   * This can be used to add any additional SQL to the end of the query.
   *
   * Also see {@link onCommit}.
   *
   * ### Examples
   *
   * ```ts
   * db.schema.createTable('person')
   *   .addColumn('id', 'integer', col => col => primaryKey())
   *   .addColumn('first_name', 'varchar(64)', col => col.notNull())
   *   .addColumn('last_name', 'varchar(64), col => col.notNull())
   *   .modifyEnd(sql`collate utf8_unicode_ci`)
   *   .execute()
   * ```
   *
   * The generated SQL (MySQL):
   *
   * ```sql
   * create table `person` (
   *   `id` integer primary key,
   *   `first_name` varchar(64) not null,
   *   `last_name` varchar(64) not null
   * ) collate utf8_unicode_ci
   * ```
   */
  modifyEnd(modifier) {
    return new _CreateTableBuilder({
      ...this.#props,
      node: CreateTableNode.cloneWithEndModifier(this.#props.node, modifier.toOperationNode())
    });
  }
  /**
   * Calls the given function passing `this` as the only argument.
   *
   * ### Examples
   *
   * ```ts
   * db.schema
   *   .createTable('test')
   *   .$call((builder) => builder.addColumn('id', 'integer'))
   *   .execute()
   * ```
   *
   * ```ts
   * const addDefaultColumns = <T extends string, C extends string = never>(
   *   builder: CreateTableBuilder<T, C>
   * ) => {
   *   return builder
   *     .addColumn('id', 'integer', (col) => col.notNull())
   *     .addColumn('created_at', 'date', (col) =>
   *       col.notNull().defaultTo(sql`now()`)
   *     )
   *     .addColumn('updated_at', 'date', (col) =>
   *       col.notNull().defaultTo(sql`now()`)
   *     )
   * }
   *
   * db.schema
   *   .createTable('test')
   *   .$call(addDefaultColumns)
   *   .execute()
   * ```
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(CreateTableBuilder, "don't await CreateTableBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/drop-index-builder.js
init_esm();
var DropIndexBuilder = class _DropIndexBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  /**
   * Specifies the table the index was created for. This is not needed
   * in all dialects.
   */
  on(table) {
    return new _DropIndexBuilder({
      ...this.#props,
      node: DropIndexNode.cloneWith(this.#props.node, {
        table: parseTable(table)
      })
    });
  }
  ifExists() {
    return new _DropIndexBuilder({
      ...this.#props,
      node: DropIndexNode.cloneWith(this.#props.node, {
        ifExists: true
      })
    });
  }
  cascade() {
    return new _DropIndexBuilder({
      ...this.#props,
      node: DropIndexNode.cloneWith(this.#props.node, {
        cascade: true
      })
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(DropIndexBuilder, "don't await DropIndexBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/drop-schema-builder.js
init_esm();
var DropSchemaBuilder = class _DropSchemaBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  ifExists() {
    return new _DropSchemaBuilder({
      ...this.#props,
      node: DropSchemaNode.cloneWith(this.#props.node, {
        ifExists: true
      })
    });
  }
  cascade() {
    return new _DropSchemaBuilder({
      ...this.#props,
      node: DropSchemaNode.cloneWith(this.#props.node, {
        cascade: true
      })
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(DropSchemaBuilder, "don't await DropSchemaBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/drop-table-builder.js
init_esm();
var DropTableBuilder = class _DropTableBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  ifExists() {
    return new _DropTableBuilder({
      ...this.#props,
      node: DropTableNode.cloneWith(this.#props.node, {
        ifExists: true
      })
    });
  }
  cascade() {
    return new _DropTableBuilder({
      ...this.#props,
      node: DropTableNode.cloneWith(this.#props.node, {
        cascade: true
      })
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(DropTableBuilder, "don't await DropTableBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/create-view-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/create-view-node.js
init_esm();
var CreateViewNode = freeze({
  is(node) {
    return node.kind === "CreateViewNode";
  },
  create(name) {
    return freeze({
      kind: "CreateViewNode",
      name: SchemableIdentifierNode.create(name)
    });
  },
  cloneWith(createView, params) {
    return freeze({
      ...createView,
      ...params
    });
  }
});

// ../../node_modules/kysely/dist/esm/plugin/immediate-value/immediate-value-plugin.js
init_esm();
var ImmediateValuePlugin = class {
  #transformer = new ImmediateValueTransformer();
  transformQuery(args) {
    return this.#transformer.transformNode(args.node);
  }
  transformResult(args) {
    return Promise.resolve(args.result);
  }
};

// ../../node_modules/kysely/dist/esm/schema/create-view-builder.js
var CreateViewBuilder = class _CreateViewBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  /**
   * Adds the "temporary" modifier.
   *
   * Use this to create a temporary view.
   */
  temporary() {
    return new _CreateViewBuilder({
      ...this.#props,
      node: CreateViewNode.cloneWith(this.#props.node, {
        temporary: true
      })
    });
  }
  materialized() {
    return new _CreateViewBuilder({
      ...this.#props,
      node: CreateViewNode.cloneWith(this.#props.node, {
        materialized: true
      })
    });
  }
  /**
   * Only implemented on some dialects like SQLite. On most dialects, use {@link orReplace}.
   */
  ifNotExists() {
    return new _CreateViewBuilder({
      ...this.#props,
      node: CreateViewNode.cloneWith(this.#props.node, {
        ifNotExists: true
      })
    });
  }
  orReplace() {
    return new _CreateViewBuilder({
      ...this.#props,
      node: CreateViewNode.cloneWith(this.#props.node, {
        orReplace: true
      })
    });
  }
  columns(columns) {
    return new _CreateViewBuilder({
      ...this.#props,
      node: CreateViewNode.cloneWith(this.#props.node, {
        columns: columns.map(parseColumnName)
      })
    });
  }
  /**
   * Sets the select query or a `values` statement that creates the view.
   *
   * WARNING!
   * Some dialects don't support parameterized queries in DDL statements and therefore
   * the query or raw {@link sql } expression passed here is interpolated into a single
   * string opening an SQL injection vulnerability. DO NOT pass unchecked user input
   * into the query or raw expression passed to this method!
   */
  as(query) {
    const queryNode = query.withPlugin(new ImmediateValuePlugin()).toOperationNode();
    return new _CreateViewBuilder({
      ...this.#props,
      node: CreateViewNode.cloneWith(this.#props.node, {
        as: queryNode
      })
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(CreateViewBuilder, "don't await CreateViewBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/drop-view-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/drop-view-node.js
init_esm();
var DropViewNode = freeze({
  is(node) {
    return node.kind === "DropViewNode";
  },
  create(name) {
    return freeze({
      kind: "DropViewNode",
      name: SchemableIdentifierNode.create(name)
    });
  },
  cloneWith(dropView, params) {
    return freeze({
      ...dropView,
      ...params
    });
  }
});

// ../../node_modules/kysely/dist/esm/schema/drop-view-builder.js
var DropViewBuilder = class _DropViewBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  materialized() {
    return new _DropViewBuilder({
      ...this.#props,
      node: DropViewNode.cloneWith(this.#props.node, {
        materialized: true
      })
    });
  }
  ifExists() {
    return new _DropViewBuilder({
      ...this.#props,
      node: DropViewNode.cloneWith(this.#props.node, {
        ifExists: true
      })
    });
  }
  cascade() {
    return new _DropViewBuilder({
      ...this.#props,
      node: DropViewNode.cloneWith(this.#props.node, {
        cascade: true
      })
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(DropViewBuilder, "don't await DropViewBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/create-type-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/create-type-node.js
init_esm();
var CreateTypeNode = freeze({
  is(node) {
    return node.kind === "CreateTypeNode";
  },
  create(name) {
    return freeze({
      kind: "CreateTypeNode",
      name
    });
  },
  cloneWithEnum(createType, values) {
    return freeze({
      ...createType,
      enum: ValueListNode.create(values.map((value) => ValueNode.createImmediate(value)))
    });
  }
});

// ../../node_modules/kysely/dist/esm/schema/create-type-builder.js
var CreateTypeBuilder = class _CreateTypeBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  /**
   * Creates an anum type.
   *
   * ### Examples
   *
   * ```ts
   * db.schema.createType('species').asEnum(['cat', 'dog', 'frog'])
   * ```
   */
  asEnum(values) {
    return new _CreateTypeBuilder({
      ...this.#props,
      node: CreateTypeNode.cloneWithEnum(this.#props.node, values)
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(CreateTypeBuilder, "don't await CreateTypeBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/schema/drop-type-builder.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/drop-type-node.js
init_esm();
var DropTypeNode = freeze({
  is(node) {
    return node.kind === "DropTypeNode";
  },
  create(name) {
    return freeze({
      kind: "DropTypeNode",
      name
    });
  },
  cloneWith(dropType, params) {
    return freeze({
      ...dropType,
      ...params
    });
  }
});

// ../../node_modules/kysely/dist/esm/schema/drop-type-builder.js
var DropTypeBuilder = class _DropTypeBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  ifExists() {
    return new _DropTypeBuilder({
      ...this.#props,
      node: DropTypeNode.cloneWith(this.#props.node, {
        ifExists: true
      })
    });
  }
  /**
   * Simply calls the provided function passing `this` as the only argument. `$call` returns
   * what the provided function returns.
   */
  $call(func) {
    return func(this);
  }
  toOperationNode() {
    return this.#props.executor.transformQuery(this.#props.node, this.#props.queryId);
  }
  compile() {
    return this.#props.executor.compileQuery(this.toOperationNode(), this.#props.queryId);
  }
  async execute() {
    await this.#props.executor.executeQuery(this.compile(), this.#props.queryId);
  }
};
preventAwait(DropTypeBuilder, "don't await DropTypeBuilder instances directly. To execute the query you need to call `execute`");

// ../../node_modules/kysely/dist/esm/parser/identifier-parser.js
init_esm();
function parseSchemableIdentifier(id) {
  const SCHEMA_SEPARATOR = ".";
  if (id.includes(SCHEMA_SEPARATOR)) {
    const parts = id.split(SCHEMA_SEPARATOR).map(trim3);
    if (parts.length === 2) {
      return SchemableIdentifierNode.createWithSchema(parts[0], parts[1]);
    } else {
      throw new Error(`invalid schemable identifier ${id}`);
    }
  } else {
    return SchemableIdentifierNode.create(id);
  }
}
function trim3(str) {
  return str.trim();
}

// ../../node_modules/kysely/dist/esm/schema/schema.js
var SchemaModule = class _SchemaModule {
  #executor;
  constructor(executor) {
    this.#executor = executor;
  }
  /**
   * Create a new table.
   *
   * ### Examples
   *
   * This example creates a new table with columns `id`, `first_name`,
   * `last_name` and `gender`:
   *
   * ```ts
   * await db.schema
   *   .createTable('person')
   *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
   *   .addColumn('first_name', 'varchar', col => col.notNull())
   *   .addColumn('last_name', 'varchar', col => col.notNull())
   *   .addColumn('gender', 'varchar')
   *   .execute()
   * ```
   *
   * This example creates a table with a foreign key. Not all database
   * engines support column-level foreign key constraint definitions.
   * For example if you are using MySQL 5.X see the next example after
   * this one.
   *
   * ```ts
   * await db.schema
   *   .createTable('pet')
   *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
   *   .addColumn('owner_id', 'integer', col => col
   *     .references('person.id')
   *     .onDelete('cascade')
   *   )
   *   .execute()
   * ```
   *
   * This example adds a foreign key constraint for a columns just
   * like the previous example, but using a table-level statement.
   * On MySQL 5.X you need to define foreign key constraints like
   * this:
   *
   * ```ts
   * await db.schema
   *   .createTable('pet')
   *   .addColumn('id', 'integer', col => col.primaryKey().autoIncrement())
   *   .addColumn('owner_id', 'integer')
   *   .addForeignKeyConstraint(
   *     'pet_owner_id_foreign', ['owner_id'], 'person', ['id'],
   *     (constraint) => constraint.onDelete('cascade')
   *   )
   *   .execute()
   * ```
   */
  createTable(table) {
    return new CreateTableBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: CreateTableNode.create(parseTable(table))
    });
  }
  /**
   * Drop a table.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .dropTable('person')
   *   .execute()
   * ```
   */
  dropTable(table) {
    return new DropTableBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: DropTableNode.create(parseTable(table))
    });
  }
  /**
   * Create a new index.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .createIndex('person_full_name_unique_index')
   *   .on('person')
   *   .columns(['first_name', 'last_name'])
   *   .execute()
   * ```
   */
  createIndex(indexName) {
    return new CreateIndexBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: CreateIndexNode.create(indexName)
    });
  }
  /**
   * Drop an index.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .dropIndex('person_full_name_unique_index')
   *   .execute()
   * ```
   */
  dropIndex(indexName) {
    return new DropIndexBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: DropIndexNode.create(indexName)
    });
  }
  /**
   * Create a new schema.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .createSchema('some_schema')
   *   .execute()
   * ```
   */
  createSchema(schema) {
    return new CreateSchemaBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: CreateSchemaNode.create(schema)
    });
  }
  /**
   * Drop a schema.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .dropSchema('some_schema')
   *   .execute()
   * ```
   */
  dropSchema(schema) {
    return new DropSchemaBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: DropSchemaNode.create(schema)
    });
  }
  /**
   * Alter a table.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .alterTable('person')
   *   .alterColumn('first_name', (ac) => ac.setDataType('text'))
   *   .execute()
   * ```
   */
  alterTable(table) {
    return new AlterTableBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: AlterTableNode.create(parseTable(table))
    });
  }
  /**
   * Create a new view.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .createView('dogs')
   *   .orReplace()
   *   .as(db.selectFrom('pet').selectAll().where('species', '=', 'dog'))
   *   .execute()
   * ```
   */
  createView(viewName) {
    return new CreateViewBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: CreateViewNode.create(viewName)
    });
  }
  /**
   * Drop a view.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .dropView('dogs')
   *   .ifExists()
   *   .execute()
   * ```
   */
  dropView(viewName) {
    return new DropViewBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: DropViewNode.create(viewName)
    });
  }
  /**
   * Create a new type.
   *
   * Only some dialects like PostgreSQL have user-defined types.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .createType('species')
   *   .asEnum(['dog', 'cat', 'frog'])
   *   .execute()
   * ```
   */
  createType(typeName) {
    return new CreateTypeBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: CreateTypeNode.create(parseSchemableIdentifier(typeName))
    });
  }
  /**
   * Drop a type.
   *
   * Only some dialects like PostgreSQL have user-defined types.
   *
   * ### Examples
   *
   * ```ts
   * await db.schema
   *   .dropType('species')
   *   .ifExists()
   *   .execute()
   * ```
   */
  dropType(typeName) {
    return new DropTypeBuilder({
      queryId: createQueryId(),
      executor: this.#executor,
      node: DropTypeNode.create(parseSchemableIdentifier(typeName))
    });
  }
  /**
   * Returns a copy of this schema module with the given plugin installed.
   */
  withPlugin(plugin) {
    return new _SchemaModule(this.#executor.withPlugin(plugin));
  }
  /**
   * Returns a copy of this schema module  without any plugins.
   */
  withoutPlugins() {
    return new _SchemaModule(this.#executor.withoutPlugins());
  }
  /**
   * See {@link QueryCreator.withSchema}
   */
  withSchema(schema) {
    return new _SchemaModule(this.#executor.withPluginAtFront(new WithSchemaPlugin(schema)));
  }
};

// ../../node_modules/kysely/dist/esm/dynamic/dynamic.js
init_esm();
var DynamicModule = class {
  /**
   * Creates a dynamic reference to a column that is not know at compile time.
   *
   * Kysely is built in a way that by default you can't refer to tables or columns
   * that are not actually visible in the current query and context. This is all
   * done by typescript at compile time, which means that you need to know the
   * columns and tables at compile time. This is not always the case of course.
   *
   * This method is meant to be used in those cases where the column names
   * come from the user input or are not otherwise known at compile time.
   *
   * WARNING! Unlike values, column names are not escaped by the database engine
   * or Kysely and if you pass in unchecked column names using this method, you
   * create an SQL injection vulnerability. Always __always__ validate the user
   * input before passing it to this method.
   *
   * There are couple of examples below for some use cases, but you can pass
   * `ref` to other methods as well. If the types allow you to pass a `ref`
   * value to some place, it should work.
   *
   * ### Examples
   *
   * Filter by a column not know at compile time:
   *
   * ```ts
   * async function someQuery(filterColumn: string, filterValue: string) {
   *   const { ref } = db.dynamic
   *
   *   return await db
   *     .selectFrom('person')
   *     .selectAll()
   *     .where(ref(filterColumn), '=', filterValue)
   *     .execute()
   * }
   *
   * someQuery('first_name', 'Arnold')
   * someQuery('person.last_name', 'Aniston')
   * ```
   *
   * Order by a column not know at compile time:
   *
   * ```ts
   * async function someQuery(orderBy: string) {
   *   const { ref } = db.dynamic
   *
   *   return await db
   *     .selectFrom('person')
   *     .select('person.first_name as fn')
   *     .orderBy(ref(orderBy))
   *     .execute()
   * }
   *
   * someQuery('fn')
   * ```
   *
   * In this example we add selections dynamically:
   *
   * ```ts
   * const { ref } = db.dynamic
   *
   * // Some column name provided by the user. Value not known at compile time.
   * const columnFromUserInput = req.query.select;
   *
   * // A type that lists all possible values `columnFromUserInput` can have.
   * // You can use `keyof Person` if any column of an interface is allowed.
   * type PossibleColumns = 'last_name' | 'first_name' | 'birth_date'
   *
   * const [person] = await db.selectFrom('person')
   *   .select([
   *     ref<PossibleColumns>(columnFromUserInput),
   *     'id'
   *   ])
   *   .execute()
   *
   * // The resulting type contains all `PossibleColumns` as optional fields
   * // because we cannot know which field was actually selected before
   * // running the code.
   * const lastName: string | undefined = person.last_name
   * const firstName: string | undefined = person.first_name
   * const birthDate: string | undefined = person.birth_date
   *
   * // The result type also contains the compile time selection `id`.
   * person.id
   * ```
   */
  ref(reference) {
    return new DynamicReferenceBuilder(reference);
  }
};

// ../../node_modules/kysely/dist/esm/driver/default-connection-provider.js
init_esm();
var DefaultConnectionProvider = class {
  #driver;
  constructor(driver) {
    this.#driver = driver;
  }
  async provideConnection(consumer) {
    const connection = await this.#driver.acquireConnection();
    try {
      return await consumer(connection);
    } finally {
      await this.#driver.releaseConnection(connection);
    }
  }
};

// ../../node_modules/kysely/dist/esm/query-executor/default-query-executor.js
init_esm();
var DefaultQueryExecutor = class _DefaultQueryExecutor extends QueryExecutorBase {
  #compiler;
  #adapter;
  #connectionProvider;
  constructor(compiler, adapter, connectionProvider, plugins = []) {
    super(plugins);
    this.#compiler = compiler;
    this.#adapter = adapter;
    this.#connectionProvider = connectionProvider;
  }
  get adapter() {
    return this.#adapter;
  }
  compileQuery(node) {
    return this.#compiler.compileQuery(node);
  }
  provideConnection(consumer) {
    return this.#connectionProvider.provideConnection(consumer);
  }
  withPlugins(plugins) {
    return new _DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, ...plugins]);
  }
  withPlugin(plugin) {
    return new _DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [...this.plugins, plugin]);
  }
  withPluginAtFront(plugin) {
    return new _DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, [plugin, ...this.plugins]);
  }
  withConnectionProvider(connectionProvider) {
    return new _DefaultQueryExecutor(this.#compiler, this.#adapter, connectionProvider, [...this.plugins]);
  }
  withoutPlugins() {
    return new _DefaultQueryExecutor(this.#compiler, this.#adapter, this.#connectionProvider, []);
  }
};

// ../../node_modules/kysely/dist/esm/driver/runtime-driver.js
init_esm();

// ../../node_modules/kysely/dist/esm/util/performance-now.js
init_esm();
function performanceNow() {
  if (typeof performance !== "undefined" && isFunction(performance.now)) {
    return performance.now();
  } else {
    return Date.now();
  }
}

// ../../node_modules/kysely/dist/esm/driver/runtime-driver.js
var RuntimeDriver = class {
  #driver;
  #log;
  #initPromise;
  #initDone;
  #destroyPromise;
  #connections = /* @__PURE__ */ new WeakSet();
  constructor(driver, log) {
    this.#initDone = false;
    this.#driver = driver;
    this.#log = log;
  }
  async init() {
    if (this.#destroyPromise) {
      throw new Error("driver has already been destroyed");
    }
    if (!this.#initPromise) {
      this.#initPromise = this.#driver.init().then(() => {
        this.#initDone = true;
      }).catch((err) => {
        this.#initPromise = void 0;
        return Promise.reject(err);
      });
    }
    await this.#initPromise;
  }
  async acquireConnection() {
    if (this.#destroyPromise) {
      throw new Error("driver has already been destroyed");
    }
    if (!this.#initDone) {
      await this.init();
    }
    const connection = await this.#driver.acquireConnection();
    if (!this.#connections.has(connection)) {
      if (this.#needsLogging()) {
        this.#addLogging(connection);
      }
      this.#connections.add(connection);
    }
    return connection;
  }
  async releaseConnection(connection) {
    await this.#driver.releaseConnection(connection);
  }
  beginTransaction(connection, settings) {
    return this.#driver.beginTransaction(connection, settings);
  }
  commitTransaction(connection) {
    return this.#driver.commitTransaction(connection);
  }
  rollbackTransaction(connection) {
    return this.#driver.rollbackTransaction(connection);
  }
  async destroy() {
    if (!this.#initPromise) {
      return;
    }
    await this.#initPromise;
    if (!this.#destroyPromise) {
      this.#destroyPromise = this.#driver.destroy().catch((err) => {
        this.#destroyPromise = void 0;
        return Promise.reject(err);
      });
    }
    await this.#destroyPromise;
  }
  #needsLogging() {
    return this.#log.isLevelEnabled("query") || this.#log.isLevelEnabled("error");
  }
  // This method monkey patches the database connection's executeQuery method
  // by adding logging code around it. Monkey patching is not pretty, but it's
  // the best option in this case.
  #addLogging(connection) {
    const executeQuery = connection.executeQuery;
    connection.executeQuery = async (compiledQuery) => {
      const startTime = performanceNow();
      try {
        return await executeQuery.call(connection, compiledQuery);
      } catch (error) {
        await this.#logError(error, compiledQuery, startTime);
        throw error;
      } finally {
        await this.#logQuery(compiledQuery, startTime);
      }
    };
  }
  async #logError(error, compiledQuery, startTime) {
    await this.#log.error(() => ({
      level: "error",
      error,
      query: compiledQuery,
      queryDurationMillis: this.#calculateDurationMillis(startTime)
    }));
  }
  async #logQuery(compiledQuery, startTime) {
    await this.#log.query(() => ({
      level: "query",
      query: compiledQuery,
      queryDurationMillis: this.#calculateDurationMillis(startTime)
    }));
  }
  #calculateDurationMillis(startTime) {
    return performanceNow() - startTime;
  }
};

// ../../node_modules/kysely/dist/esm/driver/single-connection-provider.js
init_esm();
var SingleConnectionProvider = class {
  #connection;
  #runningPromise;
  constructor(connection) {
    this.#connection = connection;
  }
  async provideConnection(consumer) {
    while (this.#runningPromise) {
      await this.#runningPromise;
    }
    const promise = this.#run(consumer);
    this.#runningPromise = promise.then(() => {
      this.#runningPromise = void 0;
    }).catch(() => {
      this.#runningPromise = void 0;
    });
    return promise;
  }
  // Run the runner in an async function to make sure it doesn't
  // throw synchronous errors.
  async #run(runner) {
    return await runner(this.#connection);
  }
};

// ../../node_modules/kysely/dist/esm/driver/driver.js
init_esm();
var TRANSACTION_ISOLATION_LEVELS = [
  "read uncommitted",
  "read committed",
  "repeatable read",
  "serializable"
];

// ../../node_modules/kysely/dist/esm/util/log.js
init_esm();
var LOG_LEVELS = freeze(["query", "error"]);
var Log = class {
  #levels;
  #logger;
  constructor(config) {
    if (isFunction(config)) {
      this.#logger = config;
      this.#levels = freeze({
        query: true,
        error: true
      });
    } else {
      this.#logger = defaultLogger;
      this.#levels = freeze({
        query: config.includes("query"),
        error: config.includes("error")
      });
    }
  }
  isLevelEnabled(level) {
    return this.#levels[level];
  }
  async query(getEvent) {
    if (this.#levels.query) {
      await this.#logger(getEvent());
    }
  }
  async error(getEvent) {
    if (this.#levels.error) {
      await this.#logger(getEvent());
    }
  }
};
function defaultLogger(event) {
  if (event.level === "query") {
    console.log(`kysely:query: ${event.query.sql}`);
    console.log(`kysely:query: duration: ${event.queryDurationMillis.toFixed(1)}ms`);
  } else if (event.level === "error") {
    if (event.error instanceof Error) {
      console.error(`kysely:error: ${event.error.stack ?? event.error.message}`);
    } else {
      console.error(`kysely:error: ${event}`);
    }
  }
}

// ../../node_modules/kysely/dist/esm/util/compilable.js
init_esm();
function isCompilable(value) {
  return isObject(value) && isFunction(value.compile);
}

// ../../node_modules/kysely/dist/esm/kysely.js
var Kysely = class _Kysely extends QueryCreator {
  #props;
  constructor(args) {
    let superProps;
    let props;
    if (isKyselyProps(args)) {
      superProps = { executor: args.executor };
      props = { ...args };
    } else {
      const dialect = args.dialect;
      const driver = dialect.createDriver();
      const compiler = dialect.createQueryCompiler();
      const adapter = dialect.createAdapter();
      const log = new Log(args.log ?? []);
      const runtimeDriver = new RuntimeDriver(driver, log);
      const connectionProvider = new DefaultConnectionProvider(runtimeDriver);
      const executor = new DefaultQueryExecutor(compiler, adapter, connectionProvider, args.plugins ?? []);
      superProps = { executor };
      props = {
        config: args,
        executor,
        dialect,
        driver: runtimeDriver
      };
    }
    super(superProps);
    this.#props = freeze(props);
  }
  /**
   * Returns the {@link SchemaModule} module for building database schema.
   */
  get schema() {
    return new SchemaModule(this.#props.executor);
  }
  /**
   * Returns a the {@link DynamicModule} module.
   *
   * The {@link DynamicModule} module can be used to bypass strict typing and
   * passing in dynamic values for the queries.
   */
  get dynamic() {
    return new DynamicModule();
  }
  /**
   * Returns a {@link DatabaseIntrospector | database introspector}.
   */
  get introspection() {
    return this.#props.dialect.createIntrospector(this.withoutPlugins());
  }
  case(value) {
    return new CaseBuilder({
      node: CaseNode.create(isUndefined(value) ? void 0 : parseExpression(value))
    });
  }
  /**
   * Returns a {@link FunctionModule} that can be used to write type safe function
   * calls.
   *
   * ```ts
   * await db.selectFrom('person')
   *   .innerJoin('pet', 'pet.owner_id', 'person.id')
   *   .select((eb) => [
   *     'person.id',
   *     eb.fn.count('pet.id').as('pet_count')
   *   ])
   *   .groupBy('person.id')
   *   .having((eb) => eb.fn.count('pet.id'), '>', 10)
   *   .execute()
   * ```
   *
   * The generated SQL (PostgreSQL):
   *
   * ```sql
   * select "person"."id", count("pet"."id") as "pet_count"
   * from "person"
   * inner join "pet" on "pet"."owner_id" = "person"."id"
   * group by "person"."id"
   * having count("pet"."id") > $1
   * ```
   */
  get fn() {
    return createFunctionModule();
  }
  /**
   * Creates a {@link TransactionBuilder} that can be used to run queries inside a transaction.
   *
   * The returned {@link TransactionBuilder} can be used to configure the transaction. The
   * {@link TransactionBuilder.execute} method can then be called to run the transaction.
   * {@link TransactionBuilder.execute} takes a function that is run inside the
   * transaction. If the function throws, the transaction is rolled back. Otherwise
   * the transaction is committed.
   *
   * The callback function passed to the {@link TransactionBuilder.execute | execute}
   * method gets the transaction object as its only argument. The transaction is
   * of type {@link Transaction} which inherits {@link Kysely}. Any query
   * started through the transaction object is executed inside the transaction.
   *
   * ### Examples
   *
   * <!-- siteExample("transactions", "Simple transaction", 10) -->
   *
   * This example inserts two rows in a transaction. If an error is thrown inside
   * the callback passed to the `execute` method, the transaction is rolled back.
   * Otherwise it's committed.
   *
   * ```ts
   * const catto = await db.transaction().execute(async (trx) => {
   *   const jennifer = await trx.insertInto('person')
   *     .values({
   *       first_name: 'Jennifer',
   *       last_name: 'Aniston',
   *       age: 40,
   *     })
   *     .returning('id')
   *     .executeTakeFirstOrThrow()
   *
   *   return await trx.insertInto('pet')
   *     .values({
   *       owner_id: jennifer.id,
   *       name: 'Catto',
   *       species: 'cat',
   *       is_favorite: false,
   *     })
   *     .returningAll()
   *     .executeTakeFirst()
   * })
   * ```
   *
   * Setting the isolation level:
   *
   * ```ts
   * await db
   *   .transaction()
   *   .setIsolationLevel('serializable')
   *   .execute(async (trx) => {
   *     await doStuff(trx)
   *   })
   * ```
   */
  transaction() {
    return new TransactionBuilder({ ...this.#props });
  }
  /**
   * Provides a kysely instance bound to a single database connection.
   *
   * ### Examples
   *
   * ```ts
   * await db
   *   .connection()
   *   .execute(async (db) => {
   *     // `db` is an instance of `Kysely` that's bound to a single
   *     // database connection. All queries executed through `db` use
   *     // the same connection.
   *     await doStuff(db)
   *   })
   * ```
   */
  connection() {
    return new ConnectionBuilder({ ...this.#props });
  }
  /**
   * Returns a copy of this Kysely instance with the given plugin installed.
   */
  withPlugin(plugin) {
    return new _Kysely({
      ...this.#props,
      executor: this.#props.executor.withPlugin(plugin)
    });
  }
  /**
   * Returns a copy of this Kysely instance without any plugins.
   */
  withoutPlugins() {
    return new _Kysely({
      ...this.#props,
      executor: this.#props.executor.withoutPlugins()
    });
  }
  /**
   * @override
   */
  withSchema(schema) {
    return new _Kysely({
      ...this.#props,
      executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema))
    });
  }
  /**
   * Returns a copy of this Kysely instance with tables added to its
   * database type.
   *
   * This method only modifies the types and doesn't affect any of the
   * executed queries in any way.
   *
   * ### Examples
   *
   * The following example adds and uses a temporary table:
   *
   * @example
   * ```ts
   * await db.schema
   *   .createTable('temp_table')
   *   .temporary()
   *   .addColumn('some_column', 'integer')
   *   .execute()
   *
   * const tempDb = db.withTables<{
   *   temp_table: {
   *     some_column: number
   *   }
   * }>()
   *
   * await tempDb
   *   .insertInto('temp_table')
   *   .values({ some_column: 100 })
   *   .execute()
   * ```
   */
  withTables() {
    return new _Kysely({ ...this.#props });
  }
  /**
   * Releases all resources and disconnects from the database.
   *
   * You need to call this when you are done using the `Kysely` instance.
   */
  async destroy() {
    await this.#props.driver.destroy();
  }
  /**
   * Returns true if this `Kysely` instance is a transaction.
   *
   * You can also use `db instanceof Transaction`.
   */
  get isTransaction() {
    return false;
  }
  /**
   * @internal
   * @private
   */
  getExecutor() {
    return this.#props.executor;
  }
  /**
   * Executes a given compiled query or query builder.
   *
   * See {@link https://github.com/koskimas/kysely/blob/master/site/docs/recipes/splitting-build-compile-and-execute-code.md#execute-compiled-queries splitting build, compile and execute code recipe} for more information.
   */
  executeQuery(query, queryId = createQueryId()) {
    const compiledQuery = isCompilable(query) ? query.compile() : query;
    return this.getExecutor().executeQuery(compiledQuery, queryId);
  }
};
var Transaction = class _Transaction extends Kysely {
  #props;
  constructor(props) {
    super(props);
    this.#props = props;
  }
  // The return type is `true` instead of `boolean` to make Kysely<DB>
  // unassignable to Transaction<DB> while allowing assignment the
  // other way around.
  get isTransaction() {
    return true;
  }
  transaction() {
    throw new Error("calling the transaction method for a Transaction is not supported");
  }
  connection() {
    throw new Error("calling the connection method for a Transaction is not supported");
  }
  async destroy() {
    throw new Error("calling the destroy method for a Transaction is not supported");
  }
  withPlugin(plugin) {
    return new _Transaction({
      ...this.#props,
      executor: this.#props.executor.withPlugin(plugin)
    });
  }
  withoutPlugins() {
    return new _Transaction({
      ...this.#props,
      executor: this.#props.executor.withoutPlugins()
    });
  }
  /**
   * @override
   */
  withSchema(schema) {
    return new _Transaction({
      ...this.#props,
      executor: this.#props.executor.withPluginAtFront(new WithSchemaPlugin(schema))
    });
  }
  withTables() {
    return new _Transaction({ ...this.#props });
  }
};
function isKyselyProps(obj) {
  return isObject(obj) && isObject(obj.config) && isObject(obj.driver) && isObject(obj.executor) && isObject(obj.dialect);
}
var ConnectionBuilder = class {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  async execute(callback) {
    return this.#props.executor.provideConnection(async (connection) => {
      const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));
      const db = new Kysely({
        ...this.#props,
        executor
      });
      return await callback(db);
    });
  }
};
preventAwait(ConnectionBuilder, "don't await ConnectionBuilder instances directly. To execute the query you need to call the `execute` method");
var TransactionBuilder = class _TransactionBuilder {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  setIsolationLevel(isolationLevel) {
    return new _TransactionBuilder({
      ...this.#props,
      isolationLevel
    });
  }
  async execute(callback) {
    const { isolationLevel, ...kyselyProps } = this.#props;
    const settings = { isolationLevel };
    validateTransactionSettings(settings);
    return this.#props.executor.provideConnection(async (connection) => {
      const executor = this.#props.executor.withConnectionProvider(new SingleConnectionProvider(connection));
      const transaction = new Transaction({
        ...kyselyProps,
        executor
      });
      try {
        await this.#props.driver.beginTransaction(connection, settings);
        const result = await callback(transaction);
        await this.#props.driver.commitTransaction(connection);
        return result;
      } catch (error) {
        await this.#props.driver.rollbackTransaction(connection);
        throw error;
      }
    });
  }
};
preventAwait(TransactionBuilder, "don't await TransactionBuilder instances directly. To execute the transaction you need to call the `execute` method");
function validateTransactionSettings(settings) {
  if (settings.isolationLevel && !TRANSACTION_ISOLATION_LEVELS.includes(settings.isolationLevel)) {
    throw new Error(`invalid transaction isolation level ${settings.isolationLevel}`);
  }
}

// ../../node_modules/kysely/dist/esm/raw-builder/raw-builder.js
init_esm();
var RawBuilderImpl = class _RawBuilderImpl {
  #props;
  constructor(props) {
    this.#props = freeze(props);
  }
  get expressionType() {
    return void 0;
  }
  get isRawBuilder() {
    return true;
  }
  as(alias) {
    return new AliasedRawBuilderImpl(this, alias);
  }
  $castTo() {
    return new _RawBuilderImpl({ ...this.#props });
  }
  withPlugin(plugin) {
    return new _RawBuilderImpl({
      ...this.#props,
      plugins: this.#props.plugins !== void 0 ? freeze([...this.#props.plugins, plugin]) : freeze([plugin])
    });
  }
  toOperationNode() {
    return this.#toOperationNode(this.#getExecutor());
  }
  compile(executorProvider) {
    return this.#compile(this.#getExecutor(executorProvider));
  }
  async execute(executorProvider) {
    const executor = this.#getExecutor(executorProvider);
    return executor.executeQuery(this.#compile(executor), this.#props.queryId);
  }
  #getExecutor(executorProvider) {
    const executor = executorProvider !== void 0 ? executorProvider.getExecutor() : NOOP_QUERY_EXECUTOR;
    return this.#props.plugins !== void 0 ? executor.withPlugins(this.#props.plugins) : executor;
  }
  #toOperationNode(executor) {
    return executor.transformQuery(this.#props.rawNode, this.#props.queryId);
  }
  #compile(executor) {
    return executor.compileQuery(this.#toOperationNode(executor), this.#props.queryId);
  }
};
function createRawBuilder(props) {
  return new RawBuilderImpl(props);
}
preventAwait(RawBuilderImpl, "don't await RawBuilder instances directly. To execute the query you need to call `execute`");
var AliasedRawBuilderImpl = class {
  #rawBuilder;
  #alias;
  constructor(rawBuilder, alias) {
    this.#rawBuilder = rawBuilder;
    this.#alias = alias;
  }
  get expression() {
    return this.#rawBuilder;
  }
  get alias() {
    return this.#alias;
  }
  get rawBuilder() {
    return this.#rawBuilder;
  }
  toOperationNode() {
    return AliasNode.create(this.#rawBuilder.toOperationNode(), isOperationNodeSource(this.#alias) ? this.#alias.toOperationNode() : IdentifierNode.create(this.#alias));
  }
};
preventAwait(AliasedRawBuilderImpl, "don't await AliasedRawBuilder instances directly. AliasedRawBuilder should never be executed directly since it's always a part of another query.");

// ../../node_modules/kysely/dist/esm/raw-builder/sql.js
init_esm();
var sql = Object.assign((sqlFragments, ...parameters) => {
  return createRawBuilder({
    queryId: createQueryId(),
    rawNode: RawNode.create(sqlFragments, parameters?.map(parseValueExpression) ?? [])
  });
}, {
  ref(columnReference) {
    return createRawBuilder({
      queryId: createQueryId(),
      rawNode: RawNode.createWithChild(parseStringReference(columnReference))
    });
  },
  val(value) {
    return createRawBuilder({
      queryId: createQueryId(),
      rawNode: RawNode.createWithChild(parseValueExpression(value))
    });
  },
  value(value) {
    return this.val(value);
  },
  table(tableReference) {
    return createRawBuilder({
      queryId: createQueryId(),
      rawNode: RawNode.createWithChild(parseTable(tableReference))
    });
  },
  id(...ids) {
    const fragments = new Array(ids.length + 1).fill(".");
    fragments[0] = "";
    fragments[fragments.length - 1] = "";
    return createRawBuilder({
      queryId: createQueryId(),
      rawNode: RawNode.create(fragments, ids.map(IdentifierNode.create))
    });
  },
  lit(value) {
    return createRawBuilder({
      queryId: createQueryId(),
      rawNode: RawNode.createWithChild(ValueNode.createImmediate(value))
    });
  },
  literal(value) {
    return this.lit(value);
  },
  raw(sql2) {
    return createRawBuilder({
      queryId: createQueryId(),
      rawNode: RawNode.createWithSql(sql2)
    });
  },
  join(array, separator = sql`, `) {
    const nodes = new Array(2 * array.length - 1);
    const sep = separator.toOperationNode();
    for (let i3 = 0; i3 < array.length; ++i3) {
      nodes[2 * i3] = parseValueExpression(array[i3]);
      if (i3 !== array.length - 1) {
        nodes[2 * i3 + 1] = sep;
      }
    }
    return createRawBuilder({
      queryId: createQueryId(),
      rawNode: RawNode.createWithChildren(nodes)
    });
  }
});

// ../../node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js
init_esm();

// ../../node_modules/kysely/dist/esm/operation-node/operation-node-visitor.js
init_esm();
var OperationNodeVisitor = class {
  nodeStack = [];
  get parentNode() {
    return this.nodeStack[this.nodeStack.length - 2];
  }
  #visitors = freeze({
    AliasNode: this.visitAlias.bind(this),
    ColumnNode: this.visitColumn.bind(this),
    IdentifierNode: this.visitIdentifier.bind(this),
    SchemableIdentifierNode: this.visitSchemableIdentifier.bind(this),
    RawNode: this.visitRaw.bind(this),
    ReferenceNode: this.visitReference.bind(this),
    SelectQueryNode: this.visitSelectQuery.bind(this),
    SelectionNode: this.visitSelection.bind(this),
    TableNode: this.visitTable.bind(this),
    FromNode: this.visitFrom.bind(this),
    SelectAllNode: this.visitSelectAll.bind(this),
    AndNode: this.visitAnd.bind(this),
    OrNode: this.visitOr.bind(this),
    ValueNode: this.visitValue.bind(this),
    ValueListNode: this.visitValueList.bind(this),
    PrimitiveValueListNode: this.visitPrimitiveValueList.bind(this),
    ParensNode: this.visitParens.bind(this),
    JoinNode: this.visitJoin.bind(this),
    OperatorNode: this.visitOperator.bind(this),
    WhereNode: this.visitWhere.bind(this),
    InsertQueryNode: this.visitInsertQuery.bind(this),
    DeleteQueryNode: this.visitDeleteQuery.bind(this),
    ReturningNode: this.visitReturning.bind(this),
    CreateTableNode: this.visitCreateTable.bind(this),
    AddColumnNode: this.visitAddColumn.bind(this),
    ColumnDefinitionNode: this.visitColumnDefinition.bind(this),
    DropTableNode: this.visitDropTable.bind(this),
    DataTypeNode: this.visitDataType.bind(this),
    OrderByNode: this.visitOrderBy.bind(this),
    OrderByItemNode: this.visitOrderByItem.bind(this),
    GroupByNode: this.visitGroupBy.bind(this),
    GroupByItemNode: this.visitGroupByItem.bind(this),
    UpdateQueryNode: this.visitUpdateQuery.bind(this),
    ColumnUpdateNode: this.visitColumnUpdate.bind(this),
    LimitNode: this.visitLimit.bind(this),
    OffsetNode: this.visitOffset.bind(this),
    OnConflictNode: this.visitOnConflict.bind(this),
    OnDuplicateKeyNode: this.visitOnDuplicateKey.bind(this),
    CreateIndexNode: this.visitCreateIndex.bind(this),
    DropIndexNode: this.visitDropIndex.bind(this),
    ListNode: this.visitList.bind(this),
    PrimaryKeyConstraintNode: this.visitPrimaryKeyConstraint.bind(this),
    UniqueConstraintNode: this.visitUniqueConstraint.bind(this),
    ReferencesNode: this.visitReferences.bind(this),
    CheckConstraintNode: this.visitCheckConstraint.bind(this),
    WithNode: this.visitWith.bind(this),
    CommonTableExpressionNode: this.visitCommonTableExpression.bind(this),
    CommonTableExpressionNameNode: this.visitCommonTableExpressionName.bind(this),
    HavingNode: this.visitHaving.bind(this),
    CreateSchemaNode: this.visitCreateSchema.bind(this),
    DropSchemaNode: this.visitDropSchema.bind(this),
    AlterTableNode: this.visitAlterTable.bind(this),
    DropColumnNode: this.visitDropColumn.bind(this),
    RenameColumnNode: this.visitRenameColumn.bind(this),
    AlterColumnNode: this.visitAlterColumn.bind(this),
    ModifyColumnNode: this.visitModifyColumn.bind(this),
    AddConstraintNode: this.visitAddConstraint.bind(this),
    DropConstraintNode: this.visitDropConstraint.bind(this),
    ForeignKeyConstraintNode: this.visitForeignKeyConstraint.bind(this),
    CreateViewNode: this.visitCreateView.bind(this),
    DropViewNode: this.visitDropView.bind(this),
    GeneratedNode: this.visitGenerated.bind(this),
    DefaultValueNode: this.visitDefaultValue.bind(this),
    OnNode: this.visitOn.bind(this),
    ValuesNode: this.visitValues.bind(this),
    SelectModifierNode: this.visitSelectModifier.bind(this),
    CreateTypeNode: this.visitCreateType.bind(this),
    DropTypeNode: this.visitDropType.bind(this),
    ExplainNode: this.visitExplain.bind(this),
    DefaultInsertValueNode: this.visitDefaultInsertValue.bind(this),
    AggregateFunctionNode: this.visitAggregateFunction.bind(this),
    OverNode: this.visitOver.bind(this),
    PartitionByNode: this.visitPartitionBy.bind(this),
    PartitionByItemNode: this.visitPartitionByItem.bind(this),
    SetOperationNode: this.visitSetOperation.bind(this),
    BinaryOperationNode: this.visitBinaryOperation.bind(this),
    UnaryOperationNode: this.visitUnaryOperation.bind(this),
    UsingNode: this.visitUsing.bind(this),
    FunctionNode: this.visitFunction.bind(this),
    CaseNode: this.visitCase.bind(this),
    WhenNode: this.visitWhen.bind(this),
    JSONReferenceNode: this.visitJSONReference.bind(this),
    JSONPathNode: this.visitJSONPath.bind(this),
    JSONPathLegNode: this.visitJSONPathLeg.bind(this),
    JSONOperatorChainNode: this.visitJSONOperatorChain.bind(this),
    TupleNode: this.visitTuple.bind(this)
  });
  visitNode = (node) => {
    this.nodeStack.push(node);
    this.#visitors[node.kind](node);
    this.nodeStack.pop();
  };
};

// ../../node_modules/kysely/dist/esm/query-compiler/default-query-compiler.js
var DefaultQueryCompiler = class extends OperationNodeVisitor {
  #sql = "";
  #parameters = [];
  get numParameters() {
    return this.#parameters.length;
  }
  compileQuery(node) {
    this.#sql = "";
    this.#parameters = [];
    this.visitNode(node);
    return freeze({
      query: node,
      sql: this.getSql(),
      parameters: [...this.#parameters]
    });
  }
  getSql() {
    return this.#sql;
  }
  visitSelectQuery(node) {
    const wrapInParens = this.parentNode !== void 0 && !ParensNode.is(this.parentNode) && !InsertQueryNode.is(this.parentNode) && !CreateViewNode.is(this.parentNode) && !SetOperationNode.is(this.parentNode);
    if (this.parentNode === void 0 && node.explain) {
      this.visitNode(node.explain);
      this.append(" ");
    }
    if (wrapInParens) {
      this.append("(");
    }
    if (node.with) {
      this.visitNode(node.with);
      this.append(" ");
    }
    this.append("select");
    if (node.distinctOn) {
      this.append(" ");
      this.compileDistinctOn(node.distinctOn);
    }
    if (node.frontModifiers?.length) {
      this.append(" ");
      this.compileList(node.frontModifiers, " ");
    }
    if (node.selections) {
      this.append(" ");
      this.compileList(node.selections);
    }
    if (node.from) {
      this.append(" ");
      this.visitNode(node.from);
    }
    if (node.joins) {
      this.append(" ");
      this.compileList(node.joins, " ");
    }
    if (node.where) {
      this.append(" ");
      this.visitNode(node.where);
    }
    if (node.groupBy) {
      this.append(" ");
      this.visitNode(node.groupBy);
    }
    if (node.having) {
      this.append(" ");
      this.visitNode(node.having);
    }
    if (node.setOperations) {
      this.append(" ");
      this.compileList(node.setOperations, " ");
    }
    if (node.orderBy) {
      this.append(" ");
      this.visitNode(node.orderBy);
    }
    if (node.limit) {
      this.append(" ");
      this.visitNode(node.limit);
    }
    if (node.offset) {
      this.append(" ");
      this.visitNode(node.offset);
    }
    if (node.endModifiers?.length) {
      this.append(" ");
      this.compileList(this.sortSelectModifiers([...node.endModifiers]), " ");
    }
    if (wrapInParens) {
      this.append(")");
    }
  }
  visitFrom(node) {
    this.append("from ");
    this.compileList(node.froms);
  }
  visitSelection(node) {
    this.visitNode(node.selection);
  }
  visitColumn(node) {
    this.visitNode(node.column);
  }
  compileDistinctOn(expressions) {
    this.append("distinct on (");
    this.compileList(expressions);
    this.append(")");
  }
  compileList(nodes, separator = ", ") {
    const lastIndex = nodes.length - 1;
    for (let i3 = 0; i3 <= lastIndex; i3++) {
      this.visitNode(nodes[i3]);
      if (i3 < lastIndex) {
        this.append(separator);
      }
    }
  }
  visitWhere(node) {
    this.append("where ");
    this.visitNode(node.where);
  }
  visitHaving(node) {
    this.append("having ");
    this.visitNode(node.having);
  }
  visitInsertQuery(node) {
    const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;
    if (!isSubQuery && node.explain) {
      this.visitNode(node.explain);
      this.append(" ");
    }
    if (isSubQuery) {
      this.append("(");
    }
    if (node.with) {
      this.visitNode(node.with);
      this.append(" ");
    }
    this.append(node.replace ? "replace" : "insert");
    if (node.ignore) {
      this.append(" ignore");
    }
    this.append(" into ");
    this.visitNode(node.into);
    if (node.columns) {
      this.append(" (");
      this.compileList(node.columns);
      this.append(")");
    }
    if (node.values) {
      this.append(" ");
      this.visitNode(node.values);
    }
    if (node.onConflict) {
      this.append(" ");
      this.visitNode(node.onConflict);
    }
    if (node.onDuplicateKey) {
      this.append(" ");
      this.visitNode(node.onDuplicateKey);
    }
    if (node.returning) {
      this.append(" ");
      this.visitNode(node.returning);
    }
    if (isSubQuery) {
      this.append(")");
    }
  }
  visitValues(node) {
    this.append("values ");
    this.compileList(node.values);
  }
  visitDeleteQuery(node) {
    const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;
    if (!isSubQuery && node.explain) {
      this.visitNode(node.explain);
      this.append(" ");
    }
    if (isSubQuery) {
      this.append("(");
    }
    if (node.with) {
      this.visitNode(node.with);
      this.append(" ");
    }
    this.append("delete ");
    this.visitNode(node.from);
    if (node.using) {
      this.append(" ");
      this.visitNode(node.using);
    }
    if (node.joins) {
      this.append(" ");
      this.compileList(node.joins, " ");
    }
    if (node.where) {
      this.append(" ");
      this.visitNode(node.where);
    }
    if (node.orderBy) {
      this.append(" ");
      this.visitNode(node.orderBy);
    }
    if (node.limit) {
      this.append(" ");
      this.visitNode(node.limit);
    }
    if (node.returning) {
      this.append(" ");
      this.visitNode(node.returning);
    }
    if (isSubQuery) {
      this.append(")");
    }
  }
  visitReturning(node) {
    this.append("returning ");
    this.compileList(node.selections);
  }
  visitAlias(node) {
    this.visitNode(node.node);
    this.append(" as ");
    this.visitNode(node.alias);
  }
  visitReference(node) {
    if (node.table) {
      this.visitNode(node.table);
      this.append(".");
    }
    this.visitNode(node.column);
  }
  visitSelectAll(_3) {
    this.append("*");
  }
  visitIdentifier(node) {
    this.append(this.getLeftIdentifierWrapper());
    this.compileUnwrappedIdentifier(node);
    this.append(this.getRightIdentifierWrapper());
  }
  compileUnwrappedIdentifier(node) {
    if (!isString(node.name)) {
      throw new Error("a non-string identifier was passed to compileUnwrappedIdentifier.");
    }
    this.append(this.sanitizeIdentifier(node.name));
  }
  visitAnd(node) {
    this.visitNode(node.left);
    this.append(" and ");
    this.visitNode(node.right);
  }
  visitOr(node) {
    this.visitNode(node.left);
    this.append(" or ");
    this.visitNode(node.right);
  }
  visitValue(node) {
    if (node.immediate) {
      this.appendImmediateValue(node.value);
    } else {
      this.appendValue(node.value);
    }
  }
  visitValueList(node) {
    this.append("(");
    this.compileList(node.values);
    this.append(")");
  }
  visitTuple(node) {
    this.append("(");
    this.compileList(node.values);
    this.append(")");
  }
  visitPrimitiveValueList(node) {
    this.append("(");
    const { values } = node;
    for (let i3 = 0; i3 < values.length; ++i3) {
      this.appendValue(values[i3]);
      if (i3 !== values.length - 1) {
        this.append(", ");
      }
    }
    this.append(")");
  }
  visitParens(node) {
    this.append("(");
    this.visitNode(node.node);
    this.append(")");
  }
  visitJoin(node) {
    this.append(JOIN_TYPE_SQL[node.joinType]);
    this.append(" ");
    this.visitNode(node.table);
    if (node.on) {
      this.append(" ");
      this.visitNode(node.on);
    }
  }
  visitOn(node) {
    this.append("on ");
    this.visitNode(node.on);
  }
  visitRaw(node) {
    const { sqlFragments, parameters: params } = node;
    for (let i3 = 0; i3 < sqlFragments.length; ++i3) {
      this.append(sqlFragments[i3]);
      if (params.length > i3) {
        this.visitNode(params[i3]);
      }
    }
  }
  visitOperator(node) {
    this.append(node.operator);
  }
  visitTable(node) {
    this.visitNode(node.table);
  }
  visitSchemableIdentifier(node) {
    if (node.schema) {
      this.visitNode(node.schema);
      this.append(".");
    }
    this.visitNode(node.identifier);
  }
  visitCreateTable(node) {
    this.append("create ");
    if (node.frontModifiers && node.frontModifiers.length > 0) {
      this.compileList(node.frontModifiers, " ");
      this.append(" ");
    }
    if (node.temporary) {
      this.append("temporary ");
    }
    this.append("table ");
    if (node.ifNotExists) {
      this.append("if not exists ");
    }
    this.visitNode(node.table);
    this.append(" (");
    this.compileList([...node.columns, ...node.constraints ?? []]);
    this.append(")");
    if (node.onCommit) {
      this.append(" on commit ");
      this.append(node.onCommit);
    }
    if (node.endModifiers && node.endModifiers.length > 0) {
      this.append(" ");
      this.compileList(node.endModifiers, " ");
    }
  }
  visitColumnDefinition(node) {
    this.visitNode(node.column);
    this.append(" ");
    this.visitNode(node.dataType);
    if (node.unsigned) {
      this.append(" unsigned");
    }
    if (node.frontModifiers && node.frontModifiers.length > 0) {
      this.append(" ");
      this.compileList(node.frontModifiers, " ");
    }
    if (node.generated) {
      this.append(" ");
      this.visitNode(node.generated);
    }
    if (node.defaultTo) {
      this.append(" ");
      this.visitNode(node.defaultTo);
    }
    if (node.notNull) {
      this.append(" not null");
    }
    if (node.unique) {
      this.append(" unique");
    }
    if (node.primaryKey) {
      this.append(" primary key");
    }
    if (node.autoIncrement) {
      this.append(" ");
      this.append(this.getAutoIncrement());
    }
    if (node.references) {
      this.append(" ");
      this.visitNode(node.references);
    }
    if (node.check) {
      this.append(" ");
      this.visitNode(node.check);
    }
    if (node.endModifiers && node.endModifiers.length > 0) {
      this.append(" ");
      this.compileList(node.endModifiers, " ");
    }
  }
  getAutoIncrement() {
    return "auto_increment";
  }
  visitReferences(node) {
    this.append("references ");
    this.visitNode(node.table);
    this.append(" (");
    this.compileList(node.columns);
    this.append(")");
    if (node.onDelete) {
      this.append(" on delete ");
      this.append(node.onDelete);
    }
    if (node.onUpdate) {
      this.append(" on update ");
      this.append(node.onUpdate);
    }
  }
  visitDropTable(node) {
    this.append("drop table ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.table);
    if (node.cascade) {
      this.append(" cascade");
    }
  }
  visitDataType(node) {
    this.append(node.dataType);
  }
  visitOrderBy(node) {
    this.append("order by ");
    this.compileList(node.items);
  }
  visitOrderByItem(node) {
    this.visitNode(node.orderBy);
    if (node.direction) {
      this.append(" ");
      this.visitNode(node.direction);
    }
  }
  visitGroupBy(node) {
    this.append("group by ");
    this.compileList(node.items);
  }
  visitGroupByItem(node) {
    this.visitNode(node.groupBy);
  }
  visitUpdateQuery(node) {
    const isSubQuery = this.nodeStack.find(QueryNode.is) !== node;
    if (!isSubQuery && node.explain) {
      this.visitNode(node.explain);
      this.append(" ");
    }
    if (isSubQuery) {
      this.append("(");
    }
    if (node.with) {
      this.visitNode(node.with);
      this.append(" ");
    }
    this.append("update ");
    this.visitNode(node.table);
    this.append(" set ");
    if (node.updates) {
      this.compileList(node.updates);
    }
    if (node.from) {
      this.append(" ");
      this.visitNode(node.from);
    }
    if (node.joins) {
      this.append(" ");
      this.compileList(node.joins, " ");
    }
    if (node.where) {
      this.append(" ");
      this.visitNode(node.where);
    }
    if (node.returning) {
      this.append(" ");
      this.visitNode(node.returning);
    }
    if (isSubQuery) {
      this.append(")");
    }
  }
  visitColumnUpdate(node) {
    this.visitNode(node.column);
    this.append(" = ");
    this.visitNode(node.value);
  }
  visitLimit(node) {
    this.append("limit ");
    this.visitNode(node.limit);
  }
  visitOffset(node) {
    this.append("offset ");
    this.visitNode(node.offset);
  }
  visitOnConflict(node) {
    this.append("on conflict");
    if (node.columns) {
      this.append(" (");
      this.compileList(node.columns);
      this.append(")");
    } else if (node.constraint) {
      this.append(" on constraint ");
      this.visitNode(node.constraint);
    } else if (node.indexExpression) {
      this.append(" (");
      this.visitNode(node.indexExpression);
      this.append(")");
    }
    if (node.indexWhere) {
      this.append(" ");
      this.visitNode(node.indexWhere);
    }
    if (node.doNothing === true) {
      this.append(" do nothing");
    } else if (node.updates) {
      this.append(" do update set ");
      this.compileList(node.updates);
      if (node.updateWhere) {
        this.append(" ");
        this.visitNode(node.updateWhere);
      }
    }
  }
  visitOnDuplicateKey(node) {
    this.append("on duplicate key update ");
    this.compileList(node.updates);
  }
  visitCreateIndex(node) {
    this.append("create ");
    if (node.unique) {
      this.append("unique ");
    }
    this.append("index ");
    if (node.ifNotExists) {
      this.append("if not exists ");
    }
    this.visitNode(node.name);
    if (node.table) {
      this.append(" on ");
      this.visitNode(node.table);
    }
    if (node.using) {
      this.append(" using ");
      this.visitNode(node.using);
    }
    if (node.columns) {
      this.append(" (");
      this.compileList(node.columns);
      this.append(")");
    }
    if (node.where) {
      this.append(" ");
      this.visitNode(node.where);
    }
  }
  visitDropIndex(node) {
    this.append("drop index ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.name);
    if (node.table) {
      this.append(" on ");
      this.visitNode(node.table);
    }
    if (node.cascade) {
      this.append(" cascade");
    }
  }
  visitCreateSchema(node) {
    this.append("create schema ");
    if (node.ifNotExists) {
      this.append("if not exists ");
    }
    this.visitNode(node.schema);
  }
  visitDropSchema(node) {
    this.append("drop schema ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.schema);
    if (node.cascade) {
      this.append(" cascade");
    }
  }
  visitPrimaryKeyConstraint(node) {
    if (node.name) {
      this.append("constraint ");
      this.visitNode(node.name);
      this.append(" ");
    }
    this.append("primary key (");
    this.compileList(node.columns);
    this.append(")");
  }
  visitUniqueConstraint(node) {
    if (node.name) {
      this.append("constraint ");
      this.visitNode(node.name);
      this.append(" ");
    }
    this.append("unique (");
    this.compileList(node.columns);
    this.append(")");
  }
  visitCheckConstraint(node) {
    if (node.name) {
      this.append("constraint ");
      this.visitNode(node.name);
      this.append(" ");
    }
    this.append("check (");
    this.visitNode(node.expression);
    this.append(")");
  }
  visitForeignKeyConstraint(node) {
    if (node.name) {
      this.append("constraint ");
      this.visitNode(node.name);
      this.append(" ");
    }
    this.append("foreign key (");
    this.compileList(node.columns);
    this.append(") ");
    this.visitNode(node.references);
    if (node.onDelete) {
      this.append(" on delete ");
      this.append(node.onDelete);
    }
    if (node.onUpdate) {
      this.append(" on update ");
      this.append(node.onUpdate);
    }
  }
  visitList(node) {
    this.compileList(node.items);
  }
  visitWith(node) {
    this.append("with ");
    if (node.recursive) {
      this.append("recursive ");
    }
    this.compileList(node.expressions);
  }
  visitCommonTableExpression(node) {
    this.visitNode(node.name);
    this.append(" as ");
    if (isBoolean(node.materialized)) {
      if (!node.materialized) {
        this.append("not ");
      }
      this.append("materialized ");
    }
    this.visitNode(node.expression);
  }
  visitCommonTableExpressionName(node) {
    this.visitNode(node.table);
    if (node.columns) {
      this.append("(");
      this.compileList(node.columns);
      this.append(")");
    }
  }
  visitAlterTable(node) {
    this.append("alter table ");
    this.visitNode(node.table);
    this.append(" ");
    if (node.renameTo) {
      this.append("rename to ");
      this.visitNode(node.renameTo);
    }
    if (node.setSchema) {
      this.append("set schema ");
      this.visitNode(node.setSchema);
    }
    if (node.addConstraint) {
      this.visitNode(node.addConstraint);
    }
    if (node.dropConstraint) {
      this.visitNode(node.dropConstraint);
    }
    if (node.columnAlterations) {
      this.compileList(node.columnAlterations);
    }
  }
  visitAddColumn(node) {
    this.append("add column ");
    this.visitNode(node.column);
  }
  visitRenameColumn(node) {
    this.append("rename column ");
    this.visitNode(node.column);
    this.append(" to ");
    this.visitNode(node.renameTo);
  }
  visitDropColumn(node) {
    this.append("drop column ");
    this.visitNode(node.column);
  }
  visitAlterColumn(node) {
    this.append("alter column ");
    this.visitNode(node.column);
    this.append(" ");
    if (node.dataType) {
      this.append("type ");
      this.visitNode(node.dataType);
      if (node.dataTypeExpression) {
        this.append("using ");
        this.visitNode(node.dataTypeExpression);
      }
    }
    if (node.setDefault) {
      this.append("set default ");
      this.visitNode(node.setDefault);
    }
    if (node.dropDefault) {
      this.append("drop default");
    }
    if (node.setNotNull) {
      this.append("set not null");
    }
    if (node.dropNotNull) {
      this.append("drop not null");
    }
  }
  visitModifyColumn(node) {
    this.append("modify column ");
    this.visitNode(node.column);
  }
  visitAddConstraint(node) {
    this.append("add ");
    this.visitNode(node.constraint);
  }
  visitDropConstraint(node) {
    this.append("drop constraint ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.constraintName);
    if (node.modifier === "cascade") {
      this.append(" cascade");
    } else if (node.modifier === "restrict") {
      this.append(" restrict");
    }
  }
  visitSetOperation(node) {
    this.append(node.operator);
    this.append(" ");
    if (node.all) {
      this.append("all ");
    }
    this.visitNode(node.expression);
  }
  visitCreateView(node) {
    this.append("create ");
    if (node.orReplace) {
      this.append("or replace ");
    }
    if (node.materialized) {
      this.append("materialized ");
    }
    if (node.temporary) {
      this.append("temporary ");
    }
    this.append("view ");
    if (node.ifNotExists) {
      this.append("if not exists ");
    }
    this.visitNode(node.name);
    this.append(" ");
    if (node.columns) {
      this.append("(");
      this.compileList(node.columns);
      this.append(") ");
    }
    if (node.as) {
      this.append("as ");
      this.visitNode(node.as);
    }
  }
  visitDropView(node) {
    this.append("drop ");
    if (node.materialized) {
      this.append("materialized ");
    }
    this.append("view ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.name);
    if (node.cascade) {
      this.append(" cascade");
    }
  }
  visitGenerated(node) {
    this.append("generated ");
    if (node.always) {
      this.append("always ");
    }
    if (node.byDefault) {
      this.append("by default ");
    }
    this.append("as ");
    if (node.identity) {
      this.append("identity");
    }
    if (node.expression) {
      this.append("(");
      this.visitNode(node.expression);
      this.append(")");
    }
    if (node.stored) {
      this.append(" stored");
    }
  }
  visitDefaultValue(node) {
    this.append("default ");
    this.visitNode(node.defaultValue);
  }
  visitSelectModifier(node) {
    if (node.rawModifier) {
      this.visitNode(node.rawModifier);
    } else {
      this.append(SELECT_MODIFIER_SQL[node.modifier]);
    }
  }
  visitCreateType(node) {
    this.append("create type ");
    this.visitNode(node.name);
    if (node.enum) {
      this.append(" as enum ");
      this.visitNode(node.enum);
    }
  }
  visitDropType(node) {
    this.append("drop type ");
    if (node.ifExists) {
      this.append("if exists ");
    }
    this.visitNode(node.name);
  }
  visitExplain(node) {
    this.append("explain");
    if (node.options || node.format) {
      this.append(" ");
      this.append(this.getLeftExplainOptionsWrapper());
      if (node.options) {
        this.visitNode(node.options);
        if (node.format) {
          this.append(this.getExplainOptionsDelimiter());
        }
      }
      if (node.format) {
        this.append("format");
        this.append(this.getExplainOptionAssignment());
        this.append(node.format);
      }
      this.append(this.getRightExplainOptionsWrapper());
    }
  }
  visitDefaultInsertValue(_3) {
    this.append("default");
  }
  visitAggregateFunction(node) {
    this.append(node.func);
    this.append("(");
    if (node.distinct) {
      this.append("distinct ");
    }
    this.compileList(node.aggregated);
    this.append(")");
    if (node.filter) {
      this.append(" filter(");
      this.visitNode(node.filter);
      this.append(")");
    }
    if (node.over) {
      this.append(" ");
      this.visitNode(node.over);
    }
  }
  visitOver(node) {
    this.append("over(");
    if (node.partitionBy) {
      this.visitNode(node.partitionBy);
      if (node.orderBy) {
        this.append(" ");
      }
    }
    if (node.orderBy) {
      this.visitNode(node.orderBy);
    }
    this.append(")");
  }
  visitPartitionBy(node) {
    this.append("partition by ");
    this.compileList(node.items);
  }
  visitPartitionByItem(node) {
    this.visitNode(node.partitionBy);
  }
  visitBinaryOperation(node) {
    this.visitNode(node.leftOperand);
    this.append(" ");
    this.visitNode(node.operator);
    this.append(" ");
    this.visitNode(node.rightOperand);
  }
  visitUnaryOperation(node) {
    this.visitNode(node.operator);
    if (!this.isMinusOperator(node.operator)) {
      this.append(" ");
    }
    this.visitNode(node.operand);
  }
  isMinusOperator(node) {
    return OperatorNode.is(node) && node.operator === "-";
  }
  visitUsing(node) {
    this.append("using ");
    this.compileList(node.tables);
  }
  visitFunction(node) {
    this.append(node.func);
    this.append("(");
    this.compileList(node.arguments);
    this.append(")");
  }
  visitCase(node) {
    this.append("case");
    if (node.value) {
      this.append(" ");
      this.visitNode(node.value);
    }
    if (node.when) {
      this.append(" ");
      this.compileList(node.when, " ");
    }
    if (node.else) {
      this.append(" else ");
      this.visitNode(node.else);
    }
    this.append(" end");
    if (node.isStatement) {
      this.append(" case");
    }
  }
  visitWhen(node) {
    this.append("when ");
    this.visitNode(node.condition);
    if (node.result) {
      this.append(" then ");
      this.visitNode(node.result);
    }
  }
  visitJSONReference(node) {
    this.visitNode(node.reference);
    this.visitNode(node.traversal);
  }
  visitJSONPath(node) {
    if (node.inOperator) {
      this.visitNode(node.inOperator);
    }
    this.append("'$");
    for (const pathLeg of node.pathLegs) {
      this.visitNode(pathLeg);
    }
    this.append("'");
  }
  visitJSONPathLeg(node) {
    const isArrayLocation = node.type === "ArrayLocation";
    this.append(isArrayLocation ? "[" : ".");
    this.append(String(node.value));
    if (isArrayLocation) {
      this.append("]");
    }
  }
  visitJSONOperatorChain(node) {
    for (let i3 = 0, len = node.values.length; i3 < len; i3++) {
      if (i3 === len - 1) {
        this.visitNode(node.operator);
      } else {
        this.append("->");
      }
      this.visitNode(node.values[i3]);
    }
  }
  append(str) {
    this.#sql += str;
  }
  appendValue(parameter) {
    this.addParameter(parameter);
    this.append(this.getCurrentParameterPlaceholder());
  }
  getLeftIdentifierWrapper() {
    return '"';
  }
  getRightIdentifierWrapper() {
    return '"';
  }
  getCurrentParameterPlaceholder() {
    return "$" + this.numParameters;
  }
  getLeftExplainOptionsWrapper() {
    return "(";
  }
  getExplainOptionAssignment() {
    return " ";
  }
  getExplainOptionsDelimiter() {
    return ", ";
  }
  getRightExplainOptionsWrapper() {
    return ")";
  }
  sanitizeIdentifier(identifier) {
    const leftWrap = this.getLeftIdentifierWrapper();
    const rightWrap = this.getRightIdentifierWrapper();
    let sanitized = "";
    for (const c3 of identifier) {
      sanitized += c3;
      if (c3 === leftWrap) {
        sanitized += leftWrap;
      } else if (c3 === rightWrap) {
        sanitized += rightWrap;
      }
    }
    return sanitized;
  }
  addParameter(parameter) {
    this.#parameters.push(parameter);
  }
  appendImmediateValue(value) {
    if (isString(value)) {
      this.append(`'${value}'`);
    } else if (isNumber(value) || isBoolean(value)) {
      this.append(value.toString());
    } else if (isNull(value)) {
      this.append("null");
    } else if (isDate(value)) {
      this.appendImmediateValue(value.toISOString());
    } else if (isBigInt(value)) {
      this.appendImmediateValue(value.toString());
    } else {
      throw new Error(`invalid immediate value ${value}`);
    }
  }
  sortSelectModifiers(arr) {
    arr.sort((left, right) => left.modifier && right.modifier ? SELECT_MODIFIER_PRIORITY[left.modifier] - SELECT_MODIFIER_PRIORITY[right.modifier] : 1);
    return freeze(arr);
  }
};
var SELECT_MODIFIER_SQL = freeze({
  ForKeyShare: "for key share",
  ForNoKeyUpdate: "for no key update",
  ForUpdate: "for update",
  ForShare: "for share",
  NoWait: "nowait",
  SkipLocked: "skip locked",
  Distinct: "distinct"
});
var SELECT_MODIFIER_PRIORITY = freeze({
  ForKeyShare: 1,
  ForNoKeyUpdate: 1,
  ForUpdate: 1,
  ForShare: 1,
  NoWait: 2,
  SkipLocked: 2,
  Distinct: 0
});
var JOIN_TYPE_SQL = freeze({
  InnerJoin: "inner join",
  LeftJoin: "left join",
  RightJoin: "right join",
  FullJoin: "full join",
  LateralInnerJoin: "inner join lateral",
  LateralLeftJoin: "left join lateral"
});

// ../../node_modules/kysely/dist/esm/dialect/dialect-adapter-base.js
init_esm();
var DialectAdapterBase = class {
  get supportsTransactionalDdl() {
    return false;
  }
  get supportsReturning() {
    return false;
  }
};

// ../../node_modules/kysely/dist/esm/migration/migrator.js
init_esm();
var DEFAULT_MIGRATION_TABLE = "kysely_migration";
var DEFAULT_MIGRATION_LOCK_TABLE = "kysely_migration_lock";
var NO_MIGRATIONS = freeze({ __noMigrations__: true });

// ../../node_modules/kysely/dist/esm/dialect/postgres/postgres-query-compiler.js
init_esm();
var ID_WRAP_REGEX = /"/g;
var PostgresQueryCompiler = class extends DefaultQueryCompiler {
  sanitizeIdentifier(identifier) {
    return identifier.replace(ID_WRAP_REGEX, '""');
  }
};

// ../../node_modules/kysely/dist/esm/dialect/postgres/postgres-introspector.js
init_esm();
var PostgresIntrospector = class {
  #db;
  constructor(db) {
    this.#db = db;
  }
  async getSchemas() {
    let rawSchemas = await this.#db.selectFrom("pg_catalog.pg_namespace").select("nspname").$castTo().execute();
    return rawSchemas.map((it2) => ({ name: it2.nspname }));
  }
  async getTables(options = { withInternalKyselyTables: false }) {
    let query = this.#db.selectFrom("pg_catalog.pg_attribute as a").innerJoin("pg_catalog.pg_class as c", "a.attrelid", "c.oid").innerJoin("pg_catalog.pg_namespace as ns", "c.relnamespace", "ns.oid").innerJoin("pg_catalog.pg_type as typ", "a.atttypid", "typ.oid").innerJoin("pg_catalog.pg_namespace as dtns", "typ.typnamespace", "dtns.oid").select([
      "a.attname as column",
      "a.attnotnull as not_null",
      "a.atthasdef as has_default",
      "c.relname as table",
      "c.relkind as table_type",
      "ns.nspname as schema",
      "typ.typname as type",
      "dtns.nspname as type_schema",
      // Detect if the column is auto incrementing by finding the sequence
      // that is created for `serial` and `bigserial` columns.
      this.#db.selectFrom("pg_class").select(sql`true`.as("auto_incrementing")).whereRef("relnamespace", "=", "c.relnamespace").where("relkind", "=", "S").where("relname", "=", sql`c.relname || '_' || a.attname || '_seq'`).as("auto_incrementing")
    ]).where((eb) => eb.or([eb("c.relkind", "=", "r"), eb("c.relkind", "=", "v")])).where("ns.nspname", "!~", "^pg_").where("ns.nspname", "!=", "information_schema").where("a.attnum", ">=", 0).where("a.attisdropped", "!=", true).orderBy("ns.nspname").orderBy("c.relname").orderBy("a.attnum").$castTo();
    if (!options.withInternalKyselyTables) {
      query = query.where("c.relname", "!=", DEFAULT_MIGRATION_TABLE).where("c.relname", "!=", DEFAULT_MIGRATION_LOCK_TABLE);
    }
    const rawColumns = await query.execute();
    return this.#parseTableMetadata(rawColumns);
  }
  async getMetadata(options) {
    return {
      tables: await this.getTables(options)
    };
  }
  #parseTableMetadata(columns) {
    return columns.reduce((tables, it2) => {
      let table = tables.find((tbl) => tbl.name === it2.table && tbl.schema === it2.schema);
      if (!table) {
        table = freeze({
          name: it2.table,
          isView: it2.table_type === "v",
          schema: it2.schema,
          columns: []
        });
        tables.push(table);
      }
      table.columns.push(freeze({
        name: it2.column,
        dataType: it2.type,
        dataTypeSchema: it2.type_schema,
        isNullable: !it2.not_null,
        isAutoIncrementing: !!it2.auto_incrementing,
        hasDefaultValue: it2.has_default
      }));
      return tables;
    }, []);
  }
};

// ../../node_modules/kysely/dist/esm/dialect/postgres/postgres-adapter.js
init_esm();
var LOCK_ID = BigInt("3853314791062309107");
var PostgresAdapter = class extends DialectAdapterBase {
  get supportsTransactionalDdl() {
    return true;
  }
  get supportsReturning() {
    return true;
  }
  async acquireMigrationLock(db, _opt) {
    await sql`select pg_advisory_xact_lock(${sql.lit(LOCK_ID)})`.execute(db);
  }
  async releaseMigrationLock(_db, _opt) {
  }
};

// ../../node_modules/prisma-extension-kysely/dist/esm/index.js
init_esm();
import { Prisma } from "@prisma/client";

// ../../node_modules/prisma-extension-kysely/dist/esm/driver.js
init_esm();

// ../../node_modules/prisma-extension-kysely/dist/esm/connection.js
init_esm();
var __awaiter = function(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var PrismaConnection = class {
  constructor(prisma2) {
    this.prisma = prisma2;
  }
  executeQuery(compiledQuery) {
    return __awaiter(this, void 0, void 0, function* () {
      const { sql: sql2, parameters, query } = compiledQuery;
      const supportsReturning = DeleteQueryNode.is(query) || UpdateQueryNode.is(query) || InsertQueryNode.is(query);
      const shouldReturnAffectedRows = supportsReturning && !query.returning;
      if (shouldReturnAffectedRows) {
        const numAffectedRows = BigInt(yield this.prisma.$executeRawUnsafe(sql2, ...parameters));
        return {
          rows: [],
          numAffectedRows,
          numUpdatedOrDeletedRows: numAffectedRows
        };
      }
      const rows = yield this.prisma.$queryRawUnsafe(sql2, ...parameters);
      return { rows };
    });
  }
  streamQuery(_compiledQuery, _chunkSize) {
    throw new Error("prisma-extension-kysely does not support streaming queries");
  }
};

// ../../node_modules/prisma-extension-kysely/dist/esm/driver.js
var __awaiter2 = function(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var PrismaDriver = class {
  constructor(prisma2) {
    this.prisma = prisma2;
  }
  init() {
    return __awaiter2(this, void 0, void 0, function* () {
    });
  }
  acquireConnection() {
    return __awaiter2(this, void 0, void 0, function* () {
      return new PrismaConnection(this.prisma);
    });
  }
  beginTransaction(_connection, _settings) {
    return __awaiter2(this, void 0, void 0, function* () {
      throw new Error("prisma-extension-kysely does not support transactions");
    });
  }
  commitTransaction(_connection) {
    return __awaiter2(this, void 0, void 0, function* () {
      throw new Error("prisma-extension-kysely does not support transactions");
    });
  }
  rollbackTransaction(_connection) {
    return __awaiter2(this, void 0, void 0, function* () {
      throw new Error("prisma-extension-kysely does not support transactions");
    });
  }
  releaseConnection(_connection) {
    return __awaiter2(this, void 0, void 0, function* () {
    });
  }
  destroy() {
    return __awaiter2(this, void 0, void 0, function* () {
    });
  }
};

// ../../node_modules/prisma-extension-kysely/dist/esm/index.js
var __awaiter3 = function(thisArg, _arguments, P3, generator) {
  function adopt(value) {
    return value instanceof P3 ? value : new P3(function(resolve) {
      resolve(value);
    });
  }
  return new (P3 || (P3 = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e3) {
        reject(e3);
      }
    }
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e3) {
        reject(e3);
      }
    }
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
};
var esm_default = (extensionArgs) => Prisma.defineExtension((client) => {
  const driver = new PrismaDriver(client);
  const kysely = extensionArgs.kysely(driver);
  const extendedClient = client.$extends({
    name: "prisma-extension-kysely",
    client: {
      /**
       * The Kysely instance used by the Prisma client
       */
      $kysely: kysely
    }
  });
  const kyselyTransaction = (target) => (...args) => {
    if (typeof args[0] === "function") {
      const [fn, options] = args;
      return target.$transaction((tx) => __awaiter3(void 0, void 0, void 0, function* () {
        const driver2 = new PrismaDriver(tx);
        const kysely2 = extensionArgs.kysely(driver2);
        tx.$kysely = kysely2;
        return fn(tx);
      }), options);
    } else {
      return target.$transaction(...args);
    }
  };
  const extendedClientProxy = new Proxy(extendedClient, {
    get: (target, prop, receiver) => {
      if (prop === "$transaction") {
        return kyselyTransaction(target);
      }
      return Reflect.get(target, prop, receiver);
    }
  });
  return extendedClientProxy;
});

// ../prisma/helper.ts
init_esm();
var getDatabaseUrl = () => {
  if (process.env.NEXT_PRIVATE_DATABASE_URL) {
    return process.env.NEXT_PRIVATE_DATABASE_URL;
  }
  if (process.env.POSTGRES_URL) {
    process.env.NEXT_PRIVATE_DATABASE_URL = process.env.POSTGRES_URL;
    process.env.NEXT_PRIVATE_DIRECT_DATABASE_URL = process.env.POSTGRES_URL;
  }
  if (process.env.DATABASE_URL) {
    process.env.NEXT_PRIVATE_DATABASE_URL = process.env.DATABASE_URL;
    process.env.NEXT_PRIVATE_DIRECT_DATABASE_URL = process.env.DATABASE_URL;
  }
  if (process.env.DATABASE_URL_UNPOOLED) {
    process.env.NEXT_PRIVATE_DIRECT_DATABASE_URL = process.env.DATABASE_URL_UNPOOLED;
  }
  if (process.env.POSTGRES_PRISMA_URL) {
    process.env.NEXT_PRIVATE_DATABASE_URL = process.env.POSTGRES_PRISMA_URL;
  }
  if (process.env.POSTGRES_URL_NON_POOLING) {
    process.env.NEXT_PRIVATE_DIRECT_DATABASE_URL = process.env.POSTGRES_URL_NON_POOLING;
  }
  if (!process.env.NEXT_PRIVATE_DATABASE_URL) {
    return void 0;
  }
  const url = new URL(process.env.NEXT_PRIVATE_DATABASE_URL.replace("postgres://", "https://"));
  if (process.env.NEXT_PRIVATE_DATABASE_URL !== process.env.NEXT_PRIVATE_DIRECT_DATABASE_URL) {
    url.searchParams.set("pgbouncer", "true");
    process.env.NEXT_PRIVATE_DATABASE_URL = url.toString().replace("https://", "postgres://");
  }
  return process.env.NEXT_PRIVATE_DATABASE_URL;
};

// ../prisma/utils/remember.ts
init_esm();
function remember(name, getValue) {
  const thusly = globalThis;
  if (!thusly.__prisma_remember) {
    thusly.__prisma_remember = /* @__PURE__ */ new Map();
  }
  if (!thusly.__prisma_remember.has(name)) {
    thusly.__prisma_remember.set(name, getValue());
  }
  return thusly.__prisma_remember.get(name);
}

// ../prisma/index.ts
var prisma = remember(
  "prisma",
  () => new PrismaClient({
    datasourceUrl: getDatabaseUrl()
  })
);
var kyselyPrisma = remember(
  "kyselyPrisma",
  () => prisma.$extends(
    esm_default({
      kysely: (driver) => new Kysely({
        dialect: {
          createAdapter: () => new PostgresAdapter(),
          createDriver: () => driver,
          createIntrospector: (db) => new PostgresIntrospector(db),
          createQueryCompiler: () => new PostgresQueryCompiler()
        }
      })
    })
  )
);
var prismaWithLogging = remember("prismaWithLogging", () => {
  const client = new PrismaClient({
    datasourceUrl: getDatabaseUrl(),
    log: [
      {
        emit: "event",
        level: "query"
      }
    ]
  });
  client.$on("query", (e3) => {
    console.log("query:", e3.query);
    console.log("params:", e3.params);
    console.log("duration:", e3.duration);
    const params = JSON.parse(e3.params);
    const query = e3.query.replace(/\$\d+/g, (match) => {
      const index = Number(match.replace("$", ""));
      if (index > params.length) {
        return match;
      }
      return String(params[index - 1]);
    });
    console.log("formatted query:", query);
  });
  return client;
});

// services/textparser.ts
init_esm();
var import_csv_parser = __toESM(require_csv_parser());

// ../../node_modules/pdf2json/dist/pdfparser.js
init_esm();
var import_xmldom = __toESM(require_lib(), 1);
import e2 from "fs";
import t2 from "util";
import { readFile as a } from "fs/promises";
import { EventEmitter as r2 } from "events";
import { Buffer as i2, Blob as n2 } from "buffer";
import c2 from "process";
import s2 from "console";
import { Transform as f, Readable as l } from "stream";
var h2 = "pdf2json";
var u2 = "3.1.5";
var d2 = "PDF file parser that converts PDF binaries to JSON and text, powered by porting a fork of PDF.JS to Node.js";
var g = ["pdf", "pdf parser", "pdf2json", "convert pdf to json", "convert pdf form to json", "server side PDF parser", "port pdf.js to node.js", "PDF to text", "PDF text extractor", "PDF binary to text", "PDF form extractor", "command line utility to parse pdf to json", "JSON", "javascript", "PDF canvas"];
var m2 = { name: "Modesty Zhang", email: "modestyz@hotmail.com", url: "http://www.codeproject.com/script/Articles/MemberArticles.aspx?amid=62372" };
var p2 = "https://github.com/modesty/pdf2json";
var b2 = { type: "git", url: "git://github.com/modesty/pdf2json.git" };
var v2 = "./dist/pdfparser.cjs";
var y2 = "./dist/pdfparser.js";
var k2 = "./pdfparser.d.ts";
var A2 = { pretest: "npm run build", "test:jest": "jest --config ./jest.config.json", test: "jest --config ./jest.config.json && npm run parse-r && npm run parse-fd", "test:forms": "cd ./test && sh p2j.forms.sh", "test:misc": 'cd ./test && sh p2j.one.sh misc . "Expected: 14 success, 5 fail exception with stack trace" ', parse: "./bin/pdf2json.js -f ./test/pdf/fd/form/F1040.pdf -o ./test/target/fd/form", "parse-s": "./bin/pdf2json.js -f ./test/pdf/fd/form/F1040.pdf -o ./test/target/fd/form -s", "parse-t": "./bin/pdf2json.js -f ./test/pdf/fd/form/F1040.pdf -o ./test/target/fd/form -s -t", "parse-c": "./bin/pdf2json.js -f ./test/pdf/fd/form/F1040.pdf -o ./test/target/fd/form -s -t -c", "parse-m": "./bin/pdf2json.js -f ./test/pdf/fd/form/F1040.pdf -o ./test/target/fd/form -s -t -c -m", "parse-r": "./bin/pdf2json.js -f ./test/pdf/fd/form/F1040.pdf -o ./test/target/fd/form -t -c -m -r", "parse-fd": "./bin/pdf2json.js -f ./test/pdf/fd/form/ -o ./test/target/fd/form -t -c -m -r", "parse-tb": "./bin/pdf2json.js -f ./test/pdf/misc/i242_testingWithTable.pdf -o ./test/target/misc", "parse-tc": "./bin/pdf2json.js -f ./test/pdf/misc/i293_pdfpac.pdf -o ./test/target/misc", "parse-rectFix": "./bin/pdf2json.js -f ./test/pdf/misc/pr298_rect_fix_from_upstream.pdf -o ./test/target/misc", "parse-e": "./bin/pdf2json.js -f ./test/pdf/misc/i373_err_broken.pdf -o ./test/target/misc", "build:rollup": "rollup -c ./rollup.config.js", "build:bundle-pdfjs-base": "node rollup/bundle-pdfjs-base.js", build: "npm run build:bundle-pdfjs-base && npm run build:rollup", "build:clean": "rm -rf node_modules && rm -f package-lock.json && npm i && npm run build" };
var w2 = { node: ">=20.18.0", npm: ">=10.8.2" };
var x2 = "module";
var S2 = { pdf2json: "./bin/pdf2json.js" };
var C = { "@xmldom/xmldom": "^0.9.6" };
var I2 = ["@xmldom/xmldom"];
var B2 = { "@rollup/plugin-commonjs": "^28.0.2", "@rollup/plugin-eslint": "^9.0.5", "@rollup/plugin-json": "^6.1.0", "@rollup/plugin-node-resolve": "^16.0.0", "@rollup/plugin-terser": "^0.4.4", "@rollup/plugin-typescript": "^12.1.2", "@types/node": "^22.10.2", "@typescript-eslint/eslint-plugin": "^8.18.2", "@typescript-eslint/parser": "^8.18.2", eslint: "^9.17.0", jest: "^29.7.0", rollup: "^4.29.1", "rollup-plugin-node-builtins": "^2.0.0", "rollup-plugin-sourcemaps": "^0.6.3", tslib: "^2.6.2" };
var T2 = { typescript: "5.7.0" };
var L = [{ name: "Modesty Zhang", email: "modestyz@hotmail.com", url: "http://www.codeproject.com/script/Articles/MemberArticles.aspx?amid=62372" }];
var F = [];
var P2 = { url: "http://github.com/modesty/pdf2json/issues" };
var R = "Apache-2.0";
var O = "https://github.com/modesty/pdf2json/blob/master/readme.md";
var M = { ".": { types: "./dist/pdfparser.d.ts", import: "./dist/pdfparser.js", require: "./dist/pdfparser.cjs" } };
var D = { registry: "https://registry.npmjs.com/", access: "public" };
var q = { name: h2, version: u2, description: d2, keywords: g, author: m2, homepage: p2, repository: b2, main: v2, module: y2, typings: k2, scripts: A2, engines: w2, type: x2, bin: S2, dependencies: C, bundleDependencies: I2, devDependencies: B2, resolutions: T2, maintainers: L, contributors: F, bugs: P2, license: R, readme: O, exports: M, publishConfig: D };
var E2 = Object.freeze({ __proto__: null, author: m2, bin: S2, bugs: P2, bundleDependencies: I2, contributors: F, default: q, dependencies: C, description: d2, devDependencies: B2, engines: w2, exports: M, homepage: p2, keywords: g, license: R, main: v2, maintainers: L, module: y2, name: h2, publishConfig: D, readme: O, repository: b2, resolutions: T2, scripts: A2, type: x2, typings: k2, version: u2 });
var N = `${h2}@${u2} [${p2}]`;
var j2 = ["#000000", "#ffffff", "#4c4c4c", "#808080", "#999999", "#c0c0c0", "#cccccc", "#e5e5e5", "#f2f2f2", "#008000", "#00ff00", "#bfffa0", "#ffd629", "#ff99cc", "#004080", "#9fc0e1", "#5580ff", "#a9c9fa", "#ff0080", "#800080", "#ffbfff", "#e45b21", "#ffbfaa", "#008080", "#ff0000", "#fdc59f", "#808000", "#bfbf00", "#824100", "#007256", "#008000", "#000080", "#008080", "#800080", "#ff0000", "#0000ff", "#008000"];
var U = ["quicktype,arial,helvetica,sans-serif", "quicktype condensed,arial narrow,arial,helvetica,sans-serif", "quicktypepi,quicktypeiipi", "quicktype mono,courier new,courier,monospace", "ocr-a,courier new,courier,monospace", "ocr b mt,courier new,courier,monospace"];
var z3 = [[0, 6, 0, 0], [0, 8, 0, 0], [0, 10, 0, 0], [0, 12, 0, 0], [0, 14, 0, 0], [0, 18, 0, 0], [0, 6, 1, 0], [0, 8, 1, 0], [0, 10, 1, 0], [0, 12, 1, 0], [0, 14, 1, 0], [0, 18, 1, 0], [0, 6, 0, 1], [0, 8, 0, 1], [0, 10, 0, 1], [0, 12, 0, 1], [0, 14, 0, 1], [0, 18, 0, 1], [0, 6, 1, 1], [0, 8, 1, 1], [0, 10, 1, 1], [0, 12, 1, 1], [0, 14, 1, 1], [0, 18, 1, 1], [1, 6, 0, 0], [1, 8, 0, 0], [1, 10, 0, 0], [1, 12, 0, 0], [1, 14, 0, 0], [1, 18, 0, 0], [1, 6, 1, 0], [1, 8, 1, 0], [1, 10, 1, 0], [1, 12, 1, 0], [1, 14, 1, 0], [1, 18, 1, 0], [1, 6, 0, 1], [1, 8, 0, 1], [1, 10, 0, 1], [1, 12, 0, 1], [1, 14, 0, 1], [1, 18, 0, 1], [2, 8, 0, 0], [2, 10, 0, 0], [2, 12, 0, 0], [2, 14, 0, 0], [2, 18, 0, 0], [3, 8, 0, 0], [3, 10, 0, 0], [3, 12, 0, 0], [4, 12, 0, 0], [0, 9, 0, 0], [0, 9, 1, 0], [0, 9, 0, 1], [0, 9, 1, 1], [1, 9, 0, 0], [1, 9, 1, 0], [1, 9, 1, 1], [4, 10, 0, 0], [5, 10, 0, 0], [5, 12, 0, 0]];
var H = 96 / 72;
var G = class _G {
  static toFixedFloat(e3) {
    return parseFloat(e3.toFixed(3));
  }
  static colorCount() {
    return j2.length;
  }
  static toPixelX(e3) {
    return Math.round(24 * e3);
  }
  static toPixelY(e3) {
    return Math.round(24 * e3);
  }
  static pointToPixel(e3) {
    return e3 * H;
  }
  static getColorByIndex(e3) {
    return j2[e3];
  }
  static toFormPoint(e3, t3) {
    return [e3 / 24, t3 / 24];
  }
  static toFormX(e3) {
    return _G.toFixedFloat(e3 / 24);
  }
  static toFormY(e3) {
    return _G.toFixedFloat(e3 / 24);
  }
  static findColorIndex(e3) {
    return 4 === e3.length && (e3 += "000"), j2.indexOf(e3);
  }
  static dateToIso8601(e3) {
    "D:" === e3.slice(0, 2) && (e3 = e3.slice(2));
    let t3 = "Z";
    const a2 = e3.search(/[Z+-]/);
    a2 >= 0 && (t3 = e3.slice(a2), "Z" !== t3 && (t3 = `${t3.slice(0, 3)}:${t3.slice(4, 6)}`), e3 = e3.slice(0, a2));
    return `${e3.slice(0, 4)}-${e3.slice(4, 6) || "01"}-${e3.slice(6, 8) || "01"}T${e3.slice(8, 10) || "00"}:${e3.slice(10, 12) || "00"}:${e3.slice(12, 14) || "00"}${t3}`;
  }
};
var _2 = class __ {
  static tabIndex = 0;
  static isWidgetSupported(e3) {
    let a2 = false;
    switch (e3.fieldType) {
      case "Tx":
      case "Ch":
      case "Sig":
        a2 = true;
        break;
      case "Btn":
        32768 & e3.fieldFlags ? e3.fieldType = "Rd" : 65536 & e3.fieldFlags ? e3.fieldType = "Btn" : e3.fieldType = "Cb", a2 = true;
        break;
      default:
        t2.p2jwarn(`Unsupported: field.fieldType of ${e3.fieldType}`);
    }
    return a2;
  }
  static isFormElement(e3) {
    let a2 = false;
    if ("Widget" === e3.subtype) a2 = __.isWidgetSupported(e3);
    else t2.p2jwarn(`Unsupported: field.type of ${e3.subtype}`);
    return a2;
  }
  constructor(e3, t3, a2, r3) {
    this.field = e3, this.viewport = t3, this.Fields = a2, this.Boxsets = r3;
  }
  static #e(e3) {
    const t3 = e3.slice(0);
    return e3[0] > e3[2] && (t3[0] = e3[2], t3[2] = e3[0]), e3[1] > e3[3] && (t3[1] = e3[3], t3[3] = e3[1]), t3;
  }
  #t(e3) {
    const t3 = this.viewport.convertToViewportRectangle(e3.rect), a2 = __.#e(t3);
    let r3 = a2[3] - a2[1];
    return "Tx" === e3.fieldType ? r3 > 22 && (a2[1] += 2, r3 -= 2) : "Ch" !== e3.fieldType && (a2[1] -= 3), r3 = r3 >= 20 ? r3 : 20, { x: G.toFormX(a2[0]), y: G.toFormY(a2[1]), w: G.toFormX(a2[2] - a2[0]), h: G.toFormY(r3) };
  }
  #a(e3) {
    let t3 = 0;
    1 & e3.fieldFlags && (t3 |= 1024), 2 & e3.fieldFlags && (t3 |= 16);
    const a2 = { id: { Id: e3.fullName, EN: 0 }, TI: e3.TI, AM: t3 };
    return e3.alternativeText && e3.alternativeText.length > 1 && (a2.TU = e3.alternativeText), e3.alternativeID && e3.alternativeID.length > 1 && (a2.TM = e3.alternativeID), Object.assign(a2, this.#t(e3));
  }
  #r(e3) {
    const t3 = Object.assign({ style: 48, T: { Name: e3.TName || "alpha", TypeInfo: {} } }, this.#a(e3));
    e3.MV && (t3.MV = e3.MV), e3.fieldValue && (t3.V = e3.fieldValue), this.Fields.push(t3);
  }
  #i(e3) {
    const t3 = Object.assign({ style: 48, T: { Name: "box", TypeInfo: {} } }, this.#a(e3));
    e3.fieldValue && (t3.checked = "Off" !== e3.fieldValue), this.Boxsets.push({ boxes: [t3] });
  }
  #n(e3) {
    const t3 = Object.assign({ style: 48, T: { Name: "box", TypeInfo: {} } }, this.#a(e3));
    t3.id.Id = e3.value, "checked" in e3 && (t3.checked = e3.checked);
    const a2 = this.Boxsets.filter((t4) => "id" in t4 && "Id" in t4.id && t4.id.Id === e3.fullName)[0];
    a2 && "boxes" in a2 ? a2.boxes.push(t3) : this.Boxsets.push({ boxes: [t3], id: { Id: e3.fullName, EN: 0 } });
  }
  #c(e3) {
    const t3 = Object.assign({ style: 48, T: { Name: "link" }, FL: { form: { Id: e3.FL } } }, this.#a(e3));
    this.Fields.push(t3);
  }
  #s(e3) {
    const t3 = Object.assign({ style: 48, T: { Name: "alpha", TypeInfo: {} } }, this.#a(e3));
    t3.w -= 0.5, t3.PL = { V: [], D: [] }, e3.value.forEach((e4, a2) => {
      Array.isArray(e4) ? (t3.PL.D.push(e4[0]), t3.PL.V.push(e4[1])) : (t3.PL.D.push(e4), t3.PL.V.push(e4));
    }), e3.fieldValue && (t3.V = e3.fieldValue), this.Fields.push(t3);
  }
  #o(e3) {
    const t3 = Object.assign({ style: 48, T: { Name: "signature", TypeInfo: {} } }, this.#a(e3));
    e3.Sig && (t3.Sig = {}, e3.Sig.Name && (t3.Sig.Name = e3.Sig.Name), e3.Sig.M && (t3.Sig.M = G.dateToIso8601(e3.Sig.M)), e3.Sig.Location && (t3.Sig.Location = e3.Sig.Location), e3.Sig.Reason && (t3.Sig.Reason = e3.Sig.Reason), e3.Sig.ContactInfo && (t3.Sig.ContactInfo = e3.Sig.ContactInfo)), this.Fields.push(t3);
  }
  processField() {
    switch (this.field.TI = __.tabIndex++, this.field.fieldType) {
      case "Tx":
        this.#r(this.field);
        break;
      case "Cb":
        this.#i(this.field);
        break;
      case "Rd":
        this.#n(this.field);
        break;
      case "Btn":
        this.#c(this.field);
        break;
      case "Ch":
        this.#s(this.field);
        break;
      case "Sig":
        this.#o(this.field);
    }
    this.clean();
  }
  clean() {
    delete this.field, delete this.viewport, delete this.Fields, delete this.Boxsets;
  }
  static getAllFieldsTypes(e3) {
    const t3 = (e4) => !!(1024 & e4.AM), a2 = (e4) => ({ id: e4.id.Id, type: e4.T.Name, calc: t3(e4), value: e4.V || "" }), r3 = [];
    return e3.Pages.forEach((e4) => {
      e4.Boxsets.forEach((e5) => {
        e5.boxes.length > 1 ? e5.boxes.forEach((a3) => {
          r3.push({ id: e5.id.Id, type: "radio", calc: t3(a3), value: a3.id.Id });
        }) : r3.push(a2(e5.boxes[0]));
      }), e4.Fields.forEach((e5) => r3.push(a2(e5)));
    }), r3;
  }
};
var X = ["bd", "bold", "demi", "black", "medi"];
var W2 = ["arial", "helvetica", "sans-serif ", "courier ", "monospace ", "ocr "];
var V = 0.1;
var Y = class _Y {
  #f() {
    let e3 = this.fontObj.name || this.fontObj.fallbackName;
    return e3 || (e3 = U[0]), e3 = e3.toLowerCase(), e3;
  }
  #l() {
    let e3 = this.typeName, t3 = false;
    const a2 = this.typeName.split("+");
    if (Array.isArray(a2) && a2.length > 1 && (e3 = a2[1].split("-"), Array.isArray(e3) && e3.length > 1)) {
      const a3 = e3[1].toLowerCase();
      t3 = X.indexOf(a3) >= 0, e3 = e3[0];
    }
    return { subType: e3, bold: t3 };
  }
  #h() {
    const e3 = this.typeName.indexOf("symbol") > 0 || U[2].indexOf(this.subType) >= 0;
    if (this.fontObj.isSymbolicFont) {
      W2.filter((e4) => this.typeName.indexOf(e4) >= 0).length > 0 && (this.fontObj.isSymbolicFont = false, t2.p2jinfo(`Reset: isSymbolicFont (false) for ${this.fontObj.name}`));
    } else e3 && (this.fontObj.isSymbolicFont = true, t2.p2jinfo(`Reset: isSymbolicFont (true) for ${this.fontObj.name}`));
    return e3;
  }
  #u() {
    let { spaceWidth: e3 } = this.fontObj;
    if (!e3) {
      var t3 = Array.isArray(this.fontObj.toFontChar) ? this.fontObj.toFontChar.indexOf(32) : -1;
      e3 = t3 >= 0 && Array.isArray(this.fontObj.widths) ? this.fontObj.widths[t3] : 250;
    }
    return e3 = G.toFormX(e3) / 32, e3;
  }
  constructor(e3) {
    this.fontObj = e3, this.typeName = this.#f();
    const { subType: t3, bold: a2 } = this.#l();
    this.subType = t3, this.bold = a2, this.isSymbol = this.#h(), this.spaceWidth = this.#u(), this.fontSize = 1, this.faceIdx = 0, this.italic = false, this.fontStyleId = -1;
  }
  static compareBlockPos(e3, t3) {
    if (e3.y < t3.y - V) return -1;
    if (Math.abs(e3.y - t3.y) <= V) {
      if (e3.x < t3.x - V) return -1;
      if (Math.abs(e3.x - t3.x) <= V) return 0;
    }
    return 1;
  }
  static haveSameStyle(e3, t3) {
    let a2 = e3.R[0].S === t3.R[0].S;
    if (a2 && e3.R[0].S < 0) {
      for (let r3 = 0; r3 < e3.R[0].TS.length; r3++) if (e3.R[0].TS[r3] !== t3.R[0].TS[r3]) {
        a2 = false;
        break;
      }
    }
    return a2 && (a2 = void 0 === e3.R[0].RA && void 0 === t3.R[0].RA), a2;
  }
  static getSpaceThreshHold(e3) {
    return _Y.getFontSize(e3) / 12 * e3.sw;
  }
  static areAdjacentBlocks(e3, t3) {
    const a2 = Math.abs(e3.y - t3.y) <= V, r3 = t3.x - e3.x - e3.w < _Y.getSpaceThreshHold(e3);
    return a2 && r3;
  }
  static getFontSize(e3) {
    const t3 = e3.R[0].S;
    return t3 < 0 ? e3.R[0].TS[1] : z3[t3][1];
  }
  static areDuplicateBlocks(e3, t3) {
    return e3.x === t3.x && e3.y === t3.y && e3.R[0].T === t3.R[0].T && _Y.haveSameStyle(e3, t3);
  }
  #d() {
    const { fontObj: e3 } = this;
    this.bold = e3.bold, this.bold || (this.bold = this.typeName.indexOf("bold") >= 0 || this.typeName.indexOf("black") >= 0), this.italic = e3.italic, this.italic || (this.italic = this.typeName.indexOf("italic") >= 0 || this.typeName.indexOf("oblique") >= 0), this.bold && this.italic || !(this.typeName.indexOf("boldobl") >= 0) || (this.bold = true, this.italic = true);
    const t3 = this.subType;
    e3.isSerifFont ? U[1].indexOf(t3) >= 0 && (this.faceIdx = 1) : U[2].indexOf(this.subType) >= 0 ? this.faceIdx = 2 : e3.isMonospace ? (this.faceIdx = 3, U[4].indexOf(t3) >= 0 ? this.faceIdx = 4 : U[5].indexOf(t3) >= 0 && (this.faceIdx = 5)) : e3.isSymbolicFont && (this.faceIdx = 2), 0 === this.faceIdx && this.typeName.indexOf("narrow") > 0 && (this.faceIdx = 1);
  }
  #g(e3) {
    this.#d(), this.fontSize = this.bold && e3 > 12 ? e3 + 1 : e3;
    const t3 = [this.faceIdx, this.fontSize, this.bold ? 1 : 0, this.italic ? 1 : 0];
    let a2 = -1;
    return z3.forEach((e4, r3, i3) => {
      -1 === a2 && e4[0] === t3[0] && e4[1] === t3[1] && e4[2] === t3[2] && e4[3] === t3[3] && (a2 = r3);
    }), a2;
  }
  #m(e3) {
    let a2 = e3;
    if (!e3 || 1 !== e3.length) return a2;
    if (!this.fontObj.isSymbolicFont || !this.isSymbol) return "C" !== a2 && "G" !== a2 || (a2 = ` ${a2} `), a2;
    switch (e3.charCodeAt(0)) {
      case 20:
        a2 = "✓";
        break;
      case 70:
        a2 = "CIDFontType0" === this.fontObj.type ? "⚠" : "}";
        break;
      case 71:
      case 97:
        a2 = "▶";
        break;
      case 99:
        a2 = this.isSymbol ? "•" : "▲";
        break;
      case 100:
        a2 = "▼";
        break;
      case 103:
        a2 = "➨";
        break;
      case 106:
        a2 = "";
        break;
      case 114:
      case 116:
      case 118:
        a2 = "•";
        break;
      case 115:
        a2 = "▲";
        break;
      default:
        t2.p2jinfo(`${this.fontObj.type} - SymbolicFont - (${this.fontObj.name}) : ${e3.charCodeAt(0)}::${e3.charCodeAt(1)} => ${a2}`);
    }
    return a2;
  }
  #p(e3) {
    let t3 = 0;
    if (0 === e3[0][0] && 0 === e3[1][1]) 0 !== e3[0][1] && 0 !== e3[1][0] && e3[0][1] / e3[1][0] + 1 < 1e-4 && (t3 = 90);
    else if (0 !== e3[0][0] && 0 !== e3[1][1]) {
      const a2 = Math.atan(-e3[0][1] / e3[0][0]), r3 = Math.atan(e3[1][0] / e3[1][1]);
      Math.abs(a2) > 1e-4 && a2 - r3 < 1e-4 && (t3 = 180 * a2 / Math.PI);
    }
    return t3;
  }
  processText(e3, a2, r3, i3, n3, c3, s3) {
    const o3 = this.#m(a2);
    if (!o3) return;
    this.fontStyleId = this.#g(n3);
    const f2 = [this.faceIdx, this.fontSize, this.bold ? 1 : 0, this.italic ? 1 : 0], l2 = G.findColorIndex(i3), h3 = l2 >= 0 && l2 < G.colorCount() ? { clr: l2 } : { oc: i3 };
    let u3 = { T: this.flashEncode(o3), S: this.fontStyleId, TS: f2 };
    const d3 = this.#p(s3);
    0 !== d3 && (t2.p2jinfo(`${a2}: rotated ${d3} degree.`), u3 = { ...u3, RA: d3 });
    const g2 = { x: G.toFormX(e3.x) - 0.25, y: G.toFormY(e3.y) - 0.75, w: G.toFixedFloat(r3), ...h3, sw: this.spaceWidth, A: "left", R: [u3] };
    c3.Texts.push(g2);
  }
  flashEncode(e3) {
    let t3 = encodeURIComponent(e3);
    return t3 = t3.replace("%C2%96", "-"), t3 = t3.replace("%C2%91", "%27"), t3 = t3.replace("%C2%92", "%27"), t3 = t3.replace("%C2%82", "%27"), t3 = t3.replace("%C2%93", "%22"), t3 = t3.replace("%C2%94", "%22"), t3 = t3.replace("%C2%84", "%22"), t3 = t3.replace("%C2%8B", "%C2%AB"), t3 = t3.replace("%C2%9B", "%C2%BB"), t3;
  }
  clean() {
    this.fontObj = null, delete this.fontObj;
  }
};
var J = class {
  xmlData = null;
  ptiPageArray = [];
  constructor() {
    this.xmlData = null, this.ptiPageArray = [];
  }
  parseXml(t3, a2) {
    e2.readFile(t3, "utf8", (e3, t4) => {
      if (e3) a2(e3);
      else {
        this.xmlData = t4;
        for (var r3 = new import_xmldom.DOMParser().parseFromString(this.xmlData).documentElement.getElementsByTagName("field"), i3 = [], n3 = 0; n3 < r3.length; n3++) {
          var c3 = r3[n3].getAttribute("id"), s3 = r3[n3].getAttribute("x"), f2 = r3[n3].getAttribute("y"), l2 = r3[n3].getAttribute("width"), h3 = r3[n3].getAttribute("height"), u3 = r3[n3].getAttribute("xsi:type"), d3 = r3[n3].getAttribute("page"), g2 = r3[n3].getAttribute("fontName"), m3 = r3[n3].getAttribute("fontSize"), p3 = {}, b3 = parseInt(s3) - 21, v3 = parseInt(f2) - 20, y3 = parseInt(b3) + parseInt(l2) - 4, k3 = parseInt(v3) + parseInt(h3) - 4;
          p3.fieldType = "Tx", "Boolean" === u3 ? p3.fieldType = "Btn" : "SSN" !== u3 && "Phone" !== u3 && "zip" !== u3 || (p3.TName = u3.toLowerCase()), p3.alternativeText = "", p3.fullName = c3, p3.fontSize = m3, p3.fontName = g2, p3.subtype = "Widget", p3.rect = [b3, v3, y3, k3], i3.push(p3), this.ptiPageArray[parseInt(d3)] = i3;
        }
      }
      a2();
    });
  }
  getFields(e3) {
    return this.ptiPageArray[e3];
  }
};
var K2 = class {
  constructor(e3, t3, a2, r3, i3, n3, c3) {
    this.x1 = e3, this.y1 = t3, this.x2 = a2, this.y2 = r3, this.lineWidth = i3 || 1, this.color = n3, this.dashed = c3;
  }
  #b(e3, t3, a2) {
    e3.x = G.toFormX(t3), e3.y = G.toFormY(a2);
  }
  processLine(e3) {
    const a2 = Math.abs(this.x2 - this.x1), r3 = Math.abs(this.y2 - this.y1), i3 = this.lineWidth;
    let n3 = { x: 0, y: 0, w: G.toFixedFloat(this.lineWidth), l: 0 };
    const c3 = G.findColorIndex(this.color), s3 = c3 > 0 && c3 < G.colorCount() ? { clr: c3 } : { oc: this.color };
    if (n3 = { ...n3, ...s3 }, this.dashed && (n3 = { ...n3, dsh: 1 }), r3 < this.lineWidth && a2 > i3) {
      if (this.lineWidth < 4 && a2 / this.lineWidth < 4) return void t2.p2jinfo(`Skipped: short thick HLine: lineWidth = ${this.lineWidth}, xDelta = ${a2}`);
      n3.l = G.toFormX(a2), this.x1 > this.x2 ? this.#b(n3, this.x2, this.y2) : this.#b(n3, this.x1, this.y1), e3.HLines.push(n3);
    } else if (a2 < this.lineWidth && r3 > i3) {
      if (this.lineWidth < 4 && r3 / this.lineWidth < 4) return void t2.p2jinfo(`Skipped: short thick VLine: lineWidth = ${this.lineWidth}, yDelta = ${r3}`);
      n3.l = G.toFormY(r3), this.y1 > this.y2 ? this.#b(n3, this.x2, this.y2) : this.#b(n3, this.x1, this.y1), e3.VLines.push(n3);
    }
  }
};
var Z = class {
  constructor(e3, t3, a2, r3, i3) {
    this.x = e3, this.y = t3, this.width = a2, this.height = r3, this.color = i3;
  }
  processFill(e3) {
    const a2 = G.findColorIndex(this.color), r3 = a2 > 0 && a2 < G.colorCount() ? { clr: a2 } : { oc: this.color }, i3 = { x: G.toFormX(this.x), y: G.toFormY(this.y), w: G.toFormX(this.width), h: G.toFormY(this.height), ...r3 };
    i3.w < 2 && i3.h < 2 ? t2.p2jinfo(`Skipped: tiny fill: ${i3.w} x ${i3.h}`) : e3.Fills.push(i3);
  }
};
var { round: Q, sin: $3, cos: ee, abs: te, sqrt: ae } = Math;
var re = [];
for (let e3 = 0; e3 < 16; e3++) for (let t3 = 0; t3 < 16; t3++) re[16 * e3 + t3] = e3.toString(16) + t3.toString(16);
function ie(e3, t3) {
  const a2 = [[1, 0, 0], [0, 1, 0], [0, 0, 1]];
  for (let r3 = 0; r3 < 3; r3++) for (let i3 = 0; i3 < 3; i3++) {
    let n3 = 0;
    for (let a3 = 0; a3 < 3; a3++) n3 += e3[r3][a3] * t3[a3][i3];
    a2[r3][i3] = n3;
  }
  return a2;
}
function ne(e3, t3) {
  t3.fillStyle = e3.fillStyle, t3.lineCap = e3.lineCap, t3.lineJoin = e3.lineJoin, t3.lineWidth = e3.lineWidth, t3.miterLimit = e3.miterLimit, t3.shadowBlur = e3.shadowBlur, t3.shadowColor = e3.shadowColor, t3.shadowOffsetX = e3.shadowOffsetX, t3.shadowOffsetY = e3.shadowOffsetY, t3.strokeStyle = e3.strokeStyle, t3.globalAlpha = e3.globalAlpha, t3.arcScaleX_ = e3.arcScaleX_, t3.arcScaleY_ = e3.arcScaleY_, t3.lineScale_ = e3.lineScale_, t3.dashArray = e3.dashArray;
}
function ce(e3) {
  let t3, a2 = 1;
  if ("rgb" === (e3 = String(e3)).substring(0, 3)) {
    const r3 = e3.indexOf("(", 3), i3 = e3.indexOf(")", r3 + 1), n3 = e3.substring(r3 + 1, i3).split(",");
    t3 = "#";
    for (let e4 = 0; e4 < 3; e4++) t3 += re[Number(n3[e4])];
    4 === n3.length && "a" === e3.substring(3, 4) && (a2 = n3[3]);
  } else t3 = e3;
  return { color: t3, alpha: a2 };
}
function se(e3, t3, a2, r3) {
  e3.currentPath_.push({ type: "bezierCurveTo", cp1x: t3.x, cp1y: t3.y, cp2x: a2.x, cp2y: a2.y, x: r3.x, y: r3.y }), e3.currentX_ = r3.x, e3.currentY_ = r3.y;
}
function oe(e3, t3, a2) {
  if (function(e4) {
    for (let t4 = 0; t4 < 3; t4++) for (let a3 = 0; a3 < 2; a3++) if (!isFinite(e4[t4][a3]) || isNaN(e4[t4][a3])) return false;
    return true;
  }(t3) && (e3.m_ = t3, a2)) {
    const a3 = t3[0][0] * t3[1][1] - t3[0][1] * t3[1][0];
    e3.lineScale_ = ae(te(a3));
  }
}
var fe = class {
  constructor() {
  }
};
var le = class {
  constructor(e3) {
    this.type_ = e3, this.x0_ = 0, this.y0_ = 0, this.r0_ = 0, this.x1_ = 0, this.y1_ = 0, this.r1_ = 0, this.colors_ = [];
  }
  addColorStop(e3, t3) {
    t3 = ce(t3), this.colors_.push({ offset: e3, color: t3.color, alpha: t3.alpha });
  }
};
var he = class {
  constructor(e3, t3, a2) {
    this.m_ = [[1, 0, 0], [0, 1, 0], [0, 0, 1]], this.mStack_ = [], this.aStack_ = [], this.currentPath_ = [], this.strokeStyle = "#000", this.fillStyle = "#000", this.lineWidth = 1, this.lineJoin = "miter", this.lineCap = "butt", this.dashArray = [], this.miterLimit = 1, this.globalAlpha = 1, "HLines" in e3 && Array.isArray(e3.HLines) || (e3.HLines = []), "VLines" in e3 && Array.isArray(e3.VLines) || (e3.VLines = []), "Fills" in e3 && Array.isArray(e3.Fills) || (e3.Fills = []), "Texts" in e3 && Array.isArray(e3.Texts) || (e3.Texts = []), this.canvas = e3, this.width = t3, this.height = a2, this.arcScaleX_ = 1, this.arcScaleY_ = 1, this.lineScale_ = 1, this.currentFont = null;
  }
  #v(e3, t3, a2, r3) {
    const i3 = Array.isArray(this.dashArray) && this.dashArray.length > 1;
    new K2(e3.x, e3.y, t3.x, t3.y, a2, r3, i3).processLine(this.canvas);
  }
  #y(e3, t3, a2, r3) {
    const i3 = a2.x - t3.x, n3 = a2.y - t3.y;
    new Z(e3.x, e3.y, i3, n3, r3).processFill(this.canvas);
  }
  #k(e3, a2, r3, i3) {
    const n3 = Math.abs(r3 - Math.abs(i3)) < 1 && r3 < 13;
    return n3 && t2.p2jinfo(`Skipped: tiny rect: w=${r3}, h=${i3}`), n3;
  }
  getContext(e3) {
    return "2d" === e3 ? this : null;
  }
  setLineDash(e3) {
    this.dashArray = e3;
  }
  getLineDash() {
    return this.dashArray;
  }
  fillText(e3, t3, a2, r3, i3) {
    if (!e3 || 1 === !e3.length && e3.trim().length < 1) return;
    const n3 = this.getCoords_(t3, a2), c3 = ce(this.fillStyle || this.strokeStyle), s3 = c3 ? c3.color : "#000000";
    this.currentFont.processText(n3, e3, r3, s3, i3, this.canvas, this.m_);
  }
  strokeText(e3, t3, a2, r3) {
    this.fillText(e3, t3, a2, r3);
  }
  measureText(e3) {
    t2.p2jwarn("to be implemented: contextPrototype.measureText - ", e3);
    return { width: (e3.length || 1) * (this.currentFont.spaceWidth || 5) };
  }
  setFont(e3) {
    this.currentFont && "function" == typeof this.currentFont.clean && (this.currentFont.clean(), this.currentFont = null), this.currentFont = new Y(e3);
  }
  clearRect() {
    t2.p2jwarn("to be implemented: contextPrototype.clearRect");
  }
  beginPath() {
    this.currentPath_ = [];
  }
  moveTo(e3, t3) {
    const a2 = this.getCoords_(e3, t3);
    this.currentPath_.push({ type: "moveTo", x: a2.x, y: a2.y }), this.currentX_ = a2.x, this.currentY_ = a2.y;
  }
  lineTo(e3, t3) {
    const a2 = this.getCoords_(e3, t3);
    this.currentPath_.push({ type: "lineTo", x: a2.x, y: a2.y }), this.currentX_ = a2.x, this.currentY_ = a2.y;
  }
  bezierCurveTo(e3, t3, a2, r3, i3, n3) {
    const c3 = this.getCoords_(i3, n3);
    se(this, this.getCoords_(e3, t3), this.getCoords_(a2, r3), c3);
  }
  quadraticCurveTo(e3, t3, a2, r3) {
    const i3 = this.getCoords_(e3, t3), n3 = this.getCoords_(a2, r3), c3 = { x: this.currentX_ + 2 / 3 * (i3.x - this.currentX_), y: this.currentY_ + 2 / 3 * (i3.y - this.currentY_) };
    se(this, c3, { x: c3.x + (n3.x - this.currentX_) / 3, y: c3.y + (n3.y - this.currentY_) / 3 }, n3);
  }
  arc(e3, t3, a2, r3, i3, n3) {
    const c3 = n3 ? "at" : "wa";
    let s3 = e3 + ee(r3) * a2;
    const o3 = t3 + $3(r3) * a2, f2 = e3 + ee(i3) * a2, l2 = t3 + $3(i3) * a2;
    s3 !== f2 || n3 || (s3 += 0.125);
    const h3 = this.getCoords_(e3, t3), u3 = this.getCoords_(s3, o3), d3 = this.getCoords_(f2, l2);
    this.currentPath_.push({ type: c3, x: h3.x, y: h3.y, radius: a2, xStart: u3.x, yStart: u3.y, xEnd: d3.x, yEnd: d3.y });
  }
  rect(e3, t3, a2, r3) {
    this.#k(e3, t3, a2, r3) || (this.moveTo(e3, t3), this.lineTo(e3 + a2, t3), this.lineTo(e3 + a2, t3 + r3), this.lineTo(e3, t3 + r3), this.closePath());
  }
  strokeRect(e3, t3, a2, r3) {
    if (this.#k(e3, t3, a2, r3)) return;
    const i3 = this.currentPath_;
    this.beginPath(), this.moveTo(e3, t3), this.lineTo(e3 + a2, t3), this.lineTo(e3 + a2, t3 + r3), this.lineTo(e3, t3 + r3), this.closePath(), this.stroke(), this.currentPath_ = i3;
  }
  fillRect(e3, t3, a2, r3) {
    if (this.#k(e3, t3, a2, r3)) return;
    const i3 = this.currentPath_;
    this.beginPath(), this.moveTo(e3, t3), this.lineTo(e3 + a2, t3), this.lineTo(e3 + a2, t3 + r3), this.lineTo(e3, t3 + r3), this.closePath(), this.fill(), this.currentPath_ = i3;
  }
  createLinearGradient(e3, t3, a2, r3) {
    const i3 = new le("gradient");
    return i3.x0_ = e3, i3.y0_ = t3, i3.x1_ = a2, i3.y1_ = r3, i3;
  }
  createRadialGradient(e3, t3, a2, r3, i3, n3) {
    const c3 = new le("gradientradial");
    return c3.x0_ = e3, c3.y0_ = t3, c3.r0_ = a2, c3.x1_ = r3, c3.y1_ = i3, c3.r1_ = n3, c3;
  }
  drawImage(e3, t3) {
  }
  getImageData(e3, t3, a2, r3) {
    return { width: a2, height: r3, data: new Uint8Array(a2 * r3 * 4) };
  }
  stroke(e3) {
    if (this.currentPath_.length < 2) return;
    const t3 = ce(e3 ? this.fillStyle : this.strokeStyle), { color: a2 } = t3, r3 = this.lineScale_ * this.lineWidth, i3 = { x: null, y: null }, n3 = { x: null, y: null };
    for (let t4 = 0; t4 < this.currentPath_.length; t4++) {
      let c3 = this.currentPath_[t4];
      switch (c3.type) {
        case "moveTo":
        case "bezierCurveTo":
        case "at":
        case "wa":
          break;
        case "lineTo":
          e3 || t4 > 0 && this.#v(this.currentPath_[t4 - 1], c3, r3, a2);
          break;
        case "close":
          e3 || t4 > 0 && this.#v(this.currentPath_[t4 - 1], this.currentPath_[0], r3, a2), c3 = null;
      }
      e3 && c3 && ((null === i3.x || c3.x < i3.x) && (i3.x = c3.x), (null === n3.x || c3.x > n3.x) && (n3.x = c3.x), (null === i3.y || c3.y < i3.y) && (i3.y = c3.y), (null === n3.y || c3.y > n3.y) && (n3.y = c3.y));
    }
    e3 && this.#y(i3, i3, n3, a2);
  }
  fill() {
    this.stroke(true);
  }
  closePath() {
    this.currentPath_.push({ type: "close" });
  }
  getCoords_(e3, t3) {
    const a2 = this.m_;
    return { x: e3 * a2[0][0] + t3 * a2[1][0] + a2[2][0], y: e3 * a2[0][1] + t3 * a2[1][1] + a2[2][1] };
  }
  save() {
    const e3 = {};
    ne(this, e3), this.aStack_.push(e3), this.mStack_.push(this.m_), this.m_ = ie([[1, 0, 0], [0, 1, 0], [0, 0, 1]], this.m_);
  }
  restore() {
    ne(this.aStack_.pop(), this), this.m_ = this.mStack_.pop();
  }
  translate(e3, t3) {
    oe(this, ie([[1, 0, 0], [0, 1, 0], [e3, t3, 1]], this.m_), false);
  }
  rotate(e3) {
    const t3 = ee(e3), a2 = $3(e3);
    oe(this, ie([[t3, a2, 0], [-a2, t3, 0], [0, 0, 1]], this.m_), false);
  }
  scale(e3, t3) {
    this.arcScaleX_ *= e3, this.arcScaleY_ *= t3;
    oe(this, ie([[e3, 0, 0], [0, t3, 0], [0, 0, 1]], this.m_), true);
  }
  transform(e3, t3, a2, r3, i3, n3) {
    oe(this, ie([[e3, t3, 0], [a2, r3, 0], [i3, n3, 1]], this.m_), true);
  }
  setTransform(e3, t3, a2, r3, i3, n3) {
    oe(this, [[e3, t3, 0], [a2, r3, 0], [i3, n3, 1]], true);
  }
  clip() {
  }
  arcTo() {
  }
  createPattern() {
    return new fe();
  }
};
function ue(e3, t3) {
  return new he({}, e3, t3);
}
function de(e3, t3) {
  const a2 = e3.get("AA");
  if (!a2) return;
  let r3 = a2.get("F");
  (r3 || (r3 = a2.get("K"), r3)) && r3.forEach((e4, a3) => {
    "JS" === e4 && function(e5, t4) {
      if (Object.prototype.hasOwnProperty.call(t4, "TName")) return;
      if (!e5.split) return;
      const a4 = e5.split("(");
      if (2 !== a4.length) return;
      const r4 = a4[0], i3 = a4[1].split(")")[0];
      switch (r4) {
        case "AFSpecial_Format":
          t4.TName = ge[Number(i3)];
          break;
        case "AFNumber_Format":
          t4.TName = "number";
          break;
        case "AFDate_FormatEx":
          t4.TName = "date", t4.MV = i3.replace(/^'+|^"+|'+$|"+$/g, "");
          break;
        case "AFSpecial_KeystrokeEx":
          {
            const e6 = i3.replace(/^'+|^"+|'+$|"+$/g, "");
            e6 && e6.length > 0 && e6.length < 64 && (t4.TName = "mask", t4.MV = e6);
          }
          break;
        case "AFPercent_Format":
          t4.TName = "percent";
      }
    }(a3, t3);
  });
}
var ge = ["zip", "zip", "phone", "ssn", ""];
var me = class {
  static processAnnotation(e3, a2) {
    "Btn" === a2.fieldType ? 32768 & a2.fieldFlags ? function(e4, t3) {
      let a3 = "";
      const r3 = e4.get("Parent");
      r3 && r3.forEach((e5, r4) => {
        "DV" === e5 ? a3 = r4.name || "" : "TU" === e5 ? t3.alternativeText = r4 : "TM" === e5 && (t3.alternativeID = r4);
      }), e4.get("AP").get("N").forEach((e5, r4) => {
        "off" !== e5.toLowerCase() && (t3.value = e5, t3.checked = e5 === a3);
      }), t3.value || (t3.value = "off");
    }(e3, a2) : 65536 & a2.fieldFlags ? function(e4, t3) {
      const a3 = e4.get("MK");
      a3 && (t3.value = a3.get("CA") || ""), t3.FL = "";
      const r3 = e4.get("A");
      if (r3) {
        const e5 = r3.get("S");
        t3.FL = r3.get(e5.name);
      }
    }(e3, a2) : function(e4, t3) {
      const a3 = e4.get("AP").get("N");
      let r3 = 0;
      a3.forEach((e5, a4) => {
        r3++, 1 === r3 && (t3.value = e5);
      });
    }(e3, a2) : "Ch" === a2.fieldType ? function(e4, t3) {
      t3.value = e4.get("Opt") || [];
    }(e3, a2) : "Tx" === a2.fieldType ? de(e3, a2) : "Sig" === a2.fieldType ? function(e4, t3) {
      const a3 = e4.get("V");
      if (!a3) return;
      t3.Sig = {};
      const r3 = a3.get("Name");
      r3 && (t3.Sig.Name = r3);
      const i3 = a3.get("M");
      i3 && (t3.Sig.M = i3);
      const n3 = a3.get("Location");
      n3 && (t3.Sig.Location = n3);
      const c3 = a3.get("Reason");
      c3 && (t3.Sig.Reason = c3);
      const s3 = a3.get("ContactInfo");
      s3 && (t3.Sig.ContactInfo = s3);
    }(e3, a2) : t2.p2jwarn("Unknown fieldType: ", a2);
  }
};
var pe = class {
  #A = "";
  #w = null;
  set onload(e3) {
    this.#w = "function" == typeof e3 ? e3 : null;
  }
  get onload() {
    return this.#w;
  }
  set src(e3) {
    this.#A = e3, this.#w && this.#w();
  }
  get src() {
    return this.#A;
  }
  btoa(e3) {
    return new i2.from(e3, "binary").toString("base64");
  }
};
var be = {};
var ve = { console };
var ye = "undefined" == typeof window;
var ke = 1;
var Ae = [1e-3, 0, 0, 1e-3, 0, 0];
var we = 0;
var xe = 1;
var Se = 2;
var Ce = 3;
var Ie = 4;
ve.PDFJS || (ve.PDFJS = {}), ve.PDFJS.pdfBug = false;
var Be = be.OPS = { dependency: 1, setLineWidth: 2, setLineCap: 3, setLineJoin: 4, setMiterLimit: 5, setDash: 6, setRenderingIntent: 7, setFlatness: 8, setGState: 9, save: 10, restore: 11, transform: 12, moveTo: 13, lineTo: 14, curveTo: 15, curveTo2: 16, curveTo3: 17, closePath: 18, rectangle: 19, stroke: 20, closeStroke: 21, fill: 22, eoFill: 23, fillStroke: 24, eoFillStroke: 25, closeFillStroke: 26, closeEOFillStroke: 27, endPath: 28, clip: 29, eoClip: 30, beginText: 31, endText: 32, setCharSpacing: 33, setWordSpacing: 34, setHScale: 35, setLeading: 36, setFont: 37, setTextRenderingMode: 38, setTextRise: 39, moveText: 40, setLeadingMoveText: 41, setTextMatrix: 42, nextLine: 43, showText: 44, showSpacedText: 45, nextLineShowText: 46, nextLineSetSpacingShowText: 47, setCharWidth: 48, setCharWidthAndBounds: 49, setStrokeColorSpace: 50, setFillColorSpace: 51, setStrokeColor: 52, setStrokeColorN: 53, setFillColor: 54, setFillColorN: 55, setStrokeGray: 56, setFillGray: 57, setStrokeRGBColor: 58, setFillRGBColor: 59, setStrokeCMYKColor: 60, setFillCMYKColor: 61, shadingFill: 62, beginInlineImage: 63, beginImageData: 64, endInlineImage: 65, paintXObject: 66, markPoint: 67, markPointProps: 68, beginMarkedContent: 69, beginMarkedContentProps: 70, endMarkedContent: 71, beginCompat: 72, endCompat: 73, paintFormXObjectBegin: 74, paintFormXObjectEnd: 75, beginGroup: 76, endGroup: 77, beginAnnotations: 78, endAnnotations: 79, beginAnnotation: 80, endAnnotation: 81, paintJpegXObject: 82, paintImageMaskXObject: 83, paintImageMaskXObjectGroup: 84, paintImageXObject: 85, paintInlineImageXObject: 86, paintInlineImageXObjectGroup: 87 };
var Te = be.NO_OPS = [82, 83, 84, 85, 86, 87];
var Le = be.NO_OPS_RANGE = [78, 79, 80, 81];
var Fe = !Boolean(Number(process?.env?.PDF2JSON_DISABLE_LOGS ?? "0")) && "console" in ve && "log" in ve.console ? ve.console.log.bind(ve.console) : function() {
};
function Pe(e3) {
  ke >= 5 && (Fe("Info: " + e3), be.LogManager.notify("info", e3));
}
function Re(e3) {
  ke >= 1 && (Fe("Warning: " + e3), be.LogManager.notify("warn", e3));
}
function Oe(e3) {
  if (arguments.length > 1) {
    var t3 = ["Error:"];
    t3.push.apply(t3, arguments), Fe.apply(null, t3), e3 = [].join.call(arguments, " ");
  }
  throw be.LogManager.notify("error", e3), new Error(e3);
}
function Me(e3) {
  Re("TODO: " + e3);
}
function De(e3, t3) {
  e3 || Oe(t3);
}
function qe(e3, t3) {
  if (!t3) return e3;
  if (t3.indexOf(":") >= 0) return t3;
  if ("/" == t3.charAt(0)) {
    var a2 = e3.indexOf("://");
    return a2 = e3.indexOf("/", a2 + 3), e3.substring(0, a2) + t3;
  }
  var r3 = e3.length;
  r3 = (a2 = e3.lastIndexOf("#")) >= 0 ? a2 : r3, r3 = (a2 = e3.lastIndexOf("?", r3)) >= 0 ? a2 : r3;
  var i3 = e3.lastIndexOf("/", r3);
  return e3.substring(0, i3 + 1) + t3;
}
function Ee(e3, t3) {
  if (!e3) return false;
  var a2 = e3.indexOf(":");
  if (a2 < 0) return t3;
  switch (e3.substring(0, a2)) {
    case "http":
    case "https":
    case "ftp":
    case "mailto":
      return true;
    default:
      return false;
  }
}
function Ne(e3, t3) {
  e3 || Oe(t3);
}
be.isValidUrl = Ee;
var je;
be.LogManager = (je = [], { addLogger: function(e3) {
  je.push(e3);
}, notify: function(e3, t3) {
  for (var a2 = 0, r3 = je.length; a2 < r3; a2++) {
    var i3 = je[a2];
    i3[e3] && i3[e3](t3);
  }
} });
function Ue(e3, t3, a2) {
  return Object.defineProperty(e3, t3, { value: a2, enumerable: true, configurable: true, writable: false }), a2;
}
var ze = be.PasswordResponses = { NEED_PASSWORD: 1, INCORRECT_PASSWORD: 2 };
var He = function() {
  function e3(e4, t3) {
    this.name = "PasswordException", this.message = e4, this.code = t3;
  }
  return e3.prototype = new Error(), e3.constructor = e3, e3;
}();
var Ge = function() {
  function e3(e4, t3) {
    this.name = "UnknownErrorException", this.message = e4, this.details = t3;
  }
  return e3.prototype = new Error(), e3.constructor = e3, e3;
}();
var _e = function() {
  function e3(e4) {
    this.name = "InvalidPDFException", this.message = e4;
  }
  return e3.prototype = new Error(), e3.constructor = e3, e3;
}();
var Xe = function() {
  function e3(e4) {
    this.name = "MissingPDFException", this.message = e4;
  }
  return e3.prototype = new Error(), e3.constructor = e3, e3;
}();
var We = function() {
  function e3(e4) {
    this.message = e4;
  }
  return e3.prototype = new Error(), e3.prototype.name = "NotImplementedException", e3.constructor = e3, e3;
}();
var Ve = function() {
  function e3(e4, t3) {
    this.begin = e4, this.end = t3, this.message = "Missing data [" + e4 + ", " + t3 + ")";
  }
  return e3.prototype = new Error(), e3.prototype.name = "MissingDataException", e3.constructor = e3, e3;
}();
var Ye = function() {
  function e3(e4) {
    this.message = e4;
  }
  return e3.prototype = new Error(), e3.prototype.name = "XRefParseException", e3.constructor = e3, e3;
}();
function Je(e3) {
  for (var t3 = "", a2 = e3.length, r3 = 0; r3 < a2; ++r3) t3 += String.fromCharCode(e3[r3]);
  return t3;
}
function Ke(e3) {
  for (var t3 = e3.length, a2 = new Uint8Array(t3), r3 = 0; r3 < t3; ++r3) a2[r3] = 255 & e3.charCodeAt(r3);
  return a2;
}
var Ze = [1, 0, 0, 1, 0, 0];
var Qe = be.Util = function() {
  function e3() {
  }
  return e3.makeCssRgb = function(e4) {
    return "rgb(" + e4[0] + "," + e4[1] + "," + e4[2] + ")";
  }, e3.makeCssCmyk = function(t3) {
    var a2 = bt.singletons.cmyk.getRgb(t3, 0);
    return e3.makeCssRgb(a2);
  }, e3.transform = function(e4, t3) {
    return [e4[0] * t3[0] + e4[2] * t3[1], e4[1] * t3[0] + e4[3] * t3[1], e4[0] * t3[2] + e4[2] * t3[3], e4[1] * t3[2] + e4[3] * t3[3], e4[0] * t3[4] + e4[2] * t3[5] + e4[4], e4[1] * t3[4] + e4[3] * t3[5] + e4[5]];
  }, e3.applyTransform = function(e4, t3) {
    return [e4[0] * t3[0] + e4[1] * t3[2] + t3[4], e4[0] * t3[1] + e4[1] * t3[3] + t3[5]];
  }, e3.applyInverseTransform = function(e4, t3) {
    var a2 = t3[0] * t3[3] - t3[1] * t3[2];
    return [(e4[0] * t3[3] - e4[1] * t3[2] + t3[2] * t3[5] - t3[4] * t3[3]) / a2, (-e4[0] * t3[1] + e4[1] * t3[0] + t3[4] * t3[1] - t3[5] * t3[0]) / a2];
  }, e3.getAxialAlignedBoundingBox = function(t3, a2) {
    var r3 = e3.applyTransform(t3, a2), i3 = e3.applyTransform(t3.slice(2, 4), a2), n3 = e3.applyTransform([t3[0], t3[3]], a2), c3 = e3.applyTransform([t3[2], t3[1]], a2);
    return [Math.min(r3[0], i3[0], n3[0], c3[0]), Math.min(r3[1], i3[1], n3[1], c3[1]), Math.max(r3[0], i3[0], n3[0], c3[0]), Math.max(r3[1], i3[1], n3[1], c3[1])];
  }, e3.inverseTransform = function(e4) {
    var t3 = e4[0] * e4[3] - e4[1] * e4[2];
    return [e4[3] / t3, -e4[1] / t3, -e4[2] / t3, e4[0] / t3, (e4[2] * e4[5] - e4[4] * e4[3]) / t3, (e4[4] * e4[1] - e4[5] * e4[0]) / t3];
  }, e3.apply3dTransform = function(e4, t3) {
    return [e4[0] * t3[0] + e4[1] * t3[1] + e4[2] * t3[2], e4[3] * t3[0] + e4[4] * t3[1] + e4[5] * t3[2], e4[6] * t3[0] + e4[7] * t3[1] + e4[8] * t3[2]];
  }, e3.singularValueDecompose2dScale = function(e4) {
    var t3 = [e4[0], e4[2], e4[1], e4[3]], a2 = e4[0] * t3[0] + e4[1] * t3[2], r3 = e4[0] * t3[1] + e4[1] * t3[3], i3 = e4[2] * t3[0] + e4[3] * t3[2], n3 = e4[2] * t3[1] + e4[3] * t3[3], c3 = (a2 + n3) / 2, s3 = Math.sqrt((a2 + n3) * (a2 + n3) - 4 * (a2 * n3 - i3 * r3)) / 2, o3 = c3 + s3 || 1, f2 = c3 - s3 || 1;
    return [Math.sqrt(o3), Math.sqrt(f2)];
  }, e3.normalizeRect = function(e4) {
    var t3 = e4.slice(0);
    return e4[0] > e4[2] && (t3[0] = e4[2], t3[2] = e4[0]), e4[1] > e4[3] && (t3[1] = e4[3], t3[3] = e4[1]), t3;
  }, e3.intersect = function(e4, t3) {
    const a2 = Math.max(Math.min(e4[0], e4[2]), Math.min(t3[0], t3[2])), r3 = Math.min(Math.max(e4[0], e4[2]), Math.max(t3[0], t3[2]));
    if (a2 > r3) return null;
    const i3 = Math.max(Math.min(e4[1], e4[3]), Math.min(t3[1], t3[3])), n3 = Math.min(Math.max(e4[1], e4[3]), Math.max(t3[1], t3[3]));
    return i3 > n3 ? null : [a2, i3, r3, n3];
  }, e3.sign = function(e4) {
    return e4 < 0 ? -1 : 1;
  }, e3.concatenateToArray = function(e4, t3) {
    Array.prototype.push.apply(e4, t3);
  }, e3.prependToArray = function(e4, t3) {
    Array.prototype.unshift.apply(e4, t3);
  }, e3.extendObj = function(e4, t3) {
    for (var a2 in t3) e4[a2] = t3[a2];
  }, e3.getInheritableProperty = function(e4, t3) {
    for (; e4 && !e4.has(t3); ) e4 = e4.get("Parent");
    return e4 ? e4.get(t3) : null;
  }, e3.inherit = function(e4, t3, a2) {
    for (var r3 in e4.prototype = Object.create(t3.prototype), e4.prototype.constructor = e4, a2) e4.prototype[r3] = a2[r3];
  }, e3.loadScript = function(e4, t3) {
    var a2 = document.createElement("script"), r3 = false;
    a2.setAttribute("src", e4), t3 && (a2.onload = function() {
      r3 || t3(), r3 = true;
    }), document.getElementsByTagName("head")[0].appendChild(a2);
  }, e3;
}();
var $e = (be.PageViewport = function() {
  function e3(e4, t3, a2, r3, i3, n3) {
    this.viewBox = e4, this.scale = t3, this.rotation = a2, this.offsetX = r3, this.offsetY = i3;
    var c3, s3, o3, f2, l2, h3, u3, d3, g2 = (e4[2] + e4[0]) / 2, m3 = (e4[3] + e4[1]) / 2;
    switch (a2 = (a2 %= 360) < 0 ? a2 + 360 : a2) {
      case 180:
        c3 = -1, s3 = 0, o3 = 0, f2 = 1;
        break;
      case 90:
        c3 = 0, s3 = 1, o3 = 1, f2 = 0;
        break;
      case 270:
        c3 = 0, s3 = -1, o3 = -1, f2 = 0;
        break;
      default:
        c3 = 1, s3 = 0, o3 = 0, f2 = -1;
    }
    n3 && (o3 = -o3, f2 = -f2), 0 === c3 ? (l2 = Math.abs(m3 - e4[1]) * t3 + r3, h3 = Math.abs(g2 - e4[0]) * t3 + i3, u3 = Math.abs(e4[3] - e4[1]) * t3, d3 = Math.abs(e4[2] - e4[0]) * t3) : (l2 = Math.abs(g2 - e4[0]) * t3 + r3, h3 = Math.abs(m3 - e4[1]) * t3 + i3, u3 = Math.abs(e4[2] - e4[0]) * t3, d3 = Math.abs(e4[3] - e4[1]) * t3), this.transform = [c3 * t3, s3 * t3, o3 * t3, f2 * t3, l2 - c3 * t3 * g2 - o3 * t3 * m3, h3 - s3 * t3 * g2 - f2 * t3 * m3], this.width = u3, this.height = d3, this.fontScale = t3;
  }
  return e3.prototype = { clone: function(t3) {
    var a2 = "scale" in (t3 = t3 || {}) ? t3.scale : this.scale, r3 = "rotation" in t3 ? t3.rotation : this.rotation;
    return new e3(this.viewBox.slice(), a2, r3, this.offsetX, this.offsetY, t3.dontFlip);
  }, convertToViewportPoint: function(e4, t3) {
    return Qe.applyTransform([e4, t3], this.transform);
  }, convertToViewportRectangle: function(e4) {
    var t3 = Qe.applyTransform([e4[0], e4[1]], this.transform), a2 = Qe.applyTransform([e4[2], e4[3]], this.transform);
    return [t3[0], t3[1], a2[0], a2[1]];
  }, convertToPdfPoint: function(e4, t3) {
    return Qe.applyInverseTransform([e4, t3], this.transform);
  } }, e3;
}(), [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 728, 711, 710, 729, 733, 731, 730, 732, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8226, 8224, 8225, 8230, 8212, 8211, 402, 8260, 8249, 8250, 8722, 8240, 8222, 8220, 8221, 8216, 8217, 8218, 8482, 64257, 64258, 321, 338, 352, 376, 381, 305, 322, 339, 353, 382, 0, 8364]);
function et(e3) {
  var t3, a2 = e3.length, r3 = "";
  if ("þ" === e3[0] && "ÿ" === e3[1]) for (t3 = 2; t3 < a2; t3 += 2) r3 += String.fromCharCode(e3.charCodeAt(t3) << 8 | e3.charCodeAt(t3 + 1));
  else for (t3 = 0; t3 < a2; ++t3) {
    var i3 = $e[e3.charCodeAt(t3)];
    r3 += i3 ? String.fromCharCode(i3) : e3.charAt(t3);
  }
  return r3;
}
function tt(e3) {
  for (var t3 in e3) return false;
  return true;
}
function at(e3) {
  return "boolean" == typeof e3;
}
function rt(e3) {
  return "number" == typeof e3 && (0 | e3) == e3;
}
function it(e3) {
  return "number" == typeof e3;
}
function nt(e3) {
  return "string" == typeof e3;
}
function ct(e3) {
  return e3 instanceof Jt;
}
function st(e3, t3) {
  return e3 instanceof Kt && (!t3 || e3.cmd == t3);
}
function ot(e3, t3) {
  if (!(e3 instanceof Zt)) return false;
  if (!t3) return true;
  var a2 = e3.get("Type");
  return ct(a2) && a2.name == t3;
}
function ft(e3) {
  return e3 instanceof Array;
}
function lt(e3) {
  return "object" == typeof e3 && null != e3 && "getBytes" in e3;
}
function ht(e3) {
  return "object" == typeof e3 && null != e3 && "byteLength" in e3;
}
function ut(e3) {
  return e3 instanceof Qt;
}
function dt(e3) {
  var t3;
  if ("object" != typeof e3) return false;
  if (ot(e3)) t3 = e3;
  else {
    if (!lt(e3)) return false;
    t3 = e3.dict;
  }
  return t3.has("FunctionType");
}
var gt = be.Promise = function() {
  var e3 = { handlers: [], running: false, unhandledRejections: [], pendingRejectionCheck: false, scheduleHandlers: function(e4) {
    0 != e4._status && (this.handlers = this.handlers.concat(e4._handlers), e4._handlers = [], this.running || (this.running = true, setTimeout(this.runHandlers.bind(this), 0)));
  }, runHandlers: function() {
    for (; this.handlers.length > 0; ) {
      var e4 = this.handlers.shift(), t4 = e4.thisPromise._status, a2 = e4.thisPromise._value;
      try {
        1 === t4 ? "function" == typeof e4.onResolve && (a2 = e4.onResolve(a2)) : "function" == typeof e4.onReject && (a2 = e4.onReject(a2), t4 = 1, e4.thisPromise._unhandledRejection && this.removeUnhandeledRejection(e4.thisPromise));
      } catch (e5) {
        t4 = 2, a2 = e5;
      }
      e4.nextPromise._updateStatus(t4, a2);
    }
    this.running = false;
  }, addUnhandledRejection: function(e4) {
    this.unhandledRejections.push({ promise: e4, time: Date.now() }), this.scheduleRejectionCheck();
  }, removeUnhandeledRejection: function(e4) {
    e4._unhandledRejection = false;
    for (var t4 = 0; t4 < this.unhandledRejections.length; t4++) this.unhandledRejections[t4].promise === e4 && (this.unhandledRejections.splice(t4), t4--);
  }, scheduleRejectionCheck: function() {
    this.pendingRejectionCheck || (this.pendingRejectionCheck = true, setTimeout(function() {
      this.pendingRejectionCheck = false;
      for (var e4 = Date.now(), t4 = 0; t4 < this.unhandledRejections.length; t4++) if (e4 - this.unhandledRejections[t4].time > 500) {
        var a2 = this.unhandledRejections[t4].promise._value, r3 = "Unhandled rejection: " + a2;
        a2.stack && (r3 += "\n" + a2.stack), Re(r3), this.unhandledRejections.splice(t4), t4--;
      }
      this.unhandledRejections.length && this.scheduleRejectionCheck();
    }.bind(this), 500));
  } };
  function t3() {
    this._status = 0, this._handlers = [];
  }
  return t3.all = function(e4) {
    var a2 = new t3(), r3 = e4.length, i3 = [];
    if (0 === r3) return a2.resolve(i3), a2;
    function n3(e5) {
      2 !== a2._status && (i3 = [], a2.reject(e5));
    }
    for (var c3 = 0, s3 = e4.length; c3 < s3; ++c3) {
      var o3 = e4[c3], f2 = /* @__PURE__ */ function(e5) {
        return function(t4) {
          2 !== a2._status && (i3[e5] = t4, 0 === --r3 && a2.resolve(i3));
        };
      }(c3);
      t3.isPromise(o3) ? o3.then(f2, n3) : f2(o3);
    }
    return a2;
  }, t3.isPromise = function(e4) {
    return e4 && "function" == typeof e4.then;
  }, t3.prototype = { _status: null, _value: null, _handlers: null, _unhandledRejection: null, _updateStatus: function(a2, r3) {
    1 !== this._status && 2 !== this._status && (1 == a2 && t3.isPromise(r3) ? r3.then(this._updateStatus.bind(this, 1), this._updateStatus.bind(this, 2)) : (this._status = a2, this._value = r3, 2 === a2 && 0 === this._handlers.length && (this._unhandledRejection = true, e3.addUnhandledRejection(this)), e3.scheduleHandlers(this)));
  }, get isResolved() {
    return 1 === this._status;
  }, get isRejected() {
    return 2 === this._status;
  }, resolve: function(e4) {
    this._updateStatus(1, e4);
  }, reject: function(e4) {
    this._updateStatus(2, e4);
  }, then: function(a2, r3) {
    var i3 = new t3();
    return this._handlers.push({ thisPromise: this, onResolve: a2, onReject: r3, nextPromise: i3 }), e3.scheduleHandlers(this), i3;
  } }, t3;
}();
var mt = function() {
  function e3(e4, t4, a2) {
    for (; e4.length < a2; ) e4 += t4;
    return e4;
  }
  function t3() {
    this.started = {}, this.times = [], this.enabled = true;
  }
  return t3.prototype = { time: function(e4) {
    this.enabled && (e4 in this.started && Re("Timer is already running for " + e4), this.started[e4] = Date.now());
  }, timeEnd: function(e4) {
    this.enabled && (e4 in this.started || Re("Timer has not been started for " + e4), this.times.push({ name: e4, start: this.started[e4], end: Date.now() }), delete this.started[e4]);
  }, toString: function() {
    for (var t4 = this.times, a2 = "", r3 = 0, i3 = 0, n3 = t4.length; i3 < n3; ++i3) {
      var c3 = t4[i3].name;
      c3.length > r3 && (r3 = c3.length);
    }
    for (i3 = 0, n3 = t4.length; i3 < n3; ++i3) {
      var s3 = t4[i3], o3 = s3.end - s3.start;
      a2 += e3(s3.name, " ", r3) + " " + o3 + "ms\n";
    }
    return a2;
  } }, t3;
}();
function pt(e3, t3) {
  this.name = e3, this.comObj = t3, this.callbackIndex = 1, this.postMessageTransfers = true;
  var a2 = this.callbacks = {}, r3 = this.actionHandler = {};
  r3.console_log = [function(e4) {
    Fe.apply(null, e4);
  }], r3.console_error = "console" in ve ? [function(e4) {
    ve.console.error.apply(null, e4);
  }] : [function(e4) {
    Fe.apply(null, e4);
  }], r3._warn = [function(e4) {
    Re(e4);
  }], "object" == typeof t3 && (t3.onmessage = function(e4) {
    var i3 = e4.data;
    if (i3.isReply) {
      var n3 = i3.callbackId;
      if (i3.callbackId in a2) {
        var c3 = a2[n3];
        delete a2[n3], c3(i3.data);
      } else Oe("Cannot resolve callback " + n3);
    } else if (i3.action in r3) {
      var s3 = r3[i3.action];
      if (i3.callbackId) {
        var o3 = new gt();
        o3.then(function(e5) {
          t3.postMessage({ isReply: true, callbackId: i3.callbackId, data: e5 });
        }), s3[0].call(s3[1], i3.data, o3);
      } else s3[0].call(s3[1], i3.data);
    } else Oe("Unkown action from worker: " + i3.action);
  });
}
be.createBlob = function(e3, t3) {
  return new n2([e3], { type: t3 });
}, be.createObjectURL = function() {
  if ("undefined" != typeof URL && URL.createObjectURL) return function(e4, t3) {
    var a2 = be.createBlob(e4, t3);
    return URL.createObjectURL(a2);
  };
  var e3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
  return function(t3, a2) {
    for (var r3 = "data:" + a2 + ";base64,", i3 = 0, n3 = t3.length; i3 < n3; i3 += 3) {
      var c3 = 255 & t3[i3], s3 = 255 & t3[i3 + 1], o3 = 255 & t3[i3 + 2];
      r3 += e3[c3 >> 2] + e3[(3 & c3) << 4 | s3 >> 4] + e3[i3 + 1 < n3 ? (15 & s3) << 2 | o3 >> 6 : 64] + e3[i3 + 2 < n3 ? 63 & o3 : 64];
    }
    return r3;
  };
}(), pt.prototype = { on: function(e3, t3, a2) {
  var r3 = this.actionHandler;
  r3[e3] && Oe('There is already an actionName called "' + e3 + '"'), r3[e3] = [t3, a2];
}, send: function(e3, t3, a2, r3) {
  var i3 = { action: e3, data: t3 };
  if (a2) {
    var n3 = this.callbackIndex++;
    this.callbacks[n3] = a2, i3.callbackId = n3;
  }
  r3 && this.postMessageTransfers ? this.comObj.postMessage(i3, r3) : this.comObj.postMessage(i3);
} }, t2.p2jlog = Fe, t2.p2jinfo = Pe, t2.p2jwarn = Re, t2.p2jerror = Oe, t2.verbosity = function(e3) {
  ke = isNaN(e3) ? 1 : e3 <= 0 ? 0 : e3 >= 5 ? 5 : e3;
}, t2.verbosity();
var bt = function() {
  function e3() {
    Oe("should not call ColorSpace constructor");
  }
  return e3.prototype = { getRgb: function(e4, t3) {
    Oe("Should not call ColorSpace.getRgb");
  }, getRgbItem: function(e4, t3, a2, r3) {
    Oe("Should not call ColorSpace.getRgbItem");
  }, getRgbBuffer: function(e4, t3, a2, r3, i3, n3) {
    Oe("Should not call ColorSpace.getRgbBuffer");
  }, getOutputLength: function(e4) {
    Oe("Should not call ColorSpace.getOutputLength");
  }, isPassthrough: function(e4) {
    return false;
  }, createRgbBuffer: function(e4, t3, a2, r3) {
    if (this.isPassthrough(r3)) return e4.subarray(t3);
    var i3 = new Uint8Array(3 * a2), n3 = 1 << r3;
    if (1 === this.numComps && a2 > n3 && "DeviceGray" !== this.name && "DeviceRGB" !== this.name) {
      for (var c3 = r3 <= 8 ? new Uint8Array(n3) : new Uint16Array(n3), s3 = 0; s3 < n3; s3++) c3[s3] = s3;
      var o3 = new Uint8Array(3 * n3);
      this.getRgbBuffer(c3, 0, n3, o3, 0, r3);
      var f2 = 0;
      for (s3 = 0; s3 < a2; ++s3) {
        var l2 = 3 * e4[t3++];
        i3[f2++] = o3[l2], i3[f2++] = o3[l2 + 1], i3[f2++] = o3[l2 + 2];
      }
      return i3;
    }
    return this.getRgbBuffer(e4, t3, a2, i3, 0, r3), i3;
  }, usesZeroToOneRange: true }, e3.parse = function(t3, a2, r3) {
    var i3 = e3.parseToIR(t3, a2, r3);
    return i3 instanceof vt ? i3 : e3.fromIR(i3);
  }, e3.fromIR = function(t3) {
    var a2 = ft(t3) ? t3[0] : t3;
    switch (a2) {
      case "DeviceGrayCS":
        return this.singletons.gray;
      case "DeviceRgbCS":
        return this.singletons.rgb;
      case "DeviceCmykCS":
        return this.singletons.cmyk;
      case "CalGrayCS":
        var r3 = t3[1].WhitePoint, i3 = t3[1].BlackPoint, n3 = t3[1].Gamma;
        return new St(r3, i3, n3);
      case "PatternCS":
        var c3 = t3[1];
        return c3 && (c3 = e3.fromIR(c3)), new yt(c3);
      case "IndexedCS":
        var s3 = t3[1], o3 = t3[2], f2 = t3[3];
        return new kt(e3.fromIR(s3), o3, f2);
      case "AlternateCS":
        var l2 = t3[1], h3 = t3[2], u3 = t3[3];
        return new vt(l2, e3.fromIR(h3), Pt.fromIR(u3));
      case "LabCS":
        r3 = t3[1].WhitePoint, i3 = t3[1].BlackPoint;
        var d3 = t3[1].Range;
        return new Ct(r3, i3, d3);
      default:
        Oe("Unkown name " + a2);
    }
    return null;
  }, e3.parseToIR = function(t3, a2, r3) {
    if (ct(t3)) {
      var i3 = r3.get("ColorSpace");
      if (ot(i3)) {
        var n3 = i3.get(t3.name);
        n3 && (t3 = n3);
      }
    }
    var c3;
    if (ct(t3 = a2.fetchIfRef(t3))) switch (c3 = t3.name, this.mode = c3, c3) {
      case "DeviceGray":
      case "G":
        return "DeviceGrayCS";
      case "DeviceRGB":
      case "RGB":
        return "DeviceRgbCS";
      case "DeviceCMYK":
      case "CMYK":
        return "DeviceCmykCS";
      case "Pattern":
        return ["PatternCS", null];
      default:
        Oe("unrecognized colorspace " + c3);
    }
    else if (ft(t3)) switch (c3 = t3[0].name, this.mode = c3, c3) {
      case "DeviceGray":
      case "G":
        return "DeviceGrayCS";
      case "DeviceRGB":
      case "RGB":
      case "CalRGB":
        return "DeviceRgbCS";
      case "DeviceCMYK":
      case "CMYK":
        return "DeviceCmykCS";
      case "CalGray":
        return ["CalGrayCS", t3[1].getAll()];
      case "ICCBased":
        if (1 == (u3 = a2.fetchIfRef(t3[1]).dict.get("N"))) return "DeviceGrayCS";
        if (3 == u3) return "DeviceRgbCS";
        if (4 == u3) return "DeviceCmykCS";
        break;
      case "Pattern":
        var s3 = t3[1];
        return s3 && (s3 = e3.parseToIR(s3, a2, r3)), ["PatternCS", s3];
      case "Indexed":
      case "I":
        var o3 = e3.parseToIR(t3[1], a2, r3), f2 = t3[2] + 1, l2 = a2.fetchIfRef(t3[3]);
        return lt(l2) && (l2 = l2.getBytes()), ["IndexedCS", o3, f2, l2];
      case "Separation":
      case "DeviceN":
        var h3 = t3[1], u3 = 1;
        return ct(h3) ? u3 = 1 : ft(h3) && (u3 = h3.length), ["AlternateCS", u3, e3.parseToIR(t3[2], a2, r3), Pt.getIR(a2, a2.fetchIfRef(t3[3]))];
      case "Lab":
        return ["LabCS", t3[1].getAll()];
      default:
        Oe('unimplemented color space object "' + c3 + '"');
    }
    else Oe('unrecognized color space object: "' + t3 + '"');
    return null;
  }, e3.isDefaultDecode = function(e4, t3) {
    if (!e4) return true;
    if (2 * t3 !== e4.length) return Re("The decode map is not the correct length"), true;
    for (var a2 = 0, r3 = e4.length; a2 < r3; a2 += 2) if (0 !== e4[a2] || 1 != e4[a2 + 1]) return false;
    return true;
  }, e3.singletons = { get gray() {
    return Ue(this, "gray", new At());
  }, get rgb() {
    return Ue(this, "rgb", new wt());
  }, get cmyk() {
    return Ue(this, "cmyk", new xt());
  } }, e3;
}();
var vt = function() {
  function e3(e4, t3, a2) {
    this.name = "Alternate", this.numComps = e4, this.defaultColor = new Float32Array(e4);
    for (var r3 = 0; r3 < e4; ++r3) this.defaultColor[r3] = 1;
    this.base = t3, this.tintFn = a2;
  }
  return e3.prototype = { getRgb: function(e4, t3) {
    var a2 = new Uint8Array(3);
    return this.getRgbItem(e4, t3, a2, 0), a2;
  }, getRgbItem: function(e4, t3, a2, r3) {
    this.base.numComps;
    var i3 = "subarray" in e4 ? e4.subarray(t3, t3 + this.numComps) : Array.prototype.slice.call(e4, t3, t3 + this.numComps), n3 = this.tintFn(i3);
    this.base.getRgbItem(n3, 0, a2, r3);
  }, getRgbBuffer: function(e4, t3, a2, r3, i3, n3) {
    for (var c3 = this.tintFn, s3 = this.base, o3 = 1 / ((1 << n3) - 1), f2 = s3.numComps, l2 = s3.usesZeroToOneRange, h3 = s3.isPassthrough(8) || !l2, u3 = h3 ? i3 : 0, d3 = h3 ? r3 : new Uint8Array(f2 * a2), g2 = this.numComps, m3 = new Float32Array(g2), p3 = 0; p3 < a2; p3++) {
      for (var b3 = 0; b3 < g2; b3++) m3[b3] = e4[t3++] * o3;
      var v3 = c3(m3);
      if (l2) for (b3 = 0; b3 < f2; b3++) d3[u3++] = 255 * v3[b3];
      else s3.getRgbItem(v3, 0, d3, u3), u3 += f2;
    }
    h3 || s3.getRgbBuffer(d3, 0, a2, r3, i3, 8);
  }, getOutputLength: function(e4) {
    return this.base.getOutputLength(e4 * this.base.numComps / this.numComps);
  }, isPassthrough: bt.prototype.isPassthrough, createRgbBuffer: bt.prototype.createRgbBuffer, isDefaultDecode: function(e4) {
    return bt.isDefaultDecode(e4, this.numComps);
  }, usesZeroToOneRange: true }, e3;
}();
var yt = function() {
  function e3(e4) {
    this.name = "Pattern", this.base = e4;
  }
  return e3.prototype = {}, e3;
}();
var kt = function() {
  function e3(e4, t3, a2) {
    this.name = "Indexed", this.numComps = 1, this.defaultColor = new Uint8Array([0]), this.base = e4, this.highVal = t3;
    var r3, i3 = e4.numComps * t3;
    if (lt(a2)) {
      r3 = new Uint8Array(i3);
      var n3 = a2.getBytes(i3);
      r3.set(n3);
    } else if (nt(a2)) {
      r3 = new Uint8Array(i3);
      for (var c3 = 0; c3 < i3; ++c3) r3[c3] = a2.charCodeAt(c3);
    } else a2 instanceof Uint8Array || a2 instanceof Array ? r3 = a2 : Oe("Unrecognized lookup table: " + a2);
    this.lookup = r3;
  }
  return e3.prototype = { getRgb: function(e4, t3) {
    var a2 = this.base.numComps, r3 = e4[t3] * a2;
    return this.base.getRgb(this.lookup, r3);
  }, getRgbItem: function(e4, t3, a2, r3) {
    var i3 = this.base.numComps, n3 = e4[t3] * i3;
    this.base.getRgbItem(this.lookup, n3, a2, r3);
  }, getRgbBuffer: function(e4, t3, a2, r3, i3) {
    for (var n3 = this.base, c3 = n3.numComps, s3 = n3.getOutputLength(c3), o3 = this.lookup, f2 = 0; f2 < a2; ++f2) {
      var l2 = e4[t3++] * c3;
      n3.getRgbBuffer(o3, l2, 1, r3, i3, 8), i3 += s3;
    }
  }, getOutputLength: function(e4) {
    return this.base.getOutputLength(e4 * this.base.numComps);
  }, isPassthrough: bt.prototype.isPassthrough, createRgbBuffer: bt.prototype.createRgbBuffer, isDefaultDecode: function(e4) {
    return true;
  }, usesZeroToOneRange: true }, e3;
}();
var At = function() {
  function e3() {
    this.name = "DeviceGray", this.numComps = 1, this.defaultColor = new Float32Array([0]);
  }
  return e3.prototype = { getRgb: function(e4, t3) {
    var a2 = new Uint8Array(3);
    return this.getRgbItem(e4, t3, a2, 0), a2;
  }, getRgbItem: function(e4, t3, a2, r3) {
    var i3 = 255 * e4[t3] | 0;
    i3 = i3 < 0 ? 0 : i3 > 255 ? 255 : i3, a2[r3] = a2[r3 + 1] = a2[r3 + 2] = i3;
  }, getRgbBuffer: function(e4, t3, a2, r3, i3, n3) {
    for (var c3 = 255 / ((1 << n3) - 1), s3 = t3, o3 = i3, f2 = 0; f2 < a2; ++f2) {
      var l2 = c3 * e4[s3++] | 0;
      r3[o3++] = l2, r3[o3++] = l2, r3[o3++] = l2;
    }
  }, getOutputLength: function(e4) {
    return 3 * e4;
  }, isPassthrough: bt.prototype.isPassthrough, createRgbBuffer: bt.prototype.createRgbBuffer, isDefaultDecode: function(e4) {
    return bt.isDefaultDecode(e4, this.numComps);
  }, usesZeroToOneRange: true }, e3;
}();
var wt = function() {
  function e3() {
    this.name = "DeviceRGB", this.numComps = 3, this.defaultColor = new Float32Array([0, 0, 0]);
  }
  return e3.prototype = { getRgb: function(e4, t3) {
    var a2 = new Uint8Array(3);
    return this.getRgbItem(e4, t3, a2, 0), a2;
  }, getRgbItem: function(e4, t3, a2, r3) {
    var i3 = 255 * e4[t3] | 0, n3 = 255 * e4[t3 + 1] | 0, c3 = 255 * e4[t3 + 2] | 0;
    a2[r3] = i3 < 0 ? 0 : i3 > 255 ? 255 : i3, a2[r3 + 1] = n3 < 0 ? 0 : n3 > 255 ? 255 : n3, a2[r3 + 2] = c3 < 0 ? 0 : c3 > 255 ? 255 : c3;
  }, getRgbBuffer: function(e4, t3, a2, r3, i3, n3) {
    var c3 = 3 * a2;
    if (8 != n3) for (var s3 = 255 / ((1 << n3) - 1), o3 = t3, f2 = i3, l2 = 0; l2 < c3; ++l2) r3[f2++] = s3 * e4[o3++] | 0;
    else r3.set(e4.subarray(t3, t3 + c3), i3);
  }, getOutputLength: function(e4) {
    return e4;
  }, isPassthrough: function(e4) {
    return 8 == e4;
  }, createRgbBuffer: bt.prototype.createRgbBuffer, isDefaultDecode: function(e4) {
    return bt.isDefaultDecode(e4, this.numComps);
  }, usesZeroToOneRange: true }, e3;
}();
var xt = function() {
  function e3(e4, t4, a2, r3, i3) {
    var n3 = e4[t4 + 0] * a2, c3 = e4[t4 + 1] * a2, s3 = e4[t4 + 2] * a2, o3 = e4[t4 + 3] * a2, f2 = n3 * (-4.387332384609988 * n3 + 54.48615194189176 * c3 + 18.82290502165302 * s3 + 212.25662451639585 * o3 - 285.2331026137004) + c3 * (1.7149763477362134 * c3 - 5.6096736904047315 * s3 + -17.873870861415444 * o3 - 5.497006427196366) + s3 * (-2.5217340131683033 * s3 - 21.248923337353073 * o3 + 17.5119270841813) + o3 * (-21.86122147463605 * o3 - 189.48180835922747) + 255, l2 = n3 * (8.841041422036149 * n3 + 60.118027045597366 * c3 + 6.871425592049007 * s3 + 31.159100130055922 * o3 - 79.2970844816548) + c3 * (-15.310361306967817 * c3 + 17.575251261109482 * s3 + 131.35250912493976 * o3 - 190.9453302588951) + s3 * (4.444339102852739 * s3 + 9.8632861493405 * o3 - 24.86741582555878) + o3 * (-20.737325471181034 * o3 - 187.80453709719578) + 255, h3 = n3 * (0.8842522430003296 * n3 + 8.078677503112928 * c3 + 30.89978309703729 * s3 - 0.23883238689178934 * o3 - 14.183576799673286) + c3 * (10.49593273432072 * c3 + 63.02378494754052 * s3 + 50.606957656360734 * o3 - 112.23884253719248) + s3 * (0.03296041114873217 * s3 + 115.60384449646641 * o3 - 193.58209356861505) + o3 * (-22.33816807309886 * o3 - 180.12613974708367) + 255;
    r3[i3] = f2 > 255 ? 255 : f2 < 0 ? 0 : f2, r3[i3 + 1] = l2 > 255 ? 255 : l2 < 0 ? 0 : l2, r3[i3 + 2] = h3 > 255 ? 255 : h3 < 0 ? 0 : h3;
  }
  function t3() {
    this.name = "DeviceCMYK", this.numComps = 4, this.defaultColor = new Float32Array([0, 0, 0, 1]);
  }
  return t3.prototype = { getRgb: function(t4, a2) {
    var r3 = new Uint8Array(3);
    return e3(t4, a2, 1, r3, 0), r3;
  }, getRgbItem: function(t4, a2, r3, i3) {
    e3(t4, a2, 1, r3, i3);
  }, getRgbBuffer: function(t4, a2, r3, i3, n3, c3) {
    for (var s3 = 1 / ((1 << c3) - 1), o3 = 0; o3 < r3; o3++) e3(t4, a2, s3, i3, n3), a2 += 4, n3 += 3;
  }, getOutputLength: function(e4) {
    return 3 * (e4 >> 2);
  }, isPassthrough: bt.prototype.isPassthrough, createRgbBuffer: bt.prototype.createRgbBuffer, isDefaultDecode: function(e4) {
    return bt.isDefaultDecode(e4, this.numComps);
  }, usesZeroToOneRange: true }, t3;
}();
var St = function() {
  function e3(e4, t3, a2) {
    this.name = "CalGray", this.numComps = 3, this.defaultColor = new Float32Array([0, 0, 0]), e4 || Oe("WhitePoint missing - required for color space CalGray"), t3 = t3 || [0, 0, 0], a2 = a2 || 1, this.XW = e4[0], this.YW = e4[1], this.ZW = e4[2], this.XB = t3[0], this.YB = t3[1], this.ZB = t3[2], this.G = a2, (this.XW < 0 || this.ZW < 0 || 1 !== this.YW) && Oe("Invalid WhitePoint components for " + this.name + ", no fallback available"), (this.XB < 0 || this.YB < 0 || this.ZB < 0) && (Pe("Invalid BlackPoint for " + this.name + ", falling back to default"), this.XB = this.YB = this.ZB = 0), 0 === this.XB && 0 === this.YB && 0 === this.ZB || Me(this.name + ", BlackPoint: XB: " + this.XB + ", YB: " + this.YB + ", ZB: " + this.ZB + ", only default values are supported."), this.G < 1 && (Pe("Invalid Gamma: " + this.G + " for " + this.name + ", falling back to default"), this.G = 1);
  }
  return e3.prototype = { getRgb: function(e4, t3) {
    var a2 = new Uint8Array(3);
    return this.getRgbItem(e4, t3, a2, 0), a2;
  }, getRgbItem: function(e4, t3, a2, r3) {
    var i3 = e4[t3], n3 = Math.pow(i3, this.G), c3 = (this.XW, this.YW * n3), s3 = (this.ZW, Math.max(116 * Math.pow(c3, 1 / 3) - 16, 0));
    a2[r3] = 255 * s3 / 100, a2[r3 + 1] = 255 * s3 / 100, a2[r3 + 2] = 255 * s3 / 100;
  }, getRgbBuffer: function(e4, t3, a2, r3, i3, n3) {
    for (var c3 = 255 / ((1 << n3) - 1), s3 = t3, o3 = i3, f2 = 0; f2 < a2; ++f2) {
      var l2 = c3 * e4[s3++] | 0;
      r3[o3++] = l2, r3[o3++] = l2, r3[o3++] = l2;
    }
  }, getOutputLength: function(e4) {
    return 3 * e4;
  }, isPassthrough: bt.prototype.isPassthrough, createRgbBuffer: bt.prototype.createRgbBuffer, isDefaultDecode: function(e4) {
    return bt.isDefaultDecode(e4, this.numComps);
  }, usesZeroToOneRange: true }, e3;
}();
var Ct = function() {
  function e3(e4, t4, a3) {
    this.name = "Lab", this.numComps = 3, this.defaultColor = new Float32Array([0, 0, 0]), e4 || Oe("WhitePoint missing - required for color space Lab"), t4 = t4 || [0, 0, 0], a3 = a3 || [-100, 100, -100, 100], this.XW = e4[0], this.YW = e4[1], this.ZW = e4[2], this.amin = a3[0], this.amax = a3[1], this.bmin = a3[2], this.bmax = a3[3], this.XB = t4[0], this.YB = t4[1], this.ZB = t4[2], (this.XW < 0 || this.ZW < 0 || 1 !== this.YW) && Oe("Invalid WhitePoint components, no fallback available"), (this.XB < 0 || this.YB < 0 || this.ZB < 0) && (Pe("Invalid BlackPoint, falling back to default"), this.XB = this.YB = this.ZB = 0), (this.amin > this.amax || this.bmin > this.bmax) && (Pe("Invalid Range, falling back to defaults"), this.amin = -100, this.amax = 100, this.bmin = -100, this.bmax = 100);
  }
  function t3(e4) {
    return e4 >= 6 / 29 ? e4 * e4 * e4 : 108 / 841 * (e4 - 4 / 29);
  }
  function a2(e4, t4, a3, r4) {
    return a3 + e4 * (r4 - a3) / t4;
  }
  function r3(e4, r4, i3, n3, c3, s3) {
    var o3 = r4[i3], f2 = r4[i3 + 1], l2 = r4[i3 + 2];
    false !== n3 && (o3 = a2(o3, n3, 0, 100), f2 = a2(f2, n3, e4.amin, e4.amax), l2 = a2(l2, n3, e4.bmin, e4.bmax));
    var h3, u3, d3, g2 = (o3 + 16) / 116, m3 = g2 + (f2 = f2 > e4.amax ? e4.amax : f2 < e4.amin ? e4.amin : f2) / 500, p3 = g2 - (l2 = l2 > e4.bmax ? e4.bmax : l2 < e4.bmin ? e4.bmin : l2) / 200, b3 = e4.XW * t3(m3), v3 = e4.YW * t3(g2), y3 = e4.ZW * t3(p3);
    e4.ZW < 1 ? (h3 = 3.1339 * b3 + -1.617 * v3 + -0.4906 * y3, u3 = -0.9785 * b3 + 1.916 * v3 + 0.0333 * y3, d3 = 0.072 * b3 + -0.229 * v3 + 1.4057 * y3) : (h3 = 3.2406 * b3 + -1.5372 * v3 + -0.4986 * y3, u3 = -0.9689 * b3 + 1.8758 * v3 + 0.0415 * y3, d3 = 0.0557 * b3 + -0.204 * v3 + 1.057 * y3), c3[s3] = 255 * Math.sqrt(h3 < 0 ? 0 : h3 > 1 ? 1 : h3), c3[s3 + 1] = 255 * Math.sqrt(u3 < 0 ? 0 : u3 > 1 ? 1 : u3), c3[s3 + 2] = 255 * Math.sqrt(d3 < 0 ? 0 : d3 > 1 ? 1 : d3);
  }
  return e3.prototype = { getRgb: function(e4, t4) {
    var a3 = new Uint8Array(3);
    return r3(this, e4, t4, false, a3, 0), a3;
  }, getRgbItem: function(e4, t4, a3, i3) {
    r3(this, e4, t4, false, a3, i3);
  }, getRgbBuffer: function(e4, t4, a3, i3, n3, c3) {
    for (var s3 = (1 << c3) - 1, o3 = 0; o3 < a3; o3++) r3(this, e4, t4, s3, i3, n3), t4 += 3, n3 += 3;
  }, getOutputLength: function(e4) {
    return e4;
  }, createRgbBuffer: bt.prototype.createRgbBuffer, isPassthrough: bt.prototype.isPassthrough, isDefaultDecode: function(e4) {
    return true;
  }, usesZeroToOneRange: false }, e3;
}();
var It = 2;
var Bt = 3;
var Tt = function() {
  function e3() {
    Oe("should not call Pattern constructor");
  }
  return e3.prototype = { getPattern: function(e4) {
    Oe("Should not call Pattern.getStyle: " + e4);
  } }, e3.shadingFromIR = function(e4) {
    return Lt[e4[0]].fromIR(e4);
  }, e3.parseShading = function(e4, t3, a2, r3) {
    var i3 = lt(e4) ? e4.dict : e4, n3 = i3.get("ShadingType");
    switch (n3) {
      case It:
      case Bt:
        return new Lt.RadialAxial(i3, t3, a2, r3);
      default:
        return Me("Unsupported shading type: " + n3), new Lt.Dummy();
    }
  }, e3;
}();
var Lt = { SMALL_NUMBER: 0.01 };
Lt.RadialAxial = function() {
  function e3(e4, t3, a2, r3, i3) {
    this.matrix = t3, this.coordsArr = e4.get("Coords"), this.shadingType = e4.get("ShadingType"), this.type = "Pattern", this.ctx = i3;
    var n3 = e4.get("ColorSpace", "CS");
    n3 = bt.parse(n3, a2, r3), this.cs = n3;
    var c3 = 0, s3 = 1;
    if (e4.has("Domain")) {
      var o3 = e4.get("Domain");
      c3 = o3[0], s3 = o3[1];
    }
    var f2 = false, l2 = false;
    if (e4.has("Extend")) {
      var h3 = e4.get("Extend");
      f2 = h3[0], l2 = h3[1];
    }
    if (!(this.shadingType !== Bt || f2 && l2)) {
      var u3 = this.coordsArr[0], d3 = this.coordsArr[1], g2 = this.coordsArr[2], m3 = this.coordsArr[3], p3 = this.coordsArr[4], b3 = this.coordsArr[5], v3 = Math.sqrt((u3 - m3) * (u3 - m3) + (d3 - p3) * (d3 - p3));
      g2 <= b3 + v3 && b3 <= g2 + v3 && Re("Unsupported radial gradient.");
    }
    this.extendStart = f2, this.extendEnd = l2;
    var y3, k3 = e4.get("Function");
    if (ft(k3)) {
      for (var A3 = [], w3 = 0, x3 = k3.length; w3 < x3; w3++) {
        var S3 = a2.fetchIfRef(k3[w3]);
        dt(S3) || Oe("Invalid function"), A3.push(Pt.parse(a2, S3));
      }
      y3 = function(e5) {
        for (var t4 = [], a3 = 0, r4 = A3.length; a3 < r4; a3++) t4.push(A3[a3](e5)[0]);
        return t4;
      };
    } else dt(k3) || Oe("Invalid function"), y3 = Pt.parse(a2, k3);
    var C2 = s3 - c3, I3 = C2 / 10, B3 = this.colorStops = [];
    if (c3 >= s3 || I3 <= 0) Pe("Bad shading domain.");
    else {
      for (var T3 = c3; T3 <= s3; T3 += I3) {
        var L2 = n3.getRgb(y3([T3]), 0), F2 = Qe.makeCssRgb(L2);
        B3.push([(T3 - c3) / C2, F2]);
      }
      var P3 = "transparent";
      if (e4.has("Background")) {
        L2 = n3.getRgb(e4.get("Background"), 0);
        P3 = Qe.makeCssRgb(L2);
      }
      f2 || (B3.unshift([0, P3]), B3[1][0] += Lt.SMALL_NUMBER), l2 || (B3[B3.length - 1][0] -= Lt.SMALL_NUMBER, B3.push([1, P3])), this.colorStops = B3;
    }
  }
  return e3.fromIR = function(e4) {
    var t3 = e4[1], a2 = e4[2], r3 = e4[3], i3 = e4[4], n3 = e4[5], c3 = e4[6];
    return { type: "Pattern", getPattern: function(e5) {
      var s3;
      t3 == It ? s3 = e5.createLinearGradient(r3[0], r3[1], i3[0], i3[1]) : t3 == Bt && (s3 = e5.createRadialGradient(r3[0], r3[1], n3, i3[0], i3[1], c3));
      for (var o3 = 0, f2 = a2.length; o3 < f2; ++o3) {
        var l2 = a2[o3];
        s3.addColorStop(l2[0], l2[1]);
      }
      return s3;
    } };
  }, e3.prototype = { getIR: function() {
    var e4 = this.coordsArr, t3 = this.shadingType;
    if (t3 == It) var a2 = [e4[0], e4[1]], r3 = [e4[2], e4[3]], i3 = null, n3 = null;
    else if (t3 == Bt) a2 = [e4[0], e4[1]], r3 = [e4[3], e4[4]], i3 = e4[2], n3 = e4[5];
    else Oe("getPattern type unknown: " + t3);
    var c3 = this.matrix;
    return c3 && (a2 = Qe.applyTransform(a2, c3), r3 = Qe.applyTransform(r3, c3)), ["RadialAxial", t3, this.colorStops, a2, r3, i3, n3];
  } }, e3;
}(), Lt.Dummy = function() {
  function e3() {
    this.type = "Pattern";
  }
  return e3.fromIR = function() {
    return { type: "Pattern", getPattern: function() {
      return "hotpink";
    } };
  }, e3.prototype = { getIR: function() {
    return ["Dummy"];
  } }, e3;
}();
var Ft = function() {
  var e3 = 1, t3 = 2;
  function a2(e4, t4, a3, r3, i3, n3) {
    this.name = e4[1][0].name, this.operatorList = e4[2], this.matrix = e4[3] || [1, 0, 0, 1, 0, 0], this.bbox = e4[4], this.xstep = e4[5], this.ystep = e4[6], this.paintType = e4[7], this.tilingType = e4[8], this.color = t4, this.objs = r3, this.commonObjs = i3, this.baseTransform = n3, this.type = "Pattern", this.ctx = a3;
  }
  return a2.getIR = function(e4, t4, a3) {
    return ["TilingPattern", a3, e4, t4.get("Matrix"), t4.get("BBox"), t4.get("XStep"), t4.get("YStep"), t4.get("PaintType"), t4.get("TilingType")];
  }, a2.prototype = { createPatternCanvas: function(e4) {
    var t4 = this.operatorList, a3 = this.bbox, r3 = this.xstep, i3 = this.ystep, n3 = this.paintType, c3 = this.tilingType, s3 = this.color, o3 = this.objs, f2 = this.commonObjs;
    this.ctx;
    Me("TilingType: " + c3);
    var l2 = a3[0], h3 = a3[1], u3 = a3[2], d3 = a3[3], g2 = [l2, h3], m3 = [l2 + r3, h3 + i3], p3 = m3[0] - g2[0], b3 = m3[1] - g2[1], v3 = Qe.singularValueDecompose2dScale(this.matrix), y3 = Qe.singularValueDecompose2dScale(this.baseTransform), k3 = [v3[0] * y3[0], v3[1] * y3[1]];
    p3 = Math.min(Math.ceil(Math.abs(p3 * k3[0])), 3e3), b3 = Math.min(Math.ceil(Math.abs(b3 * k3[1])), 3e3);
    var A3 = Kr.getCanvas("pattern", p3, b3, true), w3 = A3.context, x3 = new Qr(w3, f2, o3);
    x3.groupLevel = e4.groupLevel, this.setFillAndStrokeStyleToContext(w3, n3, s3), this.setScale(p3, b3, r3, i3), this.transformToScale(x3);
    var S3 = [1, 0, 0, 1, -g2[0], -g2[1]];
    return x3.transform.apply(x3, S3), this.clipBbox(x3, a3, l2, h3, u3, d3), x3.executeOperatorList(t4), A3.canvas;
  }, setScale: function(e4, t4, a3, r3) {
    this.scale = [e4 / a3, t4 / r3];
  }, transformToScale: function(e4) {
    var t4 = this.scale, a3 = [t4[0], 0, 0, t4[1], 0, 0];
    e4.transform.apply(e4, a3);
  }, scaleToContext: function() {
    var e4 = this.scale;
    this.ctx.scale(1 / e4[0], 1 / e4[1]);
  }, clipBbox: function(e4, t4, a3, r3, i3, n3) {
    if (t4 && ft(t4) && 4 == t4.length) {
      var c3 = i3 - a3, s3 = n3 - r3;
      e4.rectangle(a3, r3, c3, s3), e4.clip(), e4.endPath();
    }
  }, setFillAndStrokeStyleToContext: function(a3, r3, i3) {
    switch (r3) {
      case e3:
        var n3 = this.ctx;
        a3.fillStyle = n3.fillStyle, a3.strokeStyle = n3.strokeStyle;
        break;
      case t3:
        var c3 = bt.singletons.rgb.getRgb(i3, 0), s3 = Qe.makeCssRgb(c3);
        a3.fillStyle = s3, a3.strokeStyle = s3;
        break;
      default:
        Oe("Unsupported paint type: " + r3);
    }
  }, getPattern: function(e4, t4) {
    var a3 = this.createPatternCanvas(t4);
    return (e4 = this.ctx).setTransform.apply(e4, this.baseTransform), e4.transform.apply(e4, this.matrix), this.scaleToContext(), e4.createPattern(a3, "repeat");
  } }, a2;
}();
var Pt = { getSampleArray: function(e3, t3, a2, r3) {
  for (var i3 = 1, n3 = 0, c3 = e3.length; n3 < c3; n3++) i3 *= e3[n3];
  i3 *= t3;
  var s3 = [], o3 = 0, f2 = 0, l2 = 1 / (Math.pow(2, a2) - 1), h3 = r3.getBytes((i3 * a2 + 7) / 8), u3 = 0;
  for (n3 = 0; n3 < i3; n3++) {
    for (; o3 < a2; ) f2 <<= 8, f2 |= h3[u3++], o3 += 8;
    o3 -= a2, s3.push((f2 >> o3) * l2), f2 &= (1 << o3) - 1;
  }
  return s3;
}, getIR: function(e3, t3) {
  var a2 = t3.dict;
  a2 || (a2 = t3);
  var r3 = [this.constructSampled, null, this.constructInterpolated, this.constructStiched, this.constructPostScript][a2.get("FunctionType")];
  return r3 || Oe("Unknown type of function"), r3.call(this, t3, a2, e3);
}, fromIR: function(e3) {
  switch (e3[0]) {
    case 0:
      return this.constructSampledFromIR(e3);
    case 2:
      return this.constructInterpolatedFromIR(e3);
    case 3:
      return this.constructStichedFromIR(e3);
    default:
      return this.constructPostScriptFromIR(e3);
  }
}, parse: function(e3, t3) {
  var a2 = this.getIR(e3, t3);
  return this.fromIR(a2);
}, constructSampled: function(e3, t3) {
  function a2(e4) {
    for (var t4 = e4.length, a3 = (e4.length, []), r4 = 0, i4 = 0; i4 < t4; i4 += 2) a3[r4] = [e4[i4], e4[i4 + 1]], ++r4;
    return a3;
  }
  var r3 = t3.get("Domain"), i3 = t3.get("Range");
  r3 && i3 || Oe("No domain or range");
  var n3 = r3.length / 2, c3 = i3.length / 2;
  r3 = a2(r3), i3 = a2(i3);
  var s3 = t3.get("Size"), o3 = t3.get("BitsPerSample"), f2 = t3.get("Order") || 1;
  1 !== f2 && Me("No support for cubic spline interpolation: " + f2);
  var l2 = t3.get("Encode");
  if (!l2) {
    l2 = [];
    for (var h3 = 0; h3 < n3; ++h3) l2.push(0), l2.push(s3[h3] - 1);
  }
  l2 = a2(l2);
  var u3 = t3.get("Decode");
  return [0, n3, r3, l2, u3 = u3 ? a2(u3) : i3, this.getSampleArray(s3, c3, o3, e3), s3, c3, Math.pow(2, o3) - 1, i3];
}, constructSampledFromIR: function(e3) {
  function t3(e4, t4, a2, r3, i3) {
    return r3 + (i3 - r3) / (a2 - t4) * (e4 - t4);
  }
  return function(a2) {
    var r3 = e3[1], i3 = e3[2], n3 = e3[3], c3 = e3[4], s3 = e3[5], o3 = e3[6], f2 = e3[7], l2 = (e3[8], e3[9]);
    r3 != a2.length && Oe("Incorrect number of arguments: " + r3 + " != " + a2.length);
    for (var h3 = a2, u3 = 1 << r3, d3 = new Float64Array(u3), g2 = new Uint32Array(u3), m3 = 0; m3 < u3; m3++) d3[m3] = 1;
    for (var p3 = f2, b3 = 1, v3 = 0; v3 < r3; ++v3) {
      var y3 = i3[v3][0], k3 = i3[v3][1], A3 = t3(Math.min(Math.max(h3[v3], y3), k3), y3, k3, n3[v3][0], n3[v3][1]), w3 = o3[v3], x3 = (A3 = Math.min(Math.max(A3, 0), w3 - 1)) < w3 - 1 ? Math.floor(A3) : A3 - 1, S3 = x3 + 1 - A3, C2 = A3 - x3, I3 = x3 * p3, B3 = I3 + p3;
      for (m3 = 0; m3 < u3; m3++) m3 & b3 ? (d3[m3] *= C2, g2[m3] += B3) : (d3[m3] *= S3, g2[m3] += I3);
      p3 *= w3, b3 <<= 1;
    }
    var T3 = new Float64Array(f2);
    for (m3 = 0; m3 < f2; ++m3) {
      var L2 = 0;
      for (v3 = 0; v3 < u3; v3++) L2 += s3[g2[v3] + m3] * d3[v3];
      L2 = t3(L2, 0, 1, c3[m3][0], c3[m3][1]), T3[m3] = Math.min(Math.max(L2, l2[m3][0]), l2[m3][1]);
    }
    return T3;
  };
}, constructInterpolated: function(e3, t3) {
  var a2 = t3.get("C0") || [0], r3 = t3.get("C1") || [1], i3 = t3.get("N");
  ft(a2) && ft(r3) || Oe("Illegal dictionary for interpolated function");
  for (var n3 = a2.length, c3 = [], s3 = 0; s3 < n3; ++s3) c3.push(r3[s3] - a2[s3]);
  return [2, a2, c3, i3];
}, constructInterpolatedFromIR: function(e3) {
  var t3 = e3[1], a2 = e3[2], r3 = e3[3], i3 = a2.length;
  return function(e4) {
    for (var n3 = 1 == r3 ? e4[0] : Math.pow(e4[0], r3), c3 = [], s3 = 0; s3 < i3; ++s3) c3.push(t3[s3] + n3 * a2[s3]);
    return c3;
  };
}, constructStiched: function(e3, t3, a2) {
  var r3 = t3.get("Domain");
  r3 || Oe("No domain"), 1 != r3.length / 2 && Oe("Bad domain for stiched function");
  for (var i3 = t3.get("Functions"), n3 = [], c3 = 0, s3 = i3.length; c3 < s3; ++c3) n3.push(Pt.getIR(a2, a2.fetchIfRef(i3[c3])));
  return [3, r3, t3.get("Bounds"), t3.get("Encode"), n3];
}, constructStichedFromIR: function(e3) {
  for (var t3 = e3[1], a2 = e3[2], r3 = e3[3], i3 = e3[4], n3 = [], c3 = 0, s3 = i3.length; c3 < s3; c3++) n3.push(Pt.fromIR(i3[c3]));
  return function(e4) {
    for (var i4 = function(e5, t4, a3) {
      return e5 > a3 ? e5 = a3 : e5 < t4 && (e5 = t4), e5;
    }(e4[0], t3[0], t3[1]), c4 = 0, s4 = a2.length; c4 < s4 && !(i4 < a2[c4]); ++c4) ;
    var o3 = t3[0];
    c4 > 0 && (o3 = a2[c4 - 1]);
    var f2 = t3[1];
    c4 < a2.length && (f2 = a2[c4]);
    var l2 = r3[2 * c4], h3 = l2 + (i4 - o3) * (r3[2 * c4 + 1] - l2) / (f2 - o3);
    return n3[c4]([h3]);
  };
}, constructPostScript: function(e3, t3, a2) {
  var r3 = t3.get("Domain"), i3 = t3.get("Range");
  r3 || Oe("No domain."), i3 || Oe("No range.");
  var n3 = new Nt(e3);
  return [4, r3, i3, new Dt(n3).parse()];
}, constructPostScriptFromIR: function(e3) {
  var t3 = e3[1], a2 = e3[2], r3 = e3[3], i3 = a2.length / 2, n3 = new Mt(r3), c3 = new Rt();
  return function(e4) {
    for (var r4 = [], s3 = 0, o3 = t3.length / 2; s3 < o3; ++s3) r4.push(e4[s3]);
    var f2 = r4.join("_");
    if (c3.has(f2)) return c3.get(f2);
    var l2 = n3.execute(r4), h3 = [];
    for (s3 = i3 - 1; s3 >= 0; --s3) {
      var u3 = l2.pop(), d3 = 2 * s3;
      u3 < a2[d3] ? u3 = a2[d3] : u3 > a2[d3 + 1] && (u3 = a2[d3 + 1]), h3[s3] = u3;
    }
    return c3.set(f2, h3), h3;
  };
} };
var Rt = function() {
  function e3() {
    this.cache = {}, this.total = 0;
  }
  return e3.prototype = { has: function(e4) {
    return e4 in this.cache;
  }, get: function(e4) {
    return this.cache[e4];
  }, set: function(e4, t3) {
    this.total < 1024 && (this.cache[e4] = t3, this.total++);
  } }, e3;
}();
var Ot = function() {
  function e3(e4) {
    this.stack = e4 || [];
  }
  return e3.prototype = { push: function(e4) {
    this.stack.length >= 100 && Oe("PostScript function stack overflow."), this.stack.push(e4);
  }, pop: function() {
    return this.stack.length <= 0 && Oe("PostScript function stack underflow."), this.stack.pop();
  }, copy: function(e4) {
    this.stack.length + e4 >= 100 && Oe("PostScript function stack overflow.");
    for (var t3 = this.stack, a2 = t3.length - e4, r3 = e4 - 1; r3 >= 0; r3--, a2++) t3.push(t3[a2]);
  }, index: function(e4) {
    this.push(this.stack[this.stack.length - e4 - 1]);
  }, roll: function(e4, t3) {
    var a2, r3, i3, n3 = this.stack, c3 = n3.length - e4, s3 = n3.length - 1, o3 = c3 + (t3 - Math.floor(t3 / e4) * e4);
    for (a2 = c3, r3 = s3; a2 < r3; a2++, r3--) i3 = n3[a2], n3[a2] = n3[r3], n3[r3] = i3;
    for (a2 = c3, r3 = o3 - 1; a2 < r3; a2++, r3--) i3 = n3[a2], n3[a2] = n3[r3], n3[r3] = i3;
    for (a2 = o3, r3 = s3; a2 < r3; a2++, r3--) i3 = n3[a2], n3[a2] = n3[r3], n3[r3] = i3;
  } }, e3;
}();
var Mt = function() {
  function e3(e4, t3) {
    this.operators = e4, this.operands = t3;
  }
  return e3.prototype = { execute: function(e4) {
    for (var t3, a2, r3, i3 = new Ot(e4), n3 = 0, c3 = this.operators, s3 = c3.length; n3 < s3; ) if ("number" != typeof (t3 = c3[n3++])) switch (t3) {
      case "jz":
        r3 = i3.pop(), (a2 = i3.pop()) || (n3 = r3);
        break;
      case "j":
        n3 = a2 = i3.pop();
        break;
      case "abs":
        a2 = i3.pop(), i3.push(Math.abs(a2));
        break;
      case "add":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 + r3);
        break;
      case "and":
        r3 = i3.pop(), at(a2 = i3.pop()) && at(r3) ? i3.push(a2 && r3) : i3.push(a2 & r3);
        break;
      case "atan":
        a2 = i3.pop(), i3.push(Math.atan(a2));
        break;
      case "bitshift":
        r3 = i3.pop(), (a2 = i3.pop()) > 0 ? i3.push(a2 << r3) : i3.push(a2 >> r3);
        break;
      case "ceiling":
        a2 = i3.pop(), i3.push(Math.ceil(a2));
        break;
      case "copy":
        a2 = i3.pop(), i3.copy(a2);
        break;
      case "cos":
        a2 = i3.pop(), i3.push(Math.cos(a2));
        break;
      case "cvi":
        a2 = 0 | i3.pop(), i3.push(a2);
        break;
      case "cvr":
        break;
      case "div":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 / r3);
        break;
      case "dup":
        i3.copy(1);
        break;
      case "eq":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 == r3);
        break;
      case "exch":
        i3.roll(2, 1);
        break;
      case "exp":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(Math.pow(a2, r3));
        break;
      case "false":
        i3.push(false);
        break;
      case "floor":
        a2 = i3.pop(), i3.push(Math.floor(a2));
        break;
      case "ge":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 >= r3);
        break;
      case "gt":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 > r3);
        break;
      case "idiv":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 / r3 | 0);
        break;
      case "index":
        a2 = i3.pop(), i3.index(a2);
        break;
      case "le":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 <= r3);
        break;
      case "ln":
        a2 = i3.pop(), i3.push(Math.log(a2));
        break;
      case "log":
        a2 = i3.pop(), i3.push(Math.log(a2) / Math.LN10);
        break;
      case "lt":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 < r3);
        break;
      case "mod":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 % r3);
        break;
      case "mul":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 * r3);
        break;
      case "ne":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 != r3);
        break;
      case "neg":
        a2 = i3.pop(), i3.push(-r3);
        break;
      case "not":
        at(a2 = i3.pop()) && at(r3) ? i3.push(a2 && r3) : i3.push(a2 & r3);
        break;
      case "or":
        r3 = i3.pop(), at(a2 = i3.pop()) && at(r3) ? i3.push(a2 || r3) : i3.push(a2 | r3);
        break;
      case "pop":
        i3.pop();
        break;
      case "roll":
        r3 = i3.pop(), a2 = i3.pop(), i3.roll(a2, r3);
        break;
      case "round":
        a2 = i3.pop(), i3.push(Math.round(a2));
        break;
      case "sin":
        a2 = i3.pop(), i3.push(Math.sin(a2));
        break;
      case "sqrt":
        a2 = i3.pop(), i3.push(Math.sqrt(a2));
        break;
      case "sub":
        r3 = i3.pop(), a2 = i3.pop(), i3.push(a2 - r3);
        break;
      case "true":
        i3.push(true);
        break;
      case "truncate":
        a2 = (a2 = i3.pop()) < 0 ? Math.ceil(a2) : Math.floor(a2), i3.push(a2);
        break;
      case "xor":
        r3 = i3.pop(), at(a2 = i3.pop()) && at(r3) ? i3.push(a2 != r3) : i3.push(a2 ^ r3);
        break;
      default:
        Oe("Unknown operator " + t3);
    }
    else i3.push(t3);
    return i3.stack;
  } }, e3;
}();
var Dt = function() {
  function e3(e4) {
    this.lexer = e4, this.operators = [], this.token = null, this.prev = null;
  }
  return e3.prototype = { nextToken: function() {
    this.prev = this.token, this.token = this.lexer.getToken();
  }, accept: function(e4) {
    return this.token.type == e4 && (this.nextToken(), true);
  }, expect: function(e4) {
    if (this.accept(e4)) return true;
    Oe("Unexpected symbol: found " + this.token.type + " expected " + e4 + ".");
  }, parse: function() {
    return this.nextToken(), this.expect(qt.LBRACE), this.parseBlock(), this.expect(qt.RBRACE), this.operators;
  }, parseBlock: function() {
    for (; ; ) if (this.accept(qt.NUMBER)) this.operators.push(this.prev.value);
    else if (this.accept(qt.OPERATOR)) this.operators.push(this.prev.value);
    else {
      if (!this.accept(qt.LBRACE)) return;
      this.parseCondition();
    }
  }, parseCondition: function() {
    var e4 = this.operators.length;
    if (this.operators.push(null, null), this.parseBlock(), this.expect(qt.RBRACE), this.accept(qt.IF)) this.operators[e4] = this.operators.length, this.operators[e4 + 1] = "jz";
    else if (this.accept(qt.LBRACE)) {
      var t3 = this.operators.length;
      this.operators.push(null, null);
      var a2 = this.operators.length;
      this.parseBlock(), this.expect(qt.RBRACE), this.expect(qt.IFELSE), this.operators[t3] = this.operators.length, this.operators[t3 + 1] = "j", this.operators[e4] = a2, this.operators[e4 + 1] = "jz";
    } else Oe("PS Function: error parsing conditional.");
  } }, e3;
}();
var qt = { LBRACE: 0, RBRACE: 1, NUMBER: 2, OPERATOR: 3, IF: 4, IFELSE: 5 };
var Et = function() {
  function e3(e4, t4) {
    this.type = e4, this.value = t4;
  }
  var t3 = {};
  return e3.getOperator = function(a2) {
    var r3 = t3[a2];
    return r3 || (t3[a2] = new e3(qt.OPERATOR, a2));
  }, e3.LBRACE = new e3(qt.LBRACE, "{"), e3.RBRACE = new e3(qt.RBRACE, "}"), e3.IF = new e3(qt.IF, "IF"), e3.IFELSE = new e3(qt.IFELSE, "IFELSE"), e3;
}();
var Nt = function() {
  function e3(e4) {
    this.stream = e4, this.nextChar();
  }
  return e3.prototype = { nextChar: function() {
    return this.currentChar = this.stream.getByte();
  }, getToken: function() {
    for (var e4 = false, t3 = this.currentChar; ; ) {
      if (t3 < 0) return hr;
      if (e4) 10 !== t3 && 13 !== t3 || (e4 = false);
      else if (37 == t3) e4 = true;
      else if (!gr.isSpace(t3)) break;
      t3 = this.nextChar();
    }
    switch (0 | t3) {
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 43:
      case 45:
      case 46:
        return new Et(qt.NUMBER, this.getNumber());
      case 123:
        return this.nextChar(), Et.LBRACE;
      case 125:
        return this.nextChar(), Et.RBRACE;
    }
    for (var a2 = String.fromCharCode(t3); (t3 = this.nextChar()) >= 0 && (t3 >= 65 && t3 <= 90 || t3 >= 97 && t3 <= 122); ) a2 += String.fromCharCode(t3);
    switch (a2.toLowerCase()) {
      case "if":
        return Et.IF;
      case "ifelse":
        return Et.IFELSE;
      default:
        return Et.getOperator(a2);
    }
  }, getNumber: function() {
    for (var e4 = this.currentChar, t3 = String.fromCharCode(e4); (e4 = this.nextChar()) >= 0 && (e4 >= 48 && e4 <= 57 || 45 === e4 || 46 === e4); ) t3 += String.fromCharCode(e4);
    var a2 = parseFloat(t3);
    return isNaN(a2) && Oe("Invalid floating point number: " + a2), a2;
  } }, e3;
}();
var jt = function() {
  function e3(e4) {
    if (e4.data) this.data = e4.data;
    else {
      var t3 = e4.dict, a2 = this.data = {};
      a2.subtype = t3.get("Subtype").name, a2.annotationFlags = t3.get("F"), this.getAndSetRectangle(t3), a2.rect = this.rectangle;
      var r3 = t3.get("C");
      if (ft(r3) && 3 === r3.length ? a2.color = r3 : a2.color = [0, 0, 0], t3.has("BS")) {
        var i3 = t3.get("BS");
        a2.borderWidth = i3.has("W") ? i3.get("W") : 1;
      } else {
        var n3 = t3.get("Border") || [0, 0, 1];
        a2.borderWidth = n3[2] || 0;
      }
      this.appearance = function(e5) {
        var t4 = e5.get("AP");
        if (ot(t4)) {
          var a3, r4 = t4.get("N");
          if (ot(r4)) {
            var i4 = e5.get("AS");
            i4 && r4.has(i4.name) && (a3 = r4.get(i4.name));
          } else a3 = r4;
          return a3;
        }
      }(t3), a2.hasAppearance = !!this.appearance;
    }
  }
  return e3.prototype = { setRectangle: function(e4) {
    ft(e4) && 4 === e4.length ? this.rectangle = Qe.normalizeRect(e4) : this.rectangle = [0, 0, 0, 0];
  }, getAndSetRectangle: function(e4) {
    var t3 = e4.get("Rect"), a2 = e4.xref;
    if (ft(t3) && 4 === t3.length) {
      for (var r3 = 0; r3 < 4; r3++) t3[r3] = "object" == typeof t3[r3] ? a2.fetchIfRef(t3[r3]) : t3[r3];
      this.setRectangle(t3);
    } else this.rectangle = [0, 0, 0, 0];
  }, getData: function() {
    return this.data;
  }, hasHtml: function() {
    return false;
  }, getHtmlElement: function(e4) {
    throw new We("getHtmlElement() should be implemented in subclass");
  }, getEmptyContainer: function(e4, t3) {
    De(!ye, "getEmptyContainer() should be called from main thread"), t3 = t3 || this.data.rect;
    var a2 = document.createElement(e4);
    return a2.style.width = Math.ceil(t3[2] - t3[0]) + "px", a2.style.height = Math.ceil(t3[3] - t3[1]) + "px", a2;
  }, isViewable: function() {
    var e4 = this.data;
    return !(!e4 || e4.annotationFlags && 34 & e4.annotationFlags || !e4.rect);
  }, loadResources: function(e4) {
    var t3 = new gt();
    return this.appearance.dict.getAsync("Resources").then(function(a2) {
      a2 ? new ia(a2.map, e4, a2.xref).load().then(function() {
        t3.resolve(a2);
      }) : t3.resolve();
    }.bind(this)), t3;
  }, getOperatorList: function(e4) {
    var t3 = new gt();
    if (!this.appearance) return t3.resolve(new ma()), t3;
    var a2 = this.data, r3 = this.appearance.dict, i3 = this.loadResources(["ExtGState", "ColorSpace", "Pattern", "Shading", "XObject", "Font"]), n3 = r3.get("BBox") || [0, 0, 1, 1], c3 = r3.get("Matrix") || [1, 0, 0, 1, 0, 0], s3 = function(e5, t4, a3) {
      var r4 = Qe.getAxialAlignedBoundingBox(t4, a3), i4 = r4[0], n4 = r4[1], c4 = r4[2], s4 = r4[3];
      if (i4 === c4 || n4 === s4) return [1, 0, 0, 1, e5[0], e5[1]];
      var o3 = (e5[2] - e5[0]) / (c4 - i4), f2 = (e5[3] - e5[1]) / (s4 - n4);
      return [o3, 0, 0, f2, e5[0] - i4 * o3, e5[1] - n4 * f2];
    }(a2.rect, n3, c3);
    a2.border;
    return i3.then(function(r4) {
      var i4 = new ma();
      i4.addOp(Be.beginAnnotation, [a2.rect, s3, c3]), e4.getOperatorList(this.appearance, r4, i4), i4.addOp(Be.endAnnotation, []), t3.resolve(i4);
    }.bind(this)), t3;
  } }, e3.getConstructor = function(t3, a2) {
    if (t3) {
      if ("Link" === t3) return Wt;
      if ("Text" === t3) return Xt;
      if ("Widget" === t3) {
        if (!a2) return;
        return "Tx" === a2 ? _t : Gt;
      }
      return e3;
    }
  }, e3.fromData = function(t3) {
    var a2 = t3.subtype, r3 = t3.fieldType, i3 = e3.getConstructor(a2, r3);
    if (i3) return new i3({ data: t3 });
  }, e3.fromRef = function(t3, a2) {
    var r3 = t3.fetchIfRef(a2);
    if (ot(r3)) {
      var i3 = r3.get("Subtype");
      if (i3 = ct(i3) ? i3.name : "") {
        var n3 = Qe.getInheritableProperty(r3, "FT");
        n3 = ct(n3) ? n3.name : "";
        var c3 = e3.getConstructor(i3, n3);
        if (c3) {
          var s3 = new c3({ dict: r3, ref: a2 });
          if (s3.isViewable()) return s3;
          Me("unimplemented/notViewable annotation type: " + i3);
        }
      }
    }
  }, e3.appendToOperatorList = function(e4, t3, a2, r3) {
    for (var i3 = new gt(), n3 = [], c3 = 0, s3 = e4.length; c3 < s3; ++c3) n3.push(e4[c3].getOperatorList(r3));
    return gt.all(n3).then(function(e5) {
      t3.addOp(Be.beginAnnotations, []);
      for (var a3 = 0, r4 = e5.length; a3 < r4; ++a3) {
        var n4 = e5[a3];
        t3.addOpList(n4);
      }
      t3.addOp(Be.endAnnotations, []), i3.resolve();
    }, function(e5) {
      i3.reject(e5);
    }), i3;
  }, e3;
}();
be.Annotation = jt;
var Ut;
var zt;
var Ht;
var Gt = function() {
  function e3(e4) {
    if (jt.call(this, e4), !e4.data) {
      var t4 = e4.dict, a2 = this.data, r3 = Qe.getInheritableProperty(t4, "V") || "", i3 = (r3.name ? r3.name : r3) || "";
      a2.fieldValue = et(i3), a2.alternativeText = et(t4.get("TU") || ""), a2.alternativeID = et(t4.get("TM") || ""), a2.defaultAppearance = Qe.getInheritableProperty(t4, "DA") || "";
      var n3 = Qe.getInheritableProperty(t4, "FT");
      a2.fieldType = ct(n3) ? n3.name : "", a2.fieldFlags = Qe.getInheritableProperty(t4, "Ff") || 0, this.fieldResources = Qe.getInheritableProperty(t4, "DR") || new Zt();
      var c3 = et(Qe.getInheritableProperty(t4, "T") || "");
      c3 = c3.replace(/[.\s\W]+/g, "_"), a2.fullName = c3.replace(/^[\s_,:.;\/\\]+/, ""), me.processAnnotation(t4, a2);
    }
  }
  var t3 = jt.prototype;
  return Qe.inherit(e3, jt, { isViewable: function() {
    return t3.isViewable.call(this);
  } }), e3;
}();
var _t = function() {
  function e3(e4) {
    Gt.call(this, e4), e4.data || (this.data.textAlignment = Qe.getInheritableProperty(e4.dict, "Q"));
  }
  Gt.prototype;
  return Qe.inherit(e3, Gt, { hasHtml: function() {
    return !this.data.hasAppearance && !!this.data.fieldValue;
  }, getHtmlElement: function(e4) {
    De(!ye, "getHtmlElement() shall be called from main thread");
    var t3 = this.data, a2 = this.getEmptyContainer("div");
    a2.style.display = "table";
    var r3 = document.createElement("div");
    r3.textContent = t3.fieldValue;
    var i3 = t3.textAlignment;
    r3.style.textAlign = ["left", "center", "right"][i3], r3.style.verticalAlign = "middle", r3.style.display = "table-cell";
    !function(e5, t4, a3) {
      var r4 = e5.style;
      if (r4.fontSize = t4.fontSize + "px", r4.direction = t4.fontDirection < 0 ? "rtl" : "ltr", a3) {
        r4.fontWeight = a3.black ? a3.bold ? "bolder" : "bold" : a3.bold ? "bold" : "normal", r4.fontStyle = a3.italic ? "italic" : "normal";
        var i4 = a3.loadedName, n3 = i4 ? '"' + i4 + '", ' : "", c3 = a3.fallbackName || "Helvetica, sans-serif";
        r4.fontFamily = n3 + c3;
      }
    }(r3, t3, t3.fontRefName ? e4.getData(t3.fontRefName) : null);
    return a2.appendChild(r3), a2;
  }, getOperatorList: function(e4) {
    if (this.appearance) return jt.prototype.getOperatorList.call(this, e4);
    var t3 = new gt(), a2 = new ma(), r3 = this.data, i3 = r3.defaultAppearance;
    if (!i3) return t3.resolve(a2), t3;
    var n3 = new pr(Ke(i3));
    e4.getOperatorList(n3, this.fieldResources, a2);
    var c3 = a2.fnArray, s3 = a2.argsArray;
    r3.rgb = [0, 0, 0];
    for (var o3 = 0; o3 < 0; ++o3) {
      var f2 = c3[o3], l2 = s3[o3];
      if (f2 === Be.setFont) {
        r3.fontRefName = l2[0];
        var h3 = l2[1];
        h3 < 0 ? (r3.fontDirection = -1, r3.fontSize = -h3) : (r3.fontDirection = 1, r3.fontSize = h3);
      } else if (f2 === Be.setFillRGBColor) r3.rgb = l2;
      else if (f2 === Be.setFillGray) {
        var u3 = 255 * l2[0];
        r3.rgb = [u3, u3, u3];
      }
    }
    return t3.resolve(a2), t3;
  } }), e3;
}();
var Xt = function() {
  function e3(e4) {
    if (jt.call(this, e4), !e4.data) {
      var t3 = e4.dict, a2 = this.data, r3 = t3.get("Contents"), i3 = t3.get("T");
      a2.content = et(r3 || ""), a2.title = et(i3 || ""), a2.name = t3.has("Name") ? t3.get("Name").name : "Note";
    }
  }
  return Qe.inherit(e3, jt, { getOperatorList: function(e4) {
    var t3 = new gt();
    return t3.resolve(new ma()), t3;
  }, hasHtml: function() {
    return true;
  }, getHtmlElement: function(e4) {
    De(!ye, "getHtmlElement() shall be called from main thread");
    var t3 = this.data, a2 = t3.rect;
    a2[3] - a2[1] < 10 && (a2[3] = a2[1] + 10), a2[2] - a2[0] < 10 && (a2[2] = a2[0] + (a2[3] - a2[1]));
    var r3 = this.getEmptyContainer("section", a2);
    r3.className = "annotText";
    var i3 = document.createElement("img");
    i3.style.height = r3.style.height;
    var n3 = t3.name;
    i3.src = be.imageResourcesPath + "annotation-" + n3.toLowerCase() + ".svg", i3.alt = "[{{type}} Annotation]", i3.dataset.l10nId = "text_annotation_type", i3.dataset.l10nArgs = JSON.stringify({ type: n3 });
    var c3 = document.createElement("div");
    c3.setAttribute("hidden", true);
    var s3 = document.createElement("h1"), o3 = document.createElement("p");
    if (c3.style.left = Math.floor(a2[2] - a2[0]) + "px", c3.style.top = "0px", s3.textContent = t3.title, t3.content || t3.title) {
      for (var f2 = document.createElement("span"), l2 = t3.content.split(/(?:\r\n?|\n)/), h3 = 0, u3 = l2.length; h3 < u3; ++h3) {
        var d3 = l2[h3];
        f2.appendChild(document.createTextNode(d3)), h3 < u3 - 1 && f2.appendChild(document.createElement("br"));
      }
      o3.appendChild(f2);
      var g2 = function() {
        r3.style.zIndex += 1, c3.removeAttribute("hidden");
      }, m3 = function(e5) {
        (e5.toElement || e5.relatedTarget) && (r3.style.zIndex -= 1, c3.setAttribute("hidden", true));
      };
      c3.addEventListener("mouseover", g2, false), c3.addEventListener("mouseout", m3, false), i3.addEventListener("mouseover", g2, false), i3.addEventListener("mouseout", m3, false);
    } else c3.setAttribute("hidden", true);
    return c3.appendChild(s3), c3.appendChild(o3), r3.appendChild(i3), r3.appendChild(c3), r3;
  } }), e3;
}();
var Wt = function() {
  function e3(e4) {
    if (jt.call(this, e4), !e4.data) {
      var t3 = e4.dict, a2 = this.data, r3 = t3.get("A");
      if (r3) {
        var i3 = r3.get("S").name;
        if ("URI" === i3) {
          var n3 = function(e5) {
            if (e5 && 0 === e5.indexOf("www.")) return "http://" + e5;
            return e5;
          }(r3.get("URI"));
          Ee(n3, false) || (n3 = ""), a2.url = n3;
        } else if ("GoTo" === i3) a2.dest = r3.get("D");
        else if ("GoToR" === i3) {
          var c3 = r3.get("F");
          ot(c3) && (n3 = c3.get("F") || ""), Ee(n3, false) || (n3 = ""), a2.url = n3, a2.dest = r3.get("D");
        } else "Named" === i3 ? a2.action = r3.get("N").name : Me("unrecognized link type: " + i3);
      } else if (t3.has("Dest")) {
        var s3 = t3.get("Dest");
        a2.dest = ct(s3) ? s3.name : s3;
      }
    }
  }
  return Qe.inherit(e3, jt, { hasOperatorList: function() {
    return false;
  }, hasHtml: function() {
    return true;
  }, getHtmlElement: function(e4) {
    var t3 = this.data.rect, a2 = document.createElement("a"), r3 = this.data.borderWidth;
    a2.style.borderWidth = r3 + "px";
    for (var i3 = this.data.color, n3 = [], c3 = 0; c3 < 3; ++c3) n3[c3] = Math.round(255 * i3[c3]);
    a2.style.borderColor = Qe.makeCssRgb(n3), a2.style.borderStyle = "solid";
    var s3 = t3[2] - t3[0] - 2 * r3, o3 = t3[3] - t3[1] - 2 * r3;
    return a2.style.width = s3 + "px", a2.style.height = o3 + "px", a2.href = this.data.url || "", a2;
  } }), e3;
}();
var Vt = function() {
  function e3(e4, t3, a2, r3, i3, n3) {
    this.pdfManager = e4, this.pageIndex = a2, this.pageDict = r3, this.xref = t3, this.ref = i3, this.fontCache = n3, this.idCounters = { obj: 0 }, this.resourcesPromise = null;
  }
  return e3.prototype = { getPageProp: function(e4) {
    return this.pageDict.get(e4);
  }, inheritPageProp: function(e4) {
    for (var t3 = this.pageDict, a2 = t3.get(e4); void 0 === a2 && (t3 = t3.get("Parent")); ) a2 = t3.get(e4);
    return a2;
  }, get content() {
    return this.getPageProp("Contents");
  }, get resources() {
    return Ue(this, "resources", this.inheritPageProp("Resources"));
  }, get mediaBox() {
    var e4 = this.inheritPageProp("MediaBox");
    return ft(e4) && 4 === e4.length || (e4 = [0, 0, 612, 792]), Ue(this, "mediaBox", e4);
  }, get view() {
    var e4 = this.mediaBox, t3 = this.inheritPageProp("CropBox");
    return ft(t3) && 4 === t3.length ? Ue(this, "view", (t3 = Qe.intersect(t3, e4)) || e4) : Ue(this, "view", e4);
  }, get annotationRefs() {
    return Ue(this, "annotationRefs", this.inheritPageProp("Annots"));
  }, get rotate() {
    var e4 = this.inheritPageProp("Rotate") || 0;
    return e4 % 90 != 0 ? e4 = 0 : e4 >= 360 ? e4 %= 360 : e4 < 0 && (e4 = (e4 % 360 + 360) % 360), Ue(this, "rotate", e4);
  }, getContentStream: function() {
    var e4, t3 = this.content;
    if (ft(t3)) {
      var a2, r3 = this.xref, i3 = t3.length, n3 = [];
      for (a2 = 0; a2 < i3; ++a2) n3.push(r3.fetchIfRef(t3[a2]));
      e4 = new vr(n3);
    } else e4 = lt(t3) ? t3 : new Fr();
    return e4;
  }, loadResources: function(e4) {
    this.resourcesPromise || (this.resourcesPromise = this.pdfManager.ensure(this, "resources"));
    var t3 = new gt();
    return this.resources ? this.resourcesPromise.then(function() {
      new ia(this.resources.map, e4, this.xref).load().then(function() {
        t3.resolve();
      });
    }.bind(this)) : t3.resolve(), t3;
  }, getOperatorList: function(e4) {
    var t3 = new gt();
    function a2(e5) {
      t3.reject(e5);
    }
    var r3 = new gt(), i3 = this.pdfManager, n3 = i3.ensure(this, "getContentStream", []), c3 = this.loadResources(["ExtGState", "ColorSpace", "Pattern", "Shading", "XObject", "Font"]), s3 = new ga(i3, this.xref, e4, this.pageIndex, "p" + this.pageIndex + "_", this.idCounters, this.fontCache);
    gt.all([n3, c3]).then(function(t4) {
      var i4 = t4[0];
      try {
        var n4 = new ma(e4, this.pageIndex);
        s3.getOperatorList(i4, this.resources, n4), r3.resolve(n4), e4.send("StartRenderPage", { transparency: s3.hasBlendModes(this.resources), pageIndex: this.pageIndex });
      } catch (e5) {
        a2(e5);
      }
    }.bind(this), a2);
    var o3 = i3.ensure(this, "annotations");
    return gt.all([r3, o3]).then(function(e5) {
      var r4 = e5[0], n4 = e5[1];
      if (0 === n4.length) return r4.flush(true), t3.resolve(r4), t3;
      jt.appendToOperatorList(n4, r4, i3, s3).then(function() {
        r4.flush(true), t3.resolve(r4);
      }, a2);
    }, a2), t3;
  }, extractTextContent: function() {
    var e4 = { on: function() {
    }, send: function() {
    } }, t3 = this, a2 = new gt(), r3 = this.pdfManager, i3 = r3.ensure(this, "getContentStream", []), n3 = this.loadResources(["ExtGState", "XObject", "Font"]);
    return gt.all([i3, n3]).then(function(i4) {
      var n4 = i4[0], c3 = new ga(r3, t3.xref, e4, t3.pageIndex, "p" + t3.pageIndex + "_", t3.idCounters, t3.fontCache).getTextContent(n4, t3.resources);
      a2.resolve(c3);
    }), a2;
  }, getAnnotationsData: function() {
    for (var e4 = this.annotations, t3 = [], a2 = 0, r3 = e4.length; a2 < r3; ++a2) t3.push(e4[a2].getData());
    return t3;
  }, get annotations() {
    for (var e4 = [], t3 = this.annotationRefs || [], a2 = 0, r3 = t3.length; a2 < r3; ++a2) {
      var i3 = t3[a2], n3 = jt.fromRef(this.xref, i3);
      n3 && e4.push(n3);
    }
    return Ue(this, "annotations", e4);
  } }, e3;
}();
var Yt = function() {
  function e3(e4, a3, r4) {
    lt(a3) ? t3.call(this, e4, a3, r4) : ht(a3) ? t3.call(this, e4, new pr(a3), r4) : Oe("PDFDocument: Unknown argument type");
  }
  function t3(e4, t4, a3) {
    Ne(t4.length > 0, "stream must have data"), this.pdfManager = e4, this.stream = t4;
    var r4 = new aa(this.stream, a3, e4);
    this.xref = r4;
  }
  function a2(e4, t4, a3, r4) {
    var i3 = e4.pos, n3 = e4.end, c3 = "";
    i3 + a3 > n3 && (a3 = n3 - i3);
    for (var s3 = 0; s3 < a3; ++s3) c3 += String.fromCharCode(e4.getByte());
    e4.pos = i3;
    var o3 = r4 ? c3.lastIndexOf(t4) : c3.indexOf(t4);
    return -1 != o3 && (e4.pos += o3, true);
  }
  var r3 = { get entries() {
    return Ue(this, "entries", { Title: nt, Author: nt, Subject: nt, Keywords: nt, Creator: nt, Producer: nt, CreationDate: nt, ModDate: nt, Trapped: ct });
  } };
  return e3.prototype = { parse: function(e4) {
    try {
      if (this.setup(e4), this.acroForm = this.catalog.catDict.get("AcroForm"), this.acroForm) {
        this.xfa = this.acroForm.get("XFA");
        var t4 = this.acroForm.get("Fields");
        t4 && ft(t4) && 0 !== t4.length || this.xfa || (this.acroForm = null);
      }
    } catch (e5) {
      Oe(e5), this.acroForm = null;
    }
  }, get linearization() {
    var e4 = this.stream.length, t4 = false;
    if (e4) try {
      (t4 = new mr(this.stream)).length != e4 && (t4 = false);
    } catch (e5) {
      if (e5 instanceof Ve) throw e5;
      Pe("The linearization data is not available or unreadable PDF data is found"), t4 = false;
    }
    return Ue(this, "linearization", t4);
  }, get startXRef() {
    var e4 = this.stream, t4 = 0;
    if (this.linearization) e4.reset(), a2(e4, "endobj", 1024) && (t4 = e4.pos + 6);
    else {
      for (var r4 = false, i3 = e4.end; !r4 && i3 > 0; ) (i3 -= 1015) < 0 && (i3 = 0), e4.pos = i3, r4 = a2(e4, "startxref", 1024, true);
      if (r4) {
        var n3;
        e4.skip(9);
        do {
          n3 = e4.getByte();
        } while (gr.isSpace(n3));
        for (var c3 = ""; n3 >= 32 && n3 <= 57; ) c3 += String.fromCharCode(n3), n3 = e4.getByte();
        t4 = parseInt(c3, 10), isNaN(t4) && (t4 = 0);
      }
    }
    return Ue(this, "startXRef", t4);
  }, get mainXRefEntriesOffset() {
    var e4 = 0, t4 = this.linearization;
    return t4 && (e4 = t4.mainXRefEntriesOffset), Ue(this, "mainXRefEntriesOffset", e4);
  }, checkHeader: function() {
    var e4 = this.stream;
    if (e4.reset(), a2(e4, "%PDF-", 1024)) {
      e4.moveStart();
      for (var t4, r4 = ""; (t4 = e4.getByte()) > 32 && !(r4.length >= 12); ) r4 += String.fromCharCode(t4);
      this.pdfFormatVersion = r4.substring(5);
    } else ;
  }, parseStartXRef: function() {
    var e4 = this.startXRef;
    this.xref.setStartXRef(e4);
  }, setup: function(e4) {
    this.xref.parse(e4), this.catalog = new ta(this.pdfManager, this.xref);
  }, get numPages() {
    var e4 = this.linearization;
    return Ue(this, "numPages", e4 ? e4.numPages : this.catalog.numPages);
  }, get documentInfo() {
    var e4, t4 = { PDFFormatVersion: this.pdfFormatVersion, IsAcroFormPresent: !!this.acroForm, IsXFAPresent: !!this.xfa };
    try {
      e4 = this.xref.trailer.get("Info");
    } catch (e5) {
      Pe("The document information dictionary is invalid.");
    }
    if (e4) {
      var a3 = r3.entries;
      for (var i3 in a3) if (e4.has(i3)) {
        var n3 = e4.get(i3);
        a3[i3](n3) ? t4[i3] = "string" != typeof n3 ? n3 : et(n3) : Pe('Bad value in document info for "' + i3 + '"');
      }
    }
    return Ue(this, "documentInfo", t4);
  }, get fingerprint() {
    for (var e4, t4 = this.xref, a3 = "", r4 = 0, i3 = (e4 = t4.trailer.has("ID") ? Ke(t4.trailer.get("ID")[0]) : fa(this.stream.bytes.subarray(0, 100), 0, 100)).length; r4 < i3; r4++) a3 += e4[r4].toString(16);
    return Ue(this, "fingerprint", a3);
  }, getPage: function(e4) {
    return this.catalog.getPage(e4);
  }, cleanup: function() {
    return this.catalog.cleanup();
  } }, e3;
}();
var Jt = function() {
  function e3(e4) {
    this.name = e4;
  }
  return e3.prototype = {}, e3;
}();
var Kt = function() {
  function e3(e4) {
    this.cmd = e4;
  }
  e3.prototype = {};
  var t3 = {};
  return e3.get = function(a2) {
    var r3 = t3[a2];
    return r3 || (t3[a2] = new e3(a2));
  }, e3;
}();
var Zt = function() {
  var e3 = function() {
    return e3;
  };
  function t3(t4) {
    this.map = /* @__PURE__ */ Object.create(null), this.xref = t4, this.__nonSerializable__ = e3;
  }
  return t3.prototype = { assignXref: function(e4) {
    this.xref = e4;
  }, get: function(e4, t4, a2) {
    var r3, i3 = this.xref;
    return void 0 !== (r3 = this.map[e4]) || e4 in this.map || void 0 === t4 || void 0 !== (r3 = this.map[t4]) || t4 in this.map || void 0 === a2 || (r3 = this.map[a2] || null), i3 ? i3.fetchIfRef(r3) : r3;
  }, getAsync: function(e4, t4, a2) {
    var r3, i3, n3 = this.xref;
    return void 0 !== typeof (r3 = this.map[e4]) || e4 in this.map || void 0 === typeof t4 || void 0 !== typeof (r3 = this.map[t4]) || t4 in this.map || void 0 === typeof a2 || (r3 = this.map[a2] || null), n3 ? n3.fetchIfRefAsync(r3) : ((i3 = new gt()).resolve(r3), i3);
  }, getRaw: function(e4) {
    return this.map[e4];
  }, getAll: function() {
    var e4 = {};
    for (var a2 in this.map) {
      var r3 = this.get(a2);
      e4[a2] = r3 instanceof t3 ? r3.getAll() : r3;
    }
    return e4;
  }, set: function(e4, t4) {
    this.map[e4] = t4;
  }, has: function(e4) {
    return e4 in this.map;
  }, forEach: function(e4) {
    for (var t4 in this.map) e4(t4, this.get(t4));
  } }, t3;
}();
var Qt = function() {
  function e3(e4, t3) {
    this.num = e4, this.gen = t3;
  }
  return e3.prototype = {}, e3;
}();
var $t = function() {
  function e3() {
    this.dict = {};
  }
  return e3.prototype = { has: function(e4) {
    return "R" + e4.num + "." + e4.gen in this.dict;
  }, put: function(e4) {
    this.dict["R" + e4.num + "." + e4.gen] = true;
  }, remove: function(e4) {
    delete this.dict["R" + e4.num + "." + e4.gen];
  } }, e3;
}();
var ea = function() {
  function e3() {
    this.dict = /* @__PURE__ */ Object.create(null);
  }
  return e3.prototype = { get: function(e4) {
    return this.dict["R" + e4.num + "." + e4.gen];
  }, has: function(e4) {
    return !!e4 && "R" + e4.num + "." + e4.gen in this.dict;
  }, put: function(e4, t3) {
    this.dict["R" + e4.num + "." + e4.gen] = t3;
  }, forEach: function(e4, t3) {
    for (var a2 in this.dict) e4.call(t3, this.dict[a2]);
  }, clear: function() {
    this.dict = /* @__PURE__ */ Object.create(null);
  } }, e3;
}();
var ta = function() {
  function e3(e4, t3) {
    this.pdfManager = e4, this.xref = t3, this.catDict = t3.getCatalogObj(), this.fontCache = new ea(), Ne(ot(this.catDict), "catalog object is not a dictionary"), this.pagePromises = [];
  }
  return e3.prototype = { get metadata() {
    var e4 = this.catDict.getRaw("Metadata");
    if (!ut(e4)) return Ue(this, "metadata", null);
    var t3, a2, r3 = !!this.xref.encrypt && this.xref.encrypt.encryptMetadata, i3 = this.xref.fetch(e4, !r3);
    if (i3 && ot(i3.dict)) {
      var n3 = i3.dict.get("Type"), c3 = i3.dict.get("Subtype");
      if (ct(n3) && ct(c3) && "Metadata" === n3.name && "XML" === c3.name) try {
        a2 = Je(i3.getBytes()), t3 = decodeURIComponent(escape(a2));
      } catch (e5) {
        Pe("Skipping invalid metadata.");
      }
    }
    return Ue(this, "metadata", t3);
  }, get toplevelPagesDict() {
    var e4 = this.catDict.get("Pages");
    return Ne(ot(e4), "invalid top-level pages dictionary"), Ue(this, "toplevelPagesDict", e4);
  }, get documentOutline() {
    var e4 = null;
    try {
      e4 = this.readDocumentOutline();
    } catch (e5) {
      if (e5 instanceof Ve) throw e5;
      Re("Unable to read document outline");
    }
    return Ue(this, "documentOutline", e4);
  }, readDocumentOutline: function() {
    var e4 = this.xref, t3 = this.catDict.get("Outlines"), a2 = { items: [] };
    if (ot(t3)) {
      t3 = t3.getRaw("First");
      var r3 = new $t();
      if (ut(t3)) {
        var i3 = [{ obj: t3, parent: a2 }];
        for (r3.put(t3); i3.length > 0; ) {
          var n3 = i3.shift(), c3 = e4.fetchIfRef(n3.obj);
          if (null !== c3) {
            c3.has("Title") || Oe("Invalid outline item");
            var s3 = c3.get("A");
            s3 ? s3 = s3.get("D") : c3.has("Dest") && ct(s3 = c3.getRaw("Dest")) && (s3 = s3.name);
            var o3 = { dest: s3, title: et(c3.get("Title")), color: c3.get("C") || [0, 0, 0], count: c3.get("Count"), bold: !!(2 & c3.get("F")), italic: !!(1 & c3.get("F")), items: [] };
            n3.parent.items.push(o3), ut(t3 = c3.getRaw("First")) && !r3.has(t3) && (i3.push({ obj: t3, parent: o3 }), r3.put(t3)), ut(t3 = c3.getRaw("Next")) && !r3.has(t3) && (i3.push({ obj: t3, parent: n3.parent }), r3.put(t3));
          }
        }
      }
    }
    return a2.items.length > 0 ? a2.items : null;
  }, get numPages() {
    var e4 = this.toplevelPagesDict.get("Count");
    return Ne(rt(e4), "page count in top level pages object is not an integer"), Ue(this, "num", e4);
  }, get destinations() {
    function e4(e5) {
      return ot(e5) ? e5.get("D") : e5;
    }
    var t3, a2, r3 = this.xref, i3 = {}, n3 = this.catDict.get("Names");
    if (n3 ? t3 = n3.getRaw("Dests") : this.catDict.has("Dests") && (a2 = this.catDict.get("Dests")), a2 && (n3 = a2).forEach(function(t4, a3) {
      a3 && (i3[t4] = e4(a3));
    }), t3) {
      var c3 = new ra(t3, r3).getAll();
      for (var s3 in c3) c3.hasOwnProperty(s3) && (i3[s3] = e4(c3[s3]));
    }
    return Ue(this, "destinations", i3);
  }, get javaScript() {
    var e4 = this.xref, t3 = this.catDict.get("Names"), a2 = [];
    if (t3 && t3.has("JavaScript")) {
      var r3 = new ra(t3.getRaw("JavaScript"), e4).getAll();
      for (var i3 in r3) if (r3.hasOwnProperty(i3)) {
        var n3 = r3[i3];
        if (ot(n3)) {
          var c3 = n3.get("S");
          if (ct(c3) && "JavaScript" === c3.name) {
            var s3 = n3.get("JS");
            (nt(s3) || lt(s3)) && (lt(s3) && (s3 = Je(s3.getBytes())), a2.push(et(s3)));
          }
        }
      }
    }
    return Ue(this, "javaScript", a2);
  }, cleanup: function() {
    this.fontCache.forEach(function(e4) {
      delete e4.sent, delete e4.translated;
    }), this.fontCache.clear();
  }, getPage: function(e4) {
    return e4 in this.pagePromises || (this.pagePromises[e4] = this.getPageDict(e4).then(function(t3) {
      var a2 = t3[0], r3 = t3[1];
      return new Vt(this.pdfManager, this.xref, e4, a2, r3, this.fontCache);
    }.bind(this))), this.pagePromises[e4];
  }, getPageDict: function(e4) {
    var t3 = new gt(), a2 = [this.catDict.getRaw("Pages")], r3 = 0, i3 = this.xref;
    return function n3() {
      for (; a2.length; ) {
        var c3 = a2.pop();
        if (ut(c3)) return void i3.fetchAsync(c3).then(function(i4) {
          ot(i4, "Page") || ot(i4) && !i4.has("Kids") ? e4 === r3 ? t3.resolve([i4, c3]) : (r3++, n3()) : (a2.push(i4), n3());
        }.bind(this), t3.reject.bind(t3));
        De(ot(c3), "page dictionary kid reference points to wrong type of object");
        var s3 = c3.get("Count");
        if (r3 + s3 <= e4) r3 += s3;
        else {
          var o3 = c3.get("Kids");
          if (De(ft(o3), "page dictionary kids object is not an array"), s3 !== o3.length) for (var f2 = o3.length - 1; f2 >= 0; f2--) a2.push(o3[f2]);
          else a2 = [o3[e4 - r3]], r3 = e4;
        }
      }
      t3.reject("Page index " + e4 + " not found.");
    }(), t3;
  }, getPageIndex: function(e4) {
    var t3 = this.xref;
    var a2 = 0;
    return function e5(r3) {
      return function(e6) {
        var a3, r4 = 0;
        return t3.fetchAsync(e6).then(function(e7) {
          return e7 ? (a3 = e7.getRaw("Parent"), e7.getAsync("Parent")) : null;
        }).then(function(e7) {
          return e7 ? e7.getAsync("Kids") : null;
        }).then(function(i3) {
          if (!i3) return null;
          for (var n3 = [], c3 = false, s3 = 0; s3 < i3.length; s3++) {
            var o3 = i3[s3];
            if (De(ut(o3), "kids must be an ref"), o3.num == e6.num) {
              c3 = true;
              break;
            }
            n3.push(t3.fetchAsync(o3).then(function(e7) {
              if (e7.has("Count")) {
                var t4 = e7.get("Count");
                r4 += t4;
              } else r4++;
            }));
          }
          return c3 || Oe("kid ref not found in parents kids"), gt.all(n3).then(function() {
            return [r4, a3];
          });
        });
      }(r3).then(function(t4) {
        if (!t4) return a2;
        var r4 = t4[0], i3 = t4[1];
        return a2 += r4, e5(i3);
      });
    }(e4);
  } }, e3;
}();
var aa = function() {
  function e3(e4, t3) {
    this.stream = e4, this.entries = [], this.xrefstms = {}, this.cache = [], this.password = t3;
  }
  return e3.prototype = { setStartXRef: function(e4) {
    this.startXRefQueue = [e4];
  }, parse: function(e4) {
    var t3;
    e4 ? (Re("Indexing all PDF objects"), t3 = this.indexObjects()) : t3 = this.readXRef(), t3.assignXref(this), this.trailer = t3;
    var a2 = t3.get("Encrypt");
    if (a2) {
      var r3 = t3.get("ID"), i3 = r3 && r3.length ? r3[0] : "";
      this.encrypt = new da(a2, i3, this.password);
    }
    (this.root = t3.get("Root")) || Oe("Invalid root reference");
  }, processXRefTable: function(e4) {
    "tableState" in this || (this.tableState = { entryNum: 0, streamPos: e4.lexer.stream.pos, parserBuf1: e4.buf1, parserBuf2: e4.buf2 }), st(this.readXRefTable(e4), "trailer") || Oe("Invalid XRef table: could not find trailer dictionary");
    var t3 = e4.getObj();
    return ot(t3) || Oe("Invalid XRef table: could not parse trailer dictionary"), delete this.tableState, t3;
  }, readXRefTable: function(e4) {
    var t3, a2 = e4.lexer.stream, r3 = this.tableState;
    for (a2.pos = r3.streamPos, e4.buf1 = r3.parserBuf1, e4.buf2 = r3.parserBuf2; ; ) {
      if (!("firstEntryNum" in r3) || !("entryCount" in r3)) {
        if (st(t3 = e4.getObj(), "trailer")) break;
        r3.firstEntryNum = t3, r3.entryCount = e4.getObj();
      }
      var i3 = r3.firstEntryNum, n3 = r3.entryCount;
      rt(i3) && rt(n3) || Oe("Invalid XRef table: wrong types in subsection header");
      for (var c3 = r3.entryNum; c3 < n3; c3++) {
        r3.streamPos = a2.pos, r3.entryNum = c3, r3.parserBuf1 = e4.buf1, r3.parserBuf2 = e4.buf2;
        var s3 = {};
        s3.offset = e4.getObj(), s3.gen = e4.getObj();
        var o3 = e4.getObj();
        st(o3, "f") ? s3.free = true : st(o3, "n") && (s3.uncompressed = true), rt(s3.offset) && rt(s3.gen) && (s3.free || s3.uncompressed) || (console.log(s3.offset, s3.gen, s3.free, s3.uncompressed), Oe("Invalid entry in XRef subsection: " + i3 + ", " + n3)), this.entries[c3 + i3] || (this.entries[c3 + i3] = s3);
      }
      r3.entryNum = 0, r3.streamPos = a2.pos, r3.parserBuf1 = e4.buf1, r3.parserBuf2 = e4.buf2, delete r3.firstEntryNum, delete r3.entryCount;
    }
    return 1 === i3 && this.entries[1] && this.entries[1].free && this.entries.shift(), this.entries[0] && !this.entries[0].free && Oe("Invalid XRef table: unexpected first object"), t3;
  }, processXRefStream: function(e4) {
    if (!("streamState" in this)) {
      var t3 = e4.dict, a2 = t3.get("W"), r3 = t3.get("Index");
      r3 || (r3 = [0, t3.get("Size")]), this.streamState = { entryRanges: r3, byteWidths: a2, entryNum: 0, streamPos: e4.pos };
    }
    return this.readXRefStream(e4), delete this.streamState, e4.dict;
  }, readXRefStream: function(e4) {
    var t3, a2, r3 = this.streamState;
    e4.pos = r3.streamPos;
    for (var i3 = r3.byteWidths, n3 = i3[0], c3 = i3[1], s3 = i3[2], o3 = r3.entryRanges; o3.length > 0; ) {
      var f2 = o3[0], l2 = o3[1];
      for (rt(f2) && rt(l2) || Oe("Invalid XRef range fields: " + f2 + ", " + l2), rt(n3) && rt(c3) && rt(s3) || Oe("Invalid XRef entry fields length: " + f2 + ", " + l2), t3 = r3.entryNum; t3 < l2; ++t3) {
        r3.entryNum = t3, r3.streamPos = e4.pos;
        var h3 = 0, u3 = 0, d3 = 0;
        for (a2 = 0; a2 < n3; ++a2) h3 = h3 << 8 | e4.getByte();
        for (0 === n3 && (h3 = 1), a2 = 0; a2 < c3; ++a2) u3 = u3 << 8 | e4.getByte();
        for (a2 = 0; a2 < s3; ++a2) d3 = d3 << 8 | e4.getByte();
        var g2 = {};
        switch (g2.offset = u3, g2.gen = d3, h3) {
          case 0:
            g2.free = true;
            break;
          case 1:
            g2.uncompressed = true;
            break;
          case 2:
            break;
          default:
            Oe("Invalid XRef entry type: " + h3);
        }
        this.entries[f2 + t3] || (this.entries[f2 + t3] = g2);
      }
      r3.entryNum = 0, r3.streamPos = e4.pos, o3.splice(0, 2);
    }
  }, indexObjects: function() {
    function e4(e5, t4) {
      for (var a3 = "", r4 = e5[t4]; 13 !== r4 && 10 !== r4 && !(++t4 >= e5.length); ) a3 += String.fromCharCode(r4), r4 = e5[t4];
      return a3;
    }
    function t3(e5, t4, a3) {
      for (var r4 = a3.length, i4 = e5.length, n4 = 0; t4 < i4; ) {
        for (var c4 = 0; c4 < r4 && e5[t4 + c4] == a3[c4]; ) ++c4;
        if (c4 >= r4) break;
        t4++, n4++;
      }
      return n4;
    }
    var a2 = new Uint8Array([116, 114, 97, 105, 108, 101, 114]), r3 = new Uint8Array([115, 116, 97, 114, 116, 120, 114, 101, 102]), i3 = new Uint8Array([101, 110, 100, 111, 98, 106]), n3 = new Uint8Array([47, 88, 82, 101, 102]), c3 = this.stream;
    c3.pos = 0;
    for (var s3, o3 = c3.getBytes(), f2 = c3.start, l2 = o3.length, h3 = [], u3 = []; f2 < l2; ) {
      var d3 = o3[f2];
      if (32 !== d3 && 9 !== d3 && 13 !== d3 && 10 !== d3) if (37 !== d3) {
        var g2, m3 = e4(o3, f2);
        if ("xref" === m3) f2 += t3(o3, f2, a2), h3.push(f2), f2 += t3(o3, f2, r3);
        else if (g2 = /^(\d+)\s+(\d+)\s+obj\b/.exec(m3)) {
          this.entries[g2[1]] = { offset: f2, gen: 0 | g2[2], uncompressed: true };
          var p3 = t3(o3, f2, i3) + 7, b3 = o3.subarray(f2, f2 + p3), v3 = t3(b3, 0, n3);
          v3 < p3 && b3[v3 + 5] < 64 && (u3.push(f2), this.xrefstms[f2] = 1), f2 += p3;
        } else f2 += m3.length + 1;
      } else do {
        if (++f2 >= l2) break;
        d3 = o3[f2];
      } while (13 !== d3 && 10 !== d3);
      else ++f2;
    }
    for (var y3 = 0, k3 = u3.length; y3 < k3; ++y3) this.startXRefQueue.push(u3[y3]), this.readXRef(true);
    for (y3 = 0, k3 = h3.length; y3 < k3; ++y3) {
      c3.pos = h3[y3];
      var A3 = new dr(new gr(c3), true, null);
      if (st(A3.getObj(), "trailer") && (ot(s3 = A3.getObj()) && s3.has("ID"))) return s3;
    }
    if (s3) return s3;
    throw new _e("Invalid PDF structure");
  }, readXRef: function(e4) {
    var t3 = this.stream;
    try {
      for (; this.startXRefQueue.length; ) {
        var a2 = this.startXRefQueue[0];
        t3.pos = a2;
        var r3, i3 = new dr(new gr(t3), true, null), n3 = i3.getObj();
        if (st(n3, "xref")) {
          if (r3 = this.processXRefTable(i3), this.topDict || (this.topDict = r3), rt(n3 = r3.get("XRefStm"))) {
            var c3 = n3;
            c3 in this.xrefstms || (this.xrefstms[c3] = 1, this.startXRefQueue.push(c3));
          }
        } else rt(n3) ? (rt(i3.getObj()) && st(i3.getObj(), "obj") && lt(n3 = i3.getObj()) || Oe("Invalid XRef stream"), r3 = this.processXRefStream(n3), this.topDict || (this.topDict = r3), r3 || Oe("Failed to read XRef stream")) : Oe("Invalid XRef stream header");
        rt(n3 = r3.get("Prev")) ? this.startXRefQueue.push(n3) : ut(n3) && this.startXRefQueue.push(n3.num), this.startXRefQueue.shift();
      }
      return this.topDict;
    } catch (e5) {
      if (e5 instanceof Ve) throw e5;
      Fe("(while reading XRef): " + e5), Oe(e5);
    }
    if (!e4) throw new Ye();
  }, getEntry: function(e4) {
    var t3 = this.entries[e4];
    return null === t3 || t3.free || !t3.offset ? null : t3;
  }, fetchIfRef: function(e4) {
    return ut(e4) ? this.fetch(e4) : e4;
  }, fetch: function(e4, t3) {
    Ne(ut(e4), "ref object is not a reference");
    var a2, r3 = e4.num;
    if (r3 in this.cache) return (a2 = this.cache[r3]) instanceof pr ? a2.makeSubStream(a2.start, a2.length, a2.dict) : a2;
    if (null === (a2 = this.getEntry(r3))) return this.cache[r3] = a2;
    var i3, n3, c3 = e4.gen;
    if (a2.uncompressed) {
      a2.gen != c3 && Oe("inconsistent generation in XRef"), i3 = this.stream.makeSubStream(a2.offset);
      var s3 = (n3 = new dr(new gr(i3), true, this)).getObj(), o3 = n3.getObj(), f2 = n3.getObj();
      if (rt(s3) && s3 == r3 && rt(o3) && o3 == c3 && st(f2) || Oe("bad XRef entry"), !st(f2, "obj")) {
        if (0 === f2.cmd.indexOf("obj") && (r3 = parseInt(f2.cmd.substring(3), 10), !isNaN(r3))) return r3;
        Oe("bad XRef entry");
      }
      if (this.encrypt && !t3) try {
        a2 = n3.getObj(this.encrypt.createCipherTransform(r3, c3));
      } catch (t4) {
        return this.fetch(e4, true);
      }
      else a2 = n3.getObj();
      return lt(a2) || (this.cache[r3] = a2), a2;
    }
    var l2 = a2.offset;
    lt(i3 = this.fetch(new Qt(l2, 0))) || Oe("bad ObjStm stream");
    var h3 = i3.dict.get("First"), u3 = i3.dict.get("N");
    rt(h3) && rt(u3) || Oe("invalid first and n parameters for ObjStm stream"), (n3 = new dr(new gr(i3), false, this)).allowStreams = true;
    var d3, g2 = [], m3 = [];
    for (d3 = 0; d3 < u3; ++d3) {
      rt(r3 = n3.getObj()) || Oe("invalid object number in the ObjStm stream: " + r3), m3.push(r3);
      var p3 = n3.getObj();
      rt(p3) || Oe("invalid object offset in the ObjStm stream: " + p3);
    }
    for (d3 = 0; d3 < u3; ++d3) {
      g2.push(n3.getObj()), r3 = m3[d3];
      var b3 = this.entries[r3];
      b3 && b3.offset === l2 && b3.gen === d3 && (this.cache[r3] = g2[d3]);
    }
    return void 0 === (a2 = g2[a2.gen]) && Oe("bad XRef entry for compressed object"), a2;
  }, fetchIfRefAsync: function(e4) {
    if (!ut(e4)) {
      var t3 = new gt();
      return t3.resolve(e4), t3;
    }
    return this.fetchAsync(e4);
  }, fetchAsync: function(e4, t3) {
    var a2 = new gt(), r3 = function(a3) {
      try {
        a3.resolve(this.fetch(e4, t3));
      } catch (e5) {
        if (e5 instanceof Ve) return void this.stream.manager.requestRange(e5.begin, e5.end, r3);
        a3.reject(e5);
      }
    }.bind(this, a2);
    return r3(), a2;
  }, getCatalogObj: function() {
    return this.root;
  } }, e3;
}();
var ra = function() {
  function e3(e4, t3) {
    this.root = e4, this.xref = t3;
  }
  return e3.prototype = { getAll: function() {
    var e4 = {};
    if (!this.root) return e4;
    var t3 = this.xref, a2 = new $t();
    a2.put(this.root);
    for (var r3 = [this.root]; r3.length > 0; ) {
      var i3, n3, c3 = t3.fetchIfRef(r3.shift());
      if (ot(c3)) if (c3.has("Kids")) {
        var s3 = c3.get("Kids");
        for (i3 = 0, n3 = s3.length; i3 < n3; i3++) {
          var o3 = s3[i3];
          a2.has(o3) && Oe("invalid destinations"), r3.push(o3), a2.put(o3);
        }
      } else {
        var f2 = c3.get("Names");
        if (f2) for (i3 = 0, n3 = f2.length; i3 < n3; i3 += 2) e4[f2[i3]] = t3.fetchIfRef(f2[i3 + 1]);
      }
    }
    return e4;
  } }, e3;
}();
var ia = function() {
  function e3(e4) {
    return ut(e4) || ot(e4) || ft(e4) || lt(e4);
  }
  function t3(t4, a3) {
    var r3;
    if (ot(t4) || lt(t4)) for (var i3 in r3 = ot(t4) ? t4.map : t4.dict.map) {
      e3(s3 = r3[i3]) && a3.push(s3);
    }
    else if (ft(t4)) for (var n3 = 0, c3 = t4.length; n3 < c3; n3++) {
      var s3;
      e3(s3 = t4[n3]) && a3.push(s3);
    }
  }
  function a2(e4, t4, a3) {
    this.obj = e4, this.keys = t4, this.xref = a3, this.refSet = null;
  }
  return a2.prototype = { load: function() {
    var e4 = this.keys;
    if (this.promise = new gt(), !(this.xref.stream instanceof Nr) || 0 === this.xref.stream.getMissingChunks().length) return this.promise.resolve(), this.promise;
    this.refSet = new $t();
    for (var t4 = [], a3 = 0; a3 < e4.length; a3++) t4.push(this.obj[e4[a3]]);
    return this.walk(t4), this.promise;
  }, walk: function(e4) {
    for (var a3 = [], r3 = []; e4.length; ) {
      var i3 = e4.pop();
      if (ut(i3)) {
        if (this.refSet.has(i3)) continue;
        try {
          var n3 = i3;
          this.refSet.put(n3), i3 = this.xref.fetch(i3);
        } catch (e5) {
          if (!(e5 instanceof Ve)) throw e5;
          a3.push(i3), r3.push({ begin: e5.begin, end: e5.end });
        }
      }
      if (i3 && i3.getBaseStreams) {
        for (var c3 = i3.getBaseStreams(), s3 = false, o3 = 0; o3 < c3.length; o3++) {
          var f2 = c3[o3];
          f2.getMissingChunks && f2.getMissingChunks().length && (s3 = true, r3.push({ begin: f2.start, end: f2.end }));
        }
        s3 && a3.push(i3);
      }
      t3(i3, e4);
    }
    r3.length ? this.xref.stream.manager.requestRanges(r3, function() {
      e4 = a3;
      for (var t4 = 0; t4 < a3.length; t4++) {
        var r4 = a3[t4];
        ut(r4) && this.refSet.remove(r4);
      }
      this.walk(e4);
    }.bind(this)) : (this.refSet = null, this.promise.resolve());
  } }, a2;
}();
var na = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron"];
var ca = [".notdef", "space", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"];
var sa = [".notdef", "space", "dollaroldstyle", "dollarsuperior", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "hyphensuperior", "colonmonetary", "onefitted", "rupiah", "centoldstyle", "figuredash", "hypheninferior", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior"];
var oa = function() {
  function e3(e4) {
    this.a = 0, this.b = 0;
    var t3, a2, r3 = new Uint8Array(256), i3 = 0, n3 = e4.length;
    for (t3 = 0; t3 < 256; ++t3) r3[t3] = t3;
    for (t3 = 0; t3 < 256; ++t3) i3 = i3 + (a2 = r3[t3]) + e4[t3 % n3] & 255, r3[t3] = r3[i3], r3[i3] = a2;
    this.s = r3;
  }
  return e3.prototype = { encryptBlock: function(e4) {
    var t3, a2, r3, i3 = e4.length, n3 = this.a, c3 = this.b, s3 = this.s, o3 = new Uint8Array(i3);
    for (t3 = 0; t3 < i3; ++t3) r3 = s3[c3 = c3 + (a2 = s3[n3 = n3 + 1 & 255]) & 255], s3[n3] = r3, s3[c3] = a2, o3[t3] = e4[t3] ^ s3[a2 + r3 & 255];
    return this.a = n3, this.b = c3, o3;
  } }, e3.prototype.decryptBlock = e3.prototype.encryptBlock, e3;
}();
var fa = (Ut = new Uint8Array([7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 7, 12, 17, 22, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 5, 9, 14, 20, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 4, 11, 16, 23, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21, 6, 10, 15, 21]), zt = new Int32Array([-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]), function(e3, t3, a2) {
  var r3, i3, n3, c3 = 1732584193, s3 = -271733879, o3 = -1732584194, f2 = 271733878, l2 = a2 + 72 & -64, h3 = new Uint8Array(l2);
  for (r3 = 0; r3 < a2; ++r3) h3[r3] = e3[t3++];
  for (h3[r3++] = 128, n3 = l2 - 8; r3 < n3; ) h3[r3++] = 0;
  h3[r3++] = a2 << 3 & 255, h3[r3++] = a2 >> 5 & 255, h3[r3++] = a2 >> 13 & 255, h3[r3++] = a2 >> 21 & 255, h3[r3++] = a2 >>> 29 & 255, h3[r3++] = 0, h3[r3++] = 0, h3[r3++] = 0;
  var u3 = new Int32Array(16);
  for (r3 = 0; r3 < l2; ) {
    for (i3 = 0; i3 < 16; ++i3, r3 += 4) u3[i3] = h3[r3] | h3[r3 + 1] << 8 | h3[r3 + 2] << 16 | h3[r3 + 3] << 24;
    var d3, g2, m3 = c3, p3 = s3, b3 = o3, v3 = f2;
    for (i3 = 0; i3 < 64; ++i3) {
      i3 < 16 ? (d3 = p3 & b3 | ~p3 & v3, g2 = i3) : i3 < 32 ? (d3 = v3 & p3 | ~v3 & b3, g2 = 5 * i3 + 1 & 15) : i3 < 48 ? (d3 = p3 ^ b3 ^ v3, g2 = 3 * i3 + 5 & 15) : (d3 = b3 ^ (p3 | ~v3), g2 = 7 * i3 & 15);
      var y3 = v3, k3 = m3 + d3 + zt[i3] + u3[g2] | 0, A3 = Ut[i3];
      v3 = b3, b3 = p3, p3 = p3 + (k3 << A3 | k3 >>> 32 - A3) | 0, m3 = y3;
    }
    c3 = c3 + m3 | 0, s3 = s3 + p3 | 0, o3 = o3 + b3 | 0, f2 = f2 + v3 | 0;
  }
  return new Uint8Array([255 & c3, c3 >> 8 & 255, c3 >> 16 & 255, c3 >>> 24 & 255, 255 & s3, s3 >> 8 & 255, s3 >> 16 & 255, s3 >>> 24 & 255, 255 & o3, o3 >> 8 & 255, o3 >> 16 & 255, o3 >>> 24 & 255, 255 & f2, f2 >> 8 & 255, f2 >> 16 & 255, f2 >>> 24 & 255]);
});
var la = function() {
  function e3() {
  }
  return e3.prototype = { decryptBlock: function(e4) {
    return e4;
  } }, e3;
}();
var ha = function() {
  var e3 = new Uint8Array([141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141, 1, 2, 4, 8, 16, 32, 64, 128, 27, 54, 108, 216, 171, 77, 154, 47, 94, 188, 99, 198, 151, 53, 106, 212, 179, 125, 250, 239, 197, 145, 57, 114, 228, 211, 189, 97, 194, 159, 37, 74, 148, 51, 102, 204, 131, 29, 58, 116, 232, 203, 141]), t3 = new Uint8Array([99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243, 210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]), a2 = new Uint8Array([82, 9, 106, 213, 48, 54, 165, 56, 191, 64, 163, 158, 129, 243, 215, 251, 124, 227, 57, 130, 155, 47, 255, 135, 52, 142, 67, 68, 196, 222, 233, 203, 84, 123, 148, 50, 166, 194, 35, 61, 238, 76, 149, 11, 66, 250, 195, 78, 8, 46, 161, 102, 40, 217, 36, 178, 118, 91, 162, 73, 109, 139, 209, 37, 114, 248, 246, 100, 134, 104, 152, 22, 212, 164, 92, 204, 93, 101, 182, 146, 108, 112, 72, 80, 253, 237, 185, 218, 94, 21, 70, 87, 167, 141, 157, 132, 144, 216, 171, 0, 140, 188, 211, 10, 247, 228, 88, 5, 184, 179, 69, 6, 208, 44, 30, 143, 202, 63, 15, 2, 193, 175, 189, 3, 1, 19, 138, 107, 58, 145, 17, 65, 79, 103, 220, 234, 151, 242, 207, 206, 240, 180, 230, 115, 150, 172, 116, 34, 231, 173, 53, 133, 226, 249, 55, 232, 28, 117, 223, 110, 71, 241, 26, 113, 29, 41, 197, 137, 111, 183, 98, 14, 170, 24, 190, 27, 252, 86, 62, 75, 198, 210, 121, 32, 154, 219, 192, 254, 120, 205, 90, 244, 31, 221, 168, 51, 136, 7, 199, 49, 177, 18, 16, 89, 39, 128, 236, 95, 96, 81, 127, 169, 25, 181, 74, 13, 45, 229, 122, 159, 147, 201, 156, 239, 160, 224, 59, 77, 174, 42, 245, 176, 200, 235, 187, 60, 131, 83, 153, 97, 23, 43, 4, 126, 186, 119, 214, 38, 225, 105, 20, 99, 85, 33, 12, 125]), r3 = new Uint32Array([0, 235474187, 470948374, 303765277, 941896748, 908933415, 607530554, 708780849, 1883793496, 2118214995, 1817866830, 1649639237, 1215061108, 1181045119, 1417561698, 1517767529, 3767586992, 4003061179, 4236429990, 4069246893, 3635733660, 3602770327, 3299278474, 3400528769, 2430122216, 2664543715, 2362090238, 2193862645, 2835123396, 2801107407, 3035535058, 3135740889, 3678124923, 3576870512, 3341394285, 3374361702, 3810496343, 3977675356, 4279080257, 4043610186, 2876494627, 2776292904, 3076639029, 3110650942, 2472011535, 2640243204, 2403728665, 2169303058, 1001089995, 899835584, 666464733, 699432150, 59727847, 226906860, 530400753, 294930682, 1273168787, 1172967064, 1475418501, 1509430414, 1942435775, 2110667444, 1876241833, 1641816226, 2910219766, 2743034109, 2976151520, 3211623147, 2505202138, 2606453969, 2302690252, 2269728455, 3711829422, 3543599269, 3240894392, 3475313331, 3843699074, 3943906441, 4178062228, 4144047775, 1306967366, 1139781709, 1374988112, 1610459739, 1975683434, 2076935265, 1775276924, 1742315127, 1034867998, 866637845, 566021896, 800440835, 92987698, 193195065, 429456164, 395441711, 1984812685, 2017778566, 1784663195, 1683407248, 1315562145, 1080094634, 1383856311, 1551037884, 101039829, 135050206, 437757123, 337553864, 1042385657, 807962610, 573804783, 742039012, 2531067453, 2564033334, 2328828971, 2227573024, 2935566865, 2700099354, 3001755655, 3168937228, 3868552805, 3902563182, 4203181171, 4102977912, 3736164937, 3501741890, 3265478751, 3433712980, 1106041591, 1340463100, 1576976609, 1408749034, 2043211483, 2009195472, 1708848333, 1809054150, 832877231, 1068351396, 766945465, 599762354, 159417987, 126454664, 361929877, 463180190, 2709260871, 2943682380, 3178106961, 3009879386, 2572697195, 2538681184, 2236228733, 2336434550, 3509871135, 3745345300, 3441850377, 3274667266, 3910161971, 3877198648, 4110568485, 4211818798, 2597806476, 2497604743, 2261089178, 2295101073, 2733856160, 2902087851, 3202437046, 2968011453, 3936291284, 3835036895, 4136440770, 4169408201, 3535486456, 3702665459, 3467192302, 3231722213, 2051518780, 1951317047, 1716890410, 1750902305, 1113818384, 1282050075, 1584504582, 1350078989, 168810852, 67556463, 371049330, 404016761, 841739592, 1008918595, 775550814, 540080725, 3969562369, 3801332234, 4035489047, 4269907996, 3569255213, 3669462566, 3366754619, 3332740144, 2631065433, 2463879762, 2160117071, 2395588676, 2767645557, 2868897406, 3102011747, 3069049960, 202008497, 33778362, 270040487, 504459436, 875451293, 975658646, 675039627, 641025152, 2084704233, 1917518562, 1615861247, 1851332852, 1147550661, 1248802510, 1484005843, 1451044056, 933301370, 967311729, 733156972, 632953703, 260388950, 25965917, 328671808, 496906059, 1206477858, 1239443753, 1543208500, 1441952575, 2144161806, 1908694277, 1675577880, 1842759443, 3610369226, 3644379585, 3408119516, 3307916247, 4011190502, 3776767469, 4077384432, 4245618683, 2809771154, 2842737049, 3144396420, 3043140495, 2673705150, 2438237621, 2203032232, 2370213795]);
  function i3(e4, t4) {
    var i4, n4, c4, s3, o3, f2, l2 = new Uint8Array(16);
    for (l2.set(e4), n4 = 0, c4 = 160; n4 < 16; ++n4, ++c4) l2[n4] ^= t4[c4];
    for (i4 = 9; i4 >= 1; --i4) {
      for (s3 = l2[13], l2[13] = l2[9], l2[9] = l2[5], l2[5] = l2[1], l2[1] = s3, s3 = l2[14], o3 = l2[10], l2[14] = l2[6], l2[10] = l2[2], l2[6] = s3, l2[2] = o3, s3 = l2[15], o3 = l2[11], f2 = l2[7], l2[15] = l2[3], l2[11] = s3, l2[7] = o3, l2[3] = f2, n4 = 0; n4 < 16; ++n4) l2[n4] = a2[l2[n4]];
      for (n4 = 0, c4 = 16 * i4; n4 < 16; ++n4, ++c4) l2[n4] ^= t4[c4];
      for (n4 = 0; n4 < 16; n4 += 4) {
        var h3 = r3[l2[n4]], u3 = r3[l2[n4 + 1]], d3 = r3[l2[n4 + 2]], g2 = r3[l2[n4 + 3]];
        s3 = h3 ^ u3 >>> 8 ^ u3 << 24 ^ d3 >>> 16 ^ d3 << 16 ^ g2 >>> 24 ^ g2 << 8, l2[n4] = s3 >>> 24 & 255, l2[n4 + 1] = s3 >> 16 & 255, l2[n4 + 2] = s3 >> 8 & 255, l2[n4 + 3] = 255 & s3;
      }
    }
    for (s3 = l2[13], l2[13] = l2[9], l2[9] = l2[5], l2[5] = l2[1], l2[1] = s3, s3 = l2[14], o3 = l2[10], l2[14] = l2[6], l2[10] = l2[2], l2[6] = s3, l2[2] = o3, s3 = l2[15], o3 = l2[11], f2 = l2[7], l2[15] = l2[3], l2[11] = s3, l2[7] = o3, l2[3] = f2, n4 = 0; n4 < 16; ++n4) l2[n4] = a2[l2[n4]], l2[n4] ^= t4[n4];
    return l2;
  }
  function n3(a3) {
    this.key = function(a4) {
      var r4 = new Uint8Array(176);
      r4.set(a4);
      for (var i4 = 16, n4 = 1; i4 < 176; ++n4) {
        var c4 = r4[i4 - 3], s3 = r4[i4 - 2], o3 = r4[i4 - 1], f2 = r4[i4 - 4];
        c4 = t3[c4], s3 = t3[s3], o3 = t3[o3], f2 = t3[f2], c4 ^= e3[n4];
        for (var l2 = 0; l2 < 4; ++l2) r4[i4] = c4 ^= r4[i4 - 16], r4[++i4] = s3 ^= r4[i4 - 16], r4[++i4] = o3 ^= r4[i4 - 16], r4[++i4] = f2 ^= r4[i4 - 16], i4++;
      }
      return r4;
    }(a3), this.buffer = new Uint8Array(16), this.bufferPosition = 0;
  }
  function c3(e4, t4) {
    var a3, r4, n4, c4 = e4.length, s3 = this.buffer, o3 = this.bufferPosition, f2 = [], l2 = this.iv;
    for (a3 = 0; a3 < c4; ++a3) if (s3[o3] = e4[a3], !(++o3 < 16)) {
      var h3 = i3(s3, this.key);
      for (r4 = 0; r4 < 16; ++r4) h3[r4] ^= l2[r4];
      l2 = s3, f2.push(h3), s3 = new Uint8Array(16), o3 = 0;
    }
    if (this.buffer = s3, this.bufferLength = o3, this.iv = l2, 0 === f2.length) return new Uint8Array([]);
    var u3 = 16 * f2.length;
    if (t4) {
      var d3 = f2[f2.length - 1];
      u3 -= d3[15], f2[f2.length - 1] = d3.subarray(0, 16 - d3[15]);
    }
    var g2 = new Uint8Array(u3);
    for (a3 = 0, r4 = 0, n4 = f2.length; a3 < n4; ++a3, r4 += 16) g2.set(f2[a3], r4);
    return g2;
  }
  return n3.prototype = { decryptBlock: function(e4, t4) {
    var a3, r4 = e4.length, i4 = this.buffer, n4 = this.bufferPosition;
    for (a3 = 0; n4 < 16 && a3 < r4; ++a3, ++n4) i4[n4] = e4[a3];
    return n4 < 16 ? (this.bufferLength = n4, new Uint8Array([])) : (this.iv = i4, this.buffer = new Uint8Array(16), this.bufferLength = 0, this.decryptBlock = c3, this.decryptBlock(e4.subarray(16), t4));
  } }, n3;
}();
var ua = function() {
  function e3(e4, t3) {
    this.stringCipherConstructor = e4, this.streamCipherConstructor = t3;
  }
  return e3.prototype = { createStream: function(e4) {
    var t3 = new this.streamCipherConstructor();
    return new Sr(e4, function(e5, a2) {
      return t3.decryptBlock(e5, a2);
    });
  }, decryptString: function(e4) {
    var t3 = new this.stringCipherConstructor(), a2 = Ke(e4);
    return Je(a2 = t3.decryptBlock(a2, true));
  } }, e3;
}();
var da = function() {
  var e3 = new Uint8Array([40, 191, 78, 94, 78, 117, 138, 65, 100, 0, 78, 86, 255, 250, 1, 8, 46, 46, 0, 182, 208, 104, 62, 128, 47, 12, 169, 254, 100, 83, 105, 122]);
  function t3(t4, a3, r4, i4, n4, c3, s3, o3) {
    var f2, l2, h3 = 40 + r4.length + t4.length, u3 = new Uint8Array(h3), d3 = 0;
    if (a3) for (l2 = Math.min(32, a3.length); d3 < l2; ++d3) u3[d3] = a3[d3];
    for (f2 = 0; d3 < 32; ) u3[d3++] = e3[f2++];
    for (f2 = 0, l2 = r4.length; f2 < l2; ++f2) u3[d3++] = r4[f2];
    for (u3[d3++] = 255 & n4, u3[d3++] = n4 >> 8 & 255, u3[d3++] = n4 >> 16 & 255, u3[d3++] = n4 >>> 24 & 255, f2 = 0, l2 = t4.length; f2 < l2; ++f2) u3[d3++] = t4[f2];
    c3 >= 4 && !o3 && (u3[d3++] = 255, u3[d3++] = 255, u3[d3++] = 255, u3[d3++] = 255);
    var g2 = fa(u3, 0, d3), m3 = s3 >> 3;
    if (c3 >= 3) for (f2 = 0; f2 < 50; ++f2) g2 = fa(g2, 0, m3);
    var p3 = g2.subarray(0, m3);
    if (c3 >= 3) {
      for (d3 = 0; d3 < 32; ++d3) u3[d3] = e3[d3];
      for (f2 = 0, l2 = t4.length; f2 < l2; ++f2) u3[d3++] = t4[f2];
      var b3 = new oa(p3).encryptBlock(fa(u3, 0, d3));
      l2 = p3.length;
      var v3, y3 = new Uint8Array(l2);
      for (f2 = 1; f2 <= 19; ++f2) {
        for (v3 = 0; v3 < l2; ++v3) y3[v3] = p3[v3] ^ f2;
        b3 = new oa(y3).encryptBlock(b3);
      }
      for (f2 = 0, l2 = b3.length; f2 < l2; ++f2) if (i4[f2] != b3[f2]) return null;
    } else for (f2 = 0, l2 = (b3 = new oa(p3).encryptBlock(e3)).length; f2 < l2; ++f2) if (i4[f2] != b3[f2]) return null;
    return p3;
  }
  var a2 = new Jt("Identity");
  function r3(r4, i4, n4) {
    var c3 = r4.get("Filter");
    ct(c3) && "Standard" == c3.name || Oe("Error: unknown encryption method"), this.dict = r4;
    var s3 = r4.get("V");
    (!rt(s3) || 1 != s3 && 2 != s3 && 4 != s3) && Oe("Error: unsupported encryption algorithm"), this.algorithm = s3;
    var o3 = r4.get("Length") || 40;
    (!rt(o3) || o3 < 40 || o3 % 8 != 0) && Oe("Error: invalid key length");
    var f2 = Ke(r4.get("O")).subarray(0, 32), l2 = Ke(r4.get("U")).subarray(0, 32), h3 = r4.get("P"), u3 = r4.get("R"), d3 = 4 == s3 && false !== r4.get("EncryptMetadata");
    this.encryptMetadata = d3;
    var g2, m3 = Ke(i4);
    n4 && (g2 = Ke(n4));
    var p3 = t3(m3, g2, f2, l2, h3, u3, o3, d3);
    if (!p3 && !n4) throw new He("No password given", ze.NEED_PASSWORD);
    if (!p3 && n4) {
      var b3 = function(t4, a3, r5, i5) {
        var n5, c4, s4 = new Uint8Array(32), o4 = 0;
        for (c4 = Math.min(32, t4.length); o4 < c4; ++o4) s4[o4] = t4[o4];
        for (n5 = 0; o4 < 32; ) s4[o4++] = e3[n5++];
        var f3, l3 = fa(s4, 0, o4), h4 = i5 >> 3;
        if (r5 >= 3) for (n5 = 0; n5 < 50; ++n5) l3 = fa(l3, 0, l3.length);
        if (r5 >= 3) {
          f3 = a3;
          var u4, d4 = new Uint8Array(h4);
          for (n5 = 19; n5 >= 0; n5--) {
            for (u4 = 0; u4 < h4; ++u4) d4[u4] = l3[u4] ^ n5;
            f3 = new oa(d4).encryptBlock(f3);
          }
        } else f3 = new oa(l3.subarray(0, h4)).encryptBlock(a3);
        return f3;
      }(g2, f2, u3, o3);
      p3 = t3(m3, b3, f2, l2, h3, u3, o3, d3);
    }
    if (!p3) throw new He("Incorrect Password", ze.INCORRECT_PASSWORD);
    this.encryptionKey = p3, 4 == s3 && (this.cf = r4.get("CF"), this.stmf = r4.get("StmF") || a2, this.strf = r4.get("StrF") || a2, this.eff = r4.get("EFF") || this.strf);
  }
  function i3(e4, t4, a3, r4) {
    var i4, n4, c3 = new Uint8Array(a3.length + 9);
    for (i4 = 0, n4 = a3.length; i4 < n4; ++i4) c3[i4] = a3[i4];
    return c3[i4++] = 255 & e4, c3[i4++] = e4 >> 8 & 255, c3[i4++] = e4 >> 16 & 255, c3[i4++] = 255 & t4, c3[i4++] = t4 >> 8 & 255, r4 && (c3[i4++] = 115, c3[i4++] = 65, c3[i4++] = 108, c3[i4++] = 84), fa(c3, 0, i4).subarray(0, Math.min(a3.length + 5, 16));
  }
  function n3(e4, t4, a3, r4, n4) {
    var c3, s3 = e4.get(t4.name);
    return null != s3 && (c3 = s3.get("CFM")), c3 && "None" != c3.name ? "V2" == c3.name ? function() {
      return new oa(i3(a3, r4, n4, false));
    } : "AESV2" == c3.name ? function() {
      return new ha(i3(a3, r4, n4, true));
    } : void Oe("Unknown crypto method") : function() {
      return new la();
    };
  }
  return r3.prototype = { createCipherTransform: function(e4, t4) {
    if (4 == this.algorithm) return new ua(n3(this.cf, this.stmf, e4, t4, this.encryptionKey), n3(this.cf, this.strf, e4, t4, this.encryptionKey));
    var a3 = i3(e4, t4, this.encryptionKey, false), r4 = function() {
      return new oa(a3);
    };
    return new ua(r4, r4);
  } }, r3;
}();
var ga = function() {
  function e3(e4, t4, a2, r3, i3, n3, c3) {
    this.state = new ba(), this.stateStack = [], this.pdfManager = e4, this.xref = t4, this.handler = a2, this.pageIndex = r3, this.uniquePrefix = i3, this.idCounters = n3, this.fontCache = c3;
  }
  var t3 = { w: { id: Be.setLineWidth, numArgs: 1, variableArgs: false }, J: { id: Be.setLineCap, numArgs: 1, variableArgs: false }, j: { id: Be.setLineJoin, numArgs: 1, variableArgs: false }, M: { id: Be.setMiterLimit, numArgs: 1, variableArgs: false }, d: { id: Be.setDash, numArgs: 2, variableArgs: false }, ri: { id: Be.setRenderingIntent, numArgs: 1, variableArgs: false }, i: { id: Be.setFlatness, numArgs: 1, variableArgs: false }, gs: { id: Be.setGState, numArgs: 1, variableArgs: false }, q: { id: Be.save, numArgs: 0, variableArgs: false }, Q: { id: Be.restore, numArgs: 0, variableArgs: false }, cm: { id: Be.transform, numArgs: 6, variableArgs: false }, m: { id: Be.moveTo, numArgs: 2, variableArgs: false }, l: { id: Be.lineTo, numArgs: 2, variableArgs: false }, c: { id: Be.curveTo, numArgs: 6, variableArgs: false }, v: { id: Be.curveTo2, numArgs: 4, variableArgs: false }, y: { id: Be.curveTo3, numArgs: 4, variableArgs: false }, h: { id: Be.closePath, numArgs: 0, variableArgs: false }, re: { id: Be.rectangle, numArgs: 4, variableArgs: false }, S: { id: Be.stroke, numArgs: 0, variableArgs: false }, s: { id: Be.closeStroke, numArgs: 0, variableArgs: false }, f: { id: Be.fill, numArgs: 0, variableArgs: false }, F: { id: Be.fill, numArgs: 0, variableArgs: false }, "f*": { id: Be.eoFill, numArgs: 0, variableArgs: false }, B: { id: Be.fillStroke, numArgs: 0, variableArgs: false }, "B*": { id: Be.eoFillStroke, numArgs: 0, variableArgs: false }, b: { id: Be.closeFillStroke, numArgs: 0, variableArgs: false }, "b*": { id: Be.closeEOFillStroke, numArgs: 0, variableArgs: false }, n: { id: Be.endPath, numArgs: 0, variableArgs: false }, W: { id: Be.clip, numArgs: 0, variableArgs: false }, "W*": { id: Be.eoClip, numArgs: 0, variableArgs: false }, BT: { id: Be.beginText, numArgs: 0, variableArgs: false }, ET: { id: Be.endText, numArgs: 0, variableArgs: false }, Tc: { id: Be.setCharSpacing, numArgs: 1, variableArgs: false }, Tw: { id: Be.setWordSpacing, numArgs: 1, variableArgs: false }, Tz: { id: Be.setHScale, numArgs: 1, variableArgs: false }, TL: { id: Be.setLeading, numArgs: 1, variableArgs: false }, Tf: { id: Be.setFont, numArgs: 2, variableArgs: false }, Tr: { id: Be.setTextRenderingMode, numArgs: 1, variableArgs: false }, Ts: { id: Be.setTextRise, numArgs: 1, variableArgs: false }, Td: { id: Be.moveText, numArgs: 2, variableArgs: false }, TD: { id: Be.setLeadingMoveText, numArgs: 2, variableArgs: false }, Tm: { id: Be.setTextMatrix, numArgs: 6, variableArgs: false }, "T*": { id: Be.nextLine, numArgs: 0, variableArgs: false }, Tj: { id: Be.showText, numArgs: 1, variableArgs: false }, TJ: { id: Be.showSpacedText, numArgs: 1, variableArgs: false }, "'": { id: Be.nextLineShowText, numArgs: 1, variableArgs: false }, '"': { id: Be.nextLineSetSpacingShowText, numArgs: 3, variableArgs: false }, d0: { id: Be.setCharWidth, numArgs: 2, variableArgs: false }, d1: { id: Be.setCharWidthAndBounds, numArgs: 6, variableArgs: false }, CS: { id: Be.setStrokeColorSpace, numArgs: 1, variableArgs: false }, cs: { id: Be.setFillColorSpace, numArgs: 1, variableArgs: false }, SC: { id: Be.setStrokeColor, numArgs: 4, variableArgs: true }, SCN: { id: Be.setStrokeColorN, numArgs: 33, variableArgs: true }, sc: { id: Be.setFillColor, numArgs: 4, variableArgs: true }, scn: { id: Be.setFillColorN, numArgs: 33, variableArgs: true }, G: { id: Be.setStrokeGray, numArgs: 1, variableArgs: false }, g: { id: Be.setFillGray, numArgs: 1, variableArgs: false }, RG: { id: Be.setStrokeRGBColor, numArgs: 3, variableArgs: false }, rg: { id: Be.setFillRGBColor, numArgs: 3, variableArgs: false }, K: { id: Be.setStrokeCMYKColor, numArgs: 4, variableArgs: false }, k: { id: Be.setFillCMYKColor, numArgs: 4, variableArgs: false }, sh: { id: Be.shadingFill, numArgs: 1, variableArgs: false }, BI: { id: Be.beginInlineImage, numArgs: 0, variableArgs: false }, ID: { id: Be.beginImageData, numArgs: 0, variableArgs: false }, EI: { id: Be.endInlineImage, numArgs: 1, variableArgs: false }, Do: { id: Be.paintXObject, numArgs: 1, variableArgs: false }, MP: { id: Be.markPoint, numArgs: 1, variableArgs: false }, DP: { id: Be.markPointProps, numArgs: 2, variableArgs: false }, BMC: { id: Be.beginMarkedContent, numArgs: 1, variableArgs: false }, BDC: { id: Be.beginMarkedContentProps, numArgs: 2, variableArgs: false }, EMC: { id: Be.endMarkedContent, numArgs: 0, variableArgs: false }, BX: { id: Be.beginCompat, numArgs: 0, variableArgs: false }, EX: { id: Be.endCompat, numArgs: 0, variableArgs: false }, BM: null, BD: null, true: null, fa: null, fal: null, fals: null, false: null, nu: null, nul: null, null: null };
  return e3.prototype = { hasBlendModes: function(e4) {
    if (!ot(e4)) return false;
    for (var t4 = [e4]; t4.length; ) {
      var a2 = t4.shift(), r3 = a2.get("ExtGState");
      if (ot(r3)) for (var i3 in r3 = r3.getAll()) {
        var n3 = r3[i3].BM;
        if (ct(n3) && "Normal" !== n3.name) return true;
      }
      var c3 = a2.get("XObject");
      if (ot(c3)) for (var i3 in c3 = c3.getAll()) {
        var s3 = c3[i3];
        if (lt(s3)) {
          var o3 = s3.dict.get("Resources");
          ot(o3) && o3 !== a2 && t4.indexOf(o3) < 0 && t4.push(o3);
        }
      }
    }
    return false;
  }, buildFormXObject: function(e4, t4, a2, r3) {
    var i3 = t4.dict.get("Matrix"), n3 = t4.dict.get("BBox"), c3 = t4.dict.get("Group");
    if (c3) {
      var s3 = { matrix: i3, bbox: n3, smask: !!a2, isolated: false, knockout: false }, o3 = c3.get("S");
      ct(o3) && "Transparency" === o3.name && (s3.isolated = c3.get("I") || false, s3.knockout = c3.get("K") || false), r3.addOp(Be.beginGroup, [s3]);
    }
    r3.addOp(Be.paintFormXObjectBegin, [i3, n3]), this.getOperatorList(t4, t4.dict.get("Resources") || e4, r3), r3.addOp(Be.paintFormXObjectEnd, []), c3 && r3.addOp(Be.endGroup, [s3]);
  }, buildPaintImageXObject: function(e4, t4, a2, r3) {
    var i3 = this, n3 = t4.dict, c3 = n3.get("Width", "W"), s3 = n3.get("Height", "H");
    if (-1 !== be.maxImageSize && c3 * s3 > be.maxImageSize) Re("Image exceeded maximum allowed size and was removed.");
    else if (n3.get("ImageMask", "IM") || false) {
      var o3 = n3.get("Width", "W"), f2 = n3.get("Height", "H"), l2 = o3 + 7 >> 3, h3 = t4.getBytes(l2 * f2), u3 = n3.get("Decode", "D"), d3 = !!u3 && u3[0] > 0;
      r3.addOp(Be.paintImageMaskXObject, [fr.createMask(h3, o3, f2, d3)]);
    } else {
      var g2 = n3.get("SMask", "SM") || false, m3 = n3.get("Mask") || false;
      if (!a2 || g2 || m3 || t4 instanceof Ar || !(c3 + s3 < 200)) {
        var p3 = "img_" + (this.uniquePrefix || "") + ++this.idCounters.obj;
        r3.addDependency(p3);
        var b3 = [p3, c3, s3];
        if (!g2 && !m3 && t4 instanceof Ar && t4.isNativelySupported(this.xref, e4)) return r3.addOp(Be.paintJpegXObject, b3), void this.handler.send("obj", [p3, this.pageIndex, "JpegStream", t4.getIR()]);
        fr.buildImage(function(e5) {
          var t5 = e5.getImageData();
          i3.handler.send("obj", [p3, i3.pageIndex, "Image", t5], null, [t5.data.buffer]);
        }, i3.handler, i3.xref, e4, t4, a2), r3.addOp(Be.paintImageXObject, b3);
      } else {
        var v3 = new fr(this.xref, e4, t4, a2, null, null).getImageData();
        r3.addOp(Be.paintInlineImageXObject, [v3]);
      }
    }
  }, handleTilingType: function(e4, t4, a2, r3, i3, n3) {
    var c3 = this.getOperatorList(r3, i3.get("Resources") || a2);
    n3.addDependencies(c3.dependencies), n3.addOp(e4, Ft.getIR({ fnArray: c3.fnArray, argsArray: c3.argsArray }, i3, t4));
  }, handleSetFont: function(e4, t4, a2, r3) {
    var i3;
    t4 && (i3 = (t4 = t4.slice())[0].name);
    var n3 = this.loadFont(i3, a2, this.xref, e4, r3);
    this.state.font = n3;
    var c3 = n3.loadedName;
    if (!n3.sent) {
      var s3 = n3.translated.exportData();
      this.handler.send("commonobj", [c3, "Font", s3]), n3.sent = true;
    }
    return c3;
  }, handleText: function(e4) {
    var t4 = this.state.font.translated, a2 = t4.charsToGlyphs(e4), r3 = !!(this.state.textRenderingMode & Ie);
    if (t4.data && (r3 || be.disableFontFace)) {
      for (var i3 = 0; i3 < a2.length; i3++) if (null !== a2[i3]) {
        var n3 = a2[i3].fontChar;
        if (!t4.renderer.hasBuiltPath(n3)) {
          var c3 = t4.renderer.getPathJs(n3);
          this.handler.send("commonobj", [t4.loadedName + "_path_" + n3, "FontPath", c3]);
        }
      }
    }
    return a2;
  }, setGState: function(e4, t4, a2) {
    var r3 = this;
    function i3(t5, i4, n4) {
      switch (i4) {
        case "Type":
          break;
        case "LW":
        case "LC":
        case "LJ":
        case "ML":
        case "D":
        case "RI":
        case "FL":
        case "CA":
        case "ca":
        case "BM":
          t5.push([i4, n4]);
          break;
        case "Font":
          var c4 = r3.handleSetFont(e4, null, n4[0], a2);
          a2.addDependency(c4), t5.push([i4, [c4, n4[1]]]);
          break;
        case "SMask":
          ct(n4) && "None" == n4.name || Me("graphic state operator " + i4);
          break;
        case "OP":
        case "op":
        case "OPM":
        case "BG":
        case "BG2":
        case "UCR":
        case "UCR2":
        case "TR":
        case "TR2":
        case "HT":
        case "SM":
        case "SA":
        case "AIS":
        case "TK":
          Pe("graphic state operator " + i4);
          break;
        default:
          Pe("Unknown graphic state operator " + i4);
      }
    }
    var n3 = [], c3 = t4.map;
    for (var s3 in c3) {
      i3(n3, s3, c3[s3]);
    }
    a2.addOp(Be.setGState, [n3]);
  }, loadFont: function(e4, t4, a2, r3, i3) {
    function n3() {
      return { translated: new za("Font " + e4 + " is not available"), loadedName: "g_font_error" };
    }
    var c3;
    if (t4) De(ut(t4)), c3 = t4;
    else {
      var s3 = r3.get("Font");
      if (!s3) return n3();
      c3 = s3.getRaw(e4);
    }
    if (this.fontCache.has(c3)) return this.fontCache.get(c3);
    if (!ot(t4 = a2.fetchIfRef(c3))) return n3();
    if (this.fontCache.put(c3, t4), t4.loadedName = "g_font_" + c3.num + "_" + c3.gen, !t4.translated) {
      var o3;
      try {
        o3 = this.translateFont(t4, a2);
      } catch (e5) {
        o3 = new za(e5 instanceof Error ? e5.message : e5);
      }
      t4.translated = o3;
    }
    if (t4.translated.loadCharProcs) {
      for (var f2 = t4.get("CharProcs").getAll(), l2 = t4.get("Resources") || r3, h3 = Object.keys(f2), u3 = {}, d3 = 0, g2 = h3.length; d3 < g2; ++d3) {
        var m3 = h3[d3], p3 = f2[m3], b3 = this.getOperatorList(p3, l2);
        u3[m3] = b3.getIR(), i3 && i3.addDependencies(u3.dependencies);
      }
      t4.translated.charProcOperatorList = u3, t4.loaded = true;
    } else t4.loaded = true;
    return t4;
  }, getOperatorList: function(e4, a2, r3) {
    var i3 = this, n3 = this.xref;
    this.handler;
    r3 = r3 || new ma();
    for (var c3 = (a2 = a2 || new Zt()).get("XObject") || new Zt(), s3 = a2.get("Pattern") || new Zt(), o3 = new dr(new gr(e4, t3), false, n3), f2 = (new gt(), []); ; ) {
      var l2 = o3.getObj();
      if (ur(l2)) break;
      if (st(l2)) {
        var h3 = l2.cmd, u3 = t3[h3];
        if (!u3) {
          Re('Unknown command "' + h3 + '"');
          continue;
        }
        var d3 = u3.id;
        if (u3.variableArgs) f2.length > u3.numArgs && Pe("Command " + d3 + ": expected [0," + u3.numArgs + "] args, but received " + f2.length + " args");
        else {
          if (f2.length < u3.numArgs) {
            Pe("Command " + d3 + ": because expected " + u3.numArgs + " args, but received " + f2.length + " args; skipping"), f2 = [];
            continue;
          }
          f2.length > u3.numArgs && Pe("Command " + d3 + ": expected " + u3.numArgs + " args, but received " + f2.length + " args");
        }
        switch (d3) {
          case Be.setStrokeColorN:
          case Be.setFillColorN:
            if (f2[f2.length - 1].code) break;
            var g2 = f2[f2.length - 1];
            if (ct(g2) && (b3 = s3.get(g2.name))) {
              var m3 = lt(b3) ? b3.dict : b3, p3 = m3.get("PatternType");
              if (1 == p3) {
                i3.handleTilingType(d3, f2, a2, b3, m3, r3), f2 = [];
                continue;
              }
              if (2 == p3) {
                var b3, v3 = m3.get("Shading"), y3 = m3.get("Matrix");
                f2 = (b3 = Tt.parseShading(v3, y3, n3, a2)).getIR();
              } else Oe("Unkown PatternType " + p3);
            }
            break;
          case Be.paintXObject:
            if (f2[0].code) break;
            var k3 = f2[0].name, A3 = c3.get(k3);
            if (A3) {
              Ne(lt(A3), "XObject should be a stream");
              var w3 = A3.dict.get("Subtype");
              if (Ne(ct(w3), "XObject should have a Name subtype"), "Form" == w3.name) {
                i3.buildFormXObject(a2, A3, null, r3), f2 = [];
                continue;
              }
              if ("Image" == w3.name) {
                i3.buildPaintImageXObject(a2, A3, false, r3), f2 = [];
                continue;
              }
              Oe("Unhandled XObject subtype " + w3.name);
            }
            break;
          case Be.setFont:
            var x3 = i3.handleSetFont(a2, f2, null, r3);
            r3.addDependency(x3), f2[0] = x3;
            break;
          case Be.endInlineImage:
            i3.buildPaintImageXObject(a2, f2[0], true, r3), f2 = [];
            continue;
          case Be.save:
            var S3 = this.state;
            this.stateStack.push(this.state), this.state = S3.clone();
            break;
          case Be.restore:
            var C2 = this.stateStack.pop();
            C2 && (this.state = C2);
            break;
          case Be.showText:
            f2[0] = this.handleText(f2[0]);
            break;
          case Be.showSpacedText:
            for (var I3 = f2[0], B3 = I3.length, T3 = 0; T3 < B3; ++T3) nt(I3[T3]) && (I3[T3] = this.handleText(I3[T3]));
            break;
          case Be.nextLineShowText:
            f2[0] = this.handleText(f2[0]);
            break;
          case Be.nextLineSetSpacingShowText:
            f2[2] = this.handleText(f2[2]);
            break;
          case Be.setTextRenderingMode:
            this.state.textRenderingMode = f2[0];
            break;
          case Be.setFillColorSpace:
          case Be.setStrokeColorSpace:
            f2 = [bt.parseToIR(f2[0], n3, a2)];
            break;
          case Be.shadingFill:
            var L2 = a2.get("Shading");
            L2 || Oe("No shading resource found"), (v3 = L2.get(f2[0].name)) || Oe("No shading object found"), f2 = [Tt.parseShading(v3, null, n3, a2).getIR()], d3 = Be.shadingFill;
            break;
          case Be.setGState:
            var F2 = f2[0], P3 = a2.get("ExtGState");
            if (!ot(P3) || !P3.has(F2.name)) break;
            var R2 = P3.get(F2.name);
            i3.setGState(a2, R2, r3), f2 = [];
            continue;
        }
        r3.addOp(d3, f2), f2 = [], o3.saveState();
      } else null != l2 && (f2.push(l2 instanceof Zt ? l2.getAll() : l2), Ne(f2.length <= 33, "Too many arguments"));
    }
    return r3;
  }, getTextContent: function(e4, t4, a2) {
    var r3, i3;
    a2 ? (r3 = a2.bidiTexts, i3 = a2.textState) : a2 = { textState: i3 = new pa(), bidiTexts: r3 = [] };
    var n3 = this, c3 = this.xref;
    function s3(e5, a3) {
      return n3.loadFont(e5, a3, c3, t4, null);
    }
    t4 = c3.fetchIfRef(t4) || new Zt();
    for (var o3, f2 = null, l2 = new dr(new gr(e4), false), h3 = [], u3 = "", d3 = null; !ur(o3 = l2.getObj()); ) if (st(o3)) {
      switch (o3.cmd) {
        case "Tf":
          d3 = s3(h3[0].name).translated, i3.fontSize = h3[1];
          break;
        case "Ts":
          i3.textRise = h3[0];
          break;
        case "Tz":
          i3.textHScale = h3[0] / 100;
          break;
        case "TL":
          i3.leading = h3[0];
          break;
        case "Td":
          i3.translateTextMatrix(h3[0], h3[1]);
          break;
        case "TD":
          i3.leading = -h3[1], i3.translateTextMatrix(h3[0], h3[1]);
          break;
        case "T*":
          i3.translateTextMatrix(0, -i3.leading);
          break;
        case "Tm":
          i3.setTextMatrix(h3[0], h3[1], h3[2], h3[3], h3[4], h3[5]);
          break;
        case "Tc":
          h3[0];
          break;
        case "Tw":
          h3[0];
          break;
        case "q":
          i3.push();
          break;
        case "Q":
          i3.pop();
          break;
        case "BT":
          i3.initialiseTextObj();
          break;
        case "cm":
          i3.transformCTM(h3[0], h3[1], h3[2], h3[3], h3[4], h3[5]);
          break;
        case "TJ":
          for (var g2 = h3[0], m3 = 0, p3 = g2.length; m3 < p3; m3++) if ("string" == typeof g2[m3]) u3 += ja(g2[m3], d3);
          else if (g2[m3] < 0 && d3.spaceWidth > 0) {
            var b3 = -g2[m3] / d3.spaceWidth;
            if (b3 > 1.5) for (b3 = Math.round(b3); b3--; ) u3 += " ";
            else b3 > 0.35 && (u3 += " ");
          }
          break;
        case "Tj":
        case "'":
          u3 += ja(h3[0], d3);
          break;
        case '"':
          u3 += ja(h3[2], d3);
          break;
        case "Do":
          if (u3 = "", h3[0].code) break;
          f2 || (f2 = t4.get("XObject") || new Zt());
          var v3 = h3[0].name, y3 = f2.get(v3);
          if (!y3) break;
          Ne(lt(y3), "XObject should be a stream");
          var k3 = y3.dict.get("Subtype");
          if (Ne(ct(k3), "XObject should have a Name subtype"), "Form" !== k3.name) break;
          a2 = this.getTextContent(y3, y3.dict.get("Resources") || t4, a2);
          break;
        case "gs":
          var A3 = h3[0], w3 = t4.get("ExtGState");
          if (!ot(w3) || !w3.has(A3.name)) break;
          for (var x3 = w3.get(A3.name), S3 = 0; S3 < x3.length; S3++) "Font" === x3[S3] && (d3 = s3(h3[0].name).translated);
      }
      if ("" !== u3) {
        var C2 = be.bidi(u3, -1, d3.vertical), I3 = i3.calcRenderParams();
        C2.x = I3.renderMatrix[4] - i3.fontSize * I3.vScale * Math.sin(I3.angle), C2.y = I3.renderMatrix[5] + i3.fontSize * I3.vScale * Math.cos(I3.angle), "ttb" == C2.dir && (C2.x += I3.vScale / 2, C2.y -= I3.vScale), r3.push(C2), u3 = "";
      }
      h3 = [];
    } else null != o3 && (Ne(h3.length <= 33, "Too many arguments"), h3.push(o3));
    return a2;
  }, extractDataStructures: function(e4, t4, a2, r3) {
    var i3 = e4.get("ToUnicode") || t4.get("ToUnicode");
    if (i3 && (r3.toUnicode = this.readToUnicode(i3, a2, r3)), r3.composite) {
      var n3 = e4.get("CIDSystemInfo");
      ot(n3) && (r3.cidSystemInfo = { registry: n3.get("Registry"), ordering: n3.get("Ordering"), supplement: n3.get("Supplement") });
      var c3 = e4.get("CIDToGIDMap");
      lt(c3) && (r3.cidToGidMap = this.readCidToGidMap(c3));
    }
    var s3 = true, o3 = false, f2 = r3.flags, l2 = [], h3 = "TrueType" === r3.type ? Aa.WinAnsiEncoding : Aa.StandardEncoding;
    if (f2 & ka.Symbolic && (h3 = r3.file ? Aa.MacRomanEncoding : Aa.SymbolSetEncoding), e4.has("Encoding")) {
      var u3 = e4.get("Encoding");
      if (ot(u3)) {
        var d3 = u3.get("BaseEncoding");
        if (d3 && (s3 = false, o3 = true, h3 = Aa[d3.name]), u3.has("Differences")) {
          o3 = true;
          for (var g2 = u3.get("Differences"), m3 = 0, p3 = 0, b3 = g2.length; p3 < b3; p3++) {
            var v3 = g2[p3];
            it(v3) ? m3 = v3 : l2[m3++] = v3.name;
          }
        }
      } else ct(u3) ? (s3 = false, o3 = true, h3 = Aa[u3.name]) : Oe("Encoding is not a Name nor a Dict");
    }
    r3.differences = l2, r3.baseEncoding = h3, r3.hasEncoding = o3, r3.overridableEncoding = s3;
  }, readToUnicode: function(e4, t4, a2) {
    var r3 = e4;
    if (ct(r3)) "Identity-" == r3.name.substring(0, 9) || Oe("ToUnicode file cmap translation not implemented");
    else if (lt(r3)) {
      var i3 = Wr.create(r3).map;
      for (var n3 in i3) {
        for (var c3 = i3[n3], s3 = [], o3 = 0; o3 < c3.length; o3 += 2) {
          var f2 = c3.charCodeAt(o3) << 8 | c3.charCodeAt(o3 + 1);
          if (55296 == (63488 & f2)) {
            o3 += 2;
            var l2 = c3.charCodeAt(o3) << 8 | c3.charCodeAt(o3 + 1);
            s3.push(((1023 & f2) << 10) + (1023 & l2) + 65536);
          } else s3.push(f2);
        }
        i3[n3] = String.fromCharCode.apply(String, s3);
      }
      return i3;
    }
    return [];
  }, readCidToGidMap: function(e4) {
    for (var t4 = e4.getBytes(), a2 = [], r3 = 0, i3 = t4.length; r3 < i3; r3++) {
      var n3 = t4[r3++] << 8 | t4[r3];
      if (0 !== n3) a2[r3 >> 1] = n3;
    }
    return a2;
  }, extractWidths: function(e4, t4, a2, r3) {
    var i3, n3 = [], c3 = 0, s3 = [];
    if (r3.composite) {
      if (c3 = e4.get("DW") || 1e3, b3 = e4.get("W")) for (var o3 = 0, f2 = b3.length; o3 < f2; o3++) {
        var l2 = b3[o3++];
        if (ft(m3 = t4.fetchIfRef(b3[o3]))) for (var h3 = 0, u3 = m3.length; h3 < u3; h3++) n3[l2++] = m3[h3];
        else {
          var d3 = b3[++o3];
          for (h3 = l2; h3 <= m3; h3++) n3[h3] = d3;
        }
      }
      if (r3.vertical) {
        var g2 = e4.get("DW2") || [880, -1e3];
        if (i3 = [g2[1], 0.5 * c3, g2[0]], g2 = e4.get("W2")) for (o3 = 0, f2 = g2.length; o3 < f2; o3++) {
          var m3;
          l2 = g2[o3++];
          if (ft(m3 = t4.fetchIfRef(g2[o3]))) for (h3 = 0, u3 = m3.length; h3 < u3; h3++) s3[l2++] = [m3[h3++], m3[h3++], m3[h3]];
          else {
            var p3 = [g2[++o3], g2[++o3], g2[++o3]];
            for (h3 = l2; h3 <= m3; h3++) s3[h3] = p3;
          }
        }
      }
    } else {
      var b3, v3 = r3.firstChar;
      if (b3 = e4.get("Widths")) {
        for (h3 = v3, o3 = 0, f2 = b3.length; o3 < f2; o3++) n3[h3++] = b3[o3];
        c3 = parseFloat(a2.get("MissingWidth")) || 0;
      } else {
        var y3 = e4.get("BaseFont");
        if (ct(y3)) {
          var k3 = this.getBaseFontMetrics(y3.name);
          n3 = k3.widths, c3 = k3.defaultWidth;
        }
      }
    }
    var A3 = true, w3 = c3;
    for (var x3 in n3) {
      var S3 = n3[x3];
      if (S3) if (w3) {
        if (w3 != S3) {
          A3 = false;
          break;
        }
      } else w3 = S3;
    }
    A3 && (r3.flags |= ka.FixedPitch), r3.defaultWidth = c3, r3.widths = n3, r3.defaultVMetrics = i3, r3.vmetrics = s3;
  }, isSerifFont: function(e4) {
    var t4 = e4.split("-")[0];
    return t4 in Sa || -1 !== t4.search(/serif/gi);
  }, getBaseFontMetrics: function(e4) {
    var t4 = 0, a2 = [], r3 = false, i3 = wa[e4] || e4;
    i3 in lr || (i3 = this.isSerifFont(e4) ? "Times-Roman" : "Helvetica");
    var n3 = lr[i3];
    return it(n3) ? (t4 = n3, r3 = true) : a2 = n3, { defaultWidth: t4, monospace: r3, widths: a2 };
  }, translateFont: function(e4, t4) {
    var a2 = e4, r3 = e4.get("Subtype");
    Ne(ct(r3), "invalid font Subtype");
    var i3 = false;
    if ("Type0" == r3.name) {
      var n3 = e4.get("DescendantFonts");
      n3 || Oe("Descendant fonts are not specified"), Ne(ct(r3 = (e4 = ft(n3) ? t4.fetchIfRef(n3[0]) : n3).get("Subtype")), "invalid font Subtype"), i3 = true;
    }
    var c3 = i3 ? 65535 : 255, s3 = e4.get("FontDescriptor");
    if (!s3) {
      if ("Type3" != r3.name) {
        var o3 = e4.get("BaseFont");
        ct(o3) || Oe("Base font is not specified"), o3 = o3.name.replace(/[,_]/g, "-");
        var f2 = this.getBaseFontMetrics(o3), l2 = o3.split("-")[0], h3 = (this.isSerifFont(l2) ? ka.Serif : 0) | (f2.monospace ? ka.FixedPitch : 0) | (Ca[l2] ? ka.Symbolic : ka.Nonsymbolic), u3 = { type: r3.name, widths: f2.widths, defaultWidth: f2.defaultWidth, flags: h3, firstChar: 0, lastChar: c3 };
        return this.extractDataStructures(e4, e4, t4, u3), new Ua(o3, null, u3);
      }
      (s3 = new Zt()).set("FontName", new Jt(r3.name));
    }
    var d3 = e4.get("FirstChar") || 0, g2 = e4.get("LastChar") || c3, m3 = s3.get("FontName"), p3 = e4.get("BaseFont");
    if (nt(m3) && (m3 = new Jt(m3)), nt(p3) && (p3 = new Jt(p3)), "Type3" !== r3.name) {
      var b3 = m3 && m3.name, v3 = p3 && p3.name;
      b3 !== v3 && Pe(`The FontDescriptor's FontName is "` + b3 + `" but should be the same as the Font's BaseFont "` + v3 + '"');
    }
    Ne(ct(m3 = m3 || p3), "invalid font name");
    var y3 = s3.get("FontFile", "FontFile2", "FontFile3");
    if (y3 && y3.dict) {
      var k3 = y3.dict.get("Subtype");
      k3 && (k3 = k3.name);
      var A3 = y3.dict.get("Length1"), w3 = y3.dict.get("Length2");
    }
    u3 = { type: r3.name, subtype: k3, file: y3, length1: A3, length2: w3, loadedName: a2.loadedName, composite: i3, wideChars: i3, fixedPitch: false, fontMatrix: e4.get("FontMatrix") || Ae, firstChar: d3 || 0, lastChar: g2 || c3, bbox: s3.get("FontBBox"), ascent: s3.get("Ascent"), descent: s3.get("Descent"), xHeight: s3.get("XHeight"), capHeight: s3.get("CapHeight"), flags: s3.get("Flags"), italicAngle: s3.get("ItalicAngle"), coded: false };
    if (i3) {
      var x3 = a2.get("Encoding");
      ct(x3) && (u3.cidEncoding = x3.name, u3.vertical = /-V$/.test(x3.name)), u3.cmap = Wr.create(x3);
    }
    return this.extractWidths(e4, t4, s3, u3), this.extractDataStructures(e4, a2, t4, u3), "Type3" === r3.name && (u3.coded = true), new Ua(m3.name, y3, u3);
  } }, e3.optimizeQueue = function(e4) {
    function t4(e5, t5, a3, r4) {
      if (ft(e5)) e5.splice(t5, a3, r4);
      else {
        e5[t5] = r4;
        var i4 = e5.subarray(t5 + a3);
        e5.set(i4, t5 + 1);
      }
    }
    for (var a2 = e4.fnArray, r3 = e4.argsArray, i3 = 0, n3 = r3.length; i3 < n3; i3++) if (a2[i3] === Be.paintInlineImageXObject && a2[i3 - 2] === Be.save && a2[i3 - 1] === Be.transform && a2[i3 + 1] === Be.restore) {
      var c3 = i3 - 2;
      for (i3 += 2; i3 < n3 && a2[i3 - 4] === a2[i3]; i3++) ;
      if ((C2 = Math.min(i3 - c3 >> 2, 200)) < 10) continue;
      for (var s3 = 0, o3 = [], f2 = 0, l2 = 1, h3 = 1, u3 = 0; u3 < C2; u3++) {
        var d3 = r3[c3 + (u3 << 2) + 1], g2 = r3[c3 + (u3 << 2) + 2][0];
        l2 + g2.width > 1e3 && (s3 = Math.max(s3, l2), h3 += f2 + 2, l2 = 0, f2 = 0), o3.push({ transform: d3, x: l2, y: h3, w: g2.width, h: g2.height }), l2 += g2.width + 2, f2 = Math.max(f2, g2.height);
      }
      var m3 = Math.max(s3, l2) + 1, p3 = h3 + f2 + 1, b3 = new Uint8Array(m3 * p3 * 4), v3 = m3 << 2;
      for (u3 = 0; u3 < C2; u3++) {
        var y3 = r3[c3 + (u3 << 2) + 2][0].data, k3 = o3[u3].w << 2, A3 = 0, w3 = o3[u3].x + o3[u3].y * m3 << 2;
        b3.set(y3.subarray(0, k3), w3 - v3);
        for (var x3 = 0, S3 = o3[u3].h; x3 < S3; x3++) b3.set(y3.subarray(A3, A3 + k3), w3), A3 += k3, w3 += v3;
        for (b3.set(y3.subarray(A3 - k3, A3), w3); w3 >= 0; ) y3[w3 - 4] = y3[w3], y3[w3 - 3] = y3[w3 + 1], y3[w3 - 2] = y3[w3 + 2], y3[w3 - 1] = y3[w3 + 3], y3[w3 + k3] = y3[w3 + k3 - 4], y3[w3 + k3 + 1] = y3[w3 + k3 - 3], y3[w3 + k3 + 2] = y3[w3 + k3 - 2], y3[w3 + k3 + 3] = y3[w3 + k3 - 1], w3 -= v3;
      }
      t4(a2, c3, 4 * C2, Be.paintInlineImageXObjectGroup), r3.splice(c3, 4 * C2, [{ width: m3, height: p3, data: b3 }, o3]), i3 = c3, n3 = r3.length;
    }
    for (i3 = 0, n3 = r3.length; i3 < n3; i3++) if (a2[i3] === Be.paintImageMaskXObject && a2[i3 - 2] === Be.save && a2[i3 - 1] === Be.transform && a2[i3 + 1] === Be.restore) {
      var C2;
      c3 = i3 - 2;
      for (i3 += 2; i3 < n3 && a2[i3 - 4] === a2[i3]; i3++) ;
      if ((C2 = Math.min(i3 - c3 >> 2, 100)) < 10) continue;
      var I3 = [];
      for (u3 = 0; u3 < C2; u3++) {
        d3 = r3[c3 + (u3 << 2) + 1];
        var B3 = r3[c3 + (u3 << 2) + 2][0];
        I3.push({ data: B3.data, width: B3.width, height: B3.height, transform: d3 });
      }
      t4(a2, c3, 4 * C2, Be.paintImageMaskXObjectGroup), r3.splice(c3, 4 * C2, [I3]), i3 = c3, n3 = r3.length;
    }
  }, e3;
}();
var ma = function() {
  function e3(e4, t3) {
    this.messageHandler = e4, this.fnArray = e4 ? new Uint8Array(100) : [], this.argsArray = [], this.dependencies = {}, this.pageIndex = t3, this.fnIndex = 0;
  }
  return e3.prototype = { get length() {
    return this.argsArray.length;
  }, addOp: function(e4, t3) {
    this.messageHandler ? (this.fnArray[this.fnIndex++] = e4, this.argsArray.push(t3), this.fnIndex >= 100 && this.flush()) : (this.fnArray.push(e4), this.argsArray.push(t3));
  }, addDependency: function(e4) {
    e4 in this.dependencies || (this.dependencies[e4] = true, this.addOp(Be.dependency, [e4]));
  }, addDependencies: function(e4) {
    for (var t3 in e4) this.addDependency(t3);
  }, addOpList: function(e4) {
    Qe.extendObj(this.dependencies, e4.dependencies);
    for (var t3 = 0, a2 = e4.length; t3 < a2; t3++) this.addOp(e4.fnArray[t3], e4.argsArray[t3]);
  }, getIR: function() {
    return { fnArray: this.fnArray, argsArray: this.argsArray, length: this.length };
  }, flush: function(e4) {
    ga.optimizeQueue(this);
    var t3 = function(e5) {
      for (var t4 = [], a2 = e5.fnArray, r3 = e5.argsArray, i3 = 0, n3 = e5.length; i3 < n3; i3++) switch (a2[i3]) {
        case Be.paintInlineImageXObject:
        case Be.paintInlineImageXObjectGroup:
        case Be.paintImageMaskXObject:
          var c3 = r3[i3][0];
          t4.push(c3.data.buffer);
      }
      return t4;
    }(this);
    this.messageHandler.send("RenderPageChunk", { operatorList: { fnArray: this.fnArray, argsArray: this.argsArray, lastChunk: e4, length: this.length }, pageIndex: this.pageIndex }, null, t3), this.dependencies = [], this.fnIndex = 0, this.argsArray = [];
  } }, e3;
}();
var pa = function() {
  function e3() {
    this.fontSize = 0, this.ctm = [1, 0, 0, 1, 0, 0], this.textMatrix = [1, 0, 0, 1, 0, 0], this.stateStack = [], this.leading = 0, this.textHScale = 1, this.textRise = 0;
  }
  return e3.prototype = { push: function() {
    this.stateStack.push(this.ctm.slice());
  }, pop: function() {
    var e4 = this.stateStack.pop();
    e4 && (this.ctm = e4);
  }, initialiseTextObj: function() {
    var e4 = this.textMatrix;
    e4[0] = 1, e4[1] = 0, e4[2] = 0, e4[3] = 1, e4[4] = 0, e4[5] = 0;
  }, setTextMatrix: function(e4, t3, a2, r3, i3, n3) {
    var c3 = this.textMatrix;
    c3[0] = e4, c3[1] = t3, c3[2] = a2, c3[3] = r3, c3[4] = i3, c3[5] = n3;
  }, transformCTM: function(e4, t3, a2, r3, i3, n3) {
    var c3 = this.ctm, s3 = c3[0], o3 = c3[1], f2 = c3[2], l2 = c3[3], h3 = c3[4], u3 = c3[5];
    c3[0] = s3 * e4 + f2 * t3, c3[1] = o3 * e4 + l2 * t3, c3[2] = s3 * a2 + f2 * r3, c3[3] = o3 * a2 + l2 * r3, c3[4] = s3 * i3 + f2 * n3 + h3, c3[5] = o3 * i3 + l2 * n3 + u3;
  }, translateTextMatrix: function(e4, t3) {
    var a2 = this.textMatrix;
    a2[4] = a2[0] * e4 + a2[2] * t3 + a2[4], a2[5] = a2[1] * e4 + a2[3] * t3 + a2[5];
  }, calcRenderParams: function() {
    var e4 = this.textMatrix, t3 = this.ctm, a2 = this.fontSize, r3 = a2 * this.textHScale, i3 = this.textRise, n3 = Math.sqrt(e4[2] * e4[2] + e4[3] * e4[3]), c3 = Math.atan2(e4[1], e4[0]), s3 = e4[0] * t3[0] + e4[1] * t3[2], o3 = e4[0] * t3[1] + e4[1] * t3[3], f2 = e4[2] * t3[0] + e4[3] * t3[2], l2 = e4[2] * t3[1] + e4[3] * t3[3];
    return { renderMatrix: [r3 * s3, r3 * o3, a2 * f2, a2 * l2, i3 * f2 + (e4[4] * t3[0] + e4[5] * t3[2] + t3[4]), i3 * l2 + (e4[4] * t3[1] + e4[5] * t3[3] + t3[5])], vScale: n3, angle: c3 };
  } }, e3;
}();
var ba = function() {
  function e3() {
    this.font = null, this.textRenderingMode = we;
  }
  return e3.prototype = { clone: function() {
    return Object.create(this);
  } }, e3;
}();
var va = 57344;
var ya = 6400;
var ka = { FixedPitch: 1, Serif: 2, Symbolic: 4, Script: 8, Nonsymbolic: 32, Italic: 64, AllCap: 65536, SmallCap: 131072, ForceBold: 262144 };
var Aa = { ExpertEncoding: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "", "", "isuperior", "", "", "lsuperior", "msuperior", "nsuperior", "osuperior", "", "", "rsuperior", "ssuperior", "tsuperior", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdownsmall", "centoldstyle", "Lslashsmall", "", "", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "", "Dotaccentsmall", "", "", "Macronsmall", "", "", "figuredash", "hypheninferior", "", "", "Ogoneksmall", "Ringsmall", "Cedillasmall", "", "", "", "onequarter", "onehalf", "threequarters", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "zerosuperior", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall"], MacExpertEncoding: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclamsmall", "Hungarumlautsmall", "centoldstyle", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "twodotenleader", "onedotenleader", "comma", "hyphen", "period", "fraction", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "colon", "semicolon", "", "threequartersemdash", "", "questionsmall", "", "", "", "", "Ethsmall", "", "", "onequarter", "onehalf", "threequarters", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "", "", "", "", "", "", "ff", "fi", "fl", "ffi", "ffl", "parenleftinferior", "", "parenrightinferior", "Circumflexsmall", "hypheninferior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "", "", "asuperior", "centsuperior", "", "", "", "", "Aacutesmall", "Agravesmall", "Acircumflexsmall", "Adieresissmall", "Atildesmall", "Aringsmall", "Ccedillasmall", "Eacutesmall", "Egravesmall", "Ecircumflexsmall", "Edieresissmall", "Iacutesmall", "Igravesmall", "Icircumflexsmall", "Idieresissmall", "Ntildesmall", "Oacutesmall", "Ogravesmall", "Ocircumflexsmall", "Odieresissmall", "Otildesmall", "Uacutesmall", "Ugravesmall", "Ucircumflexsmall", "Udieresissmall", "", "eightsuperior", "fourinferior", "threeinferior", "sixinferior", "eightinferior", "seveninferior", "Scaronsmall", "", "centinferior", "twoinferior", "", "Dieresissmall", "", "Caronsmall", "osuperior", "fiveinferior", "", "commainferior", "periodinferior", "Yacutesmall", "", "dollarinferior", "", "Thornsmall", "", "nineinferior", "zeroinferior", "Zcaronsmall", "AEsmall", "Oslashsmall", "questiondownsmall", "oneinferior", "Lslashsmall", "", "", "", "", "", "", "Cedillasmall", "", "", "", "", "", "OEsmall", "figuredash", "hyphensuperior", "", "", "", "", "exclamdownsmall", "", "Ydieresissmall", "", "onesuperior", "twosuperior", "threesuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "ninesuperior", "zerosuperior", "", "esuperior", "rsuperior", "tsuperior", "", "", "isuperior", "ssuperior", "dsuperior", "", "", "", "", "", "lsuperior", "Ogoneksmall", "Brevesmall", "Macronsmall", "bsuperior", "nsuperior", "msuperior", "commasuperior", "periodsuperior", "Dotaccentsmall", "Ringsmall"], MacRomanEncoding: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron"], StandardEncoding: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "", "endash", "dagger", "daggerdbl", "periodcentered", "", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "", "questiondown", "", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "", "ring", "cedilla", "", "hungarumlaut", "ogonek", "caron", "emdash", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "AE", "", "ordfeminine", "", "", "", "", "Lslash", "Oslash", "OE", "ordmasculine", "", "", "", "", "", "ae", "", "", "", "dotlessi", "", "", "lslash", "oslash", "oe", "germandbls"], WinAnsiEncoding: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "bullet", "Euro", "bullet", "quotesinglbase", "florin", "quotedblbase", "ellipsis", "dagger", "daggerdbl", "circumflex", "perthousand", "Scaron", "guilsinglleft", "OE", "bullet", "Zcaron", "bullet", "bullet", "quoteleft", "quoteright", "quotedblleft", "quotedblright", "bullet", "endash", "emdash", "tilde", "trademark", "scaron", "guilsinglright", "oe", "bullet", "zcaron", "Ydieresis", "", "exclamdown", "cent", "sterling", "currency", "yen", "brokenbar", "section", "dieresis", "copyright", "ordfeminine", "guillemotleft", "logicalnot", "hyphen", "registered", "macron", "degree", "plusminus", "twosuperior", "threesuperior", "acute", "mu", "paragraph", "periodcentered", "cedilla", "onesuperior", "ordmasculine", "guillemotright", "onequarter", "onehalf", "threequarters", "questiondown", "Agrave", "Aacute", "Acircumflex", "Atilde", "Adieresis", "Aring", "AE", "Ccedilla", "Egrave", "Eacute", "Ecircumflex", "Edieresis", "Igrave", "Iacute", "Icircumflex", "Idieresis", "Eth", "Ntilde", "Ograve", "Oacute", "Ocircumflex", "Otilde", "Odieresis", "multiply", "Oslash", "Ugrave", "Uacute", "Ucircumflex", "Udieresis", "Yacute", "Thorn", "germandbls", "agrave", "aacute", "acircumflex", "atilde", "adieresis", "aring", "ae", "ccedilla", "egrave", "eacute", "ecircumflex", "edieresis", "igrave", "iacute", "icircumflex", "idieresis", "eth", "ntilde", "ograve", "oacute", "ocircumflex", "otilde", "odieresis", "divide", "oslash", "ugrave", "uacute", "ucircumflex", "udieresis", "yacute", "thorn", "ydieresis"], SymbolSetEncoding: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "exclam", "universal", "numbersign", "existential", "percent", "ampersand", "suchthat", "parenleft", "parenright", "asteriskmath", "plus", "comma", "minus", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "congruent", "Alpha", "Beta", "Chi", "Delta", "Epsilon", "Phi", "Gamma", "Eta", "Iota", "theta1", "Kappa", "Lambda", "Mu", "Nu", "Omicron", "Pi", "Theta", "Rho", "Sigma", "Tau", "Upsilon", "sigma1", "Omega", "Xi", "Psi", "Zeta", "bracketleft", "therefore", "bracketright", "perpendicular", "underscore", "radicalex", "alpha", "beta", "chi", "delta", "epsilon", "phi", "gamma", "eta", "iota", "phi1", "kappa", "lambda", "mu", "nu", "omicron", "pi", "theta", "rho", "sigma", "tau", "upsilon", "omega1", "omega", "xi", "psi", "zeta", "braceleft", "bar", "braceright", "similar", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "Euro", "Upsilon1", "minute", "lessequal", "fraction", "infinity", "florin", "club", "diamond", "heart", "spade", "arrowboth", "arrowleft", "arrowup", "arrowright", "arrowdown", "degree", "plusminus", "second", "greaterequal", "multiply", "proportional", "partialdiff", "bullet", "divide", "notequal", "equivalence", "approxequal", "ellipsis", "arrowvertex", "arrowhorizex", "carriagereturn", "aleph", "Ifraktur", "Rfraktur", "weierstrass", "circlemultiply", "circleplus", "emptyset", "intersection", "union", "propersuperset", "reflexsuperset", "notsubset", "propersubset", "reflexsubset", "element", "notelement", "angle", "gradient", "registerserif", "copyrightserif", "trademarkserif", "product", "radical", "dotmath", "logicalnot", "logicaland", "logicalor", "arrowdblboth", "arrowdblleft", "arrowdblup", "arrowdblright", "arrowdbldown", "lozenge", "angleleft", "registersans", "copyrightsans", "trademarksans", "summation", "parenlefttp", "parenleftex", "parenleftbt", "bracketlefttp", "bracketleftex", "bracketleftbt", "bracelefttp", "braceleftmid", "braceleftbt", "braceex", "", "angleright", "integral", "integraltp", "integralex", "integralbt", "parenrighttp", "parenrightex", "parenrightbt", "bracketrighttp", "bracketrightex", "bracketrightbt", "bracerighttp", "bracerightmid", "bracerightbt"], zapfDingbatsEncoding: ["", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "space", "a1", "a2", "a202", "a3", "a4", "a5", "a119", "a118", "a117", "a11", "a12", "a13", "a14", "a15", "a16", "a105", "a17", "a18", "a19", "a20", "a21", "a22", "a23", "a24", "a25", "a26", "a27", "a28", "a6", "a7", "a8", "a9", "a10", "a29", "a30", "a31", "a32", "a33", "a34", "a35", "a36", "a37", "a38", "a39", "a40", "a41", "a42", "a43", "a44", "a45", "a46", "a47", "a48", "a49", "a50", "a51", "a52", "a53", "a54", "a55", "a56", "a57", "a58", "a59", "a60", "a61", "a62", "a63", "a64", "a65", "a66", "a67", "a68", "a69", "a70", "a71", "a72", "a73", "a74", "a203", "a75", "a204", "a76", "a77", "a78", "a79", "a81", "a82", "a83", "a84", "a97", "a98", "a99", "a100", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "a101", "a102", "a103", "a104", "a106", "a107", "a108", "a112", "a111", "a110", "a109", "a120", "a121", "a122", "a123", "a124", "a125", "a126", "a127", "a128", "a129", "a130", "a131", "a132", "a133", "a134", "a135", "a136", "a137", "a138", "a139", "a140", "a141", "a142", "a143", "a144", "a145", "a146", "a147", "a148", "a149", "a150", "a151", "a152", "a153", "a154", "a155", "a156", "a157", "a158", "a159", "a160", "a161", "a163", "a164", "a196", "a165", "a192", "a166", "a167", "a168", "a169", "a170", "a171", "a172", "a173", "a162", "a174", "a175", "a176", "a177", "a178", "a179", "a193", "a180", "a199", "a181", "a200", "a182", "", "a201", "a183", "a184", "a197", "a185", "a194", "a198", "a186", "a195", "a187", "a188", "a189", "a190", "a191"] };
var wa = { ArialNarrow: "Helvetica", "ArialNarrow-Bold": "Helvetica-Bold", "ArialNarrow-BoldItalic": "Helvetica-BoldOblique", "ArialNarrow-Italic": "Helvetica-Oblique", ArialBlack: "Helvetica", "ArialBlack-Bold": "Helvetica-Bold", "ArialBlack-BoldItalic": "Helvetica-BoldOblique", "ArialBlack-Italic": "Helvetica-Oblique", Arial: "Helvetica", "Arial-Bold": "Helvetica-Bold", "Arial-BoldItalic": "Helvetica-BoldOblique", "Arial-Italic": "Helvetica-Oblique", "Arial-BoldItalicMT": "Helvetica-BoldOblique", "Arial-BoldMT": "Helvetica-Bold", "Arial-ItalicMT": "Helvetica-Oblique", ArialMT: "Helvetica", "Courier-Bold": "Courier-Bold", "Courier-BoldItalic": "Courier-BoldOblique", "Courier-Italic": "Courier-Oblique", CourierNew: "Courier", "CourierNew-Bold": "Courier-Bold", "CourierNew-BoldItalic": "Courier-BoldOblique", "CourierNew-Italic": "Courier-Oblique", "CourierNewPS-BoldItalicMT": "Courier-BoldOblique", "CourierNewPS-BoldMT": "Courier-Bold", "CourierNewPS-ItalicMT": "Courier-Oblique", CourierNewPSMT: "Courier", "Helvetica-Bold": "Helvetica-Bold", "Helvetica-BoldItalic": "Helvetica-BoldOblique", "Helvetica-Italic": "Helvetica-Oblique", "Symbol-Bold": "Symbol", "Symbol-BoldItalic": "Symbol", "Symbol-Italic": "Symbol", TimesNewRoman: "Times-Roman", "TimesNewRoman-Bold": "Times-Bold", "TimesNewRoman-BoldItalic": "Times-BoldItalic", "TimesNewRoman-Italic": "Times-Italic", TimesNewRomanPS: "Times-Roman", "TimesNewRomanPS-Bold": "Times-Bold", "TimesNewRomanPS-BoldItalic": "Times-BoldItalic", "TimesNewRomanPS-BoldItalicMT": "Times-BoldItalic", "TimesNewRomanPS-BoldMT": "Times-Bold", "TimesNewRomanPS-Italic": "Times-Italic", "TimesNewRomanPS-ItalicMT": "Times-Italic", TimesNewRomanPSMT: "Times-Roman", "TimesNewRomanPSMT-Bold": "Times-Bold", "TimesNewRomanPSMT-BoldItalic": "Times-BoldItalic", "TimesNewRomanPSMT-Italic": "Times-Italic" };
var xa = { ComicSansMS: "Comic Sans MS", "ComicSansMS-Bold": "Comic Sans MS-Bold", "ComicSansMS-BoldItalic": "Comic Sans MS-BoldItalic", "ComicSansMS-Italic": "Comic Sans MS-Italic", LucidaConsole: "Courier", "LucidaConsole-Bold": "Courier-Bold", "LucidaConsole-BoldItalic": "Courier-BoldOblique", "LucidaConsole-Italic": "Courier-Oblique", "MS-Gothic": "MS Gothic", "MS-Gothic-Bold": "MS Gothic-Bold", "MS-Gothic-BoldItalic": "MS Gothic-BoldItalic", "MS-Gothic-Italic": "MS Gothic-Italic", "MS-Mincho": "MS Mincho", "MS-Mincho-Bold": "MS Mincho-Bold", "MS-Mincho-BoldItalic": "MS Mincho-BoldItalic", "MS-Mincho-Italic": "MS Mincho-Italic", "MS-PGothic": "MS PGothic", "MS-PGothic-Bold": "MS PGothic-Bold", "MS-PGothic-BoldItalic": "MS PGothic-BoldItalic", "MS-PGothic-Italic": "MS PGothic-Italic", "MS-PMincho": "MS PMincho", "MS-PMincho-Bold": "MS PMincho-Bold", "MS-PMincho-BoldItalic": "MS PMincho-BoldItalic", "MS-PMincho-Italic": "MS PMincho-Italic" };
var Sa = { "Adobe Jenson": true, "Adobe Text": true, Albertus: true, Aldus: true, Alexandria: true, Algerian: true, "American Typewriter": true, Antiqua: true, Apex: true, Arno: true, Aster: true, Aurora: true, Baskerville: true, Bell: true, Bembo: true, "Bembo Schoolbook": true, Benguiat: true, "Berkeley Old Style": true, "Bernhard Modern": true, "Berthold City": true, Bodoni: true, "Bauer Bodoni": true, "Book Antiqua": true, Bookman: true, "Bordeaux Roman": true, "Californian FB": true, Calisto: true, Calvert: true, Capitals: true, Cambria: true, Cartier: true, Caslon: true, Catull: true, Centaur: true, "Century Old Style": true, "Century Schoolbook": true, Chaparral: true, "Charis SIL": true, Cheltenham: true, "Cholla Slab": true, Clarendon: true, Clearface: true, Cochin: true, Colonna: true, "Computer Modern": true, "Concrete Roman": true, Constantia: true, "Cooper Black": true, Corona: true, Ecotype: true, Egyptienne: true, Elephant: true, Excelsior: true, Fairfield: true, "FF Scala": true, Folkard: true, Footlight: true, FreeSerif: true, "Friz Quadrata": true, Garamond: true, Gentium: true, Georgia: true, Gloucester: true, "Goudy Old Style": true, "Goudy Schoolbook": true, "Goudy Pro Font": true, Granjon: true, "Guardian Egyptian": true, Heather: true, Hercules: true, "High Tower Text": true, Hiroshige: true, "Hoefler Text": true, "Humana Serif": true, Imprint: true, "Ionic No. 5": true, Janson: true, Joanna: true, Korinna: true, Lexicon: true, "Liberation Serif": true, "Linux Libertine": true, Literaturnaya: true, Lucida: true, "Lucida Bright": true, Melior: true, Memphis: true, Miller: true, Minion: true, Modern: true, "Mona Lisa": true, "Mrs Eaves": true, "MS Serif": true, "Museo Slab": true, "New York": true, "Nimbus Roman": true, "NPS Rawlinson Roadway": true, Palatino: true, Perpetua: true, Plantin: true, "Plantin Schoolbook": true, Playbill: true, "Poor Richard": true, "Rawlinson Roadway": true, Renault: true, Requiem: true, Rockwell: true, Roman: true, "Rotis Serif": true, Sabon: true, Scala: true, Seagull: true, Sistina: true, Souvenir: true, STIX: true, "Stone Informal": true, "Stone Serif": true, Sylfaen: true, Times: true, Trajan: true, "Trinité": true, "Trump Mediaeval": true, Utopia: true, "Vale Type": true, "Bitstream Vera": true, "Vera Serif": true, Versailles: true, Wanted: true, Weiss: true, "Wide Latin": true, Windsor: true, XITS: true };
var Ca = { Dingbats: true, Symbol: true, ZapfDingbats: true };
var Ia = { H: Ta, V: Ta, "EUC-H": La, "EUC-V": La, "83pv-RKSJ-H": function(e3) {
  var t3 = Ke(e3);
  try {
    return Ht(t3, "shift_jis", true);
  } catch (e4) {
    return Me("Unsupported 83pv character found"), Ht(t3, "shift_jis");
  }
}, "90pv-RKSJ-H": function(e3) {
  var t3 = Ke(e3);
  try {
    return Ht(t3, "shift_jis", true);
  } catch (e4) {
    return Me("Unsupported 90pv character found"), Ht(t3, "shift_jis");
  }
}, "90ms-RKSJ-H": Fa, "90ms-RKSJ-V": Fa, "90msp-RKSJ-H": Fa, "90msp-RKSJ-V": Fa, "GBK-EUC-H": Pa, "GBKp-EUC-H": Pa, "B5pc-H": Ra, "ETenms-B5-H": Ra, "ETenms-B5-V": Ra };
var Ba = { H: true, V: true, "EUC-H": true, "EUC-V": true, "90ms-RKSJ-H": true, "90ms-RKSJ-V": true, "UniJIS-UCS2-HW-H": true, "UniJIS-UCS2-HW-V": true };
function Ta(e3) {
  for (var t3 = Ke(e3), a2 = t3.length, r3 = 0; r3 < a2; ++r3) t3[r3] |= 128;
  return Ht(t3, "euc-jp");
}
function La(e3) {
  return Ht(Ke(e3), "euc-jp");
}
function Fa(e3) {
  return Ht(Ke(e3), "shift_jis");
}
function Pa(e3) {
  return Ht(Ke(e3), "gbk");
}
function Ra(e3) {
  return Ht(Ke(e3), "big5");
}
"undefined" != typeof TextDecoder ? Ht = function(e3, t3, a2) {
  return new TextDecoder(t3, { fatal: !!a2 }).decode(e3);
} : "undefined" != typeof FileReaderSync ? Ht = function(e3, t3) {
  return new FileReaderSync().readAsText(new n2([e3]), t3);
} : Ia = {};
var Oa = [{ begin: 0, end: 127 }, { begin: 128, end: 255 }, { begin: 256, end: 383 }, { begin: 384, end: 591 }, { begin: 592, end: 687 }, { begin: 688, end: 767 }, { begin: 768, end: 879 }, { begin: 880, end: 1023 }, { begin: 11392, end: 11519 }, { begin: 1024, end: 1279 }, { begin: 1328, end: 1423 }, { begin: 1424, end: 1535 }, { begin: 42240, end: 42559 }, { begin: 1536, end: 1791 }, { begin: 1984, end: 2047 }, { begin: 2304, end: 2431 }, { begin: 2432, end: 2559 }, { begin: 2560, end: 2687 }, { begin: 2688, end: 2815 }, { begin: 2816, end: 2943 }, { begin: 2944, end: 3071 }, { begin: 3072, end: 3199 }, { begin: 3200, end: 3327 }, { begin: 3328, end: 3455 }, { begin: 3584, end: 3711 }, { begin: 3712, end: 3839 }, { begin: 4256, end: 4351 }, { begin: 6912, end: 7039 }, { begin: 4352, end: 4607 }, { begin: 7680, end: 7935 }, { begin: 7936, end: 8191 }, { begin: 8192, end: 8303 }, { begin: 8304, end: 8351 }, { begin: 8352, end: 8399 }, { begin: 8400, end: 8447 }, { begin: 8448, end: 8527 }, { begin: 8528, end: 8591 }, { begin: 8592, end: 8703 }, { begin: 8704, end: 8959 }, { begin: 8960, end: 9215 }, { begin: 9216, end: 9279 }, { begin: 9280, end: 9311 }, { begin: 9312, end: 9471 }, { begin: 9472, end: 9599 }, { begin: 9600, end: 9631 }, { begin: 9632, end: 9727 }, { begin: 9728, end: 9983 }, { begin: 9984, end: 10175 }, { begin: 12288, end: 12351 }, { begin: 12352, end: 12447 }, { begin: 12448, end: 12543 }, { begin: 12544, end: 12591 }, { begin: 12592, end: 12687 }, { begin: 43072, end: 43135 }, { begin: 12800, end: 13055 }, { begin: 13056, end: 13311 }, { begin: 44032, end: 55215 }, { begin: 55296, end: 57343 }, { begin: 67840, end: 67871 }, { begin: 19968, end: 40959 }, { begin: 57344, end: 63743 }, { begin: 12736, end: 12783 }, { begin: 64256, end: 64335 }, { begin: 64336, end: 65023 }, { begin: 65056, end: 65071 }, { begin: 65040, end: 65055 }, { begin: 65104, end: 65135 }, { begin: 65136, end: 65279 }, { begin: 65280, end: 65519 }, { begin: 65520, end: 65535 }, { begin: 3840, end: 4095 }, { begin: 1792, end: 1871 }, { begin: 1920, end: 1983 }, { begin: 3456, end: 3583 }, { begin: 4096, end: 4255 }, { begin: 4608, end: 4991 }, { begin: 5024, end: 5119 }, { begin: 5120, end: 5759 }, { begin: 5760, end: 5791 }, { begin: 5792, end: 5887 }, { begin: 6016, end: 6143 }, { begin: 6144, end: 6319 }, { begin: 10240, end: 10495 }, { begin: 40960, end: 42127 }, { begin: 5888, end: 5919 }, { begin: 66304, end: 66351 }, { begin: 66352, end: 66383 }, { begin: 66560, end: 66639 }, { begin: 118784, end: 119039 }, { begin: 119808, end: 120831 }, { begin: 1044480, end: 1048573 }, { begin: 65024, end: 65039 }, { begin: 917504, end: 917631 }, { begin: 6400, end: 6479 }, { begin: 6480, end: 6527 }, { begin: 6528, end: 6623 }, { begin: 6656, end: 6687 }, { begin: 11264, end: 11359 }, { begin: 11568, end: 11647 }, { begin: 19904, end: 19967 }, { begin: 43008, end: 43055 }, { begin: 65536, end: 65663 }, { begin: 65856, end: 65935 }, { begin: 66432, end: 66463 }, { begin: 66464, end: 66527 }, { begin: 66640, end: 66687 }, { begin: 66688, end: 66735 }, { begin: 67584, end: 67647 }, { begin: 68096, end: 68191 }, { begin: 119552, end: 119647 }, { begin: 73728, end: 74751 }, { begin: 119648, end: 119679 }, { begin: 7040, end: 7103 }, { begin: 7168, end: 7247 }, { begin: 7248, end: 7295 }, { begin: 43136, end: 43231 }, { begin: 43264, end: 43311 }, { begin: 43312, end: 43359 }, { begin: 43520, end: 43615 }, { begin: 65936, end: 65999 }, { begin: 66e3, end: 66047 }, { begin: 66208, end: 66271 }, { begin: 127024, end: 127135 }];
var Ma = [".notdef", ".null", "nonmarkingreturn", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quotesingle", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "grave", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "Adieresis", "Aring", "Ccedilla", "Eacute", "Ntilde", "Odieresis", "Udieresis", "aacute", "agrave", "acircumflex", "adieresis", "atilde", "aring", "ccedilla", "eacute", "egrave", "ecircumflex", "edieresis", "iacute", "igrave", "icircumflex", "idieresis", "ntilde", "oacute", "ograve", "ocircumflex", "odieresis", "otilde", "uacute", "ugrave", "ucircumflex", "udieresis", "dagger", "degree", "cent", "sterling", "section", "bullet", "paragraph", "germandbls", "registered", "copyright", "trademark", "acute", "dieresis", "notequal", "AE", "Oslash", "infinity", "plusminus", "lessequal", "greaterequal", "yen", "mu", "partialdiff", "summation", "product", "pi", "integral", "ordfeminine", "ordmasculine", "Omega", "ae", "oslash", "questiondown", "exclamdown", "logicalnot", "radical", "florin", "approxequal", "Delta", "guillemotleft", "guillemotright", "ellipsis", "nonbreakingspace", "Agrave", "Atilde", "Otilde", "OE", "oe", "endash", "emdash", "quotedblleft", "quotedblright", "quoteleft", "quoteright", "divide", "lozenge", "ydieresis", "Ydieresis", "fraction", "currency", "guilsinglleft", "guilsinglright", "fi", "fl", "daggerdbl", "periodcentered", "quotesinglbase", "quotedblbase", "perthousand", "Acircumflex", "Ecircumflex", "Aacute", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Oacute", "Ocircumflex", "apple", "Ograve", "Uacute", "Ucircumflex", "Ugrave", "dotlessi", "circumflex", "tilde", "macron", "breve", "dotaccent", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "Lslash", "lslash", "Scaron", "scaron", "Zcaron", "zcaron", "brokenbar", "Eth", "eth", "Yacute", "yacute", "Thorn", "thorn", "minus", "multiply", "onesuperior", "twosuperior", "threesuperior", "onehalf", "onequarter", "threequarters", "franc", "Gbreve", "gbreve", "Idotaccent", "Scedilla", "scedilla", "Cacute", "cacute", "Ccaron", "ccaron", "dcroat"];
function Da(e3) {
  for (var t3 = 0, a2 = Oa.length; t3 < a2; t3++) {
    var r3 = Oa[t3];
    if (e3 >= r3.begin && e3 < r3.end) return t3;
  }
  return -1;
}
function qa(e3) {
  return e3 <= 31 || e3 >= 127 && e3 < ya || e3 >= va && e3 < 63744;
}
var Ea = { "¨": " ̈", "¯": " ̄", "´": " ́", "µ": "μ", "¸": " ̧", "Ĳ": "IJ", "ĳ": "ij", "Ŀ": "L·", "ŀ": "l·", "ŉ": "ʼn", "ſ": "s", "Ǆ": "DŽ", "ǅ": "Dž", "ǆ": "dž", "Ǉ": "LJ", "ǈ": "Lj", "ǉ": "lj", "Ǌ": "NJ", "ǋ": "Nj", "ǌ": "nj", "Ǳ": "DZ", "ǲ": "Dz", "ǳ": "dz", "˘": " ̆", "˙": " ̇", "˚": " ̊", "˛": " ̨", "˜": " ̃", "˝": " ̋", "ͺ": " ͅ", "΄": " ́", "ϐ": "β", "ϑ": "θ", "ϒ": "Υ", "ϕ": "φ", "ϖ": "π", "ϰ": "κ", "ϱ": "ρ", "ϲ": "ς", "ϴ": "Θ", "ϵ": "ε", "Ϲ": "Σ", "և": "եւ", "ٵ": "اٴ", "ٶ": "وٴ", "ٷ": "ۇٴ", "ٸ": "يٴ", "ำ": "ํา", "ຳ": "ໍາ", "ໜ": "ຫນ", "ໝ": "ຫມ", "ཷ": "ྲཱྀ", "ཹ": "ླཱྀ", "ẚ": "aʾ", "᾽": " ̓", "᾿": " ̓", "῀": " ͂", "῾": " ̔", " ": " ", " ": " ", " ": " ", " ": " ", " ": " ", " ": " ", " ": " ", " ": " ", "‗": " ̳", "․": ".", "‥": "..", "…": "...", "″": "′′", "‴": "′′′", "‶": "‵‵", "‷": "‵‵‵", "‼": "!!", "‾": " ̅", "⁇": "??", "⁈": "?!", "⁉": "!?", "⁗": "′′′′", " ": " ", "₨": "Rs", "℀": "a/c", "℁": "a/s", "℃": "°C", "℅": "c/o", "℆": "c/u", "ℇ": "Ɛ", "℉": "°F", "№": "No", "℡": "TEL", "ℵ": "א", "ℶ": "ב", "ℷ": "ג", "ℸ": "ד", "℻": "FAX", "Ⅰ": "I", "Ⅱ": "II", "Ⅲ": "III", "Ⅳ": "IV", "Ⅴ": "V", "Ⅵ": "VI", "Ⅶ": "VII", "Ⅷ": "VIII", "Ⅸ": "IX", "Ⅹ": "X", "Ⅺ": "XI", "Ⅻ": "XII", "Ⅼ": "L", "Ⅽ": "C", "Ⅾ": "D", "Ⅿ": "M", "ⅰ": "i", "ⅱ": "ii", "ⅲ": "iii", "ⅳ": "iv", "ⅴ": "v", "ⅵ": "vi", "ⅶ": "vii", "ⅷ": "viii", "ⅸ": "ix", "ⅹ": "x", "ⅺ": "xi", "ⅻ": "xii", "ⅼ": "l", "ⅽ": "c", "ⅾ": "d", "ⅿ": "m", "∬": "∫∫", "∭": "∫∫∫", "∯": "∮∮", "∰": "∮∮∮", "⑴": "(1)", "⑵": "(2)", "⑶": "(3)", "⑷": "(4)", "⑸": "(5)", "⑹": "(6)", "⑺": "(7)", "⑻": "(8)", "⑼": "(9)", "⑽": "(10)", "⑾": "(11)", "⑿": "(12)", "⒀": "(13)", "⒁": "(14)", "⒂": "(15)", "⒃": "(16)", "⒄": "(17)", "⒅": "(18)", "⒆": "(19)", "⒇": "(20)", "⒈": "1.", "⒉": "2.", "⒊": "3.", "⒋": "4.", "⒌": "5.", "⒍": "6.", "⒎": "7.", "⒏": "8.", "⒐": "9.", "⒑": "10.", "⒒": "11.", "⒓": "12.", "⒔": "13.", "⒕": "14.", "⒖": "15.", "⒗": "16.", "⒘": "17.", "⒙": "18.", "⒚": "19.", "⒛": "20.", "⒜": "(a)", "⒝": "(b)", "⒞": "(c)", "⒟": "(d)", "⒠": "(e)", "⒡": "(f)", "⒢": "(g)", "⒣": "(h)", "⒤": "(i)", "⒥": "(j)", "⒦": "(k)", "⒧": "(l)", "⒨": "(m)", "⒩": "(n)", "⒪": "(o)", "⒫": "(p)", "⒬": "(q)", "⒭": "(r)", "⒮": "(s)", "⒯": "(t)", "⒰": "(u)", "⒱": "(v)", "⒲": "(w)", "⒳": "(x)", "⒴": "(y)", "⒵": "(z)", "⨌": "∫∫∫∫", "⩴": "::=", "⩵": "==", "⩶": "===", "⺟": "母", "⻳": "龟", "⼀": "一", "⼁": "丨", "⼂": "丶", "⼃": "丿", "⼄": "乙", "⼅": "亅", "⼆": "二", "⼇": "亠", "⼈": "人", "⼉": "儿", "⼊": "入", "⼋": "八", "⼌": "冂", "⼍": "冖", "⼎": "冫", "⼏": "几", "⼐": "凵", "⼑": "刀", "⼒": "力", "⼓": "勹", "⼔": "匕", "⼕": "匚", "⼖": "匸", "⼗": "十", "⼘": "卜", "⼙": "卩", "⼚": "厂", "⼛": "厶", "⼜": "又", "⼝": "口", "⼞": "囗", "⼟": "土", "⼠": "士", "⼡": "夂", "⼢": "夊", "⼣": "夕", "⼤": "大", "⼥": "女", "⼦": "子", "⼧": "宀", "⼨": "寸", "⼩": "小", "⼪": "尢", "⼫": "尸", "⼬": "屮", "⼭": "山", "⼮": "巛", "⼯": "工", "⼰": "己", "⼱": "巾", "⼲": "干", "⼳": "幺", "⼴": "广", "⼵": "廴", "⼶": "廾", "⼷": "弋", "⼸": "弓", "⼹": "彐", "⼺": "彡", "⼻": "彳", "⼼": "心", "⼽": "戈", "⼾": "戶", "⼿": "手", "⽀": "支", "⽁": "攴", "⽂": "文", "⽃": "斗", "⽄": "斤", "⽅": "方", "⽆": "无", "⽇": "日", "⽈": "曰", "⽉": "月", "⽊": "木", "⽋": "欠", "⽌": "止", "⽍": "歹", "⽎": "殳", "⽏": "毋", "⽐": "比", "⽑": "毛", "⽒": "氏", "⽓": "气", "⽔": "水", "⽕": "火", "⽖": "爪", "⽗": "父", "⽘": "爻", "⽙": "爿", "⽚": "片", "⽛": "牙", "⽜": "牛", "⽝": "犬", "⽞": "玄", "⽟": "玉", "⽠": "瓜", "⽡": "瓦", "⽢": "甘", "⽣": "生", "⽤": "用", "⽥": "田", "⽦": "疋", "⽧": "疒", "⽨": "癶", "⽩": "白", "⽪": "皮", "⽫": "皿", "⽬": "目", "⽭": "矛", "⽮": "矢", "⽯": "石", "⽰": "示", "⽱": "禸", "⽲": "禾", "⽳": "穴", "⽴": "立", "⽵": "竹", "⽶": "米", "⽷": "糸", "⽸": "缶", "⽹": "网", "⽺": "羊", "⽻": "羽", "⽼": "老", "⽽": "而", "⽾": "耒", "⽿": "耳", "⾀": "聿", "⾁": "肉", "⾂": "臣", "⾃": "自", "⾄": "至", "⾅": "臼", "⾆": "舌", "⾇": "舛", "⾈": "舟", "⾉": "艮", "⾊": "色", "⾋": "艸", "⾌": "虍", "⾍": "虫", "⾎": "血", "⾏": "行", "⾐": "衣", "⾑": "襾", "⾒": "見", "⾓": "角", "⾔": "言", "⾕": "谷", "⾖": "豆", "⾗": "豕", "⾘": "豸", "⾙": "貝", "⾚": "赤", "⾛": "走", "⾜": "足", "⾝": "身", "⾞": "車", "⾟": "辛", "⾠": "辰", "⾡": "辵", "⾢": "邑", "⾣": "酉", "⾤": "釆", "⾥": "里", "⾦": "金", "⾧": "長", "⾨": "門", "⾩": "阜", "⾪": "隶", "⾫": "隹", "⾬": "雨", "⾭": "靑", "⾮": "非", "⾯": "面", "⾰": "革", "⾱": "韋", "⾲": "韭", "⾳": "音", "⾴": "頁", "⾵": "風", "⾶": "飛", "⾷": "食", "⾸": "首", "⾹": "香", "⾺": "馬", "⾻": "骨", "⾼": "高", "⾽": "髟", "⾾": "鬥", "⾿": "鬯", "⿀": "鬲", "⿁": "鬼", "⿂": "魚", "⿃": "鳥", "⿄": "鹵", "⿅": "鹿", "⿆": "麥", "⿇": "麻", "⿈": "黃", "⿉": "黍", "⿊": "黑", "⿋": "黹", "⿌": "黽", "⿍": "鼎", "⿎": "鼓", "⿏": "鼠", "⿐": "鼻", "⿑": "齊", "⿒": "齒", "⿓": "龍", "⿔": "龜", "⿕": "龠", "〶": "〒", "〸": "十", "〹": "卄", "〺": "卅", "゛": " ゙", "゜": " ゚", "ㄱ": "ᄀ", "ㄲ": "ᄁ", "ㄳ": "ᆪ", "ㄴ": "ᄂ", "ㄵ": "ᆬ", "ㄶ": "ᆭ", "ㄷ": "ᄃ", "ㄸ": "ᄄ", "ㄹ": "ᄅ", "ㄺ": "ᆰ", "ㄻ": "ᆱ", "ㄼ": "ᆲ", "ㄽ": "ᆳ", "ㄾ": "ᆴ", "ㄿ": "ᆵ", "ㅀ": "ᄚ", "ㅁ": "ᄆ", "ㅂ": "ᄇ", "ㅃ": "ᄈ", "ㅄ": "ᄡ", "ㅅ": "ᄉ", "ㅆ": "ᄊ", "ㅇ": "ᄋ", "ㅈ": "ᄌ", "ㅉ": "ᄍ", "ㅊ": "ᄎ", "ㅋ": "ᄏ", "ㅌ": "ᄐ", "ㅍ": "ᄑ", "ㅎ": "ᄒ", "ㅏ": "ᅡ", "ㅐ": "ᅢ", "ㅑ": "ᅣ", "ㅒ": "ᅤ", "ㅓ": "ᅥ", "ㅔ": "ᅦ", "ㅕ": "ᅧ", "ㅖ": "ᅨ", "ㅗ": "ᅩ", "ㅘ": "ᅪ", "ㅙ": "ᅫ", "ㅚ": "ᅬ", "ㅛ": "ᅭ", "ㅜ": "ᅮ", "ㅝ": "ᅯ", "ㅞ": "ᅰ", "ㅟ": "ᅱ", "ㅠ": "ᅲ", "ㅡ": "ᅳ", "ㅢ": "ᅴ", "ㅣ": "ᅵ", "ㅤ": "ᅠ", "ㅥ": "ᄔ", "ㅦ": "ᄕ", "ㅧ": "ᇇ", "ㅨ": "ᇈ", "ㅩ": "ᇌ", "ㅪ": "ᇎ", "ㅫ": "ᇓ", "ㅬ": "ᇗ", "ㅭ": "ᇙ", "ㅮ": "ᄜ", "ㅯ": "ᇝ", "ㅰ": "ᇟ", "ㅱ": "ᄝ", "ㅲ": "ᄞ", "ㅳ": "ᄠ", "ㅴ": "ᄢ", "ㅵ": "ᄣ", "ㅶ": "ᄧ", "ㅷ": "ᄩ", "ㅸ": "ᄫ", "ㅹ": "ᄬ", "ㅺ": "ᄭ", "ㅻ": "ᄮ", "ㅼ": "ᄯ", "ㅽ": "ᄲ", "ㅾ": "ᄶ", "ㅿ": "ᅀ", "ㆀ": "ᅇ", "ㆁ": "ᅌ", "ㆂ": "ᇱ", "ㆃ": "ᇲ", "ㆄ": "ᅗ", "ㆅ": "ᅘ", "ㆆ": "ᅙ", "ㆇ": "ᆄ", "ㆈ": "ᆅ", "ㆉ": "ᆈ", "ㆊ": "ᆑ", "ㆋ": "ᆒ", "ㆌ": "ᆔ", "ㆍ": "ᆞ", "ㆎ": "ᆡ", "㈀": "(ᄀ)", "㈁": "(ᄂ)", "㈂": "(ᄃ)", "㈃": "(ᄅ)", "㈄": "(ᄆ)", "㈅": "(ᄇ)", "㈆": "(ᄉ)", "㈇": "(ᄋ)", "㈈": "(ᄌ)", "㈉": "(ᄎ)", "㈊": "(ᄏ)", "㈋": "(ᄐ)", "㈌": "(ᄑ)", "㈍": "(ᄒ)", "㈎": "(가)", "㈏": "(나)", "㈐": "(다)", "㈑": "(라)", "㈒": "(마)", "㈓": "(바)", "㈔": "(사)", "㈕": "(아)", "㈖": "(자)", "㈗": "(차)", "㈘": "(카)", "㈙": "(타)", "㈚": "(파)", "㈛": "(하)", "㈜": "(주)", "㈝": "(오전)", "㈞": "(오후)", "㈠": "(一)", "㈡": "(二)", "㈢": "(三)", "㈣": "(四)", "㈤": "(五)", "㈥": "(六)", "㈦": "(七)", "㈧": "(八)", "㈨": "(九)", "㈩": "(十)", "㈪": "(月)", "㈫": "(火)", "㈬": "(水)", "㈭": "(木)", "㈮": "(金)", "㈯": "(土)", "㈰": "(日)", "㈱": "(株)", "㈲": "(有)", "㈳": "(社)", "㈴": "(名)", "㈵": "(特)", "㈶": "(財)", "㈷": "(祝)", "㈸": "(労)", "㈹": "(代)", "㈺": "(呼)", "㈻": "(学)", "㈼": "(監)", "㈽": "(企)", "㈾": "(資)", "㈿": "(協)", "㉀": "(祭)", "㉁": "(休)", "㉂": "(自)", "㉃": "(至)", "㋀": "1月", "㋁": "2月", "㋂": "3月", "㋃": "4月", "㋄": "5月", "㋅": "6月", "㋆": "7月", "㋇": "8月", "㋈": "9月", "㋉": "10月", "㋊": "11月", "㋋": "12月", "㍘": "0点", "㍙": "1点", "㍚": "2点", "㍛": "3点", "㍜": "4点", "㍝": "5点", "㍞": "6点", "㍟": "7点", "㍠": "8点", "㍡": "9点", "㍢": "10点", "㍣": "11点", "㍤": "12点", "㍥": "13点", "㍦": "14点", "㍧": "15点", "㍨": "16点", "㍩": "17点", "㍪": "18点", "㍫": "19点", "㍬": "20点", "㍭": "21点", "㍮": "22点", "㍯": "23点", "㍰": "24点", "㏠": "1日", "㏡": "2日", "㏢": "3日", "㏣": "4日", "㏤": "5日", "㏥": "6日", "㏦": "7日", "㏧": "8日", "㏨": "9日", "㏩": "10日", "㏪": "11日", "㏫": "12日", "㏬": "13日", "㏭": "14日", "㏮": "15日", "㏯": "16日", "㏰": "17日", "㏱": "18日", "㏲": "19日", "㏳": "20日", "㏴": "21日", "㏵": "22日", "㏶": "23日", "㏷": "24日", "㏸": "25日", "㏹": "26日", "㏺": "27日", "㏻": "28日", "㏼": "29日", "㏽": "30日", "㏾": "31日", "ﬀ": "ff", "ﬁ": "fi", "ﬂ": "fl", "ﬃ": "ffi", "ﬄ": "ffl", "ﬅ": "ſt", "ﬆ": "st", "ﬓ": "մն", "ﬔ": "մե", "ﬕ": "մի", "ﬖ": "վն", "ﬗ": "մխ", "ﭏ": "אל", "ﭐ": "ٱ", "ﭑ": "ٱ", "ﭒ": "ٻ", "ﭓ": "ٻ", "ﭔ": "ٻ", "ﭕ": "ٻ", "ﭖ": "پ", "ﭗ": "پ", "ﭘ": "پ", "ﭙ": "پ", "ﭚ": "ڀ", "ﭛ": "ڀ", "ﭜ": "ڀ", "ﭝ": "ڀ", "ﭞ": "ٺ", "ﭟ": "ٺ", "ﭠ": "ٺ", "ﭡ": "ٺ", "ﭢ": "ٿ", "ﭣ": "ٿ", "ﭤ": "ٿ", "ﭥ": "ٿ", "ﭦ": "ٹ", "ﭧ": "ٹ", "ﭨ": "ٹ", "ﭩ": "ٹ", "ﭪ": "ڤ", "ﭫ": "ڤ", "ﭬ": "ڤ", "ﭭ": "ڤ", "ﭮ": "ڦ", "ﭯ": "ڦ", "ﭰ": "ڦ", "ﭱ": "ڦ", "ﭲ": "ڄ", "ﭳ": "ڄ", "ﭴ": "ڄ", "ﭵ": "ڄ", "ﭶ": "ڃ", "ﭷ": "ڃ", "ﭸ": "ڃ", "ﭹ": "ڃ", "ﭺ": "چ", "ﭻ": "چ", "ﭼ": "چ", "ﭽ": "چ", "ﭾ": "ڇ", "ﭿ": "ڇ", "ﮀ": "ڇ", "ﮁ": "ڇ", "ﮂ": "ڍ", "ﮃ": "ڍ", "ﮄ": "ڌ", "ﮅ": "ڌ", "ﮆ": "ڎ", "ﮇ": "ڎ", "ﮈ": "ڈ", "ﮉ": "ڈ", "ﮊ": "ژ", "ﮋ": "ژ", "ﮌ": "ڑ", "ﮍ": "ڑ", "ﮎ": "ک", "ﮏ": "ک", "ﮐ": "ک", "ﮑ": "ک", "ﮒ": "گ", "ﮓ": "گ", "ﮔ": "گ", "ﮕ": "گ", "ﮖ": "ڳ", "ﮗ": "ڳ", "ﮘ": "ڳ", "ﮙ": "ڳ", "ﮚ": "ڱ", "ﮛ": "ڱ", "ﮜ": "ڱ", "ﮝ": "ڱ", "ﮞ": "ں", "ﮟ": "ں", "ﮠ": "ڻ", "ﮡ": "ڻ", "ﮢ": "ڻ", "ﮣ": "ڻ", "ﮤ": "ۀ", "ﮥ": "ۀ", "ﮦ": "ہ", "ﮧ": "ہ", "ﮨ": "ہ", "ﮩ": "ہ", "ﮪ": "ھ", "ﮫ": "ھ", "ﮬ": "ھ", "ﮭ": "ھ", "ﮮ": "ے", "ﮯ": "ے", "ﮰ": "ۓ", "ﮱ": "ۓ", "ﯓ": "ڭ", "ﯔ": "ڭ", "ﯕ": "ڭ", "ﯖ": "ڭ", "ﯗ": "ۇ", "ﯘ": "ۇ", "ﯙ": "ۆ", "ﯚ": "ۆ", "ﯛ": "ۈ", "ﯜ": "ۈ", "ﯝ": "ٷ", "ﯞ": "ۋ", "ﯟ": "ۋ", "ﯠ": "ۅ", "ﯡ": "ۅ", "ﯢ": "ۉ", "ﯣ": "ۉ", "ﯤ": "ې", "ﯥ": "ې", "ﯦ": "ې", "ﯧ": "ې", "ﯨ": "ى", "ﯩ": "ى", "ﯪ": "ئا", "ﯫ": "ئا", "ﯬ": "ئە", "ﯭ": "ئە", "ﯮ": "ئو", "ﯯ": "ئو", "ﯰ": "ئۇ", "ﯱ": "ئۇ", "ﯲ": "ئۆ", "ﯳ": "ئۆ", "ﯴ": "ئۈ", "ﯵ": "ئۈ", "ﯶ": "ئې", "ﯷ": "ئې", "ﯸ": "ئې", "ﯹ": "ئى", "ﯺ": "ئى", "ﯻ": "ئى", "ﯼ": "ی", "ﯽ": "ی", "ﯾ": "ی", "ﯿ": "ی", "ﰀ": "ئج", "ﰁ": "ئح", "ﰂ": "ئم", "ﰃ": "ئى", "ﰄ": "ئي", "ﰅ": "بج", "ﰆ": "بح", "ﰇ": "بخ", "ﰈ": "بم", "ﰉ": "بى", "ﰊ": "بي", "ﰋ": "تج", "ﰌ": "تح", "ﰍ": "تخ", "ﰎ": "تم", "ﰏ": "تى", "ﰐ": "تي", "ﰑ": "ثج", "ﰒ": "ثم", "ﰓ": "ثى", "ﰔ": "ثي", "ﰕ": "جح", "ﰖ": "جم", "ﰗ": "حج", "ﰘ": "حم", "ﰙ": "خج", "ﰚ": "خح", "ﰛ": "خم", "ﰜ": "سج", "ﰝ": "سح", "ﰞ": "سخ", "ﰟ": "سم", "ﰠ": "صح", "ﰡ": "صم", "ﰢ": "ضج", "ﰣ": "ضح", "ﰤ": "ضخ", "ﰥ": "ضم", "ﰦ": "طح", "ﰧ": "طم", "ﰨ": "ظم", "ﰩ": "عج", "ﰪ": "عم", "ﰫ": "غج", "ﰬ": "غم", "ﰭ": "فج", "ﰮ": "فح", "ﰯ": "فخ", "ﰰ": "فم", "ﰱ": "فى", "ﰲ": "في", "ﰳ": "قح", "ﰴ": "قم", "ﰵ": "قى", "ﰶ": "قي", "ﰷ": "كا", "ﰸ": "كج", "ﰹ": "كح", "ﰺ": "كخ", "ﰻ": "كل", "ﰼ": "كم", "ﰽ": "كى", "ﰾ": "كي", "ﰿ": "لج", "ﱀ": "لح", "ﱁ": "لخ", "ﱂ": "لم", "ﱃ": "لى", "ﱄ": "لي", "ﱅ": "مج", "ﱆ": "مح", "ﱇ": "مخ", "ﱈ": "مم", "ﱉ": "مى", "ﱊ": "مي", "ﱋ": "نج", "ﱌ": "نح", "ﱍ": "نخ", "ﱎ": "نم", "ﱏ": "نى", "ﱐ": "ني", "ﱑ": "هج", "ﱒ": "هم", "ﱓ": "هى", "ﱔ": "هي", "ﱕ": "يج", "ﱖ": "يح", "ﱗ": "يخ", "ﱘ": "يم", "ﱙ": "يى", "ﱚ": "يي", "ﱛ": "ذٰ", "ﱜ": "رٰ", "ﱝ": "ىٰ", "ﱞ": " ٌّ", "ﱟ": " ٍّ", "ﱠ": " َّ", "ﱡ": " ُّ", "ﱢ": " ِّ", "ﱣ": " ّٰ", "ﱤ": "ئر", "ﱥ": "ئز", "ﱦ": "ئم", "ﱧ": "ئن", "ﱨ": "ئى", "ﱩ": "ئي", "ﱪ": "بر", "ﱫ": "بز", "ﱬ": "بم", "ﱭ": "بن", "ﱮ": "بى", "ﱯ": "بي", "ﱰ": "تر", "ﱱ": "تز", "ﱲ": "تم", "ﱳ": "تن", "ﱴ": "تى", "ﱵ": "تي", "ﱶ": "ثر", "ﱷ": "ثز", "ﱸ": "ثم", "ﱹ": "ثن", "ﱺ": "ثى", "ﱻ": "ثي", "ﱼ": "فى", "ﱽ": "في", "ﱾ": "قى", "ﱿ": "قي", "ﲀ": "كا", "ﲁ": "كل", "ﲂ": "كم", "ﲃ": "كى", "ﲄ": "كي", "ﲅ": "لم", "ﲆ": "لى", "ﲇ": "لي", "ﲈ": "ما", "ﲉ": "مم", "ﲊ": "نر", "ﲋ": "نز", "ﲌ": "نم", "ﲍ": "نن", "ﲎ": "نى", "ﲏ": "ني", "ﲐ": "ىٰ", "ﲑ": "ير", "ﲒ": "يز", "ﲓ": "يم", "ﲔ": "ين", "ﲕ": "يى", "ﲖ": "يي", "ﲗ": "ئج", "ﲘ": "ئح", "ﲙ": "ئخ", "ﲚ": "ئم", "ﲛ": "ئه", "ﲜ": "بج", "ﲝ": "بح", "ﲞ": "بخ", "ﲟ": "بم", "ﲠ": "به", "ﲡ": "تج", "ﲢ": "تح", "ﲣ": "تخ", "ﲤ": "تم", "ﲥ": "ته", "ﲦ": "ثم", "ﲧ": "جح", "ﲨ": "جم", "ﲩ": "حج", "ﲪ": "حم", "ﲫ": "خج", "ﲬ": "خم", "ﲭ": "سج", "ﲮ": "سح", "ﲯ": "سخ", "ﲰ": "سم", "ﲱ": "صح", "ﲲ": "صخ", "ﲳ": "صم", "ﲴ": "ضج", "ﲵ": "ضح", "ﲶ": "ضخ", "ﲷ": "ضم", "ﲸ": "طح", "ﲹ": "ظم", "ﲺ": "عج", "ﲻ": "عم", "ﲼ": "غج", "ﲽ": "غم", "ﲾ": "فج", "ﲿ": "فح", "ﳀ": "فخ", "ﳁ": "فم", "ﳂ": "قح", "ﳃ": "قم", "ﳄ": "كج", "ﳅ": "كح", "ﳆ": "كخ", "ﳇ": "كل", "ﳈ": "كم", "ﳉ": "لج", "ﳊ": "لح", "ﳋ": "لخ", "ﳌ": "لم", "ﳍ": "له", "ﳎ": "مج", "ﳏ": "مح", "ﳐ": "مخ", "ﳑ": "مم", "ﳒ": "نج", "ﳓ": "نح", "ﳔ": "نخ", "ﳕ": "نم", "ﳖ": "نه", "ﳗ": "هج", "ﳘ": "هم", "ﳙ": "هٰ", "ﳚ": "يج", "ﳛ": "يح", "ﳜ": "يخ", "ﳝ": "يم", "ﳞ": "يه", "ﳟ": "ئم", "ﳠ": "ئه", "ﳡ": "بم", "ﳢ": "به", "ﳣ": "تم", "ﳤ": "ته", "ﳥ": "ثم", "ﳦ": "ثه", "ﳧ": "سم", "ﳨ": "سه", "ﳩ": "شم", "ﳪ": "شه", "ﳫ": "كل", "ﳬ": "كم", "ﳭ": "لم", "ﳮ": "نم", "ﳯ": "نه", "ﳰ": "يم", "ﳱ": "يه", "ﳲ": "ـَّ", "ﳳ": "ـُّ", "ﳴ": "ـِّ", "ﳵ": "طى", "ﳶ": "طي", "ﳷ": "عى", "ﳸ": "عي", "ﳹ": "غى", "ﳺ": "غي", "ﳻ": "سى", "ﳼ": "سي", "ﳽ": "شى", "ﳾ": "شي", "ﳿ": "حى", "ﴀ": "حي", "ﴁ": "جى", "ﴂ": "جي", "ﴃ": "خى", "ﴄ": "خي", "ﴅ": "صى", "ﴆ": "صي", "ﴇ": "ضى", "ﴈ": "ضي", "ﴉ": "شج", "ﴊ": "شح", "ﴋ": "شخ", "ﴌ": "شم", "ﴍ": "شر", "ﴎ": "سر", "ﴏ": "صر", "ﴐ": "ضر", "ﴑ": "طى", "ﴒ": "طي", "ﴓ": "عى", "ﴔ": "عي", "ﴕ": "غى", "ﴖ": "غي", "ﴗ": "سى", "ﴘ": "سي", "ﴙ": "شى", "ﴚ": "شي", "ﴛ": "حى", "ﴜ": "حي", "ﴝ": "جى", "ﴞ": "جي", "ﴟ": "خى", "ﴠ": "خي", "ﴡ": "صى", "ﴢ": "صي", "ﴣ": "ضى", "ﴤ": "ضي", "ﴥ": "شج", "ﴦ": "شح", "ﴧ": "شخ", "ﴨ": "شم", "ﴩ": "شر", "ﴪ": "سر", "ﴫ": "صر", "ﴬ": "ضر", "ﴭ": "شج", "ﴮ": "شح", "ﴯ": "شخ", "ﴰ": "شم", "ﴱ": "سه", "ﴲ": "شه", "ﴳ": "طم", "ﴴ": "سج", "ﴵ": "سح", "ﴶ": "سخ", "ﴷ": "شج", "ﴸ": "شح", "ﴹ": "شخ", "ﴺ": "طم", "ﴻ": "ظم", "ﴼ": "اً", "ﴽ": "اً", "ﵐ": "تجم", "ﵑ": "تحج", "ﵒ": "تحج", "ﵓ": "تحم", "ﵔ": "تخم", "ﵕ": "تمج", "ﵖ": "تمح", "ﵗ": "تمخ", "ﵘ": "جمح", "ﵙ": "جمح", "ﵚ": "حمي", "ﵛ": "حمى", "ﵜ": "سحج", "ﵝ": "سجح", "ﵞ": "سجى", "ﵟ": "سمح", "ﵠ": "سمح", "ﵡ": "سمج", "ﵢ": "سمم", "ﵣ": "سمم", "ﵤ": "صحح", "ﵥ": "صحح", "ﵦ": "صمم", "ﵧ": "شحم", "ﵨ": "شحم", "ﵩ": "شجي", "ﵪ": "شمخ", "ﵫ": "شمخ", "ﵬ": "شمم", "ﵭ": "شمم", "ﵮ": "ضحى", "ﵯ": "ضخم", "ﵰ": "ضخم", "ﵱ": "طمح", "ﵲ": "طمح", "ﵳ": "طمم", "ﵴ": "طمي", "ﵵ": "عجم", "ﵶ": "عمم", "ﵷ": "عمم", "ﵸ": "عمى", "ﵹ": "غمم", "ﵺ": "غمي", "ﵻ": "غمى", "ﵼ": "فخم", "ﵽ": "فخم", "ﵾ": "قمح", "ﵿ": "قمم", "ﶀ": "لحم", "ﶁ": "لحي", "ﶂ": "لحى", "ﶃ": "لجج", "ﶄ": "لجج", "ﶅ": "لخم", "ﶆ": "لخم", "ﶇ": "لمح", "ﶈ": "لمح", "ﶉ": "محج", "ﶊ": "محم", "ﶋ": "محي", "ﶌ": "مجح", "ﶍ": "مجم", "ﶎ": "مخج", "ﶏ": "مخم", "ﶒ": "مجخ", "ﶓ": "همج", "ﶔ": "همم", "ﶕ": "نحم", "ﶖ": "نحى", "ﶗ": "نجم", "ﶘ": "نجم", "ﶙ": "نجى", "ﶚ": "نمي", "ﶛ": "نمى", "ﶜ": "يمم", "ﶝ": "يمم", "ﶞ": "بخي", "ﶟ": "تجي", "ﶠ": "تجى", "ﶡ": "تخي", "ﶢ": "تخى", "ﶣ": "تمي", "ﶤ": "تمى", "ﶥ": "جمي", "ﶦ": "جحى", "ﶧ": "جمى", "ﶨ": "سخى", "ﶩ": "صحي", "ﶪ": "شحي", "ﶫ": "ضحي", "ﶬ": "لجي", "ﶭ": "لمي", "ﶮ": "يحي", "ﶯ": "يجي", "ﶰ": "يمي", "ﶱ": "ممي", "ﶲ": "قمي", "ﶳ": "نحي", "ﶴ": "قمح", "ﶵ": "لحم", "ﶶ": "عمي", "ﶷ": "كمي", "ﶸ": "نجح", "ﶹ": "مخي", "ﶺ": "لجم", "ﶻ": "كمم", "ﶼ": "لجم", "ﶽ": "نجح", "ﶾ": "جحي", "ﶿ": "حجي", "ﷀ": "مجي", "ﷁ": "فمي", "ﷂ": "بحي", "ﷃ": "كمم", "ﷄ": "عجم", "ﷅ": "صمم", "ﷆ": "سخي", "ﷇ": "نجي", "﹉": "‾", "﹊": "‾", "﹋": "‾", "﹌": "‾", "﹍": "_", "﹎": "_", "﹏": "_", "ﺀ": "ء", "ﺁ": "آ", "ﺂ": "آ", "ﺃ": "أ", "ﺄ": "أ", "ﺅ": "ؤ", "ﺆ": "ؤ", "ﺇ": "إ", "ﺈ": "إ", "ﺉ": "ئ", "ﺊ": "ئ", "ﺋ": "ئ", "ﺌ": "ئ", "ﺍ": "ا", "ﺎ": "ا", "ﺏ": "ب", "ﺐ": "ب", "ﺑ": "ب", "ﺒ": "ب", "ﺓ": "ة", "ﺔ": "ة", "ﺕ": "ت", "ﺖ": "ت", "ﺗ": "ت", "ﺘ": "ت", "ﺙ": "ث", "ﺚ": "ث", "ﺛ": "ث", "ﺜ": "ث", "ﺝ": "ج", "ﺞ": "ج", "ﺟ": "ج", "ﺠ": "ج", "ﺡ": "ح", "ﺢ": "ح", "ﺣ": "ح", "ﺤ": "ح", "ﺥ": "خ", "ﺦ": "خ", "ﺧ": "خ", "ﺨ": "خ", "ﺩ": "د", "ﺪ": "د", "ﺫ": "ذ", "ﺬ": "ذ", "ﺭ": "ر", "ﺮ": "ر", "ﺯ": "ز", "ﺰ": "ز", "ﺱ": "س", "ﺲ": "س", "ﺳ": "س", "ﺴ": "س", "ﺵ": "ش", "ﺶ": "ش", "ﺷ": "ش", "ﺸ": "ش", "ﺹ": "ص", "ﺺ": "ص", "ﺻ": "ص", "ﺼ": "ص", "ﺽ": "ض", "ﺾ": "ض", "ﺿ": "ض", "ﻀ": "ض", "ﻁ": "ط", "ﻂ": "ط", "ﻃ": "ط", "ﻄ": "ط", "ﻅ": "ظ", "ﻆ": "ظ", "ﻇ": "ظ", "ﻈ": "ظ", "ﻉ": "ع", "ﻊ": "ع", "ﻋ": "ع", "ﻌ": "ع", "ﻍ": "غ", "ﻎ": "غ", "ﻏ": "غ", "ﻐ": "غ", "ﻑ": "ف", "ﻒ": "ف", "ﻓ": "ف", "ﻔ": "ف", "ﻕ": "ق", "ﻖ": "ق", "ﻗ": "ق", "ﻘ": "ق", "ﻙ": "ك", "ﻚ": "ك", "ﻛ": "ك", "ﻜ": "ك", "ﻝ": "ل", "ﻞ": "ل", "ﻟ": "ل", "ﻠ": "ل", "ﻡ": "م", "ﻢ": "م", "ﻣ": "م", "ﻤ": "م", "ﻥ": "ن", "ﻦ": "ن", "ﻧ": "ن", "ﻨ": "ن", "ﻩ": "ه", "ﻪ": "ه", "ﻫ": "ه", "ﻬ": "ه", "ﻭ": "و", "ﻮ": "و", "ﻯ": "ى", "ﻰ": "ى", "ﻱ": "ي", "ﻲ": "ي", "ﻳ": "ي", "ﻴ": "ي", "ﻵ": "لآ", "ﻶ": "لآ", "ﻷ": "لأ", "ﻸ": "لأ", "ﻹ": "لإ", "ﻺ": "لإ", "ﻻ": "لا", "ﻼ": "لا" };
function Na(e3) {
  var t3, a2, r3 = e3.length;
  if (r3 <= 1 || (t3 = e3.charCodeAt(0), a2 = Oa[13], !(t3 >= a2.begin && t3 < a2.end || t3 >= (a2 = Oa[11]).begin && t3 < a2.end))) return e3;
  for (var i3 = "", n3 = r3 - 1; n3 >= 0; n3--) i3 += e3[n3];
  return i3;
}
function ja(e3, t3) {
  for (var a2 = t3.charsToGlyphs(e3), r3 = "", i3 = 0, n3 = a2.length; i3 < n3; i3++) {
    var c3 = a2[i3];
    if (c3) {
      var s3 = c3.unicode;
      s3 in Ea && (s3 = Ea[s3]), r3 += Na(s3);
    }
  }
  return r3;
}
var Ua = function() {
  function e3(e4, t4, a3) {
    this.name = e4, this.loadedName = a3.loadedName, this.coded = a3.coded, this.loadCharProcs = a3.coded, this.sizes = [];
    var r4 = e4.split("+");
    r4 = (r4 = r4.length > 1 ? r4[1] : r4[0]).split(/[-,_]/g)[0], this.isSerifFont = !!(a3.flags & ka.Serif), this.isSymbolicFont = !!(a3.flags & ka.Symbolic), this.isMonospace = !!(a3.flags & ka.FixedPitch);
    var i4 = a3.type;
    if (this.type = i4, this.fallbackName = this.isMonospace ? "monospace" : this.isSerifFont ? "serif" : "sans-serif", this.differences = a3.differences, this.widths = a3.widths, this.defaultWidth = a3.defaultWidth, this.composite = a3.composite, this.wideChars = a3.wideChars, this.hasEncoding = a3.hasEncoding, this.cmap = a3.cmap, this.fontMatrix = a3.fontMatrix, "Type3" != a3.type) {
      if (this.loadCidToUnicode(a3), this.cidEncoding = a3.cidEncoding, this.vertical = a3.vertical, this.vertical && (this.vmetrics = a3.vmetrics, this.defaultVMetrics = a3.defaultVMetrics), a3.toUnicode && a3.toUnicode.length > 0 ? this.toUnicode = a3.toUnicode : this.rebuildToUnicode(a3), this.toFontChar = this.buildToFontChar(this.toUnicode), !t4) {
        var n4 = e4.replace(/[,_]/g, "-");
        return n4 = wa[n4] || xa[n4] || n4, this.bold = -1 != n4.search(/bold/gi), this.italic = -1 != n4.search(/oblique/gi) || -1 != n4.search(/italic/gi), this.black = -1 != e4.search(/Black/g), this.encoding = a3.baseEncoding, this.noUnicodeAdaptation = true, this.loadedName = n4.split("-")[0], void (this.loading = false);
      }
      var c4, s4 = a3.subtype;
      switch ("Type1C" == s4 && "Type1" != i4 && "MMType1" != i4 && (i4 = "Type1"), "CIDFontType0C" == s4 && "CIDFontType0" != i4 && (i4 = "CIDFontType0"), "OpenType" === s4 && (i4 = "OpenType"), i4) {
        case "Type1":
        case "CIDFontType0":
          this.mimetype = "font/opentype";
          var o4 = "Type1C" == s4 || "CIDFontType0C" == s4 ? new Wa(t4, a3) : new Xa(e4, t4, a3);
          !function(e5) {
            if (e5.fontMatrix[0] !== Ae[0]) {
              var t5 = 1e-3 / e5.fontMatrix[0], a4 = e5.widths;
              for (var r5 in a4) a4[r5] *= t5;
              e5.defaultWidth *= t5;
            }
          }(a3), c4 = this.convert(e4, o4, a3);
          break;
        case "OpenType":
        case "TrueType":
        case "CIDFontType2":
          this.mimetype = "font/opentype", c4 = this.checkAndRepair(e4, t4, a3);
          break;
        default:
          Oe("Font " + i4 + " is not supported");
      }
      this.data = c4, this.fontMatrix = a3.fontMatrix, this.widths = a3.widths, this.defaultWidth = a3.defaultWidth, this.encoding = a3.baseEncoding, this.seacMap = a3.seacMap, this.loading = true;
    } else this.encoding = a3.baseEncoding;
  }
  function t3(e4) {
    for (var t4 = [], a3 = 0, r4 = e4.length; a3 < r4; ++a3) t4[a3] = e4.charCodeAt(a3);
    return t4;
  }
  function a2(e4) {
    for (var t4 = "", a3 = 0, r4 = e4.length; a3 < r4; ++a3) t4 += String.fromCharCode(e4[a3]);
    return t4;
  }
  function r3(e4) {
    return (e4[0] << 8) + (255 & e4[1]);
  }
  function i3(e4) {
    return (e4[0] << 24) + (e4[1] << 16) + (e4[2] << 8) + (255 & e4[3]);
  }
  function n3(e4) {
    for (var t4 = 0, a3 = e4; a3 >= 2; ) a3 /= 2, t4++;
    a3 = 2;
    for (var r4 = 1; r4 < t4; r4++) a3 *= 2;
    return a3;
  }
  function c3(e4) {
    return String.fromCharCode(e4 >> 8 & 255) + String.fromCharCode(255 & e4);
  }
  function s3(e4) {
    return e4 = e4 > 32767 ? 32767 : e4 < -32768 ? -32768 : e4, String.fromCharCode(e4 >> 8 & 255) + String.fromCharCode(255 & e4);
  }
  function o3(e4) {
    return String.fromCharCode(e4 >> 24 & 255) + String.fromCharCode(e4 >> 16 & 255) + String.fromCharCode(e4 >> 8 & 255) + String.fromCharCode(255 & e4);
  }
  function f2(e4, t4, a3) {
    "true" == e4 && (e4 = o3(65536));
    var r4 = e4;
    r4 += c3(a3);
    var i4 = n3(a3), s4 = 16 * i4;
    r4 += c3(s4), r4 += c3(Math.log(i4) / Math.log(2)), r4 += c3(16 * a3 - s4), t4.file += r4, t4.virtualOffset += r4.length;
  }
  function l2(e4, t4, a3) {
    for (var r4 = e4.virtualOffset, n4 = a3.length; 3 & a3.length; ) a3.push(0);
    for (; 3 & e4.virtualOffset; ) e4.virtualOffset++;
    for (var c4 = 0, s4 = a3.length, f3 = 0; f3 < s4; f3 += 4) c4 = c4 + i3([a3[f3], a3[f3 + 1], a3[f3 + 2], a3[f3 + 3]]) | 0;
    var l3 = t4 + o3(c4) + o3(r4) + o3(n4);
    e4.file += l3, e4.virtualOffset += a3.length;
  }
  function h3(e4, a3) {
    for (var r4 = function(e5, t4) {
      for (var a4 = [], r5 = e5.length, i5 = 0; i5 < r5; ++i5) a4.push({ unicode: e5[i5].unicode, code: i5 });
      a4.sort(function(e6, t5) {
        return e6.unicode - t5.unicode;
      });
      var n4 = [];
      for (i5 = 0; i5 < r5; ) {
        var c4 = a4[i5].unicode, s5 = [t4 ? t4[a4[i5].code] : a4[i5].code + 1];
        ++i5;
        for (var o4 = c4; i5 < r5 && o4 + 1 == a4[i5].unicode && (s5.push(t4 ? t4[a4[i5].code] : a4[i5].code + 1), ++i5, 65535 != ++o4); ) ;
        n4.push([c4, o4, s5]);
      }
      return n4;
    }(e4, a3), i4 = r4[r4.length - 1][1] > 65535 ? 2 : 1, s4 = "\0\0" + c3(i4) + "\0\0" + o3(4 + 8 * i4), f3 = r4.length - 1; f3 >= 0 && !(r4[f3][0] <= 65535); --f3) ;
    var l3 = f3 + 1;
    r4[f3][0] < 65535 && 65535 === r4[f3][1] && (r4[f3][1] = 65534);
    for (var h4 = r4[f3][1] < 65535 ? 1 : 0, u4 = l3 + h4, d4 = 2 * u4, g3 = 2 * n3(u4), m4 = Math.log(u4) / Math.log(2), p3 = 2 * u4 - g3, b3 = "", v3 = "", y3 = "", k3 = "", A3 = "", w3 = 0, x3 = (f3 = 0, l3); f3 < x3; f3++) {
      var S3 = (O2 = r4[f3])[0], C2 = O2[1];
      b3 += c3(S3), v3 += c3(C2);
      for (var I3 = true, B3 = 1, T3 = (M2 = O2[2]).length; B3 < T3; ++B3) if (M2[B3] !== M2[B3 - 1] + 1) {
        I3 = false;
        break;
      }
      if (I3) {
        y3 += c3(M2[0] - S3 & 65535), k3 += c3(0);
      } else {
        var L2 = 2 * (u4 - f3) + 2 * w3;
        w3 += C2 - S3 + 1, y3 += c3(0), k3 += c3(L2);
        for (B3 = 0, T3 = M2.length; B3 < T3; ++B3) A3 += c3(M2[B3]);
      }
    }
    h4 > 0 && (v3 += "ÿÿ", b3 += "ÿÿ", y3 += "\0", k3 += "\0\0");
    var F2 = "\0\0" + c3(d4) + c3(g3) + c3(m4) + c3(p3) + v3 + "\0\0" + b3 + y3 + k3 + A3, P3 = "", R2 = "";
    if (i4 > 1) {
      s4 += "\0\0\n" + o3(4 + 8 * i4 + 4 + F2.length), P3 = "";
      for (f3 = 0, x3 = r4.length; f3 < x3; f3++) {
        S3 = (O2 = r4[f3])[0];
        var O2, M2, D2 = (M2 = O2[2])[0];
        for (B3 = 1, T3 = M2.length; B3 < T3; ++B3) if (M2[B3] !== M2[B3 - 1] + 1) {
          C2 = O2[0] + B3 - 1;
          P3 += o3(S3) + o3(C2) + o3(D2), S3 = C2 + 1, D2 = M2[B3];
        }
        P3 += o3(S3) + o3(O2[1]) + o3(D2);
      }
      R2 = "\0\f\0\0" + o3(P3.length + 16) + "\0\0\0\0" + o3(P3.length / 12);
    }
    return t3(s4 + "\0" + c3(F2.length + 4) + F2 + R2 + P3);
  }
  function u3(e4, t4, a3) {
    a3 = a3 || { unitsPerEm: 0, yMax: 0, yMin: 0, ascent: 0, descent: 0 };
    var r4 = 0, i4 = 0, n4 = 0, s4 = 0, f3 = null, l3 = 0;
    if (t4) for (var h4 = 0; h4 < t4.length; ++h4) {
      var u4 = t4[h4].unicode;
      (f3 > u4 || !f3) && (f3 = u4), l3 < u4 && (l3 = u4);
      var d4 = Da(u4);
      d4 < 32 ? r4 |= 1 << d4 : d4 < 64 ? i4 |= 1 << d4 - 32 : d4 < 96 ? n4 |= 1 << d4 - 64 : d4 < 123 ? s4 |= 1 << d4 - 96 : Oe("Unicode ranges Bits > 123 are reserved for internal usage");
    }
    else f3 = 0, l3 = 255;
    var g3 = e4.bbox || [0, 0, 0, 0], m4 = a3.unitsPerEm || 1 / (e4.fontMatrix || Ae)[0], p3 = e4.ascentScaled ? 1 : m4 / 1e3, b3 = a3.ascent || Math.round(p3 * (e4.ascent || g3[3])), v3 = a3.descent || Math.round(p3 * (e4.descent || g3[1]));
    v3 > 0 && e4.descent > 0 && g3[1] < 0 && (v3 = -v3);
    var y3 = a3.yMax || b3, k3 = -a3.yMin || -v3;
    return "\0$ô\0\0\0»\0\0\0»\0\0ß\x001\0\0\0\0" + String.fromCharCode(e4.fixedPitch ? 9 : 0) + "\0\0\0\0\0\0" + o3(r4) + o3(i4) + o3(n4) + o3(s4) + "*21*" + c3(e4.italicAngle ? 1 : 0) + c3(f3 || e4.firstChar) + c3(l3 || e4.lastChar) + c3(b3) + c3(v3) + "\0d" + c3(y3) + c3(k3) + "\0\0\0\0\0\0\0\0" + c3(e4.xHeight) + c3(e4.capHeight) + c3(0) + c3(f3 || e4.firstChar) + "\0";
  }
  function d3(e4) {
    return "\0\0\0" + o3(Math.floor(e4.italicAngle * Math.pow(2, 16))) + "\0\0\0\0" + o3(e4.fixedPitch) + "\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0";
  }
  function g2(e4, t4) {
    t4 || (t4 = [[], []]);
    for (var a3 = [t4[0][0] || "Original licence", t4[0][1] || e4, t4[0][2] || "Unknown", t4[0][3] || "uniqueID", t4[0][4] || e4, t4[0][5] || "Version 0.11", t4[0][6] || "", t4[0][7] || "Unknown", t4[0][8] || "Unknown", t4[0][9] || "Unknown"], r4 = [], i4 = 0, n4 = a3.length; i4 < n4; i4++) {
      for (var s4 = "", o4 = 0, f3 = (v3 = t4[1][i4] || a3[i4]).length; o4 < f3; o4++) s4 += c3(v3.charCodeAt(o4));
      r4.push(s4);
    }
    var l3 = [a3, r4], h4 = ["\0", "\0"], u4 = ["\0\0", "\0"], d4 = ["\0\0", "	"], g3 = a3.length * h4.length, m4 = "\0\0" + c3(g3) + c3(12 * g3 + 6), p3 = 0;
    for (i4 = 0, n4 = h4.length; i4 < n4; i4++) {
      var b3 = l3[i4];
      for (o4 = 0, f3 = b3.length; o4 < f3; o4++) {
        var v3 = b3[o4];
        m4 += h4[i4] + u4[i4] + d4[i4] + c3(o4) + c3(v3.length) + c3(p3), p3 += v3.length;
      }
    }
    return m4 += a3.join("") + r4.join("");
  }
  function m3(e4, t4, a3, r4) {
    var i4;
    if (t4) (3 === a3 && 0 === r4 || 1 === a3 && 0 === r4) && (i4 = 61440 | 255 & e4);
    else if (3 === a3 && 1 === r4) i4 = e4;
    else if (1 === a3 && 0 === r4) {
      var n4 = Aa.MacRomanEncoding[e4];
      n4 && (i4 = or[n4]);
    }
    return i4;
  }
  return e3.prototype = { name: null, font: null, mimetype: null, encoding: null, get renderer() {
    return Ue(this, "renderer", sr.create(this));
  }, exportData: function() {
    var e4 = {};
    for (var t4 in this) this.hasOwnProperty(t4) && (e4[t4] = this[t4]);
    return e4;
  }, checkAndRepair: function(e4, n4, c4) {
    function s4(e5) {
      var t4 = e5.getBytes(4);
      t4 = String.fromCharCode(t4[0]) + String.fromCharCode(t4[1]) + String.fromCharCode(t4[2]) + String.fromCharCode(t4[3]);
      var a3 = i3(e5.getBytes(4)), r4 = i3(e5.getBytes(4)), n5 = i3(e5.getBytes(4)), c5 = e5.pos;
      e5.pos = e5.start ? e5.start : 0, e5.skip(r4);
      var s5 = e5.getBytes(n5);
      return e5.pos = c5, "head" == t4 && (s5[8] = s5[9] = s5[10] = s5[11] = 0, s5[17] |= 32), { tag: t4, checksum: a3, length: n5, offset: r4, data: s5 };
    }
    function o4(e5, t4, a3, r4, i4, n5) {
      if (a3 - t4 <= 12) return 0;
      var c5 = e5.subarray(t4, a3), s5 = c5[0] << 8 | c5[1];
      if (32768 & s5) return r4.set(c5, i4), c5.length;
      for (var o5 = 10, f3 = 0, l3 = 0; l3 < s5; l3++) {
        f3 = (c5[o5] << 8 | c5[o5 + 1]) + 1, o5 += 2;
      }
      var h4 = o5, u4 = c5[o5] << 8 | c5[o5 + 1], d4 = o5 += 2 + u4, g3 = 0;
      for (l3 = 0; l3 < f3; l3++) {
        var m4 = c5[o5++];
        192 & m4 && (c5[o5 - 1] = 63 & m4);
        var p4 = (2 & m4 ? 1 : 16 & m4 ? 0 : 2) + (4 & m4 ? 1 : 32 & m4 ? 0 : 2);
        if (g3 += p4, 8 & m4) {
          var b4 = c5[o5++];
          l3 += b4, g3 += b4 * p4;
        }
      }
      if (0 === g3) return 0;
      var v4 = o5 + g3;
      return v4 > c5.length ? 0 : !n5 && u4 > 0 ? (r4.set(c5.subarray(0, h4), i4), r4.set([0, 0], i4 + h4), r4.set(c5.subarray(d4, v4), i4 + h4 + 2), v4 -= u4, c5.length - v4 > 3 && (v4 = v4 + 3 & -4), v4) : c5.length - v4 > 3 ? (v4 = v4 + 3 & -4, r4.set(c5.subarray(0, v4), i4), v4) : (r4.set(c5, i4), c5.length);
    }
    var p3 = [0, 0, 0, 0, 0, 0, 0, 0, -2, -2, -2, -2, 0, 0, -2, -5, -1, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, -1, -1, 1, -1, -999, 0, 1, 0, -1, -2, 0, -1, -2, -1, -1, 0, -1, -1, 0, 0, -999, -999, -1, -1, -1, -1, -2, -999, -2, -2, -999, 0, -2, -2, 0, 0, -2, 0, -2, 0, 0, 0, -2, -1, -1, 1, 1, 0, 0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, 0, -1, -1, 0, -999, -1, -1, -1, -1, -1, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -2, -999, -999, -999, -999, -999, -1, -1, -2, -2, 0, 0, 0, 0, -1, -1, -999, -2, -2, 0, 0, -1, -2, -2, 0, 0, 0, -1, -1, -1, -2];
    function b3(e5, t4) {
      for (var a3, r4 = e5.data, i4 = 0, n5 = 0, c5 = 0, s5 = [], o5 = [], f3 = [], l3 = t4.tooComplexToFollowFunctions, h4 = false, u4 = 0, d4 = 0, g3 = r4.length; i4 < g3; ) {
        var m4 = r4[i4++];
        if (64 === m4) if (a3 = r4[i4++], h4 || d4) i4 += a3;
        else for (var b4 = 0; b4 < a3; b4++) s5.push(r4[i4++]);
        else if (65 === m4) if (a3 = r4[i4++], h4 || d4) i4 += 2 * a3;
        else for (b4 = 0; b4 < a3; b4++) {
          var v4 = r4[i4++];
          s5.push(v4 << 8 | r4[i4++]);
        }
        else if (176 == (248 & m4)) if (a3 = m4 - 176 + 1, h4 || d4) i4 += a3;
        else for (b4 = 0; b4 < a3; b4++) s5.push(r4[i4++]);
        else if (184 == (248 & m4)) if (a3 = m4 - 184 + 1, h4 || d4) i4 += 2 * a3;
        else for (b4 = 0; b4 < a3; b4++) {
          v4 = r4[i4++];
          s5.push(v4 << 8 | r4[i4++]);
        }
        else if (43 !== m4 || l3) if (44 !== m4 || l3) {
          if (45 === m4) if (h4) h4 = false, n5 = i4;
          else {
            if (!(A4 = o5.pop())) return Re("TT: ENDF bad stack"), void (t4.hintsValid = false);
            k4 = f3.pop();
            r4 = A4.data, i4 = A4.i, t4.functionsStackDeltas[k4] = s5.length - A4.stackTop;
          }
          else if (137 === m4) (h4 || d4) && (Re("TT: nested IDEFs not allowed"), l3 = true), h4 = true, c5 = i4;
          else if (88 === m4) ++u4;
          else if (27 === m4) d4 = u4;
          else if (89 === m4) d4 === u4 && (d4 = 0), --u4;
          else if (28 === m4) {
            var y4 = s5[s5.length - 1];
            y4 > 0 && (i4 += y4 - 1);
          }
        } else {
          (h4 || d4) && (Re("TT: nested FDEFs not allowed"), l3 = true), h4 = true, c5 = i4;
          var k4 = s5.pop();
          t4.functionsDefined[k4] = { data: r4, i: i4 };
        }
        else if (!h4 && !d4) {
          var k4 = s5[s5.length - 1];
          if (t4.functionsUsed[k4] = true, k4 in t4.functionsStackDeltas) s5.length += t4.functionsStackDeltas[k4];
          else if (k4 in t4.functionsDefined && f3.indexOf(k4) < 0) {
            var A4;
            if (o5.push({ data: r4, i: i4, stackTop: s5.length - 1 }), f3.push(k4), !(A4 = t4.functionsDefined[k4])) return Re("TT: CALL non-existent function"), void (t4.hintsValid = false);
            r4 = A4.data, i4 = A4.i;
          }
        }
        if (!h4 && !d4) {
          var w4 = m4 <= 142 ? p3[m4] : m4 >= 192 && m4 <= 223 ? -1 : m4 >= 224 ? -2 : 0;
          for (m4 >= 113 && m4 <= 117 && (a3 = s5.pop()) == a3 && (w4 = 2 * -a3); w4 < 0 && s5.length > 0; ) s5.pop(), w4++;
          for (; w4 > 0; ) s5.push(NaN), w4--;
        }
      }
      t4.tooComplexToFollowFunctions = l3;
      var x4 = [r4];
      i4 > r4.length && x4.push(new Uint8Array(i4 - r4.length)), c5 > n5 && (Re("TT: complementing a missing function tail"), x4.push(new Uint8Array([34, 45]))), function(e6, t5) {
        if (t5.length > 1) {
          for (var a4 = 0, r5 = 0, i5 = t5.length; r5 < i5; r5++) a4 += t5[r5].length;
          a4 = a4 + 3 & -4;
          var n6 = new Uint8Array(a4), c6 = 0;
          for (r5 = 0, i5 = t5.length; r5 < i5; r5++) n6.set(t5[r5], c6), c6 += t5[r5].length;
          e6.data = n6, e6.length = a4;
        }
      }(e5, x4);
    }
    for (var v3 = ["OS/2", "cmap", "head", "hhea", "hmtx", "maxp", "name", "post", "loca", "glyf", "fpgm", "prep", "cvt ", "CFF "], y3 = function(e5) {
      return { version: a2(e5.getBytes(4)), numTables: r3(e5.getBytes(2)), searchRange: r3(e5.getBytes(2)), entrySelector: r3(e5.getBytes(2)), rangeShift: r3(e5.getBytes(2)) };
    }(n4 = new pr(new Uint8Array(n4.getBytes()))), k3 = y3.numTables, A3 = { "OS/2": null, cmap: null, head: null, hhea: null, hmtx: null, maxp: null, name: null, post: null }, w3 = 0; w3 < k3; w3++) {
      var x3 = s4(n4);
      v3.indexOf(x3.tag) < 0 || 0 !== x3.length && (A3[x3.tag] = x3);
    }
    var S3 = !A3["CFF "];
    if (S3) A3.glyf && A3.loca || Oe('Required "glyf" or "loca" tables are not found');
    else {
      if (!(A3.head && A3.hhea && A3.maxp && A3.post)) {
        var C2 = new pr(A3["CFF "].data), I3 = new Wa(C2, c4);
        return this.convert(e4, I3, c4);
      }
      delete A3.glyf, delete A3.loca, delete A3.fpgm, delete A3.prep, delete A3["cvt "];
    }
    A3.maxp || Oe('Required "maxp" table is not found'), n4.pos = (n4.start || 0) + A3.maxp.offset;
    var B3 = i3(n4.getBytes(4)), T3 = r3(n4.getBytes(2)), L2 = 0;
    B3 >= 65536 && A3.maxp.length >= 22 && (n4.pos += 8, r3(n4.getBytes(2)) > 2 && (A3.maxp.data[14] = 0, A3.maxp.data[15] = 2), n4.pos += 4, L2 = r3(n4.getBytes(2)));
    var F2 = false;
    "CIDFontType2" == c4.type && c4.toUnicode && c4.toUnicode[0] > "\0" && (F2 = true, T3++, A3.maxp.data[4] = T3 >> 8, A3.maxp.data[5] = 255 & T3);
    var P3 = function(e5, t4, a3) {
      var r4 = { functionsDefined: [], functionsUsed: [], functionsStackDeltas: [], tooComplexToFollowFunctions: false, hintsValid: true };
      if (e5 && b3(e5, r4), t4 && b3(t4, r4), e5 && function(e6, t5) {
        if (!e6.tooComplexToFollowFunctions) for (var a4 = 0, r5 = e6.functionsUsed.length; a4 < r5; a4++) {
          if (a4 > t5) return Re("TT: invalid function id: " + a4), void (e6.hintsValid = false);
          if (e6.functionsUsed[a4] && !e6.functionsDefined[a4]) return Re("TT: undefined function: " + a4), void (e6.hintsValid = false);
        }
      }(r4, L2), a3 && 1 & a3.length) {
        var i4 = new Uint8Array(a3.length + 1);
        i4.set(a3.data), a3.data = i4;
      }
      return r4.hintsValid;
    }(A3.fpgm, A3.prep, A3["cvt "]);
    P3 || (delete A3.fpgm, delete A3.prep, delete A3["cvt "]);
    var R2 = Object.keys(A3);
    R2.sort();
    var O2 = { file: "", virtualOffset: 16 * (k3 = R2.length) };
    if (f2(y3.version, O2, k3), function(e5, a3, i4, n5) {
      if (a3) {
        e5.pos = (e5.start ? e5.start : 0) + a3.offset, e5.pos += a3.length - 2;
        var c5 = r3(e5.getBytes(2));
        c5 > n5 && (Pe("The numOfMetrics (" + c5 + ") should not be greater than the numGlyphs (" + n5 + ")"), c5 = n5, a3.data[34] = (65280 & c5) >> 8, a3.data[35] = 255 & c5);
        var s5 = n5 - c5 - (i4.length - 4 * c5 >> 1);
        if (s5 > 0) {
          e5.pos = (e5.start ? e5.start : 0) + i4.offset;
          for (var o5 = "", f3 = 0, l3 = i4.length; f3 < l3; f3++) o5 += String.fromCharCode(e5.getByte());
          for (f3 = 0; f3 < s5; f3++) o5 += "\0\0";
          i4.data = t3(o5);
        }
      } else i4 && (i4.data = null);
    }(n4, A3.hhea, A3.hmtx, T3), A3.head || Oe('Required "head" table is not found'), function(e5, t4, a3) {
      var n5 = e5.data, c5 = i3([n5[0], n5[1], n5[2], n5[3]]);
      c5 >> 16 != 1 && (Pe("Attempting to fix invalid version in head table: " + c5), n5[0] = 0, n5[1] = 1, n5[2] = 0, n5[3] = 0);
      var s5 = r3([n5[50], n5[51]]);
      if (s5 < 0 || s5 > 1) {
        Pe("Attempting to fix invalid indexToLocFormat in head table: " + s5);
        var o5 = t4 + 1;
        a3 === o5 << 1 ? (n5[50] = 0, n5[51] = 0) : a3 === o5 << 2 ? (n5[50] = 0, n5[51] = 1) : Re("Could not fix indexToLocFormat: " + s5);
      }
    }(A3.head, T3, S3 ? A3.loca.length : 0), S3) {
      var M2 = r3([A3.head.data[50], A3.head.data[51]]);
      !function(e5, t4, a3, r4, i4, n5) {
        var c5, s5, f3;
        r4 ? (c5 = 4, s5 = function(e6, t5) {
          return e6[t5] << 24 | e6[t5 + 1] << 16 | e6[t5 + 2] << 8 | e6[t5 + 3];
        }, f3 = function(e6, t5, a4) {
          e6[t5] = a4 >>> 24 & 255, e6[t5 + 1] = a4 >> 16 & 255, e6[t5 + 2] = a4 >> 8 & 255, e6[t5 + 3] = 255 & a4;
        }) : (c5 = 2, s5 = function(e6, t5) {
          return e6[t5] << 9 | e6[t5 + 1] << 1;
        }, f3 = function(e6, t5, a4) {
          e6[t5] = a4 >> 9 & 255, e6[t5 + 1] = a4 >> 1 & 255;
        });
        var l3 = e5.data, h4 = c5 * (1 + a3);
        l3.length !== h4 && ((l3 = new Uint8Array(h4)).set(e5.data.subarray(0, h4)), e5.data = l3);
        var u4 = t4.data, d4 = u4.length, g3 = new Uint8Array(d4), m4 = s5(l3, 0), p4 = 0;
        f3(l3, 0, p4);
        for (var b4 = 0, v4 = c5; b4 < a3; b4++, v4 += c5) {
          var y4 = s5(l3, v4);
          y4 > d4 ? (f3(l3, v4, p4), m4 = y4) : (f3(l3, v4, p4 += o4(u4, m4, y4, g3, p4, i4)), m4 = y4);
        }
        if (0 !== p4) if (n5) {
          var k4 = s5(l3, c5);
          g3.length > k4 + p4 ? t4.data = g3.subarray(0, k4 + p4) : (t4.data = new Uint8Array(k4 + p4), t4.data.set(g3.subarray(0, p4))), t4.data.set(g3.subarray(0, k4), p4), f3(e5.data, l3.length - c5, p4 + k4);
        } else t4.data = g3.subarray(0, p4);
        else {
          var A4 = new Uint8Array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 49, 0]);
          for (b4 = 0, v4 = c5; b4 < a3; b4++, v4 += c5) f3(l3, v4, A4.length);
          t4.data = A4;
        }
      }(A3.loca, A3.glyf, T3, M2, P3, F2);
    }
    if (A3.hhea || Oe('Required "hhea" table is not found'), 0 === A3.hhea.data[10] && 0 === A3.hhea.data[11] && (A3.hhea.data[10] = 255, A3.hhea.data[11] = 255), A3.post) {
      var D2 = function(e5, t4, a3) {
        var c5 = (n4.start ? n4.start : 0) + e5.offset;
        n4.pos = c5;
        var s5, o5 = c5 + e5.length, f3 = i3(n4.getBytes(4));
        n4.getBytes(28);
        var l3 = true;
        switch (f3) {
          case 65536:
            s5 = Ma;
            break;
          case 131072:
            var h4 = r3(n4.getBytes(2));
            if (h4 != a3) {
              l3 = false;
              break;
            }
            for (var u4 = [], d4 = 0; d4 < h4; ++d4) {
              var g3 = r3(n4.getBytes(2));
              if (g3 >= 32768) {
                l3 = false;
                break;
              }
              u4.push(g3);
            }
            if (!l3) break;
            for (var m4 = []; n4.pos < o5; ) {
              var p4 = n4.getByte(), b4 = "";
              for (d4 = 0; d4 < p4; ++d4) b4 += String.fromCharCode(n4.getByte());
              m4.push(b4);
            }
            for (s5 = [], d4 = 0; d4 < h4; ++d4) {
              var v4 = u4[d4];
              v4 < 258 ? s5.push(Ma[v4]) : s5.push(m4[v4 - 258]);
            }
            break;
          case 196608:
            break;
          default:
            Re("Unknown/unsupported post table version " + f3), l3 = false;
        }
        return t4.glyphNames = s5, l3;
      }(A3.post, c4, T3);
      D2 || (A3.post = null);
    }
    if ("CIDFontType2" == c4.type) {
      A3.cmap || (A3.cmap = { tag: "cmap", data: null });
      var q2 = c4.cidToGidMap || [], E3 = [0];
      if (q2.length > 0) {
        for (var N2 = q2.length - 1; N2 >= 0; N2--) {
          var j3 = q2[N2];
          j3 && (E3[j3] = N2);
        }
        var U2 = q2.length;
        for (w3 = 1; w3 < T3; w3++) E3[w3] || (E3[w3] = U2++);
      } else {
        for (w3 = 1; w3 < T3; w3++) E3[w3] = w3;
        F2 && (E3[T3 - 1] = 0);
      }
      $4 = [], ee2 = [];
      var z4 = [], H2 = [], G2 = this.cidToFontChar || this.toFontChar;
      for (w3 = 1; w3 < T3; w3++) {
        !(V2 = G2[W3 = E3[w3]]) || "number" != typeof V2 || qa(V2) || V2 in z4 ? H2.push(w3) : (z4[V2] = true, $4.push({ unicode: V2, code: W3 }), ee2.push(w3));
      }
      if (!this.cidToFontChar) for (var _3 = va, X2 = (N2 = 0, H2.length); N2 < X2; N2++) {
        for (var W3 = E3[w3 = H2[N2]]; _3 in z4; ) _3++;
        if (_3 >= 63744) break;
        var V2 = _3++;
        this.toFontChar[W3] = V2, z4[V2] = true, $4.push({ unicode: V2, code: W3 }), ee2.push(w3);
      }
    } else {
      this.useToFontChar = true;
      var Y2 = function(e5, t4, a3, n5) {
        var c5 = (t4.start ? t4.start : 0) + e5.offset;
        t4.pos = c5, r3(t4.getBytes(2));
        for (var s5, o5, f3 = r3(t4.getBytes(2)), l3 = 0; l3 < f3; l3++) {
          var h4 = r3(t4.getBytes(2)), u4 = r3(t4.getBytes(2)), d4 = i3(t4.getBytes(4)), g3 = false, m4 = false;
          if (n5 && 3 === h4 && 0 === u4 ? (g3 = true, m4 = true, o5 = true) : a3 && 3 === h4 && 1 === u4 ? (g3 = true, m4 = true, o5 = true, n5 = false) : 1 !== h4 || 0 !== u4 || o5 ? s5 || (g3 = true) : (g3 = true, o5 = true), g3 && (s5 = { platformId: h4, encodingId: u4, offset: d4, isSymbolicFont: n5 }), m4) break;
        }
        if (s5) {
          o5 || (Re("Did not find a cmap of suitable format. Interpreting (" + s5.platformId + ", " + s5.encodingId + ") as (3, 1) table"), s5.platformId = 3, s5.encodingId = 1), t4.pos = c5 + s5.offset;
          var p4 = r3(t4.getBytes(2)), b4 = (r3(t4.getBytes(2)), r3(t4.getBytes(2)), false), v4 = [];
          if (0 === p4) {
            for (var y4 = 0; y4 < 256; y4++) {
              var k4 = t4.getByte();
              k4 && v4.push({ charcode: y4, glyphId: k4 });
            }
            b4 = true;
          } else if (4 === p4) {
            var A4 = r3(t4.getBytes(2)) >> 1;
            t4.getBytes(6);
            var w4, x4 = [];
            for (w4 = 0; w4 < A4; w4++) x4.push({ end: r3(t4.getBytes(2)) });
            for (t4.getBytes(2), w4 = 0; w4 < A4; w4++) x4[w4].start = r3(t4.getBytes(2));
            for (w4 = 0; w4 < A4; w4++) x4[w4].delta = r3(t4.getBytes(2));
            var S4 = 0;
            for (w4 = 0; w4 < A4; w4++) {
              var C3 = x4[w4], I4 = r3(t4.getBytes(2));
              if (I4) {
                var B4 = (I4 >> 1) - (A4 - w4);
                C3.offsetIndex = B4, S4 = Math.max(S4, B4 + C3.end - C3.start + 1);
              } else C3.offsetIndex = -1;
            }
            var T4 = [];
            for (y4 = 0; y4 < S4; y4++) T4.push(r3(t4.getBytes(2)));
            for (w4 = 0; w4 < A4; w4++) {
              c5 = (C3 = x4[w4]).start;
              var L3 = C3.end, F3 = C3.delta;
              for (B4 = C3.offsetIndex, y4 = c5; y4 <= L3; y4++) 65535 != y4 && 0 != (O3 = (O3 = B4 < 0 ? y4 : T4[B4 + y4 - c5]) + F3 & 65535) && v4.push({ charcode: y4, glyphId: O3 });
            }
          } else if (6 == p4) {
            var P4 = r3(t4.getBytes(2)), R3 = r3(t4.getBytes(2));
            for (y4 = 0; y4 < R3; y4++) {
              var O3 = r3(t4.getBytes(2)), M3 = P4 + y4;
              v4.push({ charcode: M3, glyphId: O3 });
            }
          } else Oe("cmap table has unsupported format: " + p4);
          for (v4.sort(function(e6, t5) {
            return e6.charcode - t5.charcode;
          }), l3 = 1; l3 < v4.length; l3++) v4[l3 - 1].charcode === v4[l3].charcode && (v4.splice(l3, 1), l3--);
          return { platformId: s5.platformId, encodingId: s5.encodingId, isSymbolicFont: s5.isSymbolicFont, mappings: v4, hasShortCmap: b4 };
        }
        Oe("Could not find a cmap table");
      }(A3.cmap, n4, this.hasEncoding, this.isSymbolicFont);
      this.isSymbolicFont = Y2.isSymbolicFont;
      var J2 = Y2.platformId, K3 = Y2.encodingId, Z2 = Y2.mappings, Q2 = Z2.length, $4 = [], ee2 = [];
      for (w3 = 0; w3 < Q2; ++w3) {
        var te2 = Z2[w3];
        (V2 = m3(oe2 = te2.charcode, this.isSymbolicFont, J2, K3)) && ($4.push({ code: oe2, unicode: V2 }), ee2.push(te2.glyphId));
      }
      var ae2 = Y2.hasShortCmap;
      G2 = this.toFontChar;
      if (ae2 && ee2.length == T3) {
        w3 = 0;
        for (var re2 = ee2.length; w3 < re2; w3++) ee2[w3] = w3;
      }
      var ie2 = [];
      if (this.isSymbolicFont) for (w3 = 0, re2 = $4.length; w3 < re2; w3++) {
        var ne2 = $4[w3];
        ie2[255 & ne2.code] = ne2.unicode;
      }
      else for (var ce2 = c4.baseEncoding, se2 = c4.differences, oe2 = (Y2.glyphCodeMapping, 0); oe2 < ce2.length; ++oe2) if (ce2.hasOwnProperty(oe2)) {
        var fe2 = ce2[oe2];
        oe2 in se2 && (fe2 = se2[oe2]), fe2 || (fe2 = Aa.StandardEncoding[oe2]);
        V2 = or[fe2 = fe2 || ".notdef"];
        ie2[oe2] = V2;
      }
      this.toFontChar = G2 = ie2, function(e5, t4, a3) {
        var r4 = a3.glyphNames;
        if (r4) {
          for (var i4 = e5.length, n5 = {}, c5 = [], s5 = 0; s5 < i4; ++s5) {
            var o5 = r4[t4[s5]];
            if (o5) {
              var f3 = e5[s5].unicode;
              n5[o5] = f3, c5[e5[s5].code] = o5;
            }
          }
          a3.glyphNameMap = n5, a3.overridableEncoding && (a3.baseEncoding = c5);
        } else a3.glyphNameMap = {};
      }($4, ee2, c4), this.glyphNameMap = c4.glyphNameMap;
    }
    0 === $4.length && ($4.push({ unicode: 61440, code: 61440, glyph: ".notdef" }), ee2.push(0)), A3.cmap.data = h3($4, ee2);
    var le2 = [];
    for (w3 = 0, re2 = $4.length; w3 < re2; w3++) le2[$4[w3].unicode] = true;
    if (this.unicodeIsEnabled = le2, !A3["OS/2"] || !function(e5) {
      var t4 = new pr(e5.data), a3 = r3(t4.getBytes(2));
      t4.getBytes(60);
      var i4 = r3(t4.getBytes(2));
      return !(a3 < 4 && 768 & i4 || r3(t4.getBytes(2)) > r3(t4.getBytes(2)) || (t4.getBytes(6), 0 === r3(t4.getBytes(2)) || (e5.data[8] = e5.data[9] = 0, 0)));
    }(A3["OS/2"])) {
      var he2 = { unitsPerEm: r3([A3.head.data[18], A3.head.data[19]]), yMax: r3([A3.head.data[42], A3.head.data[43]]), yMin: r3([A3.head.data[38], A3.head.data[39]]) - 65536, ascent: r3([A3.hhea.data[4], A3.hhea.data[5]]), descent: r3([A3.hhea.data[6], A3.hhea.data[7]]) - 65536 };
      A3["OS/2"] = { tag: "OS/2", data: t3(u3(c4, $4, he2)) };
    }
    if (A3.post || (A3.post = { tag: "post", data: t3(d3(c4)) }), !S3) try {
      C2 = new pr(A3["CFF "].data), I3 = new Va(C2, c4).parse();
      var ue2 = new cr(I3);
      A3["CFF "].data = ue2.compile();
    } catch (e5) {
      Re("Failed to compile font " + c4.loadedName);
    }
    if (A3.name) {
      var de2 = function(e5) {
        var t4 = (n4.start ? n4.start : 0) + e5.offset;
        n4.pos = t4;
        var a3 = [[], []], i4 = e5.length, c5 = t4 + i4;
        if (0 !== r3(n4.getBytes(2)) || i4 < 6) return a3;
        for (var s5 = r3(n4.getBytes(2)), o5 = r3(n4.getBytes(2)), f3 = [], l3 = 0; l3 < s5 && n4.pos + 12 <= c5; l3++) {
          var h4 = { platform: r3(n4.getBytes(2)), encoding: r3(n4.getBytes(2)), language: r3(n4.getBytes(2)), name: r3(n4.getBytes(2)), length: r3(n4.getBytes(2)), offset: r3(n4.getBytes(2)) };
          (1 == h4.platform && 0 === h4.encoding && 0 === h4.language || 3 == h4.platform && 1 == h4.encoding && 1033 == h4.language) && f3.push(h4);
        }
        l3 = 0;
        for (var u4 = f3.length; l3 < u4; l3++) {
          var d4 = f3[l3], g3 = t4 + o5 + d4.offset;
          if (!(g3 + d4.length > c5)) {
            n4.pos = g3;
            var m4 = d4.name;
            if (d4.encoding, d4.encoding) {
              for (var p4 = "", b4 = 0, v4 = d4.length; b4 < v4; b4 += 2) p4 += String.fromCharCode(r3(n4.getBytes(2)));
              a3[1][m4] = p4;
            } else a3[0][m4] = Je(n4.getBytes(d4.length));
          }
        }
        return a3;
      }(A3.name);
      A3.name.data = t3(g2(e4, de2));
    } else A3.name = { tag: "name", data: t3(g2(this.name)) };
    for (w3 = 0; w3 < k3; w3++) {
      var ge2 = [];
      for (N2 = 0, X2 = (me2 = (x3 = A3[R2[w3]]).data).length; N2 < X2; N2++) ge2.push(me2[N2]);
      l2(O2, x3.tag, ge2);
    }
    for (w3 = 0; w3 < k3; w3++) {
      var me2 = (x3 = A3[R2[w3]]).data;
      for (O2.file += a2(me2); 3 & O2.file.length; ) O2.file += String.fromCharCode(0);
    }
    return t3(O2.file);
  }, convert: function(e4, r4, i4) {
    var n4 = { file: "", virtualOffset: 144 };
    f2("OTTO", n4, 9);
    var o4 = r4.charstrings;
    i4.fixedPitch = function(e5) {
      for (var t4 = 0, a3 = e5.length - 1; t4 < a3; t4++) if (e5[t4] != e5[t4 + 1]) return false;
      return true;
    }(o4);
    for (var m4 = {}, p3 = 0; p3 < o4.length; ++p3) {
      m4[(y3 = o4[p3]).glyph] = y3.unicode;
    }
    this.glyphNameMap = m4;
    r4.seacs;
    if (i4.overridableEncoding && ("Type1C" == i4.subtype || "CIDFontType0C" == i4.subtype)) {
      var b3 = [];
      for (p3 = 0; p3 < o4.length; ++p3) {
        b3[(y3 = o4[p3]).code] = y3.glyph;
      }
      i4.baseEncoding = b3;
    }
    if ("CIDFontType0C" == i4.subtype) {
      var v3 = [];
      for (p3 = 0; p3 < o4.length; ++p3) {
        var y3;
        v3[(y3 = o4[p3]).code] = y3.unicode;
      }
      this.toFontChar = v3;
    }
    var k3 = 1 / (i4.fontMatrix || Ae)[0], A3 = { "CFF ": r4.data, "OS/2": t3(u3(i4, o4)), cmap: h3(o4.slice(), "glyphIds" in r4 ? r4.glyphIds : null), head: t3("\0\0\0\0\0\0\0\0\0\0_<õ\0\0" + s3(k3) + "\0\0\0\0\v~'\0\0\0\0\v~'\0\0" + s3(i4.descent) + "ÿ" + s3(i4.ascent) + c3(i4.italicAngle ? 2 : 0) + "\0\0\0\0\0\0\0"), hhea: t3("\0\0\0" + s3(i4.ascent) + s3(i4.descent) + "\0\0ÿÿ\0\0\0\0\0\0" + s3(i4.capHeight) + s3(Math.tan(i4.italicAngle) * i4.xHeight) + "\0\0\0\0\0\0\0\0\0\0\0\0" + c3(o4.length + 1)), hmtx: function() {
      for (var e5 = "\0\0\0\0", a3 = 0, r5 = o4.length; a3 < r5; a3++) {
        var i5 = o4[a3];
        e5 += c3("width" in i5 ? i5.width : 0) + c3(0);
      }
      return t3(e5);
    }(), maxp: t3("\0\0P\0" + c3(o4.length + 1)), name: t3(g2(e4)), post: t3(d3(i4)) };
    for (var w3 in A3) l2(n4, w3, A3[w3]);
    for (var w3 in A3) {
      var x3 = A3[w3];
      n4.file += a2(x3);
    }
    return t3(n4.file);
  }, buildToFontChar: function(e4) {
    for (var t4 = [], a3 = va, r4 = 0, i4 = e4.length; r4 < i4; r4++) {
      var n4 = e4[r4], c4 = "object" == typeof n4 ? a3++ : n4;
      void 0 !== n4 && (nt(c4) && 1 === c4.length && (c4 = c4.charCodeAt(0)), t4[r4] = c4);
    }
    return t4;
  }, rebuildToUnicode: function(e4) {
    var t4 = e4.firstChar, a3 = e4.lastChar, r4 = [], i4 = this.toUnicode || this.cidToUnicode;
    if (i4) for (var n4 = 0 === i4.length, c4 = t4, s4 = a3; c4 <= s4; c4++) r4[c4] = n4 ? String.fromCharCode(c4) : i4[c4];
    else for (c4 = t4, s4 = a3; c4 <= s4; c4++) {
      var o4 = e4.differences[c4];
      o4 || (o4 = e4.baseEncoding[c4]), o4 && o4 in or && (r4[c4] = String.fromCharCode(or[o4]));
    }
    this.toUnicode = r4;
  }, loadCidToUnicode: function(e4) {
    if (e4.cidSystemInfo) {
      var t4 = [], a3 = [];
      this.cidToUnicode = t4, this.unicodeToCID = a3;
      var r4 = e4.cidEncoding;
      if (e4.toUnicode) r4 && 0 !== r4.indexOf("Identity-") && Me("Need to create a reverse mapping from 'ToUnicode' CMap");
      else {
        var i4, n4 = e4.cidSystemInfo;
        if (n4 && (i4 = Vr[n4.registry + "-" + n4.ordering]), i4) {
          var c4, s4, o4, f3, l3 = Ba[r4], h4 = 1;
          for (c4 = 0, f3 = i4.length; c4 < f3; ++c4) {
            var u4 = i4[c4];
            if (ft(u4)) {
              var d4 = u4.length;
              for (s4 = 0; s4 < d4; s4++) t4[h4] = o4 = u4[s4], a3[o4] && !l3 || (a3[o4] = h4);
              h4++;
            } else if ("object" == typeof u4) {
              var g3 = u4.f;
              if (g3) for (o4 = u4.c, s4 = 0; s4 < g3; ++s4) t4[h4] = o4, a3[o4] && !l3 || (a3[o4] = h4), h4++, o4++;
              else h4 += u4.s;
            } else u4 ? (t4[h4] = u4, a3[u4] && !l3 || (a3[u4] = h4), h4++) : h4++;
          }
          r4 && (0 !== r4.indexOf("Identity-") ? (this.cidToUnicode = [], "CIDFontType2" == e4.type && (this.cidToFontChar = t4)) : this.unicodeToCID = []);
        }
      }
    }
  }, get spaceWidth() {
    if ("_shadowWidth" in this) return this._shadowWidth;
    for (var e4, t4 = ["space", "minus", "one", "i"], a3 = 0, r4 = t4.length; a3 < r4; a3++) {
      var i4 = t4[a3];
      if (i4 in this.widths) {
        e4 = this.widths[i4];
        break;
      }
      var n4 = or[i4], c4 = 0;
      if (this.composite && (c4 = this.unicodeToCID[n4]), !c4 && "toUnicode" in this && (c4 = this.toUnicode.indexOf(n4)), c4 <= 0 && (c4 = n4), e4 = this.widths[c4]) break;
    }
    return e4 = e4 || this.defaultWidth, this._shadowWidth = e4, e4;
  }, charToGlyph: function(e4) {
    var t4, a3, r4, i4 = this.widths[e4], n4 = this.vmetrics && this.vmetrics[e4];
    switch (this.type) {
      case "CIDFontType0":
        var c4 = this.unicodeToCID[e4] || e4;
        if (this.unicodeToCID.length > 0 && (i4 = this.widths[c4], n4 = this.vmetrics && this.vmetrics[c4]), this.noUnicodeAdaptation) {
          t4 = this.toFontChar[e4] || e4;
          break;
        }
        t4 = this.toFontChar[c4] || c4;
        break;
      case "CIDFontType2":
        if (this.unicodeToCID.length > 0) {
          c4 = this.unicodeToCID[e4] || e4;
          i4 = this.widths[c4], n4 = this.vmetrics && this.vmetrics[c4], t4 = e4;
          break;
        }
        t4 = this.toFontChar[e4] || e4;
        break;
      case "MMType1":
      case "Type1":
        var s4 = this.differences[e4] || this.encoding[e4];
        if (it(i4) || (i4 = this.widths[s4]), this.noUnicodeAdaptation) {
          t4 = function(e5) {
            switch (e5) {
              case 63721:
              case 63193:
                return 169;
              default:
                return e5;
            }
          }(or[s4] || e4);
          break;
        }
        t4 = this.glyphNameMap[s4] || or[s4] || e4;
        break;
      case "Type3":
        s4 = this.differences[e4] || this.encoding[e4];
        a3 = this.charProcOperatorList[s4], t4 = e4;
        break;
      case "TrueType":
        if (this.useToFontChar) {
          t4 = this.toFontChar[e4] || e4;
          break;
        }
        if ((s4 = this.differences[e4] || this.encoding[e4]) || (s4 = Aa.StandardEncoding[e4]), it(i4) || (i4 = this.widths[s4]), this.noUnicodeAdaptation) {
          t4 = or[s4] || e4;
          break;
        }
        if (!this.hasEncoding || this.isSymbolicFont) {
          t4 = this.useToFontChar ? this.toFontChar[e4] : e4;
          break;
        }
        t4 = s4 in this.glyphNameMap ? this.glyphNameMap[s4] : or[s4];
        break;
      default:
        Re("Unsupported font type: " + this.type);
    }
    var o4 = "toUnicode" in this && this.toUnicode[e4] || e4;
    "number" == typeof o4 && (o4 = String.fromCharCode(o4)), i4 = it(i4) ? i4 : this.defaultWidth, r4 = !!this.unicodeIsEnabled && !this.unicodeIsEnabled[t4];
    var f3 = null;
    if (this.seacMap && this.seacMap[t4]) {
      var l3 = this.seacMap[t4];
      t4 = l3.baseUnicode, f3 = { fontChar: String.fromCharCode(l3.accentUnicode), offset: l3.accentOffset };
    }
    return { fontChar: String.fromCharCode(t4), unicode: o4, accent: f3, width: i4, vmetric: n4, disabled: r4, operatorList: a3 };
  }, charsToGlyphs: function(e4) {
    var t4, a3 = this.charsCache;
    if (a3 && (t4 = a3[e4])) return t4;
    a3 || (a3 = this.charsCache = /* @__PURE__ */ Object.create(null)), t4 = [];
    var r4, i4 = e4, n4 = this.cidEncoding;
    if (n4 && ((r4 = Ia[n4]) ? e4 = r4(e4) : 0 !== n4.indexOf("Uni") && 0 !== n4.indexOf("Identity-") && Re("Unsupported CMap: " + n4)), !r4 && this.cmap) for (var c4 = 0; c4 < e4.length; ) {
      var s4 = this.cmap.readCharCode(e4, c4), o4 = s4[0], f3 = s4[1];
      c4 += f3;
      var l3 = this.charToGlyph(o4);
      t4.push(l3), 1 === f3 && 32 === e4.charCodeAt(c4 - 1) && t4.push(null);
    }
    else {
      c4 = 0;
      for (var h4 = e4.length; c4 < h4; ++c4) {
        o4 = e4.charCodeAt(c4), l3 = this.charToGlyph(o4);
        t4.push(l3), 32 == o4 && t4.push(null);
      }
    }
    return a3[i4] = t4;
  } }, e3;
}();
var za = function() {
  function e3(e4) {
    this.error = e4;
  }
  return e3.prototype = { charsToGlyphs: function() {
    return [];
  }, exportData: function() {
    return { error: this.error };
  } }, e3;
}();
var Ha = function() {
  var e3 = [4], t3 = [5], a2 = [6], r3 = [7], i3 = [8], n3 = [12, 35], c3 = [14], s3 = [21], o3 = [22], f2 = [30], l2 = [31];
  function h3() {
    this.width = 0, this.lsb = 0, this.flexing = false, this.output = [], this.stack = [];
  }
  return h3.prototype = { convert: function(h4, u3) {
    for (var d3 = h4.length, g2 = false, m3 = 0; m3 < d3; m3++) {
      var p3 = h4[m3];
      if (p3 < 32) {
        switch (12 === p3 && (p3 = (p3 << 8) + h4[++m3]), p3) {
          case 1:
          case 3:
          case 9:
          case 3072:
          case 3073:
          case 3074:
          case 3105:
            this.stack = [];
            break;
          case 4:
            if (this.flexing) {
              if (this.stack.length < 1) {
                g2 = true;
                break;
              }
              var b3 = this.stack.pop();
              this.stack.push(0, b3);
              break;
            }
            g2 = this.executeCommand(1, e3);
            break;
          case 5:
            g2 = this.executeCommand(2, t3);
            break;
          case 6:
            g2 = this.executeCommand(1, a2);
            break;
          case 7:
            g2 = this.executeCommand(1, r3);
            break;
          case 8:
            g2 = this.executeCommand(6, i3);
            break;
          case 10:
            if (this.stack.length < 1) {
              g2 = true;
              break;
            }
            var v3 = this.stack.pop();
            g2 = this.convert(u3[v3], u3);
            break;
          case 11:
            return g2;
          case 13:
            if (this.stack.length < 2) {
              g2 = true;
              break;
            }
            var y3 = this.stack.pop(), k3 = this.stack.pop();
            this.lsb = k3, this.width = y3, this.stack.push(k3), g2 = this.executeCommand(1, o3);
            break;
          case 14:
            this.output.push(c3[0]);
            break;
          case 21:
            if (this.flexing) break;
            g2 = this.executeCommand(2, s3);
            break;
          case 22:
            if (this.flexing) {
              this.stack.push(0);
              break;
            }
            g2 = this.executeCommand(1, o3);
            break;
          case 30:
            g2 = this.executeCommand(4, f2);
            break;
          case 31:
            g2 = this.executeCommand(4, l2);
            break;
          case 3078:
            g2 = this.executeCommand(4, c3);
            break;
          case 3079:
            if (this.stack.length < 4) {
              g2 = true;
              break;
            }
            this.stack.pop(), y3 = this.stack.pop();
            var A3 = this.stack.pop();
            k3 = this.stack.pop();
            this.lsb = k3, this.width = y3, this.stack.push(k3, A3), g2 = this.executeCommand(2, s3);
            break;
          case 3084:
            if (this.stack.length < 2) {
              g2 = true;
              break;
            }
            var w3 = this.stack.pop(), x3 = this.stack.pop();
            this.stack.push(x3 / w3);
            break;
          case 3088:
            if (this.stack.length < 2) {
              g2 = true;
              break;
            }
            v3 = this.stack.pop();
            var S3 = this.stack.pop();
            if (0 === v3 && 3 === S3) {
              var C2 = this.stack.splice(this.stack.length - 17, 17);
              this.stack.push(C2[2] + C2[0], C2[3] + C2[1], C2[4], C2[5], C2[6], C2[7], C2[8], C2[9], C2[10], C2[11], C2[12], C2[13], C2[14]), g2 = this.executeCommand(13, n3, true), this.flexing = false, this.stack.push(C2[15], C2[16]);
            } else 1 === v3 && 0 === S3 && (this.flexing = true);
            break;
          case 3089:
            break;
          default:
            Re('Unknown type 1 charstring command of "' + p3 + '"');
        }
        if (g2) break;
      } else p3 <= 246 ? p3 -= 139 : p3 = p3 <= 250 ? 256 * (p3 - 247) + h4[++m3] + 108 : p3 <= 254 ? -256 * (p3 - 251) - h4[++m3] - 108 : (255 & h4[++m3]) << 24 | (255 & h4[++m3]) << 16 | (255 & h4[++m3]) << 8 | 255 & h4[++m3], this.stack.push(p3);
    }
    return g2;
  }, executeCommand: function(e4, t4, a3) {
    var r4 = this.stack.length;
    if (e4 > r4) return true;
    for (var i4 = r4 - e4, n4 = i4; n4 < r4; n4++) {
      var c4 = this.stack[n4];
      c4 === (0 | c4) ? this.output.push(28, c4 >> 8 & 255, 255 & c4) : (c4 = 65536 * c4 | 0, this.output.push(255, c4 >> 24 & 255, c4 >> 16 & 255, c4 >> 8 & 255, 255 & c4));
    }
    return this.output.push.apply(this.output, t4), a3 ? this.stack.splice(i4, e4) : this.stack = [], false;
  } }, h3;
}();
var Ga = function() {
  function e3(e4, t4, a3) {
    for (var r3 = t4, i3 = [], n3 = "", c3 = e4.length, s3 = 0; s3 < c3; s3++) n3 = e4[s3], i3[s3] = n3 ^ r3 >> 8, r3 = 52845 * (n3 + r3) + 22719 & 65535;
    return i3.slice(a3);
  }
  function t3(e4) {
    return 47 === e4 || 91 === e4 || 93 === e4 || 123 === e4 || 125 === e4 || 40 === e4 || 41 === e4;
  }
  function a2(t4, a3) {
    a3 && (t4 = new pr(e3(t4.getBytes(), 55665, 4))), this.stream = t4, this.nextChar();
  }
  return a2.prototype = { readNumberArray: function() {
    this.getToken();
    for (var e4 = []; ; ) {
      var t4 = this.getToken();
      if (null === t4 || "]" === t4 || "}" === t4) break;
      e4.push(parseFloat(t4 || 0));
    }
    return e4;
  }, readNumber: function() {
    var e4 = this.getToken();
    return parseFloat(e4 || 0);
  }, readInt: function() {
    var e4 = this.getToken();
    return 0 | parseInt(e4 || 0, 10);
  }, readBoolean: function() {
    return "true" === this.getToken() ? 1 : 0;
  }, nextChar: function() {
    return this.currentChar = this.stream.getByte();
  }, getToken: function() {
    for (var e4 = false, a3 = this.currentChar; ; ) {
      if (-1 === a3) return null;
      if (e4) 10 !== a3 && 13 !== a3 || (e4 = false);
      else if (37 === a3) e4 = true;
      else if (!gr.isSpace(a3)) break;
      a3 = this.nextChar();
    }
    if (t3(a3)) return this.nextChar(), String.fromCharCode(a3);
    var r3 = "";
    do {
      r3 += String.fromCharCode(a3), a3 = this.nextChar();
    } while (a3 >= 0 && !gr.isSpace(a3) && !t3(a3));
    return r3;
  }, extractFontProgram: function() {
    for (var t4, a3 = this.stream, r3 = [], i3 = [], n3 = { subrs: [], charstrings: [], properties: { privateData: { lenIV: 4 } } }; null !== (t4 = this.getToken()); ) if ("/" === t4) switch (t4 = this.getToken()) {
      case "CharStrings":
        for (this.getToken(), this.getToken(), this.getToken(), this.getToken(); null !== (t4 = this.getToken()) && "end" !== t4; ) if ("/" === t4) {
          var c3 = this.getToken(), s3 = this.readInt();
          this.getToken();
          var o3 = a3.makeSubStream(a3.pos, s3), f2 = n3.properties.privateData.lenIV, l2 = e3(o3.getBytes(), 4330, f2);
          a3.skip(s3), this.nextChar(), "noaccess" === (t4 = this.getToken()) && this.getToken(), i3.push({ glyph: c3, encoded: l2 });
        }
        break;
      case "Subrs":
        this.readInt();
        for (this.getToken(); "dup" === (t4 = this.getToken()); ) {
          var h3 = this.readInt();
          s3 = this.readInt();
          this.getToken();
          o3 = a3.makeSubStream(a3.pos, s3), f2 = n3.properties.privateData.lenIV, l2 = e3(o3.getBytes(), 4330, f2);
          a3.skip(s3), this.nextChar(), "noaccess" === (t4 = this.getToken()) && this.getToken(), r3[h3] = l2;
        }
        break;
      case "BlueValues":
      case "OtherBlues":
      case "FamilyBlues":
      case "FamilyOtherBlues":
        var u3 = this.readNumberArray();
        u3.length > 0 && u3.length, 0;
        break;
      case "StemSnapH":
      case "StemSnapV":
        n3.properties.privateData[t4] = this.readNumberArray();
        break;
      case "StdHW":
      case "StdVW":
        n3.properties.privateData[t4] = this.readNumberArray()[0];
        break;
      case "BlueShift":
      case "lenIV":
      case "BlueFuzz":
      case "BlueScale":
      case "LanguageGroup":
      case "ExpansionFactor":
        n3.properties.privateData[t4] = this.readNumber();
        break;
      case "ForceBold":
        n3.properties.privateData[t4] = this.readBoolean();
    }
    for (var d3 = 0; d3 < i3.length; d3++) {
      c3 = i3[d3].glyph, l2 = i3[d3].encoded;
      var g2 = new Ha(), m3 = g2.convert(l2, r3), p3 = g2.output;
      m3 && (p3 = [14]), n3.charstrings.push({ glyph: c3, data: p3, seac: g2.seac, lsb: g2.lsb, width: g2.width });
    }
    return n3;
  }, extractFontHeader: function(e4) {
    for (; null !== (c3 = this.getToken()); ) if ("/" === c3) switch (c3 = this.getToken()) {
      case "FontMatrix":
        var t4 = this.readNumberArray();
        e4.fontMatrix = t4;
        break;
      case "Encoding":
        var a3, r3 = this.getToken();
        if (/^\d+$/.test(r3)) {
          a3 = [];
          var i3 = 0 | parseInt(r3, 10);
          this.getToken();
          for (var n3 = 0; n3 < i3; n3++) {
            for (var c3 = this.getToken(); "dup" !== c3 && "def" !== c3; ) if (null === (c3 = this.getToken())) return;
            if ("def" === c3) break;
            var s3 = this.readInt();
            this.getToken();
            var o3 = this.getToken();
            a3[s3] = o3, this.getToken();
          }
        } else a3 = Aa[r3];
        if (e4.overridableEncoding && a3) {
          e4.baseEncoding = a3;
          break;
        }
        break;
      case "FontBBox":
        var f2 = this.readNumberArray();
        e4.ascent = f2[3], e4.descent = f2[1], e4.ascentScaled = true;
    }
  } }, a2;
}();
var _a = [".notdef", "space", "exclam", "quotedbl", "numbersign", "dollar", "percent", "ampersand", "quoteright", "parenleft", "parenright", "asterisk", "plus", "comma", "hyphen", "period", "slash", "zero", "one", "two", "three", "four", "five", "six", "seven", "eight", "nine", "colon", "semicolon", "less", "equal", "greater", "question", "at", "A", "B", "C", "D", "E", "F", "G", "H", "I", "J", "K", "L", "M", "N", "O", "P", "Q", "R", "S", "T", "U", "V", "W", "X", "Y", "Z", "bracketleft", "backslash", "bracketright", "asciicircum", "underscore", "quoteleft", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z", "braceleft", "bar", "braceright", "asciitilde", "exclamdown", "cent", "sterling", "fraction", "yen", "florin", "section", "currency", "quotesingle", "quotedblleft", "guillemotleft", "guilsinglleft", "guilsinglright", "fi", "fl", "endash", "dagger", "daggerdbl", "periodcentered", "paragraph", "bullet", "quotesinglbase", "quotedblbase", "quotedblright", "guillemotright", "ellipsis", "perthousand", "questiondown", "grave", "acute", "circumflex", "tilde", "macron", "breve", "dotaccent", "dieresis", "ring", "cedilla", "hungarumlaut", "ogonek", "caron", "emdash", "AE", "ordfeminine", "Lslash", "Oslash", "OE", "ordmasculine", "ae", "dotlessi", "lslash", "oslash", "oe", "germandbls", "onesuperior", "logicalnot", "mu", "trademark", "Eth", "onehalf", "plusminus", "Thorn", "onequarter", "divide", "brokenbar", "degree", "thorn", "threequarters", "twosuperior", "registered", "minus", "eth", "multiply", "threesuperior", "copyright", "Aacute", "Acircumflex", "Adieresis", "Agrave", "Aring", "Atilde", "Ccedilla", "Eacute", "Ecircumflex", "Edieresis", "Egrave", "Iacute", "Icircumflex", "Idieresis", "Igrave", "Ntilde", "Oacute", "Ocircumflex", "Odieresis", "Ograve", "Otilde", "Scaron", "Uacute", "Ucircumflex", "Udieresis", "Ugrave", "Yacute", "Ydieresis", "Zcaron", "aacute", "acircumflex", "adieresis", "agrave", "aring", "atilde", "ccedilla", "eacute", "ecircumflex", "edieresis", "egrave", "iacute", "icircumflex", "idieresis", "igrave", "ntilde", "oacute", "ocircumflex", "odieresis", "ograve", "otilde", "scaron", "uacute", "ucircumflex", "udieresis", "ugrave", "yacute", "ydieresis", "zcaron", "exclamsmall", "Hungarumlautsmall", "dollaroldstyle", "dollarsuperior", "ampersandsmall", "Acutesmall", "parenleftsuperior", "parenrightsuperior", "266 ff", "onedotenleader", "zerooldstyle", "oneoldstyle", "twooldstyle", "threeoldstyle", "fouroldstyle", "fiveoldstyle", "sixoldstyle", "sevenoldstyle", "eightoldstyle", "nineoldstyle", "commasuperior", "threequartersemdash", "periodsuperior", "questionsmall", "asuperior", "bsuperior", "centsuperior", "dsuperior", "esuperior", "isuperior", "lsuperior", "msuperior", "nsuperior", "osuperior", "rsuperior", "ssuperior", "tsuperior", "ff", "ffi", "ffl", "parenleftinferior", "parenrightinferior", "Circumflexsmall", "hyphensuperior", "Gravesmall", "Asmall", "Bsmall", "Csmall", "Dsmall", "Esmall", "Fsmall", "Gsmall", "Hsmall", "Ismall", "Jsmall", "Ksmall", "Lsmall", "Msmall", "Nsmall", "Osmall", "Psmall", "Qsmall", "Rsmall", "Ssmall", "Tsmall", "Usmall", "Vsmall", "Wsmall", "Xsmall", "Ysmall", "Zsmall", "colonmonetary", "onefitted", "rupiah", "Tildesmall", "exclamdownsmall", "centoldstyle", "Lslashsmall", "Scaronsmall", "Zcaronsmall", "Dieresissmall", "Brevesmall", "Caronsmall", "Dotaccentsmall", "Macronsmall", "figuredash", "hypheninferior", "Ogoneksmall", "Ringsmall", "Cedillasmall", "questiondownsmall", "oneeighth", "threeeighths", "fiveeighths", "seveneighths", "onethird", "twothirds", "zerosuperior", "foursuperior", "fivesuperior", "sixsuperior", "sevensuperior", "eightsuperior", "ninesuperior", "zeroinferior", "oneinferior", "twoinferior", "threeinferior", "fourinferior", "fiveinferior", "sixinferior", "seveninferior", "eightinferior", "nineinferior", "centinferior", "dollarinferior", "periodinferior", "commainferior", "Agravesmall", "Aacutesmall", "Acircumflexsmall", "Atildesmall", "Adieresissmall", "Aringsmall", "AEsmall", "Ccedillasmall", "Egravesmall", "Eacutesmall", "Ecircumflexsmall", "Edieresissmall", "Igravesmall", "Iacutesmall", "Icircumflexsmall", "Idieresissmall", "Ethsmall", "Ntildesmall", "Ogravesmall", "Oacutesmall", "Ocircumflexsmall", "Otildesmall", "Odieresissmall", "OEsmall", "Oslashsmall", "Ugravesmall", "Uacutesmall", "Ucircumflexsmall", "Udieresissmall", "Yacutesmall", "Thornsmall", "Ydieresissmall", "001.000", "001.001", "001.002", "001.003", "Black", "Bold", "Book", "Light", "Medium", "Regular", "Roman", "Semibold"];
var Xa = function(e3, t3, a2) {
  var r3 = a2.length1, i3 = a2.length2, n3 = t3.peekBytes(6), c3 = 128 == n3[0] && 1 == n3[1];
  c3 && (t3.skip(6), r3 = n3[5] << 24 | n3[4] << 16 | n3[3] << 8 | n3[2]);
  var s3 = new pr(t3.getBytes(r3));
  new Ga(s3).extractFontHeader(a2), c3 && (i3 = (n3 = t3.getBytes(6))[5] << 24 | n3[4] << 16 | n3[3] << 8 | n3[2]);
  var o3 = new pr(t3.getBytes(i3)), f2 = new Ga(o3, true).extractFontProgram();
  for (var l2 in f2.properties) a2[l2] = f2.properties[l2];
  var h3 = this.getOrderedCharStrings(f2.charstrings, a2), u3 = this.getType2Charstrings(h3), d3 = this.getType2Subrs(f2.subrs);
  this.charstrings = h3, this.data = this.wrap(e3, u3, this.charstrings, d3, a2), this.seacs = this.getSeacs(f2.charstrings);
};
Xa.prototype = { getOrderedCharStrings: function(e3, t3) {
  var a2, r3, i3 = [], n3 = [], c3 = va;
  for (a2 = 0, r3 = e3.length; a2 < r3; a2++) {
    for (var s3, o3 = e3[a2], f2 = ((s3 = o3.glyph) in or) ? or[s3] : c3++; n3[f2]; ) f2 = c3++;
    n3[f2] = true, i3.push({ glyph: s3, unicode: f2, gid: a2, charstring: o3.data, width: o3.width, lsb: o3.lsb });
  }
  return i3.sort(function(e4, t4) {
    return e4.unicode - t4.unicode;
  }), i3;
}, getSeacs: function(e3) {
  var t3, a2, r3 = [];
  for (t3 = 0, a2 = e3.length; t3 < a2; t3++) {
    var i3 = e3[t3];
    i3.seac && (r3[t3] = i3.seac);
  }
  return r3;
}, getType2Charstrings: function(e3) {
  for (var t3 = [], a2 = 0, r3 = e3.length; a2 < r3; a2++) t3.push(e3[a2].charstring);
  return t3;
}, getType2Subrs: function(e3) {
  var t3 = 0, a2 = e3.length;
  t3 = a2 < 1133 ? 107 : a2 < 33769 ? 1131 : 32768;
  for (var r3 = [], i3 = 0; i3 < t3; i3++) r3.push([11]);
  for (i3 = 0; i3 < a2; i3++) r3.push(e3[i3]);
  return r3;
}, wrap: function(e3, t3, a2, r3, i3) {
  var n3 = new Ya();
  n3.header = new Ja(1, 0, 4, 4), n3.names = [e3];
  var c3 = new $a();
  c3.setByName("version", 391), c3.setByName("Notice", 392), c3.setByName("FullName", 393), c3.setByName("FamilyName", 394), c3.setByName("Weight", 395), c3.setByName("Encoding", null), c3.setByName("FontMatrix", i3.fontMatrix), c3.setByName("FontBBox", i3.bbox), c3.setByName("charset", null), c3.setByName("CharStrings", null), c3.setByName("Private", null), n3.topDict = c3;
  var s3 = new Ka();
  s3.add("Version 0.11"), s3.add("See original notice"), s3.add(e3), s3.add(e3), s3.add("Medium"), n3.strings = s3, n3.globalSubrIndex = new Za();
  for (var o3 = t3.length, f2 = [0], l2 = 0; l2 < o3; l2++) {
    var h3 = _a.indexOf(a2[l2].glyph);
    -1 == h3 && (h3 = 0), f2.push(h3 >> 8 & 255, 255 & h3);
  }
  n3.charset = new ar(false, 0, [], f2);
  var u3 = new Za();
  u3.add([139, 14]);
  for (l2 = 0; l2 < o3; l2++) u3.add(t3[l2]);
  n3.charStrings = u3;
  var d3 = new er();
  d3.setByName("Subrs", null);
  for (var g2 = ["BlueValues", "OtherBlues", "FamilyBlues", "FamilyOtherBlues", "StemSnapH", "StemSnapV", "BlueShift", "BlueFuzz", "BlueScale", "LanguageGroup", "ExpansionFactor", "ForceBold", "StdHW", "StdVW"], m3 = (l2 = 0, g2.length); l2 < m3; l2++) {
    var p3 = g2[l2];
    if (i3.privateData.hasOwnProperty(p3)) {
      var b3 = i3.privateData[p3];
      if (ft(b3)) for (var v3 = b3.length - 1; v3 > 0; v3--) b3[v3] -= b3[v3 - 1];
      d3.setByName(p3, b3);
    }
  }
  n3.topDict.privateDict = d3;
  var y3 = new Za();
  for (l2 = 0, m3 = r3.length; l2 < m3; l2++) y3.add(r3[l2]);
  return d3.subrsIndex = y3, new cr(n3).compile();
} };
var Wa = function() {
  function e3(e4, t3) {
    this.properties = t3;
    var a2 = new Va(e4, t3);
    this.cff = a2.parse();
    var r3 = new cr(this.cff);
    this.readExtra();
    try {
      this.data = r3.compile();
    } catch (a3) {
      Re("Failed to compile font " + t3.loadedName), this.data = e4;
    }
  }
  return e3.prototype = { readExtra: function() {
    for (var e4 = this.getCharStrings(), t3 = [], a2 = 0, r3 = e4.length; a2 < r3; a2++) t3.push(e4[a2].gid);
    this.charstrings = e4, this.glyphIds = t3, this.seacs = this.cff.seacs;
  }, getCharStrings: function() {
    var e4 = this.cff, t3 = e4.charset.charset, a2 = e4.encoding ? e4.encoding.encoding : null, r3 = [], i3 = [], n3 = [], c3 = [], s3 = 0;
    if (".notdef" === t3[0] && (s3 = 1), "CIDFontType0C" === this.properties.subtype) if (this.cff.isCIDFont) c3 = t3;
    else {
      c3 = [];
      for (var o3 = 0, f2 = e4.charStrings.count; o3 < f2; o3++) c3.push(o3);
      t3 = c3;
    }
    else for (var l2 in a2) {
      var h3 = a2[l2];
      if (h3 in c3) {
        var u3 = c3[h3];
        ft(u3) || (c3[h3] = [u3]), c3[h3].push(0 | l2);
      } else c3[h3] = 0 | l2;
    }
    for (o3 = s3, f2 = t3.length; o3 < f2; o3++) {
      var d3 = t3[o3], g2 = c3[o3];
      ft(g2) || (g2 = [g2]);
      for (var m3 = 0; m3 < g2.length; m3++) {
        var p3 = g2[m3];
        p3 && !qa(p3) ? (r3.push({ unicode: p3, code: p3, gid: o3, glyph: d3 }), i3[p3] = true) : n3.push(o3, p3);
      }
    }
    for (var b3 = va, v3 = (m3 = 0, n3.length); m3 < v3; m3 += 2) {
      for (o3 = n3[m3]; b3 in i3; ) b3++;
      var y3 = b3++;
      r3.push({ unicode: y3, code: n3[m3 + 1] || 0, gid: o3, glyph: t3[o3] });
    }
    return r3.sort(function(e5, t4) {
      return e5.unicode - t4.unicode;
    }), r3;
  } }, e3;
}();
var Va = function() {
  var e3 = [null, { id: "hstem", min: 2, resetStack: true, stem: true }, null, { id: "vstem", min: 2, resetStack: true, stem: true }, { id: "vmoveto", min: 1, resetStack: true }, { id: "rlineto", min: 2, resetStack: true }, { id: "hlineto", min: 1, resetStack: true }, { id: "vlineto", min: 1, resetStack: true }, { id: "rrcurveto", min: 6, resetStack: true }, null, { id: "callsubr", min: 1, undefStack: true }, { id: "return", min: 0, undefStack: true }, null, null, null, null, null, null, { id: "hstemhm", min: 2, resetStack: true, stem: true }, null, null, { id: "rmoveto", min: 2, resetStack: true }, { id: "hmoveto", min: 1, resetStack: true }, { id: "vstemhm", min: 2, resetStack: true, stem: true }, { id: "rcurveline", min: 8, resetStack: true }, { id: "rlinecurve", min: 8, resetStack: true }, { id: "vvcurveto", min: 4, resetStack: true }, { id: "hhcurveto", min: 4, resetStack: true }, null, { id: "callgsubr", min: 1, undefStack: true }, { id: "vhcurveto", min: 4, resetStack: true }, { id: "hvcurveto", min: 4, resetStack: true }], t3 = [null, null, null, { id: "and", min: 2, stackDelta: -1 }, { id: "or", min: 2, stackDelta: -1 }, { id: "not", min: 1, stackDelta: 0 }, null, null, null, { id: "abs", min: 1, stackDelta: 0 }, { id: "add", min: 2, stackDelta: -1, stackFn: function(e4, t4) {
    e4[t4 - 2] = e4[t4 - 2] + e4[t4 - 1];
  } }, { id: "sub", min: 2, stackDelta: -1, stackFn: function(e4, t4) {
    e4[t4 - 2] = e4[t4 - 2] - e4[t4 - 1];
  } }, { id: "div", min: 2, stackDelta: -1, stackFn: function(e4, t4) {
    e4[t4 - 2] = e4[t4 - 2] / e4[t4 - 1];
  } }, null, { id: "neg", min: 1, stackDelta: 0, stackFn: function(e4, t4) {
    e4[t4 - 1] = -e4[t4 - 1];
  } }, { id: "eq", min: 2, stackDelta: -1 }, null, null, { id: "drop", min: 1, stackDelta: -1 }, null, { id: "put", min: 2, stackDelta: -2 }, { id: "get", min: 1, stackDelta: 0 }, { id: "ifelse", min: 4, stackDelta: -3 }, { id: "random", min: 0, stackDelta: 1 }, { id: "mul", min: 2, stackDelta: -1, stackFn: function(e4, t4) {
    e4[t4 - 2] = e4[t4 - 2] * e4[t4 - 1];
  } }, null, { id: "sqrt", min: 1, stackDelta: 0 }, { id: "dup", min: 1, stackDelta: 1 }, { id: "exch", min: 2, stackDelta: 0 }, { id: "index", min: 2, stackDelta: 0 }, { id: "roll", min: 3, stackDelta: -2 }, null, null, null, { id: "hflex", min: 7, resetStack: true }, { id: "flex", min: 13, resetStack: true }, { id: "hflex1", min: 9, resetStack: true }, { id: "flex1", min: 11, resetStack: true }];
  function a2(e4, t4) {
    this.bytes = e4.getBytes(), this.properties = t4;
  }
  return a2.prototype = { parse: function() {
    var e4 = this.properties, t4 = new Ya();
    this.cff = t4;
    var a3 = this.parseHeader(), r3 = this.parseIndex(a3.endPos), i3 = this.parseIndex(r3.endPos), n3 = this.parseIndex(i3.endPos), c3 = this.parseIndex(n3.endPos), s3 = this.parseDict(i3.obj.get(0)), o3 = this.createDict($a, s3, t4.strings);
    t4.header = a3.obj, t4.names = this.parseNameIndex(r3.obj), t4.strings = this.parseStringIndex(n3.obj), t4.topDict = o3, t4.globalSubrIndex = c3.obj, this.parsePrivateDict(t4.topDict), t4.isCIDFont = o3.hasName("ROS");
    var f2 = o3.getByName("CharStrings"), l2 = this.parseCharStrings(f2);
    t4.charStrings = l2.charStrings, t4.seacs = l2.seacs;
    var h3 = o3.getByName("FontMatrix");
    h3 && (e4.fontMatrix = h3);
    var u3, d3, g2 = o3.getByName("FontBBox");
    if (g2 && (e4.ascent = g2[3], e4.descent = g2[1], e4.ascentScaled = true), t4.isCIDFont) {
      for (var m3 = this.parseIndex(o3.getByName("FDArray")).obj, p3 = 0, b3 = m3.count; p3 < b3; ++p3) {
        var v3 = m3.get(p3), y3 = this.createDict($a, this.parseDict(v3), t4.strings);
        this.parsePrivateDict(y3), t4.fdArray.push(y3);
      }
      d3 = null, u3 = this.parseCharsets(o3.getByName("charset"), t4.charStrings.count, t4.strings, true), t4.fdSelect = this.parseFDSelect(o3.getByName("FDSelect"), t4.charStrings.count);
    } else u3 = this.parseCharsets(o3.getByName("charset"), t4.charStrings.count, t4.strings, false), d3 = this.parseEncoding(o3.getByName("Encoding"), e4, t4.strings, u3.charset);
    return t4.charset = u3, t4.encoding = d3, t4;
  }, parseHeader: function() {
    for (var e4 = this.bytes, t4 = 0; 1 != e4[t4]; ) ++t4;
    0 !== t4 && (Pe("cff data is shifted"), e4 = e4.subarray(t4), this.bytes = e4);
    var a3 = e4[0], r3 = e4[1], i3 = e4[2], n3 = e4[3];
    return { obj: new Ja(a3, r3, i3, n3), endPos: i3 };
  }, parseDict: function(e4) {
    var t4 = 0;
    function a3() {
      var a4 = e4[t4++];
      return 30 === a4 ? function() {
        var a5 = "", r4 = 15, i4 = ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", ".", "E", "E-", null, "-"], n4 = e4.length;
        for (; t4 < n4; ) {
          var c4 = e4[t4++], s3 = c4 >> 4, o3 = 15 & c4;
          if (s3 == r4) break;
          if (a5 += i4[s3], o3 == r4) break;
          a5 += i4[o3];
        }
        return parseFloat(a5);
      }() : 28 === a4 ? a4 = ((a4 = e4[t4++]) << 24 | e4[t4++] << 16) >> 16 : 29 === a4 ? a4 = (a4 = (a4 = (a4 = e4[t4++]) << 8 | e4[t4++]) << 8 | e4[t4++]) << 8 | e4[t4++] : a4 >= 32 && a4 <= 246 ? a4 - 139 : a4 >= 247 && a4 <= 250 ? 256 * (a4 - 247) + e4[t4++] + 108 : a4 >= 251 && a4 <= 254 ? -256 * (a4 - 251) - e4[t4++] - 108 : (Oe("255 is not a valid DICT command"), -1);
    }
    for (var r3 = [], i3 = [], n3 = (t4 = 0, e4.length); t4 < n3; ) {
      var c3 = e4[t4];
      c3 <= 21 ? (12 === c3 && (c3 = c3 << 8 | e4[++t4]), i3.push([c3, r3]), r3 = [], ++t4) : r3.push(a3());
    }
    return i3;
  }, parseIndex: function(e4) {
    var t4 = new Za(), a3 = this.bytes, r3 = a3[e4++] << 8 | a3[e4++], i3 = [], n3 = e4;
    if (0 !== r3) {
      for (var c3 = a3[e4++], s3 = e4 + (r3 + 1) * c3 - 1, o3 = 0, f2 = r3 + 1; o3 < f2; ++o3) {
        for (var l2 = 0, h3 = 0; h3 < c3; ++h3) l2 <<= 8, l2 += a3[e4++];
        i3.push(s3 + l2);
      }
      n3 = i3[r3];
    }
    for (o3 = 0, f2 = i3.length - 1; o3 < f2; ++o3) {
      var u3 = i3[o3], d3 = i3[o3 + 1];
      t4.add(a3.subarray(u3, d3));
    }
    return { obj: t4, endPos: n3 };
  }, parseNameIndex: function(e4) {
    for (var t4 = [], a3 = 0, r3 = e4.count; a3 < r3; ++a3) {
      for (var i3 = e4.get(a3), n3 = Math.min(i3.length, 127), c3 = [], s3 = 0; s3 < n3; ++s3) {
        var o3 = i3[s3];
        0 !== s3 || 0 !== o3 ? c3[s3] = o3 < 33 || o3 > 126 || 91 === o3 || 93 === o3 || 40 === o3 || 41 === o3 || 123 === o3 || 125 === o3 || 60 === o3 || 62 === o3 || 47 === o3 || 37 === o3 ? 95 : o3 : c3[s3] = o3;
      }
      t4.push(String.fromCharCode.apply(null, c3));
    }
    return t4;
  }, parseStringIndex: function(e4) {
    for (var t4 = new Ka(), a3 = 0, r3 = e4.count; a3 < r3; ++a3) {
      var i3 = e4.get(a3);
      t4.add(String.fromCharCode.apply(null, i3));
    }
    return t4;
  }, createDict: function(e4, t4, a3) {
    for (var r3 = new e4(a3), i3 = (r3.types, 0), n3 = t4.length; i3 < n3; ++i3) {
      var c3 = t4[i3], s3 = c3[0], o3 = c3[1];
      r3.setByKey(s3, o3);
    }
    return r3;
  }, parseCharStrings: function(a3) {
    for (var r3 = this.parseIndex(a3).obj, i3 = [], n3 = r3.count, c3 = 0; c3 < n3; c3++) {
      for (var s3 = 0, o3 = [], f2 = true, l2 = 0, h3 = true, u3 = r3.get(c3), d3 = u3.length, g2 = 0; g2 < d3; ) {
        var m3 = u3[g2++], p3 = null;
        if (12 == m3) {
          var b3 = u3[g2++];
          0 === b3 ? (u3[g2 - 2] = 139, u3[g2 - 1] = 22, s3 = 0) : p3 = t3[b3];
        } else 28 === m3 ? (o3[s3] = (u3[g2] << 24 | u3[g2 + 1] << 16) >> 16, g2 += 2, s3++) : 14 == m3 ? s3 >= 4 && (s3 -= 4) : m3 >= 32 && m3 <= 246 ? (o3[s3] = m3 - 139, s3++) : m3 >= 247 && m3 <= 254 ? (o3[s3] = m3 < 251 ? (m3 - 247 << 8) + u3[g2] + 108 : -(m3 - 251 << 8) - u3[g2] - 108, g2++, s3++) : 255 == m3 ? (o3[s3] = (u3[g2] << 24 | u3[g2 + 1] << 16 | u3[g2 + 2] << 8 | u3[g2 + 3]) / 65536, g2 += 4, s3++) : 19 == m3 || 20 == m3 ? (g2 += (l2 += s3 >> 1) + 7 >> 3, s3 = 0) : p3 = e3[m3];
        if (p3) {
          if (p3.stem && (l2 += s3 >> 1), "min" in p3 && !f2 && s3 < p3.min) {
            Re("Not enough parameters for " + p3.id + "; actual: " + s3 + ", expected: " + p3.min), h3 = false;
            break;
          }
          "stackDelta" in p3 ? ("stackFn" in p3 && p3.stackFn(o3, s3), s3 += p3.stackDelta) : p3.resetStack ? (s3 = 0, f2 = false) : p3.undefStack && (s3 = 0, f2 = true);
        }
      }
      h3 || r3.set(c3, new Uint8Array([14]));
    }
    return { charStrings: r3, seacs: i3 };
  }, emptyPrivateDictionary: function(e4) {
    var t4 = this.createDict(er, [], e4.strings);
    e4.setByKey(18, [0, 0]), e4.privateDict = t4;
  }, parsePrivateDict: function(e4) {
    if (e4.hasName("Private")) {
      var t4 = e4.getByName("Private");
      if (ft(t4) && 2 === t4.length) {
        var a3 = t4[0], r3 = t4[1];
        if (0 === a3 || r3 >= this.bytes.length) this.emptyPrivateDictionary(e4);
        else {
          var i3 = r3 + a3, n3 = this.bytes.subarray(r3, i3), c3 = this.parseDict(n3), s3 = this.createDict(er, c3, e4.strings);
          if (e4.privateDict = s3, s3.getByName("Subrs")) {
            var o3 = s3.getByName("Subrs"), f2 = r3 + o3;
            if (0 === o3 || f2 >= this.bytes.length) this.emptyPrivateDictionary(e4);
            else {
              var l2 = this.parseIndex(f2);
              s3.subrsIndex = l2.obj;
            }
          }
        }
      } else e4.removeByName("Private");
    } else this.emptyPrivateDictionary(e4);
  }, parseCharsets: function(e4, t4, a3, r3) {
    if (0 === e4) return new ar(true, tr.ISO_ADOBE, na);
    if (1 == e4) return new ar(true, tr.EXPERT, ca);
    if (2 == e4) return new ar(true, tr.EXPERT_SUBSET, sa);
    var i3 = this.bytes, n3 = e4, c3 = i3[e4++], s3 = [".notdef"];
    switch (t4 -= 1, c3) {
      case 0:
        for (var o3 = 0; o3 < t4; o3++) {
          var f2 = i3[e4++] << 8 | i3[e4++];
          s3.push(r3 ? f2 : a3.get(f2));
        }
        break;
      case 1:
        for (; s3.length <= t4; ) {
          f2 = i3[e4++] << 8 | i3[e4++];
          var l2 = i3[e4++];
          for (o3 = 0; o3 <= l2; o3++) s3.push(r3 ? f2++ : a3.get(f2++));
        }
        break;
      case 2:
        for (; s3.length <= t4; ) for (f2 = i3[e4++] << 8 | i3[e4++], l2 = i3[e4++] << 8 | i3[e4++], o3 = 0; o3 <= l2; o3++) s3.push(r3 ? f2++ : a3.get(f2++));
        break;
      default:
        Oe("Unknown charset format");
    }
    var h3 = e4, u3 = i3.subarray(n3, h3);
    return new ar(false, c3, s3, u3);
  }, parseEncoding: function(e4, t4, a3, r3) {
    var i3 = {}, n3 = this.bytes, c3 = false, s3 = null;
    if (0 === e4 || 1 == e4) {
      c3 = true, u3 = e4;
      for (var o3 = e4 ? Aa.ExpertEncoding : Aa.StandardEncoding, f2 = 0, l2 = r3.length; f2 < l2; f2++) {
        var h3 = o3.indexOf(r3[f2]);
        -1 != h3 && (i3[h3] = f2);
      }
    } else {
      var u3, d3 = e4;
      switch (127 & (u3 = n3[e4++])) {
        case 0:
          var g2 = n3[e4++];
          for (f2 = 1; f2 <= g2; f2++) i3[n3[e4++]] = f2;
          break;
        case 1:
          var m3 = n3[e4++], p3 = 1;
          for (f2 = 0; f2 < m3; f2++) for (var b3 = n3[e4++], v3 = n3[e4++], y3 = b3; y3 <= b3 + v3; y3++) i3[y3] = p3++;
          break;
        default:
          Oe("Unknow encoding format: " + u3 + " in CFF");
      }
      var k3 = e4;
      128 & u3 && (n3[d3] &= 127, function() {
        for (var t5 = n3[e4++], c4 = 0; c4 < t5; c4++) {
          var s4 = n3[e4++], o4 = (n3[e4++] << 8) + (255 & n3[e4++]);
          i3[s4] = r3.indexOf(a3.get(o4));
        }
      }(), true), s3 = n3.subarray(d3, k3);
    }
    return new rr(c3, u3 &= 127, i3, s3);
  }, parseFDSelect: function(e4, t4) {
    var a3 = e4, r3 = this.bytes, i3 = r3[e4++], n3 = [];
    switch (i3) {
      case 0:
        for (var c3 = 0; c3 < t4; ++c3) {
          var s3 = r3[e4++];
          n3.push(s3);
        }
        break;
      case 3:
        var o3 = r3[e4++] << 8 | r3[e4++];
        for (c3 = 0; c3 < o3; ++c3) for (var f2 = r3[e4++] << 8 | r3[e4++], l2 = r3[e4++], h3 = r3[e4] << 8 | r3[e4 + 1], u3 = f2; u3 < h3; ++u3) n3.push(l2);
        e4 += 2;
        break;
      default:
        Oe("Unknown fdselect format " + i3);
    }
    var d3 = e4;
    return new ir(n3, r3.subarray(a3, d3));
  } }, a2;
}();
var Ya = function() {
  this.header = null, this.names = [], this.topDict = null, this.strings = new Ka(), this.globalSubrIndex = null, this.encoding = null, this.charset = null, this.charStrings = null, this.fdArray = [], this.fdSelect = null, this.isCIDFont = false;
};
var Ja = function(e3, t3, a2, r3) {
  this.major = e3, this.minor = t3, this.hdrSize = a2, this.offSize = r3;
};
var Ka = function() {
  function e3() {
    this.strings = [];
  }
  return e3.prototype = { get: function(e4) {
    return e4 >= 0 && e4 <= 390 ? _a[e4] : e4 - 391 <= this.strings.length ? this.strings[e4 - 391] : _a[0];
  }, add: function(e4) {
    this.strings.push(e4);
  }, get count() {
    return this.strings.length;
  } }, e3;
}();
var Za = function() {
  function e3() {
    this.objects = [], this.length = 0;
  }
  return e3.prototype = { add: function(e4) {
    this.length += e4.length, this.objects.push(e4);
  }, set: function(e4, t3) {
    this.length += t3.length - this.objects[e4].length, this.objects[e4] = t3;
  }, get: function(e4) {
    return this.objects[e4];
  }, get count() {
    return this.objects.length;
  } }, e3;
}();
var Qa = function() {
  function e3(e4, t3) {
    this.keyToNameMap = e4.keyToNameMap, this.nameToKeyMap = e4.nameToKeyMap, this.defaults = e4.defaults, this.types = e4.types, this.opcodes = e4.opcodes, this.order = e4.order, this.strings = t3, this.values = {};
  }
  return e3.prototype = { setByKey: function(e4, t3) {
    if (!(e4 in this.keyToNameMap)) return false;
    if (0 === t3.length) return true;
    var a2 = this.types[e4];
    return "num" !== a2 && "sid" !== a2 && "offset" !== a2 || (t3 = t3[0]), this.values[e4] = t3, true;
  }, setByName: function(e4, t3) {
    e4 in this.nameToKeyMap || Oe('Invalid dictionary name "' + e4 + '"'), this.values[this.nameToKeyMap[e4]] = t3;
  }, hasName: function(e4) {
    return this.nameToKeyMap[e4] in this.values;
  }, getByName: function(e4) {
    e4 in this.nameToKeyMap || Oe('Invalid dictionary name "' + e4 + '"');
    var t3 = this.nameToKeyMap[e4];
    return t3 in this.values ? this.values[t3] : this.defaults[t3];
  }, removeByName: function(e4) {
    delete this.values[this.nameToKeyMap[e4]];
  } }, e3.createTables = function(e4) {
    for (var t3 = { keyToNameMap: {}, nameToKeyMap: {}, defaults: {}, types: {}, opcodes: {}, order: [] }, a2 = 0, r3 = e4.length; a2 < r3; ++a2) {
      var i3 = e4[a2], n3 = ft(i3[0]) ? (i3[0][0] << 8) + i3[0][1] : i3[0];
      t3.keyToNameMap[n3] = i3[1], t3.nameToKeyMap[i3[1]] = n3, t3.types[n3] = i3[2], t3.defaults[n3] = i3[3], t3.opcodes[n3] = ft(i3[0]) ? i3[0] : [i3[0]], t3.order.push(n3);
    }
    return t3;
  }, e3;
}();
var $a = function() {
  var e3 = [[[12, 30], "ROS", ["sid", "sid", "num"], null], [[12, 20], "SyntheticBase", "num", null], [0, "version", "sid", null], [1, "Notice", "sid", null], [[12, 0], "Copyright", "sid", null], [2, "FullName", "sid", null], [3, "FamilyName", "sid", null], [4, "Weight", "sid", null], [[12, 1], "isFixedPitch", "num", 0], [[12, 2], "ItalicAngle", "num", 0], [[12, 3], "UnderlinePosition", "num", -100], [[12, 4], "UnderlineThickness", "num", 50], [[12, 5], "PaintType", "num", 0], [[12, 6], "CharstringType", "num", 2], [[12, 7], "FontMatrix", ["num", "num", "num", "num", "num", "num"], [1e-3, 0, 0, 1e-3, 0, 0]], [13, "UniqueID", "num", null], [5, "FontBBox", ["num", "num", "num", "num"], [0, 0, 0, 0]], [[12, 8], "StrokeWidth", "num", 0], [14, "XUID", "array", null], [15, "charset", "offset", 0], [16, "Encoding", "offset", 0], [17, "CharStrings", "offset", 0], [18, "Private", ["offset", "offset"], null], [[12, 21], "PostScript", "sid", null], [[12, 22], "BaseFontName", "sid", null], [[12, 23], "BaseFontBlend", "delta", null], [[12, 31], "CIDFontVersion", "num", 0], [[12, 32], "CIDFontRevision", "num", 0], [[12, 33], "CIDFontType", "num", 0], [[12, 34], "CIDCount", "num", 8720], [[12, 35], "UIDBase", "num", null], [[12, 37], "FDSelect", "offset", null], [[12, 36], "FDArray", "offset", null], [[12, 38], "FontName", "sid", null]], t3 = null;
  function a2(a3) {
    null === t3 && (t3 = Qa.createTables(e3)), Qa.call(this, t3, a3), this.privateDict = null;
  }
  return a2.prototype = Object.create(Qa.prototype), a2;
}();
var er = function() {
  var e3 = [[6, "BlueValues", "delta", null], [7, "OtherBlues", "delta", null], [8, "FamilyBlues", "delta", null], [9, "FamilyOtherBlues", "delta", null], [[12, 9], "BlueScale", "num", 0.039625], [[12, 10], "BlueShift", "num", 7], [[12, 11], "BlueFuzz", "num", 1], [10, "StdHW", "num", null], [11, "StdVW", "num", null], [[12, 12], "StemSnapH", "delta", null], [[12, 13], "StemSnapV", "delta", null], [[12, 14], "ForceBold", "num", 0], [[12, 17], "LanguageGroup", "num", 0], [[12, 18], "ExpansionFactor", "num", 0.06], [[12, 19], "initialRandomSeed", "num", 0], [20, "defaultWidthX", "num", 0], [21, "nominalWidthX", "num", 0], [19, "Subrs", "offset", null]], t3 = null;
  function a2(a3) {
    null === t3 && (t3 = Qa.createTables(e3)), Qa.call(this, t3, a3), this.subrsIndex = null;
  }
  return a2.prototype = Object.create(Qa.prototype), a2;
}();
var tr = { ISO_ADOBE: 0, EXPERT: 1, EXPERT_SUBSET: 2 };
var ar = function(e3, t3, a2, r3) {
  this.predefined = e3, this.format = t3, this.charset = a2, this.raw = r3;
};
var rr = function(e3, t3, a2, r3) {
  this.predefined = e3, this.format = t3, this.encoding = a2, this.raw = r3;
};
var ir = function(e3, t3) {
  this.fdSelect = e3, this.raw = t3;
};
var nr = function() {
  function e3() {
    this.offsets = {};
  }
  return e3.prototype = { isTracking: function(e4) {
    return e4 in this.offsets;
  }, track: function(e4, t3) {
    e4 in this.offsets && Oe("Already tracking location of " + e4), this.offsets[e4] = t3;
  }, offset: function(e4) {
    for (var t3 in this.offsets) this.offsets[t3] += e4;
  }, setEntryLocation: function(e4, t3, a2) {
    e4 in this.offsets || Oe("Not tracking location of " + e4);
    for (var r3 = a2.data, i3 = this.offsets[e4], n3 = 0, c3 = t3.length; n3 < c3; ++n3) {
      var s3 = 5 * n3 + i3, o3 = s3 + 1, f2 = s3 + 2, l2 = s3 + 3, h3 = s3 + 4;
      29 === r3[s3] && 0 === r3[o3] && 0 === r3[f2] && 0 === r3[l2] && 0 === r3[h3] || Oe("writing to an offset that is not empty");
      var u3 = t3[n3];
      r3[s3] = 29, r3[o3] = u3 >> 24 & 255, r3[f2] = u3 >> 16 & 255, r3[l2] = u3 >> 8 & 255, r3[h3] = 255 & u3;
    }
  } }, e3;
}();
var cr = function() {
  function e3(e4) {
    for (var t4 = [], a2 = 0, r3 = e4.length; a2 < r3; ++a2) t4[a2] = e4.charCodeAt(a2);
    return t4;
  }
  function t3(e4) {
    this.cff = e4;
  }
  return t3.prototype = { compile: function() {
    var e4 = this.cff, t4 = { data: [], length: 0, add: function(e5) {
      this.data = this.data.concat(e5), this.length = this.data.length;
    } }, a2 = this.compileHeader(e4.header);
    t4.add(a2);
    var r3 = this.compileNameIndex(e4.names);
    if (t4.add(r3), e4.isCIDFont && e4.topDict.hasName("FontMatrix")) {
      var i3 = e4.topDict.getByName("FontMatrix");
      e4.topDict.removeByName("FontMatrix");
      for (var n3 = 0, c3 = e4.fdArray.length; n3 < c3; n3++) {
        var s3 = e4.fdArray[n3], o3 = i3.slice(0);
        s3.hasName("FontMatrix") && (o3 = Qe.transform(o3, s3.getByName("FontMatrix"))), s3.setByName("FontMatrix", o3);
      }
    }
    var f2 = this.compileTopDicts([e4.topDict], t4.length, e4.isCIDFont);
    t4.add(f2.output);
    var l2 = f2.trackers[0], h3 = this.compileStringIndex(e4.strings.strings);
    t4.add(h3);
    var u3 = this.compileIndex(e4.globalSubrIndex);
    if (t4.add(u3), e4.encoding && e4.topDict.hasName("Encoding")) if (e4.encoding.predefined) l2.setEntryLocation("Encoding", [e4.encoding.format], t4);
    else {
      var d3 = this.compileEncoding(e4.encoding);
      l2.setEntryLocation("Encoding", [t4.length], t4), t4.add(d3);
    }
    if (e4.charset && e4.topDict.hasName("charset")) if (e4.charset.predefined) l2.setEntryLocation("charset", [e4.charset.format], t4);
    else {
      var g2 = this.compileCharset(e4.charset);
      l2.setEntryLocation("charset", [t4.length], t4), t4.add(g2);
    }
    var m3 = this.compileCharStrings(e4.charStrings);
    if (l2.setEntryLocation("CharStrings", [t4.length], t4), t4.add(m3), e4.isCIDFont) {
      l2.setEntryLocation("FDSelect", [t4.length], t4);
      var p3 = this.compileFDSelect(e4.fdSelect.raw);
      t4.add(p3);
      f2 = this.compileTopDicts(e4.fdArray, t4.length, true);
      l2.setEntryLocation("FDArray", [t4.length], t4), t4.add(f2.output);
      var b3 = f2.trackers;
      this.compilePrivateDicts(e4.fdArray, b3, t4);
    }
    return this.compilePrivateDicts([e4.topDict], [l2], t4), t4.add([0]), t4.data;
  }, encodeNumber: function(e4) {
    return parseFloat(e4) != parseInt(e4, 10) || isNaN(e4) ? this.encodeFloat(e4) : this.encodeInteger(e4);
  }, encodeFloat: function(e4) {
    var t4 = e4.toString(), a2 = /\.(\d*?)(?:9{5,20}|0{5,20})\d{0,2}(?:e(.+)|$)/.exec(t4);
    if (a2) {
      var r3 = parseFloat("1e" + ((a2[2] ? +a2[2] : 0) + a2[1].length));
      t4 = (Math.round(e4 * r3) / r3).toString();
    }
    for (var i3 = "", n3 = 0, c3 = t4.length; n3 < c3; ++n3) {
      var s3 = t4[n3];
      i3 += "e" === s3 ? "-" === t4[++n3] ? "c" : "b" : "." === s3 ? "a" : "-" === s3 ? "e" : s3;
    }
    var o3 = [30];
    for (n3 = 0, c3 = (i3 += 1 & i3.length ? "f" : "ff").length; n3 < c3; n3 += 2) o3.push(parseInt(i3.substring(n3, n3 + 2), 16));
    return o3;
  }, encodeInteger: function(e4) {
    return e4 >= -107 && e4 <= 107 ? [e4 + 139] : e4 >= 108 && e4 <= 1131 ? [247 + ((e4 = [e4 - 108]) >> 8), 255 & e4] : e4 >= -1131 && e4 <= -108 ? [251 + ((e4 = -e4 - 108) >> 8), 255 & e4] : e4 >= -32768 && e4 <= 32767 ? [28, e4 >> 8 & 255, 255 & e4] : [29, e4 >> 24 & 255, e4 >> 16 & 255, e4 >> 8 & 255, 255 & e4];
  }, compileHeader: function(e4) {
    return [e4.major, e4.minor, e4.hdrSize, e4.offSize];
  }, compileNameIndex: function(t4) {
    for (var a2 = new Za(), r3 = 0, i3 = t4.length; r3 < i3; ++r3) a2.add(e3(t4[r3]));
    return this.compileIndex(a2);
  }, compileTopDicts: function(e4, t4, a2) {
    for (var r3 = [], i3 = new Za(), n3 = 0, c3 = e4.length; n3 < c3; ++n3) {
      var s3 = e4[n3];
      a2 && (s3.removeByName("CIDFontVersion"), s3.removeByName("CIDFontRevision"), s3.removeByName("CIDFontType"), s3.removeByName("CIDCount"), s3.removeByName("UIDBase"));
      var o3 = new nr(), f2 = this.compileDict(s3, o3);
      r3.push(o3), i3.add(f2), o3.offset(t4);
    }
    return { trackers: r3, output: i3 = this.compileIndex(i3, r3) };
  }, compilePrivateDicts: function(e4, t4, a2) {
    for (var r3 = 0, i3 = e4.length; r3 < i3; ++r3) {
      var n3 = e4[r3];
      De(n3.privateDict && n3.hasName("Private"), "There must be an private dictionary.");
      var c3 = n3.privateDict, s3 = new nr(), o3 = this.compileDict(c3, s3), f2 = a2.length;
      if (s3.offset(f2), o3.length || (f2 = 0), t4[r3].setEntryLocation("Private", [o3.length, f2], a2), a2.add(o3), c3.subrsIndex && c3.hasName("Subrs")) {
        var l2 = this.compileIndex(c3.subrsIndex);
        s3.setEntryLocation("Subrs", [o3.length], a2), a2.add(l2);
      }
    }
  }, compileDict: function(e4, t4) {
    for (var a2 = [], r3 = e4.order, i3 = 0; i3 < r3.length; ++i3) {
      var n3 = r3[i3];
      if (n3 in e4.values) {
        var c3 = e4.values[n3], s3 = e4.types[n3];
        if (ft(s3) || (s3 = [s3]), ft(c3) || (c3 = [c3]), 0 !== c3.length) {
          for (var o3 = 0, f2 = s3.length; o3 < f2; ++o3) {
            var l2 = s3[o3], h3 = c3[o3];
            switch (l2) {
              case "num":
              case "sid":
                a2 = a2.concat(this.encodeNumber(h3));
                break;
              case "offset":
                var u3 = e4.keyToNameMap[n3];
                t4.isTracking(u3) || t4.track(u3, a2.length), a2 = a2.concat([29, 0, 0, 0, 0]);
                break;
              case "array":
              case "delta":
                a2 = a2.concat(this.encodeNumber(h3));
                for (var d3 = 1, g2 = c3.length; d3 < g2; ++d3) a2 = a2.concat(this.encodeNumber(c3[d3]));
                break;
              default:
                Oe("Unknown data type of " + l2);
            }
          }
          a2 = a2.concat(e4.opcodes[n3]);
        }
      }
    }
    return a2;
  }, compileStringIndex: function(t4) {
    for (var a2 = new Za(), r3 = 0, i3 = t4.length; r3 < i3; ++r3) a2.add(e3(t4[r3]));
    return this.compileIndex(a2);
  }, compileGlobalSubrIndex: function() {
    var e4 = this.cff.globalSubrIndex;
    this.out.writeByteArray(this.compileIndex(e4));
  }, compileCharStrings: function(e4) {
    return this.compileIndex(e4);
  }, compileCharset: function(e4) {
    return this.compileTypedArray(e4.raw);
  }, compileEncoding: function(e4) {
    return this.compileTypedArray(e4.raw);
  }, compileFDSelect: function(e4) {
    return this.compileTypedArray(e4);
  }, compileTypedArray: function(e4) {
    for (var t4 = [], a2 = 0, r3 = e4.length; a2 < r3; ++a2) t4[a2] = e4[a2];
    return t4;
  }, compileIndex: function(e4, t4) {
    t4 = t4 || [];
    var a2 = e4.objects, r3 = a2.length;
    if (0 === r3) return [0, 0, 0];
    for (var i3, n3 = [r3 >> 8 & 255, 255 & r3], c3 = 1, s3 = 0; s3 < r3; ++s3) c3 += a2[s3].length;
    i3 = c3 < 256 ? 1 : c3 < 65536 ? 2 : c3 < 16777216 ? 3 : 4, n3.push(i3);
    var o3 = 1;
    for (s3 = 0; s3 < r3 + 1; s3++) 1 === i3 ? n3.push(255 & o3) : 2 === i3 ? n3.push(o3 >> 8 & 255, 255 & o3) : 3 === i3 ? n3.push(o3 >> 16 & 255, o3 >> 8 & 255, 255 & o3) : n3.push(o3 >>> 24 & 255, o3 >> 16 & 255, o3 >> 8 & 255, 255 & o3), a2[s3] && (o3 += a2[s3].length);
    for (n3.length, s3 = 0; s3 < r3; s3++) {
      t4[s3] && t4[s3].offset(n3.length);
      for (var f2 = 0, l2 = a2[s3].length; f2 < l2; f2++) n3.push(a2[s3][f2]);
    }
    return n3;
  } }, t3;
}();
var sr = function() {
  function e3(e4, t4) {
    return e4[t4] << 24 | e4[t4 + 1] << 16 | e4[t4 + 2] << 8 | e4[t4 + 3];
  }
  function t3(e4, t4) {
    return e4[t4] << 8 | e4[t4 + 1];
  }
  function a2(a3, r4, i4) {
    var n4 = 1 === t3(a3, r4 + 2) ? e3(a3, r4 + 8) : e3(a3, r4 + 16), c4 = t3(a3, r4 + n4);
    if (4 === c4) {
      t3(a3, r4 + n4 + 2);
      for (var s4 = t3(a3, r4 + n4 + 6) >> 1, o4 = r4 + n4 + 14, f3 = [], l2 = 0; l2 < s4; l2++, o4 += 2) f3[l2] = { end: t3(a3, o4) };
      o4 += 2;
      for (l2 = 0; l2 < s4; l2++, o4 += 2) f3[l2].start = t3(a3, o4);
      for (l2 = 0; l2 < s4; l2++, o4 += 2) f3[l2].idDelta = t3(a3, o4);
      for (l2 = 0; l2 < s4; l2++, o4 += 2) {
        var h3 = t3(a3, o4);
        if (0 !== h3) {
          f3[l2].ids = [];
          for (var u3 = 0, d3 = f3[l2].end - f3[l2].start + 1; u3 < d3; u3++) f3[l2].ids[u3] = t3(a3, o4 + h3), h3 += 2;
        }
      }
      return f3;
    }
    if (12 === c4) {
      e3(a3, r4 + n4 + 4);
      var g2 = e3(a3, r4 + n4 + 12);
      for (o4 = r4 + n4 + 16, f3 = [], l2 = 0; l2 < g2; l2++) f3.push({ start: e3(a3, o4), end: e3(a3, o4 + 4), idDelta: e3(a3, o4 + 8) - e3(a3, o4) }), o4 += 12;
      return f3;
    }
    Oe("not supported cmap: " + c4);
  }
  function r3(e4, t4, a3) {
    var r4 = new Va(new pr(e4, t4, a3 - t4), {}).parse();
    return { glyphs: r4.charStrings.objects, subrs: r4.topDict.privateDict && r4.topDict.privateDict.subrsIndex && r4.topDict.privateDict.subrsIndex.objects, gsubrs: r4.globalSubrIndex && r4.globalSubrIndex.objects };
  }
  function i3(e4, t4) {
    for (var a3 = t4.charCodeAt(0), r4 = 0, i4 = e4.length - 1; r4 < i4; ) {
      var n4 = r4 + i4 + 1 >> 1;
      a3 < e4[n4].start ? i4 = n4 - 1 : r4 = n4;
    }
    return e4[r4].start <= a3 && a3 <= e4[r4].end ? e4[r4].idDelta + (e4[r4].ids ? e4[r4].ids[a3 - e4[r4].start] : a3) & 65535 : 0;
  }
  function n3(e4, t4, a3) {
    function r4(e5, a4) {
      t4.push("c.moveTo(" + e5 + "," + a4 + ");");
    }
    function i4(e5, a4) {
      t4.push("c.lineTo(" + e5 + "," + a4 + ");");
    }
    function c4(e5, a4, r5, i5) {
      t4.push("c.quadraticCurveTo(" + e5 + "," + a4 + "," + r5 + "," + i5 + ");");
    }
    var s4 = (e4[C2 = 0] << 24 | e4[C2 + 1] << 16) >> 16;
    e4[C2 + 2], e4[C2 + 3], e4[C2 + 4], e4[C2 + 5], e4[C2 + 6], e4[C2 + 7], e4[C2 + 8], e4[C2 + 9];
    if (C2 += 10, s4 < 0) {
      var o4 = 0, f3 = 0;
      do {
        var l2, h3, u3 = e4[C2] << 8 | e4[C2 + 1], d3 = e4[C2 + 2] << 8 | e4[C2 + 3];
        C2 += 4, 1 & u3 ? (l2 = (e4[C2] << 24 | e4[C2 + 1] << 16) >> 16, h3 = (e4[C2 + 2] << 24 | e4[C2 + 3] << 16) >> 16, C2 += 4) : (l2 = e4[C2++], h3 = e4[C2++]), 2 & u3 ? (o4 = l2, f3 = h3) : (o4 = 0, f3 = 0);
        var g2 = 1, m3 = 1, p3 = 0, b3 = 0;
        8 & u3 ? (g2 = m3 = (e4[C2] << 24 | e4[C2 + 1] << 16) / 1073741824, C2 += 2) : 64 & u3 ? (g2 = (e4[C2] << 24 | e4[C2 + 1] << 16) / 1073741824, m3 = (e4[C2 + 2] << 24 | e4[C2 + 3] << 16) / 1073741824, C2 += 4) : 128 & u3 && (g2 = (e4[C2] << 24 | e4[C2 + 1] << 16) / 1073741824, p3 = (e4[C2 + 2] << 24 | e4[C2 + 3] << 16) / 1073741824, b3 = (e4[C2 + 4] << 24 | e4[C2 + 5] << 16) / 1073741824, m3 = (e4[C2 + 6] << 24 | e4[C2 + 7] << 16) / 1073741824, C2 += 8);
        var v3 = a3.glyphs[d3];
        v3 && (t4.push("c.save();"), t4.push("c.transform(" + g2 + "," + p3 + "," + b3 + "," + m3 + "," + o4 + "," + f3 + ");"), n3(v3, t4, a3), t4.push("c.restore();"));
      } while (32 & u3);
    } else {
      for (var y3 = [], k3 = 0; k3 < s4; k3++) y3.push(e4[C2] << 8 | e4[C2 + 1]), C2 += 2;
      C2 += 2 + (e4[C2] << 8 | e4[C2 + 1]);
      for (var A3 = y3[y3.length - 1] + 1, w3 = []; w3.length < A3; ) {
        var x3 = 1;
        for (8 & (u3 = e4[C2++]) && (x3 += e4[C2++]); x3-- > 0; ) w3.push({ flags: u3 });
      }
      for (o4 = 0, f3 = 0, k3 = 0; k3 < A3; k3++) {
        switch (18 & w3[k3].flags) {
          case 0:
            o4 += (e4[C2] << 24 | e4[C2 + 1] << 16) >> 16, C2 += 2;
            break;
          case 2:
            o4 -= e4[C2++];
            break;
          case 18:
            o4 += e4[C2++];
        }
        w3[k3].x = o4;
      }
      for (k3 = 0; k3 < A3; k3++) {
        switch (36 & w3[k3].flags) {
          case 0:
            f3 += (e4[C2] << 24 | e4[C2 + 1] << 16) >> 16, C2 += 2;
            break;
          case 4:
            f3 -= e4[C2++];
            break;
          case 36:
            f3 += e4[C2++];
        }
        w3[k3].y = f3;
      }
      for (var S3 = 0, C2 = 0; C2 < s4; C2++) {
        var I3 = y3[C2], B3 = w3.slice(S3, I3 + 1);
        if (1 & B3[0].flags) B3.push(B3[0]);
        else if (1 & B3[B3.length - 1].flags) B3.unshift(B3[B3.length - 1]);
        else {
          var T3 = { flags: 1, x: (B3[0].x + B3[B3.length - 1].x) / 2, y: (B3[0].y + B3[B3.length - 1].y) / 2 };
          B3.unshift(T3), B3.push(T3);
        }
        r4(B3[0].x, B3[0].y);
        k3 = 1;
        for (var L2 = B3.length; k3 < L2; k3++) 1 & B3[k3].flags ? i4(B3[k3].x, B3[k3].y) : 1 & B3[k3 + 1].flags ? (c4(B3[k3].x, B3[k3].y, B3[k3 + 1].x, B3[k3 + 1].y), k3++) : c4(B3[k3].x, B3[k3].y, (B3[k3].x + B3[k3 + 1].x) / 2, (B3[k3].y + B3[k3 + 1].y) / 2);
        S3 = I3 + 1;
      }
    }
  }
  function c3(e4, t4, a3) {
    var r4 = [], n4 = 0, s4 = 0, o4 = 0;
    function f3(e5, a4) {
      t4.push("c.moveTo(" + e5 + "," + a4 + ");");
    }
    function l2(e5, a4) {
      t4.push("c.lineTo(" + e5 + "," + a4 + ");");
    }
    function h3(e5, a4, r5, i4, n5, c4) {
      t4.push("c.bezierCurveTo(" + e5 + "," + a4 + "," + r5 + "," + i4 + "," + n5 + "," + c4 + ");");
    }
    !function e5(u3) {
      for (var d3 = 0; d3 < u3.length; ) {
        var g2 = false, m3 = u3[d3++];
        switch (m3) {
          case 1:
          case 3:
          case 18:
          case 23:
            o4 += r4.length >> 1, g2 = true;
            break;
          case 4:
            s4 += r4.pop(), f3(n4, s4), g2 = true;
            break;
          case 5:
            for (; r4.length > 0; ) n4 += r4.shift(), s4 += r4.shift(), l2(n4, s4);
            break;
          case 6:
            for (; r4.length > 0 && (l2(n4 += r4.shift(), s4), 0 !== r4.length); ) s4 += r4.shift(), l2(n4, s4);
            break;
          case 7:
            for (; r4.length > 0 && (s4 += r4.shift(), l2(n4, s4), 0 !== r4.length); ) l2(n4 += r4.shift(), s4);
            break;
          case 8:
            for (; r4.length > 0; ) {
              var p3 = n4 + r4.shift(), b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
              n4 = v3 + r4.shift(), s4 = y3 + r4.shift(), h3(p3, b3, v3, y3, n4, s4);
            }
            break;
          case 10:
            var k3 = r4.pop() + a3.subrsBias;
            (T3 = a3.subrs[k3]) && e5(T3);
            break;
          case 11:
            return;
          case 12:
            switch (m3 = u3[d3++]) {
              case 34:
                v3 = (p3 = n4 + r4.shift()) + r4.shift();
                var A3 = s4 + r4.shift();
                n4 = v3 + r4.shift(), h3(p3, s4, v3, A3, n4, A3);
                v3 = (p3 = n4 + r4.shift()) + r4.shift();
                n4 = v3 + r4.shift(), h3(p3, A3, v3, s4, n4, s4);
                break;
              case 35:
                p3 = n4 + r4.shift(), b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
                n4 = v3 + r4.shift(), s4 = y3 + r4.shift(), h3(p3, b3, v3, y3, n4, s4);
                p3 = n4 + r4.shift(), b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
                n4 = v3 + r4.shift(), s4 = y3 + r4.shift(), h3(p3, b3, v3, y3, n4, s4), r4.pop();
                break;
              case 36:
                p3 = n4 + r4.shift(), A3 = s4 + r4.shift(), v3 = p3 + r4.shift();
                var w3 = A3 + r4.shift();
                h3(p3, A3, v3, w3, n4 = v3 + r4.shift(), w3), h3(p3 = n4 + r4.shift(), w3, v3 = p3 + r4.shift(), w3 + r4.shift(), n4 = v3 + r4.shift(), s4);
                break;
              case 37:
                var x3 = n4, S3 = s4;
                p3 = n4 + r4.shift(), b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
                n4 = v3 + r4.shift(), s4 = y3 + r4.shift(), h3(p3, b3, v3, y3, n4, s4);
                p3 = n4 + r4.shift(), b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
                n4 = v3, s4 = y3, Math.abs(n4 - x3) > Math.abs(s4 - S3) ? n4 += r4.shift() : s4 += r4.shift(), h3(p3, b3, v3, y3, n4, s4);
                break;
              default:
                Oe("unknown operator: 12 " + m3);
            }
            break;
          case 14:
            if (r4.length >= 4) {
              var C2 = r4.pop(), I3 = r4.pop();
              s4 = r4.pop(), n4 = r4.pop(), t4.push("c.save();"), t4.push("c.translate(" + n4 + "," + s4 + ");");
              var B3 = i3(a3.cmap, String.fromCharCode(a3.glyphNameMap[Aa.StandardEncoding[C2]]));
              c3(a3.glyphs[B3], t4, a3), t4.push("c.restore();"), B3 = i3(a3.cmap, String.fromCharCode(a3.glyphNameMap[Aa.StandardEncoding[I3]])), c3(a3.glyphs[B3], t4, a3);
            }
            return;
          case 19:
          case 20:
            d3 += (o4 += r4.length >> 1) + 7 >> 3, g2 = true;
            break;
          case 21:
            s4 += r4.pop(), f3(n4 += r4.pop(), s4), g2 = true;
            break;
          case 22:
            f3(n4 += r4.pop(), s4), g2 = true;
            break;
          case 24:
            for (; r4.length > 2; ) {
              p3 = n4 + r4.shift(), b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
              n4 = v3 + r4.shift(), s4 = y3 + r4.shift(), h3(p3, b3, v3, y3, n4, s4);
            }
            n4 += r4.shift(), s4 += r4.shift(), l2(n4, s4);
            break;
          case 25:
            for (; r4.length > 6; ) n4 += r4.shift(), s4 += r4.shift(), l2(n4, s4);
            p3 = n4 + r4.shift(), b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
            n4 = v3 + r4.shift(), s4 = y3 + r4.shift(), h3(p3, b3, v3, y3, n4, s4);
            break;
          case 26:
            for (r4.length % 2 && (n4 += r4.shift()); r4.length > 0; ) {
              p3 = n4, b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
              n4 = v3, s4 = y3 + r4.shift(), h3(p3, b3, v3, y3, n4, s4);
            }
            break;
          case 27:
            for (r4.length % 2 && (s4 += r4.shift()); r4.length > 0; ) {
              h3(p3 = n4 + r4.shift(), b3 = s4, v3 = p3 + r4.shift(), y3 = b3 + r4.shift(), n4 = v3 + r4.shift(), s4 = y3);
            }
            break;
          case 28:
            r4.push((u3[d3] << 24 | u3[d3 + 1] << 16) >> 16), d3 += 2;
            break;
          case 29:
            var T3;
            k3 = r4.pop() + a3.gsubrsBias;
            (T3 = a3.gsubrs[k3]) && e5(T3);
            break;
          case 30:
            for (; r4.length > 0; ) {
              p3 = n4, b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
              if (n4 = v3 + r4.shift(), s4 = y3 + (1 === r4.length ? r4.shift() : 0), h3(p3, b3, v3, y3, n4, s4), 0 === r4.length) break;
              p3 = n4 + r4.shift(), b3 = s4, v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
              s4 = y3 + r4.shift(), h3(p3, b3, v3, y3, n4 = v3 + (1 === r4.length ? r4.shift() : 0), s4);
            }
            break;
          case 31:
            for (; r4.length > 0; ) {
              p3 = n4 + r4.shift(), b3 = s4, v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
              if (s4 = y3 + r4.shift(), h3(p3, b3, v3, y3, n4 = v3 + (1 === r4.length ? r4.shift() : 0), s4), 0 === r4.length) break;
              p3 = n4, b3 = s4 + r4.shift(), v3 = p3 + r4.shift(), y3 = b3 + r4.shift();
              n4 = v3 + r4.shift(), s4 = y3 + (1 === r4.length ? r4.shift() : 0), h3(p3, b3, v3, y3, n4, s4);
            }
            break;
          default:
            m3 < 32 && Oe("unknown operator: " + m3), m3 < 247 ? r4.push(m3 - 139) : m3 < 251 ? r4.push(256 * (m3 - 247) + u3[d3++] + 108) : m3 < 255 ? r4.push(256 * -(m3 - 251) - u3[d3++] - 108) : (r4.push((u3[d3] << 24 | u3[d3 + 1] << 16 | u3[d3 + 2] << 8 | u3[d3 + 3]) / 65536), d3 += 4);
        }
        g2 && (r4.length = 0);
      }
    }(e4);
  }
  function s3(e4) {
    this.compiledGlyphs = {}, this.fontMatrix = e4;
  }
  function o3(e4, t4, a3) {
    a3 = a3 || [488e-6, 0, 0, 488e-6, 0, 0], s3.call(this, a3), this.glyphs = e4, this.cmap = t4, this.compiledGlyphs = [];
  }
  function f2(e4, t4, a3, r4) {
    a3 = a3 || [1e-3, 0, 0, 1e-3, 0, 0], s3.call(this, a3), this.glyphs = e4.glyphs, this.gsubrs = e4.gsubrs || [], this.subrs = e4.subrs || [], this.cmap = t4, this.glyphNameMap = r4 || or, this.compiledGlyphs = [], this.gsubrsBias = this.gsubrs.length < 1240 ? 107 : this.gsubrs.length < 33900 ? 1131 : 32768, this.subrsBias = this.subrs.length < 1240 ? 107 : this.subrs.length < 33900 ? 1131 : 32768;
  }
  return s3.prototype = { getPathJs: function(e4) {
    var t4 = i3(this.cmap, e4), a3 = this.compiledGlyphs[t4];
    return a3 || (this.compiledGlyphs[t4] = a3 = this.compileGlyph(this.glyphs[t4])), a3;
  }, compileGlyph: function(e4) {
    if (!e4 || 0 === e4.length || 14 === e4[0]) return "";
    var t4 = [];
    return t4.push("c.save();"), t4.push("c.transform(" + this.fontMatrix.join(",") + ");"), t4.push("c.scale(size, -size);"), this.compileGlyphImpl(e4, t4), t4.push("c.restore();"), t4.join("\n");
  }, compileGlyphImpl: function() {
    Oe("Children classes should implement this.");
  }, hasBuiltPath: function(e4) {
    return i3(this.cmap, e4) in this.compiledGlyphs;
  } }, Qe.inherit(o3, s3, { compileGlyphImpl: function(e4, t4) {
    n3(e4, t4, this);
  } }), Qe.inherit(f2, s3, { compileGlyphImpl: function(e4, t4) {
    c3(e4, t4, this);
  } }), { create: function(i4) {
    for (var n4, c4, s4, l2, h3, u3, d3 = new Uint8Array(i4.data), g2 = t3(d3, 4), m3 = 0, p3 = 12; m3 < g2; m3++, p3 += 16) {
      var b3 = String.fromCharCode.apply(null, d3.subarray(p3, p3 + 4)), v3 = e3(d3, p3 + 8), y3 = e3(d3, p3 + 12);
      switch (b3) {
        case "cmap":
          n4 = a2(d3, v3);
          break;
        case "glyf":
          c4 = d3.subarray(v3, v3 + y3);
          break;
        case "loca":
          s4 = d3.subarray(v3, v3 + y3);
          break;
        case "head":
          u3 = t3(d3, v3 + 18), h3 = t3(d3, v3 + 50);
          break;
        case "CFF ":
          l2 = r3(d3, v3, v3 + y3);
      }
    }
    if (c4) {
      var k3 = u3 ? [1 / u3, 0, 0, 1 / u3, 0, 0] : i4.fontMatrix;
      return new o3(function(e4, t4, a3) {
        var r4, i5;
        a3 ? (r4 = 4, i5 = function(e5, t5) {
          return e5[t5] << 24 | e5[t5 + 1] << 16 | e5[t5 + 2] << 8 | e5[t5 + 3];
        }) : (r4 = 2, i5 = function(e5, t5) {
          return e5[t5] << 9 | e5[t5 + 1] << 1;
        });
        for (var n5 = [], c5 = i5(t4, 0), s5 = r4; s5 < t4.length; s5 += r4) {
          var o4 = i5(t4, s5);
          n5.push(e4.subarray(c5, o4)), c5 = o4;
        }
        return n5;
      }(c4, s4, h3), n4, k3);
    }
    return new f2(l2, n4, i4.fontMatrix, i4.glyphNameMap);
  } };
}();
var or = { A: 65, AE: 198, AEacute: 508, AEmacron: 482, AEsmall: 63462, Aacute: 193, Aacutesmall: 63457, Abreve: 258, Abreveacute: 7854, Abrevecyrillic: 1232, Abrevedotbelow: 7862, Abrevegrave: 7856, Abrevehookabove: 7858, Abrevetilde: 7860, Acaron: 461, Acircle: 9398, Acircumflex: 194, Acircumflexacute: 7844, Acircumflexdotbelow: 7852, Acircumflexgrave: 7846, Acircumflexhookabove: 7848, Acircumflexsmall: 63458, Acircumflextilde: 7850, Acute: 63177, Acutesmall: 63412, Acyrillic: 1040, Adblgrave: 512, Adieresis: 196, Adieresiscyrillic: 1234, Adieresismacron: 478, Adieresissmall: 63460, Adotbelow: 7840, Adotmacron: 480, Agrave: 192, Agravesmall: 63456, Ahookabove: 7842, Aiecyrillic: 1236, Ainvertedbreve: 514, Alpha: 913, Alphatonos: 902, Amacron: 256, Amonospace: 65313, Aogonek: 260, Aring: 197, Aringacute: 506, Aringbelow: 7680, Aringsmall: 63461, Asmall: 63329, Atilde: 195, Atildesmall: 63459, Aybarmenian: 1329, B: 66, Bcircle: 9399, Bdotaccent: 7682, Bdotbelow: 7684, Becyrillic: 1041, Benarmenian: 1330, Beta: 914, Bhook: 385, Blinebelow: 7686, Bmonospace: 65314, Brevesmall: 63220, Bsmall: 63330, Btopbar: 386, C: 67, Caarmenian: 1342, Cacute: 262, Caron: 63178, Caronsmall: 63221, Ccaron: 268, Ccedilla: 199, Ccedillaacute: 7688, Ccedillasmall: 63463, Ccircle: 9400, Ccircumflex: 264, Cdot: 266, Cdotaccent: 266, Cedillasmall: 63416, Chaarmenian: 1353, Cheabkhasiancyrillic: 1212, Checyrillic: 1063, Chedescenderabkhasiancyrillic: 1214, Chedescendercyrillic: 1206, Chedieresiscyrillic: 1268, Cheharmenian: 1347, Chekhakassiancyrillic: 1227, Cheverticalstrokecyrillic: 1208, Chi: 935, Chook: 391, Circumflexsmall: 63222, Cmonospace: 65315, Coarmenian: 1361, Csmall: 63331, D: 68, DZ: 497, DZcaron: 452, Daarmenian: 1332, Dafrican: 393, Dcaron: 270, Dcedilla: 7696, Dcircle: 9401, Dcircumflexbelow: 7698, Dcroat: 272, Ddotaccent: 7690, Ddotbelow: 7692, Decyrillic: 1044, Deicoptic: 1006, Delta: 8710, Deltagreek: 916, Dhook: 394, Dieresis: 63179, DieresisAcute: 63180, DieresisGrave: 63181, Dieresissmall: 63400, Digammagreek: 988, Djecyrillic: 1026, Dlinebelow: 7694, Dmonospace: 65316, Dotaccentsmall: 63223, Dslash: 272, Dsmall: 63332, Dtopbar: 395, Dz: 498, Dzcaron: 453, Dzeabkhasiancyrillic: 1248, Dzecyrillic: 1029, Dzhecyrillic: 1039, E: 69, Eacute: 201, Eacutesmall: 63465, Ebreve: 276, Ecaron: 282, Ecedillabreve: 7708, Echarmenian: 1333, Ecircle: 9402, Ecircumflex: 202, Ecircumflexacute: 7870, Ecircumflexbelow: 7704, Ecircumflexdotbelow: 7878, Ecircumflexgrave: 7872, Ecircumflexhookabove: 7874, Ecircumflexsmall: 63466, Ecircumflextilde: 7876, Ecyrillic: 1028, Edblgrave: 516, Edieresis: 203, Edieresissmall: 63467, Edot: 278, Edotaccent: 278, Edotbelow: 7864, Efcyrillic: 1060, Egrave: 200, Egravesmall: 63464, Eharmenian: 1335, Ehookabove: 7866, Eightroman: 8551, Einvertedbreve: 518, Eiotifiedcyrillic: 1124, Elcyrillic: 1051, Elevenroman: 8554, Emacron: 274, Emacronacute: 7702, Emacrongrave: 7700, Emcyrillic: 1052, Emonospace: 65317, Encyrillic: 1053, Endescendercyrillic: 1186, Eng: 330, Enghecyrillic: 1188, Enhookcyrillic: 1223, Eogonek: 280, Eopen: 400, Epsilon: 917, Epsilontonos: 904, Ercyrillic: 1056, Ereversed: 398, Ereversedcyrillic: 1069, Escyrillic: 1057, Esdescendercyrillic: 1194, Esh: 425, Esmall: 63333, Eta: 919, Etarmenian: 1336, Etatonos: 905, Eth: 208, Ethsmall: 63472, Etilde: 7868, Etildebelow: 7706, Euro: 8364, Ezh: 439, Ezhcaron: 494, Ezhreversed: 440, F: 70, Fcircle: 9403, Fdotaccent: 7710, Feharmenian: 1366, Feicoptic: 996, Fhook: 401, Fitacyrillic: 1138, Fiveroman: 8548, Fmonospace: 65318, Fourroman: 8547, Fsmall: 63334, G: 71, GBsquare: 13191, Gacute: 500, Gamma: 915, Gammaafrican: 404, Gangiacoptic: 1002, Gbreve: 286, Gcaron: 486, Gcedilla: 290, Gcircle: 9404, Gcircumflex: 284, Gcommaaccent: 290, Gdot: 288, Gdotaccent: 288, Gecyrillic: 1043, Ghadarmenian: 1346, Ghemiddlehookcyrillic: 1172, Ghestrokecyrillic: 1170, Gheupturncyrillic: 1168, Ghook: 403, Gimarmenian: 1331, Gjecyrillic: 1027, Gmacron: 7712, Gmonospace: 65319, Grave: 63182, Gravesmall: 63328, Gsmall: 63335, Gsmallhook: 667, Gstroke: 484, H: 72, H18533: 9679, H18543: 9642, H18551: 9643, H22073: 9633, HPsquare: 13259, Haabkhasiancyrillic: 1192, Hadescendercyrillic: 1202, Hardsigncyrillic: 1066, Hbar: 294, Hbrevebelow: 7722, Hcedilla: 7720, Hcircle: 9405, Hcircumflex: 292, Hdieresis: 7718, Hdotaccent: 7714, Hdotbelow: 7716, Hmonospace: 65320, Hoarmenian: 1344, Horicoptic: 1e3, Hsmall: 63336, Hungarumlaut: 63183, Hungarumlautsmall: 63224, Hzsquare: 13200, I: 73, IAcyrillic: 1071, IJ: 306, IUcyrillic: 1070, Iacute: 205, Iacutesmall: 63469, Ibreve: 300, Icaron: 463, Icircle: 9406, Icircumflex: 206, Icircumflexsmall: 63470, Icyrillic: 1030, Idblgrave: 520, Idieresis: 207, Idieresisacute: 7726, Idieresiscyrillic: 1252, Idieresissmall: 63471, Idot: 304, Idotaccent: 304, Idotbelow: 7882, Iebrevecyrillic: 1238, Iecyrillic: 1045, Ifraktur: 8465, Igrave: 204, Igravesmall: 63468, Ihookabove: 7880, Iicyrillic: 1048, Iinvertedbreve: 522, Iishortcyrillic: 1049, Imacron: 298, Imacroncyrillic: 1250, Imonospace: 65321, Iniarmenian: 1339, Iocyrillic: 1025, Iogonek: 302, Iota: 921, Iotaafrican: 406, Iotadieresis: 938, Iotatonos: 906, Ismall: 63337, Istroke: 407, Itilde: 296, Itildebelow: 7724, Izhitsacyrillic: 1140, Izhitsadblgravecyrillic: 1142, J: 74, Jaarmenian: 1345, Jcircle: 9407, Jcircumflex: 308, Jecyrillic: 1032, Jheharmenian: 1355, Jmonospace: 65322, Jsmall: 63338, K: 75, KBsquare: 13189, KKsquare: 13261, Kabashkircyrillic: 1184, Kacute: 7728, Kacyrillic: 1050, Kadescendercyrillic: 1178, Kahookcyrillic: 1219, Kappa: 922, Kastrokecyrillic: 1182, Kaverticalstrokecyrillic: 1180, Kcaron: 488, Kcedilla: 310, Kcircle: 9408, Kcommaaccent: 310, Kdotbelow: 7730, Keharmenian: 1364, Kenarmenian: 1343, Khacyrillic: 1061, Kheicoptic: 998, Khook: 408, Kjecyrillic: 1036, Klinebelow: 7732, Kmonospace: 65323, Koppacyrillic: 1152, Koppagreek: 990, Ksicyrillic: 1134, Ksmall: 63339, L: 76, LJ: 455, LL: 63167, Lacute: 313, Lambda: 923, Lcaron: 317, Lcedilla: 315, Lcircle: 9409, Lcircumflexbelow: 7740, Lcommaaccent: 315, Ldot: 319, Ldotaccent: 319, Ldotbelow: 7734, Ldotbelowmacron: 7736, Liwnarmenian: 1340, Lj: 456, Ljecyrillic: 1033, Llinebelow: 7738, Lmonospace: 65324, Lslash: 321, Lslashsmall: 63225, Lsmall: 63340, M: 77, MBsquare: 13190, Macron: 63184, Macronsmall: 63407, Macute: 7742, Mcircle: 9410, Mdotaccent: 7744, Mdotbelow: 7746, Menarmenian: 1348, Mmonospace: 65325, Msmall: 63341, Mturned: 412, Mu: 924, N: 78, NJ: 458, Nacute: 323, Ncaron: 327, Ncedilla: 325, Ncircle: 9411, Ncircumflexbelow: 7754, Ncommaaccent: 325, Ndotaccent: 7748, Ndotbelow: 7750, Nhookleft: 413, Nineroman: 8552, Nj: 459, Njecyrillic: 1034, Nlinebelow: 7752, Nmonospace: 65326, Nowarmenian: 1350, Nsmall: 63342, Ntilde: 209, Ntildesmall: 63473, Nu: 925, O: 79, OE: 338, OEsmall: 63226, Oacute: 211, Oacutesmall: 63475, Obarredcyrillic: 1256, Obarreddieresiscyrillic: 1258, Obreve: 334, Ocaron: 465, Ocenteredtilde: 415, Ocircle: 9412, Ocircumflex: 212, Ocircumflexacute: 7888, Ocircumflexdotbelow: 7896, Ocircumflexgrave: 7890, Ocircumflexhookabove: 7892, Ocircumflexsmall: 63476, Ocircumflextilde: 7894, Ocyrillic: 1054, Odblacute: 336, Odblgrave: 524, Odieresis: 214, Odieresiscyrillic: 1254, Odieresissmall: 63478, Odotbelow: 7884, Ogoneksmall: 63227, Ograve: 210, Ogravesmall: 63474, Oharmenian: 1365, Ohm: 8486, Ohookabove: 7886, Ohorn: 416, Ohornacute: 7898, Ohorndotbelow: 7906, Ohorngrave: 7900, Ohornhookabove: 7902, Ohorntilde: 7904, Ohungarumlaut: 336, Oi: 418, Oinvertedbreve: 526, Omacron: 332, Omacronacute: 7762, Omacrongrave: 7760, Omega: 8486, Omegacyrillic: 1120, Omegagreek: 937, Omegaroundcyrillic: 1146, Omegatitlocyrillic: 1148, Omegatonos: 911, Omicron: 927, Omicrontonos: 908, Omonospace: 65327, Oneroman: 8544, Oogonek: 490, Oogonekmacron: 492, Oopen: 390, Oslash: 216, Oslashacute: 510, Oslashsmall: 63480, Osmall: 63343, Ostrokeacute: 510, Otcyrillic: 1150, Otilde: 213, Otildeacute: 7756, Otildedieresis: 7758, Otildesmall: 63477, P: 80, Pacute: 7764, Pcircle: 9413, Pdotaccent: 7766, Pecyrillic: 1055, Peharmenian: 1354, Pemiddlehookcyrillic: 1190, Phi: 934, Phook: 420, Pi: 928, Piwrarmenian: 1363, Pmonospace: 65328, Psi: 936, Psicyrillic: 1136, Psmall: 63344, Q: 81, Qcircle: 9414, Qmonospace: 65329, Qsmall: 63345, R: 82, Raarmenian: 1356, Racute: 340, Rcaron: 344, Rcedilla: 342, Rcircle: 9415, Rcommaaccent: 342, Rdblgrave: 528, Rdotaccent: 7768, Rdotbelow: 7770, Rdotbelowmacron: 7772, Reharmenian: 1360, Rfraktur: 8476, Rho: 929, Ringsmall: 63228, Rinvertedbreve: 530, Rlinebelow: 7774, Rmonospace: 65330, Rsmall: 63346, Rsmallinverted: 641, Rsmallinvertedsuperior: 694, S: 83, SF010000: 9484, SF020000: 9492, SF030000: 9488, SF040000: 9496, SF050000: 9532, SF060000: 9516, SF070000: 9524, SF080000: 9500, SF090000: 9508, SF100000: 9472, SF110000: 9474, SF190000: 9569, SF200000: 9570, SF210000: 9558, SF220000: 9557, SF230000: 9571, SF240000: 9553, SF250000: 9559, SF260000: 9565, SF270000: 9564, SF280000: 9563, SF360000: 9566, SF370000: 9567, SF380000: 9562, SF390000: 9556, SF400000: 9577, SF410000: 9574, SF420000: 9568, SF430000: 9552, SF440000: 9580, SF450000: 9575, SF460000: 9576, SF470000: 9572, SF480000: 9573, SF490000: 9561, SF500000: 9560, SF510000: 9554, SF520000: 9555, SF530000: 9579, SF540000: 9578, Sacute: 346, Sacutedotaccent: 7780, Sampigreek: 992, Scaron: 352, Scarondotaccent: 7782, Scaronsmall: 63229, Scedilla: 350, Schwa: 399, Schwacyrillic: 1240, Schwadieresiscyrillic: 1242, Scircle: 9416, Scircumflex: 348, Scommaaccent: 536, Sdotaccent: 7776, Sdotbelow: 7778, Sdotbelowdotaccent: 7784, Seharmenian: 1357, Sevenroman: 8550, Shaarmenian: 1351, Shacyrillic: 1064, Shchacyrillic: 1065, Sheicoptic: 994, Shhacyrillic: 1210, Shimacoptic: 1004, Sigma: 931, Sixroman: 8549, Smonospace: 65331, Softsigncyrillic: 1068, Ssmall: 63347, Stigmagreek: 986, T: 84, Tau: 932, Tbar: 358, Tcaron: 356, Tcedilla: 354, Tcircle: 9417, Tcircumflexbelow: 7792, Tcommaaccent: 354, Tdotaccent: 7786, Tdotbelow: 7788, Tecyrillic: 1058, Tedescendercyrillic: 1196, Tenroman: 8553, Tetsecyrillic: 1204, Theta: 920, Thook: 428, Thorn: 222, Thornsmall: 63486, Threeroman: 8546, Tildesmall: 63230, Tiwnarmenian: 1359, Tlinebelow: 7790, Tmonospace: 65332, Toarmenian: 1337, Tonefive: 444, Tonesix: 388, Tonetwo: 423, Tretroflexhook: 430, Tsecyrillic: 1062, Tshecyrillic: 1035, Tsmall: 63348, Twelveroman: 8555, Tworoman: 8545, U: 85, Uacute: 218, Uacutesmall: 63482, Ubreve: 364, Ucaron: 467, Ucircle: 9418, Ucircumflex: 219, Ucircumflexbelow: 7798, Ucircumflexsmall: 63483, Ucyrillic: 1059, Udblacute: 368, Udblgrave: 532, Udieresis: 220, Udieresisacute: 471, Udieresisbelow: 7794, Udieresiscaron: 473, Udieresiscyrillic: 1264, Udieresisgrave: 475, Udieresismacron: 469, Udieresissmall: 63484, Udotbelow: 7908, Ugrave: 217, Ugravesmall: 63481, Uhookabove: 7910, Uhorn: 431, Uhornacute: 7912, Uhorndotbelow: 7920, Uhorngrave: 7914, Uhornhookabove: 7916, Uhorntilde: 7918, Uhungarumlaut: 368, Uhungarumlautcyrillic: 1266, Uinvertedbreve: 534, Ukcyrillic: 1144, Umacron: 362, Umacroncyrillic: 1262, Umacrondieresis: 7802, Umonospace: 65333, Uogonek: 370, Upsilon: 933, Upsilon1: 978, Upsilonacutehooksymbolgreek: 979, Upsilonafrican: 433, Upsilondieresis: 939, Upsilondieresishooksymbolgreek: 980, Upsilonhooksymbol: 978, Upsilontonos: 910, Uring: 366, Ushortcyrillic: 1038, Usmall: 63349, Ustraightcyrillic: 1198, Ustraightstrokecyrillic: 1200, Utilde: 360, Utildeacute: 7800, Utildebelow: 7796, V: 86, Vcircle: 9419, Vdotbelow: 7806, Vecyrillic: 1042, Vewarmenian: 1358, Vhook: 434, Vmonospace: 65334, Voarmenian: 1352, Vsmall: 63350, Vtilde: 7804, W: 87, Wacute: 7810, Wcircle: 9420, Wcircumflex: 372, Wdieresis: 7812, Wdotaccent: 7814, Wdotbelow: 7816, Wgrave: 7808, Wmonospace: 65335, Wsmall: 63351, X: 88, Xcircle: 9421, Xdieresis: 7820, Xdotaccent: 7818, Xeharmenian: 1341, Xi: 926, Xmonospace: 65336, Xsmall: 63352, Y: 89, Yacute: 221, Yacutesmall: 63485, Yatcyrillic: 1122, Ycircle: 9422, Ycircumflex: 374, Ydieresis: 376, Ydieresissmall: 63487, Ydotaccent: 7822, Ydotbelow: 7924, Yericyrillic: 1067, Yerudieresiscyrillic: 1272, Ygrave: 7922, Yhook: 435, Yhookabove: 7926, Yiarmenian: 1349, Yicyrillic: 1031, Yiwnarmenian: 1362, Ymonospace: 65337, Ysmall: 63353, Ytilde: 7928, Yusbigcyrillic: 1130, Yusbigiotifiedcyrillic: 1132, Yuslittlecyrillic: 1126, Yuslittleiotifiedcyrillic: 1128, Z: 90, Zaarmenian: 1334, Zacute: 377, Zcaron: 381, Zcaronsmall: 63231, Zcircle: 9423, Zcircumflex: 7824, Zdot: 379, Zdotaccent: 379, Zdotbelow: 7826, Zecyrillic: 1047, Zedescendercyrillic: 1176, Zedieresiscyrillic: 1246, Zeta: 918, Zhearmenian: 1338, Zhebrevecyrillic: 1217, Zhecyrillic: 1046, Zhedescendercyrillic: 1174, Zhedieresiscyrillic: 1244, Zlinebelow: 7828, Zmonospace: 65338, Zsmall: 63354, Zstroke: 437, a: 97, aabengali: 2438, aacute: 225, aadeva: 2310, aagujarati: 2694, aagurmukhi: 2566, aamatragurmukhi: 2622, aarusquare: 13059, aavowelsignbengali: 2494, aavowelsigndeva: 2366, aavowelsigngujarati: 2750, abbreviationmarkarmenian: 1375, abbreviationsigndeva: 2416, abengali: 2437, abopomofo: 12570, abreve: 259, abreveacute: 7855, abrevecyrillic: 1233, abrevedotbelow: 7863, abrevegrave: 7857, abrevehookabove: 7859, abrevetilde: 7861, acaron: 462, acircle: 9424, acircumflex: 226, acircumflexacute: 7845, acircumflexdotbelow: 7853, acircumflexgrave: 7847, acircumflexhookabove: 7849, acircumflextilde: 7851, acute: 180, acutebelowcmb: 791, acutecmb: 769, acutecomb: 769, acutedeva: 2388, acutelowmod: 719, acutetonecmb: 833, acyrillic: 1072, adblgrave: 513, addakgurmukhi: 2673, adeva: 2309, adieresis: 228, adieresiscyrillic: 1235, adieresismacron: 479, adotbelow: 7841, adotmacron: 481, ae: 230, aeacute: 509, aekorean: 12624, aemacron: 483, afii00208: 8213, afii08941: 8356, afii10017: 1040, afii10018: 1041, afii10019: 1042, afii10020: 1043, afii10021: 1044, afii10022: 1045, afii10023: 1025, afii10024: 1046, afii10025: 1047, afii10026: 1048, afii10027: 1049, afii10028: 1050, afii10029: 1051, afii10030: 1052, afii10031: 1053, afii10032: 1054, afii10033: 1055, afii10034: 1056, afii10035: 1057, afii10036: 1058, afii10037: 1059, afii10038: 1060, afii10039: 1061, afii10040: 1062, afii10041: 1063, afii10042: 1064, afii10043: 1065, afii10044: 1066, afii10045: 1067, afii10046: 1068, afii10047: 1069, afii10048: 1070, afii10049: 1071, afii10050: 1168, afii10051: 1026, afii10052: 1027, afii10053: 1028, afii10054: 1029, afii10055: 1030, afii10056: 1031, afii10057: 1032, afii10058: 1033, afii10059: 1034, afii10060: 1035, afii10061: 1036, afii10062: 1038, afii10063: 63172, afii10064: 63173, afii10065: 1072, afii10066: 1073, afii10067: 1074, afii10068: 1075, afii10069: 1076, afii10070: 1077, afii10071: 1105, afii10072: 1078, afii10073: 1079, afii10074: 1080, afii10075: 1081, afii10076: 1082, afii10077: 1083, afii10078: 1084, afii10079: 1085, afii10080: 1086, afii10081: 1087, afii10082: 1088, afii10083: 1089, afii10084: 1090, afii10085: 1091, afii10086: 1092, afii10087: 1093, afii10088: 1094, afii10089: 1095, afii10090: 1096, afii10091: 1097, afii10092: 1098, afii10093: 1099, afii10094: 1100, afii10095: 1101, afii10096: 1102, afii10097: 1103, afii10098: 1169, afii10099: 1106, afii10100: 1107, afii10101: 1108, afii10102: 1109, afii10103: 1110, afii10104: 1111, afii10105: 1112, afii10106: 1113, afii10107: 1114, afii10108: 1115, afii10109: 1116, afii10110: 1118, afii10145: 1039, afii10146: 1122, afii10147: 1138, afii10148: 1140, afii10192: 63174, afii10193: 1119, afii10194: 1123, afii10195: 1139, afii10196: 1141, afii10831: 63175, afii10832: 63176, afii10846: 1241, afii299: 8206, afii300: 8207, afii301: 8205, afii57381: 1642, afii57388: 1548, afii57392: 1632, afii57393: 1633, afii57394: 1634, afii57395: 1635, afii57396: 1636, afii57397: 1637, afii57398: 1638, afii57399: 1639, afii57400: 1640, afii57401: 1641, afii57403: 1563, afii57407: 1567, afii57409: 1569, afii57410: 1570, afii57411: 1571, afii57412: 1572, afii57413: 1573, afii57414: 1574, afii57415: 1575, afii57416: 1576, afii57417: 1577, afii57418: 1578, afii57419: 1579, afii57420: 1580, afii57421: 1581, afii57422: 1582, afii57423: 1583, afii57424: 1584, afii57425: 1585, afii57426: 1586, afii57427: 1587, afii57428: 1588, afii57429: 1589, afii57430: 1590, afii57431: 1591, afii57432: 1592, afii57433: 1593, afii57434: 1594, afii57440: 1600, afii57441: 1601, afii57442: 1602, afii57443: 1603, afii57444: 1604, afii57445: 1605, afii57446: 1606, afii57448: 1608, afii57449: 1609, afii57450: 1610, afii57451: 1611, afii57452: 1612, afii57453: 1613, afii57454: 1614, afii57455: 1615, afii57456: 1616, afii57457: 1617, afii57458: 1618, afii57470: 1607, afii57505: 1700, afii57506: 1662, afii57507: 1670, afii57508: 1688, afii57509: 1711, afii57511: 1657, afii57512: 1672, afii57513: 1681, afii57514: 1722, afii57519: 1746, afii57534: 1749, afii57636: 8362, afii57645: 1470, afii57658: 1475, afii57664: 1488, afii57665: 1489, afii57666: 1490, afii57667: 1491, afii57668: 1492, afii57669: 1493, afii57670: 1494, afii57671: 1495, afii57672: 1496, afii57673: 1497, afii57674: 1498, afii57675: 1499, afii57676: 1500, afii57677: 1501, afii57678: 1502, afii57679: 1503, afii57680: 1504, afii57681: 1505, afii57682: 1506, afii57683: 1507, afii57684: 1508, afii57685: 1509, afii57686: 1510, afii57687: 1511, afii57688: 1512, afii57689: 1513, afii57690: 1514, afii57694: 64298, afii57695: 64299, afii57700: 64331, afii57705: 64287, afii57716: 1520, afii57717: 1521, afii57718: 1522, afii57723: 64309, afii57793: 1460, afii57794: 1461, afii57795: 1462, afii57796: 1467, afii57797: 1464, afii57798: 1463, afii57799: 1456, afii57800: 1458, afii57801: 1457, afii57802: 1459, afii57803: 1474, afii57804: 1473, afii57806: 1465, afii57807: 1468, afii57839: 1469, afii57841: 1471, afii57842: 1472, afii57929: 700, afii61248: 8453, afii61289: 8467, afii61352: 8470, afii61573: 8236, afii61574: 8237, afii61575: 8238, afii61664: 8204, afii63167: 1645, afii64937: 701, agrave: 224, agujarati: 2693, agurmukhi: 2565, ahiragana: 12354, ahookabove: 7843, aibengali: 2448, aibopomofo: 12574, aideva: 2320, aiecyrillic: 1237, aigujarati: 2704, aigurmukhi: 2576, aimatragurmukhi: 2632, ainarabic: 1593, ainfinalarabic: 65226, aininitialarabic: 65227, ainmedialarabic: 65228, ainvertedbreve: 515, aivowelsignbengali: 2504, aivowelsigndeva: 2376, aivowelsigngujarati: 2760, akatakana: 12450, akatakanahalfwidth: 65393, akorean: 12623, alef: 1488, alefarabic: 1575, alefdageshhebrew: 64304, aleffinalarabic: 65166, alefhamzaabovearabic: 1571, alefhamzaabovefinalarabic: 65156, alefhamzabelowarabic: 1573, alefhamzabelowfinalarabic: 65160, alefhebrew: 1488, aleflamedhebrew: 64335, alefmaddaabovearabic: 1570, alefmaddaabovefinalarabic: 65154, alefmaksuraarabic: 1609, alefmaksurafinalarabic: 65264, alefmaksurainitialarabic: 65267, alefmaksuramedialarabic: 65268, alefpatahhebrew: 64302, alefqamatshebrew: 64303, aleph: 8501, allequal: 8780, alpha: 945, alphatonos: 940, amacron: 257, amonospace: 65345, ampersand: 38, ampersandmonospace: 65286, ampersandsmall: 63270, amsquare: 13250, anbopomofo: 12578, angbopomofo: 12580, angbracketleft: 12296, angbracketright: 12297, angkhankhuthai: 3674, angle: 8736, anglebracketleft: 12296, anglebracketleftvertical: 65087, anglebracketright: 12297, anglebracketrightvertical: 65088, angleleft: 9001, angleright: 9002, angstrom: 8491, anoteleia: 903, anudattadeva: 2386, anusvarabengali: 2434, anusvaradeva: 2306, anusvaragujarati: 2690, aogonek: 261, apaatosquare: 13056, aparen: 9372, apostrophearmenian: 1370, apostrophemod: 700, apple: 63743, approaches: 8784, approxequal: 8776, approxequalorimage: 8786, approximatelyequal: 8773, araeaekorean: 12686, araeakorean: 12685, arc: 8978, arighthalfring: 7834, aring: 229, aringacute: 507, aringbelow: 7681, arrowboth: 8596, arrowdashdown: 8675, arrowdashleft: 8672, arrowdashright: 8674, arrowdashup: 8673, arrowdblboth: 8660, arrowdbldown: 8659, arrowdblleft: 8656, arrowdblright: 8658, arrowdblup: 8657, arrowdown: 8595, arrowdownleft: 8601, arrowdownright: 8600, arrowdownwhite: 8681, arrowheaddownmod: 709, arrowheadleftmod: 706, arrowheadrightmod: 707, arrowheadupmod: 708, arrowhorizex: 63719, arrowleft: 8592, arrowleftdbl: 8656, arrowleftdblstroke: 8653, arrowleftoverright: 8646, arrowleftwhite: 8678, arrowright: 8594, arrowrightdblstroke: 8655, arrowrightheavy: 10142, arrowrightoverleft: 8644, arrowrightwhite: 8680, arrowtableft: 8676, arrowtabright: 8677, arrowup: 8593, arrowupdn: 8597, arrowupdnbse: 8616, arrowupdownbase: 8616, arrowupleft: 8598, arrowupleftofdown: 8645, arrowupright: 8599, arrowupwhite: 8679, arrowvertex: 63718, asciicircum: 94, asciicircummonospace: 65342, asciitilde: 126, asciitildemonospace: 65374, ascript: 593, ascriptturned: 594, asmallhiragana: 12353, asmallkatakana: 12449, asmallkatakanahalfwidth: 65383, asterisk: 42, asteriskaltonearabic: 1645, asteriskarabic: 1645, asteriskmath: 8727, asteriskmonospace: 65290, asterisksmall: 65121, asterism: 8258, asuperior: 63209, asymptoticallyequal: 8771, at: 64, atilde: 227, atmonospace: 65312, atsmall: 65131, aturned: 592, aubengali: 2452, aubopomofo: 12576, audeva: 2324, augujarati: 2708, augurmukhi: 2580, aulengthmarkbengali: 2519, aumatragurmukhi: 2636, auvowelsignbengali: 2508, auvowelsigndeva: 2380, auvowelsigngujarati: 2764, avagrahadeva: 2365, aybarmenian: 1377, ayin: 1506, ayinaltonehebrew: 64288, ayinhebrew: 1506, b: 98, babengali: 2476, backslash: 92, backslashmonospace: 65340, badeva: 2348, bagujarati: 2732, bagurmukhi: 2604, bahiragana: 12400, bahtthai: 3647, bakatakana: 12496, bar: 124, barmonospace: 65372, bbopomofo: 12549, bcircle: 9425, bdotaccent: 7683, bdotbelow: 7685, beamedsixteenthnotes: 9836, because: 8757, becyrillic: 1073, beharabic: 1576, behfinalarabic: 65168, behinitialarabic: 65169, behiragana: 12409, behmedialarabic: 65170, behmeeminitialarabic: 64671, behmeemisolatedarabic: 64520, behnoonfinalarabic: 64621, bekatakana: 12505, benarmenian: 1378, bet: 1489, beta: 946, betasymbolgreek: 976, betdagesh: 64305, betdageshhebrew: 64305, bethebrew: 1489, betrafehebrew: 64332, bhabengali: 2477, bhadeva: 2349, bhagujarati: 2733, bhagurmukhi: 2605, bhook: 595, bihiragana: 12403, bikatakana: 12499, bilabialclick: 664, bindigurmukhi: 2562, birusquare: 13105, blackcircle: 9679, blackdiamond: 9670, blackdownpointingtriangle: 9660, blackleftpointingpointer: 9668, blackleftpointingtriangle: 9664, blacklenticularbracketleft: 12304, blacklenticularbracketleftvertical: 65083, blacklenticularbracketright: 12305, blacklenticularbracketrightvertical: 65084, blacklowerlefttriangle: 9699, blacklowerrighttriangle: 9698, blackrectangle: 9644, blackrightpointingpointer: 9658, blackrightpointingtriangle: 9654, blacksmallsquare: 9642, blacksmilingface: 9787, blacksquare: 9632, blackstar: 9733, blackupperlefttriangle: 9700, blackupperrighttriangle: 9701, blackuppointingsmalltriangle: 9652, blackuppointingtriangle: 9650, blank: 9251, blinebelow: 7687, block: 9608, bmonospace: 65346, bobaimaithai: 3610, bohiragana: 12412, bokatakana: 12508, bparen: 9373, bqsquare: 13251, braceex: 63732, braceleft: 123, braceleftbt: 63731, braceleftmid: 63730, braceleftmonospace: 65371, braceleftsmall: 65115, bracelefttp: 63729, braceleftvertical: 65079, braceright: 125, bracerightbt: 63742, bracerightmid: 63741, bracerightmonospace: 65373, bracerightsmall: 65116, bracerighttp: 63740, bracerightvertical: 65080, bracketleft: 91, bracketleftbt: 63728, bracketleftex: 63727, bracketleftmonospace: 65339, bracketlefttp: 63726, bracketright: 93, bracketrightbt: 63739, bracketrightex: 63738, bracketrightmonospace: 65341, bracketrighttp: 63737, breve: 728, brevebelowcmb: 814, brevecmb: 774, breveinvertedbelowcmb: 815, breveinvertedcmb: 785, breveinverteddoublecmb: 865, bridgebelowcmb: 810, bridgeinvertedbelowcmb: 826, brokenbar: 166, bstroke: 384, bsuperior: 63210, btopbar: 387, buhiragana: 12406, bukatakana: 12502, bullet: 8226, bulletinverse: 9688, bulletoperator: 8729, bullseye: 9678, c: 99, caarmenian: 1390, cabengali: 2458, cacute: 263, cadeva: 2330, cagujarati: 2714, cagurmukhi: 2586, calsquare: 13192, candrabindubengali: 2433, candrabinducmb: 784, candrabindudeva: 2305, candrabindugujarati: 2689, capslock: 8682, careof: 8453, caron: 711, caronbelowcmb: 812, caroncmb: 780, carriagereturn: 8629, cbopomofo: 12568, ccaron: 269, ccedilla: 231, ccedillaacute: 7689, ccircle: 9426, ccircumflex: 265, ccurl: 597, cdot: 267, cdotaccent: 267, cdsquare: 13253, cedilla: 184, cedillacmb: 807, cent: 162, centigrade: 8451, centinferior: 63199, centmonospace: 65504, centoldstyle: 63394, centsuperior: 63200, chaarmenian: 1401, chabengali: 2459, chadeva: 2331, chagujarati: 2715, chagurmukhi: 2587, chbopomofo: 12564, cheabkhasiancyrillic: 1213, checkmark: 10003, checyrillic: 1095, chedescenderabkhasiancyrillic: 1215, chedescendercyrillic: 1207, chedieresiscyrillic: 1269, cheharmenian: 1395, chekhakassiancyrillic: 1228, cheverticalstrokecyrillic: 1209, chi: 967, chieuchacirclekorean: 12919, chieuchaparenkorean: 12823, chieuchcirclekorean: 12905, chieuchkorean: 12618, chieuchparenkorean: 12809, chochangthai: 3594, chochanthai: 3592, chochingthai: 3593, chochoethai: 3596, chook: 392, cieucacirclekorean: 12918, cieucaparenkorean: 12822, cieuccirclekorean: 12904, cieuckorean: 12616, cieucparenkorean: 12808, cieucuparenkorean: 12828, circle: 9675, circlecopyrt: 169, circlemultiply: 8855, circleot: 8857, circleplus: 8853, circlepostalmark: 12342, circlewithlefthalfblack: 9680, circlewithrighthalfblack: 9681, circumflex: 710, circumflexbelowcmb: 813, circumflexcmb: 770, clear: 8999, clickalveolar: 450, clickdental: 448, clicklateral: 449, clickretroflex: 451, club: 9827, clubsuitblack: 9827, clubsuitwhite: 9831, cmcubedsquare: 13220, cmonospace: 65347, cmsquaredsquare: 13216, coarmenian: 1409, colon: 58, colonmonetary: 8353, colonmonospace: 65306, colonsign: 8353, colonsmall: 65109, colontriangularhalfmod: 721, colontriangularmod: 720, comma: 44, commaabovecmb: 787, commaaboverightcmb: 789, commaaccent: 63171, commaarabic: 1548, commaarmenian: 1373, commainferior: 63201, commamonospace: 65292, commareversedabovecmb: 788, commareversedmod: 701, commasmall: 65104, commasuperior: 63202, commaturnedabovecmb: 786, commaturnedmod: 699, compass: 9788, congruent: 8773, contourintegral: 8750, control: 8963, controlACK: 6, controlBEL: 7, controlBS: 8, controlCAN: 24, controlCR: 13, controlDC1: 17, controlDC2: 18, controlDC3: 19, controlDC4: 20, controlDEL: 127, controlDLE: 16, controlEM: 25, controlENQ: 5, controlEOT: 4, controlESC: 27, controlETB: 23, controlETX: 3, controlFF: 12, controlFS: 28, controlGS: 29, controlHT: 9, controlLF: 10, controlNAK: 21, controlRS: 30, controlSI: 15, controlSO: 14, controlSOT: 2, controlSTX: 1, controlSUB: 26, controlSYN: 22, controlUS: 31, controlVT: 11, copyright: 169, copyrightsans: 63721, copyrightserif: 63193, cornerbracketleft: 12300, cornerbracketlefthalfwidth: 65378, cornerbracketleftvertical: 65089, cornerbracketright: 12301, cornerbracketrighthalfwidth: 65379, cornerbracketrightvertical: 65090, corporationsquare: 13183, cosquare: 13255, coverkgsquare: 13254, cparen: 9374, cruzeiro: 8354, cstretched: 663, curlyand: 8911, curlyor: 8910, currency: 164, cyrBreve: 63185, cyrFlex: 63186, cyrbreve: 63188, cyrflex: 63189, d: 100, daarmenian: 1380, dabengali: 2470, dadarabic: 1590, dadeva: 2342, dadfinalarabic: 65214, dadinitialarabic: 65215, dadmedialarabic: 65216, dagesh: 1468, dageshhebrew: 1468, dagger: 8224, daggerdbl: 8225, dagujarati: 2726, dagurmukhi: 2598, dahiragana: 12384, dakatakana: 12480, dalarabic: 1583, dalet: 1491, daletdagesh: 64307, daletdageshhebrew: 64307, dalethebrew: 1491, dalfinalarabic: 65194, dammaarabic: 1615, dammalowarabic: 1615, dammatanaltonearabic: 1612, dammatanarabic: 1612, danda: 2404, dargahebrew: 1447, dargalefthebrew: 1447, dasiapneumatacyrilliccmb: 1157, dblGrave: 63187, dblanglebracketleft: 12298, dblanglebracketleftvertical: 65085, dblanglebracketright: 12299, dblanglebracketrightvertical: 65086, dblarchinvertedbelowcmb: 811, dblarrowleft: 8660, dblarrowright: 8658, dbldanda: 2405, dblgrave: 63190, dblgravecmb: 783, dblintegral: 8748, dbllowline: 8215, dbllowlinecmb: 819, dbloverlinecmb: 831, dblprimemod: 698, dblverticalbar: 8214, dblverticallineabovecmb: 782, dbopomofo: 12553, dbsquare: 13256, dcaron: 271, dcedilla: 7697, dcircle: 9427, dcircumflexbelow: 7699, dcroat: 273, ddabengali: 2465, ddadeva: 2337, ddagujarati: 2721, ddagurmukhi: 2593, ddalarabic: 1672, ddalfinalarabic: 64393, dddhadeva: 2396, ddhabengali: 2466, ddhadeva: 2338, ddhagujarati: 2722, ddhagurmukhi: 2594, ddotaccent: 7691, ddotbelow: 7693, decimalseparatorarabic: 1643, decimalseparatorpersian: 1643, decyrillic: 1076, degree: 176, dehihebrew: 1453, dehiragana: 12391, deicoptic: 1007, dekatakana: 12487, deleteleft: 9003, deleteright: 8998, delta: 948, deltaturned: 397, denominatorminusonenumeratorbengali: 2552, dezh: 676, dhabengali: 2471, dhadeva: 2343, dhagujarati: 2727, dhagurmukhi: 2599, dhook: 599, dialytikatonos: 901, dialytikatonoscmb: 836, diamond: 9830, diamondsuitwhite: 9826, dieresis: 168, dieresisacute: 63191, dieresisbelowcmb: 804, dieresiscmb: 776, dieresisgrave: 63192, dieresistonos: 901, dihiragana: 12386, dikatakana: 12482, dittomark: 12291, divide: 247, divides: 8739, divisionslash: 8725, djecyrillic: 1106, dkshade: 9619, dlinebelow: 7695, dlsquare: 13207, dmacron: 273, dmonospace: 65348, dnblock: 9604, dochadathai: 3598, dodekthai: 3604, dohiragana: 12393, dokatakana: 12489, dollar: 36, dollarinferior: 63203, dollarmonospace: 65284, dollaroldstyle: 63268, dollarsmall: 65129, dollarsuperior: 63204, dong: 8363, dorusquare: 13094, dotaccent: 729, dotaccentcmb: 775, dotbelowcmb: 803, dotbelowcomb: 803, dotkatakana: 12539, dotlessi: 305, dotlessj: 63166, dotlessjstrokehook: 644, dotmath: 8901, dottedcircle: 9676, doubleyodpatah: 64287, doubleyodpatahhebrew: 64287, downtackbelowcmb: 798, downtackmod: 725, dparen: 9375, dsuperior: 63211, dtail: 598, dtopbar: 396, duhiragana: 12389, dukatakana: 12485, dz: 499, dzaltone: 675, dzcaron: 454, dzcurl: 677, dzeabkhasiancyrillic: 1249, dzecyrillic: 1109, dzhecyrillic: 1119, e: 101, eacute: 233, earth: 9793, ebengali: 2447, ebopomofo: 12572, ebreve: 277, ecandradeva: 2317, ecandragujarati: 2701, ecandravowelsigndeva: 2373, ecandravowelsigngujarati: 2757, ecaron: 283, ecedillabreve: 7709, echarmenian: 1381, echyiwnarmenian: 1415, ecircle: 9428, ecircumflex: 234, ecircumflexacute: 7871, ecircumflexbelow: 7705, ecircumflexdotbelow: 7879, ecircumflexgrave: 7873, ecircumflexhookabove: 7875, ecircumflextilde: 7877, ecyrillic: 1108, edblgrave: 517, edeva: 2319, edieresis: 235, edot: 279, edotaccent: 279, edotbelow: 7865, eegurmukhi: 2575, eematragurmukhi: 2631, efcyrillic: 1092, egrave: 232, egujarati: 2703, eharmenian: 1383, ehbopomofo: 12573, ehiragana: 12360, ehookabove: 7867, eibopomofo: 12575, eight: 56, eightarabic: 1640, eightbengali: 2542, eightcircle: 9319, eightcircleinversesansserif: 10129, eightdeva: 2414, eighteencircle: 9329, eighteenparen: 9349, eighteenperiod: 9369, eightgujarati: 2798, eightgurmukhi: 2670, eighthackarabic: 1640, eighthangzhou: 12328, eighthnotebeamed: 9835, eightideographicparen: 12839, eightinferior: 8328, eightmonospace: 65304, eightoldstyle: 63288, eightparen: 9339, eightperiod: 9359, eightpersian: 1784, eightroman: 8567, eightsuperior: 8312, eightthai: 3672, einvertedbreve: 519, eiotifiedcyrillic: 1125, ekatakana: 12456, ekatakanahalfwidth: 65396, ekonkargurmukhi: 2676, ekorean: 12628, elcyrillic: 1083, element: 8712, elevencircle: 9322, elevenparen: 9342, elevenperiod: 9362, elevenroman: 8570, ellipsis: 8230, ellipsisvertical: 8942, emacron: 275, emacronacute: 7703, emacrongrave: 7701, emcyrillic: 1084, emdash: 8212, emdashvertical: 65073, emonospace: 65349, emphasismarkarmenian: 1371, emptyset: 8709, enbopomofo: 12579, encyrillic: 1085, endash: 8211, endashvertical: 65074, endescendercyrillic: 1187, eng: 331, engbopomofo: 12581, enghecyrillic: 1189, enhookcyrillic: 1224, enspace: 8194, eogonek: 281, eokorean: 12627, eopen: 603, eopenclosed: 666, eopenreversed: 604, eopenreversedclosed: 606, eopenreversedhook: 605, eparen: 9376, epsilon: 949, epsilontonos: 941, equal: 61, equalmonospace: 65309, equalsmall: 65126, equalsuperior: 8316, equivalence: 8801, erbopomofo: 12582, ercyrillic: 1088, ereversed: 600, ereversedcyrillic: 1101, escyrillic: 1089, esdescendercyrillic: 1195, esh: 643, eshcurl: 646, eshortdeva: 2318, eshortvowelsigndeva: 2374, eshreversedloop: 426, eshsquatreversed: 645, esmallhiragana: 12359, esmallkatakana: 12455, esmallkatakanahalfwidth: 65386, estimated: 8494, esuperior: 63212, eta: 951, etarmenian: 1384, etatonos: 942, eth: 240, etilde: 7869, etildebelow: 7707, etnahtafoukhhebrew: 1425, etnahtafoukhlefthebrew: 1425, etnahtahebrew: 1425, etnahtalefthebrew: 1425, eturned: 477, eukorean: 12641, euro: 8364, evowelsignbengali: 2503, evowelsigndeva: 2375, evowelsigngujarati: 2759, exclam: 33, exclamarmenian: 1372, exclamdbl: 8252, exclamdown: 161, exclamdownsmall: 63393, exclammonospace: 65281, exclamsmall: 63265, existential: 8707, ezh: 658, ezhcaron: 495, ezhcurl: 659, ezhreversed: 441, ezhtail: 442, f: 102, fadeva: 2398, fagurmukhi: 2654, fahrenheit: 8457, fathaarabic: 1614, fathalowarabic: 1614, fathatanarabic: 1611, fbopomofo: 12552, fcircle: 9429, fdotaccent: 7711, feharabic: 1601, feharmenian: 1414, fehfinalarabic: 65234, fehinitialarabic: 65235, fehmedialarabic: 65236, feicoptic: 997, female: 9792, ff: 64256, ffi: 64259, ffl: 64260, fi: 64257, fifteencircle: 9326, fifteenparen: 9346, fifteenperiod: 9366, figuredash: 8210, filledbox: 9632, filledrect: 9644, finalkaf: 1498, finalkafdagesh: 64314, finalkafdageshhebrew: 64314, finalkafhebrew: 1498, finalmem: 1501, finalmemhebrew: 1501, finalnun: 1503, finalnunhebrew: 1503, finalpe: 1507, finalpehebrew: 1507, finaltsadi: 1509, finaltsadihebrew: 1509, firsttonechinese: 713, fisheye: 9673, fitacyrillic: 1139, five: 53, fivearabic: 1637, fivebengali: 2539, fivecircle: 9316, fivecircleinversesansserif: 10126, fivedeva: 2411, fiveeighths: 8541, fivegujarati: 2795, fivegurmukhi: 2667, fivehackarabic: 1637, fivehangzhou: 12325, fiveideographicparen: 12836, fiveinferior: 8325, fivemonospace: 65301, fiveoldstyle: 63285, fiveparen: 9336, fiveperiod: 9356, fivepersian: 1781, fiveroman: 8564, fivesuperior: 8309, fivethai: 3669, fl: 64258, florin: 402, fmonospace: 65350, fmsquare: 13209, fofanthai: 3615, fofathai: 3613, fongmanthai: 3663, forall: 8704, four: 52, fourarabic: 1636, fourbengali: 2538, fourcircle: 9315, fourcircleinversesansserif: 10125, fourdeva: 2410, fourgujarati: 2794, fourgurmukhi: 2666, fourhackarabic: 1636, fourhangzhou: 12324, fourideographicparen: 12835, fourinferior: 8324, fourmonospace: 65300, fournumeratorbengali: 2551, fouroldstyle: 63284, fourparen: 9335, fourperiod: 9355, fourpersian: 1780, fourroman: 8563, foursuperior: 8308, fourteencircle: 9325, fourteenparen: 9345, fourteenperiod: 9365, fourthai: 3668, fourthtonechinese: 715, fparen: 9377, fraction: 8260, franc: 8355, g: 103, gabengali: 2455, gacute: 501, gadeva: 2327, gafarabic: 1711, gaffinalarabic: 64403, gafinitialarabic: 64404, gafmedialarabic: 64405, gagujarati: 2711, gagurmukhi: 2583, gahiragana: 12364, gakatakana: 12460, gamma: 947, gammalatinsmall: 611, gammasuperior: 736, gangiacoptic: 1003, gbopomofo: 12557, gbreve: 287, gcaron: 487, gcedilla: 291, gcircle: 9430, gcircumflex: 285, gcommaaccent: 291, gdot: 289, gdotaccent: 289, gecyrillic: 1075, gehiragana: 12370, gekatakana: 12466, geometricallyequal: 8785, gereshaccenthebrew: 1436, gereshhebrew: 1523, gereshmuqdamhebrew: 1437, germandbls: 223, gershayimaccenthebrew: 1438, gershayimhebrew: 1524, getamark: 12307, ghabengali: 2456, ghadarmenian: 1394, ghadeva: 2328, ghagujarati: 2712, ghagurmukhi: 2584, ghainarabic: 1594, ghainfinalarabic: 65230, ghaininitialarabic: 65231, ghainmedialarabic: 65232, ghemiddlehookcyrillic: 1173, ghestrokecyrillic: 1171, gheupturncyrillic: 1169, ghhadeva: 2394, ghhagurmukhi: 2650, ghook: 608, ghzsquare: 13203, gihiragana: 12366, gikatakana: 12462, gimarmenian: 1379, gimel: 1490, gimeldagesh: 64306, gimeldageshhebrew: 64306, gimelhebrew: 1490, gjecyrillic: 1107, glottalinvertedstroke: 446, glottalstop: 660, glottalstopinverted: 662, glottalstopmod: 704, glottalstopreversed: 661, glottalstopreversedmod: 705, glottalstopreversedsuperior: 740, glottalstopstroke: 673, glottalstopstrokereversed: 674, gmacron: 7713, gmonospace: 65351, gohiragana: 12372, gokatakana: 12468, gparen: 9378, gpasquare: 13228, gradient: 8711, grave: 96, gravebelowcmb: 790, gravecmb: 768, gravecomb: 768, gravedeva: 2387, gravelowmod: 718, gravemonospace: 65344, gravetonecmb: 832, greater: 62, greaterequal: 8805, greaterequalorless: 8923, greatermonospace: 65310, greaterorequivalent: 8819, greaterorless: 8823, greateroverequal: 8807, greatersmall: 65125, gscript: 609, gstroke: 485, guhiragana: 12368, guillemotleft: 171, guillemotright: 187, guilsinglleft: 8249, guilsinglright: 8250, gukatakana: 12464, guramusquare: 13080, gysquare: 13257, h: 104, haabkhasiancyrillic: 1193, haaltonearabic: 1729, habengali: 2489, hadescendercyrillic: 1203, hadeva: 2361, hagujarati: 2745, hagurmukhi: 2617, haharabic: 1581, hahfinalarabic: 65186, hahinitialarabic: 65187, hahiragana: 12399, hahmedialarabic: 65188, haitusquare: 13098, hakatakana: 12495, hakatakanahalfwidth: 65418, halantgurmukhi: 2637, hamzaarabic: 1569, hamzalowarabic: 1569, hangulfiller: 12644, hardsigncyrillic: 1098, harpoonleftbarbup: 8636, harpoonrightbarbup: 8640, hasquare: 13258, hatafpatah: 1458, hatafpatah16: 1458, hatafpatah23: 1458, hatafpatah2f: 1458, hatafpatahhebrew: 1458, hatafpatahnarrowhebrew: 1458, hatafpatahquarterhebrew: 1458, hatafpatahwidehebrew: 1458, hatafqamats: 1459, hatafqamats1b: 1459, hatafqamats28: 1459, hatafqamats34: 1459, hatafqamatshebrew: 1459, hatafqamatsnarrowhebrew: 1459, hatafqamatsquarterhebrew: 1459, hatafqamatswidehebrew: 1459, hatafsegol: 1457, hatafsegol17: 1457, hatafsegol24: 1457, hatafsegol30: 1457, hatafsegolhebrew: 1457, hatafsegolnarrowhebrew: 1457, hatafsegolquarterhebrew: 1457, hatafsegolwidehebrew: 1457, hbar: 295, hbopomofo: 12559, hbrevebelow: 7723, hcedilla: 7721, hcircle: 9431, hcircumflex: 293, hdieresis: 7719, hdotaccent: 7715, hdotbelow: 7717, he: 1492, heart: 9829, heartsuitblack: 9829, heartsuitwhite: 9825, hedagesh: 64308, hedageshhebrew: 64308, hehaltonearabic: 1729, heharabic: 1607, hehebrew: 1492, hehfinalaltonearabic: 64423, hehfinalalttwoarabic: 65258, hehfinalarabic: 65258, hehhamzaabovefinalarabic: 64421, hehhamzaaboveisolatedarabic: 64420, hehinitialaltonearabic: 64424, hehinitialarabic: 65259, hehiragana: 12408, hehmedialaltonearabic: 64425, hehmedialarabic: 65260, heiseierasquare: 13179, hekatakana: 12504, hekatakanahalfwidth: 65421, hekutaarusquare: 13110, henghook: 615, herutusquare: 13113, het: 1495, hethebrew: 1495, hhook: 614, hhooksuperior: 689, hieuhacirclekorean: 12923, hieuhaparenkorean: 12827, hieuhcirclekorean: 12909, hieuhkorean: 12622, hieuhparenkorean: 12813, hihiragana: 12402, hikatakana: 12498, hikatakanahalfwidth: 65419, hiriq: 1460, hiriq14: 1460, hiriq21: 1460, hiriq2d: 1460, hiriqhebrew: 1460, hiriqnarrowhebrew: 1460, hiriqquarterhebrew: 1460, hiriqwidehebrew: 1460, hlinebelow: 7830, hmonospace: 65352, hoarmenian: 1392, hohipthai: 3627, hohiragana: 12411, hokatakana: 12507, hokatakanahalfwidth: 65422, holam: 1465, holam19: 1465, holam26: 1465, holam32: 1465, holamhebrew: 1465, holamnarrowhebrew: 1465, holamquarterhebrew: 1465, holamwidehebrew: 1465, honokhukthai: 3630, hookabovecomb: 777, hookcmb: 777, hookpalatalizedbelowcmb: 801, hookretroflexbelowcmb: 802, hoonsquare: 13122, horicoptic: 1001, horizontalbar: 8213, horncmb: 795, hotsprings: 9832, house: 8962, hparen: 9379, hsuperior: 688, hturned: 613, huhiragana: 12405, huiitosquare: 13107, hukatakana: 12501, hukatakanahalfwidth: 65420, hungarumlaut: 733, hungarumlautcmb: 779, hv: 405, hyphen: 45, hypheninferior: 63205, hyphenmonospace: 65293, hyphensmall: 65123, hyphensuperior: 63206, hyphentwo: 8208, i: 105, iacute: 237, iacyrillic: 1103, ibengali: 2439, ibopomofo: 12583, ibreve: 301, icaron: 464, icircle: 9432, icircumflex: 238, icyrillic: 1110, idblgrave: 521, ideographearthcircle: 12943, ideographfirecircle: 12939, ideographicallianceparen: 12863, ideographiccallparen: 12858, ideographiccentrecircle: 12965, ideographicclose: 12294, ideographiccomma: 12289, ideographiccommaleft: 65380, ideographiccongratulationparen: 12855, ideographiccorrectcircle: 12963, ideographicearthparen: 12847, ideographicenterpriseparen: 12861, ideographicexcellentcircle: 12957, ideographicfestivalparen: 12864, ideographicfinancialcircle: 12950, ideographicfinancialparen: 12854, ideographicfireparen: 12843, ideographichaveparen: 12850, ideographichighcircle: 12964, ideographiciterationmark: 12293, ideographiclaborcircle: 12952, ideographiclaborparen: 12856, ideographicleftcircle: 12967, ideographiclowcircle: 12966, ideographicmedicinecircle: 12969, ideographicmetalparen: 12846, ideographicmoonparen: 12842, ideographicnameparen: 12852, ideographicperiod: 12290, ideographicprintcircle: 12958, ideographicreachparen: 12867, ideographicrepresentparen: 12857, ideographicresourceparen: 12862, ideographicrightcircle: 12968, ideographicsecretcircle: 12953, ideographicselfparen: 12866, ideographicsocietyparen: 12851, ideographicspace: 12288, ideographicspecialparen: 12853, ideographicstockparen: 12849, ideographicstudyparen: 12859, ideographicsunparen: 12848, ideographicsuperviseparen: 12860, ideographicwaterparen: 12844, ideographicwoodparen: 12845, ideographiczero: 12295, ideographmetalcircle: 12942, ideographmooncircle: 12938, ideographnamecircle: 12948, ideographsuncircle: 12944, ideographwatercircle: 12940, ideographwoodcircle: 12941, ideva: 2311, idieresis: 239, idieresisacute: 7727, idieresiscyrillic: 1253, idotbelow: 7883, iebrevecyrillic: 1239, iecyrillic: 1077, ieungacirclekorean: 12917, ieungaparenkorean: 12821, ieungcirclekorean: 12903, ieungkorean: 12615, ieungparenkorean: 12807, igrave: 236, igujarati: 2695, igurmukhi: 2567, ihiragana: 12356, ihookabove: 7881, iibengali: 2440, iicyrillic: 1080, iideva: 2312, iigujarati: 2696, iigurmukhi: 2568, iimatragurmukhi: 2624, iinvertedbreve: 523, iishortcyrillic: 1081, iivowelsignbengali: 2496, iivowelsigndeva: 2368, iivowelsigngujarati: 2752, ij: 307, ikatakana: 12452, ikatakanahalfwidth: 65394, ikorean: 12643, ilde: 732, iluyhebrew: 1452, imacron: 299, imacroncyrillic: 1251, imageorapproximatelyequal: 8787, imatragurmukhi: 2623, imonospace: 65353, increment: 8710, infinity: 8734, iniarmenian: 1387, integral: 8747, integralbottom: 8993, integralbt: 8993, integralex: 63733, integraltop: 8992, integraltp: 8992, intersection: 8745, intisquare: 13061, invbullet: 9688, invcircle: 9689, invsmileface: 9787, iocyrillic: 1105, iogonek: 303, iota: 953, iotadieresis: 970, iotadieresistonos: 912, iotalatin: 617, iotatonos: 943, iparen: 9380, irigurmukhi: 2674, ismallhiragana: 12355, ismallkatakana: 12451, ismallkatakanahalfwidth: 65384, issharbengali: 2554, istroke: 616, isuperior: 63213, iterationhiragana: 12445, iterationkatakana: 12541, itilde: 297, itildebelow: 7725, iubopomofo: 12585, iucyrillic: 1102, ivowelsignbengali: 2495, ivowelsigndeva: 2367, ivowelsigngujarati: 2751, izhitsacyrillic: 1141, izhitsadblgravecyrillic: 1143, j: 106, jaarmenian: 1393, jabengali: 2460, jadeva: 2332, jagujarati: 2716, jagurmukhi: 2588, jbopomofo: 12560, jcaron: 496, jcircle: 9433, jcircumflex: 309, jcrossedtail: 669, jdotlessstroke: 607, jecyrillic: 1112, jeemarabic: 1580, jeemfinalarabic: 65182, jeeminitialarabic: 65183, jeemmedialarabic: 65184, jeharabic: 1688, jehfinalarabic: 64395, jhabengali: 2461, jhadeva: 2333, jhagujarati: 2717, jhagurmukhi: 2589, jheharmenian: 1403, jis: 12292, jmonospace: 65354, jparen: 9381, jsuperior: 690, k: 107, kabashkircyrillic: 1185, kabengali: 2453, kacute: 7729, kacyrillic: 1082, kadescendercyrillic: 1179, kadeva: 2325, kaf: 1499, kafarabic: 1603, kafdagesh: 64315, kafdageshhebrew: 64315, kaffinalarabic: 65242, kafhebrew: 1499, kafinitialarabic: 65243, kafmedialarabic: 65244, kafrafehebrew: 64333, kagujarati: 2709, kagurmukhi: 2581, kahiragana: 12363, kahookcyrillic: 1220, kakatakana: 12459, kakatakanahalfwidth: 65398, kappa: 954, kappasymbolgreek: 1008, kapyeounmieumkorean: 12657, kapyeounphieuphkorean: 12676, kapyeounpieupkorean: 12664, kapyeounssangpieupkorean: 12665, karoriisquare: 13069, kashidaautoarabic: 1600, kashidaautonosidebearingarabic: 1600, kasmallkatakana: 12533, kasquare: 13188, kasraarabic: 1616, kasratanarabic: 1613, kastrokecyrillic: 1183, katahiraprolongmarkhalfwidth: 65392, kaverticalstrokecyrillic: 1181, kbopomofo: 12558, kcalsquare: 13193, kcaron: 489, kcedilla: 311, kcircle: 9434, kcommaaccent: 311, kdotbelow: 7731, keharmenian: 1412, kehiragana: 12369, kekatakana: 12465, kekatakanahalfwidth: 65401, kenarmenian: 1391, kesmallkatakana: 12534, kgreenlandic: 312, khabengali: 2454, khacyrillic: 1093, khadeva: 2326, khagujarati: 2710, khagurmukhi: 2582, khaharabic: 1582, khahfinalarabic: 65190, khahinitialarabic: 65191, khahmedialarabic: 65192, kheicoptic: 999, khhadeva: 2393, khhagurmukhi: 2649, khieukhacirclekorean: 12920, khieukhaparenkorean: 12824, khieukhcirclekorean: 12906, khieukhkorean: 12619, khieukhparenkorean: 12810, khokhaithai: 3586, khokhonthai: 3589, khokhuatthai: 3587, khokhwaithai: 3588, khomutthai: 3675, khook: 409, khorakhangthai: 3590, khzsquare: 13201, kihiragana: 12365, kikatakana: 12461, kikatakanahalfwidth: 65399, kiroguramusquare: 13077, kiromeetorusquare: 13078, kirosquare: 13076, kiyeokacirclekorean: 12910, kiyeokaparenkorean: 12814, kiyeokcirclekorean: 12896, kiyeokkorean: 12593, kiyeokparenkorean: 12800, kiyeoksioskorean: 12595, kjecyrillic: 1116, klinebelow: 7733, klsquare: 13208, kmcubedsquare: 13222, kmonospace: 65355, kmsquaredsquare: 13218, kohiragana: 12371, kohmsquare: 13248, kokaithai: 3585, kokatakana: 12467, kokatakanahalfwidth: 65402, kooposquare: 13086, koppacyrillic: 1153, koreanstandardsymbol: 12927, koroniscmb: 835, kparen: 9382, kpasquare: 13226, ksicyrillic: 1135, ktsquare: 13263, kturned: 670, kuhiragana: 12367, kukatakana: 12463, kukatakanahalfwidth: 65400, kvsquare: 13240, kwsquare: 13246, l: 108, labengali: 2482, lacute: 314, ladeva: 2354, lagujarati: 2738, lagurmukhi: 2610, lakkhangyaothai: 3653, lamaleffinalarabic: 65276, lamalefhamzaabovefinalarabic: 65272, lamalefhamzaaboveisolatedarabic: 65271, lamalefhamzabelowfinalarabic: 65274, lamalefhamzabelowisolatedarabic: 65273, lamalefisolatedarabic: 65275, lamalefmaddaabovefinalarabic: 65270, lamalefmaddaaboveisolatedarabic: 65269, lamarabic: 1604, lambda: 955, lambdastroke: 411, lamed: 1500, lameddagesh: 64316, lameddageshhebrew: 64316, lamedhebrew: 1500, lamfinalarabic: 65246, lamhahinitialarabic: 64714, laminitialarabic: 65247, lamjeeminitialarabic: 64713, lamkhahinitialarabic: 64715, lamlamhehisolatedarabic: 65010, lammedialarabic: 65248, lammeemhahinitialarabic: 64904, lammeeminitialarabic: 64716, largecircle: 9711, lbar: 410, lbelt: 620, lbopomofo: 12556, lcaron: 318, lcedilla: 316, lcircle: 9435, lcircumflexbelow: 7741, lcommaaccent: 316, ldot: 320, ldotaccent: 320, ldotbelow: 7735, ldotbelowmacron: 7737, leftangleabovecmb: 794, lefttackbelowcmb: 792, less: 60, lessequal: 8804, lessequalorgreater: 8922, lessmonospace: 65308, lessorequivalent: 8818, lessorgreater: 8822, lessoverequal: 8806, lesssmall: 65124, lezh: 622, lfblock: 9612, lhookretroflex: 621, lira: 8356, liwnarmenian: 1388, lj: 457, ljecyrillic: 1113, ll: 63168, lladeva: 2355, llagujarati: 2739, llinebelow: 7739, llladeva: 2356, llvocalicbengali: 2529, llvocalicdeva: 2401, llvocalicvowelsignbengali: 2531, llvocalicvowelsigndeva: 2403, lmiddletilde: 619, lmonospace: 65356, lmsquare: 13264, lochulathai: 3628, logicaland: 8743, logicalnot: 172, logicalnotreversed: 8976, logicalor: 8744, lolingthai: 3621, longs: 383, lowlinecenterline: 65102, lowlinecmb: 818, lowlinedashed: 65101, lozenge: 9674, lparen: 9383, lslash: 322, lsquare: 8467, lsuperior: 63214, ltshade: 9617, luthai: 3622, lvocalicbengali: 2444, lvocalicdeva: 2316, lvocalicvowelsignbengali: 2530, lvocalicvowelsigndeva: 2402, lxsquare: 13267, m: 109, mabengali: 2478, macron: 175, macronbelowcmb: 817, macroncmb: 772, macronlowmod: 717, macronmonospace: 65507, macute: 7743, madeva: 2350, magujarati: 2734, magurmukhi: 2606, mahapakhhebrew: 1444, mahapakhlefthebrew: 1444, mahiragana: 12414, maichattawalowleftthai: 63637, maichattawalowrightthai: 63636, maichattawathai: 3659, maichattawaupperleftthai: 63635, maieklowleftthai: 63628, maieklowrightthai: 63627, maiekthai: 3656, maiekupperleftthai: 63626, maihanakatleftthai: 63620, maihanakatthai: 3633, maitaikhuleftthai: 63625, maitaikhuthai: 3655, maitholowleftthai: 63631, maitholowrightthai: 63630, maithothai: 3657, maithoupperleftthai: 63629, maitrilowleftthai: 63634, maitrilowrightthai: 63633, maitrithai: 3658, maitriupperleftthai: 63632, maiyamokthai: 3654, makatakana: 12510, makatakanahalfwidth: 65423, male: 9794, mansyonsquare: 13127, maqafhebrew: 1470, mars: 9794, masoracirclehebrew: 1455, masquare: 13187, mbopomofo: 12551, mbsquare: 13268, mcircle: 9436, mcubedsquare: 13221, mdotaccent: 7745, mdotbelow: 7747, meemarabic: 1605, meemfinalarabic: 65250, meeminitialarabic: 65251, meemmedialarabic: 65252, meemmeeminitialarabic: 64721, meemmeemisolatedarabic: 64584, meetorusquare: 13133, mehiragana: 12417, meizierasquare: 13182, mekatakana: 12513, mekatakanahalfwidth: 65426, mem: 1502, memdagesh: 64318, memdageshhebrew: 64318, memhebrew: 1502, menarmenian: 1396, merkhahebrew: 1445, merkhakefulahebrew: 1446, merkhakefulalefthebrew: 1446, merkhalefthebrew: 1445, mhook: 625, mhzsquare: 13202, middledotkatakanahalfwidth: 65381, middot: 183, mieumacirclekorean: 12914, mieumaparenkorean: 12818, mieumcirclekorean: 12900, mieumkorean: 12609, mieumpansioskorean: 12656, mieumparenkorean: 12804, mieumpieupkorean: 12654, mieumsioskorean: 12655, mihiragana: 12415, mikatakana: 12511, mikatakanahalfwidth: 65424, minus: 8722, minusbelowcmb: 800, minuscircle: 8854, minusmod: 727, minusplus: 8723, minute: 8242, miribaarusquare: 13130, mirisquare: 13129, mlonglegturned: 624, mlsquare: 13206, mmcubedsquare: 13219, mmonospace: 65357, mmsquaredsquare: 13215, mohiragana: 12418, mohmsquare: 13249, mokatakana: 12514, mokatakanahalfwidth: 65427, molsquare: 13270, momathai: 3617, moverssquare: 13223, moverssquaredsquare: 13224, mparen: 9384, mpasquare: 13227, mssquare: 13235, msuperior: 63215, mturned: 623, mu: 181, mu1: 181, muasquare: 13186, muchgreater: 8811, muchless: 8810, mufsquare: 13196, mugreek: 956, mugsquare: 13197, muhiragana: 12416, mukatakana: 12512, mukatakanahalfwidth: 65425, mulsquare: 13205, multiply: 215, mumsquare: 13211, munahhebrew: 1443, munahlefthebrew: 1443, musicalnote: 9834, musicalnotedbl: 9835, musicflatsign: 9837, musicsharpsign: 9839, mussquare: 13234, muvsquare: 13238, muwsquare: 13244, mvmegasquare: 13241, mvsquare: 13239, mwmegasquare: 13247, mwsquare: 13245, n: 110, nabengali: 2472, nabla: 8711, nacute: 324, nadeva: 2344, nagujarati: 2728, nagurmukhi: 2600, nahiragana: 12394, nakatakana: 12490, nakatakanahalfwidth: 65413, napostrophe: 329, nasquare: 13185, nbopomofo: 12555, nbspace: 160, ncaron: 328, ncedilla: 326, ncircle: 9437, ncircumflexbelow: 7755, ncommaaccent: 326, ndotaccent: 7749, ndotbelow: 7751, nehiragana: 12397, nekatakana: 12493, nekatakanahalfwidth: 65416, newsheqelsign: 8362, nfsquare: 13195, ngabengali: 2457, ngadeva: 2329, ngagujarati: 2713, ngagurmukhi: 2585, ngonguthai: 3591, nhiragana: 12435, nhookleft: 626, nhookretroflex: 627, nieunacirclekorean: 12911, nieunaparenkorean: 12815, nieuncieuckorean: 12597, nieuncirclekorean: 12897, nieunhieuhkorean: 12598, nieunkorean: 12596, nieunpansioskorean: 12648, nieunparenkorean: 12801, nieunsioskorean: 12647, nieuntikeutkorean: 12646, nihiragana: 12395, nikatakana: 12491, nikatakanahalfwidth: 65414, nikhahitleftthai: 63641, nikhahitthai: 3661, nine: 57, ninearabic: 1641, ninebengali: 2543, ninecircle: 9320, ninecircleinversesansserif: 10130, ninedeva: 2415, ninegujarati: 2799, ninegurmukhi: 2671, ninehackarabic: 1641, ninehangzhou: 12329, nineideographicparen: 12840, nineinferior: 8329, ninemonospace: 65305, nineoldstyle: 63289, nineparen: 9340, nineperiod: 9360, ninepersian: 1785, nineroman: 8568, ninesuperior: 8313, nineteencircle: 9330, nineteenparen: 9350, nineteenperiod: 9370, ninethai: 3673, nj: 460, njecyrillic: 1114, nkatakana: 12531, nkatakanahalfwidth: 65437, nlegrightlong: 414, nlinebelow: 7753, nmonospace: 65358, nmsquare: 13210, nnabengali: 2467, nnadeva: 2339, nnagujarati: 2723, nnagurmukhi: 2595, nnnadeva: 2345, nohiragana: 12398, nokatakana: 12494, nokatakanahalfwidth: 65417, nonbreakingspace: 160, nonenthai: 3603, nonuthai: 3609, noonarabic: 1606, noonfinalarabic: 65254, noonghunnaarabic: 1722, noonghunnafinalarabic: 64415, nooninitialarabic: 65255, noonjeeminitialarabic: 64722, noonjeemisolatedarabic: 64587, noonmedialarabic: 65256, noonmeeminitialarabic: 64725, noonmeemisolatedarabic: 64590, noonnoonfinalarabic: 64653, notcontains: 8716, notelement: 8713, notelementof: 8713, notequal: 8800, notgreater: 8815, notgreaternorequal: 8817, notgreaternorless: 8825, notidentical: 8802, notless: 8814, notlessnorequal: 8816, notparallel: 8742, notprecedes: 8832, notsubset: 8836, notsucceeds: 8833, notsuperset: 8837, nowarmenian: 1398, nparen: 9385, nssquare: 13233, nsuperior: 8319, ntilde: 241, nu: 957, nuhiragana: 12396, nukatakana: 12492, nukatakanahalfwidth: 65415, nuktabengali: 2492, nuktadeva: 2364, nuktagujarati: 2748, nuktagurmukhi: 2620, numbersign: 35, numbersignmonospace: 65283, numbersignsmall: 65119, numeralsigngreek: 884, numeralsignlowergreek: 885, numero: 8470, nun: 1504, nundagesh: 64320, nundageshhebrew: 64320, nunhebrew: 1504, nvsquare: 13237, nwsquare: 13243, nyabengali: 2462, nyadeva: 2334, nyagujarati: 2718, nyagurmukhi: 2590, o: 111, oacute: 243, oangthai: 3629, obarred: 629, obarredcyrillic: 1257, obarreddieresiscyrillic: 1259, obengali: 2451, obopomofo: 12571, obreve: 335, ocandradeva: 2321, ocandragujarati: 2705, ocandravowelsigndeva: 2377, ocandravowelsigngujarati: 2761, ocaron: 466, ocircle: 9438, ocircumflex: 244, ocircumflexacute: 7889, ocircumflexdotbelow: 7897, ocircumflexgrave: 7891, ocircumflexhookabove: 7893, ocircumflextilde: 7895, ocyrillic: 1086, odblacute: 337, odblgrave: 525, odeva: 2323, odieresis: 246, odieresiscyrillic: 1255, odotbelow: 7885, oe: 339, oekorean: 12634, ogonek: 731, ogonekcmb: 808, ograve: 242, ogujarati: 2707, oharmenian: 1413, ohiragana: 12362, ohookabove: 7887, ohorn: 417, ohornacute: 7899, ohorndotbelow: 7907, ohorngrave: 7901, ohornhookabove: 7903, ohorntilde: 7905, ohungarumlaut: 337, oi: 419, oinvertedbreve: 527, okatakana: 12458, okatakanahalfwidth: 65397, okorean: 12631, olehebrew: 1451, omacron: 333, omacronacute: 7763, omacrongrave: 7761, omdeva: 2384, omega: 969, omega1: 982, omegacyrillic: 1121, omegalatinclosed: 631, omegaroundcyrillic: 1147, omegatitlocyrillic: 1149, omegatonos: 974, omgujarati: 2768, omicron: 959, omicrontonos: 972, omonospace: 65359, one: 49, onearabic: 1633, onebengali: 2535, onecircle: 9312, onecircleinversesansserif: 10122, onedeva: 2407, onedotenleader: 8228, oneeighth: 8539, onefitted: 63196, onegujarati: 2791, onegurmukhi: 2663, onehackarabic: 1633, onehalf: 189, onehangzhou: 12321, oneideographicparen: 12832, oneinferior: 8321, onemonospace: 65297, onenumeratorbengali: 2548, oneoldstyle: 63281, oneparen: 9332, oneperiod: 9352, onepersian: 1777, onequarter: 188, oneroman: 8560, onesuperior: 185, onethai: 3665, onethird: 8531, oogonek: 491, oogonekmacron: 493, oogurmukhi: 2579, oomatragurmukhi: 2635, oopen: 596, oparen: 9386, openbullet: 9702, option: 8997, ordfeminine: 170, ordmasculine: 186, orthogonal: 8735, oshortdeva: 2322, oshortvowelsigndeva: 2378, oslash: 248, oslashacute: 511, osmallhiragana: 12361, osmallkatakana: 12457, osmallkatakanahalfwidth: 65387, ostrokeacute: 511, osuperior: 63216, otcyrillic: 1151, otilde: 245, otildeacute: 7757, otildedieresis: 7759, oubopomofo: 12577, overline: 8254, overlinecenterline: 65098, overlinecmb: 773, overlinedashed: 65097, overlinedblwavy: 65100, overlinewavy: 65099, overscore: 175, ovowelsignbengali: 2507, ovowelsigndeva: 2379, ovowelsigngujarati: 2763, p: 112, paampssquare: 13184, paasentosquare: 13099, pabengali: 2474, pacute: 7765, padeva: 2346, pagedown: 8671, pageup: 8670, pagujarati: 2730, pagurmukhi: 2602, pahiragana: 12401, paiyannoithai: 3631, pakatakana: 12497, palatalizationcyrilliccmb: 1156, palochkacyrillic: 1216, pansioskorean: 12671, paragraph: 182, parallel: 8741, parenleft: 40, parenleftaltonearabic: 64830, parenleftbt: 63725, parenleftex: 63724, parenleftinferior: 8333, parenleftmonospace: 65288, parenleftsmall: 65113, parenleftsuperior: 8317, parenlefttp: 63723, parenleftvertical: 65077, parenright: 41, parenrightaltonearabic: 64831, parenrightbt: 63736, parenrightex: 63735, parenrightinferior: 8334, parenrightmonospace: 65289, parenrightsmall: 65114, parenrightsuperior: 8318, parenrighttp: 63734, parenrightvertical: 65078, partialdiff: 8706, paseqhebrew: 1472, pashtahebrew: 1433, pasquare: 13225, patah: 1463, patah11: 1463, patah1d: 1463, patah2a: 1463, patahhebrew: 1463, patahnarrowhebrew: 1463, patahquarterhebrew: 1463, patahwidehebrew: 1463, pazerhebrew: 1441, pbopomofo: 12550, pcircle: 9439, pdotaccent: 7767, pe: 1508, pecyrillic: 1087, pedagesh: 64324, pedageshhebrew: 64324, peezisquare: 13115, pefinaldageshhebrew: 64323, peharabic: 1662, peharmenian: 1402, pehebrew: 1508, pehfinalarabic: 64343, pehinitialarabic: 64344, pehiragana: 12410, pehmedialarabic: 64345, pekatakana: 12506, pemiddlehookcyrillic: 1191, perafehebrew: 64334, percent: 37, percentarabic: 1642, percentmonospace: 65285, percentsmall: 65130, period: 46, periodarmenian: 1417, periodcentered: 183, periodhalfwidth: 65377, periodinferior: 63207, periodmonospace: 65294, periodsmall: 65106, periodsuperior: 63208, perispomenigreekcmb: 834, perpendicular: 8869, perthousand: 8240, peseta: 8359, pfsquare: 13194, phabengali: 2475, phadeva: 2347, phagujarati: 2731, phagurmukhi: 2603, phi: 966, phi1: 981, phieuphacirclekorean: 12922, phieuphaparenkorean: 12826, phieuphcirclekorean: 12908, phieuphkorean: 12621, phieuphparenkorean: 12812, philatin: 632, phinthuthai: 3642, phisymbolgreek: 981, phook: 421, phophanthai: 3614, phophungthai: 3612, phosamphaothai: 3616, pi: 960, pieupacirclekorean: 12915, pieupaparenkorean: 12819, pieupcieuckorean: 12662, pieupcirclekorean: 12901, pieupkiyeokkorean: 12658, pieupkorean: 12610, pieupparenkorean: 12805, pieupsioskiyeokkorean: 12660, pieupsioskorean: 12612, pieupsiostikeutkorean: 12661, pieupthieuthkorean: 12663, pieuptikeutkorean: 12659, pihiragana: 12404, pikatakana: 12500, pisymbolgreek: 982, piwrarmenian: 1411, plus: 43, plusbelowcmb: 799, pluscircle: 8853, plusminus: 177, plusmod: 726, plusmonospace: 65291, plussmall: 65122, plussuperior: 8314, pmonospace: 65360, pmsquare: 13272, pohiragana: 12413, pointingindexdownwhite: 9759, pointingindexleftwhite: 9756, pointingindexrightwhite: 9758, pointingindexupwhite: 9757, pokatakana: 12509, poplathai: 3611, postalmark: 12306, postalmarkface: 12320, pparen: 9387, precedes: 8826, prescription: 8478, primemod: 697, primereversed: 8245, product: 8719, projective: 8965, prolongedkana: 12540, propellor: 8984, propersubset: 8834, propersuperset: 8835, proportion: 8759, proportional: 8733, psi: 968, psicyrillic: 1137, psilipneumatacyrilliccmb: 1158, pssquare: 13232, puhiragana: 12407, pukatakana: 12503, pvsquare: 13236, pwsquare: 13242, q: 113, qadeva: 2392, qadmahebrew: 1448, qafarabic: 1602, qaffinalarabic: 65238, qafinitialarabic: 65239, qafmedialarabic: 65240, qamats: 1464, qamats10: 1464, qamats1a: 1464, qamats1c: 1464, qamats27: 1464, qamats29: 1464, qamats33: 1464, qamatsde: 1464, qamatshebrew: 1464, qamatsnarrowhebrew: 1464, qamatsqatanhebrew: 1464, qamatsqatannarrowhebrew: 1464, qamatsqatanquarterhebrew: 1464, qamatsqatanwidehebrew: 1464, qamatsquarterhebrew: 1464, qamatswidehebrew: 1464, qarneyparahebrew: 1439, qbopomofo: 12561, qcircle: 9440, qhook: 672, qmonospace: 65361, qof: 1511, qofdagesh: 64327, qofdageshhebrew: 64327, qofhebrew: 1511, qparen: 9388, quarternote: 9833, qubuts: 1467, qubuts18: 1467, qubuts25: 1467, qubuts31: 1467, qubutshebrew: 1467, qubutsnarrowhebrew: 1467, qubutsquarterhebrew: 1467, qubutswidehebrew: 1467, question: 63, questionarabic: 1567, questionarmenian: 1374, questiondown: 191, questiondownsmall: 63423, questiongreek: 894, questionmonospace: 65311, questionsmall: 63295, quotedbl: 34, quotedblbase: 8222, quotedblleft: 8220, quotedblmonospace: 65282, quotedblprime: 12318, quotedblprimereversed: 12317, quotedblright: 8221, quoteleft: 8216, quoteleftreversed: 8219, quotereversed: 8219, quoteright: 8217, quoterightn: 329, quotesinglbase: 8218, quotesingle: 39, quotesinglemonospace: 65287, r: 114, raarmenian: 1404, rabengali: 2480, racute: 341, radeva: 2352, radical: 8730, radicalex: 63717, radoverssquare: 13230, radoverssquaredsquare: 13231, radsquare: 13229, rafe: 1471, rafehebrew: 1471, ragujarati: 2736, ragurmukhi: 2608, rahiragana: 12425, rakatakana: 12521, rakatakanahalfwidth: 65431, ralowerdiagonalbengali: 2545, ramiddlediagonalbengali: 2544, ramshorn: 612, ratio: 8758, rbopomofo: 12566, rcaron: 345, rcedilla: 343, rcircle: 9441, rcommaaccent: 343, rdblgrave: 529, rdotaccent: 7769, rdotbelow: 7771, rdotbelowmacron: 7773, referencemark: 8251, reflexsubset: 8838, reflexsuperset: 8839, registered: 174, registersans: 63720, registerserif: 63194, reharabic: 1585, reharmenian: 1408, rehfinalarabic: 65198, rehiragana: 12428, rekatakana: 12524, rekatakanahalfwidth: 65434, resh: 1512, reshdageshhebrew: 64328, reshhebrew: 1512, reversedtilde: 8765, reviahebrew: 1431, reviamugrashhebrew: 1431, revlogicalnot: 8976, rfishhook: 638, rfishhookreversed: 639, rhabengali: 2525, rhadeva: 2397, rho: 961, rhook: 637, rhookturned: 635, rhookturnedsuperior: 693, rhosymbolgreek: 1009, rhotichookmod: 734, rieulacirclekorean: 12913, rieulaparenkorean: 12817, rieulcirclekorean: 12899, rieulhieuhkorean: 12608, rieulkiyeokkorean: 12602, rieulkiyeoksioskorean: 12649, rieulkorean: 12601, rieulmieumkorean: 12603, rieulpansioskorean: 12652, rieulparenkorean: 12803, rieulphieuphkorean: 12607, rieulpieupkorean: 12604, rieulpieupsioskorean: 12651, rieulsioskorean: 12605, rieulthieuthkorean: 12606, rieultikeutkorean: 12650, rieulyeorinhieuhkorean: 12653, rightangle: 8735, righttackbelowcmb: 793, righttriangle: 8895, rihiragana: 12426, rikatakana: 12522, rikatakanahalfwidth: 65432, ring: 730, ringbelowcmb: 805, ringcmb: 778, ringhalfleft: 703, ringhalfleftarmenian: 1369, ringhalfleftbelowcmb: 796, ringhalfleftcentered: 723, ringhalfright: 702, ringhalfrightbelowcmb: 825, ringhalfrightcentered: 722, rinvertedbreve: 531, rittorusquare: 13137, rlinebelow: 7775, rlongleg: 636, rlonglegturned: 634, rmonospace: 65362, rohiragana: 12429, rokatakana: 12525, rokatakanahalfwidth: 65435, roruathai: 3619, rparen: 9389, rrabengali: 2524, rradeva: 2353, rragurmukhi: 2652, rreharabic: 1681, rrehfinalarabic: 64397, rrvocalicbengali: 2528, rrvocalicdeva: 2400, rrvocalicgujarati: 2784, rrvocalicvowelsignbengali: 2500, rrvocalicvowelsigndeva: 2372, rrvocalicvowelsigngujarati: 2756, rsuperior: 63217, rtblock: 9616, rturned: 633, rturnedsuperior: 692, ruhiragana: 12427, rukatakana: 12523, rukatakanahalfwidth: 65433, rupeemarkbengali: 2546, rupeesignbengali: 2547, rupiah: 63197, ruthai: 3620, rvocalicbengali: 2443, rvocalicdeva: 2315, rvocalicgujarati: 2699, rvocalicvowelsignbengali: 2499, rvocalicvowelsigndeva: 2371, rvocalicvowelsigngujarati: 2755, s: 115, sabengali: 2488, sacute: 347, sacutedotaccent: 7781, sadarabic: 1589, sadeva: 2360, sadfinalarabic: 65210, sadinitialarabic: 65211, sadmedialarabic: 65212, sagujarati: 2744, sagurmukhi: 2616, sahiragana: 12373, sakatakana: 12469, sakatakanahalfwidth: 65403, sallallahoualayhewasallamarabic: 65018, samekh: 1505, samekhdagesh: 64321, samekhdageshhebrew: 64321, samekhhebrew: 1505, saraaathai: 3634, saraaethai: 3649, saraaimaimalaithai: 3652, saraaimaimuanthai: 3651, saraamthai: 3635, saraathai: 3632, saraethai: 3648, saraiileftthai: 63622, saraiithai: 3637, saraileftthai: 63621, saraithai: 3636, saraothai: 3650, saraueeleftthai: 63624, saraueethai: 3639, saraueleftthai: 63623, sarauethai: 3638, sarauthai: 3640, sarauuthai: 3641, sbopomofo: 12569, scaron: 353, scarondotaccent: 7783, scedilla: 351, schwa: 601, schwacyrillic: 1241, schwadieresiscyrillic: 1243, schwahook: 602, scircle: 9442, scircumflex: 349, scommaaccent: 537, sdotaccent: 7777, sdotbelow: 7779, sdotbelowdotaccent: 7785, seagullbelowcmb: 828, second: 8243, secondtonechinese: 714, section: 167, seenarabic: 1587, seenfinalarabic: 65202, seeninitialarabic: 65203, seenmedialarabic: 65204, segol: 1462, segol13: 1462, segol1f: 1462, segol2c: 1462, segolhebrew: 1462, segolnarrowhebrew: 1462, segolquarterhebrew: 1462, segoltahebrew: 1426, segolwidehebrew: 1462, seharmenian: 1405, sehiragana: 12379, sekatakana: 12475, sekatakanahalfwidth: 65406, semicolon: 59, semicolonarabic: 1563, semicolonmonospace: 65307, semicolonsmall: 65108, semivoicedmarkkana: 12444, semivoicedmarkkanahalfwidth: 65439, sentisquare: 13090, sentosquare: 13091, seven: 55, sevenarabic: 1639, sevenbengali: 2541, sevencircle: 9318, sevencircleinversesansserif: 10128, sevendeva: 2413, seveneighths: 8542, sevengujarati: 2797, sevengurmukhi: 2669, sevenhackarabic: 1639, sevenhangzhou: 12327, sevenideographicparen: 12838, seveninferior: 8327, sevenmonospace: 65303, sevenoldstyle: 63287, sevenparen: 9338, sevenperiod: 9358, sevenpersian: 1783, sevenroman: 8566, sevensuperior: 8311, seventeencircle: 9328, seventeenparen: 9348, seventeenperiod: 9368, seventhai: 3671, sfthyphen: 173, shaarmenian: 1399, shabengali: 2486, shacyrillic: 1096, shaddaarabic: 1617, shaddadammaarabic: 64609, shaddadammatanarabic: 64606, shaddafathaarabic: 64608, shaddakasraarabic: 64610, shaddakasratanarabic: 64607, shade: 9618, shadedark: 9619, shadelight: 9617, shademedium: 9618, shadeva: 2358, shagujarati: 2742, shagurmukhi: 2614, shalshelethebrew: 1427, shbopomofo: 12565, shchacyrillic: 1097, sheenarabic: 1588, sheenfinalarabic: 65206, sheeninitialarabic: 65207, sheenmedialarabic: 65208, sheicoptic: 995, sheqel: 8362, sheqelhebrew: 8362, sheva: 1456, sheva115: 1456, sheva15: 1456, sheva22: 1456, sheva2e: 1456, shevahebrew: 1456, shevanarrowhebrew: 1456, shevaquarterhebrew: 1456, shevawidehebrew: 1456, shhacyrillic: 1211, shimacoptic: 1005, shin: 1513, shindagesh: 64329, shindageshhebrew: 64329, shindageshshindot: 64300, shindageshshindothebrew: 64300, shindageshsindot: 64301, shindageshsindothebrew: 64301, shindothebrew: 1473, shinhebrew: 1513, shinshindot: 64298, shinshindothebrew: 64298, shinsindot: 64299, shinsindothebrew: 64299, shook: 642, sigma: 963, sigma1: 962, sigmafinal: 962, sigmalunatesymbolgreek: 1010, sihiragana: 12375, sikatakana: 12471, sikatakanahalfwidth: 65404, siluqhebrew: 1469, siluqlefthebrew: 1469, similar: 8764, sindothebrew: 1474, siosacirclekorean: 12916, siosaparenkorean: 12820, sioscieuckorean: 12670, sioscirclekorean: 12902, sioskiyeokkorean: 12666, sioskorean: 12613, siosnieunkorean: 12667, siosparenkorean: 12806, siospieupkorean: 12669, siostikeutkorean: 12668, six: 54, sixarabic: 1638, sixbengali: 2540, sixcircle: 9317, sixcircleinversesansserif: 10127, sixdeva: 2412, sixgujarati: 2796, sixgurmukhi: 2668, sixhackarabic: 1638, sixhangzhou: 12326, sixideographicparen: 12837, sixinferior: 8326, sixmonospace: 65302, sixoldstyle: 63286, sixparen: 9337, sixperiod: 9357, sixpersian: 1782, sixroman: 8565, sixsuperior: 8310, sixteencircle: 9327, sixteencurrencydenominatorbengali: 2553, sixteenparen: 9347, sixteenperiod: 9367, sixthai: 3670, slash: 47, slashmonospace: 65295, slong: 383, slongdotaccent: 7835, smileface: 9786, smonospace: 65363, sofpasuqhebrew: 1475, softhyphen: 173, softsigncyrillic: 1100, sohiragana: 12381, sokatakana: 12477, sokatakanahalfwidth: 65407, soliduslongoverlaycmb: 824, solidusshortoverlaycmb: 823, sorusithai: 3625, sosalathai: 3624, sosothai: 3595, sosuathai: 3626, space: 32, spacehackarabic: 32, spade: 9824, spadesuitblack: 9824, spadesuitwhite: 9828, sparen: 9390, squarebelowcmb: 827, squarecc: 13252, squarecm: 13213, squarediagonalcrosshatchfill: 9641, squarehorizontalfill: 9636, squarekg: 13199, squarekm: 13214, squarekmcapital: 13262, squareln: 13265, squarelog: 13266, squaremg: 13198, squaremil: 13269, squaremm: 13212, squaremsquared: 13217, squareorthogonalcrosshatchfill: 9638, squareupperlefttolowerrightfill: 9639, squareupperrighttolowerleftfill: 9640, squareverticalfill: 9637, squarewhitewithsmallblack: 9635, srsquare: 13275, ssabengali: 2487, ssadeva: 2359, ssagujarati: 2743, ssangcieuckorean: 12617, ssanghieuhkorean: 12677, ssangieungkorean: 12672, ssangkiyeokkorean: 12594, ssangnieunkorean: 12645, ssangpieupkorean: 12611, ssangsioskorean: 12614, ssangtikeutkorean: 12600, ssuperior: 63218, sterling: 163, sterlingmonospace: 65505, strokelongoverlaycmb: 822, strokeshortoverlaycmb: 821, subset: 8834, subsetnotequal: 8842, subsetorequal: 8838, succeeds: 8827, suchthat: 8715, suhiragana: 12377, sukatakana: 12473, sukatakanahalfwidth: 65405, sukunarabic: 1618, summation: 8721, sun: 9788, superset: 8835, supersetnotequal: 8843, supersetorequal: 8839, svsquare: 13276, syouwaerasquare: 13180, t: 116, tabengali: 2468, tackdown: 8868, tackleft: 8867, tadeva: 2340, tagujarati: 2724, tagurmukhi: 2596, taharabic: 1591, tahfinalarabic: 65218, tahinitialarabic: 65219, tahiragana: 12383, tahmedialarabic: 65220, taisyouerasquare: 13181, takatakana: 12479, takatakanahalfwidth: 65408, tatweelarabic: 1600, tau: 964, tav: 1514, tavdages: 64330, tavdagesh: 64330, tavdageshhebrew: 64330, tavhebrew: 1514, tbar: 359, tbopomofo: 12554, tcaron: 357, tccurl: 680, tcedilla: 355, tcheharabic: 1670, tchehfinalarabic: 64379, tchehinitialarabic: 64380, tchehmedialarabic: 64381, tcircle: 9443, tcircumflexbelow: 7793, tcommaaccent: 355, tdieresis: 7831, tdotaccent: 7787, tdotbelow: 7789, tecyrillic: 1090, tedescendercyrillic: 1197, teharabic: 1578, tehfinalarabic: 65174, tehhahinitialarabic: 64674, tehhahisolatedarabic: 64524, tehinitialarabic: 65175, tehiragana: 12390, tehjeeminitialarabic: 64673, tehjeemisolatedarabic: 64523, tehmarbutaarabic: 1577, tehmarbutafinalarabic: 65172, tehmedialarabic: 65176, tehmeeminitialarabic: 64676, tehmeemisolatedarabic: 64526, tehnoonfinalarabic: 64627, tekatakana: 12486, tekatakanahalfwidth: 65411, telephone: 8481, telephoneblack: 9742, telishagedolahebrew: 1440, telishaqetanahebrew: 1449, tencircle: 9321, tenideographicparen: 12841, tenparen: 9341, tenperiod: 9361, tenroman: 8569, tesh: 679, tet: 1496, tetdagesh: 64312, tetdageshhebrew: 64312, tethebrew: 1496, tetsecyrillic: 1205, tevirhebrew: 1435, tevirlefthebrew: 1435, thabengali: 2469, thadeva: 2341, thagujarati: 2725, thagurmukhi: 2597, thalarabic: 1584, thalfinalarabic: 65196, thanthakhatlowleftthai: 63640, thanthakhatlowrightthai: 63639, thanthakhatthai: 3660, thanthakhatupperleftthai: 63638, theharabic: 1579, thehfinalarabic: 65178, thehinitialarabic: 65179, thehmedialarabic: 65180, thereexists: 8707, therefore: 8756, theta: 952, theta1: 977, thetasymbolgreek: 977, thieuthacirclekorean: 12921, thieuthaparenkorean: 12825, thieuthcirclekorean: 12907, thieuthkorean: 12620, thieuthparenkorean: 12811, thirteencircle: 9324, thirteenparen: 9344, thirteenperiod: 9364, thonangmonthothai: 3601, thook: 429, thophuthaothai: 3602, thorn: 254, thothahanthai: 3607, thothanthai: 3600, thothongthai: 3608, thothungthai: 3606, thousandcyrillic: 1154, thousandsseparatorarabic: 1644, thousandsseparatorpersian: 1644, three: 51, threearabic: 1635, threebengali: 2537, threecircle: 9314, threecircleinversesansserif: 10124, threedeva: 2409, threeeighths: 8540, threegujarati: 2793, threegurmukhi: 2665, threehackarabic: 1635, threehangzhou: 12323, threeideographicparen: 12834, threeinferior: 8323, threemonospace: 65299, threenumeratorbengali: 2550, threeoldstyle: 63283, threeparen: 9334, threeperiod: 9354, threepersian: 1779, threequarters: 190, threequartersemdash: 63198, threeroman: 8562, threesuperior: 179, threethai: 3667, thzsquare: 13204, tihiragana: 12385, tikatakana: 12481, tikatakanahalfwidth: 65409, tikeutacirclekorean: 12912, tikeutaparenkorean: 12816, tikeutcirclekorean: 12898, tikeutkorean: 12599, tikeutparenkorean: 12802, tilde: 732, tildebelowcmb: 816, tildecmb: 771, tildecomb: 771, tildedoublecmb: 864, tildeoperator: 8764, tildeoverlaycmb: 820, tildeverticalcmb: 830, timescircle: 8855, tipehahebrew: 1430, tipehalefthebrew: 1430, tippigurmukhi: 2672, titlocyrilliccmb: 1155, tiwnarmenian: 1407, tlinebelow: 7791, tmonospace: 65364, toarmenian: 1385, tohiragana: 12392, tokatakana: 12488, tokatakanahalfwidth: 65412, tonebarextrahighmod: 741, tonebarextralowmod: 745, tonebarhighmod: 742, tonebarlowmod: 744, tonebarmidmod: 743, tonefive: 445, tonesix: 389, tonetwo: 424, tonos: 900, tonsquare: 13095, topatakthai: 3599, tortoiseshellbracketleft: 12308, tortoiseshellbracketleftsmall: 65117, tortoiseshellbracketleftvertical: 65081, tortoiseshellbracketright: 12309, tortoiseshellbracketrightsmall: 65118, tortoiseshellbracketrightvertical: 65082, totaothai: 3605, tpalatalhook: 427, tparen: 9391, trademark: 8482, trademarksans: 63722, trademarkserif: 63195, tretroflexhook: 648, triagdn: 9660, triaglf: 9668, triagrt: 9658, triagup: 9650, ts: 678, tsadi: 1510, tsadidagesh: 64326, tsadidageshhebrew: 64326, tsadihebrew: 1510, tsecyrillic: 1094, tsere: 1461, tsere12: 1461, tsere1e: 1461, tsere2b: 1461, tserehebrew: 1461, tserenarrowhebrew: 1461, tserequarterhebrew: 1461, tserewidehebrew: 1461, tshecyrillic: 1115, tsuperior: 63219, ttabengali: 2463, ttadeva: 2335, ttagujarati: 2719, ttagurmukhi: 2591, tteharabic: 1657, ttehfinalarabic: 64359, ttehinitialarabic: 64360, ttehmedialarabic: 64361, tthabengali: 2464, tthadeva: 2336, tthagujarati: 2720, tthagurmukhi: 2592, tturned: 647, tuhiragana: 12388, tukatakana: 12484, tukatakanahalfwidth: 65410, tusmallhiragana: 12387, tusmallkatakana: 12483, tusmallkatakanahalfwidth: 65391, twelvecircle: 9323, twelveparen: 9343, twelveperiod: 9363, twelveroman: 8571, twentycircle: 9331, twentyhangzhou: 21316, twentyparen: 9351, twentyperiod: 9371, two: 50, twoarabic: 1634, twobengali: 2536, twocircle: 9313, twocircleinversesansserif: 10123, twodeva: 2408, twodotenleader: 8229, twodotleader: 8229, twodotleadervertical: 65072, twogujarati: 2792, twogurmukhi: 2664, twohackarabic: 1634, twohangzhou: 12322, twoideographicparen: 12833, twoinferior: 8322, twomonospace: 65298, twonumeratorbengali: 2549, twooldstyle: 63282, twoparen: 9333, twoperiod: 9353, twopersian: 1778, tworoman: 8561, twostroke: 443, twosuperior: 178, twothai: 3666, twothirds: 8532, u: 117, uacute: 250, ubar: 649, ubengali: 2441, ubopomofo: 12584, ubreve: 365, ucaron: 468, ucircle: 9444, ucircumflex: 251, ucircumflexbelow: 7799, ucyrillic: 1091, udattadeva: 2385, udblacute: 369, udblgrave: 533, udeva: 2313, udieresis: 252, udieresisacute: 472, udieresisbelow: 7795, udieresiscaron: 474, udieresiscyrillic: 1265, udieresisgrave: 476, udieresismacron: 470, udotbelow: 7909, ugrave: 249, ugujarati: 2697, ugurmukhi: 2569, uhiragana: 12358, uhookabove: 7911, uhorn: 432, uhornacute: 7913, uhorndotbelow: 7921, uhorngrave: 7915, uhornhookabove: 7917, uhorntilde: 7919, uhungarumlaut: 369, uhungarumlautcyrillic: 1267, uinvertedbreve: 535, ukatakana: 12454, ukatakanahalfwidth: 65395, ukcyrillic: 1145, ukorean: 12636, umacron: 363, umacroncyrillic: 1263, umacrondieresis: 7803, umatragurmukhi: 2625, umonospace: 65365, underscore: 95, underscoredbl: 8215, underscoremonospace: 65343, underscorevertical: 65075, underscorewavy: 65103, union: 8746, universal: 8704, uogonek: 371, uparen: 9392, upblock: 9600, upperdothebrew: 1476, upsilon: 965, upsilondieresis: 971, upsilondieresistonos: 944, upsilonlatin: 650, upsilontonos: 973, uptackbelowcmb: 797, uptackmod: 724, uragurmukhi: 2675, uring: 367, ushortcyrillic: 1118, usmallhiragana: 12357, usmallkatakana: 12453, usmallkatakanahalfwidth: 65385, ustraightcyrillic: 1199, ustraightstrokecyrillic: 1201, utilde: 361, utildeacute: 7801, utildebelow: 7797, uubengali: 2442, uudeva: 2314, uugujarati: 2698, uugurmukhi: 2570, uumatragurmukhi: 2626, uuvowelsignbengali: 2498, uuvowelsigndeva: 2370, uuvowelsigngujarati: 2754, uvowelsignbengali: 2497, uvowelsigndeva: 2369, uvowelsigngujarati: 2753, v: 118, vadeva: 2357, vagujarati: 2741, vagurmukhi: 2613, vakatakana: 12535, vav: 1493, vavdagesh: 64309, vavdagesh65: 64309, vavdageshhebrew: 64309, vavhebrew: 1493, vavholam: 64331, vavholamhebrew: 64331, vavvavhebrew: 1520, vavyodhebrew: 1521, vcircle: 9445, vdotbelow: 7807, vecyrillic: 1074, veharabic: 1700, vehfinalarabic: 64363, vehinitialarabic: 64364, vehmedialarabic: 64365, vekatakana: 12537, venus: 9792, verticalbar: 124, verticallineabovecmb: 781, verticallinebelowcmb: 809, verticallinelowmod: 716, verticallinemod: 712, vewarmenian: 1406, vhook: 651, vikatakana: 12536, viramabengali: 2509, viramadeva: 2381, viramagujarati: 2765, visargabengali: 2435, visargadeva: 2307, visargagujarati: 2691, vmonospace: 65366, voarmenian: 1400, voicediterationhiragana: 12446, voicediterationkatakana: 12542, voicedmarkkana: 12443, voicedmarkkanahalfwidth: 65438, vokatakana: 12538, vparen: 9393, vtilde: 7805, vturned: 652, vuhiragana: 12436, vukatakana: 12532, w: 119, wacute: 7811, waekorean: 12633, wahiragana: 12431, wakatakana: 12527, wakatakanahalfwidth: 65436, wakorean: 12632, wasmallhiragana: 12430, wasmallkatakana: 12526, wattosquare: 13143, wavedash: 12316, wavyunderscorevertical: 65076, wawarabic: 1608, wawfinalarabic: 65262, wawhamzaabovearabic: 1572, wawhamzaabovefinalarabic: 65158, wbsquare: 13277, wcircle: 9446, wcircumflex: 373, wdieresis: 7813, wdotaccent: 7815, wdotbelow: 7817, wehiragana: 12433, weierstrass: 8472, wekatakana: 12529, wekorean: 12638, weokorean: 12637, wgrave: 7809, whitebullet: 9702, whitecircle: 9675, whitecircleinverse: 9689, whitecornerbracketleft: 12302, whitecornerbracketleftvertical: 65091, whitecornerbracketright: 12303, whitecornerbracketrightvertical: 65092, whitediamond: 9671, whitediamondcontainingblacksmalldiamond: 9672, whitedownpointingsmalltriangle: 9663, whitedownpointingtriangle: 9661, whiteleftpointingsmalltriangle: 9667, whiteleftpointingtriangle: 9665, whitelenticularbracketleft: 12310, whitelenticularbracketright: 12311, whiterightpointingsmalltriangle: 9657, whiterightpointingtriangle: 9655, whitesmallsquare: 9643, whitesmilingface: 9786, whitesquare: 9633, whitestar: 9734, whitetelephone: 9743, whitetortoiseshellbracketleft: 12312, whitetortoiseshellbracketright: 12313, whiteuppointingsmalltriangle: 9653, whiteuppointingtriangle: 9651, wihiragana: 12432, wikatakana: 12528, wikorean: 12639, wmonospace: 65367, wohiragana: 12434, wokatakana: 12530, wokatakanahalfwidth: 65382, won: 8361, wonmonospace: 65510, wowaenthai: 3623, wparen: 9394, wring: 7832, wsuperior: 695, wturned: 653, wynn: 447, x: 120, xabovecmb: 829, xbopomofo: 12562, xcircle: 9447, xdieresis: 7821, xdotaccent: 7819, xeharmenian: 1389, xi: 958, xmonospace: 65368, xparen: 9395, xsuperior: 739, y: 121, yaadosquare: 13134, yabengali: 2479, yacute: 253, yadeva: 2351, yaekorean: 12626, yagujarati: 2735, yagurmukhi: 2607, yahiragana: 12420, yakatakana: 12516, yakatakanahalfwidth: 65428, yakorean: 12625, yamakkanthai: 3662, yasmallhiragana: 12419, yasmallkatakana: 12515, yasmallkatakanahalfwidth: 65388, yatcyrillic: 1123, ycircle: 9448, ycircumflex: 375, ydieresis: 255, ydotaccent: 7823, ydotbelow: 7925, yeharabic: 1610, yehbarreearabic: 1746, yehbarreefinalarabic: 64431, yehfinalarabic: 65266, yehhamzaabovearabic: 1574, yehhamzaabovefinalarabic: 65162, yehhamzaaboveinitialarabic: 65163, yehhamzaabovemedialarabic: 65164, yehinitialarabic: 65267, yehmedialarabic: 65268, yehmeeminitialarabic: 64733, yehmeemisolatedarabic: 64600, yehnoonfinalarabic: 64660, yehthreedotsbelowarabic: 1745, yekorean: 12630, yen: 165, yenmonospace: 65509, yeokorean: 12629, yeorinhieuhkorean: 12678, yerahbenyomohebrew: 1450, yerahbenyomolefthebrew: 1450, yericyrillic: 1099, yerudieresiscyrillic: 1273, yesieungkorean: 12673, yesieungpansioskorean: 12675, yesieungsioskorean: 12674, yetivhebrew: 1434, ygrave: 7923, yhook: 436, yhookabove: 7927, yiarmenian: 1397, yicyrillic: 1111, yikorean: 12642, yinyang: 9775, yiwnarmenian: 1410, ymonospace: 65369, yod: 1497, yoddagesh: 64313, yoddageshhebrew: 64313, yodhebrew: 1497, yodyodhebrew: 1522, yodyodpatahhebrew: 64287, yohiragana: 12424, yoikorean: 12681, yokatakana: 12520, yokatakanahalfwidth: 65430, yokorean: 12635, yosmallhiragana: 12423, yosmallkatakana: 12519, yosmallkatakanahalfwidth: 65390, yotgreek: 1011, yoyaekorean: 12680, yoyakorean: 12679, yoyakthai: 3618, yoyingthai: 3597, yparen: 9396, ypogegrammeni: 890, ypogegrammenigreekcmb: 837, yr: 422, yring: 7833, ysuperior: 696, ytilde: 7929, yturned: 654, yuhiragana: 12422, yuikorean: 12684, yukatakana: 12518, yukatakanahalfwidth: 65429, yukorean: 12640, yusbigcyrillic: 1131, yusbigiotifiedcyrillic: 1133, yuslittlecyrillic: 1127, yuslittleiotifiedcyrillic: 1129, yusmallhiragana: 12421, yusmallkatakana: 12517, yusmallkatakanahalfwidth: 65389, yuyekorean: 12683, yuyeokorean: 12682, yyabengali: 2527, yyadeva: 2399, z: 122, zaarmenian: 1382, zacute: 378, zadeva: 2395, zagurmukhi: 2651, zaharabic: 1592, zahfinalarabic: 65222, zahinitialarabic: 65223, zahiragana: 12374, zahmedialarabic: 65224, zainarabic: 1586, zainfinalarabic: 65200, zakatakana: 12470, zaqefgadolhebrew: 1429, zaqefqatanhebrew: 1428, zarqahebrew: 1432, zayin: 1494, zayindagesh: 64310, zayindageshhebrew: 64310, zayinhebrew: 1494, zbopomofo: 12567, zcaron: 382, zcircle: 9449, zcircumflex: 7825, zcurl: 657, zdot: 380, zdotaccent: 380, zdotbelow: 7827, zecyrillic: 1079, zedescendercyrillic: 1177, zedieresiscyrillic: 1247, zehiragana: 12380, zekatakana: 12476, zero: 48, zeroarabic: 1632, zerobengali: 2534, zerodeva: 2406, zerogujarati: 2790, zerogurmukhi: 2662, zerohackarabic: 1632, zeroinferior: 8320, zeromonospace: 65296, zerooldstyle: 63280, zeropersian: 1776, zerosuperior: 8304, zerothai: 3664, zerowidthjoiner: 65279, zerowidthnonjoiner: 8204, zerowidthspace: 8203, zeta: 950, zhbopomofo: 12563, zhearmenian: 1386, zhebrevecyrillic: 1218, zhecyrillic: 1078, zhedescendercyrillic: 1175, zhedieresiscyrillic: 1245, zihiragana: 12376, zikatakana: 12472, zinorhebrew: 1454, zlinebelow: 7829, zmonospace: 65370, zohiragana: 12382, zokatakana: 12478, zparen: 9397, zretroflexhook: 656, zstroke: 438, zuhiragana: 12378, zukatakana: 12474, ".notdef": 0 };
var fr = function() {
  function e3(e4, t4, a3, r3, i3) {
    if (r3 instanceof Ar && r3.isNativelyDecodable(t4, a3)) {
      var n3 = r3.dict.get("ColorSpace", "CS"), c3 = (n3 = bt.parse(n3, t4, a3)).numComps;
      e4.send("JpegDecode", [r3.getIR(), c3], function(e5) {
        var t5 = e5.data, a4 = new pr(t5, 0, t5.length, r3.dict);
        i3.resolve(a4);
      });
    } else i3.resolve(r3);
  }
  function t3(e4, t4, a3, r3) {
    return (e4 = t4 + e4 * a3) < 0 ? 0 : e4 > r3 ? r3 : e4;
  }
  function a2(e4, t4, r3, i3, n3, c3, s3) {
    this.image = r3, r3.getParams && Me("get params from actual stream");
    var o3 = r3.dict;
    this.width = o3.get("Width", "W"), this.height = o3.get("Height", "H"), (this.width < 1 || this.height < 1) && Oe("Invalid image width: " + this.width + " or height: " + this.height), this.interpolate = o3.get("Interpolate", "I") || false, this.imageMask = o3.get("ImageMask", "IM") || false, this.matte = o3.get("Matte") || false;
    var f2 = r3.bitsPerComponent;
    if (f2 || (f2 = o3.get("BitsPerComponent", "BPC")) || (this.imageMask ? f2 = 1 : Oe("Bits per component missing in image: " + this.imageMask)), this.bpc = f2, !this.imageMask) {
      var l2 = o3.get("ColorSpace", "CS");
      l2 || (Me('JPX images (which don"t require color spaces'), l2 = new Jt("DeviceRGB")), this.colorSpace = bt.parse(l2, e4, t4), this.numComps = this.colorSpace.numComps;
    }
    if (this.decode = o3.get("Decode", "D"), this.needsDecode = false, this.decode && (this.colorSpace && !this.colorSpace.isDefaultDecode(this.decode) || s3 && !bt.isDefaultDecode(this.decode, 1))) {
      this.needsDecode = true;
      var h3 = (1 << f2) - 1;
      this.decodeCoefficients = [], this.decodeAddends = [];
      for (var u3 = 0, d3 = 0; u3 < this.decode.length; u3 += 2, ++d3) {
        var g2 = this.decode[u3], m3 = this.decode[u3 + 1];
        this.decodeCoefficients[d3] = m3 - g2, this.decodeAddends[d3] = h3 * g2;
      }
    }
    n3 ? this.smask = new a2(e4, t4, n3, false) : c3 && (lt(c3) ? this.mask = new a2(e4, t4, c3, false, null, null, true) : this.mask = c3);
  }
  return a2.buildImage = function(t4, r3, i3, n3, c3, s3) {
    var o3 = new gt(), f2 = new gt(), l2 = new gt();
    gt.all([o3, f2, l2]).then(function(e4) {
      var r4 = e4[0], c4 = e4[1], o4 = e4[2], f3 = new a2(i3, n3, r4, s3, c4, o4);
      t4(f3);
    }), e3(r3, i3, n3, c3, o3);
    var h3 = c3.dict.get("SMask"), u3 = c3.dict.get("Mask");
    h3 ? (e3(r3, i3, n3, h3, f2), l2.resolve(null)) : (f2.resolve(null), u3 ? lt(u3) ? e3(r3, i3, n3, u3, l2) : ft(u3) ? l2.resolve(u3) : (Re("Unsupported mask format."), l2.resolve(null)) : l2.resolve(null));
  }, a2.resize = function(e4, t4, a3, r3, i3, n3, c3) {
    for (var s3, o3, f2, l2 = n3 * c3 * a3, h3 = t4 <= 8 ? new Uint8Array(l2) : t4 <= 16 ? new Uint16Array(l2) : new Uint32Array(l2), u3 = r3 / n3, d3 = i3 / c3, g2 = 0; g2 < c3; g2++) for (var m3 = 0; m3 < n3; m3++) s3 = Math.floor(m3 * u3), o3 = g2 * n3 + m3, f2 = Math.floor(g2 * d3) * r3 + s3, 1 === a3 ? h3[o3] = e4[f2] : 3 === a3 && (f2 *= 3, h3[o3 *= 3] = e4[f2], h3[o3 + 1] = e4[f2 + 1], h3[o3 + 2] = e4[f2 + 2]);
    return h3;
  }, a2.createMask = function(e4, t4, a3, r3) {
    var i3, n3, c3, s3, o3 = new Uint8Array(t4 * a3 * 4), f2 = 0, l2 = 3;
    for (i3 = 0; i3 < a3; i3++) for (c3 = 0, n3 = 0; n3 < t4; n3++) c3 || (s3 = e4[f2++], c3 = 128), !(s3 & c3) !== r3 && (o3[l2] = 255), l2 += 4, c3 >>= 1;
    return { data: o3, width: t4, height: a3 };
  }, a2.prototype = { get drawWidth() {
    return this.smask ? Math.max(this.width, this.smask.width) : this.width;
  }, get drawHeight() {
    return this.smask ? Math.max(this.height, this.smask.height) : this.height;
  }, decodeBuffer: function(e4) {
    var a3 = this.bpc, r3 = (this.decode, this.numComps), i3 = this.decodeAddends, n3 = this.decodeCoefficients, c3 = (1 << a3) - 1;
    if (1 !== a3) {
      var s3 = 0;
      for (f2 = 0, l2 = this.width * this.height; f2 < l2; f2++) for (var o3 = 0; o3 < r3; o3++) e4[s3] = t3(e4[s3], i3[o3], n3[o3], c3), s3++;
    } else for (var f2 = 0, l2 = e4.length; f2 < l2; f2++) e4[f2] = +!e4[f2];
  }, getComponents: function(e4) {
    var t4 = this.bpc;
    if (8 === t4) return e4;
    e4.length;
    var a3 = this.width, r3 = this.height, i3 = this.numComps, n3 = a3 * r3 * i3, c3 = 0, s3 = t4 <= 8 ? new Uint8Array(n3) : t4 <= 16 ? new Uint16Array(n3) : new Uint32Array(n3), o3 = a3 * i3, f2 = (1 << t4) - 1;
    if (1 === t4) for (var l2 = 0, h3 = 0, u3 = 0, d3 = n3; u3 < d3; ++u3) u3 % o3 == 0 ? (l2 = 0, h3 = 0) : l2 >>= 1, l2 <= 0 && (h3 = e4[c3++], l2 = 128), s3[u3] = +!!(h3 & l2);
    else {
      var g2 = 0;
      for (h3 = 0, u3 = 0, d3 = n3; u3 < d3; ++u3) {
        for (u3 % o3 == 0 && (h3 = 0, g2 = 0); g2 < t4; ) h3 = h3 << 8 | e4[c3++], g2 += 8;
        var m3 = g2 - t4, p3 = h3 >> m3;
        s3[u3] = p3 < 0 ? 0 : p3 > f2 ? f2 : p3, h3 &= (1 << m3) - 1, g2 = m3;
      }
    }
    return s3;
  }, getOpacity: function(e4, t4, r3) {
    var i3, n3 = this.smask, c3 = this.mask;
    this.width, this.height;
    if (n3) {
      var s3 = n3.width, o3 = n3.height;
      i3 = new Uint8Array(s3 * o3), n3.fillGrayBuffer(i3), s3 == e4 && o3 == t4 || (i3 = a2.resize(i3, n3.bpc, 1, s3, o3, e4, t4));
    } else if (c3) if (c3 instanceof a2) {
      s3 = c3.width, o3 = c3.height;
      i3 = new Uint8Array(s3 * o3), c3.numComps = 1, c3.fillGrayBuffer(i3);
      for (var f2 = 0, l2 = s3 * o3; f2 < l2; ++f2) i3[f2] = 255 - i3[f2];
      s3 == e4 && o3 == t4 || (i3 = a2.resize(i3, c3.bpc, 1, s3, o3, e4, t4));
    } else if (ft(c3)) {
      i3 = new Uint8Array(e4 * t4);
      var h3 = this.numComps;
      for (f2 = 0, l2 = e4 * t4; f2 < l2; ++f2) {
        for (var u3 = 0, d3 = f2 * h3, g2 = 0; g2 < h3; ++g2) {
          var m3 = r3[d3 + g2], p3 = 2 * g2;
          if (m3 < c3[p3] || m3 > c3[p3 + 1]) {
            u3 = 255;
            break;
          }
        }
        i3[f2] = u3;
      }
    } else Oe("Unknown mask format.");
    else {
      i3 = new Uint8Array(e4 * t4);
      for (f2 = 0, l2 = e4 * t4; f2 < l2; ++f2) i3[f2] = 255;
    }
    return i3;
  }, undoPreblend: function(e4, t4, a3) {
    var r3 = this.smask && this.smask.matte;
    if (r3) for (var i3 = this.colorSpace.getRgb(r3, 0), n3 = t4 * a3 * 4, c3 = 0; c3 < n3; c3 += 4) {
      var s3 = e4[c3 + 3];
      if (0 !== s3) {
        var o3 = 255 / s3;
        e4[c3] = f2((e4[c3] - i3[0]) * o3 + i3[0]), e4[c3 + 1] = f2((e4[c3 + 1] - i3[1]) * o3 + i3[1]), e4[c3 + 2] = f2((e4[c3 + 2] - i3[2]) * o3 + i3[2]);
      } else e4[c3] = 255, e4[c3 + 1] = 255, e4[c3 + 2] = 255;
    }
    function f2(e5) {
      return 0 | (e5 < 0 ? 0 : e5 > 255 ? 255 : e5);
    }
  }, fillRgbaBuffer: function(e4, t4, r3) {
    var i3 = this.numComps, n3 = this.width, c3 = this.height, s3 = this.bpc, o3 = n3 * i3 * s3 + 7 >> 3, f2 = this.getImageBytes(c3 * o3), l2 = 0 | f2.length / o3 * r3 / c3, h3 = this.getComponents(f2), u3 = this.getOpacity(t4, r3, h3);
    this.needsDecode && this.decodeBuffer(h3);
    var d3 = this.colorSpace.createRgbBuffer(h3, 0, n3 * c3, s3);
    n3 == t4 && c3 == r3 || (d3 = a2.resize(d3, this.bpc, 3, n3, c3, t4, r3));
    for (var g2 = 0, m3 = 0, p3 = t4 * l2 * 4, b3 = 0; b3 < p3; b3 += 4) e4[b3] = d3[g2++], e4[b3 + 1] = d3[g2++], e4[b3 + 2] = d3[g2++], e4[b3 + 3] = u3[m3++];
    this.undoPreblend(e4, t4, l2);
  }, fillGrayBuffer: function(e4) {
    var t4 = this.numComps;
    1 != t4 && Oe("Reading gray scale from a color image: " + t4);
    var a3 = this.width, r3 = this.height, i3 = this.bpc, n3 = a3 * t4 * i3 + 7 >> 3, c3 = this.getImageBytes(r3 * n3), s3 = this.getComponents(c3);
    this.needsDecode && this.decodeBuffer(s3);
    for (var o3 = a3 * r3, f2 = 255 / ((1 << i3) - 1), l2 = 0; l2 < o3; ++l2) e4[l2] = f2 * s3[l2] | 0;
  }, getImageData: function() {
    var e4 = this.drawWidth, t4 = this.drawHeight, a3 = { width: e4, height: t4, data: new Uint8Array(e4 * t4 * 4) }, r3 = a3.data;
    try {
      this.fillRgbaBuffer(r3, e4, t4);
    } catch (e5) {
      Re("Unable to decode image: " + e5);
    }
    return a3;
  }, getImageBytes: function(e4) {
    return this.image.reset(), this.image.getBytes(e4);
  } }, a2;
}();
var lr = { Courier: 600, "Courier-Bold": 600, "Courier-BoldOblique": 600, "Courier-Oblique": 600, Helvetica: { space: 278, exclam: 278, quotedbl: 355, numbersign: 556, dollar: 556, percent: 889, ampersand: 667, quoteright: 222, parenleft: 333, parenright: 333, asterisk: 389, plus: 584, comma: 278, hyphen: 333, period: 278, slash: 278, zero: 556, one: 556, two: 556, three: 556, four: 556, five: 556, six: 556, seven: 556, eight: 556, nine: 556, colon: 278, semicolon: 278, less: 584, equal: 584, greater: 584, question: 556, at: 1015, A: 667, B: 667, C: 722, D: 722, E: 667, F: 611, G: 778, H: 722, I: 278, J: 500, K: 667, L: 556, M: 833, N: 722, O: 778, P: 667, Q: 778, R: 722, S: 667, T: 611, U: 722, V: 667, W: 944, X: 667, Y: 667, Z: 611, bracketleft: 278, backslash: 278, bracketright: 278, asciicircum: 469, underscore: 556, quoteleft: 222, a: 556, b: 556, c: 500, d: 556, e: 556, f: 278, g: 556, h: 556, i: 222, j: 222, k: 500, l: 222, m: 833, n: 556, o: 556, p: 556, q: 556, r: 333, s: 500, t: 278, u: 556, v: 500, w: 722, x: 500, y: 500, z: 500, braceleft: 334, bar: 260, braceright: 334, asciitilde: 584, exclamdown: 333, cent: 556, sterling: 556, fraction: 167, yen: 556, florin: 556, section: 556, currency: 556, quotesingle: 191, quotedblleft: 333, guillemotleft: 556, guilsinglleft: 333, guilsinglright: 333, fi: 500, fl: 500, endash: 556, dagger: 556, daggerdbl: 556, periodcentered: 278, paragraph: 537, bullet: 350, quotesinglbase: 222, quotedblbase: 333, quotedblright: 333, guillemotright: 556, ellipsis: 1e3, perthousand: 1e3, questiondown: 611, grave: 333, acute: 333, circumflex: 333, tilde: 333, macron: 333, breve: 333, dotaccent: 333, dieresis: 333, ring: 333, cedilla: 333, hungarumlaut: 333, ogonek: 333, caron: 333, emdash: 1e3, AE: 1e3, ordfeminine: 370, Lslash: 556, Oslash: 778, OE: 1e3, ordmasculine: 365, ae: 889, dotlessi: 278, lslash: 222, oslash: 611, oe: 944, germandbls: 611, Idieresis: 278, eacute: 556, abreve: 556, uhungarumlaut: 556, ecaron: 556, Ydieresis: 667, divide: 584, Yacute: 667, Acircumflex: 667, aacute: 556, Ucircumflex: 722, yacute: 500, scommaaccent: 500, ecircumflex: 556, Uring: 722, Udieresis: 722, aogonek: 556, Uacute: 722, uogonek: 556, Edieresis: 667, Dcroat: 722, commaaccent: 250, copyright: 737, Emacron: 667, ccaron: 500, aring: 556, Ncommaaccent: 722, lacute: 222, agrave: 556, Tcommaaccent: 611, Cacute: 722, atilde: 556, Edotaccent: 667, scaron: 500, scedilla: 500, iacute: 278, lozenge: 471, Rcaron: 722, Gcommaaccent: 778, ucircumflex: 556, acircumflex: 556, Amacron: 667, rcaron: 333, ccedilla: 500, Zdotaccent: 611, Thorn: 667, Omacron: 778, Racute: 722, Sacute: 667, dcaron: 643, Umacron: 722, uring: 556, threesuperior: 333, Ograve: 778, Agrave: 667, Abreve: 667, multiply: 584, uacute: 556, Tcaron: 611, partialdiff: 476, ydieresis: 500, Nacute: 722, icircumflex: 278, Ecircumflex: 667, adieresis: 556, edieresis: 556, cacute: 500, nacute: 556, umacron: 556, Ncaron: 722, Iacute: 278, plusminus: 584, brokenbar: 260, registered: 737, Gbreve: 778, Idotaccent: 278, summation: 600, Egrave: 667, racute: 333, omacron: 556, Zacute: 611, Zcaron: 611, greaterequal: 549, Eth: 722, Ccedilla: 722, lcommaaccent: 222, tcaron: 317, eogonek: 556, Uogonek: 722, Aacute: 667, Adieresis: 667, egrave: 556, zacute: 500, iogonek: 222, Oacute: 778, oacute: 556, amacron: 556, sacute: 500, idieresis: 278, Ocircumflex: 778, Ugrave: 722, Delta: 612, thorn: 556, twosuperior: 333, Odieresis: 778, mu: 556, igrave: 278, ohungarumlaut: 556, Eogonek: 667, dcroat: 556, threequarters: 834, Scedilla: 667, lcaron: 299, Kcommaaccent: 667, Lacute: 556, trademark: 1e3, edotaccent: 556, Igrave: 278, Imacron: 278, Lcaron: 556, onehalf: 834, lessequal: 549, ocircumflex: 556, ntilde: 556, Uhungarumlaut: 722, Eacute: 667, emacron: 556, gbreve: 556, onequarter: 834, Scaron: 667, Scommaaccent: 667, Ohungarumlaut: 778, degree: 400, ograve: 556, Ccaron: 722, ugrave: 556, radical: 453, Dcaron: 722, rcommaaccent: 333, Ntilde: 722, otilde: 556, Rcommaaccent: 722, Lcommaaccent: 556, Atilde: 667, Aogonek: 667, Aring: 667, Otilde: 778, zdotaccent: 500, Ecaron: 667, Iogonek: 278, kcommaaccent: 500, minus: 584, Icircumflex: 278, ncaron: 556, tcommaaccent: 278, logicalnot: 584, odieresis: 556, udieresis: 556, notequal: 549, gcommaaccent: 556, eth: 556, zcaron: 500, ncommaaccent: 556, onesuperior: 333, imacron: 278, Euro: 556 }, "Helvetica-Bold": { space: 278, exclam: 333, quotedbl: 474, numbersign: 556, dollar: 556, percent: 889, ampersand: 722, quoteright: 278, parenleft: 333, parenright: 333, asterisk: 389, plus: 584, comma: 278, hyphen: 333, period: 278, slash: 278, zero: 556, one: 556, two: 556, three: 556, four: 556, five: 556, six: 556, seven: 556, eight: 556, nine: 556, colon: 333, semicolon: 333, less: 584, equal: 584, greater: 584, question: 611, at: 975, A: 722, B: 722, C: 722, D: 722, E: 667, F: 611, G: 778, H: 722, I: 278, J: 556, K: 722, L: 611, M: 833, N: 722, O: 778, P: 667, Q: 778, R: 722, S: 667, T: 611, U: 722, V: 667, W: 944, X: 667, Y: 667, Z: 611, bracketleft: 333, backslash: 278, bracketright: 333, asciicircum: 584, underscore: 556, quoteleft: 278, a: 556, b: 611, c: 556, d: 611, e: 556, f: 333, g: 611, h: 611, i: 278, j: 278, k: 556, l: 278, m: 889, n: 611, o: 611, p: 611, q: 611, r: 389, s: 556, t: 333, u: 611, v: 556, w: 778, x: 556, y: 556, z: 500, braceleft: 389, bar: 280, braceright: 389, asciitilde: 584, exclamdown: 333, cent: 556, sterling: 556, fraction: 167, yen: 556, florin: 556, section: 556, currency: 556, quotesingle: 238, quotedblleft: 500, guillemotleft: 556, guilsinglleft: 333, guilsinglright: 333, fi: 611, fl: 611, endash: 556, dagger: 556, daggerdbl: 556, periodcentered: 278, paragraph: 556, bullet: 350, quotesinglbase: 278, quotedblbase: 500, quotedblright: 500, guillemotright: 556, ellipsis: 1e3, perthousand: 1e3, questiondown: 611, grave: 333, acute: 333, circumflex: 333, tilde: 333, macron: 333, breve: 333, dotaccent: 333, dieresis: 333, ring: 333, cedilla: 333, hungarumlaut: 333, ogonek: 333, caron: 333, emdash: 1e3, AE: 1e3, ordfeminine: 370, Lslash: 611, Oslash: 778, OE: 1e3, ordmasculine: 365, ae: 889, dotlessi: 278, lslash: 278, oslash: 611, oe: 944, germandbls: 611, Idieresis: 278, eacute: 556, abreve: 556, uhungarumlaut: 611, ecaron: 556, Ydieresis: 667, divide: 584, Yacute: 667, Acircumflex: 722, aacute: 556, Ucircumflex: 722, yacute: 556, scommaaccent: 556, ecircumflex: 556, Uring: 722, Udieresis: 722, aogonek: 556, Uacute: 722, uogonek: 611, Edieresis: 667, Dcroat: 722, commaaccent: 250, copyright: 737, Emacron: 667, ccaron: 556, aring: 556, Ncommaaccent: 722, lacute: 278, agrave: 556, Tcommaaccent: 611, Cacute: 722, atilde: 556, Edotaccent: 667, scaron: 556, scedilla: 556, iacute: 278, lozenge: 494, Rcaron: 722, Gcommaaccent: 778, ucircumflex: 611, acircumflex: 556, Amacron: 722, rcaron: 389, ccedilla: 556, Zdotaccent: 611, Thorn: 667, Omacron: 778, Racute: 722, Sacute: 667, dcaron: 743, Umacron: 722, uring: 611, threesuperior: 333, Ograve: 778, Agrave: 722, Abreve: 722, multiply: 584, uacute: 611, Tcaron: 611, partialdiff: 494, ydieresis: 556, Nacute: 722, icircumflex: 278, Ecircumflex: 667, adieresis: 556, edieresis: 556, cacute: 556, nacute: 611, umacron: 611, Ncaron: 722, Iacute: 278, plusminus: 584, brokenbar: 280, registered: 737, Gbreve: 778, Idotaccent: 278, summation: 600, Egrave: 667, racute: 389, omacron: 611, Zacute: 611, Zcaron: 611, greaterequal: 549, Eth: 722, Ccedilla: 722, lcommaaccent: 278, tcaron: 389, eogonek: 556, Uogonek: 722, Aacute: 722, Adieresis: 722, egrave: 556, zacute: 500, iogonek: 278, Oacute: 778, oacute: 611, amacron: 556, sacute: 556, idieresis: 278, Ocircumflex: 778, Ugrave: 722, Delta: 612, thorn: 611, twosuperior: 333, Odieresis: 778, mu: 611, igrave: 278, ohungarumlaut: 611, Eogonek: 667, dcroat: 611, threequarters: 834, Scedilla: 667, lcaron: 400, Kcommaaccent: 722, Lacute: 611, trademark: 1e3, edotaccent: 556, Igrave: 278, Imacron: 278, Lcaron: 611, onehalf: 834, lessequal: 549, ocircumflex: 611, ntilde: 611, Uhungarumlaut: 722, Eacute: 667, emacron: 556, gbreve: 611, onequarter: 834, Scaron: 667, Scommaaccent: 667, Ohungarumlaut: 778, degree: 400, ograve: 611, Ccaron: 722, ugrave: 611, radical: 549, Dcaron: 722, rcommaaccent: 389, Ntilde: 722, otilde: 611, Rcommaaccent: 722, Lcommaaccent: 611, Atilde: 722, Aogonek: 722, Aring: 722, Otilde: 778, zdotaccent: 500, Ecaron: 667, Iogonek: 278, kcommaaccent: 556, minus: 584, Icircumflex: 278, ncaron: 611, tcommaaccent: 333, logicalnot: 584, odieresis: 611, udieresis: 611, notequal: 549, gcommaaccent: 611, eth: 611, zcaron: 500, ncommaaccent: 611, onesuperior: 333, imacron: 278, Euro: 556 }, "Helvetica-BoldOblique": { space: 278, exclam: 333, quotedbl: 474, numbersign: 556, dollar: 556, percent: 889, ampersand: 722, quoteright: 278, parenleft: 333, parenright: 333, asterisk: 389, plus: 584, comma: 278, hyphen: 333, period: 278, slash: 278, zero: 556, one: 556, two: 556, three: 556, four: 556, five: 556, six: 556, seven: 556, eight: 556, nine: 556, colon: 333, semicolon: 333, less: 584, equal: 584, greater: 584, question: 611, at: 975, A: 722, B: 722, C: 722, D: 722, E: 667, F: 611, G: 778, H: 722, I: 278, J: 556, K: 722, L: 611, M: 833, N: 722, O: 778, P: 667, Q: 778, R: 722, S: 667, T: 611, U: 722, V: 667, W: 944, X: 667, Y: 667, Z: 611, bracketleft: 333, backslash: 278, bracketright: 333, asciicircum: 584, underscore: 556, quoteleft: 278, a: 556, b: 611, c: 556, d: 611, e: 556, f: 333, g: 611, h: 611, i: 278, j: 278, k: 556, l: 278, m: 889, n: 611, o: 611, p: 611, q: 611, r: 389, s: 556, t: 333, u: 611, v: 556, w: 778, x: 556, y: 556, z: 500, braceleft: 389, bar: 280, braceright: 389, asciitilde: 584, exclamdown: 333, cent: 556, sterling: 556, fraction: 167, yen: 556, florin: 556, section: 556, currency: 556, quotesingle: 238, quotedblleft: 500, guillemotleft: 556, guilsinglleft: 333, guilsinglright: 333, fi: 611, fl: 611, endash: 556, dagger: 556, daggerdbl: 556, periodcentered: 278, paragraph: 556, bullet: 350, quotesinglbase: 278, quotedblbase: 500, quotedblright: 500, guillemotright: 556, ellipsis: 1e3, perthousand: 1e3, questiondown: 611, grave: 333, acute: 333, circumflex: 333, tilde: 333, macron: 333, breve: 333, dotaccent: 333, dieresis: 333, ring: 333, cedilla: 333, hungarumlaut: 333, ogonek: 333, caron: 333, emdash: 1e3, AE: 1e3, ordfeminine: 370, Lslash: 611, Oslash: 778, OE: 1e3, ordmasculine: 365, ae: 889, dotlessi: 278, lslash: 278, oslash: 611, oe: 944, germandbls: 611, Idieresis: 278, eacute: 556, abreve: 556, uhungarumlaut: 611, ecaron: 556, Ydieresis: 667, divide: 584, Yacute: 667, Acircumflex: 722, aacute: 556, Ucircumflex: 722, yacute: 556, scommaaccent: 556, ecircumflex: 556, Uring: 722, Udieresis: 722, aogonek: 556, Uacute: 722, uogonek: 611, Edieresis: 667, Dcroat: 722, commaaccent: 250, copyright: 737, Emacron: 667, ccaron: 556, aring: 556, Ncommaaccent: 722, lacute: 278, agrave: 556, Tcommaaccent: 611, Cacute: 722, atilde: 556, Edotaccent: 667, scaron: 556, scedilla: 556, iacute: 278, lozenge: 494, Rcaron: 722, Gcommaaccent: 778, ucircumflex: 611, acircumflex: 556, Amacron: 722, rcaron: 389, ccedilla: 556, Zdotaccent: 611, Thorn: 667, Omacron: 778, Racute: 722, Sacute: 667, dcaron: 743, Umacron: 722, uring: 611, threesuperior: 333, Ograve: 778, Agrave: 722, Abreve: 722, multiply: 584, uacute: 611, Tcaron: 611, partialdiff: 494, ydieresis: 556, Nacute: 722, icircumflex: 278, Ecircumflex: 667, adieresis: 556, edieresis: 556, cacute: 556, nacute: 611, umacron: 611, Ncaron: 722, Iacute: 278, plusminus: 584, brokenbar: 280, registered: 737, Gbreve: 778, Idotaccent: 278, summation: 600, Egrave: 667, racute: 389, omacron: 611, Zacute: 611, Zcaron: 611, greaterequal: 549, Eth: 722, Ccedilla: 722, lcommaaccent: 278, tcaron: 389, eogonek: 556, Uogonek: 722, Aacute: 722, Adieresis: 722, egrave: 556, zacute: 500, iogonek: 278, Oacute: 778, oacute: 611, amacron: 556, sacute: 556, idieresis: 278, Ocircumflex: 778, Ugrave: 722, Delta: 612, thorn: 611, twosuperior: 333, Odieresis: 778, mu: 611, igrave: 278, ohungarumlaut: 611, Eogonek: 667, dcroat: 611, threequarters: 834, Scedilla: 667, lcaron: 400, Kcommaaccent: 722, Lacute: 611, trademark: 1e3, edotaccent: 556, Igrave: 278, Imacron: 278, Lcaron: 611, onehalf: 834, lessequal: 549, ocircumflex: 611, ntilde: 611, Uhungarumlaut: 722, Eacute: 667, emacron: 556, gbreve: 611, onequarter: 834, Scaron: 667, Scommaaccent: 667, Ohungarumlaut: 778, degree: 400, ograve: 611, Ccaron: 722, ugrave: 611, radical: 549, Dcaron: 722, rcommaaccent: 389, Ntilde: 722, otilde: 611, Rcommaaccent: 722, Lcommaaccent: 611, Atilde: 722, Aogonek: 722, Aring: 722, Otilde: 778, zdotaccent: 500, Ecaron: 667, Iogonek: 278, kcommaaccent: 556, minus: 584, Icircumflex: 278, ncaron: 611, tcommaaccent: 333, logicalnot: 584, odieresis: 611, udieresis: 611, notequal: 549, gcommaaccent: 611, eth: 611, zcaron: 500, ncommaaccent: 611, onesuperior: 333, imacron: 278, Euro: 556 }, "Helvetica-Oblique": { space: 278, exclam: 278, quotedbl: 355, numbersign: 556, dollar: 556, percent: 889, ampersand: 667, quoteright: 222, parenleft: 333, parenright: 333, asterisk: 389, plus: 584, comma: 278, hyphen: 333, period: 278, slash: 278, zero: 556, one: 556, two: 556, three: 556, four: 556, five: 556, six: 556, seven: 556, eight: 556, nine: 556, colon: 278, semicolon: 278, less: 584, equal: 584, greater: 584, question: 556, at: 1015, A: 667, B: 667, C: 722, D: 722, E: 667, F: 611, G: 778, H: 722, I: 278, J: 500, K: 667, L: 556, M: 833, N: 722, O: 778, P: 667, Q: 778, R: 722, S: 667, T: 611, U: 722, V: 667, W: 944, X: 667, Y: 667, Z: 611, bracketleft: 278, backslash: 278, bracketright: 278, asciicircum: 469, underscore: 556, quoteleft: 222, a: 556, b: 556, c: 500, d: 556, e: 556, f: 278, g: 556, h: 556, i: 222, j: 222, k: 500, l: 222, m: 833, n: 556, o: 556, p: 556, q: 556, r: 333, s: 500, t: 278, u: 556, v: 500, w: 722, x: 500, y: 500, z: 500, braceleft: 334, bar: 260, braceright: 334, asciitilde: 584, exclamdown: 333, cent: 556, sterling: 556, fraction: 167, yen: 556, florin: 556, section: 556, currency: 556, quotesingle: 191, quotedblleft: 333, guillemotleft: 556, guilsinglleft: 333, guilsinglright: 333, fi: 500, fl: 500, endash: 556, dagger: 556, daggerdbl: 556, periodcentered: 278, paragraph: 537, bullet: 350, quotesinglbase: 222, quotedblbase: 333, quotedblright: 333, guillemotright: 556, ellipsis: 1e3, perthousand: 1e3, questiondown: 611, grave: 333, acute: 333, circumflex: 333, tilde: 333, macron: 333, breve: 333, dotaccent: 333, dieresis: 333, ring: 333, cedilla: 333, hungarumlaut: 333, ogonek: 333, caron: 333, emdash: 1e3, AE: 1e3, ordfeminine: 370, Lslash: 556, Oslash: 778, OE: 1e3, ordmasculine: 365, ae: 889, dotlessi: 278, lslash: 222, oslash: 611, oe: 944, germandbls: 611, Idieresis: 278, eacute: 556, abreve: 556, uhungarumlaut: 556, ecaron: 556, Ydieresis: 667, divide: 584, Yacute: 667, Acircumflex: 667, aacute: 556, Ucircumflex: 722, yacute: 500, scommaaccent: 500, ecircumflex: 556, Uring: 722, Udieresis: 722, aogonek: 556, Uacute: 722, uogonek: 556, Edieresis: 667, Dcroat: 722, commaaccent: 250, copyright: 737, Emacron: 667, ccaron: 500, aring: 556, Ncommaaccent: 722, lacute: 222, agrave: 556, Tcommaaccent: 611, Cacute: 722, atilde: 556, Edotaccent: 667, scaron: 500, scedilla: 500, iacute: 278, lozenge: 471, Rcaron: 722, Gcommaaccent: 778, ucircumflex: 556, acircumflex: 556, Amacron: 667, rcaron: 333, ccedilla: 500, Zdotaccent: 611, Thorn: 667, Omacron: 778, Racute: 722, Sacute: 667, dcaron: 643, Umacron: 722, uring: 556, threesuperior: 333, Ograve: 778, Agrave: 667, Abreve: 667, multiply: 584, uacute: 556, Tcaron: 611, partialdiff: 476, ydieresis: 500, Nacute: 722, icircumflex: 278, Ecircumflex: 667, adieresis: 556, edieresis: 556, cacute: 500, nacute: 556, umacron: 556, Ncaron: 722, Iacute: 278, plusminus: 584, brokenbar: 260, registered: 737, Gbreve: 778, Idotaccent: 278, summation: 600, Egrave: 667, racute: 333, omacron: 556, Zacute: 611, Zcaron: 611, greaterequal: 549, Eth: 722, Ccedilla: 722, lcommaaccent: 222, tcaron: 317, eogonek: 556, Uogonek: 722, Aacute: 667, Adieresis: 667, egrave: 556, zacute: 500, iogonek: 222, Oacute: 778, oacute: 556, amacron: 556, sacute: 500, idieresis: 278, Ocircumflex: 778, Ugrave: 722, Delta: 612, thorn: 556, twosuperior: 333, Odieresis: 778, mu: 556, igrave: 278, ohungarumlaut: 556, Eogonek: 667, dcroat: 556, threequarters: 834, Scedilla: 667, lcaron: 299, Kcommaaccent: 667, Lacute: 556, trademark: 1e3, edotaccent: 556, Igrave: 278, Imacron: 278, Lcaron: 556, onehalf: 834, lessequal: 549, ocircumflex: 556, ntilde: 556, Uhungarumlaut: 722, Eacute: 667, emacron: 556, gbreve: 556, onequarter: 834, Scaron: 667, Scommaaccent: 667, Ohungarumlaut: 778, degree: 400, ograve: 556, Ccaron: 722, ugrave: 556, radical: 453, Dcaron: 722, rcommaaccent: 333, Ntilde: 722, otilde: 556, Rcommaaccent: 722, Lcommaaccent: 556, Atilde: 667, Aogonek: 667, Aring: 667, Otilde: 778, zdotaccent: 500, Ecaron: 667, Iogonek: 278, kcommaaccent: 500, minus: 584, Icircumflex: 278, ncaron: 556, tcommaaccent: 278, logicalnot: 584, odieresis: 556, udieresis: 556, notequal: 549, gcommaaccent: 556, eth: 556, zcaron: 500, ncommaaccent: 556, onesuperior: 333, imacron: 278, Euro: 556 }, Symbol: { space: 250, exclam: 333, universal: 713, numbersign: 500, existential: 549, percent: 833, ampersand: 778, suchthat: 439, parenleft: 333, parenright: 333, asteriskmath: 500, plus: 549, comma: 250, minus: 549, period: 250, slash: 278, zero: 500, one: 500, two: 500, three: 500, four: 500, five: 500, six: 500, seven: 500, eight: 500, nine: 500, colon: 278, semicolon: 278, less: 549, equal: 549, greater: 549, question: 444, congruent: 549, Alpha: 722, Beta: 667, Chi: 722, Delta: 612, Epsilon: 611, Phi: 763, Gamma: 603, Eta: 722, Iota: 333, theta1: 631, Kappa: 722, Lambda: 686, Mu: 889, Nu: 722, Omicron: 722, Pi: 768, Theta: 741, Rho: 556, Sigma: 592, Tau: 611, Upsilon: 690, sigma1: 439, Omega: 768, Xi: 645, Psi: 795, Zeta: 611, bracketleft: 333, therefore: 863, bracketright: 333, perpendicular: 658, underscore: 500, radicalex: 500, alpha: 631, beta: 549, chi: 549, delta: 494, epsilon: 439, phi: 521, gamma: 411, eta: 603, iota: 329, phi1: 603, kappa: 549, lambda: 549, mu: 576, nu: 521, omicron: 549, pi: 549, theta: 521, rho: 549, sigma: 603, tau: 439, upsilon: 576, omega1: 713, omega: 686, xi: 493, psi: 686, zeta: 494, braceleft: 480, bar: 200, braceright: 480, similar: 549, Euro: 750, Upsilon1: 620, minute: 247, lessequal: 549, fraction: 167, infinity: 713, florin: 500, club: 753, diamond: 753, heart: 753, spade: 753, arrowboth: 1042, arrowleft: 987, arrowup: 603, arrowright: 987, arrowdown: 603, degree: 400, plusminus: 549, second: 411, greaterequal: 549, multiply: 549, proportional: 713, partialdiff: 494, bullet: 460, divide: 549, notequal: 549, equivalence: 549, approxequal: 549, ellipsis: 1e3, arrowvertex: 603, arrowhorizex: 1e3, carriagereturn: 658, aleph: 823, Ifraktur: 686, Rfraktur: 795, weierstrass: 987, circlemultiply: 768, circleplus: 768, emptyset: 823, intersection: 768, union: 768, propersuperset: 713, reflexsuperset: 713, notsubset: 713, propersubset: 713, reflexsubset: 713, element: 713, notelement: 713, angle: 768, gradient: 713, registerserif: 790, copyrightserif: 790, trademarkserif: 890, product: 823, radical: 549, dotmath: 250, logicalnot: 713, logicaland: 603, logicalor: 603, arrowdblboth: 1042, arrowdblleft: 987, arrowdblup: 603, arrowdblright: 987, arrowdbldown: 603, lozenge: 494, angleleft: 329, registersans: 790, copyrightsans: 790, trademarksans: 786, summation: 713, parenlefttp: 384, parenleftex: 384, parenleftbt: 384, bracketlefttp: 384, bracketleftex: 384, bracketleftbt: 384, bracelefttp: 494, braceleftmid: 494, braceleftbt: 494, braceex: 494, angleright: 329, integral: 274, integraltp: 686, integralex: 686, integralbt: 686, parenrighttp: 384, parenrightex: 384, parenrightbt: 384, bracketrighttp: 384, bracketrightex: 384, bracketrightbt: 384, bracerighttp: 494, bracerightmid: 494, bracerightbt: 494, apple: 790 }, "Times-Roman": { space: 250, exclam: 333, quotedbl: 408, numbersign: 500, dollar: 500, percent: 833, ampersand: 778, quoteright: 333, parenleft: 333, parenright: 333, asterisk: 500, plus: 564, comma: 250, hyphen: 333, period: 250, slash: 278, zero: 500, one: 500, two: 500, three: 500, four: 500, five: 500, six: 500, seven: 500, eight: 500, nine: 500, colon: 278, semicolon: 278, less: 564, equal: 564, greater: 564, question: 444, at: 921, A: 722, B: 667, C: 667, D: 722, E: 611, F: 556, G: 722, H: 722, I: 333, J: 389, K: 722, L: 611, M: 889, N: 722, O: 722, P: 556, Q: 722, R: 667, S: 556, T: 611, U: 722, V: 722, W: 944, X: 722, Y: 722, Z: 611, bracketleft: 333, backslash: 278, bracketright: 333, asciicircum: 469, underscore: 500, quoteleft: 333, a: 444, b: 500, c: 444, d: 500, e: 444, f: 333, g: 500, h: 500, i: 278, j: 278, k: 500, l: 278, m: 778, n: 500, o: 500, p: 500, q: 500, r: 333, s: 389, t: 278, u: 500, v: 500, w: 722, x: 500, y: 500, z: 444, braceleft: 480, bar: 200, braceright: 480, asciitilde: 541, exclamdown: 333, cent: 500, sterling: 500, fraction: 167, yen: 500, florin: 500, section: 500, currency: 500, quotesingle: 180, quotedblleft: 444, guillemotleft: 500, guilsinglleft: 333, guilsinglright: 333, fi: 556, fl: 556, endash: 500, dagger: 500, daggerdbl: 500, periodcentered: 250, paragraph: 453, bullet: 350, quotesinglbase: 333, quotedblbase: 444, quotedblright: 444, guillemotright: 500, ellipsis: 1e3, perthousand: 1e3, questiondown: 444, grave: 333, acute: 333, circumflex: 333, tilde: 333, macron: 333, breve: 333, dotaccent: 333, dieresis: 333, ring: 333, cedilla: 333, hungarumlaut: 333, ogonek: 333, caron: 333, emdash: 1e3, AE: 889, ordfeminine: 276, Lslash: 611, Oslash: 722, OE: 889, ordmasculine: 310, ae: 667, dotlessi: 278, lslash: 278, oslash: 500, oe: 722, germandbls: 500, Idieresis: 333, eacute: 444, abreve: 444, uhungarumlaut: 500, ecaron: 444, Ydieresis: 722, divide: 564, Yacute: 722, Acircumflex: 722, aacute: 444, Ucircumflex: 722, yacute: 500, scommaaccent: 389, ecircumflex: 444, Uring: 722, Udieresis: 722, aogonek: 444, Uacute: 722, uogonek: 500, Edieresis: 611, Dcroat: 722, commaaccent: 250, copyright: 760, Emacron: 611, ccaron: 444, aring: 444, Ncommaaccent: 722, lacute: 278, agrave: 444, Tcommaaccent: 611, Cacute: 667, atilde: 444, Edotaccent: 611, scaron: 389, scedilla: 389, iacute: 278, lozenge: 471, Rcaron: 667, Gcommaaccent: 722, ucircumflex: 500, acircumflex: 444, Amacron: 722, rcaron: 333, ccedilla: 444, Zdotaccent: 611, Thorn: 556, Omacron: 722, Racute: 667, Sacute: 556, dcaron: 588, Umacron: 722, uring: 500, threesuperior: 300, Ograve: 722, Agrave: 722, Abreve: 722, multiply: 564, uacute: 500, Tcaron: 611, partialdiff: 476, ydieresis: 500, Nacute: 722, icircumflex: 278, Ecircumflex: 611, adieresis: 444, edieresis: 444, cacute: 444, nacute: 500, umacron: 500, Ncaron: 722, Iacute: 333, plusminus: 564, brokenbar: 200, registered: 760, Gbreve: 722, Idotaccent: 333, summation: 600, Egrave: 611, racute: 333, omacron: 500, Zacute: 611, Zcaron: 611, greaterequal: 549, Eth: 722, Ccedilla: 667, lcommaaccent: 278, tcaron: 326, eogonek: 444, Uogonek: 722, Aacute: 722, Adieresis: 722, egrave: 444, zacute: 444, iogonek: 278, Oacute: 722, oacute: 500, amacron: 444, sacute: 389, idieresis: 278, Ocircumflex: 722, Ugrave: 722, Delta: 612, thorn: 500, twosuperior: 300, Odieresis: 722, mu: 500, igrave: 278, ohungarumlaut: 500, Eogonek: 611, dcroat: 500, threequarters: 750, Scedilla: 556, lcaron: 344, Kcommaaccent: 722, Lacute: 611, trademark: 980, edotaccent: 444, Igrave: 333, Imacron: 333, Lcaron: 611, onehalf: 750, lessequal: 549, ocircumflex: 500, ntilde: 500, Uhungarumlaut: 722, Eacute: 611, emacron: 444, gbreve: 500, onequarter: 750, Scaron: 556, Scommaaccent: 556, Ohungarumlaut: 722, degree: 400, ograve: 500, Ccaron: 667, ugrave: 500, radical: 453, Dcaron: 722, rcommaaccent: 333, Ntilde: 722, otilde: 500, Rcommaaccent: 667, Lcommaaccent: 611, Atilde: 722, Aogonek: 722, Aring: 722, Otilde: 722, zdotaccent: 444, Ecaron: 611, Iogonek: 333, kcommaaccent: 500, minus: 564, Icircumflex: 333, ncaron: 500, tcommaaccent: 278, logicalnot: 564, odieresis: 500, udieresis: 500, notequal: 549, gcommaaccent: 500, eth: 500, zcaron: 444, ncommaaccent: 500, onesuperior: 300, imacron: 278, Euro: 500 }, "Times-Bold": { space: 250, exclam: 333, quotedbl: 555, numbersign: 500, dollar: 500, percent: 1e3, ampersand: 833, quoteright: 333, parenleft: 333, parenright: 333, asterisk: 500, plus: 570, comma: 250, hyphen: 333, period: 250, slash: 278, zero: 500, one: 500, two: 500, three: 500, four: 500, five: 500, six: 500, seven: 500, eight: 500, nine: 500, colon: 333, semicolon: 333, less: 570, equal: 570, greater: 570, question: 500, at: 930, A: 722, B: 667, C: 722, D: 722, E: 667, F: 611, G: 778, H: 778, I: 389, J: 500, K: 778, L: 667, M: 944, N: 722, O: 778, P: 611, Q: 778, R: 722, S: 556, T: 667, U: 722, V: 722, W: 1e3, X: 722, Y: 722, Z: 667, bracketleft: 333, backslash: 278, bracketright: 333, asciicircum: 581, underscore: 500, quoteleft: 333, a: 500, b: 556, c: 444, d: 556, e: 444, f: 333, g: 500, h: 556, i: 278, j: 333, k: 556, l: 278, m: 833, n: 556, o: 500, p: 556, q: 556, r: 444, s: 389, t: 333, u: 556, v: 500, w: 722, x: 500, y: 500, z: 444, braceleft: 394, bar: 220, braceright: 394, asciitilde: 520, exclamdown: 333, cent: 500, sterling: 500, fraction: 167, yen: 500, florin: 500, section: 500, currency: 500, quotesingle: 278, quotedblleft: 500, guillemotleft: 500, guilsinglleft: 333, guilsinglright: 333, fi: 556, fl: 556, endash: 500, dagger: 500, daggerdbl: 500, periodcentered: 250, paragraph: 540, bullet: 350, quotesinglbase: 333, quotedblbase: 500, quotedblright: 500, guillemotright: 500, ellipsis: 1e3, perthousand: 1e3, questiondown: 500, grave: 333, acute: 333, circumflex: 333, tilde: 333, macron: 333, breve: 333, dotaccent: 333, dieresis: 333, ring: 333, cedilla: 333, hungarumlaut: 333, ogonek: 333, caron: 333, emdash: 1e3, AE: 1e3, ordfeminine: 300, Lslash: 667, Oslash: 778, OE: 1e3, ordmasculine: 330, ae: 722, dotlessi: 278, lslash: 278, oslash: 500, oe: 722, germandbls: 556, Idieresis: 389, eacute: 444, abreve: 500, uhungarumlaut: 556, ecaron: 444, Ydieresis: 722, divide: 570, Yacute: 722, Acircumflex: 722, aacute: 500, Ucircumflex: 722, yacute: 500, scommaaccent: 389, ecircumflex: 444, Uring: 722, Udieresis: 722, aogonek: 500, Uacute: 722, uogonek: 556, Edieresis: 667, Dcroat: 722, commaaccent: 250, copyright: 747, Emacron: 667, ccaron: 444, aring: 500, Ncommaaccent: 722, lacute: 278, agrave: 500, Tcommaaccent: 667, Cacute: 722, atilde: 500, Edotaccent: 667, scaron: 389, scedilla: 389, iacute: 278, lozenge: 494, Rcaron: 722, Gcommaaccent: 778, ucircumflex: 556, acircumflex: 500, Amacron: 722, rcaron: 444, ccedilla: 444, Zdotaccent: 667, Thorn: 611, Omacron: 778, Racute: 722, Sacute: 556, dcaron: 672, Umacron: 722, uring: 556, threesuperior: 300, Ograve: 778, Agrave: 722, Abreve: 722, multiply: 570, uacute: 556, Tcaron: 667, partialdiff: 494, ydieresis: 500, Nacute: 722, icircumflex: 278, Ecircumflex: 667, adieresis: 500, edieresis: 444, cacute: 444, nacute: 556, umacron: 556, Ncaron: 722, Iacute: 389, plusminus: 570, brokenbar: 220, registered: 747, Gbreve: 778, Idotaccent: 389, summation: 600, Egrave: 667, racute: 444, omacron: 500, Zacute: 667, Zcaron: 667, greaterequal: 549, Eth: 722, Ccedilla: 722, lcommaaccent: 278, tcaron: 416, eogonek: 444, Uogonek: 722, Aacute: 722, Adieresis: 722, egrave: 444, zacute: 444, iogonek: 278, Oacute: 778, oacute: 500, amacron: 500, sacute: 389, idieresis: 278, Ocircumflex: 778, Ugrave: 722, Delta: 612, thorn: 556, twosuperior: 300, Odieresis: 778, mu: 556, igrave: 278, ohungarumlaut: 500, Eogonek: 667, dcroat: 556, threequarters: 750, Scedilla: 556, lcaron: 394, Kcommaaccent: 778, Lacute: 667, trademark: 1e3, edotaccent: 444, Igrave: 389, Imacron: 389, Lcaron: 667, onehalf: 750, lessequal: 549, ocircumflex: 500, ntilde: 556, Uhungarumlaut: 722, Eacute: 667, emacron: 444, gbreve: 500, onequarter: 750, Scaron: 556, Scommaaccent: 556, Ohungarumlaut: 778, degree: 400, ograve: 500, Ccaron: 722, ugrave: 556, radical: 549, Dcaron: 722, rcommaaccent: 444, Ntilde: 722, otilde: 500, Rcommaaccent: 722, Lcommaaccent: 667, Atilde: 722, Aogonek: 722, Aring: 722, Otilde: 778, zdotaccent: 444, Ecaron: 667, Iogonek: 389, kcommaaccent: 556, minus: 570, Icircumflex: 389, ncaron: 556, tcommaaccent: 333, logicalnot: 570, odieresis: 500, udieresis: 556, notequal: 549, gcommaaccent: 500, eth: 500, zcaron: 444, ncommaaccent: 556, onesuperior: 300, imacron: 278, Euro: 500 }, "Times-BoldItalic": { space: 250, exclam: 389, quotedbl: 555, numbersign: 500, dollar: 500, percent: 833, ampersand: 778, quoteright: 333, parenleft: 333, parenright: 333, asterisk: 500, plus: 570, comma: 250, hyphen: 333, period: 250, slash: 278, zero: 500, one: 500, two: 500, three: 500, four: 500, five: 500, six: 500, seven: 500, eight: 500, nine: 500, colon: 333, semicolon: 333, less: 570, equal: 570, greater: 570, question: 500, at: 832, A: 667, B: 667, C: 667, D: 722, E: 667, F: 667, G: 722, H: 778, I: 389, J: 500, K: 667, L: 611, M: 889, N: 722, O: 722, P: 611, Q: 722, R: 667, S: 556, T: 611, U: 722, V: 667, W: 889, X: 667, Y: 611, Z: 611, bracketleft: 333, backslash: 278, bracketright: 333, asciicircum: 570, underscore: 500, quoteleft: 333, a: 500, b: 500, c: 444, d: 500, e: 444, f: 333, g: 500, h: 556, i: 278, j: 278, k: 500, l: 278, m: 778, n: 556, o: 500, p: 500, q: 500, r: 389, s: 389, t: 278, u: 556, v: 444, w: 667, x: 500, y: 444, z: 389, braceleft: 348, bar: 220, braceright: 348, asciitilde: 570, exclamdown: 389, cent: 500, sterling: 500, fraction: 167, yen: 500, florin: 500, section: 500, currency: 500, quotesingle: 278, quotedblleft: 500, guillemotleft: 500, guilsinglleft: 333, guilsinglright: 333, fi: 556, fl: 556, endash: 500, dagger: 500, daggerdbl: 500, periodcentered: 250, paragraph: 500, bullet: 350, quotesinglbase: 333, quotedblbase: 500, quotedblright: 500, guillemotright: 500, ellipsis: 1e3, perthousand: 1e3, questiondown: 500, grave: 333, acute: 333, circumflex: 333, tilde: 333, macron: 333, breve: 333, dotaccent: 333, dieresis: 333, ring: 333, cedilla: 333, hungarumlaut: 333, ogonek: 333, caron: 333, emdash: 1e3, AE: 944, ordfeminine: 266, Lslash: 611, Oslash: 722, OE: 944, ordmasculine: 300, ae: 722, dotlessi: 278, lslash: 278, oslash: 500, oe: 722, germandbls: 500, Idieresis: 389, eacute: 444, abreve: 500, uhungarumlaut: 556, ecaron: 444, Ydieresis: 611, divide: 570, Yacute: 611, Acircumflex: 667, aacute: 500, Ucircumflex: 722, yacute: 444, scommaaccent: 389, ecircumflex: 444, Uring: 722, Udieresis: 722, aogonek: 500, Uacute: 722, uogonek: 556, Edieresis: 667, Dcroat: 722, commaaccent: 250, copyright: 747, Emacron: 667, ccaron: 444, aring: 500, Ncommaaccent: 722, lacute: 278, agrave: 500, Tcommaaccent: 611, Cacute: 667, atilde: 500, Edotaccent: 667, scaron: 389, scedilla: 389, iacute: 278, lozenge: 494, Rcaron: 667, Gcommaaccent: 722, ucircumflex: 556, acircumflex: 500, Amacron: 667, rcaron: 389, ccedilla: 444, Zdotaccent: 611, Thorn: 611, Omacron: 722, Racute: 667, Sacute: 556, dcaron: 608, Umacron: 722, uring: 556, threesuperior: 300, Ograve: 722, Agrave: 667, Abreve: 667, multiply: 570, uacute: 556, Tcaron: 611, partialdiff: 494, ydieresis: 444, Nacute: 722, icircumflex: 278, Ecircumflex: 667, adieresis: 500, edieresis: 444, cacute: 444, nacute: 556, umacron: 556, Ncaron: 722, Iacute: 389, plusminus: 570, brokenbar: 220, registered: 747, Gbreve: 722, Idotaccent: 389, summation: 600, Egrave: 667, racute: 389, omacron: 500, Zacute: 611, Zcaron: 611, greaterequal: 549, Eth: 722, Ccedilla: 667, lcommaaccent: 278, tcaron: 366, eogonek: 444, Uogonek: 722, Aacute: 667, Adieresis: 667, egrave: 444, zacute: 389, iogonek: 278, Oacute: 722, oacute: 500, amacron: 500, sacute: 389, idieresis: 278, Ocircumflex: 722, Ugrave: 722, Delta: 612, thorn: 500, twosuperior: 300, Odieresis: 722, mu: 576, igrave: 278, ohungarumlaut: 500, Eogonek: 667, dcroat: 500, threequarters: 750, Scedilla: 556, lcaron: 382, Kcommaaccent: 667, Lacute: 611, trademark: 1e3, edotaccent: 444, Igrave: 389, Imacron: 389, Lcaron: 611, onehalf: 750, lessequal: 549, ocircumflex: 500, ntilde: 556, Uhungarumlaut: 722, Eacute: 667, emacron: 444, gbreve: 500, onequarter: 750, Scaron: 556, Scommaaccent: 556, Ohungarumlaut: 722, degree: 400, ograve: 500, Ccaron: 667, ugrave: 556, radical: 549, Dcaron: 722, rcommaaccent: 389, Ntilde: 722, otilde: 500, Rcommaaccent: 667, Lcommaaccent: 611, Atilde: 667, Aogonek: 667, Aring: 667, Otilde: 722, zdotaccent: 389, Ecaron: 667, Iogonek: 389, kcommaaccent: 500, minus: 606, Icircumflex: 389, ncaron: 556, tcommaaccent: 278, logicalnot: 606, odieresis: 500, udieresis: 556, notequal: 549, gcommaaccent: 500, eth: 500, zcaron: 389, ncommaaccent: 556, onesuperior: 300, imacron: 278, Euro: 500 }, "Times-Italic": { space: 250, exclam: 333, quotedbl: 420, numbersign: 500, dollar: 500, percent: 833, ampersand: 778, quoteright: 333, parenleft: 333, parenright: 333, asterisk: 500, plus: 675, comma: 250, hyphen: 333, period: 250, slash: 278, zero: 500, one: 500, two: 500, three: 500, four: 500, five: 500, six: 500, seven: 500, eight: 500, nine: 500, colon: 333, semicolon: 333, less: 675, equal: 675, greater: 675, question: 500, at: 920, A: 611, B: 611, C: 667, D: 722, E: 611, F: 611, G: 722, H: 722, I: 333, J: 444, K: 667, L: 556, M: 833, N: 667, O: 722, P: 611, Q: 722, R: 611, S: 500, T: 556, U: 722, V: 611, W: 833, X: 611, Y: 556, Z: 556, bracketleft: 389, backslash: 278, bracketright: 389, asciicircum: 422, underscore: 500, quoteleft: 333, a: 500, b: 500, c: 444, d: 500, e: 444, f: 278, g: 500, h: 500, i: 278, j: 278, k: 444, l: 278, m: 722, n: 500, o: 500, p: 500, q: 500, r: 389, s: 389, t: 278, u: 500, v: 444, w: 667, x: 444, y: 444, z: 389, braceleft: 400, bar: 275, braceright: 400, asciitilde: 541, exclamdown: 389, cent: 500, sterling: 500, fraction: 167, yen: 500, florin: 500, section: 500, currency: 500, quotesingle: 214, quotedblleft: 556, guillemotleft: 500, guilsinglleft: 333, guilsinglright: 333, fi: 500, fl: 500, endash: 500, dagger: 500, daggerdbl: 500, periodcentered: 250, paragraph: 523, bullet: 350, quotesinglbase: 333, quotedblbase: 556, quotedblright: 556, guillemotright: 500, ellipsis: 889, perthousand: 1e3, questiondown: 500, grave: 333, acute: 333, circumflex: 333, tilde: 333, macron: 333, breve: 333, dotaccent: 333, dieresis: 333, ring: 333, cedilla: 333, hungarumlaut: 333, ogonek: 333, caron: 333, emdash: 889, AE: 889, ordfeminine: 276, Lslash: 556, Oslash: 722, OE: 944, ordmasculine: 310, ae: 667, dotlessi: 278, lslash: 278, oslash: 500, oe: 667, germandbls: 500, Idieresis: 333, eacute: 444, abreve: 500, uhungarumlaut: 500, ecaron: 444, Ydieresis: 556, divide: 675, Yacute: 556, Acircumflex: 611, aacute: 500, Ucircumflex: 722, yacute: 444, scommaaccent: 389, ecircumflex: 444, Uring: 722, Udieresis: 722, aogonek: 500, Uacute: 722, uogonek: 500, Edieresis: 611, Dcroat: 722, commaaccent: 250, copyright: 760, Emacron: 611, ccaron: 444, aring: 500, Ncommaaccent: 667, lacute: 278, agrave: 500, Tcommaaccent: 556, Cacute: 667, atilde: 500, Edotaccent: 611, scaron: 389, scedilla: 389, iacute: 278, lozenge: 471, Rcaron: 611, Gcommaaccent: 722, ucircumflex: 500, acircumflex: 500, Amacron: 611, rcaron: 389, ccedilla: 444, Zdotaccent: 556, Thorn: 611, Omacron: 722, Racute: 611, Sacute: 500, dcaron: 544, Umacron: 722, uring: 500, threesuperior: 300, Ograve: 722, Agrave: 611, Abreve: 611, multiply: 675, uacute: 500, Tcaron: 556, partialdiff: 476, ydieresis: 444, Nacute: 667, icircumflex: 278, Ecircumflex: 611, adieresis: 500, edieresis: 444, cacute: 444, nacute: 500, umacron: 500, Ncaron: 667, Iacute: 333, plusminus: 675, brokenbar: 275, registered: 760, Gbreve: 722, Idotaccent: 333, summation: 600, Egrave: 611, racute: 389, omacron: 500, Zacute: 556, Zcaron: 556, greaterequal: 549, Eth: 722, Ccedilla: 667, lcommaaccent: 278, tcaron: 300, eogonek: 444, Uogonek: 722, Aacute: 611, Adieresis: 611, egrave: 444, zacute: 389, iogonek: 278, Oacute: 722, oacute: 500, amacron: 500, sacute: 389, idieresis: 278, Ocircumflex: 722, Ugrave: 722, Delta: 612, thorn: 500, twosuperior: 300, Odieresis: 722, mu: 500, igrave: 278, ohungarumlaut: 500, Eogonek: 611, dcroat: 500, threequarters: 750, Scedilla: 500, lcaron: 300, Kcommaaccent: 667, Lacute: 556, trademark: 980, edotaccent: 444, Igrave: 333, Imacron: 333, Lcaron: 611, onehalf: 750, lessequal: 549, ocircumflex: 500, ntilde: 500, Uhungarumlaut: 722, Eacute: 611, emacron: 444, gbreve: 500, onequarter: 750, Scaron: 500, Scommaaccent: 500, Ohungarumlaut: 722, degree: 400, ograve: 500, Ccaron: 667, ugrave: 500, radical: 453, Dcaron: 722, rcommaaccent: 389, Ntilde: 667, otilde: 500, Rcommaaccent: 611, Lcommaaccent: 556, Atilde: 611, Aogonek: 611, Aring: 611, Otilde: 722, zdotaccent: 389, Ecaron: 611, Iogonek: 333, kcommaaccent: 444, minus: 675, Icircumflex: 333, ncaron: 500, tcommaaccent: 278, logicalnot: 675, odieresis: 500, udieresis: 500, notequal: 549, gcommaaccent: 500, eth: 500, zcaron: 389, ncommaaccent: 500, onesuperior: 300, imacron: 278, Euro: 500 }, ZapfDingbats: { space: 278, a1: 974, a2: 961, a202: 974, a3: 980, a4: 719, a5: 789, a119: 790, a118: 791, a117: 690, a11: 960, a12: 939, a13: 549, a14: 855, a15: 911, a16: 933, a105: 911, a17: 945, a18: 974, a19: 755, a20: 846, a21: 762, a22: 761, a23: 571, a24: 677, a25: 763, a26: 760, a27: 759, a28: 754, a6: 494, a7: 552, a8: 537, a9: 577, a10: 692, a29: 786, a30: 788, a31: 788, a32: 790, a33: 793, a34: 794, a35: 816, a36: 823, a37: 789, a38: 841, a39: 823, a40: 833, a41: 816, a42: 831, a43: 923, a44: 744, a45: 723, a46: 749, a47: 790, a48: 792, a49: 695, a50: 776, a51: 768, a52: 792, a53: 759, a54: 707, a55: 708, a56: 682, a57: 701, a58: 826, a59: 815, a60: 789, a61: 789, a62: 707, a63: 687, a64: 696, a65: 689, a66: 786, a67: 787, a68: 713, a69: 791, a70: 785, a71: 791, a72: 873, a73: 761, a74: 762, a203: 762, a75: 759, a204: 759, a76: 892, a77: 892, a78: 788, a79: 784, a81: 438, a82: 138, a83: 277, a84: 415, a97: 392, a98: 392, a99: 668, a100: 668, a89: 390, a90: 390, a93: 317, a94: 317, a91: 276, a92: 276, a205: 509, a85: 509, a206: 410, a86: 410, a87: 234, a88: 234, a95: 334, a96: 334, a101: 732, a102: 544, a103: 544, a104: 910, a106: 667, a107: 760, a108: 760, a112: 776, a111: 595, a110: 694, a109: 626, a120: 788, a121: 788, a122: 788, a123: 788, a124: 788, a125: 788, a126: 788, a127: 788, a128: 788, a129: 788, a130: 788, a131: 788, a132: 788, a133: 788, a134: 788, a135: 788, a136: 788, a137: 788, a138: 788, a139: 788, a140: 788, a141: 788, a142: 788, a143: 788, a144: 788, a145: 788, a146: 788, a147: 788, a148: 788, a149: 788, a150: 788, a151: 788, a152: 788, a153: 788, a154: 788, a155: 788, a156: 788, a157: 788, a158: 788, a159: 788, a160: 894, a161: 838, a163: 1016, a164: 458, a196: 748, a165: 924, a192: 748, a166: 918, a167: 927, a168: 928, a169: 928, a170: 834, a171: 873, a172: 828, a173: 924, a162: 924, a174: 917, a175: 930, a176: 931, a177: 463, a178: 883, a179: 836, a193: 836, a180: 867, a199: 867, a181: 696, a200: 696, a182: 874, a201: 874, a183: 760, a184: 946, a197: 771, a185: 865, a194: 771, a198: 888, a186: 967, a195: 888, a187: 831, a188: 873, a189: 927, a190: 970, a191: 918 } };
var hr = {};
function ur(e3) {
  return e3 == hr;
}
var dr = function() {
  function e3(e4, t3, a2) {
    this.lexer = e4, this.allowStreams = t3, this.xref = a2, this.refill();
  }
  return e3.prototype = { saveState: function() {
    this.state = { buf1: this.buf1, buf2: this.buf2, streamPos: this.lexer.stream.pos };
  }, restoreState: function() {
    var e4 = this.state;
    this.buf1 = e4.buf1, this.buf2 = e4.buf2, this.lexer.stream.pos = e4.streamPos;
  }, refill: function() {
    this.buf1 = this.lexer.getObj(), this.buf2 = this.lexer.getObj();
  }, shift: function() {
    st(this.buf2, "ID") ? (this.buf1 = this.buf2, this.buf2 = null) : (this.buf1 = this.buf2, this.buf2 = this.lexer.getObj());
  }, getObj: function(e4) {
    if (st(this.buf1, "BI")) return this.shift(), this.makeInlineImage(e4);
    if (st(this.buf1, "[")) {
      this.shift();
      for (var t3 = []; !st(this.buf1, "]") && !ur(this.buf1); ) t3.push(this.getObj(e4));
      return ur(this.buf1) && Oe("End of file inside array"), this.shift(), t3;
    }
    if (st(this.buf1, "<<")) {
      this.shift();
      for (var a2 = new Zt(this.xref); !st(this.buf1, ">>") && !ur(this.buf1); ) if (ct(this.buf1)) {
        var r3 = this.buf1.name;
        if (this.shift(), ur(this.buf1)) break;
        a2.set(r3, this.getObj(e4));
      } else Pe("Malformed dictionary, key must be a name object"), this.shift();
      return ur(this.buf1) && Oe("End of file inside dictionary"), st(this.buf2, "stream") ? this.allowStreams ? this.makeStream(a2, e4) : a2 : (this.shift(), a2);
    }
    if (rt(this.buf1)) {
      var i3 = this.buf1;
      if (this.shift(), rt(this.buf1) && st(this.buf2, "R")) {
        var n3 = new Qt(i3, this.buf1);
        return this.shift(), this.shift(), n3;
      }
      return i3;
    }
    if (nt(this.buf1)) {
      var c3 = this.buf1;
      return this.shift(), e4 && (c3 = e4.decryptString(c3)), c3;
    }
    var s3 = this.buf1;
    return this.shift(), s3;
  }, makeInlineImage: function(e4) {
    for (var t3 = this.lexer.stream, a2 = new Zt(); !st(this.buf1, "ID") && !ur(this.buf1); ) {
      ct(this.buf1) || Oe("Dictionary key must be a name object");
      var r3 = this.buf1.name;
      if (this.shift(), ur(this.buf1)) break;
      a2.set(r3, this.getObj(e4));
    }
    for (var i3, n3, c3, s3 = t3.pos, o3 = 0; 4 != o3 && -1 !== (i3 = t3.getByte()); ) switch (0 | i3) {
      case 32:
      case 13:
      case 10:
        var f2 = t3.peekBytes(5);
        for (n3 = 0, c3 = f2.length; n3 < c3; n3++) if (10 !== (i3 = f2[n3]) && 13 !== i3 && (i3 < 32 || i3 > 127)) {
          o3 = 0;
          break;
        }
        o3 = 3 === o3 ? 4 : 0;
        break;
      case 69:
        o3 = 2;
        break;
      case 73:
        o3 = 2 === o3 ? 3 : 0;
        break;
      default:
        o3 = 0;
    }
    var l2 = t3.pos - 4 - s3, h3 = t3.makeSubStream(s3, l2, a2);
    return e4 && (h3 = e4.createStream(h3)), (h3 = this.filter(h3, a2, l2)).dict = a2, this.buf2 = Kt.get("EI"), this.shift(), h3;
  }, fetchIfRef: function(e4) {
    return ut(e4) ? this.xref.fetch(e4) : e4;
  }, makeStream: function(e4, t3) {
    var a2 = this.lexer, r3 = a2.stream;
    a2.skipToNextLine();
    var i3 = r3.pos - 1, n3 = this.fetchIfRef(e4.get("Length"));
    if (rt(n3) || (Pe("Bad " + n3 + " attribute in stream"), n3 = 0), r3.pos = i3 + n3, a2.nextChar(), this.shift(), this.shift(), !st(this.buf1, "endstream")) {
      r3.pos = i3;
      for (var c3 = [101, 110, 100, 115, 116, 114, 101, 97, 109], s3 = 0, o3 = false; r3.pos < r3.end; ) {
        var f2, l2, h3 = r3.peekBytes(2048), u3 = h3.length - 9;
        o3 = false;
        for (f2 = 0, l2 = 0; f2 < u3; f2++) {
          if (h3[f2] !== c3[l2]) f2 -= l2, l2 = 0;
          else if (++l2 >= 9) {
            o3 = true;
            break;
          }
        }
        if (o3) {
          s3 += f2 - 9, r3.pos += f2 - 9;
          break;
        }
        s3 += u3, r3.pos += u3;
      }
      o3 || Oe("Missing endstream"), n3 = s3, a2.nextChar(), this.shift(), this.shift();
    }
    return this.shift(), r3 = r3.makeSubStream(i3, n3, e4), t3 && (r3 = t3.createStream(r3)), (r3 = this.filter(r3, e4, n3)).dict = e4, r3;
  }, filter: function(e4, t3, a2) {
    var r3 = this.fetchIfRef(t3.get("Filter", "F")), i3 = this.fetchIfRef(t3.get("DecodeParms", "DP"));
    if (ct(r3)) return this.makeFilter(e4, r3.name, a2, i3);
    if (ft(r3)) for (var n3 = r3, c3 = i3, s3 = 0, o3 = n3.length; s3 < o3; ++s3) ct(r3 = n3[s3]) || Oe("Bad filter name: " + r3), i3 = null, ft(c3) && s3 in c3 && (i3 = c3[s3]), e4 = this.makeFilter(e4, r3.name, a2, i3), a2 = null;
    return e4;
  }, makeFilter: function(e4, t3, a2, r3) {
    if (0 === e4.dict.get("Length")) return new Fr(e4);
    if ("FlateDecode" == t3 || "Fl" == t3) return r3 ? new kr(new yr(e4), r3) : new yr(e4);
    if ("LZWDecode" == t3 || "LZW" == t3) {
      var i3 = 1;
      return r3 ? (r3.has("EarlyChange") && (i3 = r3.get("EarlyChange")), new kr(new Lr(e4, i3), r3)) : new Lr(e4, i3);
    }
    if ("DCTDecode" == t3 || "DCT" == t3) {
      var n3 = e4.getBytes(a2);
      return new Ar(n3, e4.dict, this.xref);
    }
    if ("JPXDecode" == t3 || "JPX" == t3) {
      n3 = e4.getBytes(a2);
      return new wr(n3, e4.dict);
    }
    if ("ASCII85Decode" == t3 || "A85" == t3) return new Cr(e4);
    if ("ASCIIHexDecode" == t3 || "AHx" == t3) return new Ir(e4);
    if ("CCITTFaxDecode" == t3 || "CCF" == t3) return new Tr(e4, r3);
    if ("RunLengthDecode" == t3 || "RL" == t3) return new Br(e4);
    if ("JBIG2Decode" == t3) {
      n3 = e4.getBytes(a2);
      return new xr(n3, e4.dict);
    }
    return Re('filter "' + t3 + '" not supported yet'), e4;
  } }, e3;
}();
var gr = function() {
  function e3(e4, t4) {
    this.stream = e4, this.nextChar(), this.knownCommands = t4;
  }
  e3.isSpace = function(e4) {
    return 32 === e4 || 9 === e4 || 13 === e4 || 10 === e4;
  };
  var t3 = [1, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 2, 0, 0, 2, 2, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];
  function a2(e4) {
    return e4 >= 48 && e4 <= 57 ? 15 & e4 : e4 >= 65 && e4 <= 70 || e4 >= 97 && e4 <= 102 ? 9 + (15 & e4) : -1;
  }
  return e3.prototype = { nextChar: function() {
    return this.currentChar = this.stream.getByte();
  }, getNumber: function() {
    for (var e4 = false, t4 = this.currentChar, a3 = String.fromCharCode(t4); (t4 = this.nextChar()) >= 0; ) if (46 !== t4 || e4) if (45 === t4) Re("Badly formated number");
    else if (t4 >= 48 && t4 <= 57) a3 += String.fromCharCode(t4);
    else {
      if (69 !== t4 && 101 !== t4) break;
      e4 = true;
    }
    else a3 += ".", e4 = true;
    var r3 = parseFloat(a3);
    return isNaN(r3) && Oe("Invalid floating point number: " + r3), r3;
  }, getString: function() {
    for (var e4 = 1, t4 = false, a3 = "", r3 = this.nextChar(); ; ) {
      var i3 = false;
      switch (0 | r3) {
        case -1:
          Re("Unterminated string"), t4 = true;
          break;
        case 40:
          ++e4, a3 += "(";
          break;
        case 41:
          0 == --e4 ? (this.nextChar(), t4 = true) : a3 += ")";
          break;
        case 92:
          switch (r3 = this.nextChar()) {
            case -1:
              Re("Unterminated string"), t4 = true;
              break;
            case 110:
              a3 += "\n";
              break;
            case 114:
              a3 += "\r";
              break;
            case 116:
              a3 += "	";
              break;
            case 98:
              a3 += "\b";
              break;
            case 102:
              a3 += "\f";
              break;
            case 92:
            case 40:
            case 41:
              a3 += String.fromCharCode(r3);
              break;
            case 48:
            case 49:
            case 50:
            case 51:
            case 52:
            case 53:
            case 54:
            case 55:
              var n3 = 15 & r3;
              i3 = true, (r3 = this.nextChar()) >= 48 && r3 <= 55 && (n3 = (n3 << 3) + (15 & r3), (r3 = this.nextChar()) >= 48 && r3 <= 55 && (i3 = false, n3 = (n3 << 3) + (15 & r3))), a3 += String.fromCharCode(n3);
              break;
            case 10:
            case 13:
              break;
            default:
              a3 += String.fromCharCode(r3);
          }
          break;
        default:
          a3 += String.fromCharCode(r3);
      }
      if (t4) break;
      i3 || (r3 = this.nextChar());
    }
    return a3;
  }, getName: function() {
    for (var e4, r3 = ""; (e4 = this.nextChar()) >= 0 && !t3[e4]; ) if (35 === e4) {
      var i3 = a2(e4 = this.nextChar());
      if (-1 != i3) {
        var n3 = a2(this.nextChar());
        -1 == n3 && Oe("Illegal digit in hex char in name: " + n3), r3 += String.fromCharCode(i3 << 4 | n3);
      } else r3 += "#", r3 += String.fromCharCode(e4);
    } else r3 += String.fromCharCode(e4);
    return r3.length > 127 && Re("Name token is longer than allowed by the spec: " + r3.length), new Jt(r3);
  }, getHexString: function() {
    for (var e4, r3, i3 = "", n3 = this.currentChar, c3 = true; ; ) {
      if (n3 < 0) {
        Re("Unterminated hex string");
        break;
      }
      if (62 === n3) {
        this.nextChar();
        break;
      }
      if (1 !== t3[n3]) {
        if (c3) {
          if (-1 === (e4 = a2(n3))) {
            Re('Ignoring invalid character "' + n3 + '" in hex string'), n3 = this.nextChar();
            continue;
          }
        } else {
          if (-1 === (r3 = a2(n3))) {
            Re('Ignoring invalid character "' + n3 + '" in hex string'), n3 = this.nextChar();
            continue;
          }
          i3 += String.fromCharCode(e4 << 4 | r3);
        }
        c3 = !c3, n3 = this.nextChar();
      } else n3 = this.nextChar();
    }
    return i3;
  }, getObj: function() {
    for (var e4 = false, a3 = this.currentChar; ; ) {
      if (a3 < 0) return hr;
      if (e4) 10 !== a3 && 13 != a3 || (e4 = false);
      else if (37 === a3) e4 = true;
      else if (1 !== t3[a3]) break;
      a3 = this.nextChar();
    }
    switch (0 | a3) {
      case 48:
      case 49:
      case 50:
      case 51:
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 43:
      case 45:
      case 46:
        return this.getNumber();
      case 40:
        return this.getString();
      case 47:
        return this.getName();
      case 91:
        return this.nextChar(), Kt.get("[");
      case 93:
        return this.nextChar(), Kt.get("]");
      case 60:
        return 60 === (a3 = this.nextChar()) ? (this.nextChar(), Kt.get("<<")) : this.getHexString();
      case 62:
        return 62 === (a3 = this.nextChar()) ? (this.nextChar(), Kt.get(">>")) : Kt.get(">");
      case 123:
        return this.nextChar(), Kt.get("{");
      case 125:
        return this.nextChar(), Kt.get("}");
      case 41:
        Oe("Illegal character: " + a3);
    }
    for (var r3 = String.fromCharCode(a3), i3 = this.knownCommands, n3 = i3 && (r3 in i3); (a3 = this.nextChar()) >= 0 && !t3[a3]; ) {
      var c3 = r3 + String.fromCharCode(a3);
      if (n3 && !(c3 in i3)) break;
      128 == r3.length && Oe("Command token too long: " + r3.length), r3 = c3, n3 = i3 && r3 in i3;
    }
    return "true" == r3 || "false" != r3 && ("null" == r3 ? null : Kt.get(r3));
  }, skipToNextLine: function() {
    this.stream;
    for (var e4 = this.currentChar; e4 >= 0; ) {
      if (13 === e4) {
        10 === (e4 = this.nextChar()) && this.nextChar();
        break;
      }
      if (10 === e4) {
        this.nextChar();
        break;
      }
      e4 = this.nextChar();
    }
  } }, e3;
}();
var mr = function() {
  function e3(e4) {
    this.parser = new dr(new gr(e4), false, null);
    var t3 = this.parser.getObj(), a2 = this.parser.getObj(), r3 = this.parser.getObj();
    if (this.linDict = this.parser.getObj(), rt(t3) && rt(a2) && st(r3, "obj") && ot(this.linDict)) {
      var i3 = this.linDict.get("Linearized");
      it(i3) && i3 > 0 || (this.linDict = null);
    }
  }
  return e3.prototype = { getInt: function(e4) {
    var t3, a2 = this.linDict;
    if (ot(a2) && rt(t3 = a2.get(e4)) && t3 > 0) return t3;
    Oe('"' + e4 + '" field in linearization table is invalid');
  }, getHint: function(e4) {
    var t3, a2, r3 = this.linDict;
    if (ot(r3) && ft(t3 = r3.get("H")) && t3.length >= 2 && rt(a2 = t3[e4]) && a2 > 0) return a2;
    Oe("Hints table in linearization table is invalid: " + e4);
  }, get length() {
    return ot(this.linDict) ? this.getInt("L") : 0;
  }, get hintsOffset() {
    return this.getHint(0);
  }, get hintsLength() {
    return this.getHint(1);
  }, get hintsOffset2() {
    return this.getHint(2);
  }, get hintsLenth2() {
    return this.getHint(3);
  }, get objectNumberFirst() {
    return this.getInt("O");
  }, get endFirst() {
    return this.getInt("E");
  }, get numPages() {
    return this.getInt("N");
  }, get mainXRefEntriesOffset() {
    return this.getInt("T");
  }, get pageFirst() {
    return this.getInt("P");
  } }, e3;
}();
var pr = function() {
  function e3(e4, t3, a2, r3) {
    this.bytes = e4 instanceof Uint8Array ? e4 : new Uint8Array(e4), this.start = t3 || 0, this.pos = this.start, this.end = t3 + a2 || this.bytes.length, this.dict = r3;
  }
  return e3.prototype = { get length() {
    return this.end - this.start;
  }, getByte: function() {
    return this.pos >= this.end ? -1 : this.bytes[this.pos++];
  }, getBytes: function(e4) {
    var t3 = this.bytes, a2 = this.pos, r3 = this.end;
    if (!e4) return t3.subarray(a2, r3);
    var i3 = a2 + e4;
    return i3 > r3 && (i3 = r3), this.pos = i3, t3.subarray(a2, i3);
  }, peekBytes: function(e4) {
    var t3 = this.getBytes(e4);
    return this.pos -= t3.length, t3;
  }, skip: function(e4) {
    e4 || (e4 = 1), this.pos += e4;
  }, reset: function() {
    this.pos = this.start;
  }, moveStart: function() {
    this.start = this.pos;
  }, makeSubStream: function(t3, a2, r3) {
    return new e3(this.bytes.buffer, t3, a2, r3);
  }, isStream: true }, e3;
}();
var br = (function() {
  function e3(e4) {
    for (var t3 = e4.length, a2 = new Uint8Array(t3), r3 = 0; r3 < t3; ++r3) a2[r3] = e4.charCodeAt(r3);
    pr.call(this, a2);
  }
  e3.prototype = pr.prototype;
}(), function() {
  function e3() {
    this.pos = 0, this.bufferLength = 0, this.eof = false, this.buffer = null;
  }
  return e3.prototype = { ensureBuffer: function(e4) {
    var t3 = this.buffer, a2 = t3 ? t3.byteLength : 0;
    if (e4 < a2) return t3;
    for (var r3 = 512; r3 < e4; ) r3 <<= 1;
    for (var i3 = new Uint8Array(r3), n3 = 0; n3 < a2; ++n3) i3[n3] = t3[n3];
    return this.buffer = i3;
  }, getByte: function() {
    for (var e4 = this.pos; this.bufferLength <= e4; ) {
      if (this.eof) return -1;
      this.readBlock();
    }
    return this.buffer[this.pos++];
  }, getBytes: function(e4) {
    var t3, a2 = this.pos;
    if (e4) {
      for (this.ensureBuffer(a2 + e4), t3 = a2 + e4; !this.eof && this.bufferLength < t3; ) this.readBlock();
      var r3 = this.bufferLength;
      t3 > r3 && (t3 = r3);
    } else {
      for (; !this.eof; ) this.readBlock();
      (t3 = this.bufferLength) || (this.buffer = new Uint8Array(0));
    }
    return this.pos = t3, this.buffer.subarray(a2, t3);
  }, peekBytes: function(e4) {
    var t3 = this.getBytes(e4);
    return this.pos -= t3.length, t3;
  }, makeSubStream: function(e4, t3, a2) {
    for (var r3 = e4 + t3; this.bufferLength <= r3 && !this.eof; ) this.readBlock();
    return new pr(this.buffer, e4, t3, a2);
  }, skip: function(e4) {
    e4 || (e4 = 1), this.pos += e4;
  }, reset: function() {
    this.pos = 0;
  }, getBaseStreams: function() {
    return this.str && this.str.getBaseStreams ? this.str.getBaseStreams() : [];
  } }, e3;
}());
var vr = (function() {
  function e3(e4) {
    this.dict = e4.dict, br.call(this);
  }
  e3.prototype = Object.create(br.prototype), e3.prototype.readBlock = function() {
    var e4 = this.bufferLength;
    e4 += 1024;
    this.ensureBuffer(e4);
    this.bufferLength = e4;
  }, e3.prototype.getBytes = function(e4) {
    var t3, a2 = this.pos;
    if (e4) {
      for (this.ensureBuffer(a2 + e4), t3 = a2 + e4; !this.eof && this.bufferLength < t3; ) this.readBlock();
      var r3 = this.bufferLength;
      t3 > r3 && (t3 = r3);
    } else this.eof = true, t3 = this.bufferLength;
    return this.pos = t3, this.buffer.subarray(a2, t3);
  };
}(), function() {
  function e3(e4) {
    this.streams = e4, br.call(this);
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.readBlock = function() {
    var e4 = this.streams;
    if (0 !== e4.length) {
      var t3 = e4.shift().getBytes(), a2 = this.bufferLength, r3 = a2 + t3.length;
      this.ensureBuffer(r3).set(t3, a2), this.bufferLength = r3;
    } else this.eof = true;
  }, e3.prototype.getBaseStreams = function() {
    for (var e4 = [], t3 = 0, a2 = this.streams.length; t3 < a2; t3++) {
      var r3 = this.streams[t3];
      r3.getBaseStreams && Qe.concatenateToArray(e4, r3.getBaseStreams());
    }
    return e4;
  }, e3;
}());
var yr = function() {
  var e3 = new Uint32Array([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]), t3 = new Uint32Array([3, 4, 5, 6, 7, 8, 9, 10, 65547, 65549, 65551, 65553, 131091, 131095, 131099, 131103, 196643, 196651, 196659, 196667, 262211, 262227, 262243, 262259, 327811, 327843, 327875, 327907, 258, 258, 258]), a2 = new Uint32Array([1, 2, 3, 4, 65541, 65543, 131081, 131085, 196625, 196633, 262177, 262193, 327745, 327777, 393345, 393409, 459009, 459137, 524801, 525057, 590849, 591361, 657409, 658433, 724993, 727041, 794625, 798721, 868353, 876545]), r3 = [new Uint32Array([459008, 524368, 524304, 524568, 459024, 524400, 524336, 590016, 459016, 524384, 524320, 589984, 524288, 524416, 524352, 590048, 459012, 524376, 524312, 589968, 459028, 524408, 524344, 590032, 459020, 524392, 524328, 59e4, 524296, 524424, 524360, 590064, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590024, 459018, 524388, 524324, 589992, 524292, 524420, 524356, 590056, 459014, 524380, 524316, 589976, 459030, 524412, 524348, 590040, 459022, 524396, 524332, 590008, 524300, 524428, 524364, 590072, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590020, 459017, 524386, 524322, 589988, 524290, 524418, 524354, 590052, 459013, 524378, 524314, 589972, 459029, 524410, 524346, 590036, 459021, 524394, 524330, 590004, 524298, 524426, 524362, 590068, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590028, 459019, 524390, 524326, 589996, 524294, 524422, 524358, 590060, 459015, 524382, 524318, 589980, 459031, 524414, 524350, 590044, 459023, 524398, 524334, 590012, 524302, 524430, 524366, 590076, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590018, 459016, 524385, 524321, 589986, 524289, 524417, 524353, 590050, 459012, 524377, 524313, 589970, 459028, 524409, 524345, 590034, 459020, 524393, 524329, 590002, 524297, 524425, 524361, 590066, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590026, 459018, 524389, 524325, 589994, 524293, 524421, 524357, 590058, 459014, 524381, 524317, 589978, 459030, 524413, 524349, 590042, 459022, 524397, 524333, 590010, 524301, 524429, 524365, 590074, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590022, 459017, 524387, 524323, 589990, 524291, 524419, 524355, 590054, 459013, 524379, 524315, 589974, 459029, 524411, 524347, 590038, 459021, 524395, 524331, 590006, 524299, 524427, 524363, 590070, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590030, 459019, 524391, 524327, 589998, 524295, 524423, 524359, 590062, 459015, 524383, 524319, 589982, 459031, 524415, 524351, 590046, 459023, 524399, 524335, 590014, 524303, 524431, 524367, 590078, 459008, 524368, 524304, 524568, 459024, 524400, 524336, 590017, 459016, 524384, 524320, 589985, 524288, 524416, 524352, 590049, 459012, 524376, 524312, 589969, 459028, 524408, 524344, 590033, 459020, 524392, 524328, 590001, 524296, 524424, 524360, 590065, 459010, 524372, 524308, 524572, 459026, 524404, 524340, 590025, 459018, 524388, 524324, 589993, 524292, 524420, 524356, 590057, 459014, 524380, 524316, 589977, 459030, 524412, 524348, 590041, 459022, 524396, 524332, 590009, 524300, 524428, 524364, 590073, 459009, 524370, 524306, 524570, 459025, 524402, 524338, 590021, 459017, 524386, 524322, 589989, 524290, 524418, 524354, 590053, 459013, 524378, 524314, 589973, 459029, 524410, 524346, 590037, 459021, 524394, 524330, 590005, 524298, 524426, 524362, 590069, 459011, 524374, 524310, 524574, 459027, 524406, 524342, 590029, 459019, 524390, 524326, 589997, 524294, 524422, 524358, 590061, 459015, 524382, 524318, 589981, 459031, 524414, 524350, 590045, 459023, 524398, 524334, 590013, 524302, 524430, 524366, 590077, 459008, 524369, 524305, 524569, 459024, 524401, 524337, 590019, 459016, 524385, 524321, 589987, 524289, 524417, 524353, 590051, 459012, 524377, 524313, 589971, 459028, 524409, 524345, 590035, 459020, 524393, 524329, 590003, 524297, 524425, 524361, 590067, 459010, 524373, 524309, 524573, 459026, 524405, 524341, 590027, 459018, 524389, 524325, 589995, 524293, 524421, 524357, 590059, 459014, 524381, 524317, 589979, 459030, 524413, 524349, 590043, 459022, 524397, 524333, 590011, 524301, 524429, 524365, 590075, 459009, 524371, 524307, 524571, 459025, 524403, 524339, 590023, 459017, 524387, 524323, 589991, 524291, 524419, 524355, 590055, 459013, 524379, 524315, 589975, 459029, 524411, 524347, 590039, 459021, 524395, 524331, 590007, 524299, 524427, 524363, 590071, 459011, 524375, 524311, 524575, 459027, 524407, 524343, 590031, 459019, 524391, 524327, 589999, 524295, 524423, 524359, 590063, 459015, 524383, 524319, 589983, 459031, 524415, 524351, 590047, 459023, 524399, 524335, 590015, 524303, 524431, 524367, 590079]), 9], i3 = [new Uint32Array([327680, 327696, 327688, 327704, 327684, 327700, 327692, 327708, 327682, 327698, 327690, 327706, 327686, 327702, 327694, 0, 327681, 327697, 327689, 327705, 327685, 327701, 327693, 327709, 327683, 327699, 327691, 327707, 327687, 327703, 327695, 0]), 5];
  function n3(e4) {
    var t4 = e4.getBytes(), a3 = 0;
    this.dict = e4.dict;
    var r4 = t4[a3++], i4 = t4[a3++];
    -1 != r4 && -1 != i4 || Oe("Invalid header in flate stream: " + r4 + ", " + i4), 8 != (15 & r4) && Oe("Unknown compression method in flate stream: " + r4 + ", " + i4), ((r4 << 8) + i4) % 31 != 0 && Oe("Bad FCHECK in flate stream: " + r4 + ", " + i4), 32 & i4 && Oe("FDICT bit set in flate stream: " + r4 + ", " + i4), this.bytes = t4, this.bytesPos = 2, this.codeSize = 0, this.codeBuf = 0, br.call(this);
  }
  return n3.prototype = Object.create(br.prototype), n3.prototype.getBits = function(e4) {
    for (var t4, a3 = this.codeSize, r4 = this.codeBuf, i4 = this.bytes, n4 = this.bytesPos; a3 < e4; ) void 0 === (t4 = i4[n4++]) && Oe("Bad encoding in flate stream"), r4 |= t4 << a3, a3 += 8;
    return t4 = r4 & (1 << e4) - 1, this.codeBuf = r4 >> e4, this.codeSize = a3 -= e4, this.bytesPos = n4, t4;
  }, n3.prototype.getCode = function(e4) {
    for (var t4 = e4[0], a3 = e4[1], r4 = this.codeSize, i4 = this.codeBuf, n4 = this.bytes, c3 = this.bytesPos; r4 < a3; ) {
      var s3;
      void 0 === (s3 = n4[c3++]) && Oe("Bad encoding in flate stream"), i4 |= s3 << r4, r4 += 8;
    }
    var o3 = t4[i4 & (1 << a3) - 1], f2 = o3 >> 16, l2 = 65535 & o3;
    return (0 === r4 || r4 < f2 || 0 === f2) && Oe("Bad encoding in flate stream"), this.codeBuf = i4 >> f2, this.codeSize = r4 - f2, this.bytesPos = c3, l2;
  }, n3.prototype.generateHuffmanTable = function(e4) {
    for (var t4 = e4.length, a3 = 0, r4 = 0; r4 < t4; ++r4) e4[r4] > a3 && (a3 = e4[r4]);
    for (var i4 = 1 << a3, n4 = new Uint32Array(i4), c3 = 1, s3 = 0, o3 = 2; c3 <= a3; ++c3, s3 <<= 1, o3 <<= 1) for (var f2 = 0; f2 < t4; ++f2) if (e4[f2] == c3) {
      var l2 = 0, h3 = s3;
      for (r4 = 0; r4 < c3; ++r4) l2 = l2 << 1 | 1 & h3, h3 >>= 1;
      for (r4 = l2; r4 < i4; r4 += o3) n4[r4] = c3 << 16 | f2;
      ++s3;
    }
    return [n4, a3];
  }, n3.prototype.readBlock = function() {
    var n4 = this.getBits(3);
    if (1 & n4 && (this.eof = true), 0 !== (n4 >>= 1)) {
      var c3, s3;
      if (1 == n4) c3 = r3, s3 = i3;
      else if (2 == n4) {
        for (var o3 = this.getBits(5) + 257, f2 = this.getBits(5) + 1, l2 = this.getBits(4) + 4, h3 = new Uint8Array(e3.length), u3 = 0; u3 < l2; ++u3) h3[e3[u3]] = this.getBits(3);
        for (var d3 = this.generateHuffmanTable(h3), g2 = 0, m3 = (u3 = 0, o3 + f2), p3 = new Uint8Array(m3); u3 < m3; ) {
          var b3 = this.getCode(d3);
          if (16 == b3) var v3 = 2, y3 = 3, k3 = g2;
          else if (17 == b3) v3 = 3, y3 = 3, k3 = g2 = 0;
          else {
            if (18 != b3) {
              p3[u3++] = g2 = b3;
              continue;
            }
            v3 = 7, y3 = 11, k3 = g2 = 0;
          }
          for (var A3 = this.getBits(v3) + y3; A3-- > 0; ) p3[u3++] = k3;
        }
        c3 = this.generateHuffmanTable(p3.subarray(0, o3)), s3 = this.generateHuffmanTable(p3.subarray(o3, m3));
      } else Oe("Unknown block type in flate stream");
      for (var w3 = (M2 = this.buffer) ? M2.length : 0, x3 = this.bufferLength; ; ) {
        var S3 = this.getCode(c3);
        if (S3 < 256) x3 + 1 >= w3 && (w3 = (M2 = this.ensureBuffer(x3 + 1)).length), M2[x3++] = S3;
        else {
          if (256 == S3) return void (this.bufferLength = x3);
          var C2 = (S3 = t3[S3 -= 257]) >> 16;
          C2 > 0 && (C2 = this.getBits(C2));
          g2 = (65535 & S3) + C2;
          S3 = this.getCode(s3), (C2 = (S3 = a2[S3]) >> 16) > 0 && (C2 = this.getBits(C2));
          var I3 = (65535 & S3) + C2;
          x3 + g2 >= w3 && (w3 = (M2 = this.ensureBuffer(x3 + g2)).length);
          for (var B3 = 0; B3 < g2; ++B3, ++x3) M2[x3] = M2[x3 - I3];
        }
      }
    } else {
      var T3, L2 = this.bytes, F2 = this.bytesPos;
      void 0 === (T3 = L2[F2++]) && Oe("Bad block header in flate stream");
      var P3 = T3;
      void 0 === (T3 = L2[F2++]) && Oe("Bad block header in flate stream"), P3 |= T3 << 8, void 0 === (T3 = L2[F2++]) && Oe("Bad block header in flate stream");
      var R2 = T3;
      void 0 === (T3 = L2[F2++]) && Oe("Bad block header in flate stream"), (R2 |= T3 << 8) == (65535 & ~P3) || 0 === P3 && 0 === R2 || Oe("Bad uncompressed block length in flate stream"), this.codeBuf = 0, this.codeSize = 0;
      var O2 = this.bufferLength, M2 = this.ensureBuffer(O2 + P3), D2 = O2 + P3;
      this.bufferLength = D2;
      for (var q2 = O2; q2 < D2; ++q2) {
        if (void 0 === (T3 = L2[F2++])) {
          this.eof = true;
          break;
        }
        M2[q2] = T3;
      }
      this.bytesPos = F2;
    }
  }, n3;
}();
var kr = function() {
  function e3(e4, t3) {
    var a2 = this.predictor = t3.get("Predictor") || 1;
    if (a2 <= 1) return e4;
    2 !== a2 && (a2 < 10 || a2 > 15) && Oe("Unsupported predictor: " + a2), this.readBlock = 2 === a2 ? this.readBlockTiff : this.readBlockPng, this.str = e4, this.dict = e4.dict;
    var r3 = this.colors = t3.get("Colors") || 1, i3 = this.bits = t3.get("BitsPerComponent") || 8, n3 = this.columns = t3.get("Columns") || 1;
    return this.pixBytes = r3 * i3 + 7 >> 3, this.rowBytes = n3 * r3 * i3 + 7 >> 3, br.call(this), this;
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.readBlockTiff = function() {
    var e4 = this.rowBytes, t3 = this.bufferLength, a2 = this.ensureBuffer(t3 + e4), r3 = this.bits, i3 = this.colors, n3 = this.str.getBytes(e4);
    if (this.eof = !n3.length, !this.eof) {
      var c3 = 0, s3 = 0, o3 = 0, f2 = 0, l2 = t3;
      if (1 === r3) for (var h3 = 0; h3 < e4; ++h3) {
        var u3 = n3[h3];
        c3 = c3 << 8 | u3, a2[l2++] = 255 & (u3 ^ c3 >> i3), c3 &= 65535;
      }
      else if (8 === r3) {
        for (h3 = 0; h3 < i3; ++h3) a2[l2++] = n3[h3];
        for (; h3 < e4; ++h3) a2[l2] = a2[l2 - i3] + n3[h3], l2++;
      } else {
        var d3 = new Uint8Array(i3 + 1), g2 = (1 << r3) - 1, m3 = 0, p3 = t3, b3 = this.columns;
        for (h3 = 0; h3 < b3; ++h3) for (var v3 = 0; v3 < i3; ++v3) o3 < r3 && (c3 = c3 << 8 | 255 & n3[m3++], o3 += 8), d3[v3] = d3[v3] + (c3 >> o3 - r3) & g2, o3 -= r3, s3 = s3 << r3 | d3[v3], (f2 += r3) >= 8 && (a2[p3++] = s3 >> f2 - 8 & 255, f2 -= 8);
        f2 > 0 && (a2[p3++] = (s3 << 8 - f2) + (c3 & (1 << 8 - f2) - 1));
      }
      this.bufferLength += e4;
    }
  }, e3.prototype.readBlockPng = function() {
    var e4 = this.rowBytes, t3 = this.pixBytes, a2 = this.str.getByte(), r3 = this.str.getBytes(e4);
    if (this.eof = !r3.length, !this.eof) {
      var i3 = this.bufferLength, n3 = this.ensureBuffer(i3 + e4), c3 = n3.subarray(i3 - e4, i3);
      0 === c3.length && (c3 = new Uint8Array(e4));
      var s3 = i3;
      switch (a2) {
        case 0:
          for (var o3 = 0; o3 < e4; ++o3) n3[s3++] = r3[o3];
          break;
        case 1:
          for (o3 = 0; o3 < t3; ++o3) n3[s3++] = r3[o3];
          for (; o3 < e4; ++o3) n3[s3] = n3[s3 - t3] + r3[o3] & 255, s3++;
          break;
        case 2:
          for (o3 = 0; o3 < e4; ++o3) n3[s3++] = c3[o3] + r3[o3] & 255;
          break;
        case 3:
          for (o3 = 0; o3 < t3; ++o3) n3[s3++] = (c3[o3] >> 1) + r3[o3];
          for (; o3 < e4; ++o3) n3[s3] = (c3[o3] + n3[s3 - t3] >> 1) + r3[o3] & 255, s3++;
          break;
        case 4:
          for (o3 = 0; o3 < t3; ++o3) {
            var f2 = c3[o3], l2 = r3[o3];
            n3[s3++] = f2 + l2;
          }
          for (; o3 < e4; ++o3) {
            f2 = c3[o3];
            var h3 = c3[o3 - t3], u3 = n3[s3 - t3], d3 = u3 + f2 - h3, g2 = d3 - u3;
            g2 < 0 && (g2 = -g2);
            var m3 = d3 - f2;
            m3 < 0 && (m3 = -m3);
            var p3 = d3 - h3;
            p3 < 0 && (p3 = -p3);
            l2 = r3[o3];
            n3[s3++] = g2 <= m3 && g2 <= p3 ? u3 + l2 : m3 <= p3 ? f2 + l2 : h3 + l2;
          }
          break;
        default:
          Oe("Unsupported predictor: " + a2);
      }
      this.bufferLength += e4;
    }
  }, e3;
}();
var Ar = function() {
  function e3(e4, t3, a2) {
    this.dict = t3, this.bytes = e4, br.call(this);
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.ensureBuffer = function(e4) {
    if (!this.bufferLength) try {
      var t3 = new Er();
      -1 != this.colorTransform && (t3.colorTransform = this.colorTransform), t3.parse(this.bytes);
      var a2 = t3.width, r3 = t3.height, i3 = t3.getData(a2, r3);
      this.buffer = i3, this.bufferLength = i3.length, this.eof = true;
    } catch (e5) {
      Oe("JPEG error: " + e5);
    }
  }, e3.prototype.getIR = function() {
    return be.createObjectURL(this.bytes, "image/jpeg");
  }, e3.prototype.isNativelySupported = function(e4, t3) {
    var a2 = bt.parse(this.dict.get("ColorSpace", "CS"), e4, t3);
    return "DeviceGray" === a2.name || "DeviceRGB" === a2.name;
  }, e3.prototype.isNativelyDecodable = function(e4, t3) {
    var a2 = bt.parse(this.dict.get("ColorSpace", "CS"), e4, t3).numComps;
    return 1 == a2 || 3 == a2;
  }, e3;
}();
var wr = function() {
  function e3(e4, t3) {
    this.dict = t3, this.bytes = e4, br.call(this);
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.ensureBuffer = function(e4) {
    if (!this.bufferLength) {
      var t3 = new Dr();
      t3.parse(this.bytes);
      var a2 = t3.width, r3 = t3.height, i3 = t3.componentsCount;
      1 != i3 && 3 != i3 && 4 != i3 && Oe("JPX with " + i3 + " components is not supported");
      for (var n3 = new Uint8Array(a2 * r3 * i3), c3 = 0, s3 = t3.tiles.length; c3 < s3; c3++) {
        var o3, f2, l2, h3, u3, d3, g2, m3 = t3.tiles[c3], p3 = m3[0].width, b3 = m3[0].height, v3 = m3[0].left, y3 = m3[0].top;
        switch (i3) {
          case 1:
            l2 = m3[0].items, o3 = a2 * y3 + v3, g2 = a2 - p3, f2 = 0;
            for (var k3 = 0; k3 < b3; k3++) {
              for (var A3 = 0; A3 < p3; A3++) n3[o3++] = l2[f2++];
              o3 += g2;
            }
            break;
          case 3:
            l2 = m3[0].items, h3 = m3[1].items, u3 = m3[2].items, o3 = 3 * (a2 * y3 + v3), g2 = 3 * (a2 - p3), f2 = 0;
            for (k3 = 0; k3 < b3; k3++) {
              for (A3 = 0; A3 < p3; A3++) n3[o3++] = l2[f2], n3[o3++] = h3[f2], n3[o3++] = u3[f2], f2++;
              o3 += g2;
            }
            break;
          case 4:
            l2 = m3[0].items, h3 = m3[1].items, u3 = m3[2].items, d3 = m3[3].items, o3 = 4 * (a2 * y3 + v3), g2 = 4 * (a2 - p3), f2 = 0;
            for (k3 = 0; k3 < b3; k3++) {
              for (A3 = 0; A3 < p3; A3++) n3[o3++] = l2[f2], n3[o3++] = h3[f2], n3[o3++] = u3[f2], n3[o3++] = d3[f2], f2++;
              o3 += g2;
            }
        }
      }
      this.buffer = n3, this.bufferLength = n3.length, this.eof = true;
    }
  }, e3;
}();
var xr = function() {
  function e3(e4, t3) {
    this.dict = t3, this.bytes = e4, br.call(this);
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.ensureBuffer = function(e4) {
    if (!this.bufferLength) {
      var t3 = new qr(), a2 = [], r3 = this.dict.get("DecodeParms");
      if (r3 && r3.has("JBIG2Globals")) {
        var i3 = r3.get("JBIG2Globals").getBytes();
        a2.push({ data: i3, start: 0, end: i3.length });
      }
      a2.push({ data: this.bytes, start: 0, end: this.bytes.length });
      for (var n3 = t3.parseChunks(a2), c3 = n3.length, s3 = 0; s3 < c3; s3++) n3[s3] ^= 255;
      this.buffer = n3, this.bufferLength = c3, this.eof = true;
    }
  }, e3;
}();
var Sr = function() {
  function e3(e4, t3) {
    this.str = e4, this.dict = e4.dict, this.decrypt = t3, this.nextChunk = null, this.initialized = false, br.call(this);
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.readBlock = function() {
    var e4;
    if (this.initialized ? e4 = this.nextChunk : (e4 = this.str.getBytes(512), this.initialized = true), e4 && 0 !== e4.length) {
      this.nextChunk = this.str.getBytes(512);
      var t3 = this.nextChunk && this.nextChunk.length > 0;
      e4 = (0, this.decrypt)(e4, !t3);
      var a2, r3 = this.bufferLength, i3 = e4.length, n3 = this.ensureBuffer(r3 + i3);
      for (a2 = 0; a2 < i3; a2++) n3[r3++] = e4[a2];
      this.bufferLength = r3;
    } else this.eof = true;
  }, e3;
}();
var Cr = function() {
  function e3(e4) {
    this.str = e4, this.dict = e4.dict, this.input = new Uint8Array(5), br.call(this);
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.readBlock = function() {
    for (var e4 = this.str, t3 = e4.getByte(); gr.isSpace(t3); ) t3 = e4.getByte();
    if (-1 !== t3 && 126 !== t3) {
      var a2, r3 = this.bufferLength;
      if (122 == t3) {
        a2 = this.ensureBuffer(r3 + 4);
        for (var i3 = 0; i3 < 4; ++i3) a2[r3 + i3] = 0;
        this.bufferLength += 4;
      } else {
        var n3 = this.input;
        n3[0] = t3;
        for (i3 = 1; i3 < 5; ++i3) {
          for (t3 = e4.getByte(); gr.isSpace(t3); ) t3 = e4.getByte();
          if (n3[i3] = t3, -1 === t3 || 126 == t3) break;
        }
        if (a2 = this.ensureBuffer(r3 + i3 - 1), this.bufferLength += i3 - 1, i3 < 5) {
          for (; i3 < 5; ++i3) n3[i3] = 117;
          this.eof = true;
        }
        var c3 = 0;
        for (i3 = 0; i3 < 5; ++i3) c3 = 85 * c3 + (n3[i3] - 33);
        for (i3 = 3; i3 >= 0; --i3) a2[r3 + i3] = 255 & c3, c3 >>= 8;
      }
    } else this.eof = true;
  }, e3;
}();
var Ir = function() {
  function e3(e4) {
    this.str = e4, this.dict = e4.dict, this.firstDigit = -1, br.call(this);
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.readBlock = function() {
    var e4 = this.str.getBytes(8e3);
    if (e4.length) {
      for (var t3 = e4.length + 1 >> 1, a2 = this.ensureBuffer(this.bufferLength + t3), r3 = this.bufferLength, i3 = this.firstDigit, n3 = 0, c3 = e4.length; n3 < c3; n3++) {
        var s3, o3 = e4[n3];
        if (o3 >= 48 && o3 <= 57) s3 = 15 & o3;
        else {
          if (!(o3 >= 65 && o3 <= 70 || o3 >= 97 && o3 <= 102)) {
            if (62 === o3) {
              this.eof = true;
              break;
            }
            continue;
          }
          s3 = 9 + (15 & o3);
        }
        i3 < 0 ? i3 = s3 : (a2[r3++] = i3 << 4 | s3, i3 = -1);
      }
      i3 >= 0 && this.eof && (a2[r3++] = i3 << 4, i3 = -1), this.firstDigit = i3, this.bufferLength = r3;
    } else this.eof = true;
  }, e3;
}();
var Br = function() {
  function e3(e4) {
    this.str = e4, this.dict = e4.dict, br.call(this);
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.readBlock = function() {
    var e4 = this.str.getBytes(2);
    if (!e4 || e4.length < 2 || 128 == e4[0]) this.eof = true;
    else {
      var t3 = this.bufferLength, a2 = e4[0];
      if (a2 < 128) {
        if ((n3 = this.ensureBuffer(t3 + a2 + 1))[t3++] = e4[1], a2 > 0) {
          var r3 = this.str.getBytes(a2);
          n3.set(r3, t3), t3 += a2;
        }
      } else {
        a2 = 257 - a2;
        for (var i3 = e4[1], n3 = this.ensureBuffer(t3 + a2 + 1), c3 = 0; c3 < a2; c3++) n3[t3++] = i3;
      }
      this.bufferLength = t3;
    }
  }, e3;
}();
var Tr = function() {
  var e3 = [[-1, -1], [-1, -1], [7, 8], [7, 7], [6, 6], [6, 6], [6, 5], [6, 5], [4, 0], [4, 0], [4, 0], [4, 0], [4, 0], [4, 0], [4, 0], [4, 0], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [3, 3], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2], [1, 2]], t3 = [[-1, -1], [12, -2], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [12, 1984], [12, 2048], [12, 2112], [12, 2176], [12, 2240], [12, 2304], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [12, 2368], [12, 2432], [12, 2496], [12, 2560]], a2 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [8, 29], [8, 29], [8, 30], [8, 30], [8, 45], [8, 45], [8, 46], [8, 46], [7, 22], [7, 22], [7, 22], [7, 22], [7, 23], [7, 23], [7, 23], [7, 23], [8, 47], [8, 47], [8, 48], [8, 48], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [6, 13], [7, 20], [7, 20], [7, 20], [7, 20], [8, 33], [8, 33], [8, 34], [8, 34], [8, 35], [8, 35], [8, 36], [8, 36], [8, 37], [8, 37], [8, 38], [8, 38], [7, 19], [7, 19], [7, 19], [7, 19], [8, 31], [8, 31], [8, 32], [8, 32], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 1], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [6, 12], [8, 53], [8, 53], [8, 54], [8, 54], [7, 26], [7, 26], [7, 26], [7, 26], [8, 39], [8, 39], [8, 40], [8, 40], [8, 41], [8, 41], [8, 42], [8, 42], [8, 43], [8, 43], [8, 44], [8, 44], [7, 21], [7, 21], [7, 21], [7, 21], [7, 28], [7, 28], [7, 28], [7, 28], [8, 61], [8, 61], [8, 62], [8, 62], [8, 63], [8, 63], [8, 0], [8, 0], [8, 320], [8, 320], [8, 384], [8, 384], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 10], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [5, 11], [7, 27], [7, 27], [7, 27], [7, 27], [8, 59], [8, 59], [8, 60], [8, 60], [9, 1472], [9, 1536], [9, 1600], [9, 1728], [7, 18], [7, 18], [7, 18], [7, 18], [7, 24], [7, 24], [7, 24], [7, 24], [8, 49], [8, 49], [8, 50], [8, 50], [8, 51], [8, 51], [8, 52], [8, 52], [7, 25], [7, 25], [7, 25], [7, 25], [8, 55], [8, 55], [8, 56], [8, 56], [8, 57], [8, 57], [8, 58], [8, 58], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 192], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [6, 1664], [8, 448], [8, 448], [8, 512], [8, 512], [9, 704], [9, 768], [8, 640], [8, 640], [8, 576], [8, 576], [9, 832], [9, 896], [9, 960], [9, 1024], [9, 1088], [9, 1152], [9, 1216], [9, 1280], [9, 1344], [9, 1408], [7, 256], [7, 256], [7, 256], [7, 256], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 2], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [4, 3], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 128], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 8], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [5, 9], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 16], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [6, 17], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 4], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [4, 5], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 14], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [6, 15], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [5, 64], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 6], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7], [4, 7]], r3 = [[-1, -1], [-1, -1], [12, -2], [12, -2], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [-1, -1], [11, 1792], [11, 1792], [11, 1792], [11, 1792], [12, 1984], [12, 1984], [12, 2048], [12, 2048], [12, 2112], [12, 2112], [12, 2176], [12, 2176], [12, 2240], [12, 2240], [12, 2304], [12, 2304], [11, 1856], [11, 1856], [11, 1856], [11, 1856], [11, 1920], [11, 1920], [11, 1920], [11, 1920], [12, 2368], [12, 2368], [12, 2432], [12, 2432], [12, 2496], [12, 2496], [12, 2560], [12, 2560], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [10, 18], [12, 52], [12, 52], [13, 640], [13, 704], [13, 768], [13, 832], [12, 55], [12, 55], [12, 56], [12, 56], [13, 1280], [13, 1344], [13, 1408], [13, 1472], [12, 59], [12, 59], [12, 60], [12, 60], [13, 1536], [13, 1600], [11, 24], [11, 24], [11, 24], [11, 24], [11, 25], [11, 25], [11, 25], [11, 25], [13, 1664], [13, 1728], [12, 320], [12, 320], [12, 384], [12, 384], [12, 448], [12, 448], [13, 512], [13, 576], [12, 53], [12, 53], [12, 54], [12, 54], [13, 896], [13, 960], [13, 1024], [13, 1088], [13, 1152], [13, 1216], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64], [10, 64]], i3 = [[8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [8, 13], [11, 23], [11, 23], [12, 50], [12, 51], [12, 44], [12, 45], [12, 46], [12, 47], [12, 57], [12, 58], [12, 61], [12, 256], [10, 16], [10, 16], [10, 16], [10, 16], [10, 17], [10, 17], [10, 17], [10, 17], [12, 48], [12, 49], [12, 62], [12, 63], [12, 30], [12, 31], [12, 32], [12, 33], [12, 40], [12, 41], [11, 22], [11, 22], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [8, 14], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 10], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [7, 11], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [9, 15], [12, 128], [12, 192], [12, 26], [12, 27], [12, 28], [12, 29], [11, 19], [11, 19], [11, 20], [11, 20], [12, 34], [12, 35], [12, 36], [12, 37], [12, 38], [12, 39], [11, 21], [11, 21], [12, 42], [12, 43], [10, 0], [10, 0], [10, 0], [10, 0], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12], [7, 12]], n3 = [[-1, -1], [-1, -1], [-1, -1], [-1, -1], [6, 9], [6, 8], [5, 7], [5, 7], [4, 6], [4, 6], [4, 6], [4, 6], [4, 5], [4, 5], [4, 5], [4, 5], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 1], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [3, 4], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 3], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2], [2, 2]];
  function c3(e4, t4) {
    this.str = e4, this.dict = e4.dict, t4 instanceof Zt || (t4 = new Zt()), this.encoding = t4.get("K") || 0, this.eoline = t4.get("EndOfLine") || false, this.byteAlign = t4.get("EncodedByteAlign") || false, this.columns = t4.get("Columns") || 1728, this.rows = t4.get("Rows") || 0;
    var a3, r4 = t4.get("EndOfBlock");
    for (null == r4 && (r4 = true), this.eoblock = r4, this.black = t4.get("BlackIs1") || false, this.codingLine = new Uint32Array(this.columns + 1), this.refLine = new Uint32Array(this.columns + 2), this.codingLine[0] = this.columns, this.codingPos = 0, this.row = 0, this.nextLine2D = this.encoding < 0, this.inputBits = 0, this.inputBuf = 0, this.outputBits = 0, this.buf = hr; 0 === (a3 = this.lookBits(12)); ) this.eatBits(1);
    1 == a3 && this.eatBits(12), this.encoding > 0 && (this.nextLine2D = !this.lookBits(1), this.eatBits(1)), br.call(this);
  }
  return c3.prototype = Object.create(br.prototype), c3.prototype.readBlock = function() {
    for (; !this.eof; ) {
      var e4 = this.lookChar();
      this.buf = hr, this.ensureBuffer(this.bufferLength + 1), this.buffer[this.bufferLength++] = e4;
    }
  }, c3.prototype.addPixels = function(e4, t4) {
    var a3 = this.codingLine, r4 = this.codingPos;
    e4 > a3[r4] && (e4 > this.columns && (Pe("row is wrong length: " + e4 + " > " + this.columns), this.err = true, e4 = this.columns), 1 & r4 ^ t4 && ++r4, a3[r4] = e4), this.codingPos = r4;
  }, c3.prototype.addPixelsNeg = function(e4, t4) {
    var a3 = this.codingLine, r4 = this.codingPos;
    if (e4 > a3[r4]) e4 > this.columns && (Pe("row is wrong length: " + e4 + " > " + this.columns), this.err = true, e4 = this.columns), 1 & r4 ^ t4 && ++r4, a3[r4] = e4;
    else if (e4 < a3[r4]) {
      for (e4 < 0 && (Pe("invalid code"), this.err = true, e4 = 0); r4 > 0 && e4 < a3[r4 - 1]; ) --r4;
      a3[r4] = e4;
    }
    this.codingPos = r4;
  }, c3.prototype.lookChar = function() {
    if (this.buf != hr) return this.buf;
    var e4, t4, a3 = this.refLine, r4 = this.codingLine, i4 = this.columns;
    if (0 === this.outputBits) {
      if (this.eof) return null;
      var n4, c4, s3;
      if (this.err = false, this.nextLine2D) {
        for (var o3 = 0; r4[o3] < i4; ++o3) a3[o3] = r4[o3];
        for (a3[o3++] = i4, a3[o3] = i4, r4[0] = 0, this.codingPos = 0, e4 = 0, t4 = 0; r4[this.codingPos] < i4; ) switch (n4 = this.getTwoDimCode()) {
          case 0:
            this.addPixels(a3[e4 + 1], t4), a3[e4 + 1] < i4 && (e4 += 2);
            break;
          case 1:
            if (n4 = c4 = 0, t4) {
              do {
                n4 += s3 = this.getBlackCode();
              } while (s3 >= 64);
              do {
                c4 += s3 = this.getWhiteCode();
              } while (s3 >= 64);
            } else {
              do {
                n4 += s3 = this.getWhiteCode();
              } while (s3 >= 64);
              do {
                c4 += s3 = this.getBlackCode();
              } while (s3 >= 64);
            }
            for (this.addPixels(r4[this.codingPos] + n4, t4), r4[this.codingPos] < i4 && this.addPixels(r4[this.codingPos] + c4, 1 ^ t4); a3[e4] <= r4[this.codingPos] && a3[e4] < i4; ) e4 += 2;
            break;
          case 7:
            if (this.addPixels(a3[e4] + 3, t4), t4 ^= 1, r4[this.codingPos] < i4) for (++e4; a3[e4] <= r4[this.codingPos] && a3[e4] < i4; ) e4 += 2;
            break;
          case 5:
            if (this.addPixels(a3[e4] + 2, t4), t4 ^= 1, r4[this.codingPos] < i4) for (++e4; a3[e4] <= r4[this.codingPos] && a3[e4] < i4; ) e4 += 2;
            break;
          case 3:
            if (this.addPixels(a3[e4] + 1, t4), t4 ^= 1, r4[this.codingPos] < i4) for (++e4; a3[e4] <= r4[this.codingPos] && a3[e4] < i4; ) e4 += 2;
            break;
          case 2:
            if (this.addPixels(a3[e4], t4), t4 ^= 1, r4[this.codingPos] < i4) for (++e4; a3[e4] <= r4[this.codingPos] && a3[e4] < i4; ) e4 += 2;
            break;
          case 8:
            if (this.addPixelsNeg(a3[e4] - 3, t4), t4 ^= 1, r4[this.codingPos] < i4) for (e4 > 0 ? --e4 : ++e4; a3[e4] <= r4[this.codingPos] && a3[e4] < i4; ) e4 += 2;
            break;
          case 6:
            if (this.addPixelsNeg(a3[e4] - 2, t4), t4 ^= 1, r4[this.codingPos] < i4) for (e4 > 0 ? --e4 : ++e4; a3[e4] <= r4[this.codingPos] && a3[e4] < i4; ) e4 += 2;
            break;
          case 4:
            if (this.addPixelsNeg(a3[e4] - 1, t4), t4 ^= 1, r4[this.codingPos] < i4) for (e4 > 0 ? --e4 : ++e4; a3[e4] <= r4[this.codingPos] && a3[e4] < i4; ) e4 += 2;
            break;
          case hr:
            this.addPixels(i4, 0), this.eof = true;
            break;
          default:
            Pe("bad 2d code"), this.addPixels(i4, 0), this.err = true;
        }
      } else for (r4[0] = 0, this.codingPos = 0, t4 = 0; r4[this.codingPos] < i4; ) {
        if (n4 = 0, t4) do {
          n4 += s3 = this.getBlackCode();
        } while (s3 >= 64);
        else do {
          n4 += s3 = this.getWhiteCode();
        } while (s3 >= 64);
        this.addPixels(r4[this.codingPos] + n4, t4), t4 ^= 1;
      }
      this.byteAlign && (this.inputBits &= -8);
      var f2 = false;
      if (this.eoblock || this.row != this.rows - 1) {
        for (n4 = this.lookBits(12); 0 === n4; ) this.eatBits(1), n4 = this.lookBits(12);
        1 == n4 ? (this.eatBits(12), f2 = true) : n4 == hr && (this.eof = true);
      } else this.eof = true;
      if (!this.eof && this.encoding > 0 && (this.nextLine2D = !this.lookBits(1), this.eatBits(1)), this.eoblock && f2) {
        if (1 == (n4 = this.lookBits(12))) {
          if (this.eatBits(12), this.encoding > 0 && (this.lookBits(1), this.eatBits(1)), this.encoding >= 0) for (o3 = 0; o3 < 4; ++o3) 1 != (n4 = this.lookBits(12)) && Pe("bad rtc code: " + n4), this.eatBits(12), this.encoding > 0 && (this.lookBits(1), this.eatBits(1));
          this.eof = true;
        }
      } else if (this.err && this.eoline) {
        for (; ; ) {
          if ((n4 = this.lookBits(13)) == hr) return this.eof = true, null;
          if (n4 >> 1 == 1) break;
          this.eatBits(1);
        }
        this.eatBits(12), this.encoding > 0 && (this.eatBits(1), this.nextLine2D = !(1 & n4));
      }
      r4[0] > 0 ? this.outputBits = r4[this.codingPos = 0] : this.outputBits = r4[this.codingPos = 1], this.row++;
    }
    if (this.outputBits >= 8) this.buf = 1 & this.codingPos ? 0 : 255, this.outputBits -= 8, 0 === this.outputBits && r4[this.codingPos] < i4 && (this.codingPos++, this.outputBits = r4[this.codingPos] - r4[this.codingPos - 1]);
    else {
      var l2 = 8;
      this.buf = 0;
      do {
        this.outputBits > l2 ? (this.buf <<= l2, 1 & this.codingPos || (this.buf |= 255 >> 8 - l2), this.outputBits -= l2, l2 = 0) : (this.buf <<= this.outputBits, 1 & this.codingPos || (this.buf |= 255 >> 8 - this.outputBits), l2 -= this.outputBits, this.outputBits = 0, r4[this.codingPos] < i4 ? (this.codingPos++, this.outputBits = r4[this.codingPos] - r4[this.codingPos - 1]) : l2 > 0 && (this.buf <<= l2, l2 = 0));
      } while (l2);
    }
    return this.black && (this.buf ^= 255), this.buf;
  }, c3.prototype.findTableCode = function(e4, t4, a3, r4) {
    for (var i4 = r4 || 0, n4 = e4; n4 <= t4; ++n4) {
      var c4 = this.lookBits(n4);
      if (c4 == hr) return [true, 1, false];
      if (n4 < t4 && (c4 <<= t4 - n4), !i4 || c4 >= i4) {
        var s3 = a3[c4 - i4];
        if (s3[0] == n4) return this.eatBits(n4), [true, s3[1], true];
      }
    }
    return [false, 0, false];
  }, c3.prototype.getTwoDimCode = function() {
    var t4, a3 = 0;
    if (this.eoblock) {
      if (a3 = this.lookBits(7), (t4 = e3[a3]) && t4[0] > 0) return this.eatBits(t4[0]), t4[1];
    } else {
      var r4 = this.findTableCode(1, 7, e3);
      if (r4[0] && r4[2]) return r4[1];
    }
    return Pe("Bad two dim code"), hr;
  }, c3.prototype.getWhiteCode = function() {
    var e4, r4 = 0;
    if (this.eoblock) {
      if ((r4 = this.lookBits(12)) == hr) return 1;
      if ((e4 = r4 >> 5 ? a2[r4 >> 3] : t3[r4])[0] > 0) return this.eatBits(e4[0]), e4[1];
    } else {
      var i4 = this.findTableCode(1, 9, a2);
      if (i4[0]) return i4[1];
      if ((i4 = this.findTableCode(11, 12, t3))[0]) return i4[1];
    }
    return Pe("bad white code"), this.eatBits(1), 1;
  }, c3.prototype.getBlackCode = function() {
    var e4, t4;
    if (this.eoblock) {
      if ((e4 = this.lookBits(13)) == hr) return 1;
      if ((t4 = e4 >> 7 ? !(e4 >> 9) && e4 >> 7 ? i3[(e4 >> 1) - 64] : n3[e4 >> 7] : r3[e4])[0] > 0) return this.eatBits(t4[0]), t4[1];
    } else {
      var a3 = this.findTableCode(2, 6, n3);
      if (a3[0]) return a3[1];
      if ((a3 = this.findTableCode(7, 12, i3, 64))[0]) return a3[1];
      if ((a3 = this.findTableCode(10, 13, r3))[0]) return a3[1];
    }
    return Pe("bad black code"), this.eatBits(1), 1;
  }, c3.prototype.lookBits = function(e4) {
    for (var t4; this.inputBits < e4; ) {
      if (-1 === (t4 = this.str.getByte())) return 0 === this.inputBits ? hr : this.inputBuf << e4 - this.inputBits & 65535 >> 16 - e4;
      this.inputBuf = (this.inputBuf << 8) + t4, this.inputBits += 8;
    }
    return this.inputBuf >> this.inputBits - e4 & 65535 >> 16 - e4;
  }, c3.prototype.eatBits = function(e4) {
    (this.inputBits -= e4) < 0 && (this.inputBits = 0);
  }, c3;
}();
var Lr = function() {
  function e3(e4, t3) {
    this.str = e4, this.dict = e4.dict, this.cachedData = 0, this.bitsCached = 0;
    for (var a2 = 4096, r3 = { earlyChange: t3, codeLength: 9, nextCode: 258, dictionaryValues: new Uint8Array(a2), dictionaryLengths: new Uint16Array(a2), dictionaryPrevCodes: new Uint16Array(a2), currentSequence: new Uint8Array(a2), currentSequenceLength: 0 }, i3 = 0; i3 < 256; ++i3) r3.dictionaryValues[i3] = i3, r3.dictionaryLengths[i3] = 1;
    this.lzwState = r3, br.call(this);
  }
  return e3.prototype = Object.create(br.prototype), e3.prototype.readBits = function(e4) {
    for (var t3 = this.bitsCached, a2 = this.cachedData; t3 < e4; ) {
      var r3 = this.str.getByte();
      if (-1 === r3) return this.eof = true, null;
      a2 = a2 << 8 | r3, t3 += 8;
    }
    return this.bitsCached = t3 -= e4, this.cachedData = a2, this.lastCode = null, a2 >>> t3 & (1 << e4) - 1;
  }, e3.prototype.readBlock = function() {
    var e4, t3, a2, r3 = 1024, i3 = this.lzwState;
    if (i3) {
      var n3 = i3.earlyChange, c3 = i3.nextCode, s3 = i3.dictionaryValues, o3 = i3.dictionaryLengths, f2 = i3.dictionaryPrevCodes, l2 = i3.codeLength, h3 = i3.prevCode, u3 = i3.currentSequence, d3 = i3.currentSequenceLength, g2 = 0, m3 = this.bufferLength, p3 = this.ensureBuffer(this.bufferLength + r3);
      for (e4 = 0; e4 < 512; e4++) {
        var b3 = this.readBits(l2), v3 = d3 > 0;
        if (b3 < 256) u3[0] = b3, d3 = 1;
        else {
          if (!(b3 >= 258)) {
            if (256 == b3) {
              l2 = 9, c3 = 258, d3 = 0;
              continue;
            }
            this.eof = true, delete this.lzwState;
            break;
          }
          if (b3 < c3) for (t3 = (d3 = o3[b3]) - 1, a2 = b3; t3 >= 0; t3--) u3[t3] = s3[a2], a2 = f2[a2];
          else u3[d3++] = u3[0];
        }
        if (v3 && (f2[c3] = h3, o3[c3] = o3[h3] + 1, s3[c3] = u3[0], l2 = ++c3 + n3 & c3 + n3 - 1 ? l2 : 0 | Math.min(Math.log(c3 + n3) / 0.6931471805599453 + 1, 12)), h3 = b3, r3 < (g2 += d3)) {
          do {
            r3 += 512;
          } while (r3 < g2);
          p3 = this.ensureBuffer(this.bufferLength + r3);
        }
        for (t3 = 0; t3 < d3; t3++) p3[m3++] = u3[t3];
      }
      i3.nextCode = c3, i3.codeLength = l2, i3.prevCode = h3, i3.currentSequenceLength = d3, this.bufferLength = m3;
    }
  }, e3;
}();
var Fr = function() {
  function e3() {
    pr.call(this, new Uint8Array(0));
  }
  return e3.prototype = pr.prototype, e3;
}();
ve.postMessage = function(e3) {
};
var Pr = be.WorkerMessageHandler = { setup: function(e3) {
  var t3;
  function a2(e4) {
    var a3 = new gt(), r3 = function() {
      var e5 = t3.ensureModel("numPages"), r4 = t3.ensureModel("fingerprint"), n3 = t3.ensureCatalog("documentOutline"), c3 = t3.ensureModel("documentInfo"), s3 = t3.ensureCatalog("metadata"), o3 = t3.ensureXRef("encrypt"), f2 = t3.ensureCatalog("javaScript");
      gt.all([e5, r4, n3, c3, s3, o3, f2]).then(function(e6) {
        var t4 = { numPages: e6[0], fingerprint: e6[1], outline: e6[2], info: e6[3], metadata: e6[4], encrypted: !!e6[5], javaScript: e6[6] };
        a3.resolve(t4);
      }, i3);
    }, i3 = function(e5) {
      a3.reject(e5);
    };
    return t3.ensureModel("checkHeader", []).then(function() {
      t3.ensureModel("parseStartXRef", []).then(function() {
        t3.ensureModel("parse", [e4]).then(r3, i3);
      }, i3);
    }, i3), a3;
  }
  e3.on("test", function(t4) {
    if (t4 instanceof Uint8Array) {
      var a3 = 255 === t4[0];
      e3.postMessageTransfers = a3;
      var r3 = new XMLHttpRequest(), i3 = "response" in r3;
      try {
        r3.responseType;
      } catch (e4) {
        i3 = false;
      }
      i3 ? e3.send("test", { supportTypedArray: true, supportTransfers: a3 }) : e3.send("test", false);
    } else e3.send("test", false);
  }), e3.on("GetDocRequest", function(r3) {
    var i3 = function(t4) {
      e3.send("GetDoc", { pdfInfo: t4 });
    }, n3 = function(t4) {
      t4 instanceof He ? t4.code === ze.NEED_PASSWORD ? e3.send("NeedPassword", { exception: t4 }) : t4.code === ze.INCORRECT_PASSWORD && e3.send("IncorrectPassword", { exception: t4 }) : t4 instanceof _e ? e3.send("InvalidPDF", { exception: t4 }) : t4 instanceof Xe ? e3.send("MissingPDF", { exception: t4 }) : e3.send("UnknownError", { exception: new Ge(t4.message, t4.toString()) });
    };
    be.maxImageSize = void 0 === r3.maxImageSize ? -1 : r3.maxImageSize, be.disableFontFace = r3.disableFontFace, function(a3) {
      var r4 = new gt(), i4 = a3.source, n4 = a3.disableRange;
      if (i4.data) {
        try {
          t3 = new zr(i4.data, i4.password), r4.resolve();
        } catch (e4) {
          r4.reject(e4);
        }
        return r4;
      }
      if (i4.chunkedViewerLoading) {
        try {
          t3 = new Hr(i4, e3), r4.resolve();
        } catch (e4) {
          r4.reject(e4);
        }
        return r4;
      }
      var c3 = new NetworkManager(i4.url, { httpHeaders: i4.httpHeaders }), s3 = c3.requestFull({ onHeadersReceived: function() {
        if (!n4) {
          var a4 = c3.getRequestXhr(s3);
          if ("bytes" === a4.getResponseHeader("Accept-Ranges") && "identity" === (a4.getResponseHeader("Content-Encoding") || "identity")) {
            var o3 = a4.getResponseHeader("Content-Length");
            if (rt(o3 = parseInt(o3, 10))) {
              c3.abortRequest(s3), i4.length = o3;
              try {
                t3 = new Hr(i4, e3), r4.resolve(t3);
              } catch (e4) {
                r4.reject(e4);
              }
            }
          }
        }
      }, onDone: function(e4) {
        try {
          t3 = new zr(e4.chunk, i4.password), r4.resolve();
        } catch (e5) {
          r4.reject(e5);
        }
      }, onError: function(t4) {
        if (404 == t4) {
          var a4 = new Xe('Missing PDF "' + i4.url + '".');
          e3.send("MissingPDF", { exception: a4 });
        } else e3.send("DocError", "Unexpected server response (" + t4 + ') while retrieving PDF "' + i4.url + '".');
      }, onProgress: function(t4) {
        e3.send("DocProgress", { loaded: t4.loaded, total: t4.lengthComputable ? t4.total : void 0 });
      } });
      return r4;
    }(r3).then(function e4() {
      a2(false).then(i3, function(r4) {
        if (!(r4 instanceof Ye)) return r4 instanceof He && (t3.passwordChangedPromise = new gt(), t3.passwordChangedPromise.then(e4)), void n3(r4);
        t3.requestLoadedStream(), t3.onLoadedStream().then(function() {
          a2(true).then(i3, n3);
        });
      }, n3);
    }, n3);
  }), e3.on("GetPageRequest", function(a3) {
    var r3 = a3.pageIndex;
    t3.getPage(r3).then(function(r4) {
      var i3 = t3.ensure(r4, "rotate"), n3 = t3.ensure(r4, "ref"), c3 = t3.ensure(r4, "view");
      gt.all([i3, n3, c3]).then(function(t4) {
        var r5 = { pageIndex: a3.pageIndex, rotate: t4[0], ref: t4[1], view: t4[2] };
        e3.send("GetPage", { pageInfo: r5 });
      });
    });
  }), e3.on("GetPageIndex", function(e4, a3) {
    var r3 = new Qt(e4.ref.num, e4.ref.gen);
    t3.pdfModel.catalog.getPageIndex(r3).then(function(e5) {
      a3.resolve(e5);
    }, a3.reject.bind(a3));
  }), e3.on("GetDestinations", function(e4, a3) {
    t3.ensureCatalog("destinations").then(function(e5) {
      a3.resolve(e5);
    });
  }), e3.on("GetData", function(e4, a3) {
    t3.requestLoadedStream(), t3.onLoadedStream().then(function(e5) {
      a3.resolve(e5.bytes);
    });
  }), e3.on("DataLoaded", function(e4, a3) {
    t3.onLoadedStream().then(function(e5) {
      a3.resolve({ length: e5.bytes.byteLength });
    });
  }), e3.on("UpdatePassword", function(e4) {
    t3.updatePassword(e4);
  }), e3.on("GetAnnotationsRequest", function(a3) {
    t3.getPage(a3.pageIndex).then(function(r3) {
      t3.ensure(r3, "getAnnotationsData", []).then(function(t4) {
        e3.send("GetAnnotations", { pageIndex: a3.pageIndex, annotations: t4 });
      });
    });
  }), e3.on("RenderPageRequest", function(a3) {
    t3.getPage(a3.pageIndex).then(function(t4) {
      var r3 = a3.pageIndex + 1;
      t4.getOperatorList(e3).then(function(e4) {
      }, function(t5) {
        var a4, i3 = "worker.js: while trying to getPage() and getOperatorList()";
        a4 = "string" == typeof t5 ? { message: t5, stack: i3 } : "object" == typeof t5 ? { message: t5.message || t5.toString(), stack: t5.stack || i3 } : { message: "Unknown exception type: " + typeof t5, stack: i3 }, e3.send("PageError", { pageNum: r3, error: a4 });
      });
    });
  }, this), e3.on("GetTextContent", function(e4, a3) {
    t3.getPage(e4.pageIndex).then(function(t4) {
      e4.pageIndex, Date.now();
      t4.extractTextContent().then(function(e5) {
        a3.resolve(e5);
      }, function(e5) {
        a3.reject(e5);
      });
    });
  }), e3.on("Cleanup", function(e4, a3) {
    t3.cleanup(), a3.resolve(true);
  }), e3.on("Terminate", function(e4, a3) {
    t3.terminate(), a3.resolve();
  });
} };
var Rr = {};
var Or = { log: function() {
  var e3 = Array.prototype.slice.call(arguments);
  ve.postMessage({ action: "console_log", data: e3 });
}, error: function() {
  var e3 = Array.prototype.slice.call(arguments);
  throw ve.postMessage({ action: "console_error", data: e3 }), "pdf.js execution error";
}, time: function(e3) {
  Rr[e3] = Date.now();
}, timeEnd: function(e3) {
  var t3 = Rr[e3];
  t3 || Oe("Unkown timer name " + e3), this.log("Timer:", e3, Date.now() - t3);
} };
if ("undefined" == typeof window) {
  ve.console = Or, be.LogManager.addLogger({ warn: function(e3) {
    ve.postMessage({ action: "_warn", data: e3 });
  } });
  Mr = new pt("worker_processor", ve);
  Pr.setup(Mr);
}
var Mr;
var Dr = function() {
  var e3 = { LL: 0, LH: 1, HL: 1, HH: 2 };
  function t3() {
    this.failOnCorruptedImage = false;
  }
  function a2(e4, t4) {
    return e4[t4] << 24 | e4[t4 + 1] << 16 | e4[t4 + 2] << 8 | e4[t4 + 3];
  }
  function r3(e4, t4) {
    return e4[t4] << 8 | e4[t4 + 1];
  }
  function i3(e4) {
    for (var t4 = 1, a3 = 0; e4 > t4; ) t4 <<= 1, a3++;
    return a3;
  }
  function n3(e4, t4) {
    e4.x0 = Math.ceil(t4.XOsiz / e4.XRsiz), e4.x1 = Math.ceil(t4.Xsiz / e4.XRsiz), e4.y0 = Math.ceil(t4.YOsiz / e4.YRsiz), e4.y1 = Math.ceil(t4.Ysiz / e4.YRsiz), e4.width = e4.x1 - e4.x0, e4.height = e4.y1 - e4.y0;
  }
  function c3(e4, t4) {
    for (var a3 = e4.SIZ, r4 = [], i4 = Math.ceil((a3.Xsiz - a3.XTOsiz) / a3.XTsiz), n4 = Math.ceil((a3.Ysiz - a3.YTOsiz) / a3.YTsiz), c4 = 0; c4 < n4; c4++) for (var s4 = 0; s4 < i4; s4++) {
      (g3 = {}).tx0 = Math.max(a3.XTOsiz + s4 * a3.XTsiz, a3.XOsiz), g3.ty0 = Math.max(a3.YTOsiz + c4 * a3.YTsiz, a3.YOsiz), g3.tx1 = Math.min(a3.XTOsiz + (s4 + 1) * a3.XTsiz, a3.Xsiz), g3.ty1 = Math.min(a3.YTOsiz + (c4 + 1) * a3.YTsiz, a3.Ysiz), g3.width = g3.tx1 - g3.tx0, g3.height = g3.ty1 - g3.ty0, g3.components = [], r4.push(g3);
    }
    e4.tiles = r4;
    for (var o4 = 0, f3 = a3.Csiz; o4 < f3; o4++) for (var l3 = t4[o4], h4 = 0, u4 = r4.length; h4 < u4; h4++) {
      var d4 = {}, g3 = r4[h4];
      d4.tcx0 = Math.ceil(g3.tx0 / l3.XRsiz), d4.tcy0 = Math.ceil(g3.ty0 / l3.YRsiz), d4.tcx1 = Math.ceil(g3.tx1 / l3.XRsiz), d4.tcy1 = Math.ceil(g3.ty1 / l3.YRsiz), d4.width = d4.tcx1 - d4.tcx0, d4.height = d4.tcy1 - d4.tcy0, g3.components[o4] = d4;
    }
  }
  function s3(e4, t4, a3) {
    var r4 = t4.codingStyleParameters, i4 = {};
    return r4.entropyCoderWithCustomPrecincts ? (i4.PPx = r4.precinctsSizes[a3].PPx, i4.PPy = r4.precinctsSizes[a3].PPy) : (i4.PPx = 15, i4.PPy = 15), i4.xcb_ = a3 > 0 ? Math.min(r4.xcb, i4.PPx - 1) : Math.min(r4.xcb, i4.PPx), i4.ycb_ = a3 > 0 ? Math.min(r4.ycb, i4.PPy - 1) : Math.min(r4.ycb, i4.PPy), i4;
  }
  function o3(e4, t4, a3) {
    var r4 = 1 << a3.PPx, i4 = 1 << a3.PPy, n4 = t4.trx1 > t4.trx0 ? Math.ceil(t4.trx1 / r4) - Math.floor(t4.trx0 / r4) : 0, c4 = t4.try1 > t4.try0 ? Math.ceil(t4.try1 / i4) - Math.floor(t4.try0 / i4) : 0, s4 = n4 * c4, o4 = Math.floor(t4.trx0 / r4) * r4, f3 = Math.floor(t4.try0 / i4) * i4;
    t4.precinctParameters = { precinctXOffset: o4, precinctYOffset: f3, precinctWidth: r4, precinctHeight: i4, numprecinctswide: n4, numprecinctshigh: c4, numprecincts: s4 };
  }
  function f2(e4, t4, a3) {
    for (var r4 = a3.xcb_, i4 = a3.ycb_, n4 = 1 << r4, c4 = 1 << i4, s4 = Math.floor(t4.tbx0 / n4), o4 = Math.floor(t4.tby0 / c4), f3 = Math.ceil(t4.tbx1 / n4), l3 = Math.ceil(t4.tby1 / c4), h4 = t4.resolution.precinctParameters, u4 = [], d4 = [], g3 = o4; g3 < l3; g3++) for (var m4 = s4; m4 < f3; m4++) {
      var p4 = { cbx: m4, cby: g3, tbx0: n4 * m4, tby0: c4 * g3, tbx1: n4 * (m4 + 1), tby1: c4 * (g3 + 1) }, b4 = Math.floor((p4.tbx0 - h4.precinctXOffset) / h4.precinctWidth), v4 = Math.floor((p4.tby0 - h4.precinctYOffset) / h4.precinctHeight) + b4 * h4.numprecinctswide;
      p4.tbx0_ = Math.max(t4.tbx0, p4.tbx0), p4.tby0_ = Math.max(t4.tby0, p4.tby0), p4.tbx1_ = Math.min(t4.tbx1, p4.tbx1), p4.tby1_ = Math.min(t4.tby1, p4.tby1), p4.precinctNumber = v4, p4.subbandType = t4.type;
      var y4;
      p4.tbx1_, p4.tbx0_, p4.tby1_, p4.tby0_;
      p4.Lblock = 3, u4.push(p4), v4 in d4 ? ((y4 = d4[v4]).cbxMin = Math.min(y4.cbxMin, m4), y4.cbyMin = Math.min(y4.cbyMin, g3), y4.cbxMax = Math.max(y4.cbxMax, m4), y4.cbyMax = Math.max(y4.cbyMax, g3)) : d4[v4] = y4 = { cbxMin: m4, cbyMin: g3, cbxMax: m4, cbyMax: g3 }, p4.precinct = y4;
    }
    t4.codeblockParameters = { codeblockWidth: r4, codeblockHeight: i4, numcodeblockwide: f3 - s4 + 1, numcodeblockhigh: l3 - l3 + 1 }, t4.codeblocks = u4;
    m4 = 0;
    for (var k4 = u4.length; m4 < k4; m4++) v4 = (p4 = u4[m4]).precinctNumber;
    t4.precincts = d4;
  }
  function l2(e4, t4, a3) {
    for (var r4 = [], i4 = e4.subbands, n4 = 0, c4 = i4.length; n4 < c4; n4++) for (var s4 = i4[n4].codeblocks, o4 = 0, f3 = s4.length; o4 < f3; o4++) {
      var l3 = s4[o4];
      l3.precinctNumber == t4 && r4.push(l3);
    }
    return { layerNumber: a3, codeblocks: r4 };
  }
  function h3(e4) {
    for (var t4 = e4.SIZ, a3 = e4.currentTile.index, r4 = e4.tiles[a3], i4 = r4.codingStyleDefaultParameters.layersCount, n4 = t4.Csiz, c4 = 0, s4 = 0; s4 < n4; s4++) c4 = Math.max(c4, r4.components[s4].codingStyleParameters.decompositionLevelsCount);
    var o4 = 0, f3 = 0, h4 = 0, u4 = 0;
    this.nextPacket = function() {
      for (; o4 < i4; o4++) {
        for (; f3 <= c4; f3++) {
          for (; h4 < n4; h4++) {
            var e5 = r4.components[h4];
            if (!(f3 > e5.codingStyleParameters.decompositionLevelsCount)) {
              for (var t5 = e5.resolutions[f3], a4 = t5.precinctParameters.numprecincts; u4 < a4; ) {
                var s5 = l2(t5, u4, o4);
                return u4++, s5;
              }
              u4 = 0;
            }
          }
          h4 = 0;
        }
        f3 = 0;
      }
      throw "Out of packets";
    };
  }
  function u3(e4) {
    for (var t4 = e4.SIZ, a3 = e4.currentTile.index, r4 = e4.tiles[a3], i4 = r4.codingStyleDefaultParameters.layersCount, n4 = t4.Csiz, c4 = 0, s4 = 0; s4 < n4; s4++) c4 = Math.max(c4, r4.components[s4].codingStyleParameters.decompositionLevelsCount);
    var o4 = 0, f3 = 0, h4 = 0, u4 = 0;
    this.nextPacket = function() {
      for (; o4 <= c4; o4++) {
        for (; f3 < i4; f3++) {
          for (; h4 < n4; h4++) {
            var e5 = r4.components[h4];
            if (!(o4 > e5.codingStyleParameters.decompositionLevelsCount)) {
              for (var t5 = e5.resolutions[o4], a4 = t5.precinctParameters.numprecincts; u4 < a4; ) {
                var s5 = l2(t5, u4, f3);
                return u4++, s5;
              }
              u4 = 0;
            }
          }
          h4 = 0;
        }
        f3 = 0;
      }
      throw "Out of packets";
    };
  }
  function d3(e4) {
    for (var t4 = e4.SIZ, a3 = e4.currentTile.index, r4 = e4.tiles[a3], i4 = t4.Csiz, n4 = 0; n4 < i4; n4++) {
      for (var c4 = r4.components[n4], l3 = c4.codingStyleParameters.decompositionLevelsCount, d4 = [], g3 = [], m4 = 0; m4 <= l3; m4++) {
        var p4, b4 = s3(0, c4, m4), v4 = {}, y4 = 1 << l3 - m4;
        if (v4.trx0 = Math.ceil(c4.tcx0 / y4), v4.try0 = Math.ceil(c4.tcy0 / y4), v4.trx1 = Math.ceil(c4.tcx1 / y4), v4.try1 = Math.ceil(c4.tcy1 / y4), o3(0, v4, b4), d4.push(v4), 0 === m4) (p4 = {}).type = "LL", p4.tbx0 = Math.ceil(c4.tcx0 / y4), p4.tby0 = Math.ceil(c4.tcy0 / y4), p4.tbx1 = Math.ceil(c4.tcx1 / y4), p4.tby1 = Math.ceil(c4.tcy1 / y4), p4.resolution = v4, f2(0, p4, b4), g3.push(p4), v4.subbands = [p4];
        else {
          var k4 = 1 << l3 - m4 + 1, A4 = [];
          (p4 = {}).type = "HL", p4.tbx0 = Math.ceil(c4.tcx0 / k4 - 0.5), p4.tby0 = Math.ceil(c4.tcy0 / k4), p4.tbx1 = Math.ceil(c4.tcx1 / k4 - 0.5), p4.tby1 = Math.ceil(c4.tcy1 / k4), p4.resolution = v4, f2(0, p4, b4), g3.push(p4), A4.push(p4), (p4 = {}).type = "LH", p4.tbx0 = Math.ceil(c4.tcx0 / k4), p4.tby0 = Math.ceil(c4.tcy0 / k4 - 0.5), p4.tbx1 = Math.ceil(c4.tcx1 / k4), p4.tby1 = Math.ceil(c4.tcy1 / k4 - 0.5), p4.resolution = v4, f2(0, p4, b4), g3.push(p4), A4.push(p4), (p4 = {}).type = "HH", p4.tbx0 = Math.ceil(c4.tcx0 / k4 - 0.5), p4.tby0 = Math.ceil(c4.tcy0 / k4 - 0.5), p4.tbx1 = Math.ceil(c4.tcx1 / k4 - 0.5), p4.tby1 = Math.ceil(c4.tcy1 / k4 - 0.5), p4.resolution = v4, f2(0, p4, b4), g3.push(p4), A4.push(p4), v4.subbands = A4;
        }
      }
      c4.resolutions = d4, c4.subbands = g3;
    }
    var w4 = r4.codingStyleDefaultParameters.progressionOrder;
    switch (w4) {
      case 0:
        r4.packetsIterator = new h3(e4);
        break;
      case 1:
        r4.packetsIterator = new u3(e4);
        break;
      default:
        throw "Unsupported progression order " + w4;
    }
  }
  function g2(e4, t4, a3, r4) {
    var n4, c4 = 0, s4 = 0, o4 = false;
    function f3(e5) {
      for (; s4 < e5; ) {
        var r5 = t4[a3 + c4];
        c4++, o4 ? (n4 = n4 << 7 | r5, s4 += 7, o4 = false) : (n4 = n4 << 8 | r5, s4 += 8), 255 == r5 && (o4 = true);
      }
      return n4 >>> (s4 -= e5) & (1 << e5) - 1;
    }
    function l3() {
      s4 = 0, o4 && (c4++, o4 = false);
    }
    for (var h4, u4 = e4.currentTile.index, d4 = e4.tiles[u4].packetsIterator; c4 < r4; ) {
      var g3 = d4.nextPacket();
      if (f3(1)) {
        for (var m4 = g3.layerNumber, p4 = [], b4 = 0, k4 = g3.codeblocks.length; b4 < k4; b4++) {
          var A4 = (O2 = g3.codeblocks[b4]).precinct, w4 = O2.cbx - A4.cbxMin, x4 = O2.cby - A4.cbyMin, S4 = false, C2 = false;
          if ("included" in O2) S4 = !!f3(1);
          else {
            var I3, B3;
            if ("inclusionTree" in (A4 = O2.precinct)) I3 = A4.inclusionTree;
            else {
              var T3 = A4.cbxMax - A4.cbxMin + 1, L2 = A4.cbyMax - A4.cbyMin + 1;
              I3 = new y3(T3, L2, m4), B3 = new v3(T3, L2), A4.inclusionTree = I3, A4.zeroBitPlanesTree = B3;
            }
            if (I3.reset(w4, x4, m4)) for (; ; ) {
              if (!f3(1)) {
                I3.incrementValue(m4);
                break;
              }
              if (!I3.nextLevel()) {
                O2.included = true, S4 = C2 = true;
                break;
              }
            }
          }
          if (S4) {
            if (C2) {
              for ((B3 = A4.zeroBitPlanesTree).reset(w4, x4); ; ) {
                if (f3(1)) {
                  if (!B3.nextLevel()) break;
                } else B3.incrementValue();
              }
              O2.zeroBitPlanes = B3.value;
            }
            for (var F2 = (h4 = void 0, 0 === (h4 = f3(1)) ? 1 : 2 == (h4 = h4 << 1 | f3(1)) ? 2 : (h4 = h4 << 2 | f3(2)) <= 14 ? 3 + (3 & h4) : (h4 = h4 << 5 | f3(5)) <= 510 ? 6 + (31 & h4) : 37 + (127 & (h4 = h4 << 7 | f3(7)))); f3(1); ) O2.Lblock++;
            var P3 = i3(F2), R2 = f3((F2 < 1 << P3 ? P3 - 1 : P3) + O2.Lblock);
            p4.push({ codeblock: O2, codingpasses: F2, dataLength: R2 });
          }
        }
        for (l3(); p4.length > 0; ) {
          var O2, M2 = p4.shift();
          "data" in (O2 = M2.codeblock) || (O2.data = []), O2.data.push({ data: t4, start: a3 + c4, end: a3 + c4 + M2.dataLength, codingpasses: M2.codingpasses }), c4 += M2.dataLength;
        }
      } else l3();
    }
    return c4;
  }
  function m3(e4, t4, a3, r4, i4, n4, c4, s4, o4, f3) {
    for (var l3 = 0, h4 = s4.length; l3 < h4; ++l3) {
      var u4 = s4[l3], d4 = u4.tbx1_ - u4.tbx0_, g3 = u4.tby1_ - u4.tby0_;
      if (0 !== d4 && 0 !== g3 && "data" in u4) {
        var m4, p4;
        m4 = new A3(d4, g3, u4.subbandType, u4.zeroBitPlanes), p4 = 2;
        for (var b4 = u4.data, v4 = 0, y4 = 0, w4 = 0, x4 = b4.length; w4 < x4; w4++) {
          v4 += (I3 = b4[w4]).end - I3.start, y4 += I3.codingpasses;
        }
        var S4 = new Uint8Array(v4), C2 = 0;
        for (w4 = 0, x4 = b4.length; w4 < x4; w4++) {
          var I3, B3 = (I3 = b4[w4]).data.subarray(I3.start, I3.end);
          S4.set(B3, C2), C2 += B3.length;
        }
        var T3 = new k3(S4, 0, v4);
        m4.setDecoder(T3);
        for (w4 = 0; w4 < y4; w4++) {
          switch (p4) {
            case 0:
              m4.runSignificancePropogationPass();
              break;
            case 1:
              m4.runMagnitudeRefinementPass();
              break;
            case 2:
              m4.runCleanupPass(), f3 && m4.checkSegmentationSymbol();
          }
          p4 = (p4 + 1) % 3;
        }
        for (var L2 = u4.tbx0_ - t4 + (u4.tby0_ - a3) * r4, F2 = 0, P3 = 0; P3 < g3; P3++) {
          for (C2 = 0; C2 < d4; C2++) {
            var R2, O2 = (m4.coefficentsSign[F2] ? -1 : 1) * m4.coefficentsMagnitude[F2], M2 = m4.bitsDecoded[F2];
            0 === o4 || c4 > M2 ? (O2 += O2 < 0 ? O2 - 0.5 : O2 > 0 ? O2 + 0.5 : 0, R2 = 1 << c4 - M2) : R2 = 1, e4[L2++] = O2 * R2 * n4, F2++;
          }
          L2 += r4 - d4;
        }
      }
    }
  }
  function p3(t4, a3, r4) {
    for (var i4 = a3.components[r4], n4 = i4.codingStyleParameters, c4 = i4.quantizationParameters, s4 = n4.decompositionLevelsCount, o4 = c4.SPqcds, f3 = c4.scalarExpounded, l3 = c4.guardBits, h4 = n4.transformation, u4 = n4.segmentationSymbolUsed, d4 = t4.components[r4].precision, g3 = [], p4 = 0, b4 = 0; b4 <= s4; b4++) for (var v4 = i4.resolutions[b4], y4 = 0, k4 = v4.subbands.length; y4 < k4; y4++) {
      var A4, w4;
      f3 ? (A4 = o4[p4].mu, w4 = o4[p4].epsilon) : (A4 = o4[0].mu, w4 = o4[0].epsilon + (b4 > 0 ? 1 - b4 : 0));
      var C2 = v4.subbands[y4], I3 = C2.tbx1 - C2.tbx0, B3 = C2.tby1 - C2.tby0, T3 = e3[C2.type], L2 = Math.pow(2, d4 + T3 - w4) * (1 + A4 / 2048), F2 = l3 + w4 - 1, P3 = new Float32Array(I3 * B3);
      m3(P3, C2.tbx0, C2.tby0, I3, 0, L2, F2, C2.codeblocks, h4, u4), g3.push({ width: I3, height: B3, items: P3 }), p4++;
    }
    var R2 = (0 === (h4 = n4.transformation) ? new x3() : new S3()).calculate(g3, i4.tcx0, i4.tcy0);
    return { left: i4.tcx0, top: i4.tcy0, width: R2.width, height: R2.height, items: R2.items };
  }
  function b3(e4, t4) {
    for (var a3 = e4.SIZ.Csiz, r4 = e4.tiles[t4], i4 = 0; i4 < a3; i4++) {
      var n4 = r4.components[i4], c4 = i4 in e4.currentTile.QCC ? e4.currentTile.QCC[i4] : e4.currentTile.QCD;
      n4.quantizationParameters = c4;
      var s4 = i4 in e4.currentTile.COC ? e4.currentTile.COC[i4] : e4.currentTile.COD;
      n4.codingStyleParameters = s4;
    }
    r4.codingStyleDefaultParameters = e4.currentTile.COD;
  }
  t3.prototype = { load: function(e4) {
    var t4 = new XMLHttpRequest();
    t4.open("GET", e4, true), t4.responseType = "arraybuffer", t4.onload = function() {
      var e5 = new Uint8Array(t4.response || t4.mozResponseArrayBuffer);
      this.parse(e5), this.onload && this.onload();
    }.bind(this), t4.send(null);
  }, parse: function(e4) {
    function t4(e5, t5, a4) {
      for (var r5 = 0, i5 = 0; i5 < a4; i5++) r5 = 256 * r5 + (255 & e5[t5 + i5]);
      return r5;
    }
    for (var a3 = 0, r4 = e4.length; a3 < r4; ) {
      var i4 = 8, n4 = t4(e4, a3, 4), c4 = t4(e4, a3 + 4, 4);
      a3 += i4, 1 == n4 && (n4 = t4(e4, a3, 8), a3 += 8, i4 += 8), 0 === n4 && (n4 = r4 - a3 + i4), n4 < i4 && Oe("JPX error: Invalid box field size");
      var s4 = n4 - i4, o4 = true;
      switch (c4) {
        case 1783634458:
        case 1668246642:
          break;
        case 1785737832:
          o4 = false;
          break;
        case 1785737827:
          this.parseCodestream(e4, a3, a3 + s4);
      }
      o4 && (a3 += s4);
    }
  }, parseCodestream: function(e4, t4, i4) {
    var s4 = {};
    try {
      for (var o4 = t4; o4 < i4; ) {
        var f3 = r3(e4, o4);
        o4 += 2;
        var l3, h4 = 0;
        switch (f3) {
          case 65359:
            s4.mainHeader = true;
            break;
          case 65497:
            break;
          case 65361:
            h4 = r3(e4, o4);
            var u4 = {};
            u4.Xsiz = a2(e4, o4 + 4), u4.Ysiz = a2(e4, o4 + 8), u4.XOsiz = a2(e4, o4 + 12), u4.YOsiz = a2(e4, o4 + 16), u4.XTsiz = a2(e4, o4 + 20), u4.YTsiz = a2(e4, o4 + 24), u4.XTOsiz = a2(e4, o4 + 28), u4.YTOsiz = a2(e4, o4 + 32);
            var m4 = r3(e4, o4 + 36);
            u4.Csiz = m4;
            var v4 = [];
            l3 = o4 + 38;
            for (var y4 = 0; y4 < m4; y4++) {
              var k4 = { precision: 1 + (127 & e4[l3]), isSigned: !!(128 & e4[l3]), XRsiz: e4[l3 + 1], YRsiz: e4[l3 + 1] };
              n3(k4, u4), v4.push(k4);
            }
            s4.SIZ = u4, s4.components = v4, c3(s4, v4), s4.QCC = [], s4.COC = [];
            break;
          case 65372:
            h4 = r3(e4, o4);
            var A4 = {};
            switch (l3 = o4 + 2, 31 & (C2 = e4[l3++])) {
              case 0:
                I3 = 8, B3 = true;
                break;
              case 1:
                I3 = 16, B3 = false;
                break;
              case 2:
                I3 = 16, B3 = true;
                break;
              default:
                throw "Invalid SQcd value " + C2;
            }
            A4.noQuantization = 8 == I3, A4.scalarExpounded = B3, A4.guardBits = C2 >> 5;
            for (var w4 = []; l3 < h4 + o4; ) {
              var x4 = {};
              8 == I3 ? (x4.epsilon = e4[l3++] >> 3, x4.mu = 0) : (x4.epsilon = e4[l3] >> 3, x4.mu = (7 & e4[l3]) << 8 | e4[l3 + 1], l3 += 2), w4.push(x4);
            }
            A4.SPqcds = w4, s4.mainHeader ? s4.QCD = A4 : (s4.currentTile.QCD = A4, s4.currentTile.QCC = []);
            break;
          case 65373:
            h4 = r3(e4, o4);
            var S4, C2, I3, B3, T3 = {};
            switch (l3 = o4 + 2, s4.SIZ.Csiz < 257 ? S4 = e4[l3++] : (S4 = r3(e4, l3), l3 += 2), 31 & (C2 = e4[l3++])) {
              case 0:
                I3 = 8, B3 = true;
                break;
              case 1:
                I3 = 16, B3 = false;
                break;
              case 2:
                I3 = 16, B3 = true;
                break;
              default:
                throw "Invalid SQcd value " + C2;
            }
            T3.noQuantization = 8 == I3, T3.scalarExpounded = B3, T3.guardBits = C2 >> 5;
            for (w4 = []; l3 < h4 + o4; ) {
              x4 = {};
              8 == I3 ? (x4.epsilon = e4[l3++] >> 3, x4.mu = 0) : (x4.epsilon = e4[l3] >> 3, x4.mu = (7 & e4[l3]) << 8 | e4[l3 + 1], l3 += 2), w4.push(x4);
            }
            T3.SPqcds = w4, s4.mainHeader ? s4.QCC[S4] = T3 : s4.currentTile.QCC[S4] = T3;
            break;
          case 65362:
            h4 = r3(e4, o4);
            var L2 = {};
            l3 = o4 + 2;
            var F2 = e4[l3++];
            L2.entropyCoderWithCustomPrecincts = !!(1 & F2), L2.sopMarkerUsed = !!(2 & F2), L2.ephMarkerUsed = !!(4 & F2);
            L2.progressionOrder = e4[l3++], L2.layersCount = r3(e4, l3), l3 += 2, L2.multipleComponentTransform = e4[l3++], L2.decompositionLevelsCount = e4[l3++], L2.xcb = 2 + (15 & e4[l3++]), L2.ycb = 2 + (15 & e4[l3++]);
            var P3 = e4[l3++];
            if (L2.selectiveArithmeticCodingBypass = !!(1 & P3), L2.resetContextProbabilities = !!(2 & P3), L2.terminationOnEachCodingPass = !!(4 & P3), L2.verticalyStripe = !!(8 & P3), L2.predictableTermination = !!(16 & P3), L2.segmentationSymbolUsed = !!(32 & P3), L2.transformation = e4[l3++], L2.entropyCoderWithCustomPrecincts) {
              for (var R2 = {}; l3 < h4 + o4; ) {
                var O2 = e4[l3];
                R2.push({ PPx: 15 & O2, PPy: O2 >> 4 });
              }
              L2.precinctsSizes = R2;
            }
            if (L2.sopMarkerUsed || L2.ephMarkerUsed || L2.selectiveArithmeticCodingBypass || L2.resetContextProbabilities || L2.terminationOnEachCodingPass || L2.verticalyStripe || L2.predictableTermination) throw "Unsupported COD options: " + ve.JSON.stringify(L2);
            s4.mainHeader ? s4.COD = L2 : (s4.currentTile.COD = L2, s4.currentTile.COC = []);
            break;
          case 65424:
            h4 = r3(e4, o4), (M2 = {}).index = r3(e4, o4 + 2), M2.length = a2(e4, o4 + 4), M2.dataEnd = M2.length + o4 - 2, M2.partIndex = e4[o4 + 8], M2.partsCount = e4[o4 + 9], s4.mainHeader = false, 0 === M2.partIndex && (M2.COD = s4.COD, M2.COC = s4.COC.slice(0), M2.QCD = s4.QCD, M2.QCC = s4.QCC.slice(0)), s4.currentTile = M2;
            break;
          case 65427:
            var M2;
            0 === (M2 = s4.currentTile).partIndex && (b3(s4, M2.index), d3(s4)), g2(s4, e4, o4, h4 = M2.dataEnd - o4);
            break;
          case 65380:
            h4 = r3(e4, o4);
            break;
          default:
            throw "Unknown codestream code: " + f3.toString(16);
        }
        o4 += h4;
      }
    } catch (e5) {
      this.failOnCorruptedImage ? Oe("JPX error: " + e5) : Re("JPX error: " + e5 + ". Trying to recover");
    }
    this.tiles = function(e5) {
      for (var t5 = e5.SIZ, a3 = e5.components, r4 = t5.Csiz, i5 = [], n4 = 0, c4 = e5.tiles.length; n4 < c4; n4++) {
        for (var s5 = e5.tiles[n4], o5 = [], f4 = 0; f4 < r4; f4++) {
          var l4 = p3(e5, s5, f4);
          o5.push(l4);
        }
        if (s5.codingStyleDefaultParameters.multipleComponentTransform) for (var h5 = o5[0].items, u5 = o5[1].items, d4 = o5[2].items, g3 = 0, m5 = h5.length; g3 < m5; g3++) {
          var b4 = h5[g3], v5 = u5[g3], y5 = d4[g3], k5 = b4 - (y5 + v5 >> 2);
          u5[g3] = k5, h5[g3] = y5 + k5, d4[g3] = v5 + k5;
        }
        for (f4 = 0; f4 < r4; f4++) {
          if (!(w5 = a3[f4]).isSigned) {
            var A5 = 1 << w5.precision - 1;
            for (g3 = 0, m5 = (S5 = o5[f4].items).length; g3 < m5; g3++) S5[g3] += A5;
          }
        }
        for (f4 = 0; f4 < r4; f4++) {
          A5 = (w5 = a3[f4]).isSigned ? 128 : 0;
          var w5, x5 = w5.precision - 8, S5 = o5[f4].items, C3 = new Uint8Array(S5.length);
          for (g3 = 0, m5 = S5.length; g3 < m5; g3++) {
            var I4 = (S5[g3] >> x5) + A5;
            C3[g3] = I4 < 0 ? 0 : I4 > 255 ? 255 : I4;
          }
          o5[f4].items = C3;
        }
        i5.push(o5);
      }
      return i5;
    }(s4), this.width = s4.SIZ.Xsiz - s4.SIZ.XOsiz, this.height = s4.SIZ.Ysiz - s4.SIZ.YOsiz, this.componentsCount = s4.SIZ.Csiz;
  } };
  var v3 = function() {
    function e4(e5, t4) {
      var a3 = i3(Math.max(e5, t4)) + 1;
      this.levels = [];
      for (var r4 = 0; r4 < a3; r4++) {
        var n4 = { width: e5, height: t4, items: [] };
        this.levels.push(n4), e5 = Math.ceil(e5 / 2), t4 = Math.ceil(t4 / 2);
      }
    }
    return e4.prototype = { reset: function(e5, t4) {
      for (var a3 = 0, r4 = 0; a3 < this.levels.length; ) {
        var i4 = e5 + t4 * (n4 = this.levels[a3]).width;
        if (i4 in n4.items) {
          r4 = n4.items[i4];
          break;
        }
        n4.index = i4, e5 >>= 1, t4 >>= 1, a3++;
      }
      var n4;
      a3--, (n4 = this.levels[a3]).items[n4.index] = r4, this.currentLevel = a3, delete this.value;
    }, incrementValue: function() {
      var e5 = this.levels[this.currentLevel];
      e5.items[e5.index]++;
    }, nextLevel: function() {
      var e5, t4 = this.currentLevel, a3 = (e5 = this.levels[t4]).items[e5.index];
      return --t4 < 0 ? (this.value = a3, false) : (this.currentLevel = t4, (e5 = this.levels[t4]).items[e5.index] = a3, true);
    } }, e4;
  }(), y3 = function() {
    function e4(e5, t4, a3) {
      var r4 = i3(Math.max(e5, t4)) + 1;
      this.levels = [];
      for (var n4 = 0; n4 < r4; n4++) {
        for (var c4 = new Uint8Array(e5 * t4), s4 = 0, o4 = c4.length; s4 < o4; s4++) c4[s4] = a3;
        var f3 = { width: e5, height: t4, items: c4 };
        this.levels.push(f3), e5 = Math.ceil(e5 / 2), t4 = Math.ceil(t4 / 2);
      }
    }
    return e4.prototype = { reset: function(e5, t4, a3) {
      for (var r4 = 0; r4 < this.levels.length; ) {
        var i4 = this.levels[r4], n4 = e5 + t4 * i4.width;
        i4.index = n4;
        var c4 = i4.items[n4];
        if (255 == c4) break;
        if (c4 > a3) return this.currentLevel = r4, this.propagateValues(), false;
        e5 >>= 1, t4 >>= 1, r4++;
      }
      return this.currentLevel = r4 - 1, true;
    }, incrementValue: function(e5) {
      var t4 = this.levels[this.currentLevel];
      t4.items[t4.index] = e5 + 1, this.propagateValues();
    }, propagateValues: function() {
      for (var e5 = this.currentLevel, t4 = (a3 = this.levels[e5]).items[a3.index]; --e5 >= 0; ) {
        var a3;
        (a3 = this.levels[e5]).items[a3.index] = t4;
      }
    }, nextLevel: function() {
      var e5, t4 = this.currentLevel, a3 = (e5 = this.levels[t4]).items[e5.index];
      return e5.items[e5.index] = 255, !(--t4 < 0) && (this.currentLevel = t4, (e5 = this.levels[t4]).items[e5.index] = a3, true);
    } }, e4;
  }(), k3 = function() {
    var e4 = [{ qe: 22017, nmps: 1, nlps: 1, switchFlag: 1 }, { qe: 13313, nmps: 2, nlps: 6, switchFlag: 0 }, { qe: 6145, nmps: 3, nlps: 9, switchFlag: 0 }, { qe: 2753, nmps: 4, nlps: 12, switchFlag: 0 }, { qe: 1313, nmps: 5, nlps: 29, switchFlag: 0 }, { qe: 545, nmps: 38, nlps: 33, switchFlag: 0 }, { qe: 22017, nmps: 7, nlps: 6, switchFlag: 1 }, { qe: 21505, nmps: 8, nlps: 14, switchFlag: 0 }, { qe: 18433, nmps: 9, nlps: 14, switchFlag: 0 }, { qe: 14337, nmps: 10, nlps: 14, switchFlag: 0 }, { qe: 12289, nmps: 11, nlps: 17, switchFlag: 0 }, { qe: 9217, nmps: 12, nlps: 18, switchFlag: 0 }, { qe: 7169, nmps: 13, nlps: 20, switchFlag: 0 }, { qe: 5633, nmps: 29, nlps: 21, switchFlag: 0 }, { qe: 22017, nmps: 15, nlps: 14, switchFlag: 1 }, { qe: 21505, nmps: 16, nlps: 14, switchFlag: 0 }, { qe: 20737, nmps: 17, nlps: 15, switchFlag: 0 }, { qe: 18433, nmps: 18, nlps: 16, switchFlag: 0 }, { qe: 14337, nmps: 19, nlps: 17, switchFlag: 0 }, { qe: 13313, nmps: 20, nlps: 18, switchFlag: 0 }, { qe: 12289, nmps: 21, nlps: 19, switchFlag: 0 }, { qe: 10241, nmps: 22, nlps: 19, switchFlag: 0 }, { qe: 9217, nmps: 23, nlps: 20, switchFlag: 0 }, { qe: 8705, nmps: 24, nlps: 21, switchFlag: 0 }, { qe: 7169, nmps: 25, nlps: 22, switchFlag: 0 }, { qe: 6145, nmps: 26, nlps: 23, switchFlag: 0 }, { qe: 5633, nmps: 27, nlps: 24, switchFlag: 0 }, { qe: 5121, nmps: 28, nlps: 25, switchFlag: 0 }, { qe: 4609, nmps: 29, nlps: 26, switchFlag: 0 }, { qe: 4353, nmps: 30, nlps: 27, switchFlag: 0 }, { qe: 2753, nmps: 31, nlps: 28, switchFlag: 0 }, { qe: 2497, nmps: 32, nlps: 29, switchFlag: 0 }, { qe: 2209, nmps: 33, nlps: 30, switchFlag: 0 }, { qe: 1313, nmps: 34, nlps: 31, switchFlag: 0 }, { qe: 1089, nmps: 35, nlps: 32, switchFlag: 0 }, { qe: 673, nmps: 36, nlps: 33, switchFlag: 0 }, { qe: 545, nmps: 37, nlps: 34, switchFlag: 0 }, { qe: 321, nmps: 38, nlps: 35, switchFlag: 0 }, { qe: 273, nmps: 39, nlps: 36, switchFlag: 0 }, { qe: 133, nmps: 40, nlps: 37, switchFlag: 0 }, { qe: 73, nmps: 41, nlps: 38, switchFlag: 0 }, { qe: 37, nmps: 42, nlps: 39, switchFlag: 0 }, { qe: 21, nmps: 43, nlps: 40, switchFlag: 0 }, { qe: 9, nmps: 44, nlps: 41, switchFlag: 0 }, { qe: 5, nmps: 45, nlps: 42, switchFlag: 0 }, { qe: 1, nmps: 45, nlps: 43, switchFlag: 0 }, { qe: 22017, nmps: 46, nlps: 46, switchFlag: 0 }];
    function t4(e5, t5, a3) {
      this.data = e5, this.bp = t5, this.dataEnd = a3, this.chigh = e5[t5], this.clow = 0, this.byteIn(), this.chigh = this.chigh << 7 & 65535 | this.clow >> 9 & 127, this.clow = this.clow << 7 & 65535, this.ct -= 7, this.a = 32768;
    }
    return t4.prototype = { byteIn: function() {
      var e5 = this.data, t5 = this.bp;
      255 == e5[t5] ? e5[t5 + 1] > 143 ? (this.clow += 65280, this.ct = 8) : (t5++, this.clow += e5[t5] << 9, this.ct = 7, this.bp = t5) : (t5++, this.clow += t5 < this.dataEnd ? e5[t5] << 8 : 65280, this.ct = 8, this.bp = t5);
      this.clow > 65535 && (this.chigh += this.clow >> 16, this.clow &= 65535);
    }, readBit: function(t5) {
      var a3 = e4[t5.index].qe;
      if (this.a -= a3, this.chigh < a3) {
        var r4 = this.exchangeLps(t5);
        return this.renormD(), r4;
      }
      if (this.chigh -= a3, 32768 & this.a) return t5.mps;
      r4 = this.exchangeMps(t5);
      return this.renormD(), r4;
    }, renormD: function() {
      do {
        0 === this.ct && this.byteIn(), this.a <<= 1, this.chigh = this.chigh << 1 & 65535 | this.clow >> 15 & 1, this.clow = this.clow << 1 & 65535, this.ct--;
      } while (!(32768 & this.a));
    }, exchangeMps: function(t5) {
      var a3, r4 = e4[t5.index];
      return this.a < r4.qe ? (a3 = 1 - t5.mps, 1 == r4.switchFlag && (t5.mps = 1 - t5.mps), t5.index = r4.nlps) : (a3 = t5.mps, t5.index = r4.nmps), a3;
    }, exchangeLps: function(t5) {
      var a3, r4 = e4[t5.index];
      return this.a < r4.qe ? (this.a = r4.qe, a3 = t5.mps, t5.index = r4.nmps) : (this.a = r4.qe, a3 = 1 - t5.mps, 1 == r4.switchFlag && (t5.mps = 1 - t5.mps), t5.index = r4.nlps), a3;
    } }, t4;
  }(), A3 = function() {
    var e4 = new Uint8Array([0, 5, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 1, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8, 0, 0, 0, 0, 0, 2, 6, 8, 0, 3, 7, 8, 0, 4, 7, 8]), t4 = new Uint8Array([0, 3, 4, 0, 5, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 1, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8, 0, 0, 0, 0, 0, 2, 3, 4, 0, 6, 7, 7, 0, 8, 8, 8]), a3 = new Uint8Array([0, 1, 2, 0, 1, 2, 2, 0, 2, 2, 2, 0, 0, 0, 0, 0, 3, 4, 5, 0, 4, 5, 5, 0, 5, 5, 5, 0, 0, 0, 0, 0, 6, 7, 7, 0, 7, 7, 7, 0, 7, 7, 7, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8, 0, 0, 0, 0, 0, 8, 8, 8, 0, 8, 8, 8, 0, 8, 8, 8]);
    function r4(e5, t5, a4, r5) {
      return a4 ? r5 ? e5 ? t5 ? -1 : 0 : -1 : e5 && t5 ? 0 : 1 : e5 ? t5 ? -1 : 1 : 0;
    }
    var i4 = [{ contextLabel: 13, xorBit: 0 }, { contextLabel: 12, xorBit: 0 }, { contextLabel: 11, xorBit: 0 }, { contextLabel: 10, xorBit: 0 }, { contextLabel: 9, xorBit: 0 }, { contextLabel: 10, xorBit: 1 }, { contextLabel: 11, xorBit: 1 }, { contextLabel: 12, xorBit: 1 }, { contextLabel: 13, xorBit: 1 }];
    function n4(r5, i5, n5, c4) {
      this.width = r5, this.height = i5, this.contextLabelTable = "HH" == n5 ? a3 : "HL" == n5 ? t4 : e4;
      var s4 = r5 * i5;
      this.neighborsSignificance = new Uint8Array(s4), this.coefficentsSign = new Uint8Array(s4), this.coefficentsMagnitude = new Uint32Array(s4), this.processingFlags = new Uint8Array(s4);
      for (var o4 = new Uint8Array(this.width * this.height), f3 = 0, l3 = o4.length; f3 < l3; f3++) o4[f3] = c4;
      this.bitsDecoded = o4, this.reset();
    }
    return n4.prototype = { setDecoder: function(e5) {
      this.decoder = e5;
    }, reset: function() {
      this.uniformContext = { index: 46, mps: 0 }, this.runLengthContext = { index: 3, mps: 0 }, this.contexts = [], this.contexts.push({ index: 4, mps: 0 });
      for (var e5 = 1; e5 <= 16; e5++) this.contexts.push({ index: 0, mps: 0 });
    }, setNeighborsSignificance: function(e5, t5) {
      var a4 = this.neighborsSignificance, r5 = this.width, i5 = this.height, n5 = e5 * r5 + t5;
      e5 > 0 && (t5 > 0 && (a4[n5 - r5 - 1] += 16), t5 + 1 < r5 && (a4[n5 - r5 + 1] += 16), a4[n5 - r5] += 4), e5 + 1 < i5 && (t5 > 0 && (a4[n5 + r5 - 1] += 16), t5 + 1 < r5 && (a4[n5 + r5 + 1] += 16), a4[n5 + r5] += 4), t5 > 0 && (a4[n5 - 1] += 1), t5 + 1 < r5 && (a4[n5 + 1] += 1), a4[n5] |= 128;
    }, runSignificancePropogationPass: function() {
      for (var e5 = this.decoder, t5 = this.width, a4 = this.height, r5 = this.coefficentsMagnitude, i5 = this.coefficentsSign, n5 = (this.contextLabels, this.neighborsSignificance), c4 = this.processingFlags, s4 = this.contexts, o4 = this.contextLabelTable, f3 = this.bitsDecoded, l3 = 0, h4 = t5 * a4; l3 < h4; l3++) c4[l3] &= -2;
      for (var u4 = 0; u4 < a4; u4 += 4) for (var d4 = 0; d4 < t5; d4++) for (var g3 = u4 * t5 + d4, m4 = 0; m4 < 4; m4++, g3 += t5) {
        var p4 = u4 + m4;
        if (p4 >= a4) break;
        if (!r5[g3] && n5[g3]) {
          var b4 = s4[o4[n5[g3]]];
          if (e5.readBit(b4)) {
            var v4 = this.decodeSignBit(p4, d4);
            i5[g3] = v4, r5[g3] = 1, this.setNeighborsSignificance(p4, d4), c4[g3] |= 2;
          }
          f3[g3]++, c4[g3] |= 1;
        }
      }
    }, decodeSignBit: function(e5, t5) {
      var a4 = this.width, n5 = this.height, c4 = e5 * a4 + t5, s4 = this.coefficentsMagnitude, o4 = this.coefficentsSign, f3 = r4(t5 > 0 && s4[c4 - 1], o4[c4 - 1], t5 + 1 < a4 && s4[c4 + 1], o4[c4 + 1]), l3 = r4(e5 > 0 && s4[c4 - a4], o4[c4 - a4], e5 + 1 < n5 && s4[c4 + a4], o4[c4 + a4]), h4 = i4[3 * (1 - f3) + (1 - l3)], u4 = h4.contextLabel, d4 = this.contexts[u4];
      return this.decoder.readBit(d4) ^ h4.xorBit;
    }, runMagnitudeRefinementPass: function() {
      for (var e5 = this.decoder, t5 = this.width, a4 = this.height, r5 = this.coefficentsMagnitude, i5 = this.neighborsSignificance, n5 = this.contexts, c4 = this.bitsDecoded, s4 = this.processingFlags, o4 = 0; o4 < a4; o4 += 4) for (var f3 = 0; f3 < t5; f3++) for (var l3 = 0; l3 < 4; l3++) {
        var h4 = o4 + l3;
        if (h4 >= a4) break;
        var u4 = h4 * t5 + f3;
        if (r5[u4] && !(1 & s4[u4])) {
          var d4 = 16;
          if (2 & s4[u4]) {
            s4[h4 * t5 + f3] ^= 2;
            var g3 = i5[u4];
            d4 = (3 & g3) + (g3 >> 2 & 3) + (g3 >> 4 & 7) >= 1 ? 15 : 14;
          }
          var m4 = n5[d4], p4 = e5.readBit(m4);
          r5[u4] = r5[u4] << 1 | p4, c4[u4]++, s4[u4] |= 1;
        }
      }
    }, runCleanupPass: function() {
      for (var e5 = this.decoder, t5 = this.width, a4 = this.height, r5 = this.neighborsSignificance, i5 = (this.significanceState, this.coefficentsMagnitude), n5 = this.coefficentsSign, c4 = this.contexts, s4 = this.contextLabelTable, o4 = this.bitsDecoded, f3 = this.processingFlags, l3 = t5, h4 = 2 * t5, u4 = 3 * t5, d4 = 0; d4 < a4; d4 += 4) for (var g3 = 0; g3 < t5; g3++) {
        var m4, p4, b4 = d4 * t5 + g3, v4 = 0, y4 = b4;
        if (d4 + 3 < a4 && 0 === f3[b4] && 0 === f3[b4 + l3] && 0 === f3[b4 + h4] && 0 === f3[b4 + u4] && 0 === r5[b4] && 0 === r5[b4 + l3] && 0 === r5[b4 + h4] && 0 === r5[b4 + u4]) {
          if (m4 = this.runLengthContext, !e5.readBit(m4)) {
            o4[b4]++, o4[b4 + l3]++, o4[b4 + h4]++, o4[b4 + u4]++;
            continue;
          }
          m4 = this.uniformContext, p4 = d4 + (v4 = e5.readBit(m4) << 1 | e5.readBit(m4)), y4 += v4 * t5;
          var k4 = this.decodeSignBit(p4, g3);
          n5[y4] = k4, i5[y4] = 1, this.setNeighborsSignificance(p4, g3), f3[y4] |= 2, y4 = b4;
          for (var A4 = d4; A4 <= p4; A4++, y4 += t5) o4[y4]++;
          v4++;
        }
        for (; v4 < 4 && !((p4 = d4 + v4) >= a4); v4++, y4 += t5) if (!(i5[y4] || 1 & f3[y4])) {
          if (m4 = c4[s4[r5[y4]]], 1 == e5.readBit(m4)) {
            k4 = this.decodeSignBit(p4, g3);
            n5[y4] = k4, i5[y4] = 1, this.setNeighborsSignificance(p4, g3), f3[y4] |= 2;
          }
          o4[y4]++;
        }
      }
    }, checkSegmentationSymbol: function() {
      var e5 = this.decoder, t5 = this.uniformContext;
      if (10 != (e5.readBit(t5) << 3 | e5.readBit(t5) << 2 | e5.readBit(t5) << 1 | e5.readBit(t5))) throw "Invalid segmentation symbol";
    } }, n4;
  }(), w3 = function() {
    function e4() {
    }
    return e4.prototype.calculate = function(e5, t4, a3) {
      for (var r4 = e5[0], i4 = 1, n4 = e5.length, c4 = 1; i4 < n4; i4 += 3, c4++) r4 = this.iterate(r4, e5[i4], e5[i4 + 1], e5[i4 + 2], t4, a3);
      return r4;
    }, e4.prototype.expand = function(e5, t4, a3) {
      var r4 = t4 - 1, i4 = t4 + 1, n4 = t4 + a3 - 2, c4 = t4 + a3;
      e5[r4--] = e5[i4++], e5[c4++] = e5[n4--], e5[r4--] = e5[i4++], e5[c4++] = e5[n4--], e5[r4--] = e5[i4++], e5[c4++] = e5[n4--], e5[r4--] = e5[i4++], e5[c4++] = e5[n4--];
    }, e4.prototype.iterate = function(e5, t4, a3, r4, i4, n4) {
      for (var c4 = e5.width, s4 = e5.height, o4 = e5.items, f3 = t4.width, l3 = t4.height, h4 = t4.items, u4 = a3.width, d4 = a3.height, g3 = a3.items, m4 = r4.width, p4 = r4.height, b4 = r4.items, v4 = c4 + f3, y4 = s4 + d4, k4 = new Float32Array(v4 * y4), A4 = 0, w4 = s4; A4 < w4; A4++) for (var x4 = A4 * c4, S4 = 2 * A4 * v4, C2 = 0, I3 = c4; C2 < I3; C2++, x4++, S4 += 2) k4[S4] = o4[x4];
      for (A4 = 0, w4 = l3; A4 < w4; A4++) for (x4 = A4 * f3, S4 = 2 * A4 * v4 + 1, C2 = 0, I3 = f3; C2 < I3; C2++, x4++, S4 += 2) k4[S4] = h4[x4];
      for (A4 = 0, w4 = d4; A4 < w4; A4++) for (x4 = A4 * u4, S4 = (2 * A4 + 1) * v4, C2 = 0, I3 = u4; C2 < I3; C2++, x4++, S4 += 2) k4[S4] = g3[x4];
      for (A4 = 0, w4 = p4; A4 < w4; A4++) for (x4 = A4 * m4, S4 = (2 * A4 + 1) * v4 + 1, C2 = 0, I3 = m4; C2 < I3; C2++, x4++, S4 += 2) k4[S4] = b4[x4];
      for (var B3 = new Float32Array(Math.max(v4, y4) + 8), T3 = new Float32Array(B3), L2 = new Float32Array(B3), F2 = 0; F2 < y4; F2++) if (1 != v4) {
        x4 = F2 * v4, S4 = 4;
        for (var P3 = 0; P3 < v4; P3++, x4++, S4++) T3[S4] = k4[x4];
        this.expand(T3, 4, v4), this.filter(T3, 4, v4, i4, L2), x4 = F2 * v4, S4 = 4;
        for (P3 = 0; P3 < v4; P3++, x4++, S4++) k4[x4] = L2[S4];
      } else i4 % 1 != 0 && (k4[F2 * v4] /= 2);
      for (P3 = 0; P3 < v4; P3++) if (1 != y4) {
        for (x4 = P3, S4 = 4, F2 = 0; F2 < y4; F2++, x4 += v4, S4++) T3[S4] = k4[x4];
        this.expand(T3, 4, y4), this.filter(T3, 4, y4, n4, L2), x4 = P3, S4 = 4;
        for (F2 = 0; F2 < y4; F2++, x4 += v4, S4++) k4[x4] = L2[S4];
      } else n4 % 1 != 0 && (k4[P3] /= 2);
      return { width: v4, height: y4, items: k4 };
    }, e4;
  }(), x3 = function() {
    function e4() {
      w3.call(this);
    }
    return e4.prototype = Object.create(w3.prototype), e4.prototype.filter = function(e5, t4, a3, r4, i4) {
      for (var n4 = Math.floor(r4 / 2), c4 = Math.floor((r4 + a3) / 2), s4 = t4 - r4 % 1, o4 = 1.230174104914001, f3 = 1 / o4, l3 = s4 - 2, h4 = n4 - 1, u4 = c4 + 2; h4 < u4; h4++, l3 += 2) i4[l3] = o4 * e5[l3];
      for (l3 = s4 - 3, h4 = n4 - 2, u4 = c4 + 2; h4 < u4; h4++, l3 += 2) i4[l3] = f3 * e5[l3];
      for (l3 = s4 - 2, h4 = n4 - 1, u4 = c4 + 2; h4 < u4; h4++, l3 += 2) i4[l3] -= 0.443506852043971 * (i4[l3 - 1] + i4[l3 + 1]);
      for (l3 = s4 - 1, h4 = n4 - 1, u4 = c4 + 1; h4 < u4; h4++, l3 += 2) i4[l3] -= 0.882911075530934 * (i4[l3 - 1] + i4[l3 + 1]);
      for (l3 = s4, h4 = n4, u4 = c4 + 1; h4 < u4; h4++, l3 += 2) i4[l3] -= -0.052980118572961 * (i4[l3 - 1] + i4[l3 + 1]);
      for (l3 = s4 + 1, h4 = n4, u4 = c4; h4 < u4; h4++, l3 += 2) i4[l3] -= -1.586134342059924 * (i4[l3 - 1] + i4[l3 + 1]);
    }, e4;
  }(), S3 = function() {
    function e4() {
      w3.call(this);
    }
    return e4.prototype = Object.create(w3.prototype), e4.prototype.filter = function(e5, t4, a3, r4, i4) {
      for (var n4 = Math.floor(r4 / 2), c4 = Math.floor((r4 + a3) / 2), s4 = t4 - r4 % 1, o4 = n4, f3 = c4 + 1, l3 = s4; o4 < f3; o4++, l3 += 2) i4[l3] = e5[l3] - Math.floor((e5[l3 - 1] + e5[l3 + 1] + 2) / 4);
      for (o4 = n4, f3 = c4, l3 = s4 + 1; o4 < f3; o4++, l3 += 2) i4[l3] = e5[l3] + Math.floor((i4[l3 - 1] + i4[l3 + 1]) / 2);
    }, e4;
  }();
  return t3;
}();
var qr = function() {
  var e3 = function() {
    var e4 = [{ qe: 22017, nmps: 1, nlps: 1, switchFlag: 1 }, { qe: 13313, nmps: 2, nlps: 6, switchFlag: 0 }, { qe: 6145, nmps: 3, nlps: 9, switchFlag: 0 }, { qe: 2753, nmps: 4, nlps: 12, switchFlag: 0 }, { qe: 1313, nmps: 5, nlps: 29, switchFlag: 0 }, { qe: 545, nmps: 38, nlps: 33, switchFlag: 0 }, { qe: 22017, nmps: 7, nlps: 6, switchFlag: 1 }, { qe: 21505, nmps: 8, nlps: 14, switchFlag: 0 }, { qe: 18433, nmps: 9, nlps: 14, switchFlag: 0 }, { qe: 14337, nmps: 10, nlps: 14, switchFlag: 0 }, { qe: 12289, nmps: 11, nlps: 17, switchFlag: 0 }, { qe: 9217, nmps: 12, nlps: 18, switchFlag: 0 }, { qe: 7169, nmps: 13, nlps: 20, switchFlag: 0 }, { qe: 5633, nmps: 29, nlps: 21, switchFlag: 0 }, { qe: 22017, nmps: 15, nlps: 14, switchFlag: 1 }, { qe: 21505, nmps: 16, nlps: 14, switchFlag: 0 }, { qe: 20737, nmps: 17, nlps: 15, switchFlag: 0 }, { qe: 18433, nmps: 18, nlps: 16, switchFlag: 0 }, { qe: 14337, nmps: 19, nlps: 17, switchFlag: 0 }, { qe: 13313, nmps: 20, nlps: 18, switchFlag: 0 }, { qe: 12289, nmps: 21, nlps: 19, switchFlag: 0 }, { qe: 10241, nmps: 22, nlps: 19, switchFlag: 0 }, { qe: 9217, nmps: 23, nlps: 20, switchFlag: 0 }, { qe: 8705, nmps: 24, nlps: 21, switchFlag: 0 }, { qe: 7169, nmps: 25, nlps: 22, switchFlag: 0 }, { qe: 6145, nmps: 26, nlps: 23, switchFlag: 0 }, { qe: 5633, nmps: 27, nlps: 24, switchFlag: 0 }, { qe: 5121, nmps: 28, nlps: 25, switchFlag: 0 }, { qe: 4609, nmps: 29, nlps: 26, switchFlag: 0 }, { qe: 4353, nmps: 30, nlps: 27, switchFlag: 0 }, { qe: 2753, nmps: 31, nlps: 28, switchFlag: 0 }, { qe: 2497, nmps: 32, nlps: 29, switchFlag: 0 }, { qe: 2209, nmps: 33, nlps: 30, switchFlag: 0 }, { qe: 1313, nmps: 34, nlps: 31, switchFlag: 0 }, { qe: 1089, nmps: 35, nlps: 32, switchFlag: 0 }, { qe: 673, nmps: 36, nlps: 33, switchFlag: 0 }, { qe: 545, nmps: 37, nlps: 34, switchFlag: 0 }, { qe: 321, nmps: 38, nlps: 35, switchFlag: 0 }, { qe: 273, nmps: 39, nlps: 36, switchFlag: 0 }, { qe: 133, nmps: 40, nlps: 37, switchFlag: 0 }, { qe: 73, nmps: 41, nlps: 38, switchFlag: 0 }, { qe: 37, nmps: 42, nlps: 39, switchFlag: 0 }, { qe: 21, nmps: 43, nlps: 40, switchFlag: 0 }, { qe: 9, nmps: 44, nlps: 41, switchFlag: 0 }, { qe: 5, nmps: 45, nlps: 42, switchFlag: 0 }, { qe: 1, nmps: 45, nlps: 43, switchFlag: 0 }, { qe: 22017, nmps: 46, nlps: 46, switchFlag: 0 }];
    function t4(e5, t5, a3) {
      this.data = e5, this.bp = t5, this.dataEnd = a3, this.chigh = e5[t5], this.clow = 0, this.byteIn(), this.chigh = this.chigh << 7 & 65535 | this.clow >> 9 & 127, this.clow = this.clow << 7 & 65535, this.ct -= 7, this.a = 32768;
    }
    return t4.prototype = { byteIn: function() {
      var e5 = this.data, t5 = this.bp;
      255 == e5[t5] ? e5[t5 + 1] > 143 ? (this.clow += 65280, this.ct = 8) : (t5++, this.clow += e5[t5] << 9, this.ct = 7, this.bp = t5) : (t5++, this.clow += t5 < this.dataEnd ? e5[t5] << 8 : 65280, this.ct = 8, this.bp = t5);
      this.clow > 65535 && (this.chigh += this.clow >> 16, this.clow &= 65535);
    }, readBit: function(t5, a3) {
      var r4, i4 = t5[a3] >> 1, n4 = 1 & t5[a3], c4 = e4[i4], s4 = c4.qe, o4 = c4.nmps, f3 = c4.nlps, l3 = c4.switchFlag;
      if (this.a -= s4, this.chigh < s4) this.a < s4 ? (this.a = s4, r4 = n4, i4 = o4) : (this.a = s4, r4 = 1 - n4, l3 && (n4 = r4), i4 = f3);
      else {
        if (this.chigh -= s4, 32768 & this.a) return n4;
        this.a < s4 ? (r4 = 1 - n4, l3 && (n4 = r4), i4 = f3) : (r4 = n4, i4 = o4);
      }
      do {
        0 === this.ct && this.byteIn(), this.a <<= 1, this.chigh = this.chigh << 1 & 65535 | this.clow >> 15 & 1, this.clow = this.clow << 1 & 65535, this.ct--;
      } while (!(32768 & this.a));
      return t5[a3] = i4 << 1 | n4, r4;
    } }, t4;
  }();
  function t3() {
  }
  function a2(e4, t4, a3) {
    this.data = e4, this.start = t4, this.end = a3;
  }
  function r3(e4, t4, a3) {
    for (var r4, i4 = e4.getContexts(t4), n4 = 1, c4 = 1, s4 = 0, o4 = 32, f3 = 4436; c4; ) {
      var l3 = a3.readBit(i4, n4);
      switch (n4 = n4 < 256 ? n4 << 1 | l3 : 511 & (n4 << 1 | l3) | 256, c4) {
        case 1:
          r4 = !!l3;
          break;
        case 2:
          if (l3) break;
          c4 = 7, o4 = 2, f3 = 0;
          break;
        case 3:
          if (l3) break;
          c4 = 7, o4 = 4, f3 = 4;
          break;
        case 4:
          if (l3) break;
          c4 = 7, o4 = 6, f3 = 20;
          break;
        case 5:
          if (l3) break;
          c4 = 7, o4 = 8, f3 = 84;
          break;
        case 6:
          if (l3) break;
          c4 = 7, o4 = 12, f3 = 340;
          break;
        default:
          s4 = 2 * s4 + l3, 0 == --o4 && (c4 = 0);
          continue;
      }
      c4++;
    }
    return s4 += f3, r4 ? s4 > 0 ? -s4 : null : s4;
  }
  function i3(e4, t4, a3) {
    for (var r4 = e4.getContexts("IAID"), i4 = 1, n4 = 0; n4 < a3; n4++) {
      i4 = 2 * i4 + t4.readBit(r4, i4);
    }
    return a3 < 31 ? i4 & (1 << a3) - 1 : i4 - Math.pow(2, a3);
  }
  t3.prototype = { getContexts: function(e4) {
    return e4 in this ? this[e4] : this[e4] = new Int8Array(65536);
  } }, a2.prototype = { get decoder() {
    return Ue(this, "decoder", new e3(this.data, this.start, this.end));
  }, get contextCache() {
    return Ue(this, "contextCache", new t3());
  } };
  var n3 = ["SymbolDictionary", null, null, null, "IntermediateTextRegion", null, "ImmediateTextRegion", "ImmediateLosslessTextRegion", null, null, null, null, null, null, null, null, "patternDictionary", null, null, null, "IntermediateHalftoneRegion", null, "ImmediateHalftoneRegion", "ImmediateLosslessHalftoneRegion", null, null, null, null, null, null, null, null, null, null, null, null, "IntermediateGenericRegion", null, "ImmediateGenericRegion", "ImmediateLosslessGenericRegion", "IntermediateGenericRefinementRegion", null, "ImmediateGenericRefinementRegion", "ImmediateLosslessGenericRefinementRegion", null, null, null, null, "PageInformation", "EndOfPage", "EndOfStripe", "EndOfFile", "Profiles", "Tables", null, null, null, null, null, null, null, null, "Extension"], c3 = [[{ x: -1, y: -2 }, { x: 0, y: -2 }, { x: 1, y: -2 }, { x: -2, y: -1 }, { x: -1, y: -1 }, { x: 0, y: -1 }, { x: 1, y: -1 }, { x: 2, y: -1 }, { x: -4, y: 0 }, { x: -3, y: 0 }, { x: -2, y: 0 }, { x: -1, y: 0 }], [{ x: -1, y: -2 }, { x: 0, y: -2 }, { x: 1, y: -2 }, { x: 2, y: -2 }, { x: -2, y: -1 }, { x: -1, y: -1 }, { x: 0, y: -1 }, { x: 1, y: -1 }, { x: 2, y: -1 }, { x: -3, y: 0 }, { x: -2, y: 0 }, { x: -1, y: 0 }], [{ x: -1, y: -2 }, { x: 0, y: -2 }, { x: 1, y: -2 }, { x: -2, y: -1 }, { x: -1, y: -1 }, { x: 0, y: -1 }, { x: 1, y: -1 }, { x: -2, y: 0 }, { x: -1, y: 0 }], [{ x: -3, y: -1 }, { x: -2, y: -1 }, { x: -1, y: -1 }, { x: 0, y: -1 }, { x: 1, y: -1 }, { x: -4, y: 0 }, { x: -3, y: 0 }, { x: -2, y: 0 }, { x: -1, y: 0 }]], s3 = [{ coding: [{ x: 0, y: -1 }, { x: 1, y: -1 }, { x: -1, y: 0 }], reference: [{ x: 0, y: -1 }, { x: 1, y: -1 }, { x: -1, y: 0 }, { x: 0, y: 0 }, { x: 1, y: 0 }, { x: -1, y: 1 }, { x: 0, y: 1 }, { x: 1, y: 1 }] }, { coding: [{ x: -1, y: -1 }, { x: 0, y: -1 }, { x: 1, y: -1 }, { x: -1, y: 0 }], reference: [{ x: 0, y: -1 }, { x: -1, y: 0 }, { x: 0, y: 0 }, { x: 1, y: 0 }, { x: 0, y: 1 }, { x: 1, y: 1 }] }], o3 = [7379, 1946, 227, 395], f2 = [32, 8];
  function l2(e4) {
    for (var t4 = 1, a3 = 0; e4 > t4; ) t4 <<= 1, a3++;
    return a3;
  }
  function h3(e4, t4) {
    return e4[t4] << 24 | e4[t4 + 1] << 16 | e4[t4 + 2] << 8 | e4[t4 + 3];
  }
  function u3(e4, t4) {
    var a3 = h3(e4, t4);
    return 2147483648 & a3 ? a3 + 4294967296 : a3;
  }
  function d3(e4, t4) {
    return e4[t4] << 8 | e4[t4 + 1];
  }
  function g2(e4, t4) {
    return e4[t4] << 24 >> 24;
  }
  function m3(e4, t4, a3, r4, i4, n4, s4, f3) {
    e4 && Oe("JBIG2 error: MMR encoding is not supported");
    for (var l3 = !!n4, h4 = c3[r4].concat(s4), u4 = h4.length, d4 = new Int32Array(u4), g3 = new Int32Array(u4), m4 = 0; m4 < u4; m4++) d4[m4] = h4[m4].x, g3[m4] = h4[m4].y;
    for (var p4 = o3[r4], b4 = [], v4 = f3.decoder, y4 = f3.contextCache.getContexts("GB"), k4 = 0, A4 = 0; A4 < a3; A4++) {
      if (i4) k4 ^= v4.readBit(y4, p4);
      if (k4) b4.push(b4[b4.length - 1]);
      else {
        var w4 = new Uint8Array(t4);
        b4.push(w4);
        for (var x4 = 0; x4 < t4; x4++) if (l3 && n4[A4][x4]) w4[x4] = 0;
        else {
          var S4 = 0;
          for (m4 = 0; m4 < u4; m4++) {
            var C2 = A4 + g3[m4], I3 = x4 + d4[m4];
            C2 < 0 || I3 < 0 || I3 >= t4 ? S4 <<= 1 : S4 = S4 << 1 | b4[C2][I3];
          }
          var B3 = v4.readBit(y4, S4);
          w4[x4] = B3;
        }
      }
    }
    return b4;
  }
  function p3(e4, t4, a3, r4, i4, n4, c4, o4, l3) {
    var h4 = s3[a3].coding;
    0 === a3 && (h4 = h4.concat([o4[0]]));
    for (var u4 = h4.length, d4 = new Int32Array(u4), g3 = new Int32Array(u4), m4 = 0; m4 < u4; m4++) d4[m4] = h4[m4].x, g3[m4] = h4[m4].y;
    var p4 = s3[a3].reference;
    0 === a3 && (p4 = p4.concat([o4[1]]));
    var b4 = p4.length, v4 = new Int32Array(b4), y4 = new Int32Array(b4);
    for (m4 = 0; m4 < b4; m4++) v4[m4] = p4[m4].x, y4[m4] = p4[m4].y;
    for (var k4 = r4[0].length, A4 = r4.length, w4 = f2[a3], x4 = [], S4 = l3.decoder, C2 = l3.contextCache.getContexts("GR"), I3 = 0, B3 = 0; B3 < t4; B3++) {
      if (c4) I3 ^= S4.readBit(C2, w4);
      var T3 = new Uint8Array(e4);
      x4.push(T3);
      for (var L2 = 0; L2 < e4; L2++) {
        I3 && Oe("JBIG2 error: prediction is not supported");
        var F2 = 0;
        for (m4 = 0; m4 < u4; m4++) {
          var P3 = B3 + g3[m4], R2 = L2 + d4[m4];
          P3 < 0 || R2 < 0 || R2 >= e4 ? F2 <<= 1 : F2 = F2 << 1 | x4[P3][R2];
        }
        for (m4 = 0; m4 < b4; m4++) {
          P3 = B3 + y4[m4] + n4, R2 = L2 + v4[m4] + i4;
          P3 < 0 || P3 >= A4 || R2 < 0 || R2 >= k4 ? F2 <<= 1 : F2 = F2 << 1 | r4[P3][R2];
        }
        var O2 = S4.readBit(C2, F2);
        T3[L2] = O2;
      }
    }
    return x4;
  }
  function b3(e4, t4) {
    var a3 = {};
    a3.number = u3(e4, t4);
    var r4 = e4[t4 + 4], i4 = 63 & r4;
    n3[i4] || Oe("JBIG2 error: invalid segment type: " + i4), a3.type = i4, a3.typeName = n3[i4], a3.deferredNonRetain = !!(128 & r4);
    var c4 = !!(64 & r4), s4 = e4[t4 + 5], o4 = s4 >> 5 & 7, f3 = [31 & s4], l3 = t4 + 6;
    if (7 == s4) {
      o4 = 536870911 & h3(e4, l3 - 1), l3 += 3;
      var g3 = o4 + 7 >> 3;
      for (f3[0] = e4[l3++]; --g3 > 0; ) f3.push(e4[l3++]);
    } else 5 != s4 && 6 != s4 || Oe("JBIG2 error: invalid referred-to flags");
    a3.retainBits = f3;
    for (var m4 = a3.number <= 256 ? 1 : a3.number <= 65536 ? 2 : 4, p4 = [], b4 = 0; b4 < o4; b4++) {
      var v4 = 1 == m4 ? e4[l3] : 2 == m4 ? d3(e4, l3) : u3(e4, l3);
      p4.push(v4), l3 += m4;
    }
    if (a3.referredTo = p4, c4 ? (a3.pageAssociation = u3(e4, l3), l3 += 4) : a3.pageAssociation = e4[l3++], a3.length = u3(e4, l3), l3 += 4, 4294967295 == a3.length) if (38 === i4) {
      var A4 = y3(e4, l3), w4 = !!(1 & e4[l3 + k3]), x4 = new Uint8Array(6);
      w4 || (x4[0] = 255, x4[1] = 172), x4[2] = A4.height >>> 24 & 255, x4[3] = A4.height >> 16 & 255, x4[4] = A4.height >> 8 & 255, x4[5] = 255 & A4.height;
      b4 = l3;
      for (var S4 = e4.length; b4 < S4; b4++) {
        for (var C2 = 0; C2 < 6 && x4[C2] === e4[b4 + C2]; ) C2++;
        if (6 == C2) {
          a3.length = b4 + 6;
          break;
        }
      }
      4294967295 == a3.length && Oe("JBIG2 error: segment end was not found");
    } else Oe("JBIG2 error: invalid unknown segment length");
    return a3.headerEnd = l3, a3;
  }
  function v3(e4, t4, a3, r4) {
    for (var i4 = [], n4 = a3; n4 < r4; ) {
      var c4 = b3(t4, n4);
      n4 = c4.headerEnd;
      var s4 = { header: c4, data: t4 };
      if (e4.randomAccess || (s4.start = n4, n4 += c4.length, s4.end = n4), i4.push(s4), 51 == c4.type) break;
    }
    if (e4.randomAccess) for (var o4 = 0, f3 = i4.length; o4 < f3; o4++) i4[o4].start = n4, n4 += i4[o4].header.length, i4[o4].end = n4;
    return i4;
  }
  function y3(e4, t4) {
    return { width: u3(e4, t4), height: u3(e4, t4 + 4), x: u3(e4, t4 + 8), y: u3(e4, t4 + 12), combinationOperator: 7 & e4[t4 + 16] };
  }
  var k3 = 17;
  function A3(e4, t4) {
    var a3, r4 = e4.header, i4 = e4.data, n4 = e4.start, c4 = e4.end;
    switch (r4.type) {
      case 0:
        var s4 = {}, o4 = d3(i4, n4);
        if (s4.huffman = !!(1 & o4), s4.refinement = !!(2 & o4), s4.huffmanDHSelector = o4 >> 2 & 3, s4.huffmanDWSelector = o4 >> 4 & 3, s4.bitmapSizeSelector = o4 >> 6 & 1, s4.aggregationInstancesSelector = o4 >> 7 & 1, s4.bitmapCodingContextUsed = !!(256 & o4), s4.bitmapCodingContextRetained = !!(512 & o4), s4.template = o4 >> 10 & 3, s4.refinementTemplate = o4 >> 12 & 1, n4 += 2, !s4.huffman) {
          for (var f3 = 0 === s4.template ? 4 : 1, l3 = [], h4 = 0; h4 < f3; h4++) l3.push({ x: g2(i4, n4), y: g2(i4, n4 + 1) }), n4 += 2;
          s4.at = l3;
        }
        if (s4.refinement && !s4.refinementTemplate) {
          for (l3 = [], h4 = 0; h4 < 2; h4++) l3.push({ x: g2(i4, n4), y: g2(i4, n4 + 1) }), n4 += 2;
          s4.refinementAt = l3;
        }
        s4.numberOfExportedSymbols = u3(i4, n4), n4 += 4, s4.numberOfNewSymbols = u3(i4, n4), n4 += 4, a3 = [s4, r4.number, r4.referredTo, i4, n4, c4];
        break;
      case 6:
      case 7:
        var m4 = {};
        m4.info = y3(i4, n4);
        var p4 = d3(i4, n4 += k3);
        if (n4 += 2, m4.huffman = !!(1 & p4), m4.refinement = !!(2 & p4), m4.stripSize = 1 << (p4 >> 2 & 3), m4.referenceCorner = p4 >> 4 & 3, m4.transposed = !!(64 & p4), m4.combinationOperator = p4 >> 7 & 3, m4.defaultPixelValue = p4 >> 9 & 1, m4.dsOffset = p4 << 17 >> 27, m4.refinementTemplate = p4 >> 15 & 1, m4.huffman) {
          var b4 = d3(i4, n4);
          n4 += 2, m4.huffmanFS = 3 & b4, m4.huffmanDS = b4 >> 2 & 3, m4.huffmanDT = b4 >> 4 & 3, m4.huffmanRefinementDW = b4 >> 6 & 3, m4.huffmanRefinementDH = b4 >> 8 & 3, m4.huffmanRefinementDX = b4 >> 10 & 3, m4.huffmanRefinementDY = b4 >> 12 & 3, m4.huffmanRefinementSizeSelector = !!(14 & b4);
        }
        if (m4.refinement && !m4.refinementTemplate) {
          for (l3 = [], h4 = 0; h4 < 2; h4++) l3.push({ x: g2(i4, n4), y: g2(i4, n4 + 1) }), n4 += 2;
          m4.refinementAt = l3;
        }
        m4.numberOfSymbolInstances = u3(i4, n4), n4 += 4, m4.huffman && Oe("JBIG2 error: huffman is not supported"), a3 = [m4, r4.referredTo, i4, n4, c4];
        break;
      case 38:
      case 39:
        var v4 = {};
        v4.info = y3(i4, n4), n4 += k3;
        var A4 = i4[n4++];
        if (v4.mmr = !!(1 & A4), v4.template = A4 >> 1 & 3, v4.prediction = !!(8 & A4), !v4.mmr) {
          for (f3 = 0 === v4.template ? 4 : 1, l3 = [], h4 = 0; h4 < f3; h4++) l3.push({ x: g2(i4, n4), y: g2(i4, n4 + 1) }), n4 += 2;
          v4.at = l3;
        }
        a3 = [v4, i4, n4, c4];
        break;
      case 48:
        var w4 = { width: u3(i4, n4), height: u3(i4, n4 + 4), resolutionX: u3(i4, n4 + 8), resolutionY: u3(i4, n4 + 12) };
        4294967295 == w4.height && delete w4.height;
        var x4 = i4[n4 + 16];
        d3(i4, n4 + 17);
        w4.lossless = !!(1 & x4), w4.refinement = !!(2 & x4), w4.defaultPixelValue = x4 >> 2 & 1, w4.combinationOperator = x4 >> 3 & 3, w4.requiresBuffer = !!(32 & x4), w4.combinationOperatorOverride = !!(64 & x4), a3 = [w4];
        break;
      case 49:
      case 50:
      case 51:
      case 62:
        break;
      default:
        Oe("JBIG2 error: segment type " + r4.typeName + "(" + r4.type + ") is not implemented");
    }
    var S4 = "on" + r4.typeName;
    S4 in t4 && t4[S4].apply(t4, a3);
  }
  function w3(e4, t4) {
    for (var a3 = 0, r4 = e4.length; a3 < r4; a3++) A3(e4[a3], t4);
  }
  function x3() {
  }
  function S3() {
  }
  return x3.prototype = { onPageInformation: function(e4) {
    this.currentPageInfo = e4;
    for (var t4 = e4.width + 7 >> 3, a3 = new Uint8Array(t4 * e4.height), r4 = e4.defaultPixelValue ? 255 : 0, i4 = 0, n4 = a3.length; i4 < n4; i4++) a3[i4] = r4;
    this.buffer = a3;
  }, drawBitmap: function(e4, t4) {
    for (var a3 = this.currentPageInfo, r4 = e4.width, i4 = e4.height, n4 = a3.width + 7 >> 3, c4 = a3.combinationOperatorOverride ? e4.combinationOperator : a3.combinationOperator, s4 = this.buffer, o4 = 0; o4 < i4; o4++) {
      var f3 = 128 >> (7 & e4.x), l3 = (o4 + e4.y) * n4 + (e4.x >> 3);
      switch (c4) {
        case 0:
          for (var h4 = 0; h4 < r4; h4++) s4[l3] |= t4[o4][h4] ? f3 : 0, (f3 >>= 1) || (f3 = 128, l3++);
          break;
        case 2:
          for (h4 = 0; h4 < r4; h4++) s4[l3] ^= t4[o4][h4] ? f3 : 0, (f3 >>= 1) || (f3 = 128, l3++);
          break;
        default:
          Oe("JBIG2 error: operator " + c4 + " is not supported");
      }
    }
  }, onImmediateGenericRegion: function(e4, t4, r4, i4) {
    var n4 = e4.info, c4 = new a2(t4, r4, i4), s4 = m3(e4.mmr, n4.width, n4.height, e4.template, e4.prediction, null, e4.at, c4);
    this.drawBitmap(n4, s4);
  }, onImmediateLosslessGenericRegion: function() {
    this.onImmediateGenericRegion.apply(this, arguments);
  }, onSymbolDictionary: function(e4, t4, n4, c4, s4, o4) {
    e4.huffman && Oe("JBIG2 error: huffman is not supported");
    var f3 = this.symbols;
    f3 || (this.symbols = f3 = {});
    for (var h4 = [], u4 = 0, d4 = n4.length; u4 < d4; u4++) h4 = h4.concat(f3[n4[u4]]);
    var g3 = new a2(c4, s4, o4);
    f3[t4] = function(e5, t5, a3, n5, c5, s5, o5, f4, h5, u5, d5) {
      e5 && Oe("JBIG2 error: huffman is not supported");
      for (var g4 = [], b4 = 0, v4 = l2(a3.length + n5), y4 = d5.decoder, k4 = d5.contextCache; g4.length < n5; ) {
        b4 += r3(k4, "IADH", y4);
        for (var A4 = 0; ; ) {
          var w4, x4 = r3(k4, "IADW", y4);
          if (null === x4) break;
          if (A4 += x4, t5) {
            r3(k4, "IAAI", y4) > 1 && Oe("JBIG2 error: number of instances > 1 is not supported");
            var S4 = i3(k4, y4, v4), C2 = r3(k4, "IARDX", y4), I3 = r3(k4, "IARDY", y4);
            w4 = p3(A4, b4, h5, S4 < a3.length ? a3[S4] : g4[S4 - a3.length], C2, I3, false, u5, d5);
          } else w4 = m3(false, A4, b4, o5, false, null, f4, d5);
          g4.push(w4);
        }
      }
      for (var B3 = [], T3 = [], L2 = false, F2 = a3.length + n5; T3.length < F2; ) {
        for (var P3 = r3(k4, "IAEX", y4); P3--; ) T3.push(L2);
        L2 = !L2;
      }
      for (var R2 = 0, O2 = a3.length; R2 < O2; R2++) T3[R2] && B3.push(a3[R2]);
      for (var M2 = 0; M2 < n5; R2++, M2++) T3[R2] && B3.push(g4[M2]);
      return B3;
    }(e4.huffman, e4.refinement, h4, e4.numberOfNewSymbols, e4.numberOfExportedSymbols, 0, e4.template, e4.at, e4.refinementTemplate, e4.refinementAt, g3);
  }, onImmediateTextRegion: function(e4, t4, n4, c4, s4) {
    for (var o4 = e4.info, f3 = this.symbols, h4 = [], u4 = 0, d4 = t4.length; u4 < d4; u4++) h4 = h4.concat(f3[t4[u4]]);
    var g3 = l2(h4.length), m4 = new a2(n4, c4, s4), b4 = function(e5, t5, a3, n5, c5, s5, o5, f4, l3, h5, u5, d5, g4, m5, b5, v4, y4) {
      e5 && Oe("JBIG2 error: huffman is not supported");
      for (var k4 = [], A4 = 0; A4 < n5; A4++) {
        var w4 = new Uint8Array(a3);
        if (c5) for (var x4 = 0; x4 < a3; x4++) w4[x4] = c5;
        k4.push(w4);
      }
      var S4 = y4.decoder, C2 = y4.contextCache, I3 = -r3(C2, "IADT", S4), B3 = 0;
      for (A4 = 0; A4 < s5; ) {
        I3 += r3(C2, "IADT", S4);
        for (var T3 = B3 += r3(C2, "IAFS", S4); ; ) {
          var L2 = o5 * I3 + (1 == o5 ? 0 : r3(C2, "IAIT", S4)), F2 = i3(C2, S4, l3), P3 = t5 && r3(C2, "IARI", S4), R2 = f4[F2], O2 = R2[0].length, M2 = R2.length;
          if (P3) {
            var D2 = r3(C2, "IARDW", S4), q2 = r3(C2, "IARDH", S4);
            R2 = p3(O2 += D2, M2 += q2, b5, R2, (D2 >> 1) + r3(C2, "IARDX", S4), (q2 >> 1) + r3(C2, "IARDY", S4), false, v4, y4);
          }
          var E3 = L2 - (1 & d5 ? 0 : M2), N2 = T3 - (2 & d5 ? O2 : 0);
          if (h5) {
            for (var j3 = 0; j3 < M2; j3++) if (w4 = k4[N2 + j3]) {
              var U2 = R2[j3], z4 = Math.min(a3 - E3, O2);
              switch (g4) {
                case 0:
                  for (var H2 = 0; H2 < z4; H2++) w4[E3 + H2] |= U2[H2];
                  break;
                case 2:
                  for (H2 = 0; H2 < z4; H2++) w4[E3 + H2] ^= U2[H2];
                  break;
                default:
                  Oe("JBIG2 error: operator " + g4 + " is not supported");
              }
            }
            T3 += M2 - 1;
          } else {
            for (H2 = 0; H2 < M2; H2++) if (w4 = k4[E3 + H2]) switch (U2 = R2[H2], g4) {
              case 0:
                for (j3 = 0; j3 < O2; j3++) w4[N2 + j3] |= U2[j3];
                break;
              case 2:
                for (j3 = 0; j3 < O2; j3++) w4[N2 + j3] ^= U2[j3];
                break;
              default:
                Oe("JBIG2 error: operator " + g4 + " is not supported");
            }
            T3 += O2 - 1;
          }
          A4++;
          var G2 = r3(C2, "IADS", S4);
          if (null === G2) break;
          T3 += G2 + u5;
        }
      }
      return k4;
    }(e4.huffman, e4.refinement, o4.width, o4.height, e4.defaultPixelValue, e4.numberOfSymbolInstances, e4.stripSize, h4, g3, e4.transposed, e4.dsOffset, e4.referenceCorner, e4.combinationOperator, 0, e4.refinementTemplate, e4.refinementAt, m4);
    this.drawBitmap(o4, b4);
  }, onImmediateLosslessTextRegion: function() {
    this.onImmediateTextRegion.apply(this, arguments);
  } }, S3.prototype = { parseChunks: function(e4) {
    return function(e5) {
      for (var t4 = new x3(), a3 = 0, r4 = e5.length; a3 < r4; a3++) {
        var i4 = e5[a3];
        w3(v3({}, i4.data, i4.start, i4.end), t4);
      }
      return t4.buffer;
    }(e4);
  } }, S3;
}();
var Er = (be.bidi = /* @__PURE__ */ function() {
  var e3 = ["BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "S", "B", "S", "WS", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "B", "B", "B", "S", "WS", "ON", "ON", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "ON", "ON", "CS", "ON", "CS", "ON", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "EN", "ON", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "ON", "ON", "ON", "BN", "BN", "BN", "BN", "BN", "BN", "B", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "BN", "CS", "ON", "ET", "ET", "ET", "ET", "ON", "ON", "ON", "ON", "L", "ON", "ON", "ON", "ON", "ON", "ET", "ET", "EN", "EN", "ON", "L", "ON", "ON", "ON", "EN", "L", "ON", "ON", "ON", "ON", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "L", "ON", "L", "L", "L", "L", "L", "L", "L", "L"], t
  function a2(e4) {
    return !!(1 & e4);
  }
  function r3(e4) {
    return !(1 & e4);
  }
  function i3(e4, t4, a3) {
    for (var r4 = t4, i4 = e4.length; r4 < i4; ++r4) if (e4[r4] != a3) return r4;
    return r4;
  }
  function n3(e4, t4, a3, r4) {
    for (var i4 = t4; i4 < a3; ++i4) e4[i4] = r4;
  }
  function c3(e4, t4, a3) {
    for (var r4 = t4, i4 = a3 - 1; r4 < i4; ++r4, --i4) {
      var n4 = e4[r4];
      e4[r4] = e4[i4], e4[i4] = n4;
    }
  }
  function s3(e4, t4, a3) {
    this.str = e4, this.dir = a3 ? "ttb" : t4 ? "ltr" : "rtl";
  }
  return function(o3, f2, l2) {
    var h3 = true, u3 = o3.length;
    if (0 === u3 || l2) return new s3(o3, h3, l2);
    for (var d3 = [], g2 = [], m3 = [], p3 = 0, b3 = 0; b3 < u3; ++b3) {
      d3[b3] = o3.charAt(b3);
      var v3 = o3.charCodeAt(b3), y3 = "L";
      v3 <= 255 ? y3 = e3[v3] : 1424 <= v3 && v3 <= 1524 ? y3 = "R" : 1536 <= v3 && v3 <= 1791 ? y3 = t3[255 & v3] : 1792 <= v3 && v3 <= 2220 && (y3 = "AL"), "R" != y3 && "AL" != y3 && "AN" != y3 || p3++, m3[b3] = g2[b3] = y3;
    }
    if (0 === p3) return new s3(o3, h3 = true);
    -1 == f2 && (u3 / p3 < 0.3 ? (h3 = true, f2 = 0) : (h3 = false, f2 = 1));
    var k3 = [];
    for (b3 = 0; b3 < u3; ++b3) k3[b3] = f2;
    var A3 = a2(f2) ? "R" : "L", w3 = A3, x3 = w3, S3 = w3;
    for (b3 = 0; b3 < u3; ++b3) "NSM" == g2[b3] ? g2[b3] = S3 : S3 = g2[b3];
    for (S3 = w3, b3 = 0; b3 < u3; ++b3) {
      "EN" == (L2 = g2[b3]) ? g2[b3] = "AL" == S3 ? "AN" : "EN" : "R" != L2 && "L" != L2 && "AL" != L2 || (S3 = L2);
    }
    for (b3 = 0; b3 < u3; ++b3) {
      "AL" == (L2 = g2[b3]) && (g2[b3] = "R");
    }
    for (b3 = 1; b3 < u3 - 1; ++b3) "ES" == g2[b3] && "EN" == g2[b3 - 1] && "EN" == g2[b3 + 1] && (g2[b3] = "EN"), "CS" != g2[b3] || "EN" != g2[b3 - 1] && "AN" != g2[b3 - 1] || g2[b3 + 1] != g2[b3 - 1] || (g2[b3] = g2[b3 - 1]);
    for (b3 = 0; b3 < u3; ++b3) if ("EN" == g2[b3]) {
      for (var C2 = b3 - 1; C2 >= 0 && "ET" == g2[C2]; --C2) g2[C2] = "EN";
      for (C2 = b3 + 1; C2 < u3 && "ET" == g2[C2]; --C2) g2[C2] = "EN";
    }
    for (b3 = 0; b3 < u3; ++b3) {
      "WS" != (L2 = g2[b3]) && "ES" != L2 && "ET" != L2 && "CS" != L2 || (g2[b3] = "ON");
    }
    for (S3 = w3, b3 = 0; b3 < u3; ++b3) {
      "EN" == (L2 = g2[b3]) ? g2[b3] = "L" == S3 ? "L" : "EN" : "R" != L2 && "L" != L2 || (S3 = L2);
    }
    for (b3 = 0; b3 < u3; ++b3) if ("ON" == g2[b3]) {
      var I3 = i3(g2, b3 + 1, "ON"), B3 = w3;
      b3 > 0 && (B3 = g2[b3 - 1]);
      var T3 = x3;
      I3 + 1 < u3 && (T3 = g2[I3 + 1]), "L" != B3 && (B3 = "R"), "L" != T3 && (T3 = "R"), B3 == T3 && n3(g2, b3, I3, B3), b3 = I3 - 1;
    }
    for (b3 = 0; b3 < u3; ++b3) "ON" == g2[b3] && (g2[b3] = A3);
    for (b3 = 0; b3 < u3; ++b3) {
      var L2 = g2[b3];
      r3(k3[b3]) ? "R" == L2 ? k3[b3] += 1 : "AN" != L2 && "EN" != L2 || (k3[b3] += 2) : "L" != L2 && "AN" != L2 && "EN" != L2 || (k3[b3] += 1);
    }
    for (var F2 = -1, P3 = 99, R2 = (b3 = 0, k3.length); b3 < R2; ++b3) {
      F2 < (O2 = k3[b3]) && (F2 = O2), P3 > O2 && a2(O2) && (P3 = O2);
    }
    for (var O2 = F2; O2 >= P3; --O2) {
      var M2 = -1;
      for (b3 = 0, R2 = k3.length; b3 < R2; ++b3) k3[b3] < O2 ? M2 >= 0 && (c3(d3, M2, b3), M2 = -1) : M2 < 0 && (M2 = b3);
      M2 >= 0 && c3(d3, M2, k3.length);
    }
    var D2 = "";
    for (b3 = 0, R2 = d3.length; b3 < R2; ++b3) {
      var q2 = d3[b3];
      "<" != q2 && ">" != q2 && (D2 += q2);
    }
    return new s3(D2, h3);
  };
}(), function() {
  var e3 = new Int32Array([0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40, 48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29, 22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54, 47, 55, 62, 63]), t3 = 4017, a2 = 799, r3 = 3406, i3 = 2276, n3 = 1567, c3 = 3784, s3 = 5793, o3 = 2896;
  function f2() {
  }
  function l2(e4, t4) {
    for (var a3, r4, i4 = 0, n4 = [], c4 = 16; c4 > 0 && !e4[c4 - 1]; ) c4--;
    n4.push({ children: [], index: 0 });
    var s4, o4 = n4[0];
    for (a3 = 0; a3 < c4; a3++) {
      for (r4 = 0; r4 < e4[a3]; r4++) {
        for ((o4 = n4.pop()).children[o4.index] = t4[i4]; o4.index > 0; ) o4 = n4.pop();
        for (o4.index++, n4.push(o4); n4.length <= a3; ) n4.push(s4 = { children: [], index: 0 }), o4.children[o4.index] = s4.children, o4 = s4;
        i4++;
      }
      a3 + 1 < c4 && (n4.push(s4 = { children: [], index: 0 }), o4.children[o4.index] = s4.children, o4 = s4);
    }
    return n4[0].children;
  }
  function h3(t4, a3, r4, i4, n4, c4, s4, o4, f3) {
    r4.precision, r4.samplesPerLine, r4.scanLines;
    var l3 = r4.mcusPerLine, h4 = r4.progressive, u4 = (r4.maxH, r4.maxV, a3), d3 = 0, g2 = 0;
    function m3() {
      if (g2 > 0) return g2--, d3 >> g2 & 1;
      if (255 == (d3 = t4[a3++])) {
        var e4 = t4[a3++];
        if (e4) throw "unexpected marker: " + (d3 << 8 | e4).toString(16);
      }
      return g2 = 7, d3 >>> 7;
    }
    function p3(e4) {
      for (var t5, a4 = e4; null !== (t5 = m3()); ) {
        if ("number" == typeof (a4 = a4[t5])) return a4;
        if ("object" != typeof a4) throw "invalid huffman sequence";
      }
      return null;
    }
    function b3(e4) {
      for (var t5 = 0; e4 > 0; ) {
        var a4 = m3();
        if (null === a4) return;
        t5 = t5 << 1 | a4, e4--;
      }
      return t5;
    }
    function v3(e4) {
      var t5 = b3(e4);
      return t5 >= 1 << e4 - 1 ? t5 : t5 + (-1 << e4) + 1;
    }
    var y3 = 0;
    var k3, A3 = 0;
    function w3(e4, t5, a4, r5, i5) {
      var n5 = a4 % l3, c5 = (a4 / l3 | 0) * e4.v + r5, s5 = n5 * e4.h + i5;
      t5(e4, e4.blocks[c5][s5]);
    }
    function x3(e4, t5, a4) {
      var r5 = a4 / e4.blocksPerLine | 0, i5 = a4 % e4.blocksPerLine;
      t5(e4, e4.blocks[r5][i5]);
    }
    var S3, C2, I3, B3, T3, L2, F2 = i4.length;
    L2 = h4 ? 0 === c4 ? 0 === o4 ? function(e4, t5) {
      var a4 = p3(e4.huffmanTableDC), r5 = 0 === a4 ? 0 : v3(a4) << f3;
      t5[0] = e4.pred += r5;
    } : function(e4, t5) {
      t5[0] |= m3() << f3;
    } : 0 === o4 ? function(t5, a4) {
      if (y3 > 0) y3--;
      else for (var r5 = c4, i5 = s4; r5 <= i5; ) {
        var n5 = p3(t5.huffmanTableAC), o5 = 15 & n5, l4 = n5 >> 4;
        if (0 !== o5) a4[e3[r5 += l4]] = v3(o5) * (1 << f3), r5++;
        else {
          if (l4 < 15) {
            y3 = b3(l4) + (1 << l4) - 1;
            break;
          }
          r5 += 16;
        }
      }
    } : function(t5, a4) {
      for (var r5 = c4, i5 = s4, n5 = 0; r5 <= i5; ) {
        var o5 = e3[r5];
        switch (A3) {
          case 0:
            var l4 = p3(t5.huffmanTableAC), h5 = 15 & l4;
            if (n5 = l4 >> 4, 0 === h5) n5 < 15 ? (y3 = b3(n5) + (1 << n5), A3 = 4) : (n5 = 16, A3 = 1);
            else {
              if (1 !== h5) throw "invalid ACn encoding";
              k3 = v3(h5), A3 = n5 ? 2 : 3;
            }
            continue;
          case 1:
          case 2:
            a4[o5] ? a4[o5] += m3() << f3 : 0 == --n5 && (A3 = 2 == A3 ? 3 : 0);
            break;
          case 3:
            a4[o5] ? a4[o5] += m3() << f3 : (a4[o5] = k3 << f3, A3 = 0);
            break;
          case 4:
            a4[o5] && (a4[o5] += m3() << f3);
        }
        r5++;
      }
      4 === A3 && 0 == --y3 && (A3 = 0);
    } : function(t5, a4) {
      var r5 = p3(t5.huffmanTableDC), i5 = 0 === r5 ? 0 : v3(r5);
      a4[0] = t5.pred += i5;
      for (var n5 = 1; n5 < 64; ) {
        var c5 = p3(t5.huffmanTableAC), s5 = 15 & c5, o5 = c5 >> 4;
        if (0 !== s5) a4[e3[n5 += o5]] = v3(s5), n5++;
        else {
          if (o5 < 15) break;
          n5 += 16;
        }
      }
    };
    var P3, R2, O2, M2, D2 = 0;
    for (R2 = 1 == F2 ? i4[0].blocksPerLine * i4[0].blocksPerColumn : l3 * r4.mcusPerColumn, n4 || (n4 = R2); D2 < R2; ) {
      for (C2 = 0; C2 < F2; C2++) i4[C2].pred = 0;
      if (y3 = 0, 1 == F2) for (S3 = i4[0], T3 = 0; T3 < n4; T3++) x3(S3, L2, D2), D2++;
      else for (T3 = 0; T3 < n4; T3++) {
        for (C2 = 0; C2 < F2; C2++) for (O2 = (S3 = i4[C2]).h, M2 = S3.v, I3 = 0; I3 < M2; I3++) for (B3 = 0; B3 < O2; B3++) w3(S3, L2, D2, I3, B3);
        D2++;
      }
      if (g2 = 0, (P3 = t4[a3] << 8 | t4[a3 + 1]) <= 65280) throw "marker was not found";
      if (!(P3 >= 65488 && P3 <= 65495)) break;
      a3 += 2;
    }
    return a3 - u4;
  }
  function u3(e4, f3) {
    var l3, h4, u4 = [], d3 = f3.blocksPerLine, g2 = f3.blocksPerColumn, m3 = d3 << 3, p3 = new Int32Array(64), b3 = new Uint8Array(64);
    function v3(e5, l4, h5) {
      var u5, d4, g3, m4, p4, b4, v4, y4, k4, A4, w4 = f3.quantizationTable, x4 = h5;
      for (A4 = 0; A4 < 64; A4++) x4[A4] = e5[A4] * w4[A4];
      for (A4 = 0; A4 < 8; ++A4) {
        var S4 = 8 * A4;
        0 != x4[1 + S4] || 0 != x4[2 + S4] || 0 != x4[3 + S4] || 0 != x4[4 + S4] || 0 != x4[5 + S4] || 0 != x4[6 + S4] || 0 != x4[7 + S4] ? (u5 = s3 * x4[0 + S4] + 128 >> 8, d4 = s3 * x4[4 + S4] + 128 >> 8, g3 = x4[2 + S4], m4 = x4[6 + S4], p4 = o3 * (x4[1 + S4] - x4[7 + S4]) + 128 >> 8, y4 = o3 * (x4[1 + S4] + x4[7 + S4]) + 128 >> 8, b4 = x4[3 + S4] << 4, v4 = x4[5 + S4] << 4, k4 = u5 - d4 + 1 >> 1, u5 = u5 + d4 + 1 >> 1, d4 = k4, k4 = g3 * c3 + m4 * n3 + 128 >> 8, g3 = g3 * n3 - m4 * c3 + 128 >> 8, m4 = k4, k4 = p4 - v4 + 1 >> 1, p4 = p4 + v4 + 1 >> 1, v4 = k4, k4 = y4 + b4 + 1 >> 1, b4 = y4 - b4 + 1 >> 1, y4 = k4, k4 = u5 - m4 + 1 >> 1, u5 = u5 + m4 + 1 >> 1, m4 = k4, k4 = d4 - g3 + 1 >> 1, d4 = d4 + g3 + 1 >> 1, g3 = k4, k4 = p4 * i3 + y4 * r3 + 2048 >> 12, p4 = p4 * r3 - y4 * i3 + 2048 >> 12, y4 = k4, k4 = b4 * a2 + v4 * t3 + 2048 >> 12, b4 = b4 * t3 - v4 * a2 + 2048 >> 12, v4 = k4, x4[0 + S4] = u5 + y4, x4[7 + S4] = u5 - y4, x4[1 + S4] = d4 + v4, x4[6 + S4] = d4 - v4, x4[2 + S4] = g3 + b4, x4[5 + S4] = g3 - b4, x4[3 + S4] = m4 + p4, x4[4 + S4] = m4 - p4) : (k4 = s3 * x4[0 + S4] + 512 >> 10, x4[0 + S4] = k4, x4[1 + S4] = k4, x4[2 + S4] = k4, x4[3 + S4] = k4, x4[4 + S4] = k4, x4[5 + S4] = k4, x4[6 + S4] = k4, x4[7 + S4] = k4);
      }
      for (A4 = 0; A4 < 8; ++A4) {
        var C2 = A4;
        0 != x4[8 + C2] || 0 != x4[16 + C2] || 0 != x4[24 + C2] || 0 != x4[32 + C2] || 0 != x4[40 + C2] || 0 != x4[48 + C2] || 0 != x4[56 + C2] ? (u5 = s3 * x4[0 + C2] + 2048 >> 12, d4 = s3 * x4[32 + C2] + 2048 >> 12, g3 = x4[16 + C2], m4 = x4[48 + C2], p4 = o3 * (x4[8 + C2] - x4[56 + C2]) + 2048 >> 12, y4 = o3 * (x4[8 + C2] + x4[56 + C2]) + 2048 >> 12, b4 = x4[24 + C2], v4 = x4[40 + C2], k4 = u5 - d4 + 1 >> 1, u5 = u5 + d4 + 1 >> 1, d4 = k4, k4 = g3 * c3 + m4 * n3 + 2048 >> 12, g3 = g3 * n3 - m4 * c3 + 2048 >> 12, m4 = k4, k4 = p4 - v4 + 1 >> 1, p4 = p4 + v4 + 1 >> 1, v4 = k4, k4 = y4 + b4 + 1 >> 1, b4 = y4 - b4 + 1 >> 1, y4 = k4, k4 = u5 - m4 + 1 >> 1, u5 = u5 + m4 + 1 >> 1, m4 = k4, k4 = d4 - g3 + 1 >> 1, d4 = d4 + g3 + 1 >> 1, g3 = k4, k4 = p4 * i3 + y4 * r3 + 2048 >> 12, p4 = p4 * r3 - y4 * i3 + 2048 >> 12, y4 = k4, k4 = b4 * a2 + v4 * t3 + 2048 >> 12, b4 = b4 * t3 - v4 * a2 + 2048 >> 12, v4 = k4, x4[0 + C2] = u5 + y4, x4[56 + C2] = u5 - y4, x4[8 + C2] = d4 + v4, x4[48 + C2] = d4 - v4, x4[16 + C2] = g3 + b4, x4[40 + C2] = g3 - b4, x4[24 + C2] = m4 + p4, x4[32 + C2] = m4 - p4) : (k4 = s3 * h5[A4 + 0] + 8192 >> 14, x4[0 + C2] = k4, x4[8 + C2] = k4, x4[16 + C2] = k4, x4[24 + C2] = k4, x4[32 + C2] = k4, x4[40 + C2] = k4, x4[48 + C2] = k4, x4[56 + C2] = k4);
      }
      for (A4 = 0; A4 < 64; ++A4) {
        var I3 = 128 + (x4[A4] + 8 >> 4);
        l4[A4] = I3 < 0 ? 0 : I3 > 255 ? 255 : I3;
      }
    }
    for (var y3 = 0; y3 < g2; y3++) {
      var k3 = y3 << 3;
      for (l3 = 0; l3 < 8; l3++) u4.push(new Uint8Array(m3));
      for (var A3 = 0; A3 < d3; A3++) {
        v3(f3.blocks[y3][A3], b3, p3);
        var w3 = 0, x3 = A3 << 3;
        for (h4 = 0; h4 < 8; h4++) {
          var S3 = u4[k3 + h4];
          for (l3 = 0; l3 < 8; l3++) S3[x3 + l3] = b3[w3++];
        }
      }
    }
    return u4;
  }
  return f2.prototype = { load: function(e4) {
    var t4 = new XMLHttpRequest();
    t4.open("GET", e4, true), t4.responseType = "arraybuffer", t4.onload = function() {
      var e5 = new Uint8Array(t4.response || t4.mozResponseArrayBuffer);
      this.parse(e5), this.onload && this.onload();
    }.bind(this), t4.send(null);
  }, parse: function(t4) {
    var a3 = 0;
    t4.length;
    function r4() {
      var e4 = t4[a3] << 8 | t4[a3 + 1];
      return a3 += 2, e4;
    }
    function i4() {
      var e4 = r4(), i5 = t4.subarray(a3, a3 + e4 - 2);
      return a3 += i5.length, i5;
    }
    function n4(e4) {
      var t5, a4, r5 = 0, i5 = 0;
      for (a4 in e4.components) e4.components.hasOwnProperty(a4) && (r5 < (t5 = e4.components[a4]).h && (r5 = t5.h), i5 < t5.v && (i5 = t5.v));
      var n5 = Math.ceil(e4.samplesPerLine / 8 / r5), c5 = Math.ceil(e4.scanLines / 8 / i5);
      for (a4 in e4.components) if (e4.components.hasOwnProperty(a4)) {
        t5 = e4.components[a4];
        for (var s5 = Math.ceil(Math.ceil(e4.samplesPerLine / 8) * t5.h / r5), o5 = Math.ceil(Math.ceil(e4.scanLines / 8) * t5.v / i5), f4 = n5 * t5.h, l3 = c5 * t5.v, h4 = [], u4 = 0; u4 < l3; u4++) {
          for (var d4 = [], g3 = 0; g3 < f4; g3++) d4.push(new Int32Array(64));
          h4.push(d4);
        }
        t5.blocksPerLine = s5, t5.blocksPerColumn = o5, t5.blocks = h4;
      }
      e4.maxH = r5, e4.maxV = i5, e4.mcusPerLine = n5, e4.mcusPerColumn = c5;
    }
    var c4, s4, o4 = null, f3 = null, d3 = [], g2 = [], m3 = [], p3 = [], b3 = r4();
    if (65496 != b3) throw "SOI not found";
    for (b3 = r4(); 65497 != b3; ) {
      var v3;
      switch (b3) {
        case 65504:
        case 65505:
        case 65506:
        case 65507:
        case 65508:
        case 65509:
        case 65510:
        case 65511:
        case 65512:
        case 65513:
        case 65514:
        case 65515:
        case 65516:
        case 65517:
        case 65518:
        case 65519:
        case 65534:
          var y3 = i4();
          65504 === b3 && 74 === y3[0] && 70 === y3[1] && 73 === y3[2] && 70 === y3[3] && 0 === y3[4] && (o4 = { version: { major: y3[5], minor: y3[6] }, densityUnits: y3[7], xDensity: y3[8] << 8 | y3[9], yDensity: y3[10] << 8 | y3[11], thumbWidth: y3[12], thumbHeight: y3[13], thumbData: y3.subarray(14, 14 + 3 * y3[12] * y3[13]) }), 65518 === b3 && 65 === y3[0] && 100 === y3[1] && 111 === y3[2] && 98 === y3[3] && 101 === y3[4] && 0 === y3[5] && (f3 = { version: y3[6], flags0: y3[7] << 8 | y3[8], flags1: y3[9] << 8 | y3[10], transformCode: y3[11] });
          break;
        case 65499:
          for (var k3 = r4() + a3 - 2; a3 < k3; ) {
            var A3 = t4[a3++], w3 = new Int32Array(64);
            if (A3 >> 4) {
              if (A3 >> 4 != 1) throw "DQT: invalid table spec";
              for (v3 = 0; v3 < 64; v3++) {
                w3[e3[v3]] = r4();
              }
            } else for (v3 = 0; v3 < 64; v3++) {
              w3[e3[v3]] = t4[a3++];
            }
            d3[15 & A3] = w3;
          }
          break;
        case 65472:
        case 65474:
          r4(), (c4 = {}).progressive = 65474 === b3, c4.precision = t4[a3++], c4.scanLines = r4(), c4.samplesPerLine = r4(), c4.components = {}, c4.componentsOrder = [];
          var x3, S3 = t4[a3++];
          for (U2 = 0; U2 < S3; U2++) {
            x3 = t4[a3];
            var C2 = t4[a3 + 1] >> 4, I3 = 15 & t4[a3 + 1], B3 = t4[a3 + 2];
            c4.componentsOrder.push(x3), c4.components[x3] = { h: C2, v: I3, quantizationTable: d3[B3] }, a3 += 3;
          }
          n4(c4), g2.push(c4);
          break;
        case 65476:
          var T3 = r4();
          for (U2 = 2; U2 < T3; ) {
            var L2 = t4[a3++], F2 = new Uint8Array(16), P3 = 0;
            for (v3 = 0; v3 < 16; v3++, a3++) P3 += F2[v3] = t4[a3];
            var R2 = new Uint8Array(P3);
            for (v3 = 0; v3 < P3; v3++, a3++) R2[v3] = t4[a3];
            U2 += 17 + P3, (L2 >> 4 ? m3 : p3)[15 & L2] = l2(F2, R2);
          }
          break;
        case 65501:
          r4(), s4 = r4();
          break;
        case 65498:
          r4();
          var O2 = t4[a3++], M2 = [];
          for (U2 = 0; U2 < O2; U2++) {
            z4 = c4.components[t4[a3++]];
            var D2 = t4[a3++];
            z4.huffmanTableDC = p3[D2 >> 4], z4.huffmanTableAC = m3[15 & D2], M2.push(z4);
          }
          var q2 = t4[a3++], E3 = t4[a3++], N2 = t4[a3++], j3 = h3(t4, a3, c4, M2, s4, q2, E3, N2 >> 4, 15 & N2);
          a3 += j3;
          break;
        default:
          if (255 == t4[a3 - 3] && t4[a3 - 2] >= 192 && t4[a3 - 2] <= 254) {
            a3 -= 3;
            break;
          }
          throw "unknown JPEG marker " + b3.toString(16);
      }
      b3 = r4();
    }
    if (1 != g2.length) throw "only single frame JPEGs supported";
    this.width = c4.samplesPerLine, this.height = c4.scanLines, this.jfif = o4, this.adobe = f3, this.components = [];
    for (var U2 = 0; U2 < c4.componentsOrder.length; U2++) {
      var z4 = c4.components[c4.componentsOrder[U2]];
      this.components.push({ lines: u3(0, z4), scaleX: z4.h / c4.maxH, scaleY: z4.v / c4.maxV });
    }
  }, getData: function(e4, t4) {
    function a3(e5) {
      return e5 < 0 ? 0 : e5 > 255 ? 255 : e5;
    }
    var r4, i4, n4, c4, s4, o4, f3, l3, h4, u4, d3, g2, m3, p3, b3, v3, y3, k3, A3, w3, x3, S3 = this.width / e4, C2 = this.height / t4, I3 = 0, B3 = e4 * t4 * this.components.length, T3 = new Uint8Array(B3);
    switch (this.components.length) {
      case 1:
        for (r4 = this.components[0], u4 = 0; u4 < t4; u4++) for (s4 = r4.lines[0 | u4 * r4.scaleY * C2], h4 = 0; h4 < e4; h4++) d3 = s4[0 | h4 * r4.scaleX * S3], T3[I3++] = d3;
        break;
      case 3:
        for (x3 = true, this.adobe && this.adobe.transformCode ? x3 = true : void 0 !== this.colorTransform && (x3 = !!this.colorTransform), r4 = this.components[0], i4 = this.components[1], n4 = this.components[2], u4 = 0; u4 < t4; u4++) for (s4 = r4.lines[0 | u4 * r4.scaleY * C2], o4 = i4.lines[0 | u4 * i4.scaleY * C2], f3 = n4.lines[0 | u4 * n4.scaleY * C2], h4 = 0; h4 < e4; h4++) x3 ? (d3 = s4[0 | h4 * r4.scaleX * S3], g2 = o4[0 | h4 * i4.scaleX * S3], k3 = a3(d3 + 1.402 * ((m3 = f3[0 | h4 * n4.scaleX * S3]) - 128)), A3 = a3(d3 - 0.3441363 * (g2 - 128) - 0.71413636 * (m3 - 128)), w3 = a3(d3 + 1.772 * (g2 - 128))) : (k3 = s4[0 | h4 * r4.scaleX * S3], A3 = o4[0 | h4 * i4.scaleX * S3], w3 = f3[0 | h4 * n4.scaleX * S3]), T3[I3++] = k3, T3[I3++] = A3, T3[I3++] = w3;
        break;
      case 4:
        if (!this.adobe) throw "Unsupported color mode (4 components)";
        for (x3 = false, this.adobe && this.adobe.transformCode ? x3 = true : void 0 !== this.colorTransform && (x3 = !!this.colorTransform), r4 = this.components[0], i4 = this.components[1], n4 = this.components[2], c4 = this.components[3], u4 = 0; u4 < t4; u4++) for (s4 = r4.lines[0 | u4 * r4.scaleY * C2], o4 = i4.lines[0 | u4 * i4.scaleY * C2], f3 = n4.lines[0 | u4 * n4.scaleY * C2], l3 = c4.lines[0 | u4 * c4.scaleY * C2], h4 = 0; h4 < e4; h4++) x3 ? (d3 = s4[0 | h4 * r4.scaleX * S3], g2 = o4[0 | h4 * i4.scaleX * S3], m3 = f3[0 | h4 * n4.scaleX * S3], p3 = l3[0 | h4 * c4.scaleX * S3], b3 = 255 - a3(d3 + 1.402 * (m3 - 128)), v3 = 255 - a3(d3 - 0.3441363 * (g2 - 128) - 0.71413636 * (m3 - 128)), y3 = 255 - a3(d3 + 1.772 * (g2 - 128))) : (b3 = s4[0 | h4 * r4.scaleX * S3], v3 = o4[0 | h4 * i4.scaleX * S3], y3 = f3[0 | h4 * n4.scaleX * S3], p3 = l3[0 | h4 * c4.scaleX * S3]), T3[I3++] = b3, T3[I3++] = v3, T3[I3++] = y3, T3[I3++] = p3;
        break;
      default:
        throw "Unsupported color mode";
    }
    return T3;
  }, copyToImageData: function(e4) {
    var t4, a3, r4, i4, n4, c4, s4, o4, f3, l3 = e4.width, h4 = e4.height, u4 = e4.data, d3 = this.getData(l3, h4), g2 = 0, m3 = 0;
    switch (this.components.length) {
      case 1:
        for (a3 = 0; a3 < h4; a3++) for (t4 = 0; t4 < l3; t4++) r4 = d3[g2++], u4[m3++] = r4, u4[m3++] = r4, u4[m3++] = r4, u4[m3++] = 255;
        break;
      case 3:
        for (a3 = 0; a3 < h4; a3++) for (t4 = 0; t4 < l3; t4++) s4 = d3[g2++], o4 = d3[g2++], f3 = d3[g2++], u4[m3++] = s4, u4[m3++] = o4, u4[m3++] = f3, u4[m3++] = 255;
        break;
      case 4:
        for (a3 = 0; a3 < h4; a3++) for (t4 = 0; t4 < l3; t4++) n4 = d3[g2++], c4 = d3[g2++], r4 = d3[g2++], i4 = d3[g2++], s4 = 255 - clampTo8bit(n4 * (1 - i4 / 255) + i4), o4 = 255 - clampTo8bit(c4 * (1 - i4 / 255) + i4), f3 = 255 - clampTo8bit(r4 * (1 - i4 / 255) + i4), u4[m3++] = s4, u4[m3++] = o4, u4[m3++] = f3, u4[m3++] = 255;
        break;
      default:
        throw "Unsupported color mode";
    }
  } }, f2;
}());
var Nr = function() {
  function e3(e4, t3, a2) {
    this.bytes = new Uint8Array(e4), this.start = 0, this.pos = 0, this.end = e4, this.chunkSize = t3, this.loadedChunks = [], this.numChunksLoaded = 0, this.numChunks = Math.ceil(e4 / t3), this.manager = a2, this.initialDataLength = 0;
  }
  return e3.prototype = { getMissingChunks: function() {
    for (var e4 = [], t3 = 0, a2 = this.numChunks; t3 < a2; ++t3) t3 in this.loadedChunks || e4.push(t3);
    return e4;
  }, getBaseStreams: function() {
    return [this];
  }, allChunksLoaded: function() {
    return this.numChunksLoaded === this.numChunks;
  }, onReceiveData: function(e4, t3) {
    var a2 = e4 + t3.byteLength;
    De(e4 % this.chunkSize == 0, "Bad begin offset: " + e4);
    var r3 = this.bytes.length;
    De(a2 % this.chunkSize == 0 || a2 === r3, "Bad end offset: " + a2), this.bytes.set(new Uint8Array(t3), e4);
    var i3 = this.chunkSize, n3 = Math.floor(e4 / i3), c3 = Math.floor((a2 - 1) / i3) + 1;
    for (t3 = n3; t3 < c3; ++t3) t3 in this.loadedChunks || (this.loadedChunks[t3] = true, ++this.numChunksLoaded);
  }, onReceiveInitialData: function(e4) {
    this.bytes.set(e4), this.initialDataLength = e4.length;
    for (var t3 = this.end === e4.length ? this.numChunks : Math.floor(e4.length / this.chunkSize), a2 = 0; a2 < t3; a2++) this.loadedChunks[a2] = true, ++this.numChunksLoaded;
  }, ensureRange: function(e4, t3) {
    if (!(e4 >= t3 || t3 <= this.initialDataLength)) {
      for (var a2 = this.chunkSize, r3 = Math.floor(e4 / a2), i3 = Math.floor((t3 - 1) / a2) + 1, n3 = r3; n3 < i3; ++n3) if (!(n3 in this.loadedChunks)) throw new Ve(e4, t3);
    }
  }, nextEmptyChunk: function(e4) {
    for (var t3 = e4, a2 = this.numChunks; t3 < a2; ++t3) if (!(t3 in this.loadedChunks)) return t3;
    for (t3 = 0; t3 < e4; ++t3) if (!(t3 in this.loadedChunks)) return t3;
    return null;
  }, hasChunk: function(e4) {
    return e4 in this.loadedChunks;
  }, get length() {
    return this.end - this.start;
  }, getByte: function() {
    var e4 = this.pos;
    return e4 >= this.end ? -1 : (this.ensureRange(e4, e4 + 1), this.bytes[this.pos++]);
  }, getBytes: function(e4) {
    var t3 = this.bytes, a2 = this.pos, r3 = this.end;
    if (!e4) return this.ensureRange(a2, r3), t3.subarray(a2, r3);
    var i3 = a2 + e4;
    return i3 > r3 && (i3 = r3), this.ensureRange(a2, i3), this.pos = i3, t3.subarray(a2, i3);
  }, peekBytes: function(e4) {
    var t3 = this.getBytes(e4);
    return this.pos -= t3.length, t3;
  }, getByteRange: function(e4, t3) {
    return this.ensureRange(e4, t3), this.bytes.subarray(e4, t3);
  }, skip: function(e4) {
    e4 || (e4 = 1), this.pos += e4;
  }, reset: function() {
    this.pos = this.start;
  }, moveStart: function() {
    this.start = this.pos;
  }, makeSubStream: function(e4, t3, a2) {
    function r3() {
    }
    r3.prototype = Object.create(this), r3.prototype.getMissingChunks = function() {
      for (var e5 = this.chunkSize, t4 = Math.floor(this.start / e5), a3 = Math.floor((this.end - 1) / e5) + 1, r4 = [], i4 = t4; i4 < a3; ++i4) i4 in this.loadedChunks || r4.push(i4);
      return r4;
    };
    var i3 = new r3();
    return i3.pos = i3.start = e4, i3.end = e4 + t3 || this.end, i3.dict = a2, i3;
  }, isStream: true }, e3;
}();
var jr = function() {
  function e3(e4, t3, a2, r3) {
    this.stream = new Nr(e4, t3, this), this.length = e4, this.chunkSize = t3, this.url = a2, this.disableAutoFetch = r3.disableAutoFetch;
    var i3 = this.msgHandler = r3.msgHandler;
    if (r3.chunkedViewerLoading) i3.on("OnDataRange", this.onReceiveData.bind(this)), i3.on("OnDataProgress", this.onProgress.bind(this)), this.sendRequest = function(e5, t4) {
      i3.send("RequestDataRange", { begin: e5, end: t4 });
    };
    else {
      this.networkManager = new NetworkManager(this.url, { getXhr: function() {
        return new XMLHttpRequest();
      }, httpHeaders: r3.httpHeaders }), this.sendRequest = function(e5, t4) {
        this.networkManager.requestRange(e5, t4, { onDone: this.onReceiveData.bind(this), onProgress: this.onProgress.bind(this) });
      };
    }
    this.currRequestId = 0, this.chunksNeededByRequest = {}, this.requestsByChunk = {}, this.callbacksByRequest = {}, this.loadedStream = new gt(), r3.initialData && this.setInitialData(r3.initialData);
  }
  return e3.prototype = { setInitialData: function(e4) {
    this.stream.onReceiveInitialData(e4), this.stream.allChunksLoaded() ? this.loadedStream.resolve(this.stream) : this.msgHandler && this.msgHandler.send("DocProgress", { loaded: e4.length, total: this.length });
  }, onLoadedStream: function() {
    return this.loadedStream;
  }, requestAllChunks: function() {
    var e4 = this.stream.getMissingChunks();
    return this.requestChunks(e4), this.loadedStream;
  }, requestChunks: function(e4, t3) {
    var a2, r3 = this.currRequestId++;
    this.chunksNeededByRequest[r3] = a2 = {};
    for (var i3 = 0, n3 = e4.length; i3 < n3; i3++) this.stream.hasChunk(e4[i3]) || (a2[e4[i3]] = true);
    if (tt(a2)) t3 && t3();
    else {
      this.callbacksByRequest[r3] = t3;
      var c3 = [];
      for (var s3 in a2) (s3 |= 0) in this.requestsByChunk || (this.requestsByChunk[s3] = [], c3.push(s3)), this.requestsByChunk[s3].push(r3);
      if (c3.length) {
        var o3 = this.groupChunks(c3);
        for (i3 = 0; i3 < o3.length; ++i3) {
          var f2 = o3[i3], l2 = f2.beginChunk * this.chunkSize, h3 = Math.min(f2.endChunk * this.chunkSize, this.length);
          this.sendRequest(l2, h3);
        }
      }
    }
  }, getStream: function() {
    return this.stream;
  }, requestRange: function(e4, t3, a2) {
    t3 = Math.min(t3, this.length);
    for (var r3 = this.getBeginChunk(e4), i3 = this.getEndChunk(t3), n3 = [], c3 = r3; c3 < i3; ++c3) n3.push(c3);
    this.requestChunks(n3, a2);
  }, requestRanges: function(e4, t3) {
    e4 = e4 || [];
    for (var a2 = [], r3 = 0; r3 < e4.length; r3++) for (var i3 = this.getBeginChunk(e4[r3].begin), n3 = this.getEndChunk(e4[r3].end), c3 = i3; c3 < n3; ++c3) a2.indexOf(c3) < 0 && a2.push(c3);
    a2.sort(function(e5, t4) {
      return e5 - t4;
    }), this.requestChunks(a2, t3);
  }, groupChunks: function(e4) {
    for (var t3 = [], a2 = -1, r3 = -1, i3 = 0; i3 < e4.length; ++i3) {
      var n3 = e4[i3];
      a2 < 0 && (a2 = n3), r3 >= 0 && r3 + 1 !== n3 && (t3.push({ beginChunk: a2, endChunk: r3 + 1 }), a2 = n3), i3 + 1 === e4.length && t3.push({ beginChunk: a2, endChunk: n3 + 1 }), r3 = n3;
    }
    return t3;
  }, onProgress: function(e4) {
    var t3 = this.stream.numChunksLoaded * this.chunkSize + e4.loaded;
    this.msgHandler.send("DocProgress", { loaded: t3, total: this.length });
  }, onReceiveData: function(e4) {
    var t3 = e4.chunk, a2 = e4.begin, r3 = a2 + t3.byteLength, i3 = this.getBeginChunk(a2), n3 = this.getEndChunk(r3);
    this.stream.onReceiveData(a2, t3), this.stream.allChunksLoaded() && this.loadedStream.resolve(this.stream);
    var c3 = [];
    for (t3 = i3; t3 < n3; ++t3) {
      var s3 = this.requestsByChunk[t3] || [];
      delete this.requestsByChunk[t3];
      for (var o3 = 0; o3 < s3.length; ++o3) {
        var f2 = s3[o3], l2 = this.chunksNeededByRequest[f2];
        t3 in l2 && delete l2[t3], tt(l2) && c3.push(f2);
      }
    }
    if (!this.disableAutoFetch && tt(this.requestsByChunk)) {
      var h3;
      if (1 === this.stream.numChunksLoaded) {
        var u3 = this.stream.numChunks - 1;
        this.stream.hasChunk(u3) || (h3 = u3);
      } else h3 = this.stream.nextEmptyChunk(n3);
      rt(h3) && this.requestChunks([h3]);
    }
    for (o3 = 0; o3 < c3.length; ++o3) {
      f2 = c3[o3];
      var d3 = this.callbacksByRequest[f2];
      delete this.callbacksByRequest[f2], d3 && d3();
    }
    this.msgHandler.send("DocProgress", { loaded: this.stream.numChunksLoaded * this.chunkSize, total: this.length });
  }, getBeginChunk: function(e4) {
    return Math.floor(e4 / this.chunkSize);
  }, getEndChunk: function(e4) {
    return e4 % this.chunkSize == 0 ? e4 / this.chunkSize : Math.floor((e4 - 1) / this.chunkSize) + 1;
  } }, e3;
}();
var Ur = function() {
  function e3() {
    throw new Error("Cannot initialize BaseManagerManager");
  }
  return e3.prototype = { onLoadedStream: function() {
    throw new We();
  }, ensureModel: function(e4, t3) {
    return this.ensure(this.pdfModel, e4, t3);
  }, ensureXRef: function(e4, t3) {
    return this.ensure(this.pdfModel.xref, e4, t3);
  }, ensureCatalog: function(e4, t3) {
    return this.ensure(this.pdfModel.catalog, e4, t3);
  }, getPage: function(e4) {
    return this.pdfModel.getPage(e4);
  }, cleanup: function() {
    return this.pdfModel.cleanup();
  }, ensure: function(e4, t3, a2) {
    return new We();
  }, requestRange: function(e4, t3) {
    return new We();
  }, requestLoadedStream: function() {
    return new We();
  }, updatePassword: function(e4) {
    this.pdfModel.xref.password = this.password = e4, this.passwordChangedPromise && this.passwordChangedPromise.resolve();
  }, terminate: function() {
    return new We();
  } }, e3;
}();
var zr = function() {
  function e3(e4, t3) {
    var a2 = new pr(e4);
    this.pdfModel = new Yt(this, a2, t3), this.loadedStream = new gt(), this.loadedStream.resolve(a2);
  }
  return e3.prototype = Object.create(Ur.prototype), e3.prototype.constructor = e3, e3.prototype.ensure = function(e4, t3, a2) {
    var r3 = new gt();
    try {
      var i3, n3 = e4[t3];
      i3 = "function" == typeof n3 ? n3.apply(e4, a2) : n3, r3.resolve(i3);
    } catch (e5) {
      console.log(e5.stack), r3.reject(e5);
    }
    return r3;
  }, e3.prototype.requestRange = function(e4, t3) {
    var a2 = new gt();
    return a2.resolve(), a2;
  }, e3.prototype.requestLoadedStream = function() {
  }, e3.prototype.onLoadedStream = function() {
    return this.loadedStream;
  }, e3.prototype.terminate = function() {
  }, e3;
}();
var Hr = function() {
  function e3(e4, t3) {
    this.msgHandler = t3;
    var a2 = { msgHandler: t3, httpHeaders: e4.httpHeaders, chunkedViewerLoading: e4.chunkedViewerLoading, disableAutoFetch: e4.disableAutoFetch, initialData: e4.initialData };
    this.streamManager = new jr(e4.length, 65536, e4.url, a2), this.pdfModel = new Yt(this, this.streamManager.getStream(), e4.password);
  }
  return e3.prototype = Object.create(Ur.prototype), e3.prototype.constructor = e3, e3.prototype.ensure = function(e4, t3, a2) {
    var r3 = new gt();
    return this.ensureHelper(r3, e4, t3, a2), r3;
  }, e3.prototype.ensureHelper = function(e4, t3, a2, r3) {
    try {
      var i3, n3 = t3[a2];
      i3 = "function" == typeof n3 ? n3.apply(t3, r3) : n3, e4.resolve(i3);
    } catch (i4) {
      if (!(i4 instanceof Ve)) return console.log(i4.stack), void e4.reject(i4);
      this.streamManager.requestRange(i4.begin, i4.end, function() {
        this.ensureHelper(e4, t3, a2, r3);
      }.bind(this));
    }
  }, e3.prototype.requestRange = function(e4, t3) {
    var a2 = new gt();
    return this.streamManager.requestRange(e4, t3, function() {
      a2.resolve();
    }), a2;
  }, e3.prototype.requestLoadedStream = function() {
    this.streamManager.requestAllChunks();
  }, e3.prototype.onLoadedStream = function() {
    return this.streamManager.onLoadedStream();
  }, e3.prototype.terminate = function() {
    this.streamManager.networkManager.abortAllRequests();
  }, e3;
}();
var Gr = { "Adobe-CNS1-0": [[], [0, 14335]], "Adobe-CNS1-1": [[], [0, 17407]], "Adobe-CNS1-2": [[], [0, 17663]], "Adobe-CNS1-3": [[], [0, 18943]], "Adobe-CNS1-4": [[], [0, 19199]], "Adobe-CNS1-5": [[], [0, 19199]], "Adobe-CNS1-6": [[], [0, 19199]], "Adobe-CNS1-UCS2": [[], [0, 65535]], "B5-H": [[0, 128], [41280, 65278]], "B5-V": [[0, 128], [41280, 65278]], "B5pc-H": [[0, 128, 253, 255], [41280, 64766]], "B5pc-V": [[0, 128, 253, 255], [41280, 64766]], "CNS-EUC-H": [[0, 128], [41377, 65278], [], [2392957345, 2392981246, 2393022881, 2393046782, 2393088417, 2393112318]], "CNS-EUC-V": [[0, 128], [41377, 65278], [], [2392957345, 2392981246, 2393022881, 2393046782, 2393088417, 2393112318]], "CNS1-H": [[], [8481, 32382]], "CNS1-V": [[], [8481, 32382]], "CNS2-H": [[], [8481, 32382]], "CNS2-V": [[], [8481, 32382]], "ETen-B5-H": [[0, 128], [41280, 65278]], "ETen-B5-V": [[0, 128], [41280, 65278]], "ETenms-B5-H": [[0, 128], [41280, 65278]], "ETenms-B5-V": [[0, 128], [41280, 65278]], "ETHK-B5-H": [[0, 128], [34624, 65278]], "ETHK-B5-V": [[0, 128], [34624, 65278]], "HKdla-B5-H": [[0, 128], [41280, 65278]], "HKdla-B5-V": [[0, 128], [41280, 65278]], "HKdlb-B5-H": [[0, 128], [36416, 65278]], "HKdlb-B5-V": [[0, 128], [36416, 65278]], "HKgccs-B5-H": [[0, 128], [35392, 65278]], "HKgccs-B5-V": [[0, 128], [35392, 65278]], "HKm314-B5-H": [[0, 128], [41280, 65278]], "HKm314-B5-V": [[0, 128], [41280, 65278]], "HKm471-B5-H": [[0, 128], [41280, 65278]], "HKm471-B5-V": [[0, 128], [41280, 65278]], "HKscs-B5-H": [[0, 128], [34624, 65278]], "HKscs-B5-V": [[0, 128], [34624, 65278]], "UniCNS-UCS2-H": [[], [0, 55295, 57344, 65535]], "UniCNS-UCS2-V": [[], [0, 55295, 57344, 65535]], "UniCNS-UTF16-H": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]], "UniCNS-UTF16-V": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]], "Adobe-GB1-0": [[], [0, 7935]], "Adobe-GB1-1": [[], [0, 9983]], "Adobe-GB1-2": [[], [0, 22271]], "Adobe-GB1-3": [[], [0, 22527]], "Adobe-GB1-4": [[], [0, 29183]], "Adobe-GB1-5": [[], [0, 30463]], "Adobe-GB1-UCS2": [[], [0, 65535]], "GB-EUC-H": [[0, 128], [41377, 65278]], "GB-EUC-V": [[0, 128], [41377, 65278]], "GB-H": [[], [8481, 32382]], "GB-V": [[], [8481, 32382]], "GBK-EUC-H": [[0, 128], [33088, 65278]], "GBK-EUC-V": [[0, 128], [33088, 65278]], "GBK2K-H": [[0, 127], [33088, 65278], [], [2167439664, 4265213497]], "GBK2K-V": [[0, 127], [33088, 65278], [], [2167439664, 4265213497]], "GBKp-EUC-H": [[0, 128], [33088, 65278]], "GBKp-EUC-V": [[0, 128], [33088, 65278]], "GBpc-EUC-H": [[0, 128, 253, 255], [41377, 64766]], "GBpc-EUC-V": [[0, 128, 253, 255], [41377, 64766]], "GBT-EUC-H": [[0, 128], [41377, 65278]], "GBT-EUC-V": [[0, 128], [41377, 65278]], "GBT-H": [[], [8481, 32382]], "GBT-V": [[], [8481, 32382]], "GBTpc-EUC-H": [[0, 128, 253, 255], [41377, 64766]], "GBTpc-EUC-V": [[0, 128, 253, 255], [41377, 64766]], "UniGB-UCS2-H": [[], [0, 55295, 57344, 65535]], "UniGB-UCS2-V": [[], [0, 55295, 57344, 65535]], "UniGB-UTF16-H": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]], "UniGB-UTF16-V": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]], "78-EUC-H": [[0, 128], [36512, 36575, 41377, 65278]], "78-EUC-V": [[0, 128], [36512, 36575, 41377, 65278]], "78-H": [[], [8481, 32382]], "78-RKSJ-H": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "78-RKSJ-V": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "78-V": [[], [8481, 32382]], "78ms-RKSJ-H": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "78ms-RKSJ-V": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "83pv-RKSJ-H": [[0, 128, 160, 223, 253, 255], [33088, 40956, 57408, 64764]], "90ms-RKSJ-H": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "90ms-RKSJ-V": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "90msp-RKSJ-H": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "90msp-RKSJ-V": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "90pv-RKSJ-H": [[0, 128, 160, 223, 253, 255], [33088, 40956, 57408, 64764]], "90pv-RKSJ-V": [[0, 128, 160, 223, 253, 255], [33088, 40956, 57408, 64764]], "Add-H": [[], [8481, 32382]], "Add-RKSJ-H": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "Add-RKSJ-V": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "Add-V": [[], [8481, 32382]], "Adobe-Japan1-0": [[], [0, 8447]], "Adobe-Japan1-1": [[], [0, 8447]], "Adobe-Japan1-2": [[], [0, 8959]], "Adobe-Japan1-3": [[], [0, 9471]], "Adobe-Japan1-4": [[], [0, 15615]], "Adobe-Japan1-5": [[], [0, 20479]], "Adobe-Japan1-6": [[], [0, 23295]], "Adobe-Japan1-UCS2": [[], [0, 65535]], "Adobe-Japan2-0": [[], [0, 6143]], "EUC-H": [[0, 128], [36512, 36575, 41377, 65278]], "EUC-V": [[0, 128], [36512, 36575, 41377, 65278]], "Ext-H": [[], [8481, 32382]], "Ext-RKSJ-H": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "Ext-RKSJ-V": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "Ext-V": [[], [8481, 32382]], H: [[], [8481, 32382]], Hankaku: [[0, 255], []], Hiragana: [[0, 255], []], "Hojo-EUC-H": [[], [], [9413025, 9436926], []], "Hojo-EUC-V": [[], [], [9413025, 9436926], []], "Hojo-H": [[], [8481, 32382]], "Hojo-V": [[], [8481, 32382]], Katakana: [[0, 255], []], "NWP-H": [[], [8481, 32382]], "NWP-V": [[], [8481, 32382]], "RKSJ-H": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], "RKSJ-V": [[0, 128, 160, 223], [33088, 40956, 57408, 64764]], Roman: [[0, 255], []], "UniHojo-UCS2-H": [[], [0, 55295, 57344, 65535]], "UniHojo-UCS2-V": [[], [0, 55295, 57344, 65535]], "UniHojo-UTF16-H": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]], "UniHojo-UTF16-V": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]], "UniJIS-UCS2-H": [[], [0, 55295, 57344, 65535]], "UniJIS-UCS2-HW-H": [[], [0, 55295, 57344, 65535]], "UniJIS-UCS2-HW-V": [[], [0, 55295, 57344, 65535]], "UniJIS-UCS2-V": [[], [0, 55295, 57344, 65535]], "UniJIS-UTF16-H": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]], "UniJIS-UTF16-V": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]], "UniJISPro-UCS2-HW-V": [[], [0, 55295, 57344, 65535]], "UniJISPro-UCS2-V": [[], [0, 55295, 57344, 65535]], V: [[], [8481, 32382]], "WP-Symbol": [[0, 255], []], "Adobe-Korea1-0": [[], [0, 9471]], "Adobe-Korea1-1": [[], [0, 18175]], "Adobe-Korea1-2": [[], [0, 18431]], "Adobe-Korea1-UCS2": [[], [0, 65535]], "KSC-EUC-H": [[0, 128], [41377, 65278]], "KSC-EUC-V": [[0, 128], [41377, 65278]], "KSC-H": [[], [8481, 32382]], "KSC-Johab-H": [[0, 128], [33857, 54270, 55345, 57086, 57393, 63998]], "KSC-Johab-V": [[0, 128], [33857, 54270, 55345, 57086, 57393, 63998]], "KSC-V": [[], [8481, 32382]], "KSCms-UHC-H": [[0, 128], [33089, 65278]], "KSCms-UHC-HW-H": [[0, 128], [33089, 65278]], "KSCms-UHC-HW-V": [[0, 128], [33089, 65278]], "KSCms-UHC-V": [[0, 128], [33089, 65278]], "KSCpc-EUC-H": [[0, 132, 254, 255], [41281, 65022]], "KSCpc-EUC-V": [[0, 132, 254, 255], [41281, 65022]], "UniKS-UCS2-H": [[], [0, 55295, 57344, 65535]], "UniKS-UCS2-V": [[], [0, 55295, 57344, 65535]], "UniKS-UTF16-H": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]], "UniKS-UTF16-V": [[], [0, 55295, 57344, 65535], [], [3623934976, 3690979327]] };
var _r = function() {
  function e3() {
    this.codespaceRanges = [[], [], [], []], this.map = [], this.vertical = false;
  }
  return e3.prototype = { addCodespaceRange: function(e4, t3, a2) {
    this.codespaceRanges[e4 - 1].push(t3, a2);
  }, mapRange: function(e4, t3, a2) {
    for (var r3 = a2.length - 1; e4 <= t3; ) this.map[e4] = a2, a2 = a2.substring(0, r3) + String.fromCharCode(a2.charCodeAt(r3) + 1), ++e4;
  }, mapRangeToArray: function(e4, t3, a2) {
    for (var r3 = 0; e4 <= t3; ) this.map[e4] = a2[r3++], ++e4;
  }, mapOne: function(e4, t3) {
    this.map[e4] = t3;
  }, lookup: function(e4) {
    return this.map[e4];
  }, readCharCode: function(e4, t3) {
    for (var a2 = 0, r3 = this.codespaceRanges, i3 = this.codespaceRanges.length, n3 = 0; n3 < i3; n3++) {
      a2 = (a2 << 8 | e4.charCodeAt(t3 + n3)) >>> 0;
      for (var c3 = r3[n3], s3 = 0, o3 = c3.length; s3 < o3; ) {
        var f2 = c3[s3++], l2 = c3[s3++];
        if (a2 >= f2 && a2 <= l2) return [a2, n3 + 1];
      }
    }
    return [0, 1];
  } }, e3;
}();
var Xr = function() {
  function e3(e4, t3) {
    _r.call(this), this.vertical = e4, this.addCodespaceRange(t3, 0, 65535), this.mapRange(0, 65535, "\0");
  }
  return Qe.inherit(e3, _r, {}), e3;
}();
var Wr = /* @__PURE__ */ function() {
  function e3(e4) {
    for (var t4 = 0, a3 = 0; a3 < e4.length; a3++) t4 = t4 << 8 | e4.charCodeAt(a3);
    return t4 >>> 0;
  }
  function t3(e4) {
    nt(e4) || Oe("Malformed CMap: expected string.");
  }
  function a2(e4) {
    rt(e4) || Oe("Malformed CMap: expected int.");
  }
  function r3(a3, r4) {
    for (; ; ) {
      var i4 = r4.getObj();
      if (ur(i4)) break;
      if (st(i4, "endbfchar")) return;
      t3(i4);
      var n4 = e3(i4);
      t3(i4 = r4.getObj());
      var c4 = i4;
      a3.mapOne(n4, c4);
    }
  }
  function i3(a3, r4) {
    for (; ; ) {
      var i4 = r4.getObj();
      if (ur(i4)) break;
      if (st(i4, "endbfrange")) return;
      t3(i4);
      var n4 = e3(i4);
      t3(i4 = r4.getObj());
      var c4 = e3(i4);
      if (rt(i4 = r4.getObj()) || nt(i4)) {
        var s4 = rt(i4) ? String.fromCharCode(i4) : i4;
        a3.mapRange(n4, c4, s4);
      } else {
        if (!st(i4, "[")) break;
        i4 = r4.getObj();
        for (var o3 = []; !st(i4, "]") && !ur(i4); ) o3.push(i4), i4 = r4.getObj();
        a3.mapRangeToArray(n4, c4, o3);
      }
    }
    Oe("Invalid bf range.");
  }
  function n3(r4, i4) {
    for (; ; ) {
      var n4 = i4.getObj();
      if (ur(n4)) break;
      if (st(n4, "endcidchar")) return;
      t3(n4);
      var c4 = e3(n4);
      a2(n4 = i4.getObj());
      var s4 = String.fromCharCode(n4);
      r4.mapOne(c4, s4);
    }
  }
  function c3(r4, i4) {
    for (; ; ) {
      var n4 = i4.getObj();
      if (ur(n4)) break;
      if (st(n4, "endcidrange")) return;
      t3(n4);
      var c4 = e3(n4);
      t3(n4 = i4.getObj());
      var s4 = e3(n4);
      a2(n4 = i4.getObj());
      var o3 = String.fromCharCode(n4);
      r4.mapRange(c4, s4, o3);
    }
  }
  function s3(t4, a3) {
    for (; ; ) {
      var r4 = a3.getObj();
      if (ur(r4)) break;
      if (st(r4, "endcodespacerange")) return;
      if (!nt(r4)) break;
      var i4 = e3(r4);
      if (!nt(r4 = a3.getObj())) break;
      var n4 = e3(r4);
      t4.addCodespaceRange(r4.length, i4, n4);
    }
    Oe("Invalid codespace range.");
  }
  return { create: function(e4) {
    if (ct(e4)) switch (e4.name) {
      case "Identity-H":
        return new Xr(false, 2);
      case "Identity-V":
        return new Xr(true, 2);
      default:
        return e4.name in Gr ? ((t4 = new _r()).codespaceRanges = Gr[e4.name], t4) : null;
    }
    else if (lt(e4)) {
      var t4 = new _r(), a3 = new gr(e4);
      try {
        !function(e5, t5) {
          e: for (; ; ) {
            var a4 = t5.getObj();
            if (ur(a4)) break;
            if (st(a4)) switch (a4.cmd) {
              case "endcMap":
                break e;
              case "usecMap":
                break;
              case "begincodespacerange":
                s3(e5, t5);
                break;
              case "beginbfchar":
                r3(e5, t5);
                break;
              case "begincidchar":
                n3(e5, t5);
                break;
              case "beginbfrange":
                i3(e5, t5);
                break;
              case "begincidrange":
                c3(e5, t5);
            }
          }
        }(t4, a3);
      } catch (e5) {
        Re("Invalid CMap data. " + e5);
      }
      return t4;
    }
    Oe("Encoding required.");
  } };
}();
var Vr = { "Adobe-Japan1": [[32, 160], { f: 12, c: 33 }, [45, 8209], { f: 46, c: 46 }, 165, { f: 2, c: 93 }, [95, 818], [96, 768], { f: 27, c: 97 }, 166, 125, [732, 771], [700, 8217], 92, [699, 8216], 124, [126, 8764], { f: 3, c: 161 }, 8260, 402, 0, 164, 8220, 171, { f: 2, c: 8249 }, { f: 2, c: 64257 }, [8210, 8211], 0, 0, [183, 8729], 0, 8226, 8218, 8222, 8221, 187, 0, 0, 191, { f: 2, c: 769 }, [175, 772], { f: 3, c: 774 }, 778, [184, 807], 779, 808, 780, [822, 8212], 198, 170, 321, 216, 338, 186, 230, 305, 322, 248, 339, 223, 173, 169, 172, 174, 0, 0, { f: 2, c: 178 }, 181, 185, { f: 3, c: 188 }, { f: 6, c: 192 }, { f: 16, c: 199 }, 0, { f: 6, c: 217 }, { f: 6, c: 224 }, { f: 16, c: 231 }, 0, { f: 7, c: 249 }, 352, 376, 381, [773, 8254], 353, 8482, 382, 0, 8194, { f: 59, c: 33 }, 165, { f: 31, c: 93 }, 65512, { f: 2, c: 125 }, 0, { f: 63, c: 65377 }, { s: 243 }, [8195, 12288], { f: 2, c: 12289 }, 65292, 65294, 12539, { f: 2, c: 65306 }, 65311, 65281, { f: 2, c: 12443 }, 180, 65344, 168, 65342, 65507, 65343, { f: 2, c: 12541 }, { f: 2, c: 12445 }, 12291, 20189, { f: 3, c: 12293 }, 12540, 8213, 8208, 65295, 65340, [12316, 65374], 8214, 65372, 8230, 8229, { s: 4 }, { f: 2, c: 65288 }, { f: 2, c: 12308 }, 65339, 65341, 65371, 65373, { f: 10, c: 12296 }, 65291, [8722, 65293], 177, 215, 247, 65309, 8800, 65308, 65310, { f: 2, c: 8806 }, 8734, 8756, 9794, 9792, 176, { f: 2, c: 8242 }, 8451, 65509, 65284, { f: 2, c: 65504 }, 65285, 65283, 65286, 65290, 65312, 167, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 9661, 9660, 8251, 12306, 8594, { f: 2, c: 8592 }, 8595, 12307, 8712, 8715, { f: 2, c: 8838 }, { f: 2, c: 8834 }, 8746, 8745, { f: 2, c: 8743 }, 65506, 8658, 8660, 8704, 8707, 8736, 8869, 8978, 8706, 8711, 8801, 8786, { f: 2, c: 8810 }, 8730, 8765, 8733, 8757, { f: 2, c: 8747 }, 8491, 8240, 9839, 9837, 9834, { f: 2, c: 8224 }, 182, 9711, { f: 10, c: 65296 }, { f: 26, c: 65313 }, { f: 26, c: 65345 }, { f: 83, c: 12353 }, { f: 86, c: 12449 }, { f: 17, c: 913 }, { f: 7, c: 931 }, { f: 17, c: 945 }, { f: 7, c: 963 }, { f: 6, c: 1040 }, 1025, { f: 32, c: 1046 }, 1105, { f: 26, c: 1078 }, 20124, 21782, 23043, 38463, 21696, 24859, 25384, 23030, 36898, 33909, 33564, 31312, 24746, 25569, 28197, 26093, 33894, 33446, 39925, 26771, 22311, 26017, 25201, 23451, 22992, 34427, 39156, 32098, 32190, 39822, 25110, 31903, 34999, 23433, 24245, 25353, 26263, 26696, 38343, 38797, 26447, 20197, 20234, 20301, 20381, 20553, 22258, 22839, 22996, 23041, 23561, 24799, 24847, 24944, 26131, 26885, 28858, 30031, 30064, 31227, 32173, 32239, 32963, 33806, [12176, 34915], 35586, 36949, 36986, 21307, 20117, 20133, 22495, 32946, 37057, 30959, [12032, 19968], 22769, 28322, 36920, 31282, 33576, 33419, 39983, 20801, 21360, 21693, 21729, 22240, 23035, 24341, 39154, 28139, 32996, 34093, 38498, 38512, 38560, 38907, 21515, 21491, 23431, 28879, [12155, 32701], 36802, [12204, 38632], 21359, 40284, 31418, 19985, 30867, [12165, 33276], 28198, 22040, 21764, 27421, 34074, 39995, 23013, 21417, 28006, [12128, 29916], 38287, 22082, 20113, 36939, 38642, 33615, 39180, 21473, 21942, 23344, 24433, 26144, 26355, 26628, 27704, 27891, 27945, 29787, 30408, 31310, 38964, 33521, 34907, 35424, 37613, 28082, 30123, 30410, 39365, 24742, 35585, 36234, 38322, 27022, 21421, 20870, 22290, 22576, 22852, 23476, 24310, 24616, 25513, 25588, 27839, 28436, 28814, 28948, 29017, 29141, 29503, 32257, 33398, 33489, 34199, 36960, 37467, 40219, 22633, 26044, 27738, 29989, 20985, 22830, 22885, 24448, 24540, 25276, 26106, 27178, 27431, 27572, 29579, 32705, 35158, 40236, 40206, [12009, 40644], 23713, 27798, 33659, 20740, 23627, 25014, 33222, 26742, 29281, [12036, 20057], 20474, 21368, 24681, 28201, 31311, [12211, 38899], 19979, 21270, 20206, 20309, 20285, 20385, 20339, 21152, 21487, 22025, 22799, 23233, 23478, 23521, 31185, 26247, 26524, 26550, 27468, 27827, [12117, 28779], 29634, 31117, [12146, 31166], 31292, 31623, 33457, 33499, 33540, 33655, 33775, 33747, 34662, 35506, 22057, 36008, 36838, 36942, 38686, 34442, 20420, 23784, 25105, [12123, 29273], 30011, 33253, 33469, 34558, 36032, 38597, 39187, 39381, 20171, 20250, 35299, 22238, 22602, 22730, 24315, 24555, 24618, 24724, 24674, 25040, 25106, 25296, 25913, 39745, 26214, 26800, 28023, 28784, 30028, 30342, 32117, 33445, 34809, 38283, 38542, [12185, 35997], 20977, 21182, 22806, 21683, 23475, 23830, 24936, 27010, 28079, 30861, 33995, 34903, 35442, 37799, 39608, 28012, 39336, 34521, 22435, 26623, 34510, 37390, 21123, 22151, 21508, 24275, 25313, 25785, 26684, 26680, 27579, 29554, 30906, 31339, 35226, [12179, 35282], 36203, 36611, 37101, 38307, 38548, [12208, 38761], 23398, 23731, 27005, { f: 2, c: 38989 }, 25499, 31520, 27179, 27263, 26806, 39949, 28511, 21106, 21917, 24688, 25324, 27963, 28167, 28369, 33883, 35088, 36676, 19988, 39993, 21494, 26907, 27194, 38788, 26666, 20828, 31427, 33970, 37340, 37772, 22107, 40232, 26658, 33541, 33841, 31909, 21e3, 33477, [12129, 29926], 20094, 20355, 20896, 23506, 21002, 21208, 21223, 24059, 21914, 22570, 23014, 23436, 23448, 23515, [12082, 24178], 24185, 24739, 24863, 24931, 25022, 25563, 25954, 26577, 26707, 26874, 27454, 27475, 27735, 28450, 28567, 28485, 29872, [12130, 29976], 30435, 30475, 31487, 31649, 31777, 32233, [12152, 32566], 32752, 32925, 33382, 33694, 35251, 35532, 36011, 36996, 37969, 38291, 38289, 38306, 38501, 38867, 39208, 33304, 20024, 21547, 23736, 24012, 29609, 30284, 30524, 23721, 32747, 36107, 38593, 38929, 38996, 39e3, 20225, 20238, 21361, 21916, 22120, 22522, 22855, 23305, 23492, 23696, 24076, 24190, 24524, 25582, 26426, 26071, 26082, 26399, 26827, 26820, 27231, 24112, 27589, 27671, 27773, 30079, 31048, 23395, 31232, 32e3, 24509, 35215, 35352, 36020, 36215, 36556, 36637, 39138, 39438, [12004, 12225, 39740], [12018, 20096], 20605, 20736, 22931, 23452, 25135, 25216, 25836, 27450, 29344, 30097, 31047, 32681, 34811, 35516, 35696, 25516, 33738, 38816, 21513, 21507, 21931, 26708, 27224, 35440, 30759, 26485, [12233, 40653], 21364, 23458, 33050, 34384, 36870, 19992, 20037, 20167, 20241, 21450, 21560, 23470, [12088, 24339], 24613, 25937, 26429, 27714, 27762, 27875, 28792, 29699, 31350, 31406, 31496, 32026, 31998, 32102, 26087, [12124, 29275], 21435, 23621, 24040, 25298, 25312, 25369, 28192, 34394, 35377, 36317, 37624, 28417, 31142, [12226, 39770], 20136, { f: 2, c: 20139 }, 20379, 20384, 20689, 20807, 31478, 20849, 20982, 21332, 21281, 21375, 21483, 21932, 22659, 23777, 24375, 24394, 24623, 24656, 24685, 25375, 25945, 27211, 27841, 29378, 29421, 30703, 33016, 33029, 33288, 34126, 37111, 37857, 38911, 39255, 39514, 20208, 20957, 23597, 26241, 26989, 23616, 26354, 26997, [12127, 29577], 26704, 31873, 20677, 21220, 22343, [12081, 24062], 37670, [12100, 26020], 27427, 27453, 29748, 31105, 31165, 31563, 32202, 33465, 33740, 34943, 35167, 35641, 36817, [12198, 37329], 21535, 37504, 20061, 20534, 21477, 21306, 29399, 29590, 30697, 33510, 36527, 39366, 39368, 39378, 20855, 24858, 34398, 21936, 31354, 20598, 23507, 36935, 38533, 20018, 27355, 37351, 23633, 23624, 25496, 31391, 27795, 38772, 36705, 31402, 29066, 38536, 31874, 26647, 32368, 26705, 37740, 21234, 21531, 34219, 35347, 32676, 36557, 37089, 21350, 34952, 31041, 20418, 20670, 21009, 20804, 21843, 22317, 29674, 22411, 22865, 24418, 24452, 24693, 24950, 24935, 25001, 25522, 25658, 25964, 26223, 26690, 28179, 30054, 31293, 31995, 32076, 32153, 32331, 32619, 33550, 33610, 34509, 35336, 35427, 35686, 36605, 38938, 40335, 33464, 36814, 39912, 21127, 25119, 25731, 28608, 38553, 26689, 20625, [12107, 27424], 27770, 28500, [12147, 31348], 32080, [12174, 34880], 35363, [12105, 26376], 20214, 20537, 20518, 20581, 20860, 21048, 21091, 21927, 22287, 22533, 23244, 24314, 25010, 25080, 25331, 25458, 26908, 27177, 29309, [12125, 29356], 29486, 30740, 30831, 32121, 30476, 32937, [12178, 35211], 35609, 36066, 36562, 36963, 37749, 38522, 38997, 39443, 40568, 20803, 21407, 21427, 24187, 24358, 28187, 28304, [12126, 29572], 29694, 32067, 33335, [12180, 35328], 35578, 38480, 20046, 20491, 21476, 21628, 22266, 22993, 23396, [12080, 24049], 24235, 24359, [12094, 25144], 25925, 26543, 28246, 29392, 31946, 34996, 32929, 32993, 33776, [11969, 34382], 35463, 36328, 37431, 38599, 39015, [12238, 40723], 20116, 20114, 20237, 21320, 21577, 21566, 23087, 24460, 24481, 24735, 26791, 27278, 29786, 30849, 35486, 35492, 35703, 37264, 20062, 39881, 20132, 20348, 20399, 20505, 20502, 20809, 20844, 21151, 21177, 21246, 21402, [12061, 21475], 21521, 21518, 21897, 22353, 22434, 22909, 23380, 23389, 23439, [12079, 24037], 24039, 24055, 24184, 24195, 24218, 24247, 24344, 24658, 24908, 25239, 25304, 25511, 25915, 26114, 26179, 26356, 26477, 26657, 26775, 27083, 27743, 27946, 28009, 28207, 28317, 30002, 30343, 30828, 31295, 31968, 32005, 32024, 32094, 32177, 32789, 32771, 32943, 32945, 33108, 33167, 33322, 33618, [12175, 34892], 34913, 35611, 36002, 36092, 37066, 37237, 37489, 30783, 37628, 38308, 38477, 38917, [12217, 39321], [12220, 39640], 40251, 21083, 21163, 21495, 21512, 22741, 25335, 28640, 35946, 36703, 40633, 20811, 21051, 21578, 22269, 31296, 37239, 40288, [12234, 40658], 29508, 28425, 33136, 29969, 24573, 24794, [12219, 39592], 29403, 36796, 27492, 38915, 20170, 22256, 22372, 22718, 23130, 24680, 25031, 26127, 26118, 26681, 26801, 28151, 30165, 32058, [12169, 33390], 39746, 20123, 20304, 21449, 21766, 23919, 24038, 24046, 26619, 27801, 29811, 30722, 35408, 37782, 35039, 22352, 24231, 25387, 20661, 20652, 20877, 26368, 21705, 22622, 22971, 23472, 24425, 25165, 25505, 26685, 27507, 28168, 28797, 37319, 29312, 30741, 30758, 31085, 25998, 32048, 33756, 35009, 36617, 38555, 21092, 22312, 26448, 32618, 36001, 20916, 22338, 38442, 22586, 27018, 32948, 21682, 23822, 22524, 30869, 40442, 20316, 21066, 21643, 25662, 26152, 26388, 26613, 31364, 31574, 32034, 37679, 26716, 39853, 31545, 21273, 20874, 21047, 23519, 25334, 25774, 25830, 26413, 27578, 34217, 38609, 30352, 39894, 25420, 37638, 39851, [12139, 30399], 26194, 19977, 20632, 21442, [12077, 23665], 24808, 25746, 25955, 26719, 29158, 29642, 29987, 31639, 32386, 34453, 35715, 36059, 37240, 39184, 26028, 26283, 27531, 20181, 20180, 20282, 20351, 21050, 21496, 21490, 21987, 22235, [12064, 22763], 22987, 22985, 23039, [12070, 23376], 23629, 24066, 24107, 24535, 24605, 25351, [12096, 25903], 23388, 26031, 26045, 26088, 26525, [12108, 27490], 27515, [12114, 27663], 29509, 31049, 31169, [12151, 31992], 32025, 32043, 32930, 33026, [12164, 33267], 35222, 35422, 35433, 35430, 35468, 35566, 36039, 36060, 38604, 39164, [12013, 27503], 20107, 20284, 20365, 20816, 23383, 23546, 24904, 25345, 26178, 27425, 28363, 27835, 29246, 29885, 30164, 30913, [12144, 31034], [12157, 32780], [12159, 32819], [12163, 33258], 33940, 36766, 27728, [12229, 40575], 24335, 35672, 40235, 31482, 36600, 23437, 38635, 19971, 21489, 22519, 22833, 23241, 23460, 24713, 28287, 28422, 30142, 36074, 23455, 34048, 31712, 20594, 26612, 33437, 23649, 34122, 32286, 33294, 20889, 23556, 25448, 36198, 26012, 29038, 31038, 32023, 32773, 35613, [12190, 36554], 36974, 34503, 37034, 20511, 21242, 23610, 26451, 28796, 29237, 37196, 37320, 37675, 33509, 23490, 24369, 24825, 20027, 21462, 23432, [12095, 25163], 26417, 27530, 29417, 29664, 31278, 33131, 36259, 37202, [12216, 39318], 20754, 21463, 21610, 23551, 25480, 27193, 32172, 38656, 22234, 21454, 21608, 23447, 23601, 24030, 20462, 24833, 25342, 27954, 31168, 31179, 32066, 32333, 32722, 33261, [12168, 33311], 33936, 34886, 35186, 35728, 36468, 36655, 36913, 37195, 37228, 38598, 37276, 20160, 20303, 20805, [12055, 21313], 24467, 25102, 26580, 27713, 28171, 29539, 32294, 37325, 37507, 21460, 22809, 23487, 28113, 31069, 32302, 31899, 22654, 29087, 20986, 34899, 36848, 20426, 23803, 26149, 30636, 31459, 33308, 39423, 20934, 24490, 26092, 26991, 27529, 28147, 28310, 28516, 30462, 32020, 24033, 36981, 37255, 38918, 20966, 21021, 25152, 26257, 26329, 28186, 24246, 32210, 32626, 26360, 34223, 34295, 35576, 21161, 21465, [12069, 22899], 24207, 24464, 24661, 37604, 38500, 20663, 20767, 21213, 21280, 21319, 21484, 21736, 21830, 21809, 22039, 22888, 22974, 23100, 23477, 23558, [12073, 23567], 23569, 23578, 24196, 24202, 24288, 24432, 25215, 25220, 25307, 25484, 25463, 26119, 26124, 26157, 26230, 26494, 26786, 27167, 27189, 27836, 28040, 28169, 28248, 28988, 28966, 29031, 30151, 30465, 30813, 30977, 31077, 31216, 31456, 31505, 31911, 32057, 32918, 33750, 33931, 34121, 34909, 35059, 35359, 35388, 35412, 35443, 35937, 36062, 37284, 37478, 37758, 37912, 38556, 38808, 19978, 19976, 19998, 20055, 20887, 21104, 22478, 22580, 22732, 23330, 24120, 24773, 25854, 26465, 26454, 27972, 29366, 30067, 31331, 33976, 35698, 37304, 37664, 22065, 22516, 39166, 25325, 26893, 27542, 29165, 32340, 32887, [12170, 33394], 35302, [12215, 39135], 34645, 36785, 23611, 20280, 20449, 20405, 21767, 23072, 23517, 23529, [12092, 24515], 24910, 25391, 26032, 26187, 26862, 27035, 28024, 28145, 30003, 30137, 30495, 31070, 31206, 32051, [12162, 33251], 33455, 34218, 35242, 35386, [12189, 36523], [12191, 36763], 36914, 37341, 38663, [12040, 20154], 20161, 20995, 22645, 22764, 23563, 29978, 23613, 33102, 35338, 36805, 38499, 38765, 31525, 35535, 38920, 37218, 22259, 21416, 36887, 21561, 22402, 24101, 25512, [12116, 27700], 28810, 30561, 31883, 32736, 34928, 36930, 37204, 37648, 37656, 38543, 29790, 39620, 23815, 23913, 25968, 26530, 36264, 38619, 25454, 26441, 26905, 33733, 38935, 38592, 35070, 28548, 25722, [12072, 23544], 19990, 28716, 30045, 26159, 20932, 21046, 21218, 22995, 24449, 24615, 25104, 25919, 25972, 26143, 26228, 26866, 26646, 27491, 28165, 29298, [12131, 29983], 30427, 31934, 32854, 22768, 35069, [11972, 35199], 35488, 35475, 35531, 36893, 37266, [11992, 38738], 38745, [12011, 25993], 31246, 33030, 38587, 24109, 24796, 25114, 26021, 26132, 26512, [12143, 30707], 31309, 31821, 32318, 33034, 36012, [12186, 36196], 36321, 36447, 30889, 20999, 25305, 25509, 25666, 25240, 35373, 31363, 31680, 35500, 38634, 32118, [12166, 33292], 34633, 20185, 20808, 21315, 21344, 23459, 23554, 23574, 24029, 25126, 25159, 25776, 26643, 26676, 27849, 27973, 27927, 26579, 28508, 29006, 29053, 26059, 31359, 31661, 32218, 32330, 32680, 33146, [12167, 33307], 33337, 34214, 35438, 36046, 36341, 36984, 36983, 37549, 37521, 38275, 39854, 21069, 21892, 28472, 28982, 20840, 31109, 32341, 33203, 31950, 22092, 22609, 23720, 25514, 26366, 26365, 26970, 29401, 30095, 30094, 30990, 31062, 31199, 31895, 32032, 32068, 34311, 35380, 38459, 36961, [12239, 40736], 20711, 21109, 21452, 21474, 20489, 21930, 22766, 22863, 29245, 23435, 23652, 21277, 24803, 24819, 25436, 25475, 25407, 25531, 25805, 26089, 26361, 24035, 27085, 27133, 28437, 29157, 20105, 30185, 30456, 31379, 31967, 32207, 32156, 32865, 33609, 33624, 33900, 33980, 34299, 35013, [12187, 36208], 36865, 36973, 37783, 38684, 39442, 20687, 22679, 24974, 33235, 34101, 36104, 36896, 20419, 20596, 21063, 21363, 24687, 25417, 26463, 28204, [12188, 36275], 36895, 20439, 23646, 36042, 26063, 32154, 21330, 34966, 20854, 25539, 23384, 23403, 23562, 25613, 26449, 36956, 20182, 22810, 22826, 27760, 35409, 21822, 22549, 22949, 24816, 25171, 26561, 33333, 26965, 38464, 39364, 39464, 20307, 22534, 23550, 32784, 23729, 24111, 24453, 24608, 24907, 25140, 26367, 27888, 28382, 32974, 33151, 33492, 34955, 36024, 36864, 36910, 38538, 40667, 39899, 20195, 21488, [12068, 22823], 31532, 37261, 38988, 40441, 28381, 28711, 21331, 21828, 23429, 25176, 25246, 25299, 27810, 28655, 29730, 35351, 37944, 28609, 35582, 33592, 20967, 34552, 21482, 21481, 20294, 36948, [12192, 36784], 22890, 33073, 24061, 31466, 36799, 26842, [12181, 35895], 29432, 40008, 27197, 35504, 20025, 21336, 22022, 22374, 25285, 25506, 26086, 27470, 28129, 28251, 28845, 30701, 31471, 31658, 32187, 32829, 32966, 34507, 35477, 37723, 22243, 22727, 24382, 26029, 26262, 27264, 27573, 30007, 35527, 20516, 30693, 22320, 24347, 24677, 26234, 27744, 30196, 31258, 32622, 33268, 34584, 36933, 39347, 31689, 30044, [12149, 31481], 31569, 33988, 36880, 31209, 31378, 33590, 23265, 30528, 20013, 20210, 23449, 24544, 25277, 26172, 26609, 27880, [12173, 34411], 34935, 35387, 37198, 37619, 39376, 27159, 28710, 29482, 33511, 33879, 36015, 19969, 20806, 20939, 21899, 23541, 24086, 24115, 24193, 24340, 24373, 24427, 24500, 25074, 25361, 26274, 26397, 28526, 29266, 30010, 30522, 32884, 33081, 33144, 34678, 35519, 35548, 36229, 36339, 37530, [11985, 12199, 38263], 38914, [12227, 40165], 21189, 25431, 30452, 26389, 27784, 29645, 36035, 37806, 38515, 27941, 22684, 26894, 27084, 36861, 37786, 30171, 36890, 22618, 26626, 25524, 27131, 20291, 28460, 26584, 36795, 34086, 32180, 37716, 26943, 28528, 22378, 22775, 23340, 32044, [12118, 29226], 21514, 37347, 40372, 20141, 20302, 20572, 20597, 21059, 35998, 21576, 22564, 23450, 24093, 24213, 24237, 24311, 24351, 24716, 25269, 25402, 25552, 26799, 27712, 30855, 31118, 31243, 32224, 33351, 35330, 35558, 36420, 36883, 37048, 37165, 37336, [12237, 40718], 27877, 25688, 25826, 25973, 28404, 30340, 31515, 36969, 37841, 28346, 21746, 24505, 25764, 36685, 36845, 37444, 20856, 22635, 22825, 23637, 24215, 28155, 32399, 29980, 36028, 36578, 39003, 28857, 20253, 27583, 28593, [12133, 3e4], 38651, 20814, 21520, 22581, 22615, 22956, 23648, 24466, [12099, 26007], 26460, 28193, 30331, 33759, 36077, 36884, 37117, 37709, 30757, 30778, 21162, 24230, [12063, 22303], 22900, 24594, 20498, 20826, 20908, 20941, [12049, 20992], 21776, 22612, 22616, 22871, 23445, 23798, 23947, 24764, 25237, 25645, 26481, 26691, 26812, 26847, 30423, 28120, 28271, 28059, 28783, 29128, 24403, 30168, 31095, 31561, 31572, 31570, 31958, 32113, 21040, 33891, 34153, 34276, 35342, 35588, [12182, 35910], 36367, 36867, 36879, 37913, 38518, 38957, 39472, 38360, 20685, 21205, 21516, 22530, 23566, 24999, 25758, 27934, 30643, 31461, 33012, 33796, 36947, 37509, 23776, 40199, 21311, 24471, 24499, 28060, 29305, 30563, 31167, 31716, 27602, 29420, 35501, 26627, 27233, 20984, 31361, 26932, 23626, 40182, 33515, 23493, [12195, 37193], 28702, 22136, 23663, 24775, 25958, 27788, 35930, 36929, 38931, 21585, 26311, 37389, 22856, 37027, 20869, 20045, 20970, 34201, 35598, 28760, 25466, 37707, 26978, 39348, 32260, 30071, 21335, 26976, 36575, 38627, 27741, [12038, 20108], 23612, 24336, 36841, 21250, 36049, [12161, 32905], 34425, 24319, [12103, 26085], 20083, [12042, 20837], 22914, 23615, 38894, 20219, 22922, 24525, 35469, 28641, 31152, 31074, 23527, 33905, 29483, 29105, 24180, 24565, 25467, 25754, 29123, 31896, 20035, 24316, 20043, 22492, 22178, 24745, 28611, 32013, 33021, 33075, 33215, 36786, 35223, 34468, 24052, 25226, 25773, 35207, 26487, 27874, 27966, 29750, 30772, 23110, 32629, 33453, [12218, 39340], 20467, 24259, 25309, 25490, 25943, 26479, 30403, 29260, 32972, 32954, 36649, 37197, 20493, 22521, 23186, 26757, 26995, 29028, 29437, 36023, 22770, 36064, 38506, 36889, 34687, 31204, 30695, 33833, 20271, 21093, 21338, 25293, 26575, 27850, [12137, 30333], 31636, 31893, 33334, 34180, 36843, 26333, 28448, 29190, 32283, 33707, 39361, [12008, 40614], 20989, 31665, 30834, 31672, 32903, 31560, 27368, 24161, 32908, 30033, 30048, [12043, 20843], 37474, 28300, 30330, 37271, 39658, 20240, 32624, 25244, 31567, 38309, 40169, 22138, 22617, 34532, 38588, 20276, 21028, 21322, 21453, 21467, 24070, 25644, 26001, 26495, 27710, 27726, 29256, 29359, 29677, 30036, 32321, 33324, 34281, 36009, 31684, [12196, 37318], 29033, 38930, 39151, 25405, 26217, 30058, 30436, 30928, 34115, 34542, 21290, 21329, 21542, 22915, 24199, 24444, 24754, 25161, 25209, 25259, 26e3, [12112, 27604], 27852, 30130, [12138, 30382], 30865, 31192, 32203, 32631, 32933, 34987, 35513, 36027, 36991, [12206, 38750], [12214, 39131], 27147, 31800, 20633, 23614, 24494, 26503, 27608, 29749, 30473, 32654, [12240, 40763], 26570, 31255, 21305, [12134, 30091], 39661, 24422, 33181, 33777, 32920, 24380, 24517, 30050, 31558, 36924, 26727, 23019, 23195, 32016, 30334, 35628, 20469, 24426, 27161, 27703, 28418, 29922, 31080, 34920, 35413, 35961, 24287, 25551, 30149, 31186, 33495, 37672, 37618, 33948, 34541, 39981, 21697, 24428, 25996, 27996, 28693, 36007, 36051, 38971, 25935, 29942, 19981, 20184, 22496, 22827, 23142, 23500, 20904, 24067, 24220, 24598, 25206, 25975, 26023, 26222, 28014, [12119, 29238], 31526, 33104, 33178, 33433, 35676, 36e3, 36070, 36212, [12201, 38428], 38468, 20398, 25771, 27494, 33310, 33889, 34154, 37096, 23553, 26963, [12213, 39080], 33914, 34135, 20239, 21103, 24489, 24133, 26381, 31119, 33145, 35079, 35206, 28149, 24343, 25173, 27832, 20175, 29289, 39826, 20998, 21563, 22132, 22707, 24996, 25198, 28954, 22894, 31881, 31966, 32027, 38640, [12098, 25991], 32862, 19993, 20341, 20853, 22592, 24163, 24179, 24330, 26564, 20006, 34109, 38281, 38491, [12150, 31859], [12212, 38913], 20731, 22721, 30294, 30887, 21029, 30629, 34065, 31622, 20559, 22793, [12122, 29255], 31687, 32232, 36794, 36820, 36941, 20415, 21193, 23081, 24321, 38829, 20445, 33303, 37610, 22275, 25429, 27497, 29995, 35036, 36628, 31298, 21215, 22675, 24917, 25098, 26286, [11935, 27597], 31807, 33769, 20515, 20472, 21253, 21574, 22577, 22857, 23453, 23792, 23791, 23849, 24214, 25265, 25447, 25918, [12101, 26041], 26379, 27861, 27873, 28921, 30770, 32299, 32990, 33459, 33804, 34028, 34562, 35090, 35370, 35914, 37030, 37586, 39165, 40179, 40300, 20047, 20129, 20621, 21078, 22346, 22952, 24125, { f: 2, c: 24536 }, 25151, 26292, 26395, 26576, 26834, 20882, 32033, 32938, 33192, 35584, 35980, 36031, 37502, 38450, 21536, 38956, 21271, 20693, [12056, 21340], 22696, 25778, 26420, 29287, 30566, 31302, 37350, 21187, 27809, 27526, 22528, 24140, 22868, 26412, 32763, 20961, 30406, 25705, 30952, 39764, [12231, 40635], 22475, 22969, 26151, 26522, 27598, 21737, 27097, 24149, 33180, 26517, 39850, 26622, 40018, 26717, 20134, 20451, [12060, 21448], 25273, 26411, 27819, 36804, 20397, 32365, 40639, 19975, 24930, 28288, 28459, 34067, 21619, 26410, 39749, [11922, 24051], 31637, 23724, 23494, 34588, 28234, 34001, 31252, 33032, 22937, 31885, [11936, 27665], 30496, 21209, 22818, 28961, 29279, [12141, 30683], 38695, 40289, 26891, 23167, 23064, 20901, 21517, 21629, 26126, 30431, 36855, 37528, 40180, 23018, 29277, 28357, 20813, 26825, 32191, 32236, [12207, 38754], 40634, 25720, 27169, 33538, 22916, 23391, [12113, 27611], 29467, 30450, 32178, 32791, 33945, 20786, [12106, 26408], 40665, [12140, 30446], 26466, 21247, 39173, 23588, 25147, 31870, 36016, 21839, 24758, 32011, [12200, 38272], 21249, 20063, 20918, 22812, 29242, 32822, 37326, 24357, [12142, 30690], 21380, 24441, 32004, 34220, 35379, 36493, 38742, 26611, 34222, 37971, 24841, 24840, 27833, 30290, 35565, 36664, 21807, 20305, 20778, 21191, 21451, 23461, 24189, 24736, 24962, 25558, 26377, 26586, 28263, 28044, { f: 2, c: 29494 }, 30001, 31056, 35029, 35480, 36938, [12194, 37009], 37109, 38596, 34701, [12067, 22805], 20104, 20313, 19982, 35465, 36671, 38928, 20653, 24188, 22934, 23481, 24248, 25562, 25594, 25793, 26332, 26954, 27096, 27915, 28342, 29076, [12132, 29992], 31407, [12154, 32650], 32768, 33865, 33993, 35201, 35617, 36362, 36965, 38525, 39178, 24958, 25233, 27442, 27779, 28020, 32716, 32764, 28096, 32645, 34746, 35064, 26469, 33713, 38972, 38647, 27931, 32097, 33853, 37226, 20081, 21365, 23888, 27396, 28651, 34253, 34349, 35239, 21033, 21519, 23653, 26446, 26792, 29702, 29827, 30178, 35023, 35041, [12197, 37324], 38626, 38520, 24459, 29575, [12148, 31435], 33870, 25504, 30053, 21129, 27969, 28316, 29705, 30041, 30827, 31890, 38534, [12015, 31452], [12243, 40845], 20406, 24942, 26053, 34396, 20102, 20142, 20698, 20001, 20940, 23534, 26009, 26753, 28092, 29471, 30274, 30637, 31260, 31975, 33391, 35538, 36988, 37327, 38517, 38936, [12050, 21147], 32209, 20523, 21400, 26519, 28107, 29136, 29747, 33256, 36650, 38563, 40023, 40607, 29792, 22593, 28057, 32047, 39006, 20196, 20278, 20363, 20919, 21169, 23994, 24604, 29618, 31036, 33491, 37428, 38583, 38646, 38666, 40599, 40802, 26278, 27508, 21015, 21155, 28872, 35010, 24265, 24651, 24976, 28451, 29001, 31806, 32244, 32879, 34030, 36899, 37676, 21570, 39791, 27347, 28809, 36034, 36335, 38706, 21172, 23105, 24266, 24324, 26391, 27004, 27028, 28010, 28431, 29282, 29436, 31725, [12156, 32769], 32894, 34635, 37070, 20845, 40595, 31108, 32907, 37682, 35542, 20525, 21644, 35441, 27498, 36036, 33031, 24785, 26528, 40434, 20121, 20120, 39952, 35435, 34241, 34152, 26880, 28286, 30871, 33109, 24332, 19984, 19989, 20010, 20017, [12034, 20022], 20028, [12035, 20031], 20034, 20054, 20056, 20098, [12037, 20101], 35947, 20106, 33298, 24333, 20110, { f: 2, c: 20126 }, [12039, 20128], 20130, 20144, 20147, 20150, 20174, 20173, 20164, 20166, 20162, 20183, 20190, 20205, 20191, 20215, 20233, 20314, 20272, 20315, 20317, 20311, 20295, 20342, 20360, 20367, 20376, 20347, 20329, 20336, 20369, 20335, 20358, 20374, 20760, 20436, 20447, 20430, 20440, 20443, 20433, 20442, 20432, { f: 2, c: 20452 }, 20506, 20520, 20500, 20522, 20517, 20485, 20252, 20470, 20513, 20521, 20524, 20478, 20463, 20497, 20486, 20547, 20551, 26371, 20565, 20560, 20552, 20570, 20566, 20588, 20600, 20608, 20634, 20613, 20660, 20658, { f: 2, c: 20681 }, 20659, 20674, 20694, 20702, 20709, 20717, 20707, 20718, 20729, 20725, 20745, { f: 2, c: 20737 }, 20758, 20757, 20756, 20762, 20769, 20794, 20791, 20796, 20795, [12041, 20799], [11918, 20800], 20818, 20812, 20820, 20834, 31480, { f: 2, c: 20841 }, 20846, 20864, [12044, 20866], 22232, 20876, 20873, 20879, 20881, 20883, 20885, [12045, 20886], 20900, 20902, 20898, { f: 2, c: 20905 }, [12046, 20907], 20915, { f: 2, c: 20913 }, 20912, 20917, 20925, 20933, 20937, 20955, [12047, 20960], 34389, 20969, 20973, 20976, [12048, 20981], 20990, 20996, 21003, 21012, 21006, 21031, 21034, 21038, 21043, 21049, 21071, 21060, { f: 2, c: 21067 }, 21086, 21076, 21098, 21108, 21097, 21107, 21119, 21117, 21133, 21140, 21138, 21105, 21128, 21137, 36776, 36775, { f: 2, c: 21164 }, 21180, 21173, 21185, 21197, 21207, 21214, 21219, 21222, 39149, 21216, 21235, 21237, 21240, [12051, 21241], 21254, 21256, 30008, 21261, 21264, 21263, [12052, 21269], [12053, 21274], 21283, 21295, 21297, 21299, [12054, 21304], 21312, 21318, 21317, 19991, 21321, 21325, 20950, 21342, [12057, 21353], 21358, 22808, 21371, 21367, [12058, 21378], 21398, 21408, 21414, 21413, 21422, 21424, [12059, 21430], 21443, 31762, 38617, 21471, 26364, 29166, 21486, 21480, 21485, 21498, 21505, 21565, 21568, { f: 2, c: 21548 }, 21564, 21550, 21558, 21545, 21533, 21582, 21647, 21621, 21646, 21599, 21617, 21623, 21616, 21650, 21627, 21632, 21622, 21636, 21648, 21638, 21703, 21666, 21688, 21669, 21676, 21700, 21704, 21672, 21675, 21698, 21668, 21694, 21692, 21720, { f: 2, c: 21733 }, 21775, 21780, 21757, 21742, 21741, 21754, 21730, 21817, 21824, 21859, 21836, 21806, 21852, 21829, { f: 2, c: 21846 }, 21816, 21811, 21853, 21913, 21888, 21679, 21898, 21919, 21883, 21886, 21912, 21918, 21934, 21884, 21891, 21929, 21895, 21928, 21978, 21957, 21983, 21956, 21980, 21988, 21972, 22036, 22007, 22038, 22014, 22013, 22043, 22009, 22094, 22096, 29151, 22068, 22070, 22066, 22072, 22123, 22116, 22063, 22124, 22122, 22150, 22144, 22154, 22176, 22164, 22159, 22181, 22190, 22198, 22196, 22210, 22204, 22209, 22211, 22208, 22216, 22222, 22225, 22227, [12062, 22231], 22254, 22265, 22272, 22271, 22276, 22281, 22280, 22283, 22285, 22291, 22296, 22294, 21959, 22300, 22310, { f: 2, c: 22327 }, 22350, 22331, 22336, 22351, 22377, 22464, 22408, 22369, 22399, 22409, 22419, 22432, 22451, 22436, 22442, 22448, 22467, 22470, 22484, { f: 2, c: 22482 }, 22538, 22486, 22499, 22539, 22553, 22557, 22642, 22561, 22626, 22603, 22640, 27584, 22610, 22589, 22649, 22661, 22713, 22687, 22699, 22714, 22750, 22715, 22712, 22702, 22725, 22739, 22737, 22743, 22745, 22744, 22757, 22748, 22756, 22751, 22767, 22778, 22777, { f: 3, c: 22779 }, [12065, 22786], [12066, 22794], 22800, 22811, 26790, 22821, { f: 2, c: 22828 }, 22834, 22840, 22846, 31442, 22869, 22864, 22862, 22874, 22872, 22882, 22880, 22887, 22892, 22889, 22904, 22913, 22941, 20318, 20395, 22947, 22962, 22982, 23016, 23004, 22925, { f: 2, c: 23001 }, 23077, 23071, 23057, 23068, 23049, 23066, 23104, 23148, 23113, { f: 2, c: 23093 }, 23138, 23146, 23194, 23228, 23230, 23243, 23234, 23229, 23267, 23255, 23270, 23273, 23254, { f: 2, c: 23290 }, 23308, 23307, 23318, 23346, 23248, 23338, 23350, 23358, 23363, 23365, 23360, 23377, 23381, { f: 2, c: 23386 }, 23397, 23401, 23408, 23411, 23413, 23416, 25992, 23418, [12071, 23424], 23427, 23462, 23480, 23491, 23495, 23497, 23508, 23504, 23524, 23526, 23522, 23518, 23525, 23531, 23536, 23542, 23539, 23557, { f: 2, c: 23559 }, 23565, 23571, 23584, [11920, 12074, 23586], 23592, [12075, 23608], 23609, 23617, 23622, 23630, 23635, 23632, 23631, 23409, 23660, [12076, 23662], 20066, 23670, 23673, 23692, 23697, 23700, 22939, 23723, 23739, 23734, 23740, 23735, 23749, 23742, 23751, 23769, 23785, 23805, 23802, 23789, 23948, 23786, 23819, 23829, 23831, 23900, 23839, 23835, 23825, 23828, 23842, 23834, 23833, 23832, 23884, 23890, 23886, 23883, 23916, 23923, 23926, 23943, 23940, 23938, 23970, 23965, 23980, 23982, 23997, 23952, 23991, 23996, 24009, 24013, 24019, 24018, 24022, [12078, 24027], 24043, 24050, 24053, 24075, 24090, 24089, 24081, 24091, { f: 2, c: 24118 }, 24132, 24131, 24128, 24142, 24151, 24148, 24159, 24162, 24164, 24135, { f: 2, c: 24181 }, [11923, 12083, 24186], 40636, [12084, 24191], 24224, { f: 2, c: 24257 }, 24264, 24272, 24271, 24278, 24291, 24285, { f: 2, c: 24282 }, 24290, 24289, { f: 2, c: 24296 }, 24300, 24305, 24307, 24304, [12085, 24308], 24312, [12086, 24318], 24323, 24329, 24413, 24412, [12087, 24331], 24337, 24342, 24361, 24365, 24376, 24385, 24392, 24396, 24398, 24367, [11924, 24401], { f: 2, c: 24406 }, 24409, [12090, 24417], 24429, [12091, 24435], 24439, 24451, 24450, 24447, 24458, 24456, 24465, 24455, 24478, 24473, 24472, 24480, 24488, 24493, 24508, 24534, 24571, 24548, 24568, 24561, 24541, 24755, 24575, 24609, 24672, 24601, 24592, 24617, 24590, 24625, 24603, 24597, 24619, 24614, 24591, 24634, 24666, 24641, 24682, 24695, 24671, 24650, 24646, 24653, 24675, 24643, 24676, 24642, 24684, 24683, 24665, 24705, 24717, 24807, 24707, 24730, 24708, 24731, { f: 2, c: 24726 }, 24722, 24743, 24715, 24801, 24760, 24800, 24787, 24756, 24560, 24765, 24774, 24757, 24792, 24909, 24853, 24838, { f: 2, c: 24822 }, 24832, 24820, 24826, 24835, 24865, 24827, 24817, { f: 2, c: 24845 }, 24903, 24894, 24872, 24871, 24906, 24895, 24892, 24876, 24884, 24893, 24898, 24900, 24947, 24951, { f: 3, c: 24920 }, 24939, 24948, 24943, 24933, 24945, 24927, 24925, 24915, 24949, 24985, 24982, 24967, 25004, 24980, 24986, 24970, 24977, 25003, 25006, 25036, 25034, 25033, 25079, 25032, 25027, 25030, 25018, 25035, 32633, 25037, 25062, 25059, 25078, 25082, 25076, 25087, 25085, 25084, 25086, 25088, [12093, 25096], 25097, 25101, 25100, 25108, 25115, 25118, 25121, 25130, 25134, 25136, { f: 2, c: 25138 }, 25153, 25166, 25182, 25187, 25179, 25184, 25192, 25212, 25218, 25225, 25214, { f: 2, c: 25234 }, 25238, 25300, 25219, 25236, 25303, 25297, 25275, 25295, 25343, 25286, 25812, 25288, 25308, 25292, 25290, 25282, 25287, 25243, 25289, 25356, 25326, 25329, 25383, 25346, 25352, 25327, 25333, 25424, 25406, 25421, 25628, 25423, 25494, 25486, 25472, 25515, 25462, 25507, 25487, 25481, 25503, 25525, 25451, 25449, 25534, 25577, 25536, 25542, 25571, 25545, 25554, 25590, 25540, 25622, 25652, 25606, 25619, 25638, 25654, 25885, 25623, 25640, 25615, 25703, 25711, 25718, 25678, 25898, 25749, 25747, 25765, 25769, 25736, 25788, 25818, 25810, 25797, 25799, 25787, 25816, 25794, 25841, 25831, 33289, { f: 2, c: 25824 }, 25260, 25827, 25839, 25900, 25846, 25844, 25842, 25850, 25856, 25853, 25880, 25884, 25861, 25892, 25891, 25899, [12097, 25908], [11929, 25909], 25911, 25910, 25912, 30027, 25928, 25942, 25941, 25933, 25944, 25950, 25949, 25970, 25976, { f: 2, c: 25986 }, 35722, 26011, 26015, 26027, 26039, 26051, 26054, 26049, 26052, 26060, 26066, 26075, 26073, [12102, 26080], [11931, 26081], 26097, 26482, 26122, 26115, 26107, 26483, { f: 2, c: 26165 }, 26164, 26140, 26191, 26180, 26185, 26177, 26206, 26205, 26212, { f: 2, c: 26215 }, 26207, 26210, 26224, 26243, 26248, 26254, 26249, 26244, 26264, 26269, 26305, 26297, 26313, 26302, 26300, 26308, 26296, 26326, 26330, 26336, 26175, 26342, 26345, [12104, 26352], 26357, 26359, 26383, 26390, 26398, { f: 2, c: 26406 }, 38712, 26414, 26431, 26422, 26433, 26424, 26423, 26438, 26462, 26464, 26457, { f: 2, c: 26467 }, 26505, 26480, 26537, 26492, 26474, 26508, 26507, 26534, 26529, 26501, 26551, 26607, 26548, 26604, 26547, 26601, 26552, 26596, 26590, 26589, 26594, 26606, 26553, 26574, 26566, 26599, 27292, 26654, 26694, 26665, 26688, 26701, 26674, 26702, 26803, 26667, 26713, 26723, 26743, 26751, 26783, 26767, 26797, 26772, 26781, 26779, 26755, 27310, 26809, 26740, 26805, 26784, 26810, 26895, 26765, 26750, 26881, 26826, 26888, 26840, 26914, 26918, 26849, 26892, 26829, 26836, 26855, 26837, 26934, 26898, 26884, 26839, 26851, 26917, 26873, 26848, 26863, 26920, 26922, 26906, 26915, 26913, 26822, 27001, 26999, 26972, 27e3, 26987, 26964, 27006, 26990, 26937, 26996, 26941, 26969, 26928, 26977, 26974, 26973, 27009, 26986, 27058, 27054, 27088, 27071, 27073, 27091, 27070, 27086, 23528, 27082, 27101, 27067, 27075, 27047, 27182, 27025, 27040, 27036, 27029, 27060, 27102, 27112, 27138, 27163, 27135, 27402, 27129, 27122, 27111, 27141, 27057, 27166, 27117, 27156, 27115, 27146, 27154, 27329, 27171, 27155, 27204, 27148, 27250, 27190, 27256, 27207, 27234, 27225, 27238, 27208, 27192, 27170, 27280, 27277, 27296, 27268, { f: 2, c: 27298 }, 27287, 34327, 27323, 27331, 27330, 27320, 27315, 27308, 27358, 27345, 27359, 27306, 27354, 27370, 27387, 27397, 34326, 27386, 27410, 27414, 39729, 27423, 27448, 27447, 30428, 27449, 39150, 27463, 27459, 27465, 27472, 27481, 27476, 27483, 27487, 27489, 27512, [12109, 27513], { f: 2, c: 27519 }, 27524, 27523, 27533, 27544, 27541, 27550, 27556, { f: 2, c: 27562 }, 27567, 27570, 27569, [12110, 27571], 27575, 27580, 27590, [12111, 27595], 27603, 27615, 27628, 27627, 27635, 27631, 40638, 27656, 27667, [12115, 27668], 27675, 27684, 27683, 27742, 27733, 27746, 27754, 27778, 27789, 27802, 27777, 27803, 27774, 27752, 27763, 27794, 27792, 27844, 27889, 27859, 27837, 27863, 27845, 27869, 27822, 27825, 27838, 27834, 27867, 27887, 27865, 27882, 27935, 34893, 27958, 27947, 27965, 27960, 27929, 27957, 27955, 27922, 27916, 28003, 28051, 28004, 27994, 28025, 27993, 28046, 28053, 28644, 28037, 28153, 28181, 28170, 28085, 28103, 28134, 28088, 28102, 28140, 28126, 28108, 28136, 28114, 28101, 28154, 28121, 28132, 28117, 28138, 28142, 28205, 28270, 28206, 28185, 28274, 28255, 28222, 28195, 28267, 28203, 28278, 28237, 28191, 28227, 28218, 28238, 28196, 28415, 28189, 28216, 28290, 28330, 28312, 28361, 28343, 28371, 28349, 28335, 28356, 28338, { f: 2, c: 28372 }, 28303, 28325, 28354, 28319, 28481, 28433, 28748, 28396, 28408, 28414, 28479, 28402, 28465, 28399, 28466, 28364, 28478, 28435, 28407, 28550, 28538, 28536, 28545, 28544, 28527, 28507, 28659, 28525, 28546, 28540, 28504, 28558, 28561, 28610, 28518, 28595, 28579, 28577, 28580, 28601, 28614, 28586, 28639, 28629, 28652, 28628, 28632, 28657, 28654, 28635, 28681, 28683, 28666, 28689, 28673, 28687, 28670, 28699, 28698, 28532, 28701, 28696, 28703, 28720, 28734, 28722, 28753, 28771, 28825, 28818, 28847, 28913, 28844, 28856, 28851, 28846, 28895, 28875, 28893, 28889, 28937, 28925, 28956, 28953, 29029, 29013, 29064, 29030, 29026, 29004, 29014, 29036, 29071, 29179, 29060, 29077, 29096, 29100, 29143, 29113, 29118, 29138, 29129, 29140, 29134, 29152, 29164, 29159, 29173, 29180, 29177, 29183, 29197, 29200, 29211, 29224, 29229, 29228, 29232, 29234, [12120, 29243], 29244, [12121, 29247], 29248, 29254, 29259, 29272, 29300, 29310, 29314, 29313, 29319, 29330, 29334, 29346, 29351, 29369, 29362, 29379, 29382, 29380, 29390, 29394, 29410, { f: 2, c: 29408 }, 29433, 29431, 20495, 29463, 29450, 29468, 29462, 29469, 29492, 29487, 29481, 29477, 29502, { f: 2, c: 29518 }, 40664, 29527, 29546, 29544, 29552, 29560, 29557, 29563, 29562, 29640, 29619, 29646, 29627, 29632, 29669, 29678, 29662, 29858, 29701, 29807, 29733, 29688, 29746, 29754, 29781, 29759, 29791, 29785, 29761, 29788, 29801, 29808, 29795, 29802, 29814, 29822, 29835, 29854, 29863, 29898, 29903, 29908, 29681, 29920, 29923, 29927, 29929, 29934, 29938, { f: 2, c: 29936 }, 29944, 29943, 29956, 29955, 29957, 29964, 29966, 29965, 29973, 29971, 29982, 29990, 29996, 30012, 30020, 30029, 30026, 30025, 30043, 30022, 30042, 30057, 30052, 30055, 30059, 30061, 30072, 30070, { f: 2, c: 30086 }, 30068, 30090, 30089, 30082, 30100, 30106, 30109, 30117, 30115, 30146, 30131, 30147, 30133, 30141, 30136, 30140, 30129, 30157, 30154, 30162, 30169, 30179, 30174, { f: 2, c: 30206 }, 30204, 30209, 30192, 30202, { f: 2, c: 30194 }, 30219, 30221, 30217, 30239, 30247, { f: 3, c: 30240 }, 30244, 30260, 30256, 30267, { f: 2, c: 30279 }, 30278, 30300, 30296, { f: 2, c: 30305 }, { f: 3, c: 30312 }, 30311, 30316, 30320, 30322, [12136, 30326], 30328, 30332, 30336, 30339, 30344, 30347, 30350, 30358, 30355, { f: 2, c: 30361 }, 30384, 30388, { f: 3, c: 30392 }, 30402, 30413, 30422, 30418, 30430, 30433, 30437, 30439, 30442, 34351, 30459, 30472, 30471, 30468, 30505, 30500, 30494, { f: 2, c: 30501 }, 30491, { f: 2, c: 30519 }, 30535, 30554, 30568, 30571, 30555, 30565, 30591, 30590, 30585, 30606, 30603, 30609, 30624, 30622, 30640, 30646, 30649, 30655, { f: 2, c: 30652 }, 30651, 30663, 30669, 30679, 30682, 30684, 30691, 30702, 30716, 30732, 30738, 31014, 30752, 31018, 30789, 30862, 30836, 30854, 30844, 30874, 30860, 30883, 30901, 30890, 30895, 30929, 30918, 30923, 30932, 30910, 30908, 30917, 30922, 30956, 30951, 30938, 30973, 30964, 30983, 30994, 30993, 31001, 31020, 31019, 31040, 31072, 31063, 31071, 31066, 31061, 31059, 31098, 31103, 31114, 31133, 31143, 40779, 31146, 31150, 31155, { f: 2, c: 31161 }, 31177, 31189, 31207, 31212, 31201, 31203, 31240, 31245, { f: 2, c: 31256 }, 31264, 31263, 31104, 31281, 31291, 31294, 31287, 31299, 31319, 31305, { f: 2, c: 31329 }, 31337, 40861, 31344, 31353, 31357, 31368, 31383, 31381, 31384, 31382, 31401, 31432, 31408, 31414, 31429, 31428, 31423, 36995, 31431, 31434, 31437, 31439, 31445, 31443, { f: 2, c: 31449 }, 31453, { f: 2, c: 31457 }, 31462, 31469, 31472, 31490, 31503, 31498, 31494, 31539, { f: 2, c: 31512 }, 31518, 31541, 31528, 31542, 31568, 31610, 31492, 31565, 31499, 31564, 31557, 31605, 31589, 31604, 31591, { f: 2, c: 31600 }, 31596, 31598, 31645, 31640, 31647, 31629, 31644, 31642, 31627, 31634, 31631, 31581, 31641, 31691, 31681, 31692, 31695, 31668, 31686, 31709, 31721, 31761, 31764, 31718, 31717, 31840, 31744, 31751, 31763, 31731, 31735, 31767, 31757, 31734, 31779, 31783, 31786, 31775, 31799, 31787, 31805, 31820, 31811, 31828, 31823, 31808, 31824, 31832, 31839, 31844, 31830, 31845, 31852, 31861, 31875, 31888, 31908, 31917, 31906, 31915, 31905, 31912, 31923, 31922, 31921, 31918, 31929, 31933, 31936, 31941, 31938, 31960, 31954, 31964, 31970, 39739, 31983, 31986, 31988, 31990, 31994, 32006, 32002, 32028, 32021, 32010, 32069, 32075, 32046, 32050, 32063, 32053, 32070, 32115, 32086, 32078, 32114, 32104, 32110, 32079, 32099, 32147, 32137, 32091, 32143, 32125, 32155, 32186, 32174, 32163, 32181, 32199, 32189, 32171, 32317, 32162, 32175, 32220, 32184, 32159, 32176, 32216, 32221, 32228, 32222, 32251, 32242, 32225, 32261, 32266, 32291, 32289, 32274, 32305, 32287, 32265, 32267, 32290, 32326, 32358, 32315, 32309, 32313, 32323, 32311, 32306, 32314, 32359, 32349, 32342, 32350, { f: 2, c: 32345 }, 32377, 32362, 32361, 32380, 32379, 32387, 32213, 32381, 36782, 32383, { f: 2, c: 32392 }, 32396, 32402, 32400, { f: 2, c: 32403 }, 32406, 32398, { f: 2, c: 32411 }, 32568, 32570, 32581, { f: 3, c: 32588 }, 32592, [12153, 32593], 32597, 32596, 32600, { f: 2, c: 32607 }, { f: 2, c: 32616 }, 32615, 32632, 32642, 32646, 32643, 32648, 32647, 32652, 32660, 32670, 32669, 32666, 32675, 32687, 32690, 32697, 32686, 32694, 32696, 35697, { f: 2, c: 32709 }, 32714, 32725, 32724, 32737, 32742, 32745, 32755, 32761, 39132, 32774, 32772, 32779, [12158, 32786], { f: 2, c: 32792 }, 32796, 32801, 32808, 32831, 32827, 32842, 32838, 32850, 32856, 32858, 32863, 32866, 32872, 32883, 32882, 32880, 32886, 32889, 32893, [12160, 32895], 32900, 32902, 32901, 32923, 32915, 32922, 32941, 20880, 32940, 32987, 32997, 32985, 32989, 32964, 32986, 32982, 33033, 33007, 33009, 33051, 33065, 33059, 33071, 33099, 38539, 33094, 33086, 33107, 33105, 33020, 33137, 33134, { f: 2, c: 33125 }, 33140, 33155, 33160, 33162, 33152, 33154, 33184, 33173, 33188, 33187, 33119, 33171, 33193, 33200, 33205, 33214, 33208, 33213, 33216, 33218, 33210, 33225, 33229, 33233, 33241, 33240, 33224, 33242, { f: 2, c: 33247 }, 33255, { f: 2, c: 33274 }, 33278, { f: 2, c: 33281 }, 33285, 33287, 33290, 33293, 33296, 33302, 33321, 33323, 33336, 33331, 33344, 33369, 33368, 33373, 33370, 33375, 33380, 33378, 33384, { f: 2, c: 33386 }, 33326, 33393, 33399, [12171, 33400], 33406, 33421, 33426, 33451, 33439, 33467, 33452, 33505, 33507, 33503, 33490, 33524, 33523, 33530, 33683, 33539, 33531, 33529, 33502, 33542, 33500, 33545, 33497, 33589, 33588, 33558, 33586, 33585, 33600, 33593, 33616, 33605, 33583, 33579, { f: 2, c: 33559 }, 33669, 33690, 33706, 33695, 33698, 33686, 33571, 33678, 33671, 33674, 33660, 33717, 33651, 33653, 33696, 33673, 33704, 33780, 33811, 33771, 33742, 33789, 33795, 33752, 33803, 33729, 33783, 33799, 33760, 33778, 33805, 33826, 33824, 33725, 33848, 34054, 33787, 33901, 33834, 33852, 34138, 33924, 33911, 33899, 33965, 33902, 33922, 33897, 33862, 33836, 33903, 33913, 33845, 33994, 33890, 33977, 33983, 33951, 34009, 33997, 33979, 34010, 34e3, 33985, 33990, 34006, 33953, 34081, 34047, 34036, { f: 2, c: 34071 }, 34092, 34079, 34069, 34068, 34044, 34112, 34147, 34136, 34120, 34113, 34306, 34123, 34133, 34176, 34212, 34184, 34193, 34186, 34216, 34157, 34196, 34203, 34282, 34183, 34204, 34167, 34174, 34192, 34249, 34234, 34255, 34233, 34256, 34261, 34269, 34277, 34268, 34297, 34314, 34323, 34315, 34302, 34298, 34310, 34338, 34330, 34352, 34367, [12172, 34381], 20053, 34388, 34399, 34407, 34417, 34451, 34467, { f: 2, c: 34473 }, { f: 2, c: 34443 }, 34486, 34479, 34500, 34502, 34480, 34505, 34851, 34475, 34516, 34526, 34537, 34540, 34527, 34523, 34543, 34578, 34566, 34568, 34560, 34563, 34555, 34577, 34569, 34573, 34553, 34570, 34612, 34623, 34615, 34619, 34597, 34601, 34586, 34656, 34655, 34680, 34636, 34638, 34676, 34647, 34664, 34670, 34649, 34643, 34659, 34666, 34821, 34722, 34719, 34690, 34735, 34763, 34749, 34752, 34768, 38614, 34731, 34756, 34739, 34759, 34758, 34747, 34799, 34802, 34784, 34831, 34829, 34814, { f: 2, c: 34806 }, 34830, 34770, 34833, 34838, 34837, 34850, 34849, 34865, 34870, 34873, 34855, 34875, 34884, 34882, 34898, 34905, 34910, 34914, 34923, 34945, 34942, 34974, 34933, 34941, 34997, 34930, 34946, 34967, 34962, 34990, 34969, 34978, 34957, 34980, 34992, 35007, 34993, { f: 2, c: 35011 }, 35028, { f: 2, c: 35032 }, 35037, 35065, 35074, 35068, 35060, 35048, 35058, 35076, 35084, 35082, 35091, 35139, 35102, 35109, { f: 2, c: 35114 }, 35137, 35140, 35131, 35126, 35128, 35148, 35101, 35168, 35166, 35174, 35172, 35181, 35178, 35183, 35188, 35191, [12177, 35198], 35203, 35208, 35210, 35219, 35224, 35233, 35241, 35238, 35244, 35247, 35250, 35258, 35261, { f: 2, c: 35263 }, 35290, { f: 2, c: 35292 }, 35303, 35316, 35320, 35331, 35350, 35344, 35340, 35355, 35357, 35365, 35382, 35393, 35419, 35410, 35398, 35400, 35452, 35437, 35436, 35426, 35461, 35458, 35460, 35496, 35489, 35473, { f: 2, c: 35493 }, 35482, 35491, 35524, 35533, 35522, 35546, 35563, 35571, 35559, 35556, 35569, 35604, 35552, 35554, 35575, 35550, 35547, 35596, 35591, 35610, 35553, 35606, 35600, 35607, 35616, 35635, 38827, 35622, 35627, 35646, 35624, 35649, 35660, 35663, 35662, 35657, 35670, 35675, 35674, 35691, 35679, 35692, 35695, 35700, 35709, 35712, 35724, 35726, { f: 2, c: 35730 }, 35734, { f: 2, c: 35737 }, 35898, 35905, 35903, 35912, 35916, 35918, 35920, [12183, 35925], 35938, 35948, [12184, 35960], 35962, 35970, 35977, 35973, 35978, { f: 2, c: 35981 }, 35988, 35964, 35992, 25117, 36013, 36010, 36029, { f: 2, c: 36018 }, 36014, 36022, 36040, 36033, 36068, 36067, 36058, 36093, { f: 2, c: 36090 }, { f: 2, c: 36100 }, 36106, 36103, 36111, 36109, 36112, 40782, 36115, 36045, 36116, 36118, 36199, 36205, 36209, 36211, 36225, 36249, 36290, 36286, 36282, 36303, 36314, 36310, 36300, 36315, 36299, { f: 2, c: 36330 }, 36319, 36323, 36348, { f: 2, c: 36360 }, 36351, { f: 2, c: 36381 }, 36368, 36383, 36418, 36405, 36400, 36404, 36426, 36423, 36425, 36428, 36432, 36424, 36441, 36452, 36448, 36394, 36451, 36437, 36470, 36466, 36476, 36481, 36487, 36485, 36484, 36491, 36490, 36499, 36497, 36500, 36505, 36522, 36513, 36524, 36528, 36550, 36529, 36542, 36549, 36552, 36555, 36571, 36579, 36604, 36603, 36587, 36606, 36618, 36613, 36629, 36626, 36633, 36627, 36636, 36639, 36635, 36620, 36646, 36659, 36667, 36665, 36677, 36674, 36670, 36684, 36681, 36678, 36686, 36695, 36700, { f: 3, c: 36706 }, 36764, 36767, 36771, 36781, 36783, 36791, 36826, 36837, 36834, 36842, 36847, 36999, 36852, 36869, { f: 2, c: 36857 }, 36881, 36885, 36897, 36877, 36894, 36886, 36875, 36903, 36918, 36917, 36921, 36856, { f: 4, c: 36943 }, 36878, 36937, 36926, 36950, 36952, 36958, 36968, 36975, 36982, 38568, 36978, 36994, 36989, 36993, 36992, 37002, 37001, 37007, 37032, 37039, 37041, 37045, 37090, 37092, 25160, 37083, 37122, 37138, 37145, 37170, 37168, 37194, 37206, 37208, 37219, 37221, 37225, 37235, 37234, 37259, 37257, 37250, 37282, 37291, 37295, 37290, 37301, 37300, 37306, { f: 2, c: 37312 }, 37321, 37323, 37328, 37334, 37343, 37345, 37339, 37372, { f: 2, c: 37365 }, 37406, 37375, 37396, 37420, 37397, 37393, 37470, 37463, 37445, 37449, 37476, 37448, 37525, 37439, 37451, 37456, 37532, 37526, 37523, 37531, 37466, 37583, 37561, 37559, 37609, 37647, 37626, 37700, 37678, 37657, 37666, 37658, 37667, 37690, 37685, 37691, 37724, 37728, 37756, 37742, 37718, 37808, { f: 2, c: 37804 }, 37780, 37817, { f: 2, c: 37846 }, 37864, 37861, 37848, 37827, 37853, 37840, 37832, 37860, 37914, 37908, 37907, 37891, 37895, 37904, 37942, 37931, 37941, 37921, 37946, 37953, 37970, 37956, 37979, 37984, 37986, 37982, 37994, 37417, 38e3, 38005, 38007, 38013, 37978, 38012, 38014, 38017, 38015, 38274, 38279, 38282, 38292, 38294, { f: 2, c: 38296 }, 38304, 38312, 38311, 38317, 38332, 38331, 38329, 38334, 38346, 28662, 38339, 38349, 38348, 38357, 38356, 38358, 38364, 38369, 38373, 38370, 38433, 38440, { f: 2, c: 38446 }, 38466, 38476, 38479, 38475, 38519, 38492, 38494, 38493, 38495, 38502, 38514, 38508, 38541, 38552, 38549, 38551, 38570, 38567, { f: 2, c: 38577 }, 38576, 38580, [12202, 38582], 38584, [12203, 38585], 38606, 38603, 38601, 38605, 35149, 38620, 38669, 38613, 38649, 38660, 38662, 38664, 38675, 38670, 38673, 38671, 38678, 38681, 38692, 38698, 38704, 38713, { f: 2, c: 38717 }, 38724, 38726, 38728, 38722, 38729, 38748, 38752, 38756, 38758, 38760, 21202, 38763, 38769, 38777, 38789, 38780, 38785, 38778, 38790, 38795, { f: 2, c: 38799 }, 38812, 38824, 38822, 38819, { f: 2, c: 38835 }, 38851, 38854, 38856, [12209, 38859], 38876, [12210, 38893], 40783, 38898, 31455, 38902, 38901, 38927, 38924, 38968, 38948, 38945, 38967, 38973, 38982, 38991, 38987, 39019, { f: 3, c: 39023 }, 39028, 39027, 39082, 39087, 39089, 39094, 39108, 39107, 39110, 39145, 39147, 39171, 39177, 39186, 39188, 39192, 39201, { f: 2, c: 39197 }, 39204, 39200, 39212, 39214, { f: 2, c: 39229 }, 39234, 39241, 39237, 39248, 39243, { f: 2, c: 39249 }, 39244, 39253, { f: 2, c: 39319 }, 39333, { f: 2, c: 39341 }, 39356, 39391, 39387, 39389, 39384, 39377, { f: 2, c: 39405 }, { f: 2, c: 39409 }, 39419, 39416, 39425, 39439, 39429, 39394, 39449, 39467, 39479, 39493, 39490, 39488, 39491, 39486, 39509, 39501, 39515, 39511, 39519, 39522, 39525, 39524, 39529, 39531, 39530, 39597, 39600, 39612, 39616, 39631, 39633, { f: 2, c: 39635 }, 39646, [12221, 39647], { f: 2, c: 39650 }, 39654, 39663, 39659, 39662, 39668, 39665, 39671, 39675, 39686, 39704, 39706, 39711, { f: 2, c: 39714 }, [12222, 39717], { f: 4, c: 39719 }, 39726, [12223, 39727], [12224, 39730], 39748, 39747, 39759, { f: 2, c: 39757 }, 39761, 39768, 39796, 39827, 39811, 39825, { f: 2, c: 39830 }, { f: 2, c: 39839 }, 39848, 39860, 39872, 39882, 39865, 39878, 39887, { f: 2, c: 39889 }, 39907, 39906, 39908, 39892, 39905, 39994, 39922, 39921, 39920, 39957, 39956, 39945, 39955, 39948, 39942, 39944, 39954, 39946, 39940, 39982, 39963, 39973, 39972, 39969, 39984, 40007, 39986, 40006, 39998, 40026, 40032, 40039, 40054, 40056, 40167, 40172, 40176, 40201, 40200, 40171, 40195, 40198, 40234, 40230, 40367, 40227, 40223, 40260, 40213, 40210, 40257, 40255, 40254, 40262, 40264, { f: 2, c: 40285 }, 40292, 40273, 40272, 40281, 40306, 40329, 40327, 40363, 40303, 40314, 40346, 40356, 40361, 40370, 40388, 40385, 40379, 40376, 40378, 40390, 40399, 40386, 40409, 40403, 40440, 40422, 40429, 40431, 40445, { f: 2, c: 40474 }, 40478, [12228, 40565], 40569, 40573, 40577, 40584, { f: 2, c: 40587 }, 40594, 40597, 40593, 40605, [12230, 40613], 40617, 40632, 40618, 40621, 38753, 40652, { f: 3, c: 40654 }, 40660, 40668, 40670, 40669, 40672, 40677, 40680, 40687, 40692, { f: 2, c: 40694 }, [12235, 40697], { f: 2, c: 40699 }, [12236, 40701], { f: 2, c: 40711 }, 30391, 40725, 40737, 40748, 40766, [12241, 40778], [12242, 40786], 40788, 40803, { f: 3, c: 40799 }, { f: 2, c: 40806 }, 40812, 40810, 40823, 40818, 40822, 40853, [12244, 40860], [12245, 40864], 22575, 27079, 36953, 29796, 0, { f: 76, c: 9472 }, { f: 20, c: 9312 }, { f: 10, c: 8544 }, 13129, 13076, 0, 13133, 0, 13095, 0, 13110, 13137, 0, 13069, 13094, 0, 13099, 13130, 0, { f: 3, c: 13212 }, { f: 2, c: 13198 }, 13252, 13217, 12317, 12319, 8470, 13261, 0, { f: 5, c: 12964 }, { f: 2, c: 12849 }, 12857, 13182, 13181, 13180, 8750, 8721, { s: 3 }, 8735, 8895, 0, 0, 21854, { s: 7 }, 167133, 0, 0, 28976, 0, 40407, { s: 4 }, 64054, 0, 0, 22169, 15694, { s: 4 }, 20448, 0, 0, 36544, 0, 194797, { s: 4 }, 153716, 32363, 33606, 167670, { s: 3 }, 40572, 0, 0, 26171, 0, 40628, { s: 4 }, 26629, { s: 5 }, 23650, 0, 194780, 0, 32353, 0, 0, 64070, { s: 5 }, 34083, 37292, { s: 7 }, 34796, { s: 8 }, 25620, 0, 0, 39506, { s: 4 }, 64074, 0, 194692, { s: 4 }, 31774, { s: 6 }, 64016, 25681, 0, 0, 63980, 22625, 39002, 0, 194679, { s: 3 }, 31153, 0, 28678, { s: 9 }, 22218, { s: 3 }, 21085, 0, 28497, 37297, { s: 10 }, 64106, { s: 6 }, 38960, 0, 40629, { s: 9 }, 33802, 63939, { f: 2, c: 63890 }, 63897, 0, 34847, 194575, 0, 194771, 194584, { s: 7 }, 137754, 23643, { s: 4 }, 25890, 0, 0, 26618, 0, 26766, 0, 148432, 194848, { s: 21 }, 34110, { s: 15 }, 30562, { s: 12 }, 65075, 0, { f: 2, c: 65073 }, { s: 4 }, 65072, { f: 2, c: 65077 }, { f: 2, c: 65081 }, 0, 0, { f: 2, c: 65079 }, { f: 2, c: 65087 }, { f: 2, c: 65085 }, { f: 4, c: 65089 }, { f: 2, c: 65083 }, { s: 41 }, { f: 3, c: 12436 }, 0, 0, 22099, { s: 41 }, 65508, 65287, 65282, 0, 9665, 9655, 8681, 8679, 8678, 8680, 9634, 9831, 9825, 9828, 9826, 13216, 13218, { f: 2, c: 13220 }, 13207, 8467, 13208, 13235, 13234, 13233, 13232, { f: 3, c: 13189 }, 13259, 13200, 13268, 13206, 13090, 13078, 13080, 13077, 13059, 13091, 13143, 13122, 13113, 13115, 13056, 13105, 13127, 13086, 13098, 0, 13183, 8481, 9742, 12342, 12320, { s: 3 }, { f: 9, c: 9352 }, { f: 20, c: 9332 }, 12881, { f: 10, c: 8560 }, { f: 10, c: 12882 }, { f: 26, c: 9372 }, 12867, 12861, 12863, 12852, 12856, 12851, 12860, 12866, 12862, 12854, 12853, 12859, 12864, 12858, 12976, 12973, 12969, 12975, 12948, 12970, 12952, 12971, 12946, 12945, 12947, 12972, 12974, 12950, { s: 8 }, { f: 3, c: 9131 }, 0, { f: 3, c: 9127 }, 0, 13260, 13061, 0, 0, 13215, 13219, 13222, 0, 0, 12958, { f: 2, c: 13192 }, 13256, 8749, 0, 12848, { f: 6, c: 12842 }, 12855, 12865, 10145, { s: 3 }, 9673, 9824, 9829, 9827, 9830, { f: 4, c: 9728 }, 9758, { f: 2, c: 9756 }, 9759, 12953, 9450, { f: 2, c: 8554 }, { s: 3 }, { f: 8, c: 9601 }, 9615, 9614, 9613, 9612, 9611, 9610, 9609, { f: 2, c: 9620 }, { f: 2, c: 9581 }, 9584, 9583, 9552, 9566, 9578, 9569, { f: 2, c: 9698 }, 9701, 9700, 0, 0, { f: 3, c: 9585 }, { s: 20 }, 20956, 29081, { f: 9, c: 10102 }, { s: 3 }, { f: 2, c: 8570 }, { s: 3 }, 8575, 8458, 8457, 0, 0, 12292, 8646, { f: 2, c: 8644 }, 0, { f: 4, c: 12535 }, 0, 0, 12957, { s: 3 }, 13179, { s: 3 }, 13107, 13134, { s: 30 }, 32394, 35100, 37704, 37512, 34012, 20425, 28859, 26161, 26824, 37625, 26363, 24389, [12033, 20008], 20193, 20220, 20224, 20227, 20281, 20310, 20370, 20362, 20378, 20372, 20429, 20544, 20514, 20479, 20510, 20550, 20592, 20546, 20628, 20724, 20696, 20810, 20836, 20893, 20926, 20972, 21013, 21148, 21158, 21184, 21211, 21248, 0, 21284, 21362, 21395, 21426, 21469, 64014, 21660, 21642, 21673, 21759, 21894, 22361, 22373, 22444, 22472, 22471, 64015, 0, 22686, 22706, 22795, 22867, 22875, 22877, 22883, 22948, 22970, 23382, 23488, 29999, 23512, 0, 23582, 23718, 23738, 23797, 23847, 23891, 0, 23874, 23917, { f: 2, c: 23992 }, 24016, 24353, 24372, 24423, 24503, 24542, 24669, 24709, 24714, 24798, 24789, 24864, 24818, 24849, 24887, 24880, 24984, 25107, 25254, 25589, 25696, 25757, 25806, 25934, 26112, 26133, 26121, 26158, 0, 26148, 26213, 26199, 26201, 64018, 26227, 26265, 26272, 26290, 26303, 26362, 26382, 0, 26470, 26555, 26706, 26560, 0, 26692, 26831, 64019, 26984, 64020, 27032, 27106, 27184, 27243, 27206, 27251, 27262, 27362, 27364, 27606, 27711, 27740, 27782, 27759, 27866, 27908, 28039, 28015, 28054, 28076, 28111, 28152, 28146, 28156, 28217, 28252, 28199, 28220, 28351, 28552, 28597, 28661, 28677, 28679, 28712, 28805, 28843, 28943, 28932, 29020, { f: 2, c: 28998 }, 0, 29121, 29182, 29361, 29374, 29476, 64022, 29559, 29629, 29641, 29654, 29667, 29650, 29703, 29685, 29734, 29738, 29737, 29742, 0, 29833, 29855, 29953, 30063, 30338, 30364, 30366, 30363, 30374, 64023, 30534, 21167, 30753, 30798, 30820, 30842, 31024, { f: 3, c: 64024 }, 31124, 64027, 31131, 31441, 31463, 64028, 31467, 31646, 64029, 32072, 0, 32183, 32160, 32214, 32338, 32583, 32673, 64030, 33537, 33634, 33663, 33735, 33782, 33864, 33972, 34131, 34137, 34155, 64031, 34224, { f: 2, c: 64032 }, 34823, 35061, 35346, 35383, 35449, 35495, 35518, 35551, 64034, 35574, 35667, 35711, 36080, 36084, 36114, 36214, 64035, 36559, 0, 64037, 36967, 37086, 64038, 37141, 37159, 37338, 37335, 37342, { f: 2, c: 37357 }, { f: 2, c: 37348 }, 37382, 37392, 37386, 37434, 37440, 37436, 37454, 37465, 37457, 37433, 37479, 37543, { f: 2, c: 37495 }, 37607, 37591, 37593, 37584, 64039, 37589, 37600, 37587, 37669, 37665, 37627, 64040, 37662, 37631, 37661, 37634, 37744, 37719, 37796, 37830, 37854, 37880, 37937, 37957, 37960, 38290, 0, 64041, 38557, 38575, 38707, 38715, 38723, 38733, 38735, [12205, 38737], 0, 38999, 39013, { f: 2, c: 64042 }, 39207, 64044, 39326, 39502, 39641, 39644, 39797, 39794, 39823, 39857, 39867, 39936, 40304, 40299, 64045, 40473, 40657, 0, 92, { s: 634 }, 8364, 8486, 0, 0, 64256, { f: 2, c: 64259 }, 257, 299, 363, 275, 333, 256, 298, 362, 274, 332, { f: 4, c: 8539 }, { f: 2, c: 8531 }, 8304, { f: 6, c: 8308 }, { f: 10, c: 8320 }, 461, 282, 0, 7868, 463, 0, 296, 465, 0, 467, 366, 360, 462, 283, 0, 7869, 464, 0, 297, 466, 0, 468, 367, 361, 593, 8049, 8048, 509, 0, 596, 0, 0, 601, 0, 0, 602, 0, 0, 603, 8051, 8050, 0, 331, 629, 652, 0, 0, 658, 643, 720, { s: 682 }, { f: 10, c: 12832 }, { s: 108 }, { f: 4, c: 12892 }, { f: 15, c: 12977 }, { s: 50 }, { f: 26, c: 9424 }, { f: 26, c: 9398 }, { s: 48 }, { f: 47, c: 13008 }, 0, { f: 10, c: 12928 }, 12944, { f: 6, c: 12938 }, 0, 12959, { s: 6 }, { f: 2, c: 12960 }, 12955, 12954, 12963, 12962, 12951, 0, 12956, 12949, { s: 6 }, 9676, { s: 11 }, 10111, { f: 10, c: 9451 }, { s: 510 }, 8414, { s: 815 }, 13274, { s: 3 }, 8448, 13250, 0, 0, 8453, 0, 13169, 0, 0, 13197, 13211, { s: 3 }, { f: 2, c: 13271 }, { s: 3 }, { f: 2, c: 13057 }, 13060, 13062, 0, 13064, 0, 13063, 13066, 0, 13065, 0, 13067, 0, 13068, { f: 6, c: 13070 }, 0, 13079, 0, 13081, 0, { f: 4, c: 13082 }, { f: 3, c: 13087 }, 13092, 0, 13093, 0, 0, { f: 2, c: 13096 }, 0, 13101, 0, 0, { f: 3, c: 13102 }, 13106, 0, 0, { f: 2, c: 13108 }, 13116, { s: 3 }, 13111, 0, 13112, 13114, 13117, 13121, { f: 3, c: 13118 }, { f: 4, c: 13123 }, 13128, { f: 2, c: 13131 }, { f: 2, c: 13135 }, 0, 0, 13138, 13140, 0, 0, 13139, { f: 2, c: 13141 }, { s: 132 }, 8501, 976, 8714, 8463, 0, 981, 987, 977, 0, { f: 2, c: 9832 }, 9836, { s: 5 }, 12347, 0, { f: 3, c: 12339 }, 8252, 8265, { s: 5 }, 8723, 0, 8771, { f: 2, c: 8818 }, { s: 6 }, { f: 2, c: 12312 }, { f: 2, c: 65375 }, { s: 10 }, 9115, { f: 2, c: 9117 }, 9120, { s: 4 }, 9121, { f: 2, c: 9123 }, 9126, { s: 12 }, [9116, 9119, 9122, 9125, 9130], { s: 8 }, 9986, 0, 0, 12349, 0, 12447, 0, 0, 8709, 8864, 8854, 8856, 8853, 8855, { s: 4 }, 9664, 9654, { s: 4 }, 8656, 8596, { f: 2, c: 8600 }, { f: 2, c: 8598 }, 8652, 8651, { s: 10 }, 12336, 8967, { s: 8 }, 10048, 10047, { s: 7 }, 9643, 0, 9642, 0, 10010, { s: 12 }, 9702, { s: 4 }, 10070, { s: 379 }, { f: 2, c: 65093 }, { s: 679 }, 64103, 64098, 32227, [12232, 40643], 28331, 64082, 64061, 64069, 64062, 27114, 28212, 64096, 64071, 64056, 64066, 64078, 34395, 64105, 64052, 64099, 25581, 25802, 30799, 64084, 63856, 64077, 64097, 64072, 64076, { f: 2, c: 64091 }, 64081, 64067, 64090, 28041, 29376, 0, 194885, 64086, 64080, 64049, 64059, 24034, 64063, 64101, 21373, 64055, 64095, 24501, 64064, 0, 64083, 0, 64085, 64104, 64068, 64089, 26202, 64053, 64075, 64100, 64065, 64048, 0, 64057, 64051, 27493, 64058, 27599, 64050, 25150, 64079, 63773, 63964, 63798, 28122, 63952, 26310, 27511, 64087, 37706, 0, 37636, { s: 120 }, 133390, { s: 120 }, 35999, 11991, [11965, 158033], { s: 5 }, 37555, 38321, 0, 0, 194812, { s: 13 }, 194965, { s: 8 }, 194794, 0, 26478, 11974, 0, 194594, { s: 13 }, 13314, 0, 0, 26083, { s: 4 }, 134071, { s: 10 }, 171339, 0, 194611, 24378, { s: 8 }, 11945, 0, 20465, { s: 7 }, 63753, { s: 7 }, 11964, 0, 0, 194732, 26435, { s: 3 }, 133732, 35329, 25142, 0, 0, 21555, 23067, { s: 3 }, 25221, 0, 0, 194819, { s: 6 }, 21567, { s: 9 }, 27506, { s: 4 }, 29986, 19256, 0, 0, 24063, { s: 6 }, 194827, 29626, 134047, { s: 3 }, 194600, 0, 194849, { s: 5 }, 194623, { s: 16 }, 194675, { f: 2, c: 11916 }, 23577, { s: 3 }, 131083, 23426, 194642, { s: 5 }, 11997, [11999, 39136], [11998, 169599], 14221, 0, [11927, 14586], 0, 194887, 0, [11909, 20155], 131490, { s: 7 }, 13599, 0, 194738, 0, 0, [11971, 35200], { s: 4 }, 31237, { s: 4 }, 35498, 0, 32085, 0, 28568, { s: 7 }, 25591, 30246, { s: 4 }, [11978, 163767], { s: 5 }, 146686, { s: 5 }, 13351, 0, 0, 33067, 0, 0, 194842, { s: 5 }, 11950, { s: 5 }, 194714, { s: 3 }, 194831, { s: 19 }, 22305, 135741, 194586, 0, 64003, { s: 7 }, 21534, 15240, 20839, { s: 4 }, 63839, { s: 9 }, 20023, { s: 13 }, [11946, 150804], 24421, 23020, 194658, 0, 24217, { s: 46 }, 13416, { s: 8 }, 21200, { s: 9 }, 26625, 0, 195024, 195039, { s: 5 }, 153215, 0, 0, 11959, { s: 4 }, 36534, 63775, { s: 3 }, 63875, { s: 5 }, 31867, 63906, 0, 63898, 0, [11961, 32770], 157360, { s: 4 }, [11911, 132648], 0, 0, 131210, 194604, [11915, 13630], { s: 4 }, 21589, 0, 22841, 0, 0, 23414, 194669, 23572, 14306, 23782, 0, 20040, 0, 0, 194742, { s: 4 }, 158105, 25371, 0, 0, 26211, 0, 194779, 0, 0, 27126, 27014, { s: 3 }, 27596, 0, 28183, 0, 0, 27818, { s: 3 }, [11942, 20012], 0, 0, 29935, 30069, 30188, 30286, 16305, 30570, 30633, { s: 6 }, 31571, 0, 0, 16996, { s: 3 }, 194924, 0, 0, 32328, { s: 5 }, 11955, { s: 4 }, 33089, 17491, 0, [11966, 33401], [11967, 64094], [11968, 64093], 0, 20857, 33626, { s: 3 }, 17701, 0, 34292, 131248, { s: 4 }, 34429, 0, 13358, 35014, { s: 6 }, 18406, { s: 8 }, 36808, { s: 19 }, 166279, 0, 0, 167447, 0, 0, 38969, { s: 6 }, 39432, { s: 4 }, 39903, { s: 10 }, 148206, { s: 5 }, 21385, 0, 64017, 194785, 0, 146622, 132625, 0, { f: 2, c: 19972 }, 19999, 20011, { f: 2, c: 20015 }, { f: 2, c: 20032 }, 20036, [11907, 20058], 20095, 20109, 20118, 20153, 20176, 20192, 20221, 20223, 20235, 20245, 20320, 20283, 20297, 20308, 20346, { f: 2, c: 20349 }, 20375, 20414, 20431, 20477, { f: 2, c: 20480 }, 20496, 20507, 20519, 20526, 20567, 20582, 20586, 20539, 20623, 20630, 20636, 20684, 20710, 20713, 20719, 20744, 20747, 20752, 20763, 20766, 20831, 20897, 20924, 0, 20974, 20980, 20993, [11913, 20994], 21011, 21065, 21089, 21094, 21139, 21192, 21232, { f: 2, c: 21258 }, 21310, 21324, 21323, 21345, 21356, 21419, 21466, 21478, 21493, 21543, 21581, 21606, 21611, 21620, 21645, 21654, 21665, 21677, 21689, 21695, 21702, 21709, 21774, 21803, 21813, 21834, 21856, 0, 21896, 21902, 22024, { f: 2, c: 22030 }, 22071, 22079, 22089, 22091, 22095, 22118, 22121, 22127, { f: 2, c: 22129 }, 22165, 22170, { f: 2, c: 22188 }, 22193, 22217, 22237, 22244, 22282, 22293, 22307, 22319, { f: 2, c: 22323 }, 22348, 22384, 22412, 22428, 22456, 22502, 22509, { f: 2, c: 22517 }, 22527, 22537, 22560, 22578, 22652, 22656, 22697, 22734, 22736, 22740, 22746, 22761, 22796, 22820, 22831, 22881, 22893, 22986, 22994, 23005, { f: 2, c: 23011 }, 23044, 23052, 23075, 23111, 23125, 23139, 23149, 23166, 23198, 23207, 23212, 23219, 23264, 23296, 23321, 23333, 23341, 23361, 23420, { f: 2, c: 23422 }, 23434, [11919, 23587], 23595, 23600, 23651, 23657, 23676, 23755, 23762, 23796, 23844, 23846, 23875, 23878, 23882, 23954, 23956, 23961, 23968, 24024, 24032, 24056, 24064, 24082, { f: 2, c: 24084 }, 24088, 24110, 24152, { f: 2, c: 24171 }, 24232, 24234, { f: 2, c: 24254 }, 0, 24274, 24327, 24334, { f: 2, c: 24348 }, 24354, 24360, 24374, 24379, 24384, [12089, 24400], 24408, 24420, 24457, 24476, 24487, 24484, 24495, 24504, [11926, 24516], 24521, 24545, 24553, 24557, 24572, 24599, 24602, 24627, 24673, 24703, 24734, 24740, 24752, 24779, 24795, 24824, { f: 3, c: 24850 }, 24860, 24956, 24973, 24991, 25e3, 25026, 25055, 25109, 25129, 25155, 25158, [11928, 25164], 25169, 25174, 25284, 25340, 25354, 25357, 25368, 25401, { f: 2, c: 25410 }, 25445, 25460, 25469, 25476, 25479, 25488, 25502, 25553, 25564, 25609, 25616, 25634, 25684, 25691, 25709, 25723, { f: 2, c: 25790 }, 25829, 25847, 25851, 25860, 25878, 25881, 25927, 25959, 25985, 25989, 26050, 26096, 26098, 26156, 26188, { f: 2, c: 26203 }, 26209, 26219, 0, 26276, 26312, 26348, 26373, 26387, 26419, 26440, 26444, 26486, 26491, 26544, 26546, 26617, 26583, 26585, 26608, 26668, { f: 2, c: 26672 }, 26715, 26738, 26741, 26746, 26756, 26789, 26802, 26832, 26838, 26856, 26861, { f: 2, c: 26864 }, 26876, 26897, 26899, 26933, 26939, 26967, 26979, 26994, { f: 2, c: 27007 }, 27046, 27053, 27063, { f: 2, c: 27094 }, 27137, 27151, 27157, 27176, 27188, 27198, 27205, { f: 2, c: 27216 }, 27222, 27227, 27267, 27273, 27281, { f: 3, c: 27293 }, 27356, 27367, 27372, 27422, 27428, 27445, 27462, 27478, 27488, 27522, 27582, 27617, 27633, 27664, 27699, [11937, 27701], 11938, 27737, 27766, 27771, 27781, 27797, 27804, 27856, 27860, 27862, 27872, { f: 2, c: 27883 }, 27886, 27914, 27918, 27921, 27950, 27991, 27998, 28005, 28034, 28095, 28100, 28106, 28118, 28137, 28194, 28241, 28359, 28362, 28366, 28413, 28442, 28458, 28463, 28467, 28506, 28510, 28514, 28541, 28555, 28557, 28562, 28564, 28570, { f: 2, c: 28583 }, 28598, 28634, 28638, 0, 28729, 28732, 0, 28756, { f: 2, c: 28765 }, 28772, [11939, 28780], 28798, 28801, 28821, 28855, { f: 2, c: 28883 }, 28888, 28892, 28935, 28960, 28977, 29002, 29010, 29024, 29049, 29074, 0, 29131, 29139, 29142, 29184, 29213, 29227, 29240, 29249, 29267, { f: 2, c: 29269 }, 29276, 29325, [11944, 29357], 29364, 29383, 29435, { f: 2, c: 29444 }, 29480, 29489, 29507, 29548, 29564, 29571, { f: 2, c: 29573 }, 29589, { f: 3, c: 29598 }, 29606, 29611, 29621, 29623, 29628, 29647, 29657, 29673, 29684, 29693, 29700, 29706, { f: 2, c: 29722 }, 29732, 29736, 29740, { f: 3, c: 29743 }, 29753, 29764, 29767, 29771, 29773, 29777, 29783, 29798, 29803, 29809, 29824, { f: 3, c: 29829 }, 29840, 29848, 29852, 29856, 29859, 29864, 29867, 29877, 29887, 29896, 29914, 29918, 30030, 30073, 30081, 30096, [12135, 30098], 30099, 30132, 30180, 30201, 30208, 30218, { f: 2, c: 30229 }, 30233, 30238, 30253, 30261, 30275, 30283, 30309, 30317, 30319, 30321, 30324, { f: 2, c: 30372 }, 30405, 30412, 30444, 30460, 30516, 30518, 30556, { f: 2, c: 30559 }, 30578, 30589, 30613, 30634, 30694, 30704, 30708, 30726, 30754, { f: 2, c: 30765 }, 30768, 30773, 30824, 30878, 30920, 30924, 30926, 30948, { f: 2, c: 30944 }, 30962, 30967, 30971, 31025, 0, [11949, 31035], 31037, 31045, { f: 2, c: 31067 }, 31115, 31126, 31128, [12145, 31160], 31163, 31178, 31194, 31235, 31241, 31249, 31262, 31277, 31289, 31301, 31308, 31325, 0, 31341, 31352, 31392, 31395, 31411, { f: 2, c: 31419 }, 31430, 31495, 31508, 31527, 31537, 31559, 31566, 31584, 31593, 31597, 31602, 31633, 31663, 31703, 31705, 31755, 31759, 31776, 31782, 31793, 31798, 31825, 31833, 31847, 31854, 31856, 31932, 31935, { f: 2, c: 31944 }, 31959, 31961, 31965, 31979, { f: 3, c: 32007 }, 32019, 32029, 32035, 32065, 32083, 32089, 32093, 32122, 32134, { f: 2, c: 32139 }, 32204, 32235, 32241, 32249, 32264, 32273, 32277, 32288, 32327, 32354, 32366, 32371, 32397, 32401, 32408, 32580, 32591, [11947, 11954, 32594], [11953, 32595], 32609, 32657, 32703, 32718, 32735, 32741, 32748, { f: 2, c: 32750 }, 32762, 32782, 32785, 32788, 32804, 32806, 32826, 32828, 32864, 32881, 32885, 32926, 32934, 32939, { f: 2, c: 32983 }, 33046, 33048, 33082, 33098, 33100, 33153, 33156, 33204, 33231, 33273, 33283, 33313, 33330, 33332, 33350, 33355, 33359, 33422, 33454, 33463, 33470, 33478, 33534, 33603, 33617, 33621, 33670, 33677, 33682, 33688, 33705, { f: 2, c: 33727 }, 33770, 33807, 33809, 33866, 33910, 33960, 33967, 33984, 33986, 34032, 34045, 34060, 34100, 34142, 34191, 34231, 34254, 34221, 34322, 34345, 34386, 34403, 34412, 34415, 34426, 34445, 34449, 34456, { f: 2, c: 34471 }, 34554, 34557, 34571, 34579, 34585, 34590, 34600, 34622, 34673, 34696, 34713, { f: 2, c: 34732 }, 34741, 34774, 34795, 34797, 34817, 0, 34822, 34827, 34836, 34844, 34902, 34911, [11970, 34916], 34968, 34986, { f: 2, c: 35005 }, 35018, 35026, 35035, { f: 2, c: 35056 }, 35078, { f: 3, c: 35096 }, 35111, 35120, 35134, 35195, 35284, 35286, 35301, 35313, 35335, 35343, 35349, 35362, 35406, 35455, 35572, 35615, 35639, { f: 2, c: 35651 }, 35668, 35740, 35742, 35911, 35924, 35955, 36004, 36057, 36065, 36088, 36094, 36123, 36201, 36204, 36228, 36237, 36245, 36262, 36294, 36302, 36324, 36332, 36384, 36427, 36460, 36464, 36474, 36498, 36526, 36531, 36561, 36564, 36601, 36631, 36662, 36774, [12193, 36789], [11981, 36790], 0, 36832, 36836, 36854, 36866, 36908, 36932, 37e3, 37013, 37017, 37019, 37026, 37044, 37079, 37085, 37108, 37143, 37148, 37169, 37178, 37181, 37192, 37211, 37217, 37220, 37262, 37278, 37288, { f: 2, c: 37293 }, 37298, 37308, 37360, 37367, 37371, 37383, 37416, 37427, 37432, 37443, 37447, 37455, 37472, 37570, { f: 2, c: 37579 }, 37599, 37645, 37653, 37663, 37671, 37703, 37714, 0, 37738, 37741, 37787, 37818, 37801, 37825, 37834, 37858, 37882, 37885, 37903, 37940, 37951, 37973, 37995, 38002, [11986, 38264], 38310, 38313, 0, 38324, 38333, 38362, [11983, 11990, 38429], 38465, 38488, 38532, 38564, 38569, 38610, 195060, 38622, 38633, 38641, 38658, 38665, 38746, 38755, 38766, 38771, 38810, 38818, { f: 2, c: 38837 }, 38873, 38878, 38900, 38922, 38926, 38942, 38947, 38955, 38974, { f: 2, c: 38994 }, 39001, 39020, 39096, 39098, 39103, 39112, 39141, { f: 2, c: 39218 }, 39232, 39245, 39260, 39263, 39345, { f: 2, c: 39353 }, 39369, 39426, 39446, 39460, 39463, { f: 2, c: 39469 }, 39478, 39480, 39498, 39510, { f: 2, c: 39605 }, 39673, 39683, 39712, { f: 2, c: 39731 }, 39795, 39801, 39847, 39873, 39879, 39895, 39911, 39915, 39927, 39930, 39933, 39947, 39975, 39978, 39990, 40001, 40019, 40035, 40048, 40055, 40194, 40258, 40263, 40291, 40297, 40316, 40318, 40333, 40369, 40387, 40391, 40406, 40415, 40427, 40436, 40469, 40477, 40612, 40616, 40620, 40679, 40686, 40720, 40722, 40727, 40729, 40751, 40759, 40761, 40769, 40773, 40791, 40808, 40817, 40821, 40848, 40852, 40866, 0, 13317, 194564, 22048, 24267, 11925, 0, 144954, 0, 28665, 28390, 29107, [11940, 64073], { s: 4 }, [11980, 64102], 0, 23986, 0, 20435, 20697, 20720, 20931, 22134, 27220, 27905, 28112, 28226, 28377, 29668, 29729, 30060, 30801, 34805, 144382, 29608, 15091, 13531, 17420, 16010, 0, 0, 19432, 0, 16090, 15138, 0, 17786, 16531, 0, 18021, 16643, 17043, 18094, 13448, 140809, { f: 3, c: 63584 }, 63610, 63615, { s: 23 }, { f: 2, c: 8836 }, { f: 2, c: 8842 }, 8713, 0, { f: 2, c: 8965 }, { s: 9 }, { f: 2, c: 8741 }, { s: 14 }, 8802, 0, 8773, 8776, { f: 2, c: 8822 }, { s: 4 }, 8487, { s: 209 }, { f: 2, c: 8922 }, 8533, 8984, { f: 2, c: 7742 }, { f: 2, c: 504 }, 470, 472, 474, 476, 260, 728, 317, 346, 350, 356, 377, 379, 261, 731, 318, 347, 711, 351, 357, 378, 733, 380, 340, 258, 313, 262, 268, 280, 270, 323, 327, 336, 344, 368, 354, 341, 259, 314, 263, 269, 281, 271, 273, 324, 328, 337, 345, 369, 355, 729, 264, 284, 292, 308, 348, 364, 265, 285, 293, 309, 349, 365, 625, 651, 638, 620, 622, 633, 648, 598, 627, 637, 642, 656, 635, 621, 607, 626, 669, 654, 609, 624, 641, 295, 661, 660, 614, 664, 450, 595, 599, 644, 608, 403, 616, 649, 600, 604, 606, 592, 623, 650, 612, 594, 653, 613, 674, 673, 597, 657, 634, 615, 865, 712, 716, 721, 8255, 783, { f: 5, c: 741 }, 0, 0, 805, 812, 825, 796, { f: 2, c: 799 }, 829, 809, 815, 734, 804, 816, 828, 820, { f: 2, c: 797 }, { f: 2, c: 792 }, 810, { f: 2, c: 826 }, 794, { s: 3 }, { f: 2, c: 610 }, 618, 628, 630, 632, 640, 655, 665, 668, 671, 688, 690, 695, 704, { f: 2, c: 736 }, { s: 6 }, 8862, { s: 287 }, 12348, 12543, 0, { f: 2, c: 12310 }, 9838, 9835, { f: 2, c: 10548 }, 10687, 0, 12448, 0, { f: 2, c: 10746 }, { s: 13 }, 962, { f: 10, c: 9461 }, { f: 2, c: 9750 }, 9649, { f: 10, c: 12784 }, 0, { f: 6, c: 12794 }, { f: 15, c: 9150 }, 0, 0, 10003, 0, 9251, 9166, { f: 4, c: 9680 }, { f: 2, c: 8263 }, 0, 8273, 8258, { f: 16, c: 12688 }, { s: 13 }, { f: 2, c: 9136 }, { f: 12, c: 9842 }, { f: 2, c: 12441 }, 8413, { s: 450 }, 20296, 20319, 20330, 20332, 20494, 20504, 20545, 20722, 20688, 20742, 20739, 20789, 20821, 20823, 13493, 20938, 20962, 21079, 21196, 21206, 21243, 21276, 21347, 21405, 21522, 21631, 21640, 21840, 21889, 21933, 21966, 22075, 22174, 22185, 22195, 22391, 22396, 135963, 22479, 22500, 22628, 22665, 136302, 22738, 22752, 34369, 22923, 22930, 22979, 23059, 23143, 23159, 23172, 23236, 137405, 23421, 23443, 23570, 64060, 136884, 23674, 23695, 23711, 23715, 23722, 23760, 138804, 23821, 23879, 23937, 23972, 23975, 24011, 24158, 24313, 24320, 24322, 24355, 24381, 24404, 24445, 24589, 24596, 24600, 24629, 24647, 24733, 24788, 24797, 24875, 25020, 25017, 25122, 25178, 25199, 25302, 25468, 25573, 25721, 25796, 25808, 25897, 26013, 26170, 26146, 26155, 26160, 26163, 26184, 143812, { f: 2, c: 26231 }, 26253, 26299, 26331, 26344, 26439, 26497, 26515, 26520, 26523, 26620, 26653, 26787, 26890, 26953, 144836, 26946, 26980, 27045, 27087, 15286, 15299, 27113, 27125, 145215, 27195, 145251, 27284, 27301, 15375, 27419, 27436, 27495, 27561, 27565, 27607, 27647, 27653, 27764, 27800, 27899, 27846, 27953, 27961, 27967, 27992, 28052, 28074, 28123, 28125, 28228, 28254, 28337, 28353, 28432, 28505, 28513, 28542, 28556, 28576, 28604, 28615, 28618, 28656, 28750, 28789, 28836, 28900, 28971, 28958, 28974, 29009, 29032, 29061, 29063, 29114, 29124, 29205, 15935, 29339, 149489, 29479, 29520, 29542, 29602, 29739, 29766, 29794, 29805, 29862, 29865, 29897, 29951, 29975, 16242, 30158, 30210, 30216, 30308, 30337, 30365, 30378, 30390, 30414, 30420, 30438, 30449, 30474, 30489, { f: 2, c: 30541 }, 30586, 30592, 30612, 30688, 152718, 30787, 30830, 30896, 152846, 30893, 30976, 31004, 31022, 31028, 31046, 31097, 31176, 153457, 31188, 31198, 31211, 31213, 31365, 154052, 31438, 31485, 31506, 31533, 31547, 31599, 31745, 31795, 155041, 31853, 31865, 31887, 31892, 31904, 31957, 32049, 32092, 32131, 32166, 32194, 32296, 32663, 32731, 32821, 32823, 32970, 32992, 33011, 33120, { f: 2, c: 33127 }, 33133, 33211, 33226, 33239, 17499, 33376, 33396, 158463, 33441, { f: 2, c: 33443 }, 33449, 33471, 33493, 33533, 33536, 33570, 33581, 33594, 33607, 33661, 33703, 33743, 33745, 33761, 33793, 33798, 33887, 33904, 33907, 33925, 33950, 33978, 159296, 34098, 34078, 34095, 34148, 34170, 34188, 34210, 34251, 34285, 34303, { f: 2, c: 34308 }, 34320, 159988, 34328, 34360, 34391, 34402, 17821, 34421, 34488, 34556, 34695, 17898, 34826, 34832, 35022, 161412, 35122, 35129, 35136, 35220, 35318, 35399, 35421, 35425, 35445, 35536, 35654, 35673, 35689, 35741, 35913, 35944, 36271, 36305, 36311, 36387, 36413, 36475, 164471, 18500, 36602, 36638, 36653, 36692, 164813, 36840, 36846, 36872, 36909, 37015, 37043, 37054, { f: 2, c: 37060 }, 37063, 37103, 37140, 37142, { f: 2, c: 37154 }, 37167, 37172, 37251, 37361, 37705, { f: 2, c: 37732 }, 37795, 37855, 37892, 37939, 37962, 37987, 38001, 38286, 38303, 38316, 38326, 38347, 38352, 38355, 18864, 38366, 38565, 38639, 38734, 38805, 38830, 38842, 38849, 38857, 38875, 38998, 39143, 39256, 39427, 39617, 39619, 39630, 39638, 39682, 39688, 19479, 39725, 39774, 39782, 39812, 39818, 39838, 39886, 39909, 39928, 39971, { f: 2, c: 40015 }, 40037, { f: 2, c: 40221 }, 40259, 40274, 40330, 40342, 40384, 40364, 40380, 172432, 40423, 40455, 40606, 40623, 40855, 131209, 19970, 19983, 19986, 20009, 20014, 20039, 131234, 20049, 13318, 131236, 20073, 20125, 13356, 20156, 20163, 20168, 20203, 20186, 20209, 20213, 20246, 20324, 20279, 20286, 20312, 131603, { f: 2, c: 20343 }, 20354, 20357, 20454, 20402, 20421, 20427, 20434, 13418, 20466, 20499, 20508, 20558, 20563, 20579, 20643, 20616, { f: 2, c: 20626 }, 20629, 20650, 131883, 20657, { f: 2, c: 20666 }, 20676, 20679, 20723, 131969, 20686, 131953, 20692, 20705, 13458, 132089, 20759, 132170, 20832, 132361, 20851, 20867, 20875, 13500, 20888, 20899, 20909, 13511, 132566, 20979, 21010, 21014, 132943, 21077, 21084, 21100, 21111, 21124, 21122, 133127, 21144, 133178, 21156, { f: 2, c: 21178 }, 21194, 21201, 133305, 21239, 21301, 21314, 133500, 133533, 21351, 21370, 21412, 21428, 133843, 21431, 21440, 133917, { f: 2, c: 13661 }, 21461, 13667, 21492, 21540, 21544, 13678, 21571, 21602, 21612, 21653, 21664, 21670, 21678, 21687, 21690, 21699, 134469, 21740, 21743, 21745, 21747, { f: 2, c: 21760 }, 21769, 21820, 21825, 13734, 21831, 13736, 21860, 134625, 21885, 21890, 21905, 13765, 21970, 134805, 134765, 21951, 21961, 21964, 21969, 21981, 13786, 21986, 134756, 21993, 22056, 135007, 22023, 22032, 22064, 13812, 22077, 22080, 22087, 22110, 22112, 22125, 13829, 22152, 22156, 22173, 22184, 22194, 22213, 22221, 22239, 22248, { f: 2, c: 22262 }, 135681, 135765, 22313, 135803, { f: 2, c: 22341 }, 22349, 135796, 22376, 22383, { f: 3, c: 22387 }, 22395, 135908, 135895, 22426, { f: 2, c: 22429 }, 22440, 22487, 135933, 22476, 135990, 136004, 22494, 22512, 13898, 22520, 22523, 22525, 22532, 22558, 22567, 22585, 136132, 22601, 22604, 22631, { f: 2, c: 22666 }, 22669, { f: 2, c: 22671 }, 22676, 22685, 22698, 22705, 136301, 22723, 22733, 22754, { f: 2, c: 22771 }, { f: 2, c: 22789 }, 22797, 22804, 136663, 13969, 22845, 13977, 22854, 13974, 158761, 22879, 136775, { f: 2, c: 22901 }, 22908, 22943, 22958, 22972, 22984, 22989, 23006, 23015, 23022, 136966, 137026, 14031, 23053, 23063, 23079, 23085, 23141, 23162, 23179, 23196, { f: 2, c: 23199 }, 23202, 23217, 23221, 23226, 23231, 23258, 23260, 23269, 23280, 23278, 23285, 23304, 23319, 23348, 23372, 23378, 23400, 23407, 23425, 23428, 137667, 23446, 23468, { f: 2, c: 14177 }, 23502, 23510, 14188, 14187, 23537, 23549, 14197, 23555, 23593, 138326, 23647, { f: 2, c: 23655 }, 23664, 138541, 138565, 138616, 138594, 23688, 23690, 14273, 138657, 138652, 23712, 23714, 23719, 138642, 23725, 23733, 138679, 23753, 138720, 138803, 23814, 23824, 23851, 23837, 23840, 23857, 23865, 14312, 23905, 23914, 14324, 23920, 139038, 14333, 23944, 14336, 23959, 23984, 23988, 139126, 24017, 24023, 139258, 24036, 24041, 14383, 14390, 14400, 24095, 24126, 24137, 14428, 24150, 14433, { f: 2, c: 24173 }, 139643, 24229, 24236, 24249, 24262, 24281, 140062, 24317, 24328, 140205, 24350, 24391, 24419, 24434, 24446, 24463, 24482, 24519, 24523, { f: 3, c: 24530 }, 24546, { f: 2, c: 24558 }, 24563, 14615, 24610, 24612, 14618, 24652, 24725, 24744, 141043, 24753, 24766, 24776, 24793, 24814, 24821, 24848, 24857, 24862, 24890, 14703, 24897, 24902, 24928, 141403, { f: 2, c: 24978 }, 24983, 24997, 25005, 141483, 25045, 25053, 25077, 141711, 25123, 25170, 25185, 25188, 25211, 25197, 25203, 25241, 25301, 142008, 25341, 25347, 25360, { f: 2, c: 142159 }, 25394, 25397, { f: 2, c: 25403 }, 25409, 25412, 25422, 142150, 25433, 142365, 142246, 25452, 25497, 142372, 25492, 25533, { f: 2, c: 25556 }, 25568, { f: 2, c: 25579 }, 25586, 25630, 25637, 25641, 25647, 25690, 25693, 25715, 25725, 25735, 25745, 25759, { f: 2, c: 25803 }, 25813, 25815, 142817, 25828, 25855, 14958, 25871, 25876, 14963, 25886, 25906, 25924, 25940, 25963, 25978, 25988, 25994, 26034, 26037, 26040, 26047, 26057, 26068, 15062, 26105, 26108, 26116, 26120, 26145, 26154, 26181, 26193, 26190, 15082, 143811, 143861, 143798, 26218, { f: 2, c: 26220 }, 26235, 26240, 26256, 26258, 15118, 26285, 26289, 26293, 15130, 15132, 15063, 26369, 26386, 144242, 26393, 144339, 144338, 26445, 26452, 26461, 144336, 144356, 144341, 26484, 144346, 26514, 144351, 33635, 26640, 26563, 26568, 26578, 26587, 26615, 144458, 144465, 144459, 26648, 26655, 26669, 144485, 26675, 26683, 26686, 26693, 26697, 26700, 26709, 26711, 15223, 26731, 26734, 26748, 26754, 26768, 26774, 15213, { f: 3, c: 26776 }, 26780, { f: 2, c: 26794 }, 26804, 26811, 26875, 144612, 144730, 26819, 26821, 26828, 26841, { f: 2, c: 26852 }, 26860, 26871, 26883, 26887, 15239, 144788, 15245, 26950, 26985, 26988, 27002, 27026, 15268, 27030, 27056, 27066, 27068, 27072, 27089, 144953, 144967, 144952, 27107, { f: 2, c: 27118 }, 27123, 15309, 27124, 27134, 27153, 27162, 27165, 145180, { f: 2, c: 27186 }, 27199, 27209, 27258, 27214, 27218, 27236, 145164, 27275, 15344, 27297, 145252, 27307, 27325, 27334, 27348, 27344, 27357, 145407, 145383, { f: 3, c: 27377 }, 27389, 145444, 27403, { f: 3, c: 27407 }, 145469, 27415, 15398, 27439, 27466, 27480, 27500, 27509, [11934, 27514], 27521, 27547, 27566, 146072, 27581, { f: 3, c: 27591 }, 27610, { f: 2, c: 27622 }, 27630, 27650, 27658, 27662, 27702, 146559, 27725, 27739, 27757, 27780, 27785, 15555, 27796, 27799, 27821, 27842, 15570, 27868, 27881, 27885, 146688, 27904, 27940, { f: 2, c: 27942 }, 27751, 27951, 27964, 27995, 28e3, 28016, { f: 2, c: 28032 }, 28042, 28045, 28049, 28056, 146752, 146938, 146937, 146899, 28075, 28078, 28084, 28098, 27956, 28104, 28110, 28127, 28150, 28214, 28190, 15633, 28210, { f: 2, c: 28232 }, { f: 2, c: 28235 }, 28239, { f: 2, c: 28243 }, 28247, 28259, 15646, 28307, 28327, 28340, 28355, 28469, 28395, 28409, 28411, 28426, 28428, 28440, 28453, 28470, 28476, 147326, 28498, 28503, 28512, 28520, 28560, 28566, 28606, 28575, 28581, 28591, 15716, { f: 2, c: 28616 }, 28649, 147606, 28668, 28672, 28682, 28707, 147715, 28730, 28739, 28743, 28747, 15770, 28773, 28777, 28782, 28790, 28806, 28823, 147910, 28831, 28849, 147966, 28908, 28874, 28881, 28931, 28934, 28936, 28940, 15808, 28975, 29008, 29011, 29022, 15828, 29078, 29056, 29083, 29088, 29090, { f: 2, c: 29102 }, 148412, 29145, 29148, 29191, 15877, 29236, 29241, 29250, 29271, 29283, 149033, { f: 2, c: 29294 }, 29304, 29311, 29326, 149157, 29358, 29360, 29377, 15968, 29388, 15974, 15976, 29427, 29434, 29447, 29458, { f: 2, c: 29464 }, 16003, 29497, 29484, 29491, 29501, 29522, 16020, 29547, 149654, { f: 2, c: 29550 }, 29553, 29569, 29578, 29588, 29592, 29596, 29605, 29625, 29631, 29637, 29643, 29665, 29671, 29689, 29715, 29690, 29697, 29779, 29760, 29763, 29778, 29789, 29825, 29832, 150093, 29842, 29847, 29849, 29857, 29861, 29866, 29881, 29883, 29882, 29910, 29912, 29931, 150358, 29946, 150383, 29984, 29988, 29994, 16215, 150550, { f: 2, c: 30013 }, 30016, 30024, 30032, 30034, 30066, 30065, 30074, { f: 2, c: 30077 }, 30092, 16245, 30114, 16247, 30128, 30135, { f: 2, c: 30143 }, 30150, 30159, 30163, 30173, { f: 2, c: 30175 }, 30183, 30190, 30193, 30211, 30232, 30215, 30223, 16302, 151054, 30227, { f: 2, c: 30235 }, 151095, 30245, 30248, 30268, 30259, 151146, 16329, 30273, 151179, 30281, 30293, 16343, 30318, 30357, 30369, 30368, { f: 2, c: 30375 }, 30383, 151626, 30409, 151637, 30440, 151842, 30487, 30490, 30509, 30517, 151977, 16441, 152037, 152013, 30552, 152094, 30588, 152140, 16472, 30618, 30623, 30626, 30628, { f: 2, c: 30686 }, 30692, 30698, 30700, 30715, 152622, 30725, 30729, 30733, 30745, 30764, 30791, 30826, 152793, 30858, 30868, 30884, 30877, 30879, 30907, 30933, 30950, { f: 2, c: 30969 }, 30974, 152999, 30992, 31003, 31013, 31050, 31064, 16645, 31079, 31090, 31125, 31137, 31145, 31156, 31170, 31175, { f: 2, c: 31180 }, 31190, 16712, 153513, 153524, 16719, 31242, 31253, 31259, 16739, 31288, 31303, 31318, 31321, 31324, 31327, 31335, 31338, 31349, 31362, 31370, 31376, 31404, 154068, 16820, 31417, 31422, 16831, 31436, 31464, 31476, 154340, 154339, 154353, 31549, 31530, { f: 2, c: 31534 }, 16870, 16883, 31615, 31553, 16878, 31573, 31609, 31588, 31590, 31603, 154546, 16903, 31632, 31643, 16910, 31669, 31676, 31685, 31690, 154699, 154724, 31700, 31702, 31706, 31722, 31728, 31747, 31758, 31813, 31818, 31831, 31838, 31841, 31849, 31855, 155182, 155222, 155237, 31910, 155234, { f: 2, c: 31926 }, 155352, 31940, 155330, 31949, 155368, 155427, 31974, 155484, 31989, 32003, 17094, 32018, 32030, 155616, 155604, { f: 2, c: 32061 }, 32064, 32071, 155660, 155643, 17110, 32090, 32106, 32112, 17117, 32127, 155671, 32136, 32151, 155744, 32157, 32167, 32170, 32182, 32192, 32215, 32217, 32230, 17154, 155885, 64088, 32272, 32279, 32285, 32295, 32300, 32325, 32373, 32382, { f: 2, c: 32390 }, 17195, 32410, 17219, 32572, 32571, 32574, 32579, 13505, 156272, 156294, { f: 2, c: 32611 }, 32621, { f: 2, c: 32637 }, 32656, 20859, 146702, 32662, 32668, 32685, 156674, 32707, 32719, 32739, 32754, 32778, 32776, 32790, 32812, 32816, 32835, 32870, 32891, 32921, 32924, 32932, 32935, 32952, 157310, 32965, 32981, 32998, 33037, 33013, 33019, 17390, 33077, 33054, 17392, 33060, 33063, 33068, 157469, 33085, 17416, 33129, 17431, 17436, 33157, 17442, 33176, 33202, 33217, 33219, 33238, 33243, 157917, 33252, 157930, 33260, 33277, 33279, 158063, 33284, 158173, 33305, 33314, 158238, 33340, 33353, 33349, 158296, 17526, 17530, 33367, 158348, 33372, 33379, 158391, 17553, 33405, 33407, 33411, 33418, 33427, { f: 2, c: 33447 }, 33458, 33460, 33466, 33468, 33506, 33512, 33527, { f: 2, c: 33543 }, 33548, 33620, 33563, 33565, 33584, 33596, 33604, 33623, 17598, 17620, 17587, { f: 2, c: 33684 }, 33691, 33693, 33737, 33744, 33748, 33757, 33765, 33785, 33813, 158835, 33815, 33849, 33871, { f: 2, c: 33873 }, { f: 2, c: 33881 }, 33884, 158941, 33893, 33912, 33916, 33921, 17677, 33943, 33958, 33982, 17672, { f: 2, c: 33998 }, 34003, 159333, 34023, 34026, 34031, 34033, 34042, 34075, { f: 2, c: 34084 }, 34091, 34127, 34159, 17731, 34129, { f: 2, c: 34145 }, 159636, 34171, 34173, 34175, 34177, 34182, 34195, 34205, 34207, 159736, { f: 2, c: 159734 }, 34236, 34247, 34250, { f: 2, c: 34264 }, 34271, 34273, 34278, 34294, 34304, 34321, 34334, 34337, 34340, 34343, 160013, 34361, 34364, 160057, 34368, 34387, 34390, 34423, 34439, 34441, { f: 2, c: 34460 }, 34481, 34483, 34497, 34499, 34513, 34517, 34519, 34531, 34534, 17848, 34565, 34567, 34574, 34576, 34591, 34593, 34595, 34609, 34618, 34624, 34627, 34641, 34648, { f: 2, c: 34660 }, 34674, 34684, 160731, 160730, 34727, 34697, 34699, 34707, 34720, 160766, 17893, 34750, 160784, 34753, 34766, 34783, 160841, 34787, { f: 2, c: 34789 }, 34794, 34835, 34856, 34862, 34866, 34876, 17935, 34890, 34904, 161301, 161300, 34921, 161329, 34927, 34976, 35004, 35008, 161427, 35025, 35027, 17985, 35073, 161550, 35127, 161571, 35138, 35141, 35145, 161618, 35170, 35209, 35216, 35231, 35248, 35255, 35288, 35307, 18081, 35315, 35325, 35327, 18095, 35345, 35348, 162181, 35361, 35381, 35390, 35397, 35405, 35416, 35502, 35472, 35511, 35543, 35580, 162436, 35594, 35589, 35597, 35612, 35629, 18188, 35665, 35678, 35702, 35713, 35723, { f: 2, c: 35732 }, 35897, 162739, 35901, 162750, 162759, 35909, 35919, 35927, 35945, 35949, 163e3, 35987, 35986, 35993, 18276, 35995, 36054, 36053, 163232, 36081, 163344, 36105, 36110, 36296, 36313, 36364, 18429, 36349, 36358, 163978, 36372, 36374, { f: 2, c: 36385 }, 36391, 164027, 18454, 36406, 36409, 36436, 36450, 36461, 36463, 36504, 36510, 36533, 36539, 164482, 18510, 164595, 36608, 36616, 36651, 36672, 36682, 36696, 164876, 36772, 36788, 164949, 36801, 36806, 64036, 36810, 36813, 36819, 36821, 36849, 36853, 36859, 36876, 36919, 165227, 36931, 36957, { f: 2, c: 165320 }, 36997, 37004, 37008, 37025, 18613, 37040, 37046, 37059, 37064, 165591, 37084, 37087, 165626, 37110, 37106, 37120, 37099, { f: 2, c: 37118 }, 37124, 37126, 37144, 37150, 37175, 37177, { f: 2, c: 37190 }, 37207, 37209, 37236, 37241, 37253, 37299, 37302, { f: 2, c: 37315 }, 166217, 166214, 37356, 37377, { f: 2, c: 37398 }, 166251, 37442, 37450, 37462, 37473, 37477, 37480, 166280, { f: 2, c: 37500 }, 37503, 37513, 37517, 37527, 37529, 37535, 37547, { f: 2, c: 166330 }, 37554, { f: 2, c: 37567 }, 37574, 37582, 37605, 37649, 166430, 166441, 37623, 37673, 166513, 166467, 37713, 37722, 37739, 37745, 37747, 37793, 166553, 166605, 37768, 37771, 37775, 37790, 37877, 166628, 166621, 37873, 37831, 37852, 37863, 37897, { f: 2, c: 37910 }, 37883, 37938, 37947, 166849, 166895, 37997, 37999, 38265, 38278, { f: 2, c: 38284 }, 167184, 167281, 38344, 167419, 167455, 38444, { f: 2, c: 38451 }, 167478, 38460, 38497, 167561, 38530, 167659, 38554, 167730, 18919, 38579, 38586, 38589, 18938, 167928, 38616, 38618, 38621, 18948, 38676, 38691, 18985, 38710, 38721, 38727, 38743, 38747, 38762, 168608, 168625, 38806, 38814, { f: 2, c: 38833 }, 38846, 38860, 38865, 38868, 38872, 38881, 38897, 38916, 38925, 38932, 38934, 19132, 169104, { f: 2, c: 38962 }, 38949, 38983, 39014, 39083, 39085, 39088, 169423, 39095, { f: 2, c: 39099 }, 39106, 39111, 39115, 39137, 39139, 39146, { f: 2, c: 39152 }, 39155, 39176, 19259, 169712, { f: 2, c: 39190 }, 169753, { f: 3, c: 39194 }, 169808, 39217, { f: 3, c: 39226 }, 39233, 39238, 39246, 39264, 39331, 39334, 39357, 39359, 39363, 39380, 39385, 39390, 170182, 39408, 39417, 39420, 39434, 39441, 39450, 39456, 39473, 39492, 39500, 39512, 19394, 39599, 19402, 39607, 19410, 39609, 170610, 39622, 39632, 39634, 39637, 39648, 39653, 39657, 39692, 39696, 39698, 39702, 39708, 39723, 39741, 19488, 39755, 39779, 39781, { f: 2, c: 39787 }, { f: 2, c: 39798 }, 39846, 39852, 171483, 39858, 39864, 39870, 39923, 39896, 39901, 39914, 39919, 39918, 171541, 171658, 171593, 39958, { f: 3, c: 39960 }, 39965, 39970, 39977, 171716, 39985, 39991, 40005, 40028, 171753, { f: 2, c: 40009 }, 171739, 40020, 40024, 40027, 40029, 40031, { f: 3, c: 40041 }, { f: 2, c: 40045 }, 40050, 40053, 40058, 40166, 40178, 40203, [171982, 171991], 40209, { f: 2, c: 40215 }, 172079, 19652, 172058, 40242, 19665, 40266, 40287, 40290, 172281, 172162, 40307, { f: 2, c: 40310 }, 40324, 40345, 40353, 40383, 40373, 40377, 40381, 40393, 40410, 40416, 40419, 19719, 40458, 40450, 40461, 40476, 40571, 139800, 40576, 40581, 40603, 172940, 40637, 173111, 40671, 40703, 40706, 19831, 40707, 40762, 40765, 40774, 40787, 40789, 40792, 173553, 40797, 173570, 40809, 40813, 40816, 173746, 11948, 13844, 14509, 15820, 16348, 17854, 17936, 19326, 19512, 19681, 19980, { f: 2, c: 20003 }, 20089, 20211, 20236, 20249, 20267, 20270, 20273, 20356, 20382, 20407, 20484, 20492, 20556, 20575, 20578, 20599, 20622, 20638, 20642, 20675, 20712, 20721, 20734, 20743, { f: 3, c: 20748 }, 20787, 20792, 20852, 20868, 20920, 20922, 20936, 20943, 20945, { f: 2, c: 20947 }, 20952, 20959, 20997, 21030, 21032, 21035, { f: 2, c: 21041 }, 21045, 21052, 21082, 21088, 21102, { f: 2, c: 21112 }, 21130, 21132, 21217, 21225, 21233, 21251, 21265, 21279, 21293, 21298, 21309, 21349, 21357, 21369, 21374, 21396, 21401, 21418, 21423, 21434, 21441, { f: 2, c: 21444 }, 21472, 21523, 21546, 21553, { f: 2, c: 21556 }, 21580, 21671, 21674, 21681, 21691, 21710, 21738, 21756, 21765, 21768, 21781, 21799, 21802, 21814, 21841, 21862, 21903, 21906, 21908, 21924, 21938, 21955, 21958, 21971, 21979, 21996, 21998, 22001, 22006, 22008, 22021, 22029, { f: 2, c: 22033 }, 22060, 22069, 22073, 22093, 22100, 22149, 22175, 22182, 22199, 22220, 22223, 22233, 22241, 22251, 22253, 22257, 22279, 22284, { f: 2, c: 22298 }, 22301, 22316, 22318, { f: 2, c: 22333 }, 22367, 22379, 22381, 22394, 22403, 22423, 22446, 22485, 22503, 22541, 22566, 22605, 22607, 22623, 22637, 22655, 22657, 22680, 22716, 22815, 22819, 22873, 22905, 22935, 22959, 22963, 23007, 23025, 23032, 23218, 23224, 23274, 23286, 23323, 23325, 23329, 23352, 23479, 23511, 23520, 23583, 23594, 23596, 23606, 23641, 23644, 23661, 23773, 23809, 23860, 23869, 23897, 23934, 23939, 24007, 24057, 24104, 24114, 24117, 24155, 24168, 24170, 24183, 24192, 24203, 24243, 24253, 24273, { f: 2, c: 24276 }, 24397, 24492, 24554, 24583, 24649, 24660, 24679, 24763, 24772, 24829, 24842, 24854, 24874, 24886, 24926, 24932, 24955, 24957, 24959, 24989, 25016, 25052, 25058, 25061, 25064, 25092, 25095, 25137, 25145, 25149, 25210, 25232, 25256, 25306, 25332, 25366, 25386, 25398, 25414, 25419, 25427, 25457, 25461, 25471, 25474, 25482, { f: 2, c: 25518 }, 25578, { f: 2, c: 25592 }, 25618, 25624, 25632, 25636, 25642, 25653, 25661, 25663, 25682, 25695, 25716, 25744, { f: 2, c: 25752 }, 25772, 25779, 25837, 25840, 25883, 25887, 25902, 25929, 25952, 26002, 26005, 26036, 26046, 26056, 26062, 26064, 26079, 26238, { f: 2, c: 26251 }, 26291, 26304, 26319, 26405, 26421, 26453, 26496, 26511, 26513, 26532, 26545, 26549, 26558, 26664, 26758, 26859, 26869, 26903, 26931, 26936, 26971, 26981, 27048, 27051, 27055, 27109, 27121, 27210, 27221, 27239, 27249, 27311, { f: 2, c: 27336 }, 27395, 27451, 27455, { f: 2, c: 27517 }, 27568, 27639, 27641, 27652, 27657, 27661, 27692, 27722, 27730, 27732, 27769, 27820, 27828, 27858, 28001, 28028, 28089, 28144, 28229, 28275, 28283, 28285, 28297, 28348, { f: 2, c: 28378 }, 28454, 28457, 28464, 28551, 28573, 28590, 28599, 28685, 28704, 28745, 28824, 28848, { f: 2, c: 28885 }, 28997, 29106, 29172, 29207, 29215, 29251, { f: 2, c: 29263 }, 29274, 29280, 29288, 29303, 29316, 29385, 29413, 29428, 29442, 29451, 29470, 29474, { f: 2, c: 29498 }, 29517, 29528, 29543, 29810, 29871, 29919, 29924, 29940, 29947, 29974, 29985, 30015, 30046, 30105, 30116, 30145, 30148, 30156, 30167, 30172, 30177, 30191, 30212, 30220, 30237, 30258, 30264, 30277, 30282, 30303, 30381, 30397, 30425, 30443, 30448, 30457, 30464, 30478, 30498, 30504, 30511, 30521, 30526, 30533, 30538, 30543, 30558, 30564, 30567, 30572, 30596, { f: 2, c: 30604 }, 30614, 30631, 30639, 30647, 30654, 30665, 30673, 30681, 30705, 30775, 30812, 30846, 30872, 30881, 30897, 30899, 30921, 30931, 30988, 31007, { f: 2, c: 31015 }, 31039, 31042, 31060, 31083, 31100, 31147, 31172, 31210, 31234, 31244, 31280, 31290, 31300, 31360, 31366, 31380, 31413, 31421, 31486, 31531, 31607, 31648, 31660, 31664, 31720, 31730, 31736, 31740, 31742, 31753, 31784, 31791, 31810, { f: 2, c: 31826 }, { f: 3, c: 31835 }, 31858, 31869, 31879, 31902, 31930, 31943, 31955, 31962, 32060, 32077, 32130, 32133, 32141, 32145, 32158, 32179, 32185, 32208, 32229, { f: 2, c: 32245 }, 32303, 32310, 32324, 32367, 32376, 32385, 32573, 32603, 32605, 32613, 32625, { f: 2, c: 32639 }, 32651, 32674, { f: 3, c: 32765 }, 32775, 32781, 32798, 32825, 32904, 32910, 32975, 32980, 33005, 33008, 33015, 33018, 33022, 33027, 33047, 33072, 33111, 33135, 33139, 33163, 33168, 33179, 33182, 33227, 33237, { f: 2, c: 33245 }, 33249, 33263, 33270, 33280, 33291, { f: 2, c: 33299 }, 33306, 33338, 33348, 33389, 33412, 33417, 33425, 33450, 33456, 33488, 33514, 33519, 33526, 33622, 33656, 33784, 33788, 33880, 33939, 33969, 33981, 34043, 34118, 34134, 34141, 34181, 34200, 34370, 34374, 34496, 34580, 34594, 34606, 34617, 34653, 34683, 34700, 34702, { f: 2, c: 34711 }, 34718, 34723, 34734, 34751, 34761, 34778, 34840, 34843, 34861, 34874, 34885, 34891, 34894, 34901, 34906, 34926, { f: 3, c: 34970 }, 35021, 35040, 35055, { f: 2, c: 35086 }, 35110, 35125, 35162, 35164, 35179, 35184, 35196, 35237, 35253, 35260, 35285, 35401, 35415, 35431, 35454, 35462, 35478, 35510, 35529, 35537, 35549, 35564, 35573, 35590, 35599, 35601, 35653, 35666, 35693, 35704, 35708, 35710, 35717, 35743, 35915, 35923, 35963, 36026, 36037, 36041, 36050, 36076, 36085, 36087, 36097, 36099, 36119, 36124, 36206, 36241, 36255, 36267, 36274, 36309, 36327, { f: 2, c: 36337 }, 36340, 36353, 36363, 36390, 36401, { f: 2, c: 36416 }, 36429, 36431, 36444, 36449, 36457, 36465, 36469, 36471, 36489, 36496, 36501, 36506, 36519, 36521, 36525, 36584, 36592, 36615, 36632, 36645, 36647, 36652, 36661, 36666, 36675, 36679, 36689, 36693, { f: 3, c: 36768 }, 36773, 36868, 36891, 36911, 36940, 36955, 36976, 36980, 36985, 37003, 37016, 37024, 37042, 37053, 37065, 37104, 37125, 37157, 37210, 37223, 37242, 37258, 37265, 37269, 37296, 37307, 37309, 37314, 37317, 37376, 37385, 37411, 37494, 37518, 37551, { f: 2, c: 37563 }, 37569, 37571, 37573, 37576, 37652, 37683, 37686, 37720, 37759, 37762, 37770, 37819, 37836, 37862, 37881, 37890, { f: 2, c: 37901 }, 37934, 37964, 38280, 38305, 38335, 38342, 38345, { f: 2, c: 38353 }, 38368, 38372, 38374, 38436, 38449, 38456, 38461, 38484, 38516, 38523, 38527, 38529, 38531, 38537, 38550, 38574, 38659, 38683, { f: 2, c: 38689 }, 38696, 38705, 38759, 38774, 38781, 38783, 38809, 38815, 38828, 38841, 38861, 38880, 38895, 38919, 38950, 38958, { f: 2, c: 39010 }, 39092, 39109, 39170, 39185, 39189, 39221, 39240, 39252, 39262, 39393, 39436, 39440, 39459, 39489, 39505, { f: 2, c: 39613 }, 39681, 39689, 39691, { f: 2, c: 39693 }, 39705, 39733, 39752, 39765, 39784, 39808, 39814, 39824, 39837, 39856, 39871, 39880, 39935, 39938, 39964, 39989, 40004, 40022, 40033, 40040, 40240, 40253, 40298, 40315, 40421, 40425, 40435, 40570, { f: 3, c: 40578 }, 40624, 40676, 40688, 40690, 40713, 40719, 40724, 40731, 40738, 40742, { f: 2, c: 40746 }, 40756, 40794, 40815, 40862, 40869, 131317, 151044, 151538, 163187, 194581, 194630, 194713, 194726, 194789, 195038, 13790, { s: 4 }, 172722, 0, 0, 131416, { s: 4 }, 132529, 0, 0, 132844, { s: 6 }, 134488, { s: 21 }, 154060, { s: 9 }, 14756, 14776, 142914, 0, 0, 14940, 0, 0, 143339, 0, 0, 162228, 0, 15044, 15051, { s: 5 }, 14981, { s: 8 }, 15347, 27384, { s: 5 }, 15665, { s: 9 }, 147531, 0, 15936, 14497, { s: 34 }, 158878, { s: 12 }, 18207, 162876, { s: 4 }, 18462, { s: 71 }, 39709, 39724, 20482, 20958, 21255, 23532, 63784, 26142, 63785, 28746, 64021, 21857, 27706, 31328, 156492, 34819, 38315, 38741, 171581, 173594], "Adobe-Korea1": [{ f: 95, c: 32 }, 8361, 8208, 169, 0, 0, [12288, 12644], { f: 2, c: 12289 }, 12539, 8229, [8230, 8943], 168, 12291, { f: 2, c: 8211 }, 8214, 65340, 65374, { f: 2, c: 8216 }, { f: 2, c: 8220 }, { f: 2, c: 12308 }, { f: 10, c: 12296 }, 177, 215, 247, 8800, { f: 2, c: 8804 }, 8734, 8756, 176, { f: 2, c: 8242 }, 8451, 8491, { f: 2, c: 65504 }, 65509, 9794, 9792, 8736, 8869, 8978, 8706, 8711, 8801, 8786, 167, 8251, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 9661, 9660, 8594, { f: 2, c: 8592 }, { f: 2, c: 8595 }, 12307, 171, 187, 8730, 8765, 8733, 8757, { f: 2, c: 8747 }, 8712, 8715, { f: 2, c: 8838 }, { f: 2, c: 8834 }, 8746, 8745, { f: 2, c: 8743 }, 65506, 8658, 8660, 8704, 8707, 180, 732, 711, 728, 733, 730, 729, 184, 731, 161, 191, 8758, 8750, 8721, 8719, 164, 8457, 8240, 9665, 9664, 9655, 9654, 9828, { f: 2, c: 9824 }, 9829, 9831, 9827, 9673, 9672, 9635, { f: 2, c: 9680 }, 9618, { f: 2, c: 9636 }, 9640, 9639, 9638, 9641, 9832, 9743, 9742, 9756, 9758, 182, { f: 2, c: 8224 }, 8597, 8599, 8601, 8598, 8600, 9837, { f: 2, c: 9833 }, 9836, 12927, 12828, 8470, 13255, 8482, 13250, 13272, 8481, { f: 59, c: 65281 }, 65510, { f: 33, c: 65341 }, 65507, { f: 51, c: 12593 }, { f: 42, c: 12645 }, { f: 10, c: 8560 }, { f: 10, c: 8544 }, { f: 17, c: 913 }, { f: 7, c: 931 }, { f: 17, c: 945 }, { f: 7, c: 963 }, 9472, 9474, 9484, 9488, 9496, 9492, 9500, 9516, 9508, 9524, 9532, 9473, 9475, 9487, 9491, 9499, 9495, 9507, 9523, 9515, 9531, 9547, 9504, 9519, 9512, 9527, 9535, 9501, 9520, 9509, 9528, 9538, 9490, 9489, 9498, 9497, 9494, 9493, 9486, 9485, { f: 2, c: 9502 }, { f: 2, c: 9505 }, { f: 2, c: 9510 }, { f: 2, c: 9513 }, { f: 2, c: 9517 }, { f: 2, c: 9521 }, { f: 2, c: 9525 }, { f: 2, c: 9529 }, { f: 2, c: 9533 }, { f: 2, c: 9536 }, { f: 8, c: 9539 }, { f: 3, c: 13205 }, 8467, 13208, 13252, { f: 4, c: 13219 }, { f: 10, c: 13209 }, 13258, { f: 3, c: 13197 }, 13263, { f: 2, c: 13192 }, 13256, { f: 2, c: 13223 }, { f: 10, c: 13232 }, { f: 5, c: 13184 }, { f: 6, c: 13242 }, { f: 5, c: 13200 }, 8486, { f: 2, c: 13248 }, { f: 3, c: 13194 }, 13270, 13253, { f: 3, c: 13229 }, 13275, { f: 4, c: 13225 }, 13277, 13264, 13267, 13251, 13257, 13276, 13254, 198, 208, 170, 294, 306, 319, 321, 216, 338, 186, 222, 358, 330, { f: 28, c: 12896 }, { f: 26, c: 9424 }, { f: 15, c: 9312 }, 189, { f: 2, c: 8531 }, 188, 190, { f: 4, c: 8539 }, 230, 273, 240, 295, 305, 307, 312, 320, 322, 248, 339, 223, 254, 359, 331, 329, { f: 28, c: 12800 }, { f: 26, c: 9372 }, { f: 15, c: 9332 }, 185, { f: 2, c: 178 }, 8308, 8319, { f: 4, c: 8321 }, { f: 83, c: 12353 }, { f: 86, c: 12449 }, { f: 6, c: 1040 }, 1025, { f: 32, c: 1046 }, 1105, { f: 26, c: 1078 }, { f: 2, c: 44032 }, 44036, { f: 4, c: 44039 }, { f: 8, c: 44048 }, { f: 5, c: 44057 }, 44064, 44068, { f: 2, c: 44076 }, { f: 3, c: 44079 }, { f: 2, c: 44088 }, 44092, 44096, 44107, 44109, 44116, 44120, 44124, { f: 2, c: 44144 }, 44148, { f: 2, c: 44151 }, 44154, { f: 2, c: 44160 }, { f: 4, c: 44163 }, { f: 4, c: 44169 }, 44176, 44180, { f: 2, c: 44188 }, { f: 3, c: 44191 }, { f: 3, c: 44200 }, 44204, { f: 2, c: 44207 }, { f: 2, c: 44216 }, { f: 3, c: 44219 }, 44225, 44228, 44232, 44236, 44245, 44247, { f: 2, c: 44256 }, 44260, { f: 2, c: 44263 }, 44266, 44268, { f: 3, c: 44271 }, 44275, { f: 2, c: 44277 }, { f: 2, c: 44284 }, 44288, 44292, 44294, { f: 2, c: 44300 }, 44303, 44305, 44312, 44316, 44320, 44329, { f: 2, c: 44332 }, { f: 2, c: 44340 }, 44344, 44348, { f: 2, c: 44356 }, 44359, 44361, 44368, 44372, 44376, 44385, 44387, { f: 2, c: 44396 }, 44400, { f: 4, c: 44403 }, { f: 3, c: 44411 }, 44415, { f: 2, c: 44417 }, { f: 2, c: 44424 }, 44428, 44432, { f: 2, c: 44444 }, 44452, 44471, { f: 2, c: 44480 }, 44484, 44488, { f: 2, c: 44496 }, 44499, 44508, 44512, 44516, { f: 2, c: 44536 }, 44540, { f: 3, c: 44543 }, { f: 2, c: 44552 }, 44555, 44557, 44564, { f: 2, c: 44592 }, 44596, { f: 2, c: 44599 }, 44602, { f: 2, c: 44608 }, 44611, { f: 2, c: 44613 }, 44618, { f: 3, c: 44620 }, 44624, 44628, 44630, { f: 2, c: 44636 }, { f: 3, c: 44639 }, 44645, { f: 2, c: 44648 }, 44652, 44656, { f: 2, c: 44664 }, { f: 3, c: 44667 }, { f: 2, c: 44676 }, 44684, { f: 3, c: 44732 }, 44736, 44740, { f: 2, c: 44748 }, { f: 3, c: 44751 }, { f: 2, c: 44760 }, 44764, 44776, 44779, 44781, 44788, 44792, 44796, { f: 2, c: 44807 }, 44813, 44816, { f: 2, c: 44844 }, 44848, 44850, 44852, { f: 2, c: 44860 }, 44863, { f: 3, c: 44865 }, { f: 2, c: 44872 }, 44880, { f: 2, c: 44892 }, { f: 2, c: 44900 }, 44921, 44928, 44932, 44936, { f: 2, c: 44944 }, 44949, 44956, { f: 2, c: 44984 }, 44988, 44992, { f: 3, c: 44999 }, 45003, { f: 2, c: 45005 }, 45012, 45020, { f: 2, c: 45032 }, { f: 2, c: 45040 }, 45044, 45048, { f: 2, c: 45056 }, 45060, 45068, 45072, 45076, { f: 2, c: 45084 }, 45096, { f: 2, c: 45124 }, 45128, 45130, 45132, 45134, { f: 3, c: 45139 }, 45143, 45145, 45149, { f: 2, c: 45180 }, 45184, 45188, { f: 2, c: 45196 }, 45199, 45201, { f: 3, c: 45208 }, 45212, { f: 4, c: 45215 }, { f: 2, c: 45224 }, { f: 5, c: 45227 }, 45233, { f: 3, c: 45235 }, 45240, 45244, { f: 2, c: 45252 }, { f: 3, c: 45255 }, { f: 2, c: 45264 }, 45268, 45272, 45280, 45285, { f: 2, c: 45320 }, { f: 2, c: 45323 }, 45328, { f: 2, c: 45330 }, { f: 2, c: 45336 }, { f: 3, c: 45339 }, { f: 3, c: 45347 }, 45352, 45356, { f: 2, c: 45364 }, { f: 3, c: 45367 }, { f: 2, c: 45376 }, 45380, 45384, { f: 2, c: 45392 }, { f: 2, c: 45396 }, 45400, 45404, 45408, { f: 2, c: 45432 }, 45436, 45440, 45442, { f: 2, c: 45448 }, 45451, 45453, { f: 3, c: 45458 }, 45464, 45468, 45480, 45516, 45520, 45524, { f: 2, c: 45532 }, 45535, { f: 2, c: 45544 }, 45548, 45552, 45561, 45563, 45565, { f: 2, c: 45572 }, 45576, { f: 2, c: 45579 }, { f: 2, c: 45588 }, 45591, 45593, 45600, 45620, 45628, 45656, 45660, 45664, { f: 2, c: 45672 }, { f: 2, c: 45684 }, 45692, { f: 2, c: 45700 }, 45705, { f: 2, c: 45712 }, 45716, { f: 3, c: 45720 }, { f: 2, c: 45728 }, 45731, { f: 2, c: 45733 }, 45738, 45740, 45744, 45748, { f: 2, c: 45768 }, 45772, 45776, 45778, { f: 2, c: 45784 }, 45787, 45789, 45794, { f: 3, c: 45796 }, 45800, { f: 5, c: 45803 }, { f: 3, c: 45811 }, { f: 5, c: 45815 }, { f: 3, c: 45823 }, 45828, 45832, { f: 2, c: 45840 }, { f: 3, c: 45843 }, 45852, { f: 3, c: 45908 }, 45912, { f: 2, c: 45915 }, { f: 2, c: 45918 }, { f: 2, c: 45924 }, 45927, 45929, 45931, 45934, { f: 2, c: 45936 }, 45940, 45944, { f: 2, c: 45952 }, { f: 3, c: 45955 }, 45964, 45968, 45972, { f: 2, c: 45984 }, 45992, 45996, { f: 2, c: 46020 }, 46024, { f: 2, c: 46027 }, 46030, 46032, { f: 2, c: 46036 }, 46039, 46041, 46043, 46045, 46048, 46052, 46056, 46076, 46096, 46104, 46108, 46112, { f: 2, c: 46120 }, 46123, 46132, { f: 2, c: 46160 }, 46164, 46168, { f: 2, c: 46176 }, 46179, 46181, 46188, 46208, 46216, 46237, 46244, 46248, 46252, 46261, 46263, 46265, 46272, 46276, 46280, 46288, 46293, { f: 2, c: 46300 }, 46304, { f: 2, c: 46307 }, 46310, { f: 2, c: 46316 }, 46319, 46321, 46328, { f: 2, c: 46356 }, 46360, { f: 2, c: 46363 }, { f: 2, c: 46372 }, { f: 4, c: 46375 }, { f: 2, c: 46384 }, 46388, 46392, { f: 2, c: 46400 }, { f: 3, c: 46403 }, { f: 3, c: 46411 }, 46416, 46420, { f: 2, c: 46428 }, { f: 3, c: 46431 }, { f: 2, c: 46496 }, 46500, 46504, { f: 2, c: 46506 }, { f: 2, c: 46512 }, { f: 3, c: 46515 }, { f: 3, c: 46523 }, 46528, 46532, { f: 2, c: 46540 }, { f: 3, c: 46543 }, 46552, 46572, { f: 2, c: 46608 }, 46612, 46616, 46629, 46636, 46644, 46664, 46692, 46696, { f: 2, c: 46748 }, 46752, 46756, { f: 2, c: 46763 }, 46769, 46804, 46832, 46836, 46840, { f: 2, c: 46848 }, 46853, { f: 2, c: 46888 }, 46892, { f: 2, c: 46895 }, { f: 2, c: 46904 }, 46907, 46916, 46920, 46924, { f: 2, c: 46932 }, 46944, 46948, 46952, { f: 2, c: 46960 }, 46963, 46965, { f: 2, c: 46972 }, 46976, 46980, { f: 2, c: 46988 }, { f: 4, c: 46991 }, { f: 4, c: 46998 }, 47004, 47008, { f: 2, c: 47016 }, { f: 3, c: 47019 }, { f: 2, c: 47028 }, 47032, 47047, 47049, { f: 2, c: 47084 }, 47088, 47092, { f: 2, c: 47100 }, { f: 3, c: 47103 }, { f: 3, c: 47111 }, 47116, 47120, { f: 2, c: 47128 }, 47131, 47133, { f: 2, c: 47140 }, 47144, 47148, { f: 2, c: 47156 }, { f: 3, c: 47159 }, 47168, 47172, 47185, 47187, { f: 2, c: 47196 }, 47200, 47204, { f: 2, c: 47212 }, 47215, 47217, 47224, 47228, 47245, 47272, 47280, 47284, 47288, { f: 2, c: 47296 }, 47299, 47301, 47308, 47312, 47316, 47325, 47327, 47329, { f: 2, c: 47336 }, 47340, 47344, { f: 2, c: 47352 }, 47355, 47357, 47364, 47384, 47392, { f: 2, c: 47420 }, 47424, 47428, 47436, 47439, 47441, { f: 2, c: 47448 }, 47452, 47456, { f: 2, c: 47464 }, 47467, 47469, { f: 2, c: 47476 }, 47480, 47484, { f: 2, c: 47492 }, 47495, { f: 2, c: 47497 }, { f: 2, c: 47501 }, { f: 2, c: 47532 }, 47536, 47540, { f: 2, c: 47548 }, 47551, 47553, { f: 2, c: 47560 }, 47564, { f: 5, c: 47566 }, { f: 2, c: 47576 }, 47579, { f: 2, c: 47581 }, 47585, { f: 3, c: 47587 }, 47592, 47596, { f: 2, c: 47604 }, { f: 4, c: 47607 }, { f: 2, c: 47616 }, 47624, 47637, { f: 2, c: 47672 }, 47676, 47680, 47682, { f: 2, c: 47688 }, 47691, { f: 2, c: 47693 }, { f: 3, c: 47699 }, 47704, 47708, { f: 2, c: 47716 }, { f: 3, c: 47719 }, { f: 2, c: 47728 }, 47732, 47736, { f: 3, c: 47747 }, 47751, 47756, { f: 2, c: 47784 }, { f: 2, c: 47787 }, 47792, 47794, { f: 2, c: 47800 }, 47803, 47805, 47812, 47816, { f: 2, c: 47832 }, 47868, 47872, 47876, 47885, 47887, 47889, 47896, 47900, 47904, 47913, 47915, { f: 3, c: 47924 }, 47928, { f: 4, c: 47931 }, { f: 2, c: 47940 }, 47943, 47945, 47949, { f: 2, c: 47951 }, 47956, 47960, 47969, 47971, 47980, 48008, 48012, 48016, 48036, 48040, 48044, 48052, 48055, 48064, 48068, 48072, 48080, 48083, { f: 2, c: 48120 }, 48124, { f: 2, c: 48127 }, 48130, { f: 2, c: 48136 }, { f: 3, c: 48139 }, 48143, 48145, { f: 5, c: 48148 }, { f: 5, c: 48155 }, { f: 2, c: 48164 }, 48167, 48169, 48173, { f: 2, c: 48176 }, 48180, 48184, { f: 2, c: 48192 }, { f: 3, c: 48195 }, 48201, { f: 2, c: 48204 }, 48208, 48221, { f: 2, c: 48260 }, 48264, { f: 2, c: 48267 }, 48270, { f: 2, c: 48276 }, 48279, { f: 2, c: 48281 }, { f: 2, c: 48288 }, 48292, { f: 2, c: 48295 }, { f: 2, c: 48304 }, { f: 3, c: 48307 }, { f: 2, c: 48316 }, 48320, 48324, 48333, { f: 3, c: 48335 }, 48341, 48344, 48348, { f: 3, c: 48372 }, 48376, 48380, { f: 2, c: 48388 }, 48391, 48393, 48400, 48404, 48420, 48428, 48448, { f: 2, c: 48456 }, 48460, 48464, { f: 2, c: 48472 }, 48484, 48488, { f: 2, c: 48512 }, 48516, { f: 4, c: 48519 }, { f: 2, c: 48528 }, 48531, 48533, { f: 2, c: 48537 }, 48540, 48548, 48560, 48568, { f: 2, c: 48596 }, 48600, 48604, 48617, 48624, 48628, 48632, 48640, 48643, 48645, { f: 2, c: 48652 }, 48656, 48660, { f: 2, c: 48668 }, 48671, { f: 2, c: 48708 }, 48712, 48716, 48718, { f: 2, c: 48724 }, 48727, { f: 3, c: 48729 }, { f: 2, c: 48736 }, 48740, 48744, 48746, { f: 2, c: 48752 }, { f: 3, c: 48755 }, { f: 3, c: 48763 }, 48768, 48772, { f: 2, c: 48780 }, { f: 3, c: 48783 }, { f: 2, c: 48792 }, 48808, { f: 2, c: 48848 }, 48852, { f: 2, c: 48855 }, 48864, { f: 3, c: 48867 }, 48876, 48897, { f: 2, c: 48904 }, { f: 2, c: 48920 }, { f: 3, c: 48923 }, { f: 2, c: 48960 }, 48964, 48968, { f: 2, c: 48976 }, 48981, 49044, 49072, 49093, { f: 2, c: 49100 }, 49104, 49108, 49116, 49119, 49121, 49212, 49233, 49240, 49244, 49248, { f: 2, c: 49256 }, { f: 2, c: 49296 }, 49300, 49304, { f: 2, c: 49312 }, 49315, 49317, { f: 2, c: 49324 }, { f: 2, c: 49327 }, { f: 4, c: 49331 }, { f: 2, c: 49340 }, { f: 3, c: 49343 }, 49349, { f: 2, c: 49352 }, 49356, 49360, { f: 2, c: 49368 }, { f: 3, c: 49371 }, { f: 2, c: 49380 }, 49384, 49388, { f: 2, c: 49396 }, 49399, 49401, 49408, 49412, 49416, 49424, 49429, { f: 5, c: 49436 }, { f: 2, c: 49443 }, { f: 2, c: 49446 }, { f: 2, c: 49452 }, { f: 3, c: 49455 }, 49462, { f: 2, c: 49464 }, 49468, 49472, { f: 2, c: 49480 }, { f: 3, c: 49483 }, { f: 2, c: 49492 }, 49496, 49500, { f: 2, c: 49508 }, { f: 3, c: 49511 }, 49520, 49524, 49528, 49541, { f: 3, c: 49548 }, 49552, 49556, 49558, { f: 2, c: 49564 }, 49567, 49569, 49573, { f: 2, c: 49576 }, 49580, 49584, 49597, 49604, 49608, 49612, 49620, { f: 2, c: 49623 }, 49632, 49636, 49640, { f: 2, c: 49648 }, 49651, { f: 2, c: 49660 }, 49664, 49668, { f: 2, c: 49676 }, 49679, 49681, { f: 2, c: 49688 }, 49692, { f: 2, c: 49695 }, { f: 2, c: 49704 }, 49707, 49709, 49711, { f: 2, c: 49713 }, 49716, 49736, { f: 2, c: 49744 }, 49748, 49752, 49760, 49765, { f: 2, c: 49772 }, 49776, 49780, { f: 2, c: 49788 }, 49791, 49793, { f: 2, c: 49800 }, 49808, 49816, 49819, 49821, { f: 2, c: 49828 }, 49832, { f: 2, c: 49836 }, { f: 2, c: 49844 }, 49847, 49849, { f: 2, c: 49884 }, 49888, { f: 2, c: 49891 }, { f: 3, c: 49899 }, 49903, 49905, 49910, { f: 2, c: 49912 }, { f: 2, c: 49915 }, 49920, { f: 2, c: 49928 }, { f: 2, c: 49932 }, { f: 3, c: 49939 }, 49944, 49948, { f: 2, c: 49956 }, { f: 2, c: 49960 }, 49989, { f: 2, c: 50024 }, 50028, 50032, 50034, { f: 2, c: 50040 }, { f: 2, c: 50044 }, 50052, 50056, 50060, 50112, { f: 2, c: 50136 }, 50140, { f: 2, c: 50143 }, 50146, { f: 2, c: 50152 }, 50157, { f: 2, c: 50164 }, 50168, 50184, 50192, 50212, 50220, 50224, 50228, { f: 2, c: 50236 }, 50248, { f: 2, c: 50276 }, 50280, 50284, { f: 2, c: 50292 }, 50297, 50304, 50324, 50332, 50360, 50364, 50409, { f: 2, c: 50416 }, 50420, 50424, 50426, { f: 3, c: 50431 }, 50444, 50448, 50452, 50460, { f: 2, c: 50472 }, 50476, 50480, { f: 2, c: 50488 }, 50491, 50493, { f: 2, c: 50500 }, { f: 3, c: 50504 }, { f: 3, c: 50508 }, { f: 3, c: 50515 }, { f: 3, c: 50519 }, { f: 2, c: 50525 }, { f: 2, c: 50528 }, 50532, 50536, { f: 2, c: 50544 }, { f: 3, c: 50547 }, { f: 2, c: 50556 }, 50560, 50564, 50567, { f: 2, c: 50572 }, 50575, 50577, 50581, { f: 2, c: 50583 }, 50588, 50592, 50601, { f: 2, c: 50612 }, { f: 2, c: 50616 }, { f: 4, c: 50619 }, { f: 7, c: 50628 }, 50636, 50638, { f: 2, c: 50640 }, 50644, 50648, { f: 2, c: 50656 }, 50659, 50661, { f: 3, c: 50668 }, 50672, 50676, { f: 2, c: 50678 }, { f: 6, c: 50684 }, { f: 4, c: 50693 }, 50700, 50704, { f: 2, c: 50712 }, { f: 2, c: 50715 }, { f: 2, c: 50724 }, 50728, { f: 3, c: 50732 }, 50736, { f: 3, c: 50739 }, 50743, 50745, 50747, { f: 2, c: 50752 }, 50756, 50760, { f: 2, c: 50768 }, { f: 3, c: 50771 }, { f: 2, c: 50780 }, 50784, 50796, 50799, 50801, { f: 2, c: 50808 }, 50812, 50816, { f: 2, c: 50824 }, 50827, 50829, { f: 2, c: 50836 }, 50840, 50844, { f: 2, c: 50852 }, 50855, 50857, { f: 2, c: 50864 }, 50868, { f: 3, c: 50872 }, { f: 2, c: 50880 }, 50883, 50885, { f: 2, c: 50892 }, 50896, 50900, { f: 2, c: 50908 }, { f: 2, c: 50912 }, { f: 2, c: 50920 }, 50924, 50928, { f: 2, c: 50936 }, 50941, { f: 2, c: 50948 }, 50952, 50956, { f: 2, c: 50964 }, 50967, 50969, { f: 2, c: 50976 }, 50980, 50984, { f: 2, c: 50992 }, 50995, 50997, 50999, { f: 2, c: 51004 }, 51008, 51012, 51018, { f: 2, c: 51020 }, 51023, { f: 8, c: 51025 }, 51036, 51040, 51048, 51051, { f: 2, c: 51060 }, 51064, { f: 3, c: 51068 }, { f: 3, c: 51075 }, { f: 4, c: 51079 }, 51086, { f: 2, c: 51088 }, 51092, { f: 3, c: 51094 }, 51098, { f: 2, c: 51104 }, { f: 4, c: 51107 }, { f: 2, c: 51116 }, 51120, 51124, { f: 2, c: 51132 }, { f: 3, c: 51135 }, { f: 2, c: 51144 }, 51148, 51150, 51152, 51160, 51165, 51172, 51176, 51180, { f: 2, c: 51200 }, 51204, 51208, 51210, { f: 2, c: 51216 }, 51219, { f: 2, c: 51221 }, { f: 2, c: 51228 }, 51232, 51236, { f: 2, c: 51244 }, 51247, 51249, 51256, 51260, 51264, { f: 2, c: 51272 }, { f: 2, c: 51276 }, 51284, { f: 2, c: 51312 }, 51316, 51320, 51322, { f: 2, c: 51328 }, 51331, { f: 3, c: 51333 }, { f: 3, c: 51339 }, 51348, 51357, 51359, 51361, 51368, { f: 2, c: 51388 }, 51396, 51400, 51404, { f: 2, c: 51412 }, 51415, 51417, { f: 2, c: 51424 }, 51428, 51445, { f: 2, c: 51452 }, 51456, { f: 3, c: 51460 }, { f: 2, c: 51468 }, 51471, 51473, 51480, 51500, 51508, { f: 2, c: 51536 }, 51540, 51544, { f: 2, c: 51552 }, 51555, 51564, 51568, 51572, 51580, { f: 2, c: 51592 }, 51596, 51600, { f: 2, c: 51608 }, 51611, 51613, { f: 2, c: 51648 }, 51652, { f: 2, c: 51655 }, 51658, { f: 2, c: 51664 }, 51667, { f: 2, c: 51669 }, { f: 2, c: 51673 }, { f: 2, c: 51676 }, 51680, 51682, 51684, 51687, { f: 2, c: 51692 }, { f: 3, c: 51695 }, { f: 2, c: 51704 }, 51708, 51712, { f: 2, c: 51720 }, { f: 3, c: 51723 }, 51732, 51736, 51753, { f: 2, c: 51788 }, 51792, 51796, { f: 2, c: 51804 }, { f: 3, c: 51807 }, 51816, 51837, 51844, 51864, { f: 2, c: 51900 }, 51904, 51908, { f: 2, c: 51916 }, 51919, 51921, 51923, { f: 2, c: 51928 }, 51936, 51948, 51956, 51976, 51984, 51988, 51992, { f: 2, c: 52e3 }, 52033, { f: 2, c: 52040 }, 52044, 52048, { f: 2, c: 52056 }, 52061, 52068, { f: 2, c: 52088 }, 52124, 52152, 52180, 52196, 52199, 52201, { f: 2, c: 52236 }, 52240, 52244, { f: 2, c: 52252 }, { f: 2, c: 52257 }, { f: 3, c: 52263 }, 52268, 52270, 52272, { f: 2, c: 52280 }, { f: 4, c: 52283 }, { f: 2, c: 52292 }, 52296, 52300, { f: 2, c: 52308 }, { f: 3, c: 52311 }, 52320, 52324, 52326, 52328, 52336, 52341, { f: 2, c: 52376 }, 52380, 52384, { f: 2, c: 52392 }, { f: 3, c: 52395 }, { f: 2, c: 52404 }, 52408, 52412, { f: 2, c: 52420 }, 52423, 52425, 52432, 52436, 52452, 52460, 52464, 52481, { f: 2, c: 52488 }, 52492, 52496, { f: 2, c: 52504 }, 52507, 52509, 52516, 52520, 52524, 52537, 52572, 52576, 52580, { f: 2, c: 52588 }, 52591, 52593, 52600, 52616, { f: 2, c: 52628 }, 52632, 52636, { f: 2, c: 52644 }, 52647, 52649, 52656, 52676, 52684, 52688, 52712, 52716, 52720, { f: 2, c: 52728 }, 52731, 52733, 52740, 52744, 52748, 52756, 52761, { f: 2, c: 52768 }, 52772, 52776, { f: 2, c: 52784 }, 52787, 52789, { f: 2, c: 52824 }, 52828, { f: 3, c: 52831 }, { f: 2, c: 52840 }, 52843, 52845, { f: 2, c: 52852 }, 52856, 52860, { f: 2, c: 52868 }, 52871, 52873, { f: 2, c: 52880 }, 52884, 52888, { f: 2, c: 52896 }, { f: 3, c: 52899 }, { f: 2, c: 52908 }, 52929, { f: 2, c: 52964 }, 52968, { f: 2, c: 52971 }, { f: 2, c: 52980 }, { f: 3, c: 52983 }, { f: 2, c: 52992 }, 52996, 53e3, { f: 2, c: 53008 }, 53011, 53013, 53020, 53024, 53028, { f: 2, c: 53036 }, { f: 3, c: 53039 }, 53048, { f: 2, c: 53076 }, 53080, 53084, { f: 2, c: 53092 }, 53095, 53097, { f: 2, c: 53104 }, 53108, 53112, 53120, 53125, 53132, 53153, 53160, 53168, 53188, { f: 2, c: 53216 }, 53220, 53224, { f: 2, c: 53232 }, 53235, 53237, 53244, 53248, 53252, 53265, 53272, 53293, { f: 2, c: 53300 }, 53304, 53308, { f: 2, c: 53316 }, 53319, 53321, 53328, 53332, 53336, 53344, { f: 2, c: 53356 }, 53360, 53364, { f: 2, c: 53372 }, 53377, { f: 2, c: 53412 }, 53416, 53420, { f: 2, c: 53428 }, 53431, 53433, { f: 2, c: 53440 }, 53444, { f: 2, c: 53448 }, { f: 2, c: 53456 }, { f: 3, c: 53459 }, { f: 2, c: 53468 }, 53472, 53476, { f: 2, c: 53484 }, { f: 3, c: 53487 }, 53496, 53517, { f: 2, c: 53552 }, 53556, 53560, 53562, { f: 2, c: 53568 }, { f: 3, c: 53571 }, { f: 2, c: 53580 }, 53584, 53588, { f: 2, c: 53596 }, 53599, 53601, 53608, 53612, 53628, 53636, 53640, { f: 2, c: 53664 }, 53668, 53672, { f: 2, c: 53680 }, 53683, 53685, 53690, 53692, 53696, 53720, 53748, 53752, 53767, 53769, 53776, { f: 2, c: 53804 }, 53808, 53812, { f: 2, c: 53820 }, 53823, 53825, 53832, 53852, 53860, { f: 2, c: 53888 }, 53892, 53896, { f: 2, c: 53904 }, 53909, 53916, 53920, 53924, 53932, 53937, { f: 2, c: 53944 }, 53948, { f: 2, c: 53951 }, 53954, { f: 2, c: 53960 }, 53963, 53972, 53976, 53980, { f: 2, c: 53988 }, { f: 2, c: 54e3 }, 54004, 54008, { f: 2, c: 54016 }, 54019, 54021, { f: 3, c: 54028 }, 54032, 54036, 54038, { f: 2, c: 54044 }, { f: 3, c: 54047 }, 54053, { f: 2, c: 54056 }, 54060, 54064, { f: 2, c: 54072 }, { f: 3, c: 54075 }, { f: 2, c: 54084 }, { f: 2, c: 54140 }, 54144, 54148, { f: 2, c: 54156 }, { f: 3, c: 54159 }, { f: 2, c: 54168 }, 54172, 54176, { f: 2, c: 54184 }, 54187, 54189, 54196, 54200, 54204, { f: 2, c: 54212 }, { f: 2, c: 54216 }, 54224, 54232, 54241, 54243, { f: 2, c: 54252 }, 54256, 54260, { f: 2, c: 54268 }, 54271, 54273, 54280, 54301, 54336, 54340, 54364, 54368, 54372, 54381, 54383, { f: 2, c: 54392 }, 54396, { f: 2, c: 54399 }, 54402, { f: 2, c: 54408 }, 54411, 54413, 54420, 54441, 54476, 54480, 54484, 54492, 54495, 54504, 54508, 54512, 54520, 54523, 54525, 54532, 54536, 54540, { f: 2, c: 54548 }, 54551, { f: 2, c: 54588 }, 54592, 54596, { f: 2, c: 54604 }, 54607, 54609, { f: 2, c: 54616 }, 54620, 54624, 54629, { f: 2, c: 54632 }, 54635, 54637, { f: 2, c: 54644 }, 54648, 54652, { f: 2, c: 54660 }, { f: 3, c: 54663 }, 54672, 54693, { f: 2, c: 54728 }, 54732, 54736, 54738, { f: 2, c: 54744 }, 54747, 54749, { f: 2, c: 54756 }, 54760, 54764, { f: 2, c: 54772 }, 54775, 54777, { f: 2, c: 54784 }, 54788, 54792, { f: 2, c: 54800 }, { f: 3, c: 54803 }, 54812, 54816, 54820, 54829, { f: 2, c: 54840 }, 54844, 54848, 54853, { f: 2, c: 54856 }, 54859, 54861, 54865, { f: 2, c: 54868 }, 54872, 54876, 54887, 54889, { f: 2, c: 54896 }, 54900, 54915, 54917, { f: 2, c: 54924 }, 54928, 54932, 54941, 54943, 54945, 54952, 54956, 54960, 54969, 54971, { f: 2, c: 54980 }, 54984, 54988, 54993, 54996, 54999, 55001, 55008, 55012, 55016, 55024, 55029, { f: 2, c: 55036 }, 55040, 55044, 55057, { f: 2, c: 55064 }, 55068, 55072, { f: 2, c: 55080 }, 55083, 55085, { f: 2, c: 55092 }, 55096, 55100, 55108, 55111, 55113, { f: 2, c: 55120 }, 55124, { f: 4, c: 55126 }, { f: 2, c: 55136 }, 55139, 55141, 55145, 55148, 55152, 55156, { f: 2, c: 55164 }, 55169, { f: 2, c: 55176 }, 55180, 55184, { f: 2, c: 55192 }, 55195, 55197, 20285, 20339, 20551, 20729, 21152, 21487, 21621, 21733, 22025, 23233, 23478, 26247, { f: 2, c: 26550 }, 26607, 27468, 29634, 30146, 31292, 33499, 33540, 34903, 34952, 35382, [36040, 63747], 36303, 36603, 36838, 39381, 21051, 21364, 21508, 24682, 24932, 27580, 29647, 33050, 35258, [12179, 35282], 38307, 20355, 21002, 22718, 22904, 23014, [12082, 24178], 24185, 25031, 25536, 26438, 26604, 26751, 28567, 30286, 30475, 30965, 31240, 31487, 31777, 32925, [12169, 33390], 33393, 35563, 38291, 20075, 21917, 26359, 28212, 30883, 31469, 33883, 35088, 34638, 38824, 21208, 22350, 22570, 23884, 24863, 25022, 25121, 25954, 26577, 27204, 28187, [12130, 29976], 30131, 30435, 30640, 32058, 37039, { f: 2, c: 37969 }, 40853, 21283, 23724, 30002, 32987, 37440, 38296, 21083, 22536, 23004, 23713, 23831, 24247, 24378, 24394, 24951, 27743, 30074, 30086, 31968, 32115, 32177, 32652, 33108, 33313, 34193, 35137, 35611, 37628, [38477, 64009], 40007, 20171, 20215, 20491, 20977, 22607, 24887, 24894, 24936, 25913, 27114, 28433, 30117, 30342, 30422, 31623, 33445, 33995, 37799, 38283, 21888, 23458, 22353, 31923, 32697, 37301, 20520, 21435, 23621, 24040, 25298, 25454, 25818, 25831, 28192, 28844, 31067, 36317, 36382, 36989, 37445, 37624, 20094, 20214, 20581, [12081, 24062], 24314, 24838, 26967, 33137, 34388, 36423, 37749, 39467, 20062, 20625, 26480, 26688, 20745, 21133, 21138, 27298, 30652, 37392, 40660, 21163, 24623, 36850, 20552, 25001, 25581, 25802, 26684, 27268, 28608, 33160, 35233, 38548, 22533, 29309, [12125, 29356], 29956, 32121, 32365, 32937, [12178, 35211, 64010], 35700, 36963, 40273, 25225, 27770, 28500, 32080, 32570, 35363, 20860, 24906, 31645, 35609, 37463, 37772, 20140, 20435, 20510, 20670, 20742, 21185, 21197, 21375, 22384, 22659, 24218, 24465, 24950, 25004, 25806, 25964, 26223, 26299, [26356, 63745], 26775, 28039, 28805, 28913, 29855, 29861, 29898, 30169, 30828, 30956, 31455, 31478, 32069, 32147, 32789, 32831, 33051, 33686, 35686, 36629, 36885, 37857, 38915, 38968, 39514, 39912, 20418, 21843, 22586, [22865, 63753], 23395, 23622, 24760, 25106, 26690, 26800, 26856, 28330, 30028, 30328, 30926, 31293, 31995, 32363, 32380, 35336, 35489, 35903, 38542, 40388, 21476, 21481, 21578, 21617, 22266, 22993, 23396, 23611, 24235, 25335, 25911, 25925, 25970, 26272, 26543, 27073, 27837, 30204, 30352, 30590, 31295, 32660, 32771, 32929, 33167, 33510, 33533, 33776, 34241, 34865, 34996, 35493, 36764, 37678, 38599, 39015, [12220, 39640], [12238, 40723], 21741, 26011, 26354, 26767, 31296, [12181, 35895], 40288, 22256, 22372, 23825, 26118, 26801, 26829, 28414, 29736, 34974, 39908, 27752, [12219, 39592], 20379, 20844, 20849, 21151, 23380, [12079, 24037], 24656, 24685, 25329, 25511, 25915, 29657, 31354, 34467, 36002, 38799, [20018, 63749], 23521, [12093, 25096], 26524, [12128, 29916], 31185, 33747, 35463, 35506, 36328, 36942, 37707, 38982, [24275, 64011], 27112, 34303, 37101, 20896, 23448, 23532, 24931, 26874, 27454, 28748, 29743, 29912, 31649, 32592, 33733, 35264, 36011, 38364, 39208, 21038, 24669, 25324, 36866, 20362, 20809, 21281, 22745, 24291, 26336, 27960, 28826, 29378, 29654, 31568, 33009, 37979, 21350, 25499, 32619, 20054, 20608, 22602, 22750, 24618, 24871, 25296, 27088, 39745, 23439, 32024, 32945, 36703, 20132, 20689, 21676, 21932, 23308, 23968, 24039, 25898, 25934, 26657, 27211, 29409, 30350, 30703, 32094, 32761, 33184, 34126, 34527, 36611, 36686, 37066, 39171, 39509, 39851, 19992, 20037, 20061, 20167, 20465, 20855, 21246, 21312, [12061, 21475], [21477, 63750], 21646, 22036, 22389, 22434, 23495, 23943, 24272, 25084, 25304, 25937, 26552, 26601, 27083, 27472, 27590, 27628, 27714, 28317, 28792, 29399, 29590, 29699, 30655, 30697, 31350, 32127, 32777, [12165, 33276], 33285, 33290, 33503, 34914, 35635, 36092, 36544, 36881, 37041, 37476, 37558, 39378, 39493, 40169, 40407, [12244, 40860, 63751, 63752], 22283, 23616, 33738, 38816, 38827, 40628, 21531, 31384, 32676, 35033, 36557, 37089, 22528, 23624, 25496, 31391, 23470, [12088, 24339], 31353, 31406, 33422, 36524, 20518, 21048, 21240, 21367, 22280, 25331, 25458, 27402, 28099, 30519, 21413, 29527, 34152, 36470, 38357, 26426, 27331, 28528, 35437, 36556, 39243, 26231, 27512, 36020, [12225, 39740], 21483, 22317, 22862, 25542, 27131, 29674, 30789, 31418, 31429, 31998, 33909, 35215, 36211, 36917, 38312, 21243, 22343, 30023, 31584, 33740, 37406, 27224, 20811, 21067, 21127, 25119, 26840, 26997, 38553, 20677, 21156, 21220, 25027, [12100, 26020], 26681, 27135, 29822, 31563, 33465, 33771, 35250, 35641, 36817, 39241, 20170, 22935, 25810, 26129, 27278, 29748, 31105, 31165, 33449, { f: 2, c: 34942 }, 35167, 37670, 20235, 21450, 24613, 25201, 27762, 32026, 32102, 20120, 20834, 30684, 32943, 20225, 20238, 20854, 20864, 21980, 22120, 22331, 22522, 22524, 22804, 22855, 22931, 23492, 23696, 23822, [12080, 24049], 24190, 24524, 25216, 26071, 26083, { f: 2, c: 26398 }, 26462, 26827, 26820, 27231, 27450, 27683, 27773, 27778, 28103, 29592, 29734, 29738, 29826, 29859, 30072, 30079, 30849, 30959, 31041, { f: 2, c: 31047 }, 31098, 31637, 32e3, 32186, 32648, 32774, 32813, 32908, 35352, 35663, [35912, 63744], 36215, 37665, 37668, 39138, 39249, { f: 2, c: 39438 }, 39525, 40594, 32202, 20342, 21513, 25326, 26708, [12198, 37329, 63754], 21931, 20794, 23068, 25062, [25295, 63835], 25343, 37027, [35582, 63837], 26262, 29014, 38627, 25423, 25466, 21335, 26511, 26976, 28275, 30007, 32013, 34930, 22218, 23064, 20035, 20839, [22856, 63756], 26608, 32784, [12069, 22899, 63873], [24180, 63886], [25754, 63889], [31178, 63893], [24565, 63907], 24684, 25288, [25467, 63908], [23527, 63839, 63914], 23511, 21162, 22900, 24361, [24594, 63840], 29785, 39377, 28611, 33215, 36786, 24817, 33126, [23615, 63933], 23273, 35365, [26491, 63944], [32016, 63951], 33021, 23612, [27877, 63971], [21311, 63979], [28346, 63980], 22810, [33590, 63998], [20025, 63838], 20150, 20294, 21934, 22296, 22727, 24406, 26039, 26086, 27264, 27573, 28237, 30701, 31471, 31774, 32222, 34507, 34962, 37170, 37723, 25787, 28606, 29562, 30136, 36948, 21846, 22349, 25018, 25812, 26311, 28129, 28251, 28525, 28601, 30192, 32835, 33213, 34113, 35203, 35527, 35674, 37663, 27795, 30035, 31572, 36367, 36957, 21776, 22530, 22616, 24162, 25095, 25758, 26848, 30070, [31958, 64003], 34739, 40680, 20195, 22408, 22382, [12068, 22823], 23565, 23729, 24118, 24453, 25140, 25825, 29619, 33274, 34955, 36024, 38538, 40667, [23429, 64004], 24503, 24755, 20498, [12049, 20992], 21040, 22294, 22581, 22615, 23566, 23648, 23798, 23947, [24230, 64001], 24466, 24764, 25361, 25481, 25623, 26691, 26873, 27330, 28120, 28193, 28372, 28644, 29182, 30428, 30585, 31153, 31291, 33796, 35241, 36077, 36339, 36424, 36867, 36884, 36947, 37117, 37709, 38518, 38876, 27602, 28678, 29272, 29346, 29544, 30563, 31167, 31716, 32411, [35712, 63834], 22697, 24775, 25958, 26109, 26302, 27788, 28958, 29129, 35930, 38931, 20077, 31361, 20189, 20908, 20941, 21205, 21516, 24999, 26481, 26704, 26847, [27934, 64005], 28540, 30140, 30643, 31461, 33012, 33891, 37509, 20828, [12099, 26007], 26460, 26515, 30168, 31431, 33651, [12182, 35910], 36887, 38957, 23663, 33216, 33434, 36929, 36975, 37389, 24471, 23965, 27225, 29128, 30331, 31561, 34276, 35588, 37159, 39472, [21895, 63755], [25078, 63757], [30313, 63758], [32645, 63759], [34367, 63760], [34746, 63761], [35064, 63762], [37007, 63763], [27931, 63765], [28889, 63766], [29662, 63767], 32097, [33853, 63768], [37226, 63769], [39409, 63770], [20098, 63771], [21365, 63772], [27396, 63773], 27410, 28734, [29211, 63774], [34349, 63775], [40478, 63776], 21068, 36771, [23888, 63777], 25829, 25900, 27414, [28651, 63778], 31811, 32412, [34253, 63779], [35172, 63780], 35261, [25289, 63781], [33240, 63782], [34847, 63783], [24266, 63784], [26391, 63785], [28010, 63786], [29436, 63787], 29701, 29807, 34690, [37086, 63788], [20358, 63789], 23821, 24480, 33802, [20919, 63790], [25504, 63861], [30053, 63862], [20142, 63863], 20486, [20841, 63864], [20937, 63865], [26753, 63866], 27153, 31918, 31921, [31975, 63867], [33391, 63868], [35538, 63869], 36635, [37327, 63870], 20406, 20791, [21237, 63871], [21570, 63872], [24300, 63874], 24942, 25150, [26053, 63875], 27354, [28670, 63876], [31018, 63877], 34268, 34851, [38317, 63878], 39522, [39530, 63879], [40599, 63880], [40654, 63881], [12050, 21147, 63882], [26310, 63883], [27511, 63884], 28701, 31019, [36706, 63885], 38722, [24976, 63887], [25088, 63888], 25891, [28451, 63890], [29001, 63891], [29833, 63892], [32244, 63894], [32879, 63895], [34030, 63897], [36646, 63896], [36899, 63898], [37706, 63899], 20925, [21015, 63900], [21155, 63901], 27916, [28872, 63903], [35010, 63904], [24265, 63906], 25986, [27566, 63909], 28610, [31806, 63910], [29557, 63911], [20196, 63912], 20278, [22265, 63913], 23738, [23994, 63915], [24604, 63916], [29618, 63917], 31533, [32666, 63919], 32718, [32838, 63920], 36894, [37428, 63921], [38646, 63922], [38728, 63923], [38936, 63924], 40801, [20363, 63925], 28583, [31150, 63926], [37300, 63927], [38583, 63928], [21214, 63791], 25736, [25796, 63792], [27347, 63793], 28510, 28696, [29200, 63794], [30439, 63795], [12156, 32769, 63796], [34310, 63797], [34396, 63798], [36335, 63799], 36613, [38706, 63800], [39791, 63801], [40442, 63802], [12228, 40565], [30860, 63803], [31103, 63804], [32160, 63805], [33737, 63806], [37636, 63807], [12229, 40575, 63808], 40595, [35542, 63809], [22751, 63810], [24324, 63811], 26407, 28711, 29903, [31840, 63812], [32894, 63813], 20769, 28712, [29282, 63814], [30922, 63815], [36034, 63816], 36058, 36084, [38647, 63817], [20102, 63930], [20698, 63931], [23534, 63932], 24278, [26009, 63934], [29134, 63936], [30274, 63937], 30637, 32842, [34044, 63938], [36988, 63939], 39719, [12243, 40845, 63940], [22744, 63818], 23105, [23650, 63819], [27155, 63820], [28122, 63821], [28431, 63822], 30267, [32047, 63823], [32311, 63824], 34078, 35128, 37860, [38475, 63825], [21129, 63943], 26066, [26611, 63945], 27060, [27969, 63946], [28316, 63947], 28687, [29705, 63948], 29792, [30041, 63949], 30244, [30827, 63950], 35628, [39006, 63952], [20845, 63953], [25134, 63954], [38520, 63955], 20374, [20523, 63956], [23833, 63957], [28138, 63958], 32184, [36650, 63959], [24459, 63960], [24900, 63961], [26647, 63962], [38534, 63964], [21202, 63826], [32907, 63827], [20956, 63828], [20940, 63829], 26974, [31260, 63830], [32190, 63831], [33777, 63832], [38517, 63833], 20442, [21033, 63965], 21400, [21519, 63966], 21774, [23653, 63967], 24743, [26446, 63969], [26792, 63970], 28012, 29313, 29432, [29702, 63972], 29827, [30178, 63973], 31852, [32633, 63974], 32696, 33673, [35023, 63975], [35041, 63976], [12197, 37324, 63977], 37328, [38626, 63978], 39881, [21533, 63981], 28542, [29136, 63982], [29848, 63983], [34298, 63984], 36522, [38563, 63985], [40023, 63986], [40607, 63987], [26519, 63988], [28107, 63989], 29747, [33256, 63990], 38678, 30764, [12148, 31435, 63991], [31520, 63992], [31890, 63993], 25705, 29802, 30194, 30908, 30952, [12218, 39340], 39764, [12231, 40635], 23518, 24149, 28448, 33180, 33707, 37e3, 19975, 21325, 23081, 24018, 24398, 24930, 25405, 26217, 26364, 28415, 28459, 28771, 30622, 33836, 34067, 34875, 36627, 39237, 39995, 21788, 25273, 26411, 27819, 33545, 35178, 38778, 20129, 22916, { f: 2, c: 24536 }, 26395, 32178, 32596, 33426, 33579, 33725, 36638, 37017, 22475, 22969, 23186, 23504, 26151, 26522, 26757, 27599, 29028, 32629, 36023, 36067, 36993, 39749, 33032, 35978, 38476, 39488, [12230, 40613], 23391, 27667, 29467, 30450, 30431, 33804, 20906, 35219, 20813, 20885, 21193, 26825, 27796, 30468, 30496, 32191, 32236, [12207, 38754], 40629, 28357, 34065, 20901, 21517, 21629, 26126, 26269, 26919, 28319, [12139, 30399], 30609, 33559, 33986, 34719, 37225, 37528, 40180, 34946, 20398, 20882, 21215, 22982, 24125, 24917, { f: 2, c: 25720 }, 26286, 26576, 27169, 27597, [12113, 27611], 29279, 29281, 29761, 30520, [12141, 30683], 32791, 33468, 33541, 35584, 35624, 35980, [12106, 26408], 27792, 29287, [12140, 30446], 30566, 31302, 40361, 27519, 27794, 22818, 26406, 33945, 21359, 22675, 22937, 24287, 25551, 26164, 26483, 28218, 29483, 31447, 33495, 37672, 21209, 24043, 25006, 25035, 25098, 25287, 25771, [12102, 26080], 26969, 27494, [12111, 27595], 28961, 29687, 30045, 32326, 33310, 33538, 34154, 35491, 36031, 38695, 40289, 22696, 40664, 20497, 21006, 21563, 21839, [12098, 25991], 27766, { f: 2, c: 32010 }, 32862, 34442, [12200, 38272], 38639, 21247, 27797, 29289, 21619, 23194, 23614, 23883, 24396, 24494, 26410, 26806, 26979, 28220, 28228, 30473, [12150, 31859], 32654, 34183, 35598, 36855, 38753, 40692, 23735, 24758, 24845, 25003, 25935, { f: 2, c: 26107 }, 27665, 27887, 29599, 29641, 32225, 38292, 23494, 34588, 35600, 21085, 21338, 25293, 25615, 25778, 26420, 27192, 27850, 29632, 29854, 31636, 31893, 32283, 33162, 33334, 34180, 36843, 38649, 39361, 20276, 21322, 21453, 21467, 25292, 25644, 25856, 26001, 27075, 27886, 28504, 29677, 30036, 30242, 30436, 30460, 30928, [30971, 63844], 31020, 32070, 33324, 34784, 36820, 38930, 39151, 21187, 25300, 25765, 28196, 28497, 30332, 36299, 37297, 37474, 39662, 39747, 20515, 20621, 22346, 22952, 23592, 24135, 24439, 25151, 25918, [12101, 26041], 26049, 26121, 26507, 27036, 28354, 30917, 32033, 32938, 33152, 33323, 33459, 33953, 34444, 35370, 35607, 37030, 38450, 40848, 20493, 20467, 22521, 24472, 25308, 25490, 26479, 28227, 28953, 30403, 32972, 32986, { f: 2, c: 35060 }, 35097, 36064, 36649, 37197, 38506, 20271, 20336, 24091, 26575, 26658, [12137, 30333], 30334, 39748, 24161, 27146, 29033, 29140, 30058, 32321, 34115, 34281, 39132, 20240, 31567, 32624, 38309, 20961, 24070, 26805, 27710, 27726, 27867, 29359, 31684, 33539, 27861, 29754, 20731, 21128, 22721, 25816, 27287, 29863, 30294, 30887, 34327, 38370, 38713, 21342, 24321, 35722, 36776, 36783, 37002, 21029, 30629, 40009, 40712, 19993, 20482, 20853, 23643, 24183, 26142, 26170, 26564, 26821, 28851, 29953, 30149, 31177, 31453, 36647, 39200, 39432, 20445, 22561, 22577, 23542, 26222, 27493, 27921, 28282, 28541, 29668, 29995, 33769, 35036, 35091, 35676, 36628, 20239, 20693, 21264, [12056, 21340], 23443, [24489, 63846], 26381, 31119, 33145, 33583, 34068, 35079, 35206, 36665, [36667, 64007], 39333, 39954, 26412, 20086, 20472, 22857, 23553, { f: 2, c: 23791 }, 25447, 26834, 28925, 29090, 29739, 32299, 34028, 34562, 36898, 37586, 40179, [19981, 63847], 20184, 20463, 20613, 21078, 21103, 21542, 21648, 22496, 22827, 23142, 23386, 23413, 23500, 24220, 25206, 25975, 26023, 28014, 28325, [12119, 29238], 31526, 31807, [12152, 32566], { f: 2, c: 33104 }, 33178, 33344, 33433, 33705, 35331, 36e3, 36070, 36091, 36212, 36282, 37096, 37340, [12201, 38428], 38468, 39385, 40167, [21271, 63843], 20998, 21545, 22132, 22707, 22868, 22894, 24575, 24996, 25198, 26128, 27774, 28954, 30406, 31881, 31966, 32027, 33452, 36033, 38640, 20315, 24343, 24447, 25282, 23849, 26379, 26842, 30844, 32323, 40300, 19989, 20633, [12052, 21269], 21290, 21329, 22915, 23138, 24199, 24754, 24970, 25161, 25209, 26e3, 26503, 27047, [12112, 27604], { f: 3, c: 27606 }, 27832, 29749, 30202, 30738, 30865, 31189, 31192, 31875, 32203, 32737, 32933, 33086, 33218, 33778, 34586, 35048, 35513, 35692, 36027, 37145, [12206, 38750], [12214, 39131], [12240, 40763], 22188, 23338, 24428, 25996, 27315, 27567, 27996, 28657, 28693, 29277, 29613, 36007, 36051, 38971, 24977, 27703, 32856, 39425, 20045, 20107, 20123, 20181, 20282, 20284, 20351, 20447, 20735, 21490, 21496, 21766, 21987, 22235, [12064, 22763], 22882, 23057, 23531, 23546, 23556, 24051, 24107, 24473, 24605, 25448, 26012, 26031, 26614, 26619, 26797, 27515, 27801, 27863, 28195, 28681, 29509, 30722, 31038, 31040, 31072, 31169, 31721, 32023, 32114, 32902, 33293, 33678, 34001, 34503, 35039, 35408, 35422, 35613, 36060, 36198, 36781, 37034, 39164, 39391, 40605, 21066, 26388, 20632, 21034, [12077, 23665], 25955, 27733, 29642, 29987, 30109, 31639, 33948, 37240, 38704, 20087, 25746, [27578, 63856], 29022, 34217, 19977, 26441, 26862, 28183, 33439, 34072, 34923, 25591, 28545, 37394, 39087, 19978, 20663, 20687, 20767, 21830, 21930, 22039, 23360, 23577, 23776, 24120, 24202, 24224, 24258, 24819, 26705, 27233, 28248, 29245, 29248, [29376, 63994], 30456, 31077, 31665, 32724, 35059, 35316, 35443, 35937, 36062, 38684, [22622, 63852], 29885, 36093, 21959, 31329, [32034, 63850], [12170, 33394], 29298, [12131, 29983], 29989, 31513, 22661, 22779, 23996, 24207, 24246, 24464, 24661, 25234, 25471, 25933, 26257, 26329, 26360, 26646, 26866, 29312, 29790, 31598, 32110, 32214, 32626, 32997, 33298, 34223, 35199, 35475, 36893, 37604, [12233, 40653], [12239, 40736], [12067, 22805], 22893, 24109, 24796, 26132, 26227, 26512, 27728, 28101, 28511, [12143, 30707], 30889, 33990, 37323, 37675, 20185, 20682, 20808, 21892, 23307, 23459, 25159, 25982, 26059, 28210, 29053, 29697, 29764, 29831, 29887, 30316, 31146, 32218, 32341, 32680, 33146, 33203, 33337, 34330, 34796, 35445, 36323, 36984, 37521, 37925, 39245, 39854, 21352, 23633, 26964, 27844, 27945, 28203, [12166, 33292], 34203, 35131, 35373, [35498, 63855, 63905], 38634, 40807, 21089, 26297, 27570, 32406, 34814, 36109, 38275, 38493, 25885, 28041, 29166, 22478, 22995, 23468, 24615, 24826, 25104, 26143, 26207, 29481, 29689, 30427, [30465, 63853], 31596, 32854, 32882, 33125, 35488, 37266, 19990, 21218, 27506, 27927, 31237, 31545, 32048, 36016, 21484, 22063, 22609, 23477, [12073, 23567], 23569, 24034, 25152, 25475, 25620, 26157, 26803, 27836, 28040, 28335, 28703, 28836, 29138, 29990, 30095, 30094, 30233, 31505, 31712, 31787, 32032, 32057, 34092, 34157, 34311, 35380, 36877, 36961, 37045, 37559, 38902, 39479, 20439, 23660, 26463, 28049, 31903, 32396, 35606, 36118, 36895, 23403, 24061, 25613, 33984, 36956, 39137, [29575, 63841, 63963], 23435, 24730, 26494, 28126, 35359, 35494, 36865, 38924, 21047, 28753, 30862, 37782, 34928, 37335, 20462, 21463, 22013, 22234, 22402, 22781, 23234, 23432, 23723, 23744, 24101, 24833, 25101, [12095, 25163], 25480, 25628, 25910, [25976, 63849], 27193, 27530, [12116, 27700], 27929, 28465, 29159, 29417, 29560, 29703, 29874, 30246, 30561, 31168, 31319, 31466, 31929, 32143, 32172, 32353, 32670, 33065, 33585, 33936, 34010, 34282, 34966, 35504, 35728, 36664, 36930, 36995, 37228, 37526, 37561, 38539, { f: 2, c: 38567 }, 38614, 38656, 38920, [12216, 39318], 39635, 39706, 21460, 22654, 22809, 23408, 23487, 28113, 28506, 29087, 29729, 29881, 32901, 33789, 24033, 24455, 24490, 24642, 26092, 26642, 26991, 27219, 27529, 27957, 28147, 29667, 30462, 30636, 31565, 32020, 33059, 33308, 33600, 34036, 34147, 35426, 35524, 37255, 37662, 38918, 39348, 25100, 34899, 36848, 37477, 23815, 23847, 23913, 29791, 33181, 34664, 28629, [25342, 63859], 32722, 35126, 35186, 19998, 20056, 20711, 21213, 21319, 25215, 26119, 32361, 34821, 38494, 20365, 21273, 22070, 22987, 23204, [12075, 23608], 23630, 23629, 24066, 24337, 24643, 26045, 26159, 26178, 26558, 26612, 29468, [12142, 30690], [12144, 31034], 32709, 33940, 33997, 35222, 35430, 35433, 35553, [12183, 35925], 35962, 22516, 23508, 24335, 24687, 25325, 26893, 27542, 28252, 29060, 31698, 34645, [35672, 63996], 36606, [12215, 39135], 39166, 20280, 20353, 20449, 21627, 23072, 23480, 24892, 26032, 26216, 29180, 30003, 31070, 32051, 33102, [12162, 33251], 33688, 34218, 34254, 34563, 35338, [12189, 36523], [12191, 36763], 36805, 22833, 23460, 23526, 24713, 23529, 23563, [12092, 24515], 27777, 28145, 28683, 29978, 33455, 35574, [20160, 63997], [12055, 21313], 38617, [12114, 27663], 20126, 20420, 20818, 21854, 23077, 23784, 25105, [12123, 29273], 33469, 33706, 34558, 34905, 35357, 38463, 38597, 39187, 40201, 40285, 22538, 23731, 23997, 24132, [24801, 63929], 24853, 25569, [27138, 63764, 63836, 63935], 28197, 37122, 37716, 38990, 39952, 40823, 23433, 23736, 25353, 26191, 26696, 30524, 38593, 38797, 38996, 39839, 26017, 35585, 36555, 38332, 21813, 23721, 24022, 24245, 26263, 30284, 33780, 38343, 22739, 25276, 29390, 40232, 20208, 22830, 24591, 26171, 27523, 31207, 40230, 21395, 21696, 22467, 23830, 24859, 26326, 28079, 30861, 33406, 38552, 38724, 21380, 25212, 25494, 28082, 32266, 33099, 38989, 27387, 32588, 40367, 40474, 20063, 20539, 20918, 22812, 24825, 25590, 26928, 29242, 32822, 37326, 24369, 32004, [33509, 63860], 33903, 33979, 34277, 36493, 20335, 22756, 23363, 24665, 25562, 25880, 25965, 26264, 26954, 27171, 27915, 28673, 29036, 30162, 30221, 31155, 31344, [12154, 32650], 35140, 35731, 37312, 38525, 39178, 22276, 24481, 26044, 28417, 30208, 31142, 35486, 39341, [12226, 39770], 40812, 20740, 25014, 25233, 27277, 33222, 20547, 22576, 24422, 28937, [12180, 35328], 35578, 23420, 34326, 20474, 20796, 22196, 22852, 25513, 28153, 23978, 26989, 20870, 20104, 20313, 22914, 27487, 27741, 29877, 30998, 33287, 33349, 33593, 36671, 36701, 39192, 20134, 22495, 24441, [26131, 63968], 30123, 32377, 35695, 36870, 39515, 22181, 22567, 23032, 23071, 23476, 24310, 25424, 25403, 26941, 27783, 27839, 28046, 28051, 28149, 28436, 28895, 28982, 29017, 29123, 29141, 30799, 30831, 31605, 32227, 32303, 34893, 36575, 37467, 40182, 24709, 28037, 29105, 38321, 21421, 26579, 28814, 28976, 29744, 33398, 33490, 38331, 39653, 40573, 26308, 29121, [33865, 63854], 22603, 23992, 24433, 26144, 26254, 27001, 27054, 27704, 27891, 28214, 28481, 28634, 28699, 28719, 29008, 29151, 29552, 29787, 29908, 30408, 31310, 32403, 33521, 35424, 36814, 37704, 38681, 20034, 20522, 21e3, 21473, 26355, 27757, 28618, 29450, 30591, 31330, 33454, 34269, 34306, 35028, 35427, 35709, 35947, 37555, 38675, 38928, 20116, 20237, 20425, 20658, 21320, 21566, 21555, 21978, 22626, 22714, 22887, 23067, 23524, 24735, 25034, 25942, 26111, 26212, 26791, 27738, 28595, 28879, 29100, 29522, 31613, 34568, 35492, 39986, 40711, 23627, 27779, 29508, [12127, 29577], 37434, 28331, 29797, 30239, 31337, 32277, 34314, 20800, 22725, 25793, 29934, 29973, 30320, 32705, 37013, 38605, 39252, 28198, [12129, 29926], { f: 2, c: 31401 }, 33253, 34521, 34680, 35355, 23113, 23436, 23451, 26785, 26880, 28003, 29609, 29715, 29740, 30871, 32233, 32747, 33048, 33109, 33694, 35916, [38446, 63942], 38929, [12104, 26352], 24448, 26106, 26505, 27754, 29579, 20525, 23043, 27498, 30702, 22806, 23916, 24013, 29477, 30031, 20709, 20985, 22575, 22829, 22934, 23002, 23525, 23970, 25303, 25622, 25747, 25854, 26332, 27208, 29183, 29796, 31368, 31407, 32327, 32350, 32768, 33136, 34799, 35201, 35616, 36953, 36992, 39250, 24958, 27442, 28020, 32287, 35109, 36785, 20433, 20653, 20887, 21191, 22471, 22665, 23481, 24248, 24898, 27029, 28044, 28263, 28342, 29076, 29794, [12132, 29992], 29996, 32883, 33592, 33993, 36362, 37780, 37854, 20110, 20305, 20598, 20778, [12060, 21448], 21451, 21491, 23431, 23507, 23588, 24858, 24962, 26100, [12124, 29275], 29591, 29760, 30402, 31056, 31121, 31161, 32006, [12155, 32701], 33419, 34261, 34398, 36802, 36935, 37109, 37354, 38533, [12204, 38632], 38633, 21206, 24423, 26093, 26161, 26671, 29020, 31286, 37057, 38922, 20113, 27218, 27550, 28560, 29065, 32792, 33464, 34131, 36939, 38549, 38642, 38907, 34074, 39729, 20112, 29066, 38596, 20803, 21407, 21729, 22291, 22290, 22435, 23195, 23236, 23491, 24616, 24895, 25588, 27781, 27961, 28274, 28304, 29232, 29503, 29783, 33489, 34945, 36677, 36960, 38498, 39e3, 40219, [12105, 26376], 36234, 37470, 20301, 20553, 20702, 21361, 22285, 22996, 23041, 23561, 24944, 26256, 28205, 29234, 29771, 32239, 32963, 33806, 33894, 34111, 34655, 34907, 35096, 35586, 36949, [12209, 38859], 39759, 20083, 20369, 20754, 20842, 21807, 21929, 23418, 23461, { f: 2, c: 24188 }, 24254, 24736, 24799, { f: 2, c: 24840 }, 25540, 25912, 26377, 26580, 26586, { f: 2, c: 26977 }, 27833, 27943, 28216, 28641, { f: 2, c: 29494 }, 29788, 30001, 30290, 32173, 33278, 33848, 35029, 35480, 35547, 35565, 36400, 36418, 36938, 36926, 36986, [12195, 37193], 37321, 37742, 22537, 27603, [12161, 32905], 32946, 20801, 22891, 23609, 28516, 29607, 32996, 36103, 37399, 38287, [12160, 32895], 25102, 28700, 32104, 34701, 22432, 24681, 24903, 27575, 35518, 37504, 38577, [12036, 20057], 21535, 28139, 34093, 38512, [12211, 38899], 39150, 25558, 27875, [12194, 37009], 20957, 25033, 33210, 40441, 20381, 20506, 20736, 23452, 24847, 25087, 25836, 26885, 27589, 30097, 30691, 32681, 33380, 34191, 34811, [12176, 34915], 35516, 35696, 37291, [12038, 20108], 20197, 20234, 22839, 23016, 24050, 24347, 24411, 24609, 29246, 29669, [30064, 63842], 30157, 31227, [12157, 32780], [12159, 32819], 32900, 33505, 33617, 36029, 36019, 36999, 39156, 39180, 28727, 30410, 32714, 32716, 32764, 35610, [12040, 20154], 20161, 20995, 21360, [21693, 63902], 22240, 23035, 23493, 24341, 24525, 28270, 32106, 33589, 34451, 35469, 38765, 38775, [12032, 19968], 20314, 20350, 22777, [12103, 26085], 28322, 36920, 37808, 39353, 20219, 22764, 22922, 23001, 24641, 31252, 33615, 36035, [12042, 20837], 21316, 20173, 21097, 23381, 33471, 20180, [21050, 63999], 21672, 22985, 23039, [12070, 23376], 23383, 23388, 24675, 24904, 28363, [28825, 63995], 29038, 29574, 29943, 30133, 30913, 32043, 32773, [12163, 33258], 33576, 34071, 34249, 35566, 36039, 38604, 20316, 21242, 22204, 26027, 26152, 28796, 28856, 29237, 32189, 33421, 37196, 38592, 40306, 23409, 26855, 27544, 28538, 30430, 23697, 26283, 28507, 31668, 31786, 34870, 38620, 19976, 20183, 21280, 22580, 22715, 22767, 22892, 23559, 24115, 24196, 24373, 25484, 26290, 26454, 27167, 27299, 27404, 28479, 29254, 29520, 29835, 31456, 31911, 33144, 33247, 33255, 33674, 33900, 34083, 34196, 34255, 35037, 36115, 37292, [12199, 38263], 38556, 20877, 21705, 22312, 23472, 25165, 26448, 26685, 26771, 28221, 28371, 28797, 32289, 35009, 36001, 36617, 40779, 40782, 29229, 31631, 35533, 37658, 20295, 20302, 20786, 21632, 22992, 24213, 25269, 26485, 26990, 27159, 27822, 28186, 29401, 29482, 30141, 31672, 32053, 33511, 33785, 33879, 34295, 35419, 36015, 36487, 36889, 37048, 38606, 40799, 21219, 21514, 23265, 23490, 25688, 25973, 28404, 29380, 30340, 31309, 31515, 31821, 32318, 32735, 33659, 35627, 36042, [12186, 36196], 36321, 36447, 36842, 36857, 36969, 37841, 20291, 20346, 20659, 20840, 20856, 21069, 21098, 22625, 22652, 22880, 23560, 23637, 24283, 24731, 25136, 26643, 27583, 27656, 28593, 29006, 29728, [12133, 3e4], 30008, 30033, 30322, 31564, 31627, 31661, 31686, 32399, 35438, 36670, 36681, 37439, 37523, 37666, 37931, 38651, 39002, 39019, 39198, [20999, 64e3], 25130, 25240, 27993, 30308, 31434, 31680, 32118, 21344, 23742, 24215, 28472, 28857, 31896, 38673, 39822, 40670, 25509, 25722, 34678, 19969, 20117, 20141, 20572, 20597, 21576, 22979, 23450, 24128, 24237, 24311, 24449, 24773, 25402, 25919, 25972, 26060, 26230, 26232, 26622, 26984, 27273, 27491, 27712, 28096, 28136, 28191, 28254, 28702, 28833, 29582, 29693, 30010, 30555, 30855, 31118, 31243, 31357, 31934, 32142, 33351, 35330, 35562, 35998, 37165, 37194, 37336, 37478, 37580, 37664, 38662, 38742, 38748, 38914, [12237, 40718], 21046, 21137, 21884, 22564, 24093, 24351, 24716, 25552, 26799, 28639, 31085, 31532, 33229, 34234, 35069, 35576, 36420, 37261, 38500, 38555, 38717, 38988, [12241, 40778], 20430, 20806, 20939, 21161, 22066, 24340, 24427, 25514, 25805, 26089, 26177, 26362, 26361, 26397, 26781, 26839, 27133, 28437, 28526, 29031, 29157, [12118, 29226], 29866, 30522, 31062, 31066, 31199, 31264, 31381, 31895, 31967, 32068, 32368, 32903, 34299, 34468, 35412, 35519, 36249, 36481, 36896, 36973, 37347, 38459, 38613, [12227, 40165], 26063, 31751, [12188, 36275], 37827, 23384, 23562, 21330, 25305, 29469, 20519, 23447, 24478, 24752, 24939, 26837, 28121, 29742, 31278, 32066, 32156, 32305, 33131, 36394, 36405, 37758, 37912, 20304, 22352, 24038, 24231, 25387, 32618, 20027, 20303, 20367, 20570, 23005, 32964, 21610, 21608, 22014, 22863, 23449, 24030, 24282, 26205, 26417, 26609, 26666, 27880, 27954, 28234, 28557, 28855, 29664, 30087, 31820, 32002, 32044, 32162, [12168, 33311], 34523, 35387, 35461, [12187, 36208], 36490, 36659, 36913, 37198, 37202, 37956, 39376, [12149, 31481], 31909, 20426, 20737, 20934, 22472, 23535, 23803, 26201, 27197, 27994, 28310, 28652, 28940, 30063, 31459, 34850, 36897, 36981, 38603, 39423, 33537, 20013, 20210, 34886, 37325, 21373, 27355, 26987, 27713, 33914, 22686, 24974, 26366, 25327, 28893, 29969, 30151, 32338, 33976, 35657, 36104, 20043, 21482, 21675, 22320, 22336, 24535, 25345, 25351, 25711, [12096, 25903], 26088, 26234, 26525, 26547, [12108, 27490], 27744, 27802, 28460, 30693, 30757, 31049, 31063, 32025, 32930, 33026, [12164, 33267], 33437, 33463, 34584, 35468, 36100, 36286, 36978, 30452, 31257, 31287, 32340, 32887, 21767, 21972, 22645, 25391, 25634, 26185, 26187, 26733, 27035, 27524, 27941, 28337, 29645, 29800, 29857, 30043, 30137, 30433, 30494, 30603, 31206, 32265, 32285, 33275, 34095, 34967, 35386, 36049, 36587, [12192, 36784, 63857], 36914, 37805, 38499, 38515, 38663, 20356, 21489, 23018, 23241, 24089, 26702, 29894, 30142, 31209, 31378, 33187, 34541, 36074, 36300, 36845, 26015, 26389, 22519, 28503, 32221, 36655, 37878, 38598, 24501, 25074, 28548, 19988, 20376, 20511, 21449, 21983, 23919, 24046, 27425, 27492, 30923, 31642, 36425, [12190, 36554, 63746], 36974, 25417, 25662, 30528, 31364, 37679, 38015, 40810, 25776, 28591, 29158, 29864, 29914, 31428, 31762, 32386, 31922, 32408, 35738, 36106, 38013, 39184, 39244, 21049, 23519, 25830, 26413, 32046, 20717, [21443, 63851], 22649, { f: 2, c: 24920 }, 25082, 26028, 31449, 35730, 35734, 20489, 20513, 21109, 21809, 23100, 24288, 24432, 24884, 25950, 26124, 26166, 26274, 27085, 28356, 28466, 29462, 30241, 31379, 33081, 33369, 33750, 33980, 20661, 22512, 23488, 23528, 24425, 25505, 30758, 32181, 33756, 34081, 37319, 37365, 20874, 26613, 31574, 36012, 20932, 22971, 24765, 34389, 20508, 21076, 23610, 24957, 25114, [25299, 64002], 25842, 26021, 28364, 30240, 33034, 36448, 38495, 38587, 20191, 21315, 21912, 22825, 24029, 25797, 27849, 28154, 29588, 31359, [12167, 33307], 34214, 36068, 36368, 36983, 37351, 38369, 38433, 38854, 20984, 21746, 21894, 24505, 25764, 28552, 32180, 36639, 36685, 37941, 20681, 23574, 27838, 28155, 29979, 30651, 31805, 31844, 35449, 35522, 22558, 22974, 24086, 25463, 29266, 30090, 30571, 35548, 36028, 36626, 24307, 26228, 28152, 32893, 33729, 35531, [12205, 38737], 39894, 21059, 26367, 28053, 28399, 32224, 35558, 36910, 36958, 39636, 21021, 21119, 21736, 24980, 25220, 25307, 26786, 26898, 26970, 27189, 28818, 28966, 30813, 30977, 30990, 31186, 31245, 32918, [12171, 33400], 33493, 33609, 34121, 35970, 36229, 37218, 37259, 37294, 20419, 22225, 29165, 30679, 34560, 35320, [12072, 23544], 24534, 26449, 37032, 21474, 22618, 23541, 24740, 24961, 25696, 32317, 32880, 34085, 37507, 25774, 20652, 23828, 26368, 22684, 25277, 25512, 26894, 27e3, 27166, 28267, 30394, 31179, 33467, 33833, 35535, 36264, 36861, 37138, 37195, 37276, 37648, 37656, 37786, 38619, 39478, 39949, 19985, 30044, 31069, 31482, 31569, 31689, 32302, 33988, 36441, 36468, 36600, 36880, 26149, 26943, 29763, 20986, 26414, 40668, 20805, 24544, 27798, 34802, 34909, 34935, 24756, 33205, 33795, 36101, 21462, 21561, 22068, 23094, 23601, 28810, 32736, 32858, 33030, 33261, 36259, 37257, 39519, 40434, 20596, 20164, 21408, 24827, 28204, 23652, 20360, 20516, 21988, 23769, 24159, 24677, 26772, 27835, 28100, 29118, 30164, 30196, 30305, 31258, 31305, 32199, 32251, 32622, 33268, 34473, 36636, 38601, 39347, [12242, 40786], 21063, 21189, 39149, 35242, 19971, 26578, 28422, 20405, 23522, 26517, [27784, 63858], 28024, 29723, 30759, 37341, 37756, 34756, 31204, 31281, 24555, 20182, 21668, 21822, 22702, 22949, 24816, 25171, 25302, 26422, 26965, 33333, 38464, 39345, 39389, 20524, 21331, 21828, 22396, 25176, 25826, 26219, 26589, 28609, 28655, 29730, 29752, 35351, 37944, 21585, 22022, 22374, 24392, 24986, 27470, 28760, 28845, 32187, 35477, 22890, 33067, 25506, 30472, 32829, 36010, 22612, 25645, 27067, 23445, 24081, 28271, 34153, 20812, 21488, 22826, 24608, 24907, 27526, 27760, 27888, 31518, 32974, 33492, 36294, 37040, 39089, 25799, 28580, 25745, 25860, 20814, 21520, [12063, 22303], 35342, 24927, 26742, 30171, 31570, 32113, 36890, 22534, 27084, 33151, 35114, 36864, 38969, 20600, 22871, 22956, 25237, 36879, 39722, 24925, 29305, 38358, 22369, 23110, 24052, 25226, 25773, 25850, 26487, 27874, 27966, 29228, 29750, 30772, 32631, 33453, 36315, 38935, 21028, 22338, 26495, 29256, 29923, 36009, 36774, 37393, 38442, [12043, 20843], 21485, 25420, 20329, 21764, 24726, 25943, 27803, 28031, 29260, 29437, 31255, 35207, [12185, 35997], 24429, 28558, 28921, 33192, 24846, [20415, 63845], 20559, 25153, [12122, 29255], 31687, 32232, 32745, 36941, 38829, 39449, 36022, 22378, 24179, 26544, 33805, 35413, 21536, 23318, 24163, 24290, 24330, 25987, 32954, 34109, 38281, 38491, 20296, 21253, 21261, 21263, 21638, 21754, 22275, 24067, 24598, 25243, 25265, 25429, 27873, 28006, 30129, 30770, 32990, 33071, 33502, 33889, 33970, 34957, 35090, 36875, 37610, 39165, 39825, 24133, [26292, 64006], 26333, 28689, 29190, 20469, 21117, 24426, 24915, 26451, 27161, 28418, 29922, 31080, 34920, 35961, 39111, 39108, 39491, 21697, 31263, 26963, 35575, 35914, [12213, 39080], 39342, 24444, 25259, 30130, [12138, 30382], 34987, 36991, 38466, 21305, 24380, 24517, [27852, 63848], 29644, 30050, [12134, 30091], 31558, 33534, 39325, 20047, 36924, 19979, 20309, 21414, 22799, 24264, 26160, 27827, 29781, 33655, 34662, 36032, 36944, 38686, 39957, 22737, 23416, 34384, 35604, 40372, 23506, 24680, 24717, 26097, 27735, 28450, 28579, 28698, 32597, 32752, { f: 2, c: 38289 }, 38480, 38867, 21106, 36676, 20989, 21547, 21688, 21859, 21898, 27323, 28085, 32216, 33382, 37532, 38519, 40569, 21512, 21704, 30418, 34532, 38308, 38356, 38492, 20130, 20233, 23022, 23270, 24055, 24658, 25239, 26477, 26689, 27782, 28207, 32568, 32923, 33322, 38917, 20133, 20565, 21683, 22419, 22874, 23401, 23475, 25032, 26999, 28023, 28707, 34809, 35299, 35442, 35559, 36994, 39405, 39608, 21182, 26680, 20502, 24184, 26447, 33607, [12175, 34892, 64008], 20139, 21521, 22190, 29670, 37141, 38911, 39177, 39255, [12217, 39321], 22099, 22687, 34395, 35377, 25010, 27382, 29563, 36562, 27463, 38570, 39511, 22869, 29184, 36203, [12208, 38761], 20436, 23796, 24358, 25080, 26203, 27883, 28843, [12126, 29572], 29625, 29694, 30505, 30541, 32067, 32098, 32291, 33335, 34898, 36066, 37449, 39023, 23377, [12147, 31348], [12174, 34880], [12212, 38913], 23244, 20448, 21332, 22846, 23805, 25406, 28025, 29433, 33029, 33031, 33698, 37583, 38960, 20136, 20804, 21009, 22411, 24418, 27842, 28366, 28677, 28752, 28847, 29074, 29673, [29801, 63918], 33610, 34722, 34913, 36872, 37026, 37795, 39336, 20846, 24407, 24800, 24935, 26291, 34137, 36426, 37295, 38795, 20046, 20114, 21628, 22741, 22778, 22909, 23733, 24359, [12094, 25142], 25160, 26122, 26215, 27627, 28009, 28111, 28246, 28408, 28564, 28640, 28649, 28765, 29392, 29733, 29786, 29920, 30355, 31068, 31946, 32286, 32993, 33446, 33899, 33983, 34382, 34399, 34676, 35703, 35946, 37804, 38912, 39013, 24785, 25110, 37239, 23130, 26127, 28151, 28222, 29759, 39746, 24573, 24794, 31503, 21700, 24344, 27742, 27859, 27946, 28888, 32005, 34425, 35340, 40251, 21270, 21644, 23301, 27194, [12117, 28779], 30069, 31117, [12146, 31166], 33457, 33775, 35441, 35649, 36008, 38772, 25844, 25899, { f: 2, c: 30906 }, 31339, 20024, 21914, 22864, 23462, 24187, 24739, 25563, 27489, 26213, 26707, 28185, 29029, 29872, 32008, 36996, 39529, 39973, 27963, [28369, 63748], 29502, 35905, 38346, 20976, 24140, 24488, 24653, 24822, 24880, 24908, { f: 2, c: 26179 }, 27045, 27841, 28255, 28361, 28514, 29004, 29852, 30343, 31681, 31783, 33618, 34647, 36945, 38541, [12232, 40643], 21295, 22238, 24315, 24458, 24674, 24724, 25079, 26214, 26371, 27292, 28142, 28590, 28784, 29546, 32362, 33214, 33588, 34516, 35496, 36036, 21123, 29554, 23446, 27243, 37892, 21742, 22150, 23389, 25928, 25989, 26313, 26783, 28045, 28102, [12120, 29243], 32948, 37237, 39501, 20399, 20505, 21402, 21518, 21564, 21897, 21957, 24127, 24460, 26429, 29030, 29661, 36869, 21211, 21235, 22628, 22734, 28932, 29071, 29179, 34224, 35347, [26248, 63941], 34216, 21927, 26244, 29002, 33841, 21321, 21913, 27585, 24409, 24509, 25582, 26249, 28999, 35569, 36637, 40638, 20241, 25658, 28875, 30054, 34407, 24676, 35662, 40440, 20807, 20982, 21256, 27958, 33016, [12234, 40657], 26133, 27427, 28824, 30165, 21507, 23673, 32007, 35350, [12107, 27424], 27453, 27462, 21560, 24688, 27965, 32725, 33288, 20694, 20958, 21916, 22123, 22221, 23020, 23305, 24076, 24985, 24984, 25137, 26206, 26342, 29081, { f: 2, c: 29113 }, 29351, 31143, 31232, 32690, 35440, { s: 163 }, { f: 4, c: 12310 }, { s: 14 }, 8223, 8219, { f: 2, c: 8314 }, { s: 7 }, 8316, 0, { f: 2, c: 8317 }, { s: 23 }, 700, { s: 44 }, 8942, 8759, { s: 20 }, { f: 10, c: 10122 }, { s: 36 }, { f: 26, c: 9398 }, { s: 61 }, { f: 2, c: 8826 }, { f: 2, c: 8910 }, { f: 2, c: 8832 }, { f: 4, c: 8816 }, 0, 8842, 0, 8843, { f: 2, c: 8822 }, 8825, { f: 2, c: 8922 }, { s: 5 }, 8773, 8771, 8776, 0, 8868, { s: 78 }, 8244, { s: 11 }, 9839, { s: 4 }, 8258, { s: 4 }, 10045, 0, 0, 8226, { s: 4 }, { f: 2, c: 8249 }, { s: 16 }, 10010, 10006, 0, 9711, { s: 3 }, 10070, 0, 9676, { s: 24 }, 9775, { s: 6 }, 12320, 0, { f: 10, c: 10102 }, { s: 17 }, 12306, 12342, { s: 13 }, 8710, 0, 8735, 0, { f: 2, c: 8741 }, 0, 8787, 8785, { f: 2, c: 8806 }, 8723, { f: 3, c: 8853 }, 0, 8980, 0, 0, 8802, 0, 9649, 0, 8738, 8784, 0, 0, 8867, 0, 0, { f: 2, c: 8814 }, 8837, 8836, 8713, 8716, { f: 2, c: 8891 }, 8794, 8966, { s: 6 }, 12958, 0, 8252, { s: 11 }, 9702, { s: 3 }, 9663, 9653, 9657, 9667, { s: 4 }, 9674, 12849, 12857, 13259, { f: 5, c: 9327 }, { s: 18 }, 8656, 8655, 8653, { s: 37 }, 8657, 8659, { s: 8 }, 8626, 8625, 0, 8628, 8624, 8627, { s: 14 }, 8636, 8640, { s: 10 }, { f: 2, c: 8644 }, { s: 144 }, { f: 5, c: 9347 }, { s: 33 }, 12948, { s: 15 }, 12965, { s: 93 }, 8672, 8674, 8673, 8675, { s: 4 }, 8678, 8680, 8679, 8681, { s: 20 }, 9757, 9759, { s: 76 }, 12944, { f: 6, c: 12938 }, { s: 15 }, { f: 2, c: 12318 }, 8246, 0, 8245, { s: 3 }, 12540, 0, 0, { f: 2, c: 44034 }, { f: 2, c: 44037 }, { f: 5, c: 44043 }, 44056, { f: 2, c: 44062 }, { f: 3, c: 44065 }, { f: 7, c: 44069 }, 44078, { f: 6, c: 44082 }, { f: 2, c: 44090 }, { f: 3, c: 44093 }, { f: 10, c: 44097 }, 44108, { f: 6, c: 44110 }, { f: 3, c: 44117 }, { f: 3, c: 44121 }, { f: 19, c: 44125 }, { f: 2, c: 44146 }, { f: 2, c: 44149 }, 44153, { f: 5, c: 44155 }, 44162, { f: 2, c: 44167 }, { f: 3, c: 44173 }, { f: 3, c: 44177 }, { f: 7, c: 44181 }, 44190, { f: 6, c: 44194 }, 44203, { f: 2, c: 44205 }, { f: 7, c: 44209 }, 44218, { f: 3, c: 44222 }, { f: 2, c: 44226 }, { f: 3, c: 44229 }, { f: 3, c: 44233 }, { f: 8, c: 44237 }, 44246, { f: 8, c: 44248 }, { f: 2, c: 44258 }, { f: 2, c: 44261 }, 44265, 44267, { f: 2, c: 44269 }, 44274, 44276, { f: 5, c: 44279 }, { f: 2, c: 44286 }, { f: 3, c: 44289 }, 44293, { f: 5, c: 44295 }, 44302, 44304, { f: 6, c: 44306 }, { f: 3, c: 44313 }, { f: 3, c: 44317 }, { f: 8, c: 44321 }, { f: 2, c: 44330 }, { f: 6, c: 44334 }, { f: 2, c: 44342 }, { f: 3, c: 44345 }, { f: 7, c: 44349 }, 44358, 44360, { f: 6, c: 44362 }, { f: 3, c: 44369 }, { f: 3, c: 44373 }, { f: 8, c: 44377 }, 44386, { f: 8, c: 44388 }, { f: 2, c: 44398 }, { f: 2, c: 44401 }, { f: 4, c: 44407 }, 44414, 44416, { f: 5, c: 44419 }, { f: 2, c: 44426 }, { f: 3, c: 44429 }, { f: 11, c: 44433 }, { f: 6, c: 44446 }, { f: 18, c: 44453 }, { f: 8, c: 44472 }, { f: 2, c: 44482 }, { f: 3, c: 44485 }, { f: 7, c: 44489 }, 44498, { f: 8, c: 44500 }, { f: 3, c: 44509 }, { f: 3, c: 44513 }, { f: 19, c: 44517 }, { f: 2, c: 44538 }, { f: 2, c: 44541 }, { f: 6, c: 44546 }, 44554, 44556, { f: 6, c: 44558 }, { f: 27, c: 44565 }, { f: 2, c: 44594 }, { f: 2, c: 44597 }, 44601, { f: 5, c: 44603 }, 44610, 44612, { f: 3, c: 44615 }, 44619, 44623, { f: 3, c: 44625 }, 44629, { f: 5, c: 44631 }, 44638, { f: 3, c: 44642 }, { f: 2, c: 44646 }, { f: 2, c: 44650 }, { f: 3, c: 44653 }, { f: 7, c: 44657 }, 44666, { f: 6, c: 44670 }, { f: 6, c: 44678 }, { f: 47, c: 44685 }, 44735, { f: 3, c: 44737 }, { f: 7, c: 44741 }, 44750, { f: 6, c: 44754 }, { f: 2, c: 44762 }, { f: 11, c: 44765 }, { f: 2, c: 44777 }, 44780, { f: 6, c: 44782 }, { f: 3, c: 44789 }, { f: 3, c: 44793 }, { f: 10, c: 44797 }, { f: 4, c: 44809 }, { f: 2, c: 44814 }, { f: 27, c: 44817 }, { f: 2, c: 44846 }, 44849, 44851, { f: 7, c: 44853 }, 44862, 44864, { f: 4, c: 44868 }, { f: 6, c: 44874 }, { f: 11, c: 44881 }, { f: 6, c: 44894 }, { f: 19, c: 44902 }, { f: 6, c: 44922 }, { f: 3, c: 44929 }, { f: 3, c: 44933 }, { f: 7, c: 44937 }, { f: 3, c: 44946 }, { f: 6, c: 44950 }, { f: 27, c: 44957 }, { f: 2, c: 44986 }, { f: 3, c: 44989 }, { f: 6, c: 44993 }, 45002, 45004, { f: 5, c: 45007 }, { f: 7, c: 45013 }, { f: 11, c: 45021 }, { f: 6, c: 45034 }, { f: 2, c: 45042 }, { f: 3, c: 45045 }, { f: 7, c: 45049 }, { f: 2, c: 45058 }, { f: 7, c: 45061 }, { f: 3, c: 45069 }, { f: 3, c: 45073 }, { f: 7, c: 45077 }, { f: 10, c: 45086 }, { f: 27, c: 45097 }, { f: 2, c: 45126 }, 45129, 45131, 45133, { f: 4, c: 45135 }, 45142, 45144, { f: 3, c: 45146 }, { f: 30, c: 45150 }, { f: 2, c: 45182 }, { f: 3, c: 45185 }, { f: 7, c: 45189 }, 45198, 45200, { f: 6, c: 45202 }, 45211, { f: 2, c: 45213 }, { f: 5, c: 45219 }, 45226, 45232, 45234, { f: 2, c: 45238 }, { f: 3, c: 45241 }, { f: 7, c: 45245 }, 45254, { f: 6, c: 45258 }, { f: 2, c: 45266 }, { f: 3, c: 45269 }, { f: 7, c: 45273 }, { f: 4, c: 45281 }, { f: 34, c: 45286 }, 45322, { f: 3, c: 45325 }, 45329, { f: 4, c: 45332 }, 45338, { f: 5, c: 45342 }, { f: 2, c: 45350 }, { f: 3, c: 45353 }, { f: 7, c: 45357 }, 45366, { f: 6, c: 45370 }, { f: 2, c: 45378 }, { f: 3, c: 45381 }, { f: 7, c: 45385 }, { f: 2, c: 45394 }, { f: 2, c: 45398 }, { f: 3, c: 45401 }, { f: 3, c: 45405 }, { f: 23, c: 45409 }, { f: 2, c: 45434 }, { f: 3, c: 45437 }, 45441, { f: 5, c: 45443 }, 45450, 45452, { f: 4, c: 45454 }, { f: 3, c: 45461 }, { f: 3, c: 45465 }, { f: 11, c: 45469 }, { f: 35, c: 45481 }, { f: 3, c: 45517 }, { f: 3, c: 45521 }, { f: 7, c: 45525 }, 45534, { f: 8, c: 45536 }, { f: 2, c: 45546 }, { f: 3, c: 45549 }, { f: 8, c: 45553 }, 45562, 45564, { f: 6, c: 45566 }, { f: 2, c: 45574 }, { f: 2, c: 45577 }, { f: 7, c: 45581 }, 45590, 45592, { f: 6, c: 45594 }, { f: 19, c: 45601 }, { f: 7, c: 45621 }, { f: 27, c: 45629 }, { f: 3, c: 45657 }, { f: 3, c: 45661 }, { f: 7, c: 45665 }, { f: 10, c: 45674 }, { f: 6, c: 45686 }, { f: 7, c: 45693 }, { f: 3, c: 45702 }, { f: 6, c: 45706 }, { f: 2, c: 45714 }, { f: 3, c: 45717 }, { f: 5, c: 45723 }, 45730, 45732, { f: 3, c: 45735 }, 45739, { f: 3, c: 45741 }, { f: 3, c: 45745 }, { f: 19, c: 45749 }, { f: 2, c: 45770 }, { f: 3, c: 45773 }, 45777, { f: 5, c: 45779 }, 45786, 45788, { f: 4, c: 45790 }, 45795, 45799, { f: 2, c: 45801 }, { f: 3, c: 45808 }, 45814, { f: 3, c: 45820 }, { f: 2, c: 45826 }, { f: 3, c: 45829 }, { f: 7, c: 45833 }, 45842, { f: 6, c: 45846 }, { f: 55, c: 45853 }, 45911, { f: 2, c: 45913 }, 45917, { f: 4, c: 45920 }, 45926, 45928, 45930, { f: 2, c: 45932 }, 45935, { f: 2, c: 45938 }, { f: 3, c: 45941 }, { f: 7, c: 45945 }, 45954, { f: 6, c: 45958 }, { f: 3, c: 45965 }, { f: 3, c: 45969 }, { f: 11, c: 45973 }, { f: 6, c: 45986 }, { f: 3, c: 45993 }, { f: 23, c: 45997 }, { f: 2, c: 46022 }, { f: 2, c: 46025 }, 46029, 46031, { f: 3, c: 46033 }, 46038, 46040, 46042, 46044, { f: 2, c: 46046 }, { f: 3, c: 46049 }, { f: 3, c: 46053 }, { f: 19, c: 46057 }, { f: 19, c: 46077 }, { f: 7, c: 46097 }, { f: 3, c: 46105 }, { f: 3, c: 46109 }, { f: 7, c: 46113 }, 46122, { f: 8, c: 46124 }, { f: 27, c: 46133 }, { f: 2, c: 46162 }, { f: 3, c: 46165 }, { f: 7, c: 46169 }, 46178, 46180, { f: 6, c: 46182 }, { f: 19, c: 46189 }, { f: 7, c: 46209 }, { f: 20, c: 46217 }, { f: 6, c: 46238 }, { f: 3, c: 46245 }, { f: 3, c: 46249 }, { f: 8, c: 46253 }, 46262, 46264, { f: 6, c: 46266 }, { f: 3, c: 46273 }, { f: 3, c: 46277 }, { f: 7, c: 46281 }, { f: 4, c: 46289 }, { f: 6, c: 46294 }, { f: 2, c: 46302 }, { f: 2, c: 46305 }, 46309, { f: 5, c: 46311 }, 46318, 46320, { f: 6, c: 46322 }, { f: 27, c: 46329 }, { f: 2, c: 46358 }, { f: 2, c: 46361 }, { f: 7, c: 46365 }, 46374, { f: 5, c: 46379 }, { f: 2, c: 46386 }, { f: 3, c: 46389 }, { f: 7, c: 46393 }, 46402, { f: 5, c: 46406 }, { f: 2, c: 46414 }, { f: 3, c: 46417 }, { f: 7, c: 46421 }, 46430, { f: 62, c: 46434 }, { f: 2, c: 46498 }, { f: 3, c: 46501 }, 46505, { f: 4, c: 46508 }, 46514, { f: 5, c: 46518 }, { f: 2, c: 46526 }, { f: 3, c: 46529 }, { f: 7, c: 46533 }, 46542, { f: 6, c: 46546 }, { f: 19, c: 46553 }, { f: 35, c: 46573 }, { f: 2, c: 46610 }, { f: 3, c: 46613 }, { f: 12, c: 46617 }, { f: 6, c: 46630 }, { f: 7, c: 46637 }, { f: 19, c: 46645 }, { f: 27, c: 46665 }, { f: 3, c: 46693 }, { f: 51, c: 46697 }, { f: 2, c: 46750 }, { f: 3, c: 46753 }, { f: 6, c: 46757 }, { f: 4, c: 46765 }, { f: 34, c: 46770 }, { f: 27, c: 46805 }, { f: 3, c: 46833 }, { f: 3, c: 46837 }, { f: 7, c: 46841 }, { f: 3, c: 46850 }, { f: 34, c: 46854 }, { f: 2, c: 46890 }, { f: 2, c: 46893 }, { f: 7, c: 46897 }, 46906, { f: 8, c: 46908 }, { f: 3, c: 46917 }, { f: 3, c: 46921 }, { f: 7, c: 46925 }, { f: 10, c: 46934 }, { f: 3, c: 46945 }, { f: 3, c: 46949 }, { f: 7, c: 46953 }, 46962, 46964, { f: 6, c: 46966 }, { f: 2, c: 46974 }, { f: 3, c: 46977 }, { f: 7, c: 46981 }, 46990, { f: 3, c: 46995 }, { f: 2, c: 47002 }, { f: 3, c: 47005 }, { f: 7, c: 47009 }, 47018, { f: 6, c: 47022 }, { f: 2, c: 47030 }, { f: 14, c: 47033 }, 47048, { f: 34, c: 47050 }, { f: 2, c: 47086 }, { f: 3, c: 47089 }, { f: 7, c: 47093 }, 47102, { f: 5, c: 47106 }, { f: 2, c: 47114 }, { f: 3, c: 47117 }, { f: 7, c: 47121 }, 47130, 47132, { f: 6, c: 47134 }, { f: 2, c: 47142 }, { f: 3, c: 47145 }, { f: 7, c: 47149 }, 47158, { f: 6, c: 47162 }, { f: 3, c: 47169 }, { f: 12, c: 47173 }, 47186, { f: 8, c: 47188 }, { f: 2, c: 47198 }, { f: 3, c: 47201 }, { f: 7, c: 47205 }, 47214, 47216, { f: 6, c: 47218 }, { f: 3, c: 47225 }, { f: 16, c: 47229 }, { f: 26, c: 47246 }, { f: 7, c: 47273 }, { f: 3, c: 47281 }, { f: 3, c: 47285 }, { f: 7, c: 47289 }, 47298, 47300, { f: 6, c: 47302 }, { f: 3, c: 47309 }, { f: 3, c: 47313 }, { f: 8, c: 47317 }, 47326, 47328, { f: 6, c: 47330 }, { f: 2, c: 47338 }, { f: 3, c: 47341 }, { f: 7, c: 47345 }, 47354, 47356, { f: 6, c: 47358 }, { f: 19, c: 47365 }, { f: 7, c: 47385 }, { f: 27, c: 47393 }, { f: 2, c: 47422 }, { f: 3, c: 47425 }, { f: 7, c: 47429 }, { f: 2, c: 47437 }, 47440, { f: 6, c: 47442 }, { f: 2, c: 47450 }, { f: 3, c: 47453 }, { f: 7, c: 47457 }, 47466, 47468, { f: 6, c: 47470 }, { f: 2, c: 47478 }, { f: 3, c: 47481 }, { f: 7, c: 47485 }, 47494, 47496, { f: 2, c: 47499 }, { f: 29, c: 47503 }, { f: 2, c: 47534 }, { f: 3, c: 47537 }, { f: 7, c: 47541 }, 47550, 47552, { f: 6, c: 47554 }, { f: 2, c: 47562 }, 47565, { f: 5, c: 47571 }, 47578, 47580, { f: 2, c: 47583 }, 47586, { f: 2, c: 47590 }, { f: 3, c: 47593 }, { f: 7, c: 47597 }, 47606, { f: 5, c: 47611 }, { f: 6, c: 47618 }, { f: 12, c: 47625 }, { f: 34, c: 47638 }, { f: 2, c: 47674 }, { f: 3, c: 47677 }, 47681, { f: 5, c: 47683 }, 47690, 47692, { f: 4, c: 47695 }, { f: 2, c: 47702 }, { f: 3, c: 47705 }, { f: 7, c: 47709 }, 47718, { f: 6, c: 47722 }, { f: 2, c: 47730 }, { f: 3, c: 47733 }, { f: 10, c: 47737 }, 47750, { f: 4, c: 47752 }, { f: 27, c: 47757 }, 47786, { f: 3, c: 47789 }, 47793, { f: 5, c: 47795 }, 47802, 47804, { f: 6, c: 47806 }, { f: 3, c: 47813 }, { f: 15, c: 47817 }, { f: 34, c: 47834 }, { f: 3, c: 47869 }, { f: 3, c: 47873 }, { f: 8, c: 47877 }, 47886, 47888, { f: 6, c: 47890 }, { f: 3, c: 47897 }, { f: 3, c: 47901 }, { f: 8, c: 47905 }, 47914, { f: 8, c: 47916 }, 47927, { f: 2, c: 47929 }, { f: 5, c: 47935 }, 47942, 47944, { f: 3, c: 47946 }, 47950, { f: 3, c: 47953 }, { f: 3, c: 47957 }, { f: 8, c: 47961 }, 47970, { f: 8, c: 47972 }, { f: 27, c: 47981 }, { f: 3, c: 48009 }, { f: 3, c: 48013 }, { f: 19, c: 48017 }, { f: 3, c: 48037 }, { f: 3, c: 48041 }, { f: 7, c: 48045 }, { f: 2, c: 48053 }, { f: 8, c: 48056 }, { f: 3, c: 48065 }, { f: 3, c: 48069 }, { f: 7, c: 48073 }, { f: 2, c: 48081 }, { f: 36, c: 48084 }, { f: 2, c: 48122 }, { f: 2, c: 48125 }, 48129, { f: 5, c: 48131 }, 48138, 48142, 48144, { f: 2, c: 48146 }, { f: 2, c: 48153 }, { f: 4, c: 48160 }, 48166, 48168, { f: 3, c: 48170 }, { f: 2, c: 48174 }, { f: 2, c: 48178 }, { f: 3, c: 48181 }, { f: 7, c: 48185 }, 48194, { f: 3, c: 48198 }, { f: 2, c: 48202 }, { f: 2, c: 48206 }, { f: 12, c: 48209 }, { f: 38, c: 48222 }, { f: 2, c: 48262 }, { f: 2, c: 48265 }, 48269, { f: 5, c: 48271 }, 48278, 48280, { f: 5, c: 48283 }, { f: 2, c: 48290 }, { f: 2, c: 48293 }, { f: 7, c: 48297 }, 48306, { f: 6, c: 48310 }, { f: 2, c: 48318 }, { f: 3, c: 48321 }, { f: 8, c: 48325 }, 48334, { f: 3, c: 48338 }, { f: 2, c: 48342 }, { f: 3, c: 48345 }, { f: 23, c: 48349 }, 48375, { f: 3, c: 48377 }, { f: 7, c: 48381 }, 48390, 48392, { f: 6, c: 48394 }, { f: 3, c: 48401 }, { f: 15, c: 48405 }, { f: 7, c: 48421 }, { f: 19, c: 48429 }, { f: 7, c: 48449 }, { f: 2, c: 48458 }, { f: 3, c: 48461 }, { f: 7, c: 48465 }, { f: 10, c: 48474 }, { f: 3, c: 48485 }, { f: 23, c: 48489 }, { f: 2, c: 48514 }, { f: 2, c: 48517 }, { f: 5, c: 48523 }, 48530, 48532, { f: 3, c: 48534 }, 48539, { f: 7, c: 48541 }, { f: 11, c: 48549 }, { f: 7, c: 48561 }, { f: 27, c: 48569 }, { f: 2, c: 48598 }, { f: 3, c: 48601 }, { f: 12, c: 48605 }, { f: 6, c: 48618 }, { f: 3, c: 48625 }, { f: 3, c: 48629 }, { f: 7, c: 48633 }, { f: 2, c: 48641 }, 48644, { f: 6, c: 48646 }, { f: 2, c: 48654 }, { f: 3, c: 48657 }, { f: 7, c: 48661 }, 48670, { f: 36, c: 48672 }, { f: 2, c: 48710 }, { f: 3, c: 48713 }, 48717, { f: 5, c: 48719 }, 48726, 48728, { f: 4, c: 48732 }, { f: 2, c: 48738 }, { f: 3, c: 48741 }, 48745, { f: 5, c: 48747 }, 48754, { f: 5, c: 48758 }, { f: 2, c: 48766 }, { f: 3, c: 48769 }, { f: 7, c: 48773 }, 48782, { f: 6, c: 48786 }, { f: 14, c: 48794 }, { f: 39, c: 48809 }, { f: 2, c: 48850 }, { f: 2, c: 48853 }, { f: 7, c: 48857 }, { f: 2, c: 48865 }, { f: 6, c: 48870 }, { f: 20, c: 48877 }, { f: 6, c: 48898 }, { f: 14, c: 48906 }, 48922, { f: 34, c: 48926 }, { f: 2, c: 48962 }, { f: 3, c: 48965 }, { f: 7, c: 48969 }, { f: 3, c: 48978 }, { f: 62, c: 48982 }, { f: 27, c: 49045 }, { f: 20, c: 49073 }, { f: 6, c: 49094 }, { f: 2, c: 49102 }, { f: 3, c: 49105 }, { f: 7, c: 49109 }, { f: 2, c: 49117 }, 49120, { f: 90, c: 49122 }, { f: 20, c: 49213 }, { f: 6, c: 49234 }, { f: 3, c: 49241 }, { f: 3, c: 49245 }, { f: 7, c: 49249 }, { f: 38, c: 49258 }, { f: 2, c: 49298 }, { f: 3, c: 49301 }, { f: 7, c: 49305 }, 49314, 49316, { f: 6, c: 49318 }, 49326, { f: 2, c: 49329 }, { f: 5, c: 49335 }, 49342, { f: 3, c: 49346 }, { f: 2, c: 49350 }, { f: 2, c: 49354 }, { f: 3, c: 49357 }, { f: 7, c: 49361 }, 49370, { f: 6, c: 49374 }, { f: 2, c: 49382 }, { f: 3, c: 49385 }, { f: 7, c: 49389 }, 49398, 49400, { f: 6, c: 49402 }, { f: 3, c: 49409 }, { f: 3, c: 49413 }, { f: 7, c: 49417 }, { f: 4, c: 49425 }, { f: 6, c: 49430 }, { f: 2, c: 49441 }, 49445, { f: 4, c: 49448 }, 49454, { f: 4, c: 49458 }, 49463, { f: 2, c: 49466 }, { f: 3, c: 49469 }, { f: 7, c: 49473 }, 49482, { f: 6, c: 49486 }, { f: 2, c: 49494 }, { f: 3, c: 49497 }, { f: 7, c: 49501 }, 49510, { f: 6, c: 49514 }, { f: 3, c: 49521 }, { f: 3, c: 49525 }, { f: 12, c: 49529 }, { f: 6, c: 49542 }, 49551, { f: 3, c: 49553 }, 49557, { f: 5, c: 49559 }, 49566, 49568, { f: 3, c: 49570 }, { f: 2, c: 49574 }, { f: 2, c: 49578 }, { f: 3, c: 49581 }, { f: 12, c: 49585 }, { f: 6, c: 49598 }, { f: 3, c: 49605 }, { f: 3, c: 49609 }, { f: 7, c: 49613 }, { f: 2, c: 49621 }, { f: 7, c: 49625 }, { f: 3, c: 49633 }, { f: 3, c: 49637 }, { f: 7, c: 49641 }, 49650, { f: 8, c: 49652 }, { f: 2, c: 49662 }, { f: 3, c: 49665 }, { f: 7, c: 49669 }, 49678, 49680, { f: 6, c: 49682 }, { f: 2, c: 49690 }, { f: 2, c: 49693 }, { f: 7, c: 49697 }, 49706, 49708, 49710, 49712, 49715, { f: 19, c: 49717 }, { f: 7, c: 49737 }, { f: 2, c: 49746 }, { f: 3, c: 49749 }, { f: 7, c: 49753 }, { f: 4, c: 49761 }, { f: 6, c: 49766 }, { f: 2, c: 49774 }, { f: 3, c: 49777 }, { f: 7, c: 49781 }, 49790, 49792, { f: 6, c: 49794 }, { f: 6, c: 49802 }, { f: 7, c: 49809 }, { f: 2, c: 49817 }, 49820, { f: 6, c: 49822 }, { f: 2, c: 49830 }, { f: 3, c: 49833 }, { f: 6, c: 49838 }, 49846, 49848, { f: 34, c: 49850 }, { f: 2, c: 49886 }, { f: 2, c: 49889 }, { f: 6, c: 49893 }, 49902, 49904, { f: 4, c: 49906 }, 49911, 49914, { f: 3, c: 49917 }, { f: 7, c: 49921 }, { f: 2, c: 49930 }, { f: 5, c: 49934 }, { f: 2, c: 49942 }, { f: 3, c: 49945 }, { f: 7, c: 49949 }, { f: 2, c: 49958 }, { f: 27, c: 49962 }, { f: 34, c: 49990 }, { f: 2, c: 50026 }, { f: 3, c: 50029 }, 50033, { f: 5, c: 50035 }, { f: 2, c: 50042 }, { f: 6, c: 50046 }, { f: 3, c: 50053 }, { f: 3, c: 50057 }, { f: 51, c: 50061 }, { f: 23, c: 50113 }, { f: 2, c: 50138 }, { f: 2, c: 50141 }, 50145, { f: 5, c: 50147 }, { f: 3, c: 50154 }, { f: 6, c: 50158 }, { f: 2, c: 50166 }, { f: 15, c: 50169 }, { f: 7, c: 50185 }, { f: 19, c: 50193 }, { f: 7, c: 50213 }, { f: 3, c: 50221 }, { f: 3, c: 50225 }, { f: 7, c: 50229 }, { f: 10, c: 50238 }, { f: 27, c: 50249 }, { f: 2, c: 50278 }, { f: 3, c: 50281 }, { f: 7, c: 50285 }, { f: 3, c: 50294 }, { f: 6, c: 50298 }, { f: 19, c: 50305 }, { f: 7, c: 50325 }, { f: 27, c: 50333 }, { f: 3, c: 50361 }, { f: 44, c: 50365 }, { f: 6, c: 50410 }, { f: 2, c: 50418 }, { f: 3, c: 50421 }, 50425, { f: 4, c: 50427 }, { f: 10, c: 50434 }, { f: 3, c: 50445 }, { f: 3, c: 50449 }, { f: 7, c: 50453 }, { f: 11, c: 50461 }, { f: 2, c: 50474 }, { f: 3, c: 50477 }, { f: 7, c: 50481 }, 50490, 50492, { f: 6, c: 50494 }, { f: 2, c: 50502 }, 50507, { f: 4, c: 50511 }, 50518, { f: 3, c: 50522 }, 50527, { f: 2, c: 50530 }, { f: 3, c: 50533 }, { f: 7, c: 50537 }, 50546, { f: 6, c: 50550 }, { f: 2, c: 50558 }, { f: 3, c: 50561 }, { f: 2, c: 50565 }, { f: 4, c: 50568 }, 50574, 50576, { f: 3, c: 50578 }, 50582, { f: 3, c: 50585 }, { f: 3, c: 50589 }, { f: 8, c: 50593 }, { f: 10, c: 50602 }, { f: 2, c: 50614 }, 50618, { f: 5, c: 50623 }, 50635, 50637, 50639, { f: 2, c: 50642 }, { f: 3, c: 50645 }, { f: 7, c: 50649 }, 50658, 50660, { f: 6, c: 50662 }, 50671, { f: 3, c: 50673 }, 50677, { f: 4, c: 50680 }, { f: 3, c: 50690 }, { f: 3, c: 50697 }, { f: 3, c: 50701 }, { f: 7, c: 50705 }, 50714, { f: 7, c: 50717 }, { f: 2, c: 50726 }, { f: 3, c: 50729 }, 50735, { f: 2, c: 50737 }, 50742, 50744, 50746, { f: 4, c: 50748 }, { f: 2, c: 50754 }, { f: 3, c: 50757 }, { f: 7, c: 50761 }, 50770, { f: 6, c: 50774 }, { f: 2, c: 50782 }, { f: 11, c: 50785 }, { f: 2, c: 50797 }, 50800, { f: 6, c: 50802 }, { f: 2, c: 50810 }, { f: 3, c: 50813 }, { f: 7, c: 50817 }, 50826, 50828, { f: 6, c: 50830 }, { f: 2, c: 50838 }, { f: 3, c: 50841 }, { f: 7, c: 50845 }, 50854, 50856, { f: 6, c: 50858 }, { f: 2, c: 50866 }, { f: 3, c: 50869 }, { f: 5, c: 50875 }, 50882, 50884, { f: 6, c: 50886 }, { f: 2, c: 50894 }, { f: 3, c: 50897 }, { f: 7, c: 50901 }, { f: 2, c: 50910 }, { f: 6, c: 50914 }, { f: 2, c: 50922 }, { f: 3, c: 50925 }, { f: 7, c: 50929 }, { f: 3, c: 50938 }, { f: 6, c: 50942 }, { f: 2, c: 50950 }, { f: 3, c: 50953 }, { f: 7, c: 50957 }, 50966, 50968, { f: 6, c: 50970 }, { f: 2, c: 50978 }, { f: 3, c: 50981 }, { f: 7, c: 50985 }, 50994, 50996, 50998, { f: 4, c: 51e3 }, { f: 2, c: 51006 }, { f: 3, c: 51009 }, { f: 5, c: 51013 }, 51019, 51022, 51024, { f: 3, c: 51033 }, { f: 3, c: 51037 }, { f: 7, c: 51041 }, { f: 2, c: 51049 }, { f: 8, c: 51052 }, { f: 2, c: 51062 }, { f: 3, c: 51065 }, { f: 4, c: 51071 }, 51078, { f: 3, c: 51083 }, 51087, { f: 2, c: 51090 }, 51093, 51097, { f: 5, c: 51099 }, 51106, { f: 5, c: 51111 }, { f: 2, c: 51118 }, { f: 3, c: 51121 }, { f: 7, c: 51125 }, 51134, { f: 6, c: 51138 }, { f: 2, c: 51146 }, 51149, 51151, { f: 7, c: 51153 }, { f: 4, c: 51161 }, { f: 6, c: 51166 }, { f: 3, c: 51173 }, { f: 3, c: 51177 }, { f: 19, c: 51181 }, { f: 2, c: 51202 }, { f: 3, c: 51205 }, 51209, { f: 5, c: 51211 }, 51218, 51220, { f: 5, c: 51223 }, { f: 2, c: 51230 }, { f: 3, c: 51233 }, { f: 7, c: 51237 }, 51246, 51248, { f: 6, c: 51250 }, { f: 3, c: 51257 }, { f: 3, c: 51261 }, { f: 7, c: 51265 }, { f: 2, c: 51274 }, { f: 6, c: 51278 }, { f: 27, c: 51285 }, { f: 2, c: 51314 }, { f: 3, c: 51317 }, 51321, { f: 5, c: 51323 }, 51330, 51332, { f: 3, c: 51336 }, { f: 6, c: 51342 }, { f: 8, c: 51349 }, 51358, 51360, { f: 6, c: 51362 }, { f: 19, c: 51369 }, { f: 6, c: 51390 }, { f: 3, c: 51397 }, { f: 3, c: 51401 }, { f: 7, c: 51405 }, 51414, 51416, { f: 6, c: 51418 }, { f: 2, c: 51426 }, { f: 16, c: 51429 }, { f: 6, c: 51446 }, { f: 2, c: 51454 }, { f: 3, c: 51457 }, { f: 5, c: 51463 }, 51470, 51472, { f: 6, c: 51474 }, { f: 19, c: 51481 }, { f: 7, c: 51501 }, { f: 27, c: 51509 }, { f: 2, c: 51538 }, { f: 3, c: 51541 }, { f: 7, c: 51545 }, 51554, { f: 8, c: 51556 }, { f: 3, c: 51565 }, { f: 3, c: 51569 }, { f: 7, c: 51573 }, { f: 11, c: 51581 }, { f: 2, c: 51594 }, { f: 3, c: 51597 }, { f: 7, c: 51601 }, 51610, 51612, { f: 34, c: 51614 }, { f: 2, c: 51650 }, { f: 2, c: 51653 }, 51657, { f: 5, c: 51659 }, 51666, 51668, { f: 2, c: 51671 }, 51675, { f: 2, c: 51678 }, 51681, 51683, { f: 2, c: 51685 }, { f: 4, c: 51688 }, 51694, { f: 6, c: 51698 }, { f: 2, c: 51706 }, { f: 3, c: 51709 }, { f: 7, c: 51713 }, 51722, { f: 6, c: 51726 }, { f: 3, c: 51733 }, { f: 16, c: 51737 }, { f: 34, c: 51754 }, { f: 2, c: 51790 }, { f: 3, c: 51793 }, { f: 7, c: 51797 }, 51806, { f: 6, c: 51810 }, { f: 20, c: 51817 }, { f: 6, c: 51838 }, { f: 19, c: 51845 }, { f: 35, c: 51865 }, { f: 2, c: 51902 }, { f: 3, c: 51905 }, { f: 7, c: 51909 }, 51918, 51920, 51922, { f: 4, c: 51924 }, { f: 6, c: 51930 }, { f: 11, c: 51937 }, { f: 7, c: 51949 }, { f: 19, c: 51957 }, { f: 7, c: 51977 }, { f: 3, c: 51985 }, { f: 3, c: 51989 }, { f: 7, c: 51993 }, { f: 31, c: 52002 }, { f: 6, c: 52034 }, { f: 2, c: 52042 }, { f: 3, c: 52045 }, { f: 7, c: 52049 }, { f: 3, c: 52058 }, { f: 6, c: 52062 }, { f: 19, c: 52069 }, { f: 34, c: 52090 }, { f: 27, c: 52125 }, { f: 27, c: 52153 }, { f: 15, c: 52181 }, { f: 2, c: 52197 }, 52200, { f: 34, c: 52202 }, { f: 2, c: 52238 }, { f: 3, c: 52241 }, { f: 7, c: 52245 }, { f: 3, c: 52254 }, { f: 4, c: 52259 }, { f: 2, c: 52266 }, 52269, 52271, { f: 7, c: 52273 }, 52282, { f: 5, c: 52287 }, { f: 2, c: 52294 }, { f: 3, c: 52297 }, { f: 7, c: 52301 }, 52310, { f: 6, c: 52314 }, { f: 3, c: 52321 }, 52325, 52327, { f: 7, c: 52329 }, { f: 4, c: 52337 }, { f: 34, c: 52342 }, { f: 2, c: 52378 }, { f: 3, c: 52381 }, { f: 7, c: 52385 }, 52394, { f: 6, c: 52398 }, { f: 2, c: 52406 }, { f: 3, c: 52409 }, { f: 7, c: 52413 }, 52422, 52424, { f: 6, c: 52426 }, { f: 3, c: 52433 }, { f: 15, c: 52437 }, { f: 7, c: 52453 }, { f: 3, c: 52461 }, { f: 16, c: 52465 }, { f: 6, c: 52482 }, { f: 2, c: 52490 }, { f: 3, c: 52493 }, { f: 7, c: 52497 }, 52506, 52508, { f: 6, c: 52510 }, { f: 3, c: 52517 }, { f: 3, c: 52521 }, { f: 12, c: 52525 }, { f: 34, c: 52538 }, { f: 3, c: 52573 }, { f: 3, c: 52577 }, { f: 7, c: 52581 }, 52590, 52592, { f: 6, c: 52594 }, { f: 15, c: 52601 }, { f: 11, c: 52617 }, { f: 2, c: 52630 }, { f: 3, c: 52633 }, { f: 7, c: 52637 }, 52646, 52648, { f: 6, c: 52650 }, { f: 19, c: 52657 }, { f: 7, c: 52677 }, { f: 3, c: 52685 }, { f: 23, c: 52689 }, { f: 3, c: 52713 }, { f: 3, c: 52717 }, { f: 7, c: 52721 }, 52730, 52732, { f: 6, c: 52734 }, { f: 3, c: 52741 }, { f: 3, c: 52745 }, { f: 7, c: 52749 }, { f: 4, c: 52757 }, { f: 6, c: 52762 }, { f: 2, c: 52770 }, { f: 3, c: 52773 }, { f: 7, c: 52777 }, 52786, 52788, { f: 34, c: 52790 }, { f: 2, c: 52826 }, { f: 2, c: 52829 }, { f: 6, c: 52834 }, 52842, 52844, { f: 6, c: 52846 }, { f: 2, c: 52854 }, { f: 3, c: 52857 }, { f: 7, c: 52861 }, 52870, 52872, { f: 6, c: 52874 }, { f: 2, c: 52882 }, { f: 3, c: 52885 }, { f: 7, c: 52889 }, 52898, { f: 6, c: 52902 }, { f: 19, c: 52910 }, { f: 34, c: 52930 }, { f: 2, c: 52966 }, { f: 2, c: 52969 }, { f: 7, c: 52973 }, 52982, { f: 6, c: 52986 }, { f: 2, c: 52994 }, { f: 3, c: 52997 }, { f: 7, c: 53001 }, 53010, 53012, { f: 6, c: 53014 }, { f: 3, c: 53021 }, { f: 3, c: 53025 }, { f: 7, c: 53029 }, 53038, { f: 6, c: 53042 }, { f: 27, c: 53049 }, { f: 2, c: 53078 }, { f: 3, c: 53081 }, { f: 7, c: 53085 }, 53094, 53096, { f: 6, c: 53098 }, { f: 2, c: 53106 }, { f: 3, c: 53109 }, { f: 7, c: 53113 }, { f: 4, c: 53121 }, { f: 6, c: 53126 }, { f: 20, c: 53133 }, { f: 6, c: 53154 }, { f: 7, c: 53161 }, { f: 19, c: 53169 }, { f: 27, c: 53189 }, { f: 2, c: 53218 }, { f: 3, c: 53221 }, { f: 7, c: 53225 }, 53234, 53236, { f: 6, c: 53238 }, { f: 3, c: 53245 }, { f: 3, c: 53249 }, { f: 12, c: 53253 }, { f: 6, c: 53266 }, { f: 20, c: 53273 }, { f: 6, c: 53294 }, { f: 2, c: 53302 }, { f: 3, c: 53305 }, { f: 7, c: 53309 }, 53318, 53320, { f: 6, c: 53322 }, { f: 3, c: 53329 }, { f: 3, c: 53333 }, { f: 7, c: 53337 }, { f: 11, c: 53345 }, { f: 2, c: 53358 }, { f: 3, c: 53361 }, { f: 7, c: 53365 }, { f: 3, c: 53374 }, { f: 34, c: 53378 }, { f: 2, c: 53414 }, { f: 3, c: 53417 }, { f: 7, c: 53421 }, 53430, 53432, { f: 6, c: 53434 }, { f: 2, c: 53442 }, { f: 3, c: 53445 }, { f: 6, c: 53450 }, 53458, { f: 6, c: 53462 }, { f: 2, c: 53470 }, { f: 3, c: 53473 }, { f: 7, c: 53477 }, 53486, { f: 6, c: 53490 }, { f: 20, c: 53497 }, { f: 34, c: 53518 }, { f: 2, c: 53554 }, { f: 3, c: 53557 }, 53561, { f: 5, c: 53563 }, 53570, { f: 6, c: 53574 }, { f: 2, c: 53582 }, { f: 3, c: 53585 }, { f: 7, c: 53589 }, 53598, 53600, { f: 6, c: 53602 }, { f: 3, c: 53609 }, { f: 15, c: 53613 }, { f: 7, c: 53629 }, { f: 3, c: 53637 }, { f: 23, c: 53641 }, { f: 2, c: 53666 }, { f: 3, c: 53669 }, { f: 7, c: 53673 }, 53682, 53684, { f: 4, c: 53686 }, 53691, { f: 3, c: 53693 }, { f: 23, c: 53697 }, { f: 27, c: 53721 }, { f: 3, c: 53749 }, { f: 14, c: 53753 }, 53768, { f: 6, c: 53770 }, { f: 27, c: 53777 }, { f: 2, c: 53806 }, { f: 3, c: 53809 }, { f: 7, c: 53813 }, 53822, 53824, { f: 6, c: 53826 }, { f: 19, c: 53833 }, { f: 7, c: 53853 }, { f: 27, c: 53861 }, { f: 2, c: 53890 }, { f: 3, c: 53893 }, { f: 7, c: 53897 }, { f: 3, c: 53906 }, { f: 6, c: 53910 }, { f: 3, c: 53917 }, { f: 3, c: 53921 }, { f: 7, c: 53925 }, { f: 4, c: 53933 }, { f: 6, c: 53938 }, { f: 2, c: 53946 }, { f: 2, c: 53949 }, 53953, { f: 5, c: 53955 }, 53962, { f: 8, c: 53964 }, { f: 3, c: 53973 }, { f: 3, c: 53977 }, { f: 7, c: 53981 }, { f: 10, c: 53990 }, { f: 2, c: 54002 }, { f: 3, c: 54005 }, { f: 7, c: 54009 }, 54018, 54020, { f: 6, c: 54022 }, 54031, { f: 3, c: 54033 }, 54037, { f: 5, c: 54039 }, 54046, { f: 3, c: 54050 }, { f: 2, c: 54054 }, { f: 2, c: 54058 }, { f: 3, c: 54061 }, { f: 7, c: 54065 }, 54074, { f: 6, c: 54078 }, { f: 54, c: 54086 }, { f: 2, c: 54142 }, { f: 3, c: 54145 }, { f: 7, c: 54149 }, 54158, { f: 6, c: 54162 }, { f: 2, c: 54170 }, { f: 3, c: 54173 }, { f: 7, c: 54177 }, 54186, 54188, { f: 6, c: 54190 }, { f: 3, c: 54197 }, { f: 3, c: 54201 }, { f: 7, c: 54205 }, { f: 2, c: 54214 }, { f: 6, c: 54218 }, { f: 7, c: 54225 }, { f: 8, c: 54233 }, 54242, { f: 8, c: 54244 }, { f: 2, c: 54254 }, { f: 3, c: 54257 }, { f: 7, c: 54261 }, 54270, 54272, { f: 6, c: 54274 }, { f: 20, c: 54281 }, { f: 34, c: 54302 }, { f: 3, c: 54337 }, { f: 23, c: 54341 }, { f: 3, c: 54365 }, { f: 3, c: 54369 }, { f: 8, c: 54373 }, 54382, { f: 8, c: 54384 }, { f: 2, c: 54394 }, { f: 2, c: 54397 }, 54401, { f: 5, c: 54403 }, 54410, 54412, { f: 6, c: 54414 }, { f: 20, c: 54421 }, { f: 34, c: 54442 }, { f: 3, c: 54477 }, { f: 3, c: 54481 }, { f: 7, c: 54485 }, { f: 2, c: 54493 }, { f: 8, c: 54496 }, { f: 3, c: 54505 }, { f: 3, c: 54509 }, { f: 7, c: 54513 }, { f: 2, c: 54521 }, 54524, { f: 6, c: 54526 }, { f: 3, c: 54533 }, { f: 3, c: 54537 }, { f: 7, c: 54541 }, 54550, { f: 36, c: 54552 }, { f: 2, c: 54590 }, { f: 3, c: 54593 }, { f: 7, c: 54597 }, 54606, 54608, { f: 6, c: 54610 }, { f: 2, c: 54618 }, { f: 3, c: 54621 }, { f: 4, c: 54625 }, { f: 2, c: 54630 }, 54634, 54636, { f: 6, c: 54638 }, { f: 2, c: 54646 }, { f: 3, c: 54649 }, { f: 7, c: 54653 }, 54662, { f: 6, c: 54666 }, { f: 20, c: 54673 }, { f: 34, c: 54694 }, { f: 2, c: 54730 }, { f: 3, c: 54733 }, 54737, { f: 5, c: 54739 }, 54746, 54748, { f: 6, c: 54750 }, { f: 2, c: 54758 }, { f: 3, c: 54761 }, { f: 7, c: 54765 }, 54774, 54776, { f: 6, c: 54778 }, { f: 2, c: 54786 }, { f: 3, c: 54789 }, { f: 7, c: 54793 }, 54802, { f: 6, c: 54806 }, { f: 3, c: 54813 }, { f: 3, c: 54817 }, { f: 8, c: 54821 }, { f: 10, c: 54830 }, { f: 2, c: 54842 }, { f: 3, c: 54845 }, { f: 4, c: 54849 }, { f: 2, c: 54854 }, 54858, 54860, { f: 3, c: 54862 }, { f: 2, c: 54866 }, { f: 2, c: 54870 }, { f: 3, c: 54873 }, { f: 10, c: 54877 }, 54888, { f: 6, c: 54890 }, { f: 2, c: 54898 }, { f: 14, c: 54901 }, 54916, { f: 6, c: 54918 }, { f: 2, c: 54926 }, { f: 3, c: 54929 }, { f: 8, c: 54933 }, 54942, 54944, { f: 6, c: 54946 }, { f: 3, c: 54953 }, { f: 3, c: 54957 }, { f: 8, c: 54961 }, 54970, { f: 8, c: 54972 }, { f: 2, c: 54982 }, { f: 3, c: 54985 }, { f: 4, c: 54989 }, { f: 2, c: 54994 }, { f: 2, c: 54997 }, 55e3, { f: 6, c: 55002 }, { f: 3, c: 55009 }, { f: 3, c: 55013 }, { f: 7, c: 55017 }, { f: 4, c: 55025 }, { f: 6, c: 55030 }, { f: 2, c: 55038 }, { f: 3, c: 55041 }, { f: 12, c: 55045 }, { f: 6, c: 55058 }, { f: 2, c: 55066 }, { f: 3, c: 55069 }, { f: 7, c: 55073 }, 55082, 55084, { f: 6, c: 55086 }, { f: 2, c: 55094 }, { f: 3, c: 55097 }, { f: 7, c: 55101 }, { f: 2, c: 55109 }, 55112, { f: 6, c: 55114 }, { f: 2, c: 55122 }, 55125, { f: 6, c: 55130 }, 55138, 55140, { f: 3, c: 55142 }, { f: 2, c: 55146 }, { f: 3, c: 55149 }, { f: 3, c: 55153 }, { f: 7, c: 55157 }, { f: 3, c: 55166 }, { f: 6, c: 55170 }, { f: 2, c: 55178 }, { f: 3, c: 55181 }, { f: 7, c: 55185 }, 55194, 55196, { f: 6, c: 55198 }], "Adobe-CNS1": [{ f: 95, c: 32 }, { s: 3 }, 12288, 65292, { f: 2, c: 12289 }, 65294, 8226, 65307, 65306, 65311, 65281, 65072, 8230, 8229, 65104, 65380, 65106, 183, { f: 4, c: 65108 }, 65372, 8211, 65073, 8212, { s: 4 }, { f: 2, c: 65288 }, { f: 2, c: 65077 }, 65371, 65373, { f: 2, c: 65079 }, { f: 2, c: 12308 }, { f: 2, c: 65081 }, { f: 2, c: 12304 }, { f: 2, c: 65083 }, { f: 2, c: 12298 }, { f: 2, c: 65085 }, { f: 2, c: 12296 }, { f: 2, c: 65087 }, { f: 2, c: 12300 }, { f: 2, c: 65089 }, { f: 2, c: 12302 }, { f: 2, c: 65091 }, { f: 6, c: 65113 }, { f: 2, c: 8216 }, { f: 2, c: 8220 }, { f: 2, c: 12317 }, 8245, 8242, 65283, 65286, 65290, 8251, 167, 12291, 9675, 9679, 9651, 9650, 9678, 9734, 9733, 9671, 9670, 9633, 9632, 9661, 9660, 12963, 8453, 8254, 0, 65343, 0, { f: 2, c: 65097 }, { f: 2, c: 65101 }, { f: 2, c: 65099 }, { f: 3, c: 65119 }, 65291, 65293, 215, 247, 177, 8730, 65308, 65310, 65309, { f: 2, c: 8806 }, 8800, 8734, 8786, 8801, { f: 5, c: 65122 }, 8764, { f: 2, c: 8745 }, 8869, 8736, 8735, 8895, 13266, 13265, 8747, 8750, 8757, 8756, 9792, 9794, 9793, 9737, 8593, 8595, 8594, 8592, { f: 2, c: 8598 }, 8601, 8600, 8741, 8739, 0, 0, 65295, 65340, 65284, 165, 12306, { f: 2, c: 162 }, 65285, 65312, 8451, 8457, { f: 3, c: 65129 }, 13269, { f: 3, c: 13212 }, 13262, 13217, { f: 2, c: 13198 }, 13252, 176, [20825, 58834], [20827, 58835], [20830, 58837], [20829, 58836], 20833, 20835, 21991, [29929, 58044], [31950, 58191], { f: 8, c: 9601 }, 9615, 9614, 9613, 9612, 9611, 9610, 9609, 9532, 9524, 9516, 9508, 9500, 9620, 9472, 9474, 9621, 9484, 9488, 9492, 9496, { f: 2, c: 9581 }, 9584, 9583, 9552, 9566, 9578, 9569, { f: 2, c: 9698 }, 9701, 9700, { f: 3, c: 9585 }, { f: 10, c: 65296 }, { f: 10, c: 8544 }, { f: 9, c: 12321 }, 0, [21316, 57443], 0, { f: 26, c: 65313 }, { f: 26, c: 65345 }, { f: 17, c: 913 }, { f: 7, c: 931 }, { f: 17, c: 945 }, { f: 7, c: 963 }, { f: 37, c: 12549 }, 729, 714, 711, 715, [9312, 63153], [9313, 63154], [9314, 63155], [9315, 63156], [9316, 63157], [9317, 63158], [9318, 63159], [9319, 63160], [9320, 63161], [9321, 63162], [9332, 63163], [9333, 63164], [9334, 63165], [9335, 63166], [9336, 63167], [9337, 63168], [9338, 63169], [9339, 63170], [9340, 63171], [9341, 63172], [8560, 63173], [8561, 63174], [8562, 63175], [8563, 63176], [8564, 63177], [8565, 63178], [8566, 63179], [8567, 63180], [8568, 63181], [8569, 63182], [12033, 20008], [12034, 20022, 63183], [12035, 20031, 63184], [12037, 20101, 63185], [12039, 20128, 63186], [12044, 20866, 63187], [12045, 20886, 63188], [12046, 20907, 63189], [12051, 21241, 63190], [12054, 21304, 63191], [12057, 21353, 63192], [12059, 21430, 63193], [12065, 12066, 22786, 22794, 63194], [12071, 23424, 63195], [12078, 24027, 63196], [12083, 24186, 63197], [12084, 24191, 63198], [12085, 24308], [12089, 24400, 63200], [12090, 24417, 63201], [12097, 25908, 63202], [12102, 26080], [12135, 30098, 63204], [12136, 30326], [12193, 36789, 63206], [12202, 38582], { f: 32, c: 9216 }, 9249, [12032, 19968], [12036, 20057], 19969, 19971, 20035, 20061, 20102, [12038, 20108], [12040, 20154], [12041, 20799], [12042, 20837], [12043, 20843], [12047, 20960], [12049, 20992], 20993, [12050, 21147], [12052, 21269], [12055, 21313], [12056, 21340], [12060, 21448], 19977, 19979, 19976, 19978, 20011, 20024, 20961, 20037, 20040, 20063, 20062, 20110, 20129, [20800, 64012], 20995, 21242, 21315, 21449, [12061, 21475], [12063, 22303], [12064, 22763], [12067, 22805], [12068, 22823], [12069, 22899], [12070, 23376], 23377, 23379, [12072, 23544], [12073, 23567], [12074, 23586], [12075, 23608], [12077, 23665], 24029, [12079, 24037], [12080, 24049], { f: 2, c: 24050 }, [12081, 24062], [12082, 24178], [12086, 24318], [12087, 24331], [12088, 24339], 25165, 19985, 19984, 19981, 20013, 20016, 20025, 20043, 23609, 20104, 20113, 20117, 20114, 20116, 20130, 20161, 20160, 20163, { f: 2, c: 20166 }, 20173, { f: 2, c: 20170 }, 20164, 20803, 20801, 20839, { f: 2, c: 20845 }, 20844, 20887, 20982, { f: 3, c: 20998 }, 21243, { f: 2, c: 21246 }, 21270, 21305, 21320, 21319, 21317, 21342, 21380, 21451, 21450, 21453, 22764, 22825, 22827, 22826, 22829, 23380, 23569, 23588, 23610, 23663, 24052, 24187, 24319, { f: 2, c: 24340 }, [12092, 24515], [12093, 25096], [12094, 25142], [12095, 25163], 25166, [12096, 25903], [12098, 25991], [12099, 26007], [12100, 26020], [12101, 26041], [12103, 26085], [12104, 26352], [12105, 26376], [12106, 26408], [12107, 27424], [12108, 27490], [12109, 27513], [12111, 27595], [12112, 27604], [12113, 27611], [12114, 27663], [12116, 27700], [12117, 28779], [12118, 29226], [12119, 29238], [12120, 29243], [12122, 29255], [12123, 29273], [12124, 29275], [12125, 29356], 29579, 19993, 19990, 19989, 19988, 19992, 20027, 20045, 20047, 20046, 20197, 20184, { f: 4, c: 20180 }, { f: 2, c: 20195 }, 20185, 20190, 20805, 20804, { f: 2, c: 20873 }, 20908, { f: 2, c: 20985 }, 20984, 21002, 21152, 21151, [21253, 57435], 21254, 21271, 21277, 20191, 21322, 21321, 21345, 21344, 21359, 21358, 21435, 21487, 21476, 21491, 21484, 21486, 21481, 21480, 21500, 21496, 21493, 21483, 21478, 21482, 21490, 21489, 21488, 21477, 21485, 21499, 22235, 22234, 22806, 22830, 22833, 22900, 22902, 23381, 23427, 23612, 24040, 24039, 24038, { f: 2, c: 24066 }, 24179, 24188, 24321, 24344, 24343, 24517, 25098, { f: 2, c: 25171 }, 25170, 25169, 26021, 26086, 26414, 26412, { f: 2, c: 26410 }, 26413, 27491, 27597, 27665, 27664, 27704, 27713, 27712, 27710, 29359, [12126, 29572], [12127, 29577], [12128, 29916], [12129, 29926], [12130, 29976], [12131, 29983], [12132, 29992], 29993, [12133, 3e4], { f: 3, c: 30001 }, [12134, 30091], [12137, 30333], [12138, 30382], [12139, 30399], [12140, 30446], [12141, 30683], [12142, 30690], [12143, 30707], [12144, 31034], [12146, 31166], [12147, 31348], [12148, 31435], { f: 2, c: 19998 }, { f: 2, c: 20050 }, 20073, 20121, 20132, 20134, 20133, 20223, 20233, 20249, 20234, 20245, 20237, { f: 2, c: 20240 }, 20239, 20210, 20214, 20219, 20208, 20211, 20221, 20225, 20235, 20809, 20807, 20806, 20808, 20840, 20849, 20877, 20912, 21015, { f: 2, c: 21009 }, 21006, 21014, 21155, 21256, 21281, 21280, { f: 2, c: 21360 }, 21513, 21519, 21516, 21514, 21520, 21505, 21515, 21508, 21521, 21517, 21512, 21507, 21518, 21510, 21522, 22240, 22238, 22237, 22323, 22320, 22312, 22317, 22316, 22319, 22313, { f: 2, c: 22809 }, { f: 2, c: 22839 }, 22916, 22904, 22915, 22909, 22905, 22914, 22913, { f: 2, c: 23383 }, { f: 2, c: 23431 }, 23429, 23433, 23546, 23574, 23673, 24030, 24070, 24182, 24180, 24335, 24347, 24537, 24534, 25102, { f: 2, c: 25100 }, 25104, 25187, 25179, 25176, 25910, 26089, 26088, { f: 2, c: 26092 }, { f: 2, c: 26354 }, 26377, 26429, 26420, 26417, 26421, 27425, 27492, 27515, 27670, 27741, 27735, 27737, { f: 2, c: 27743 }, 27728, 27733, 27745, 27739, { f: 2, c: 27725 }, 28784, 29279, 29277, 30334, [12149, 31481], [12150, 31859], [12151, 31992], [12152, 32566], [12154, 32650], [12155, 32701], [12156, 32769], 32771, [12157, 32780], [12158, 32786], [12159, 32819], [12160, 32895], [12161, 32905], { f: 2, c: 32907 }, [12162, 33251], [12163, 33258], [12164, 33267], [12165, 33276], [12166, 33292], [12167, 33307], [12168, 33311], [12169, 33390], [12170, 33394], 33406, [12173, 34411], [12174, 34880], [12175, 34892], [12176, 34915], 35199, 38433, 20018, 20136, 20301, 20303, 20295, 20311, 20318, 20276, 20315, 20309, 20272, { f: 2, c: 20304 }, 20285, 20282, 20280, 20291, 20308, 20284, 20294, 20323, 20316, 20320, 20271, 20302, 20278, 20313, 20317, 20296, 20314, 20812, 20811, 20813, 20853, { f: 2, c: 20918 }, 21029, 21028, { f: 2, c: 21033 }, 21032, 21163, { f: 2, c: 21161 }, 21164, 21283, 21363, 21365, 21533, 21549, 21534, 21566, 21542, 21582, 21543, 21574, 21571, 21555, 21576, 21570, 21531, 21545, 21578, 21561, 21563, 21560, 21550, { f: 2, c: 21557 }, 21536, 21564, 21568, 21553, 21547, 21535, 21548, 22250, 22256, 22244, 22251, 22346, 22353, 22336, 22349, 22343, 22350, 22334, 22352, 22351, 22331, 22767, 22846, 22941, 22930, 22952, 22942, 22947, 22937, 22934, 22925, 22948, 22931, 22922, 22949, 23389, 23388, { f: 2, c: 23386 }, 23436, 23435, 23439, 23596, { f: 2, c: 23616 }, 23615, 23614, { f: 2, c: 23696 }, 23700, 23692, 24043, 24076, 24207, 24199, 24202, 24311, 24324, 24351, 24420, 24418, 24439, 24441, 24536, 24524, 24535, 24525, 24561, 24555, 24568, 24554, 25106, 25105, 25220, 25239, 25238, 25216, 25206, 25225, 25197, 25226, 25212, 25214, 25209, 25203, 25234, 25199, 25240, 25198, 25237, 25235, 25233, 25222, 25913, 25915, 25912, 26097, 26356, 26463, { f: 4, c: 26446 }, 26460, 26454, [26462, 57801], 26441, 26438, 26464, 26451, 26455, 27493, 27599, 27714, 27742, 27801, 27777, { f: 2, c: 27784 }, 27781, 27803, 27754, 27770, 27792, 27760, 27788, 27752, 27798, 27794, 27773, 27779, 27762, 27774, 27764, 27782, 27766, 27789, 27796, 27800, 27778, 28790, { f: 2, c: 28796 }, 28792, 29282, 29281, 29280, 29380, 29378, 29590, 29996, 29995, { f: 2, c: 30007 }, 30338, 30447, 30691, 31169, 31168, 31167, 31350, 31995, 32597, 32918, 32915, 32925, 32920, 32923, 32922, 32946, 33391, 33426, 33419, 33421, [12178, 35211], [12179, 35282], [12180, 35328], [12181, 35895], [12182, 35910], [12183, 35925], [12185, 35997], [12186, 36196], [12187, 36208], [12188, 36275], [12189, 36523], [12190, 36554], [12191, 36763], [12192, 36784], 36802, 36806, 36805, 36804, 24033, [12194, 37009], 37026, 37034, 37030, 37027, [12195, 37193], [12196, 37318], [12197, 37324], 38450, 38446, 38449, 38442, 38444, 20006, 20054, 20083, 20107, 20123, 20126, { f: 2, c: 20139 }, 20335, 20381, 20365, 20339, 20351, 20332, 20379, 20363, 20358, 20355, 20336, 20341, 20360, 20329, 20347, 20374, 20350, 20367, 20369, 20346, 20820, 20818, 20821, 20841, 20855, 20854, 20856, 20925, 20989, 21051, 21048, 21047, 21050, 21040, 21038, 21046, 21057, 21182, 21179, 21330, 21332, 21331, 21329, 21350, { f: 3, c: 21367 }, 21462, 21460, 21463, 21619, 21621, 21654, 21624, 21653, 21632, 21627, 21623, 21636, 21650, 21638, 21628, 21648, 21617, 21622, 21644, 21658, 21602, 21608, 21643, 21629, 21646, 22266, 22403, 22391, 22378, 22377, 22369, 22374, 22372, 22396, 22812, 22857, { f: 2, c: 22855 }, 22852, 22868, 22974, 22971, 22996, 22969, 22958, 22993, 22982, 22992, 22989, 22987, 22995, 22986, 22959, 22963, 22994, 22981, 23391, 23396, 23395, 23447, 23450, 23448, 23452, 23449, 23451, 23578, 23624, { f: 2, c: 23621 }, 23735, 23713, 23736, 23721, 23723, 23729, 23731, 24088, 24090, 24086, 24085, 24091, 24081, 24184, 24218, 24215, 24220, { f: 2, c: 24213 }, 24310, { f: 2, c: 24358 }, 24361, { f: 2, c: 24448 }, 24447, 24444, 24541, 24544, 24573, 24565, 24575, 24591, 24596, 24623, 24629, 24598, 24618, 24597, 24609, 24615, 24617, 24619, 24603, 25110, 25109, 25151, 25150, 25152, 25215, 25289, 25292, 25284, 25279, 25282, 25273, 25298, 25307, 25259, { f: 2, c: 25299 }, 25291, 25288, 25256, 25277, 25276, [25296, 60582], 25305, 25287, 25293, 25269, 25306, 25265, 25304, { f: 2, c: 25302 }, 25286, 25260, [25294, 61010], 25918, 26023, 26044, 26106, 26132, 26131, 26124, 26118, 26114, 26126, 26112, 26127, 26133, 26122, 26119, 26381, 26379, 26477, 26507, 26517, 26481, 26524, 26483, 26487, 26503, 26525, 26519, { f: 2, c: 26479 }, 26495, 26505, 26494, 26512, 26485, 26522, 26515, 26492, 26474, 26482, 27427, { f: 2, c: 27494 }, 27519, 27667, 27675, 27875, 27880, 27891, 27825, 27852, 27877, 27827, { f: 2, c: 27837 }, 27836, 27874, 27819, 27861, 27859, 27832, 27844, 27833, 27841, 27822, 27863, 27845, 27889, 27839, 27835, 27873, 27867, 27850, 27820, 27887, 27868, 27862, 27872, 28821, 28814, 28818, 28810, 28825, { f: 2, c: 29228 }, 29240, 29256, 29287, 29289, 29376, 29390, 29401, 29399, 29392, 29609, 29608, 29599, 29611, 29605, 30013, 30109, { f: 2, c: 30105 }, 30340, 30402, 30450, 30452, 30693, 30717, 31038, { f: 2, c: 31040 }, 31177, 31176, 31354, 31353, 31482, 31998, 32596, 32652, 32651, [32773, 58236], 32954, 32933, 32930, 32945, 32929, 32939, 32937, 32948, 32938, 32943, 33253, 33278, 33293, 33459, 33437, 33433, 33453, 33469, 33439, 33465, 33457, 33452, 33445, 33455, 33464, 33443, 33456, 33470, 33463, 34382, 34417, 21021, 34920, 36555, 36814, 36820, 36817, 37045, 37048, 37041, 37046, 37319, [12198, 37329], [12199, 38263], [12200, 38272], [12201, 38428], 38464, 38463, 38459, 38468, 38466, [12203, 38585], [12204, 38632], 38738, [12206, 38750], 20127, { f: 2, c: 20141 }, 20449, 20405, 20399, 20415, 20448, 20433, 20431, 20445, 20419, 20406, 20440, 20447, 20426, 20439, 20398, 20432, 20420, 20418, 20442, 20430, 20446, 20407, 20823, 20882, 20881, 20896, 21070, 21059, 21066, 21069, 21068, 21067, 21063, 21191, 21193, 21187, 21185, 21261, 21335, 21371, 21402, 21467, 21676, 21696, 21672, 21710, 21705, 21688, 21670, 21683, 21703, 21698, 21693, 21674, 21697, 21700, 21704, 21679, 21675, 21681, 21691, 21673, 21671, 21695, 22271, 22402, 22411, 22432, 22435, 22434, 22478, 22446, 22419, 22869, 22865, 22863, 22862, 22864, 23004, 23e3, 23039, 23011, 23016, 23043, 23013, 23018, 23002, 23014, 23041, 23035, 23401, 23459, 23462, 23460, 23458, 23461, 23553, { f: 2, c: 23630 }, 23629, 23627, 23769, 23762, 24055, 24093, 24101, 24095, 24189, 24224, 24230, 24314, 24328, 24365, 24421, 24456, 24453, { f: 2, c: 24458 }, 24455, 24460, 24457, 24594, 24605, 24608, 24613, 24590, 24616, 24653, 24688, 24680, [24674, 60712], 24646, 24643, 24684, 24683, 24682, 24676, 25153, 25308, 25366, 25353, 25340, 25325, 25345, 25326, 25341, 25351, 25329, 25335, 25327, 25324, 25342, 25332, 25361, 25346, 25919, 25925, 26027, 26045, 26082, 26149, 26157, 26144, 26151, 26159, 26143, 26152, 26161, 26148, 26359, 26623, 26579, 26609, 26580, 26576, 26604, 26550, 26543, 26613, 26601, 26607, 26564, 26577, 26548, 26586, 26597, 26552, 26575, 26590, 26611, 26544, 26585, 26594, 26589, 26578, 27498, 27523, 27526, 27573, 27602, 27607, 27679, 27849, 27915, 27954, 27946, 27969, 27941, 27916, 27953, 27934, 27927, 27963, { f: 2, c: 27965 }, 27958, 27931, 27893, 27961, 27943, 27960, 27945, 27950, 27957, 27918, 27947, 28843, 28858, 28851, 28844, 28847, 28845, 28856, 28846, 28836, 29232, 29298, 29295, 29300, 29417, { f: 2, c: 29408 }, 29623, 29642, 29627, 29618, 29645, 29632, 29619, 29978, 29997, 30031, 30028, 30030, 30027, 30123, { f: 2, c: 30116 }, { f: 2, c: 30114 }, 30328, { f: 3, c: 30342 }, 30408, 30406, 30403, 30405, 30465, 30457, 30456, 30473, 30475, 30462, 30460, 30471, 30684, 30722, 30740, { f: 2, c: 30732 }, 31046, 31049, 31048, 31047, { f: 2, c: 31161 }, { f: 2, c: 31185 }, 31179, 31359, 31361, 31487, 31485, 31869, 32002, 32005, 32e3, 32009, 32007, 32004, 32006, 32568, 32654, 32703, 32784, 32781, 32785, 32822, 32982, 32997, 32986, { f: 2, c: 32963 }, 32972, 32993, 32987, 32974, 32990, 32996, 32989, 33268, 33314, 33511, 33539, 33541, 33507, 33499, 33510, 33540, 33509, 33538, 33545, 33490, 33495, 33521, 33537, 33500, 33492, 33489, 33502, 33491, 33503, 33519, 33542, 34384, 34425, 34427, 34426, 34893, 34923, 35201, 35284, 35336, { f: 2, c: 35330 }, 35998, 36e3, 36212, 36211, 36276, 36557, 36556, 36848, 36838, 36834, 36842, 36837, 36845, 36843, 36836, 36840, 37066, 37070, 37057, 37059, 37195, 37194, 37325, 38274, 38480, { f: 3, c: 38475 }, [12207, 38754], [12208, 38761], [12209, 38859], [12210, 38893], [12211, 38899], [12212, 38913], [12213, 39080], [12214, 39131], [12215, 39135], [12216, 39318], [12217, 39321], 20056, 20147, { f: 2, c: 20492 }, 20515, 20463, 20518, 20517, 20472, [20521, 57375], 20502, 20486, 20540, 20511, 20506, 20498, 20497, 20474, 20480, 20500, 20520, 20465, 20513, 20491, 20505, 20504, 20467, 20462, 20525, 20522, 20478, 20523, 20489, 20860, { f: 2, c: 20900 }, 20898, 20941, 20940, 20934, 20939, 21078, 21084, 21076, 21083, 21085, 21290, [21375, 57459], 21407, 21405, 21471, 21736, 21776, 21761, 21815, 21756, 21733, 21746, 21766, 21754, 21780, 21737, 21741, 21729, 21769, 21742, 21738, 21734, 21799, 21767, 21757, 21775, { f: 2, c: 22275 }, 22466, 22484, 22475, 22467, 22537, 22799, { f: 2, c: 22871 }, 22874, 23057, 23064, 23068, 23071, 23067, 23059, 23020, 23072, 23075, 23081, 23077, 23052, 23049, 23403, 23640, 23472, 23475, 23478, 23476, 23470, 23477, 23481, 23480, 23556, 23633, 23637, 23632, 23789, 23805, 23803, 23786, 23784, 23792, 23798, 23809, 23796, 24046, 24109, 24107, 24235, 24237, 24231, 24369, 24466, 24465, 24464, 24665, 24675, 24677, 24656, 24661, 24685, 24681, 24687, 24708, 24735, 24730, 24717, 24724, 24716, 24709, 24726, 25159, 25331, 25352, 25343, 25422, 25406, 25391, 25429, 25410, 25414, 25423, 25417, 25402, 25424, 25405, { f: 2, c: 25386 }, 25384, 25421, 25420, { f: 2, c: 25928 }, 26009, 26049, 26053, 26178, 26185, 26191, 26179, 26194, 26188, 26181, 26177, 26360, { f: 2, c: 26388 }, 26391, 26657, 26680, 26696, 26694, 26707, 26681, 26690, 26708, 26665, 26803, 26647, 26700, 26705, 26685, 26612, 26704, 26688, 26684, 26691, 26666, 26693, 26643, 26648, 26689, 27530, 27529, 27575, 27683, { f: 2, c: 27687 }, 27686, 27684, 27888, 28010, 28053, 28040, 28039, 28006, 28024, 28023, 27993, 28051, 28012, 28041, 28014, 27994, 28020, 28009, 28044, 28042, 28025, 28037, 28005, 28052, 28874, 28888, 28900, 28889, 28872, 28879, 29241, 29305, 29436, 29433, 29437, 29432, 29431, 29574, 29677, 29705, 29678, 29664, 29674, 29662, 30036, 30045, 30044, 30042, 30041, 30142, 30149, 30151, { f: 2, c: 30130 }, 30141, 30140, 30137, 30146, 30136, 30347, 30384, 30410, { f: 2, c: 30413 }, 30505, { f: 2, c: 30495 }, 30504, 30697, 30768, 30759, 30776, 30749, 30772, 30775, 30757, 30765, 30752, 30751, 30770, 31061, 31056, 31072, 31071, 31062, 31070, 31069, 31063, 31066, 31204, [31203, 60418], 31207, 31199, 31206, 31209, 31192, 31364, 31368, 31449, 31494, 31505, 31881, 32033, 32023, 32011, 32010, 32032, 32034, 32020, 32016, 32021, 32026, 32028, 32013, 32025, 32027, 32570, 32607, 32660, 32709, 32705, 32774, 32772, 32792, 32789, 32793, 32791, 32829, 32831, 33009, 33026, 33008, 33029, 33005, 33012, 33030, 33016, 33011, 33032, 33021, 33034, 33020, 33007, 33261, 33260, 33280, 33296, { f: 2, c: 33322 }, 33320, 33324, 33467, 33579, 33618, 33620, 33610, 33592, 33616, 33609, 33589, 33588, 33615, 33586, 33593, 33590, 33559, 33600, 33585, 33576, 33603, 34388, 34442, 34474, 34451, 34468, 34473, 34444, 34467, 34460, 34928, 34935, { f: 2, c: 34945 }, 34941, 34937, 35352, 35344, 35342, 35340, 35349, 35338, 35351, 35347, 35350, 35343, 35345, 35912, 35962, 35961, { f: 2, c: 36001 }, [36215, 58442], 36524, 36562, 36564, 36559, 36785, 36865, 36870, 36855, 36864, 36858, 36852, 36867, 36861, 36869, 36856, 37013, 37089, 37085, 37090, 37202, 37197, 37196, 37336, 37341, 37335, 37340, 37337, 38275, { f: 2, c: 38498 }, 38497, 38491, 38493, 38500, 38488, 38494, 38587, 39138, [12218, 39340], [12219, 39592], [12220, 39640], [12222, 39717], [12224, 39730], [12225, 39740], 20094, 20602, [20605, 57382], 20572, 20551, 20547, 20556, 20570, 20553, 20581, 20598, 20558, 20565, 20597, 20596, 20599, 20559, 20495, 20591, 20589, 20828, 20885, 20976, 21098, 21103, 21202, 21209, 21208, 21205, 21264, 21263, 21273, { f: 2, c: 21311 }, 21310, 21443, 26364, 21830, 21866, 21862, 21828, 21854, 21857, 21827, 21834, 21809, 21846, 21839, 21845, 21807, 21860, 21816, 21806, 21852, 21804, 21859, 21811, 21825, 21847, 22280, 22283, 22281, 22495, 22533, 22538, 22534, 22496, 22500, 22522, 22530, 22581, 22519, 22521, 22816, 22882, 23094, 23105, 23113, 23142, 23146, 23104, 23100, 23138, 23130, 23110, 23114, 23408, 23495, 23493, 23492, 23490, 23487, 23494, 23561, 23560, 23559, 23648, { f: 2, c: 23644 }, 23815, 23814, 23822, 23835, 23830, 23842, 23825, 23849, 23828, 23833, 23844, 23847, 23831, 24034, 24120, 24118, 24115, 24119, { f: 2, c: 24247 }, 24246, 24245, 24254, 24373, 24375, 24407, 24428, 24425, 24427, 24471, 24473, 24478, 24472, 24481, 24480, 24476, 24703, 24739, 24713, 24736, 24744, 24779, 24756, 24806, 24765, 24773, 24763, 24757, 24796, 24764, 24792, 24789, 24774, 24799, 24760, 24794, 24775, { f: 2, c: 25114 }, 25160, 25504, 25511, 25458, 25494, 25506, 25509, 25463, 25447, 25496, 25514, 25457, 25513, 25481, 25475, 25499, 25451, 25512, 25476, 25480, 25497, 25505, 25516, 25490, 25487, 25472, 25467, 25449, 25448, 25466, 25949, 25942, 25937, 25945, 25943, 21855, 25935, 25944, 25941, 25940, 26012, 26011, 26028, 26063, { f: 2, c: 26059 }, 26062, 26205, 26202, 26212, 26216, 26214, 26206, 26361, 21207, 26395, 26753, 26799, 26786, 26771, 26805, 26751, 26742, 26801, 26791, 26775, 26800, 26755, 26820, 26797, 26758, 26757, 26772, 26781, 26792, 26783, 26785, 26754, 27442, 27578, { f: 2, c: 27627 }, 27691, 28046, 28092, 28147, 28121, 28082, 28129, 28108, 28132, 28155, 28154, 28165, 28103, 28107, 28079, 28113, 28078, 28126, 28153, 28088, 28151, 28149, 28101, 28114, 28186, 28085, 28122, 28139, 28120, 28138, 28145, 28142, 28136, 28102, 28100, 28074, 28140, 28095, 28134, 28921, { f: 2, c: 28937 }, 28925, 28911, 29245, 29309, 29313, 29468, 29467, 29462, 29459, 29465, 29575, 29701, 29706, 29699, 29702, 29694, 29709, 29920, { f: 2, c: 29942 }, 29980, 29986, { f: 2, c: 30053 }, 30050, 30064, 30095, { f: 2, c: 30164 }, 30133, 30154, 30157, 30350, 30420, 30418, 30427, 30519, 30526, 30524, 30518, 30520, 30522, 30827, 30787, 30798, 31077, 31080, 31085, 31227, 31378, 31381, 31520, 31528, 31515, 31532, 31526, 31513, 31518, 31534, 31890, 31895, 31893, 32070, 32067, 32113, 32046, 32057, 32060, 32064, 32048, 32051, 32068, 32047, 32066, 32050, 32049, 32573, 32670, 32666, 32716, 32718, 32722, 32796, 32842, 32838, 33071, 33046, 33059, 33067, 33065, 33072, 33060, 33282, 33333, 33335, 33334, 33337, 33678, 33694, 33688, 33656, 33698, 33686, 33725, 33707, 33682, 33674, 33683, 33673, 33696, 33655, { f: 2, c: 33659 }, 33670, 33703, 34389, 24426, 34503, 34496, 34486, 34500, 34485, 34502, 34507, 34481, 34479, 34505, 34899, 34974, 34952, 34987, 34962, 34966, 34957, 34955, 35219, 35215, 35370, 35357, 35363, 35365, 35377, 35373, 35359, 35355, 35362, 35913, 35930, 36009, 36012, 36011, 36008, 36010, 36007, 36199, 36198, 36286, 36282, 36571, 36575, 36889, 36877, 36890, 36887, 36899, 36895, 36893, 36880, 36885, 36894, 36896, 36879, 36898, 36886, 36891, 36884, 37096, 37101, [37117, 58488], 37207, 37326, 37365, 37350, 37347, 37351, 37357, 37353, 38281, 38506, 38517, 38515, 38520, 38512, 38516, { f: 2, c: 38518 }, 38508, 38592, 38634, 38633, 31456, 31455, { f: 2, c: 38914 }, [12226, 39770], [12227, 40165], [12228, 40565], [12229, 40575], [12230, 40613], [12231, 40635], 20642, 20621, 20613, 20633, 20625, 20608, 20630, 20632, 20634, 26368, 20977, 21106, { f: 2, c: 21108 }, 21097, 21214, 21213, 21211, 21338, 21413, 21883, 21888, 21927, 21884, 21898, 21917, 21912, 21890, 21916, 21930, 21908, 21895, 21899, 21891, 21939, 21934, 21919, 21822, 21938, 21914, 21947, 21932, 21937, 21886, 21897, 21931, 21913, 22285, 22575, 22570, 22580, 22564, { f: 2, c: 22576 }, 22561, 22557, 22560, { f: 2, c: 22777 }, 22880, [23159, 57587], 23194, 23167, 23186, 23195, 23207, 23411, 23409, 23506, 23500, 23507, 23504, { f: 2, c: 23562 }, 23601, 23884, 23888, 23860, 23879, 24061, 24133, 24125, 24128, 24131, 24190, 24266, { f: 2, c: 24257 }, 24260, 24380, 24429, { f: 2, c: 24489 }, 24488, 24785, 24801, 24754, 24758, 24800, 24860, 24867, 24826, 24853, 24816, 24827, 24820, 24936, 24817, 24846, 24822, 24841, 24832, 24850, 25119, 25161, 25507, 25484, 25551, 25536, 25577, 25545, 25542, 25549, 25554, 25571, 25552, 25569, 25558, { f: 2, c: 25581 }, 25462, 25588, 25578, 25563, 25682, 25562, 25593, 25950, 25958, { f: 2, c: 25954 }, 26001, 26e3, 26031, 26222, 26224, [26228, 57786], 26230, 26223, 26257, 26234, 26238, 26231, { f: 2, c: 26366 }, 26399, 26397, 26874, 26837, 26848, 26840, 26839, 26885, 26847, 26869, 26862, 26855, 26873, 26834, 26866, 26851, 26827, 26829, 26893, 26898, 26894, 26825, 26842, 26990, 26875, 27454, 27450, 27453, 27544, 27542, 27580, 27631, { f: 2, c: 27694 }, 27692, [28207, 57904], 28216, 28244, 28193, 28210, 28263, 28234, 28192, 28197, 28195, 28187, 28251, 28248, 28196, 28246, 28270, 28205, 28198, 28271, 28212, 28237, 28218, 28204, 28227, [28189, 57901], 28222, 28363, 28297, 28185, 28238, 28259, 28228, 28274, 28265, 28255, { f: 2, c: 28953 }, 28966, 28976, 28961, 28982, [29038, 57958], 28956, 29260, 29316, 29312, 29494, 29477, 29492, 29481, 29754, 29738, 29747, 29730, 29733, { f: 2, c: 29749 }, 29748, 29743, 29723, 29734, 29736, { f: 2, c: 29989 }, 30059, 30058, 30178, 30171, 30179, 30169, 30168, 30174, 30176, { f: 2, c: 30331 }, 30358, 30355, 30388, 30428, 30543, 30701, 30813, 30828, 30831, 31245, 31240, 31243, 31237, 31232, 31384, 31383, 31382, 31461, 31459, 31561, 31574, 31558, 31568, 31570, 31572, 31565, 31563, 31567, [31569, 60510], 31903, 31909, 32094, 32080, 32104, 32085, 32043, 32110, 32114, 32097, 32102, 32098, 32112, 32115, 21892, { f: 2, c: 32724 }, 32779, 32850, 32901, 33109, 33108, 33099, 33105, 33102, 33081, 33094, 33086, 33100, 33107, 33140, 33298, 33308, 33769, 33795, 33784, 33805, 33760, 33733, 33803, [33729, 58309], 33775, 33777, 33780, 33879, 33802, 33776, 33804, 33740, 33789, 33778, 33738, 33848, 33806, 33796, 33756, 33799, 33748, 33759, 34395, 34527, 34521, 34541, 34516, 34523, 34532, 34512, 34526, 34903, { f: 2, c: 35009 }, 34993, 35203, 35222, 35387, 35424, 35413, 35422, 35388, 35393, 35412, 35419, 35408, 35398, 35380, 35386, 35382, 35414, 35937, 35970, 36015, 36028, 36019, 36029, 36033, 36027, 36032, 36020, 36023, 36022, 36031, 36024, 36234, 36229, 36225, 36302, 36317, 36299, 36314, 36305, 36300, 36315, 36294, 36603, 36600, 36604, 36764, 36910, 36917, 36913, 36920, 36914, 36918, 37122, 37109, 37129, 37118, 37219, 37221, 37327, { f: 2, c: 37396 }, 37411, 37385, 37406, 37389, 37392, 37383, 37393, 38292, 38287, 38283, 38289, 38291, 38290, 38286, 38538, 38542, 38539, 38525, { f: 2, c: 38533 }, 38541, 38514, 38532, 38593, 38597, 38596, { f: 2, c: 38598 }, 38639, 38642, 38860, { f: 2, c: 38917 }, 38920, 39143, 39146, 39151, 39145, 39154, 39149, 39342, 39341, [12232, 40643], [12233, 40653], [12234, 40657], 20098, 20653, 20661, { f: 2, c: 20658 }, 20677, 20670, 20652, 20663, 20667, 20655, 20679, 21119, 21111, 21117, 21215, 21222, 21220, { f: 2, c: 21218 }, 21295, 21983, 21992, 21971, 21990, 21966, 21980, 21959, 21969, { f: 2, c: 21987 }, 21999, 21978, 21985, { f: 2, c: 21957 }, 21989, 21961, { f: 2, c: 22290 }, 22622, 22609, 22616, 22615, 22618, 22612, 22635, 22604, 22637, 22602, 22626, 22610, 22603, 22887, 23233, 23241, 23244, 23230, 23229, 23228, 23219, 23234, 23218, 23913, 23919, 24140, 24185, 24265, 24264, 24338, 24409, 24492, 24494, 24858, 24847, 24904, 24863, 24819, 24859, 24825, 24833, 24840, 24910, 24908, 24900, 24909, 24894, 24884, 24871, 24845, 24838, 24887, { f: 2, c: 25121 }, 25619, 25662, 25630, 25642, 25645, 25661, 25644, 25615, 25628, 25620, 25613, 25654, { f: 2, c: 25622 }, 25606, 25964, 26015, 26032, 26263, 26249, { f: 2, c: 26247 }, 26262, 26244, 26264, 26253, 26371, 27028, 26989, 26970, 26999, 26976, 26964, 26997, 26928, 27010, 26954, 26984, 26987, 26974, 26963, 27001, 27014, 26973, 26979, 26971, 27463, 27506, 27584, 27583, 27603, 27645, 28322, 28335, 28371, 28342, 28354, 28304, 28317, 28359, 28357, 28325, 28312, 28348, 28346, 28331, 28369, 28310, 28316, 28356, 28372, 28330, 28327, 28340, 29006, 29017, 29033, 29028, 29001, 29031, 29020, 29036, 29030, 29004, 29029, 29022, 28998, 29032, 29014, 29242, 29266, 29495, 29509, 29503, 29502, 29807, 29786, 29781, 29791, 29790, 29761, 29759, 29785, 29787, [29788, 58019], 30070, 30072, 30208, 30192, 30209, 30194, 30193, 30202, 30207, 30196, 30195, { f: 2, c: 30430 }, 30555, 30571, 30566, 30558, 30563, 30585, 30570, 30572, 30556, 30565, 30568, 30562, 30702, 30862, 30896, { f: 2, c: 30871 }, 30860, 30857, 30844, 30865, 30867, 30847, 31098, 31103, 31105, 33836, 31165, 31260, 31258, 31264, 31252, 31263, 31262, { f: 2, c: 31391 }, 31607, 31680, 31584, 31598, 31591, 31921, 31923, 31925, 32147, 32121, 32145, 32129, 32143, 32091, 32622, { f: 2, c: 32617 }, 32626, 32681, 32680, 32676, 32854, 32856, 32902, 32900, 33137, 33136, 33144, 33125, 33134, 33139, 33131, { f: 2, c: 33145 }, 33126, 33285, 33351, 33922, 33911, 33853, 33841, 33909, 33894, 33899, 33865, 33900, 33883, 33852, 33845, 33889, 33891, 33897, 33901, 33862, 34398, 34396, 34399, 34553, 34579, 34568, 34567, 34560, 34558, 34555, { f: 2, c: 34562 }, 34566, 34570, 34905, 35039, 35028, 35033, 35036, 35032, 35037, 35041, 35018, 35029, 35026, 35228, 35299, 35435, { f: 2, c: 35442 }, 35430, 35433, 35440, 35463, 35452, 35427, 35488, 35441, 35461, 35437, 35426, 35438, 35436, 35449, 35451, 35390, 35432, 35938, 35978, 35977, 36042, { f: 2, c: 36039 }, 36036, 36018, 36035, 36034, 36037, 36321, 36319, 36328, 36335, 36339, 36346, 36330, 36324, 36326, 36530, 36611, 36617, 36606, 36618, 36767, 36786, 36939, 36938, 36947, 36930, 36948, 36924, 36949, 36944, 36935, 36943, 36942, 36941, 36945, 36926, 36929, 37138, 37143, 37228, 37226, 37225, 37321, 37431, 37463, 37432, 37437, 37440, 37438, 37467, 37451, 37476, 37457, 37428, 37449, 37453, 37445, 37433, 37439, 37466, 38296, 38552, { f: 2, c: 38548 }, 38605, 38603, { f: 2, c: 38601 }, 38647, 38651, 38649, 38646, 38742, 38772, 38774, { f: 2, c: 38928 }, 38931, 38922, 38930, 38924, 39164, 39156, { f: 2, c: 39165 }, 39347, 39345, 39348, 39649, 40169, 40578, [12237, 40718], [12238, 40723], [12239, 40736], 20711, 20718, 20709, 20694, [20717, 60903], 20698, 20693, 20687, 20689, 20721, 20686, 20713, 20834, 20979, 21123, 21122, 21297, 21421, 22014, 22016, 22043, 22039, 22013, 22036, 22022, 22025, { f: 2, c: 22029 }, 22007, 22038, 22047, 22024, 22032, 22006, 22296, 22294, 22645, 22654, 22659, 22675, 22666, 22649, 22661, 22653, 22781, 22821, 22818, 22820, 22890, 22889, 23265, 23270, 23273, 23255, 23254, 23256, 23267, 23413, 23518, 23527, 23521, { f: 2, c: 23525 }, 23528, 23522, 23524, 23519, 23565, 23650, 23940, 23943, 24155, 24163, 24149, 24151, 24148, 24275, 24278, 24330, 24390, 24432, 24505, 24903, 24895, 24907, 24951, { f: 2, c: 24930 }, 24927, 24922, 24920, 24949, 25130, 25735, 25688, 25684, 25764, 25720, 25695, 25722, 25681, 25703, 25652, 25709, 25723, 25970, 26017, 26071, 26070, 26274, 26280, 26269, 27036, 27048, 27029, 27073, 27054, 27091, 27083, 27035, 27063, 27067, 27051, 27060, 27088, 27085, 27053, 27084, 27046, 27075, 27043, 27465, 27468, 27699, 28467, 28436, 28414, 28435, 28404, 28457, 28478, 28448, 28460, 28431, 28418, 28450, 28415, 28399, 28422, 28465, 28472, 28466, 28451, 28437, 28459, 28463, 28552, 28458, 28396, 28417, 28402, 28364, 28407, 29076, 29081, 29053, 29066, 29060, 29074, 29246, 29330, 29334, 29508, 29520, 29796, 29795, 29802, 29808, 29805, 29956, 30097, 30247, 30221, 30219, 30217, 30227, 30433, 30435, 30596, 30589, 30591, 30561, 30913, 30879, 30887, 30899, 30889, 30883, { f: 2, c: 31118 }, 31117, 31278, 31281, 31402, 31401, 31469, 31471, 31649, 31637, 31627, 31605, 31639, 31645, 31636, 31631, [31672, 58170], 31623, 31620, 31929, { f: 2, c: 31933 }, 32187, 32176, 32156, { f: 2, c: 32189 }, 32160, 32202, 32180, 32178, 32177, 32186, 32162, 32191, 32181, 32184, 32173, [32210, 58202], 32199, 32172, 32624, { f: 2, c: 32736 }, 32735, 32862, 32858, 32903, 33104, 33152, 33167, 33160, 33162, 33151, 33154, 33255, 33274, 33287, 33300, 33310, 33355, 33993, 33983, 33990, 33988, 33945, 33950, 33970, 33948, 33995, 33976, 33984, 34003, 33936, 33980, 34001, 33994, 34623, 34588, 34619, 34594, 34597, 34612, 34584, 34645, 34615, 34601, 35059, 35074, 35060, 35065, 35064, 35069, 35048, 35098, 35055, 35494, 35468, 35486, 35491, 35469, 35489, 35475, 35492, 35498, 35493, 35496, 35480, 35473, 35482, 35495, 35946, 35981, 35980, 36051, { f: 2, c: 36049 }, 36203, 36249, 36245, 36348, 36628, 36626, 36629, 36627, 36771, 36960, 36952, 36956, 36963, 36953, 36958, 36962, 36957, 36955, 37145, 37144, 37150, 37237, 37240, 37239, 37236, 37496, 37548, 37504, 37509, 37528, 37526, 37499, 37523, 37532, 37544, 37500, 37521, 38305, { f: 2, c: 38312 }, 38307, 38309, 38308, 38553, 38556, 38555, 38604, 38610, 38656, 38780, 38789, 38902, { f: 2, c: 38935 }, 39087, 39089, 39171, 39173, 39180, 39177, 39361, { f: 2, c: 39599 }, 39654, { f: 2, c: 39745 }, 40180, 40182, 40179, 40636, [12240, 40763], [12241, 40778], 20740, 20736, 20731, 20725, 20729, 20738, { f: 2, c: 20744 }, 20741, 20956, { f: 3, c: 21127 }, 21133, 21130, 21232, 21426, 22062, 22075, 22073, 22066, 22079, 22068, 22057, 22099, 22094, 22103, 22132, 22070, { f: 2, c: 22063 }, 22656, 22687, 22686, 22707, 22684, 22702, 22697, 22694, 22893, 23305, 23291, 23307, 23285, 23308, 23304, 23534, 23532, 23529, 23531, { f: 2, c: 23652 }, 23965, 23956, 24162, 24159, 24161, 24290, 24282, 24287, 24285, 24291, 24288, 24392, 24433, 24503, 24501, 24950, 24935, 24942, 24925, 24917, 24962, 24956, 24944, 24939, 24958, 24999, 24976, 25003, 24974, 25004, 24986, 24996, 24980, 25006, 25134, 25705, 25711, 25721, 25758, 25778, 25736, [25744, 57745], 25776, 25765, 25747, 25749, 25769, 25746, 25774, 25773, 25771, 25754, 25772, 25753, 25762, 25779, 25973, { f: 2, c: 25975 }, 26286, 26283, 26292, 26289, 27171, 27167, 27112, 27137, 27166, 27161, 27133, 27169, 27155, 27146, 27123, 27138, 27141, 27117, 27153, 27472, 27470, 27556, { f: 2, c: 27589 }, 28479, 28540, 28548, 28497, 28518, 28500, 28550, 28525, 28507, 28536, 28526, 28558, 28538, 28528, 28516, 28567, 28504, 28373, 28527, 28512, 28511, 29087, 29100, 29105, 29096, 29270, 29339, 29518, 29527, 29801, 29835, 29827, 29822, 29824, 30079, 30240, 30249, 30239, 30244, 30246, { f: 2, c: 30241 }, 30362, 30394, 30436, 30606, 30599, 30604, 30609, 30603, 30923, 30917, 30906, 30922, 30910, 30933, 30908, 30928, 31295, 31292, 31296, 31293, 31287, 31291, 31407, 31406, 31661, 31665, 31684, 31668, { f: 2, c: 31686 }, 31681, 31648, 31692, 31946, 32224, 32244, 32239, 32251, 32216, 32236, 32221, 32232, 32227, 32218, 32222, 32233, 32158, 32217, 32242, 32249, 32629, 32631, 32687, 32745, 32806, { f: 3, c: 33179 }, 33184, 33178, 33176, 34071, 34109, 34074, 34030, { f: 2, c: 34092 }, 34067, 34065, 34083, 34081, 34068, 34028, 34085, 34047, 34054, 34690, 34676, 34678, 34656, 34662, 34680, 34664, 34649, 34647, 34636, 34643, 34907, 34909, 35088, 35079, { f: 2, c: 35090 }, 35093, 35082, 35516, 35538, 35527, 35524, 35477, 35531, 35576, 35506, 35529, 35522, 35519, 35504, 35542, 35533, 35510, 35513, 35547, 35916, 35918, 35948, 36064, 36062, 36070, 36068, { f: 2, c: 36076 }, { f: 2, c: 36066 }, 36060, 36074, 36065, 36205, 36255, 36259, 36395, 36368, 36381, 36386, 36367, 36393, 36383, 36385, 36382, 36538, 36637, 36635, 36639, 36649, 36646, 36650, 36636, 36638, 36645, 36969, 36974, 36968, 36973, 36983, 37168, 37165, 37159, 37169, 37255, 37257, 37259, 37251, 37573, 37563, 37559, 37610, 37604, 37569, 37555, 37564, 37586, 37575, 37616, 37554, 38317, 38321, 38660, { f: 2, c: 38662 }, 38665, 38752, 38797, 38795, 38799, 38945, 38955, 38940, 39091, 39178, 39187, 39186, 39192, 39389, 39376, 39391, 39387, 39377, 39381, 39378, 39385, 39607, { f: 2, c: 39662 }, 39719, 39749, 39748, 39799, 39791, 40198, 40201, 40195, 40617, 40638, 40654, 22696, [12242, 40786], 20754, 20760, 20756, 20752, 20757, 20864, 20906, 20957, 21137, 21139, 21235, 22105, 22123, 22137, 22121, 22116, 22136, 22122, 22120, 22117, 22129, 22127, 22124, 22114, 22134, 22721, 22718, 22727, 22725, 22894, 23325, 23348, 23416, 23536, 23566, 24394, 25010, 24977, 25001, 24970, 25037, 25014, 25022, 25034, 25032, 25136, 25797, 25793, 25803, { f: 2, c: 25787 }, 25818, 25796, 25799, 25794, 25805, 25791, 25810, 25812, 25790, 25972, 26310, 26313, 26297, 26308, 26311, 26296, 27197, 27192, 27194, 27225, 27243, 27224, 27193, 27204, 27234, 27233, 27211, 27207, 27189, 27231, 27208, 27481, 27511, 27653, 28610, 28593, 28577, 28611, 28580, 28609, 28583, 28595, 28608, 28601, [28598, 60318], 28582, 28576, 28596, 29118, 29129, 29136, 29138, 29128, 29141, 29113, 29134, 29145, 29148, { f: 2, c: 29123 }, 29544, 29852, 29859, 29848, 29855, 29854, 29922, { f: 2, c: 29964 }, 30260, 30264, 30266, 30439, 30437, 30624, { f: 2, c: 30622 }, 30629, 30952, 30938, 30956, 30951, 31142, { f: 2, c: 31309 }, 31302, 31308, 31307, 31418, 31705, 31761, 31689, 31716, 31707, 31713, 31721, 31718, { f: 2, c: 31957 }, 32266, 32273, 32264, 32283, 32291, 32286, [32285, 58211], 32265, 32272, 32633, 32690, { f: 2, c: 32752 }, 32750, [32808, 58239], 33203, 33193, 33192, 33275, 33288, { f: 2, c: 33368 }, 34122, 34137, 34120, { f: 2, c: 34152 }, 34115, 34121, 34157, 34154, 34142, 34691, 34719, 34718, 34722, 34701, 34913, 35114, 35122, 35109, 35115, 35105, 35242, [35238, 58391], 35558, 35578, 35563, 35569, 35584, 35548, 35559, 35566, 35582, { f: 2, c: 35585 }, 35575, 35565, 35571, 35574, 35580, 35947, 35949, 35987, 36084, 36420, 36401, 36404, 36418, 36409, 36405, 36667, 36655, 36664, 36659, 36776, 36774, 36981, 36980, 36984, 36978, 36988, 36986, 37172, 37266, 37664, 37686, 37624, 37683, 37679, 37666, 37628, 37675, 37636, 37658, 37648, 37670, 37665, 37653, 37678, 37657, 38331, { f: 2, c: 38567 }, 38570, 38613, 38670, 38673, 38678, 38669, 38675, 38671, 38747, [38748, 58565], 38758, 38808, 38960, 38968, 38971, 38967, 38957, 38969, 38948, 39184, 39208, 39198, 39195, 39201, 39194, 39405, 39394, 39409, 39608, 39612, 39675, 39661, 39720, 39825, 40213, 40227, 40230, 40232, 40210, 40219, 40664, 40660, [12243, 40845], [12244, 40860], 20778, 20767, 20769, 20786, 21237, 22158, 22144, 22160, 22149, 22151, 22159, 22741, 22739, 22737, 22734, 23344, 23338, 23332, 23418, 23607, 23656, 23996, 23994, 23997, 23992, 24171, 24396, 24509, 25033, 25026, 25031, 25062, 25035, 25138, 25140, 25806, 25802, 25816, 25824, 25840, 25830, 25836, 25841, 25826, 25837, { f: 2, c: 25986 }, 26329, 26326, 27264, 27284, 27268, 27298, 27292, 27355, 27299, 27262, 27287, 27280, 27296, 27484, 27566, 27610, 27656, 28632, 28657, { f: 2, c: 28639 }, 28635, 28644, 28651, 28655, 28544, 28652, 28641, 28649, 28629, 28654, 28656, 29159, [29151, 60361], 29166, 29158, 29157, 29165, 29164, 29172, 29152, 29237, 29254, 29552, 29554, 29865, 29872, 29862, 29864, 30278, 30274, 30284, 30442, 30643, 30634, 30640, 30636, 30631, 30637, 30703, 30967, 30970, 30964, 30959, 30977, 31143, 31146, 31319, 31423, 31751, 31757, 31742, 31735, 31756, 31712, 31968, 31964, 31966, 31970, 31967, 31961, 31965, 32302, 32318, 32326, 32311, 32306, 32323, 32299, 32317, 32305, 32325, 32321, 32308, 32313, 32328, 32309, 32319, 32303, 32580, 32755, 32764, { f: 2, c: 32881 }, 32880, 32879, 32883, 33222, 33219, 33210, 33218, 33216, 33215, 33213, 33225, 33214, 33256, 33289, 33393, 34218, 34180, 34174, 34204, 34193, 34196, 34223, 34203, 34183, 34216, 34186, 34214, 34407, 34752, 34769, 34739, 34770, 34758, 34731, 34747, 34746, 34760, 34763, 35131, 35126, 35140, 35128, 35133, 35244, 35598, 35607, 35609, 35611, 35594, 35616, 35613, 35588, 35600, 35905, 35903, 35955, 36090, 36093, 36092, 36088, 36091, 36264, 36425, 36427, 36424, 36426, 36676, 36670, 36674, 36677, 36671, 36991, 36989, 36996, { f: 2, c: 36993 }, 36992, 37177, 37283, 37278, 37276, 37709, 37762, 37672, 37749, 37706, 37733, 37707, 37656, 37758, 37740, 37723, 37744, 37722, 37716, { f: 3, c: 38346 }, 38344, 38342, 38577, 38584, 38614, 38684, 38686, 38816, 38867, 38982, 39094, 39221, 39425, 39423, 39854, 39851, 39850, 39853, 40251, 40255, 40587, 40655, 40670, { f: 2, c: 40668 }, 40667, 40766, 40779, 21474, 22165, 22190, 22745, 22744, 23352, 24413, 25059, 25139, 25844, 25842, 25854, 25862, { f: 2, c: 25850 }, 25847, 26039, 26332, 26406, 27315, 27308, 27331, 27323, 27320, 27330, { f: 2, c: 27310 }, 27487, 27512, 27567, 28681, 28683, 28670, 28678, 28666, 28689, 28687, { f: 2, c: 29179 }, 29182, 29176, 29559, 29557, 29863, 29887, 29973, 30294, 30296, 30290, 30653, 30655, { f: 2, c: 30651 }, 30990, 31150, { f: 2, c: 31329 }, 31328, { f: 2, c: 31428 }, 31787, 31783, 31786, 31774, 31779, 31777, 31975, { f: 2, c: 32340 }, 32350, 32346, 32353, 32338, 32345, 32584, 32761, 32763, 32887, 32886, 33229, 33231, 33290, 34255, 34217, 34253, 34256, 34249, 34224, 34234, 34233, 34799, 34796, 34802, 34784, 35206, 35250, 35316, 35624, 35641, 35628, 35627, 35920, 36101, 36441, 36451, 36454, 36452, 36447, 36437, 36544, 36681, 36685, 36999, 36995, 37e3, { f: 2, c: 37291 }, 37328, 37780, 37770, 37782, 37794, 37811, 37806, 37804, 37808, 37784, 37786, 37783, 38356, 38358, 38352, 38357, 38626, 38620, 38617, 38619, 38622, 38692, 38819, 38822, 38829, 38905, 38989, 38991, 38988, 38990, 38995, 39098, { f: 2, c: 39230 }, 39229, 39214, 39333, 39438, 39617, 39683, 39686, 39759, 39758, 39757, 39882, 39881, 39933, 39880, 39872, 40273, 40285, 40288, 40672, 40725, 40748, 20787, 22181, 22184, { f: 2, c: 22750 }, 22754, 23541, 40848, 24300, 25074, 25079, 25078, 25077, 25856, 25871, 26336, 26333, 27365, 27357, 27354, 27347, 28699, 28703, 28712, 28698, 28701, 28693, 28696, 29190, 29197, 29272, 29346, 29560, 29562, 29885, 29898, 29923, 30087, 30086, 30303, 30305, 30663, 31001, 31153, 31339, 31337, { f: 2, c: 31806 }, 31800, 31805, 31799, 31808, 32363, 32365, 32377, { f: 2, c: 32361 }, 32371, 32645, 32694, 32697, 32696, 33240, 34281, 34269, 34282, 34261, { f: 2, c: 34276 }, 34295, 34811, 34821, 34829, 34809, 34814, 35168, 35167, 35158, 35166, 35649, 35676, 35672, 35657, 35674, { f: 2, c: 35662 }, 35654, 35673, 36104, 36106, 36476, 36466, 36487, 36470, 36460, 36474, 36468, 36692, 36686, 36781, { f: 2, c: 37002 }, 37297, 37294, 37857, 37841, 37855, 37827, 37832, { f: 2, c: 37852 }, 37846, 37858, 37837, 37848, 37860, 37847, 37864, 38364, 38580, 38627, 38698, 38695, 38753, 38876, 38907, 39006, 39e3, 39003, 39100, 39237, 39241, 39446, 39449, 39693, 39912, 39911, 39894, 39899, 40329, 40289, 40306, 40298, 40300, 40594, 40599, 40595, 40628, 21240, 22199, 22198, 22196, 22204, 22756, 23360, 23363, 23421, 23542, 24009, 25080, 25082, 25880, 25876, 25881, 26342, 26407, 27372, 28734, 28720, 28722, 29200, 29563, 29903, 30306, 30309, 31014, 31018, 31020, 31019, 31431, 31478, 31820, 31811, 31821, { f: 2, c: 31983 }, 36782, 32381, 32380, 32386, 32588, 32768, 33242, 33382, 34299, 34297, 34321, 34298, 34310, 34315, 34311, 34314, { f: 2, c: 34836 }, 35172, 35258, 35320, 35696, 35692, 35686, 35695, 35679, 35691, 36111, 36109, 36489, 36481, 36485, 36482, 37300, 37323, 37912, 37891, 37885, 38369, 38704, 39108, 39250, 39249, 39336, 39467, 39472, 39479, 39477, 39955, 39949, 40569, 40629, 40680, 40751, 40799, 40803, 40801, { f: 2, c: 20791 }, 22209, 22208, 22210, 22804, 23660, 24013, 25084, 25086, 25885, 25884, 26005, 26345, 27387, 27396, 27386, 27570, 28748, 29211, 29351, 29910, 29908, 30313, 30675, 31824, 32399, 32396, 32700, 34327, 34349, 34330, 34851, 34850, 34849, 34847, 35178, 35180, 35261, 35700, 35703, 35709, 36115, 36490, 36493, 36491, 36703, 36783, 37306, 37934, 37939, 37941, 37946, 37944, 37938, 37931, 38370, { f: 2, c: 38712 }, 38706, [38911, 58586], 39015, 39013, 39255, 39493, 39491, 39488, 39486, 39631, 39764, 39761, 39981, 39973, 40367, 40372, 40386, 40376, 40605, 40687, 40729, 40796, { f: 2, c: 40806 }, 20796, 20795, 22216, 22218, 22217, 23423, 24020, 24018, 24398, 25087, 25892, 27402, 27489, 28753, 28760, 29568, 29924, 30090, 30318, 30316, 31155, 31840, 31839, 32894, 32893, 33247, 35186, 35183, 35324, 35712, { f: 2, c: 36118 }, 36497, 36499, 36705, 37192, 37956, { f: 2, c: 37969 }, { f: 2, c: 38717 }, 38851, 38849, 39019, 39253, 39509, 39501, 39634, 39706, 40009, 39985, 39998, 39995, 40403, 40407, 40756, 40812, 40810, 40852, 22220, 24022, 25088, 25891, 25899, 25898, 26348, 27408, 29914, 31434, 31844, 31843, 31845, 32403, 32406, 32404, 33250, 34360, 34367, 34865, 35722, 37008, 37007, 37987, 37984, 37988, 38760, 39023, 39260, { f: 2, c: 39514 }, 39511, { f: 2, c: 39635 }, 39633, 40020, 40023, 40022, 40421, 40607, 40692, 22225, 22761, 25900, 28766, { f: 2, c: 30321 }, [30679, 60226], 32592, 32648, 34870, 34873, 34914, 35731, 35730, 35734, 33399, 36123, 37312, 37994, 38722, 38728, 38724, 38854, 39024, 39519, 39714, 39768, 40031, { f: 2, c: 40441 }, { f: 2, c: 40572 }, 40711, 40823, 40818, 24307, 27414, 28771, 31852, 31854, 34875, 35264, 36513, 37313, 38002, 38e3, 39025, 39262, 39638, 39715, 40652, 28772, 30682, 35738, 38007, 38857, 39522, 39525, 32412, 35740, 36522, 37317, { f: 2, c: 38013 }, 38012, { f: 2, c: 40055 }, 40695, 35924, 38015, 40474, 29224, 39530, 39729, 40475, 40478, 31858, 20034, 20060, [12048, 20981], [12053, 21274], [12058, 21378], 19975, 19980, 20039, 20109, [12062, 22231], [12076, 23662], [12091, 24435], 19983, 20871, 19982, 20014, 20115, 20162, 20169, 20168, 20888, 21244, 21356, 21433, 22304, 22787, 22828, [23568, 60417], 24063, 26081, [12110, 27571], 27596, [12115, 27668], [12121, 29247], 20017, 20028, 20200, 20188, 20201, 20193, 20189, 20186, 21004, 21001, 21276, 21324, { f: 2, c: 22306 }, 22807, 22831, 23425, 23428, 23570, 23611, 23668, 23667, 24068, 24192, 24194, 24521, 25097, 25168, 27669, 27702, 27715, 27711, 27707, 29358, 29360, 29578, [12145, 31160], 32906, 38430, 20238, 20248, 20268, 20213, 20244, 20209, 20224, 20215, 20232, 20253, 20226, 20229, 20258, 20243, 20228, 20212, 20242, 20913, 21011, 21008, 21158, 21282, 21279, 21325, 21386, 21511, 22241, 22239, 22318, 22314, 22324, 22844, 22912, 22908, 22917, 22907, 22910, 22903, 22911, 23382, 23573, 23589, 23676, { f: 2, c: 23674 }, 23678, 24031, [24181, 57646], 24196, 24322, 24346, 24436, 24533, 24532, 24527, 25180, 25182, 25188, 25185, 25190, 25186, 25177, 25184, 25178, 25189, 25911, 26095, 26094, 26430, 26425, 26424, 26427, 26426, 26431, 26428, 26419, 27672, 27718, 27730, 27740, 27727, [27722, 60796], 27732, { f: 2, c: 27723 }, 28785, 29278, { f: 2, c: 29364 }, 29582, 29994, 30335, 31349, [12153, 32593], [12171, 33400], 33404, 33408, 33405, 33407, [12172, 34381], [12177, 35198], 37017, [37015, 59347], 37016, 37019, 37012, 38434, 38436, 38432, 38435, 20310, 20283, 20322, 20297, 20307, 20324, 20286, 20327, 20306, 20319, 20289, 20312, 20269, 20275, 20287, 20321, 20879, 20921, 21020, 21022, 21025, { f: 2, c: 21165 }, 21257, 21347, 21362, { f: 2, c: 21390 }, 21552, 21559, 21546, 21588, 21573, 21529, 21532, 21541, 21528, 21565, 21583, 21569, 21544, 21540, 21575, 22254, 22247, 22245, 22337, 22341, 22348, 22345, 22347, 22354, 22790, 22848, 22950, 22936, 22944, 22935, 22926, 22946, 22928, 22927, 22951, 22945, 23438, 23442, 23592, 23594, 23693, 23695, 23688, 23691, 23689, 23698, 23690, 23686, 23699, 23701, 24032, 24074, 24078, 24203, 24201, 24204, 24200, 24205, 24325, 24349, 24440, 24438, 24530, 24529, 24528, 24557, 24552, 24558, 24563, 24545, 24548, 24547, 24570, 24559, 24567, 24571, 24576, 24564, 25146, 25219, 25228, { f: 2, c: 25230 }, 25236, 25223, 25201, 25211, 25210, 25200, 25217, 25224, 25207, 25213, 25202, 25204, 26096, 26100, 26099, 26098, 26101, 26437, 26439, 26457, 26453, 26444, 26440, 26461, 26445, 26458, 26443, 27600, { f: 2, c: 27673 }, 27768, 27751, 27755, 27780, 27787, 27791, 27761, 27759, 27753, 27802, 27757, 27783, 27797, [27804, 57900], 27750, 27763, 27749, 27771, 27790, 28788, 28794, 29283, 29375, 29373, 29379, 29382, 29377, 29370, 29381, 29589, 29591, { f: 2, c: 29587 }, 29586, 30010, 30009, { f: 2, c: 30100 }, 30337, 31037, 32820, 32917, 32921, 32912, 32914, 32924, 33424, 33423, 33413, 33422, 33425, 33427, 33418, { f: 2, c: 33411 }, [12184, 35960], 36809, 36799, 37023, 37025, 37029, 37022, 37031, 37024, 38448, 38440, 38447, 38445, 20019, 20376, 20348, 20357, 20349, 20352, 20359, 20342, 20340, 20361, 20356, 20343, 20300, 20375, 20330, 20378, 20345, 20353, 20344, 20368, 20380, 20372, 20382, 20370, 20354, 20373, 20331, 20334, 20894, 20924, 20926, 21045, { f: 2, c: 21042 }, 21062, 21041, 21180, { f: 2, c: 21258 }, 21308, 21394, 21396, 21639, 21631, 21633, 21649, 21634, 21640, 21611, 21626, 21630, 21605, 21612, 21620, 21606, 21645, 21615, 21601, 21600, 21656, 21603, 21607, 21604, 22263, 22265, 22383, 22386, 22381, 22379, 22385, 22384, 22390, 22400, 22389, 22395, { f: 2, c: 22387 }, 22370, 22376, 22397, 22796, 22853, 22965, 22970, 22991, 22990, 22962, 22988, 22977, 22966, 22972, 22979, 22998, 22961, 22973, 22976, 22984, 22964, 22983, 23394, 23397, 23443, 23445, 23620, 23623, 23726, 23716, 23712, 23733, 23727, 23720, 23724, 23711, 23715, 23725, 23714, 23722, 23719, 23709, 23717, 23734, 23728, 23718, 24087, 24084, 24089, 24360, { f: 3, c: 24354 }, 24404, 24450, 24446, 24445, 24542, 24549, 24621, 24614, 24601, 24626, 24587, 24628, 24586, 24599, 24627, 24602, 24606, 24620, 24610, 24589, 24592, 24622, 24595, 24593, 24588, 24585, 24604, 25108, 25149, 25261, 25268, 25297, 25278, 25258, 25270, 25290, 25262, 25267, 25263, 25275, 25257, 25264, 25272, 25917, 26024, 26043, 26121, 26108, 26116, 26130, 26120, 26107, 26115, 26123, 26125, 26117, 26109, 26129, 26128, 26358, 26378, 26501, 26476, 26510, 26514, 26486, 26491, 26520, 26502, 26500, 26484, 26509, 26508, 26490, 26527, 26513, 26521, 26499, 26493, 26497, { f: 2, c: 26488 }, 26516, 27429, 27520, 27518, 27614, 27677, 27795, 27884, 27883, 27886, 27865, 27830, 27860, 27821, 27879, 27831, 27856, 27842, 27834, 27843, 27846, 27885, 27890, 27858, 27869, 27828, 27786, 27805, 27776, 27870, 27840, 27952, 27853, 27847, 27824, 27897, 27855, 27881, 27857, 28820, 28824, 28805, 28819, 28806, 28804, 28817, 28822, 28802, 28826, 28803, 29290, 29398, 29387, 29400, 29385, 29404, 29394, 29396, 29402, 29388, 29393, 29604, 29601, 29613, 29606, 29602, 29600, 29612, 29597, 29917, 29928, { f: 2, c: 30015 }, 30014, 30092, 30104, 30383, 30451, 30449, 30448, 30453, 30712, 30716, 30713, 30715, 30714, 30711, 31042, 31039, 31173, 31352, 31355, 31483, 31861, 31997, 32821, 32911, 32942, 32931, 32952, 32949, 32941, 33312, 33440, 33472, 33451, 33434, 33432, 33435, 33461, 33447, 33454, 33468, 33438, 33466, 33460, 33448, 33441, 33449, 33474, 33444, 33475, 33462, 33442, 34416, 34415, { f: 2, c: 34413 }, 35926, 36818, 36811, 36819, 36813, 36822, 36821, 36823, 37042, 37044, 37039, 37043, 37040, 38457, 38461, 38460, 38458, 38467, 20429, 20421, 20435, 20402, 20425, 20427, 20417, 20436, 20444, 20441, [20411, 60346], 20403, 20443, 20423, 20438, 20410, 20416, 20409, 20460, 21060, 21065, 21184, 21186, 21309, 21372, 21399, 21398, 21401, 21400, 21690, 21665, 21677, 21669, 21711, 21699, 33549, 21687, 21678, 21718, 21686, { f: 2, c: 21701 }, 21664, 21616, 21692, 21666, 21694, 21618, 21726, 21680, 22453, { f: 2, c: 22430 }, 22436, 22412, 22423, 22429, 22427, 22420, 22424, 22415, 22425, 22437, 22426, 22421, 22772, 22797, 22867, 23009, 23006, 23022, 23040, 23025, 23005, 23034, 23037, 23036, 23030, 23012, 23026, 23031, 23003, 23017, 23027, 23029, 23008, 23038, 23028, 23021, 23464, 23628, 23760, 23768, 23756, 23767, 23755, 23771, 23774, 23770, 23753, 23751, 23754, 23766, { f: 2, c: 23763 }, 23759, 23752, 23750, 23758, 23775, 23800, 24057, { f: 3, c: 24097 }, 24096, 24100, 24240, 24228, 24226, 24219, 24227, 24229, 24327, 24366, 24406, 24454, 24631, 24633, 24660, 24690, 24670, 24645, 24659, 24647, 24649, 24667, 24652, 24640, 24642, 24671, 24612, 24644, 24664, 24678, 24686, { f: 2, c: 25154 }, 25295, 25357, 25355, 25333, 25358, 25347, 25323, 25337, 25359, 25356, 25336, 25334, 25344, { f: 2, c: 25363 }, 25338, 25365, 25339, 25328, 25921, 25923, 26026, 26047, 26166, 26145, 26162, 26165, 26140, 26150, 26146, 26163, 26155, 26170, 26141, 26164, 26169, 26158, { f: 2, c: 26383 }, 26561, 26610, 26568, 26554, 26588, 26555, 26616, 26584, 26560, 26551, 26565, 26603, 26596, 26591, 26549, 26573, 26547, 26615, 26614, 26606, 26595, 26562, 26553, 26574, 26599, 26608, 26546, 26620, 26566, 26605, 26572, 26542, 26598, 26587, 26618, { f: 2, c: 26569 }, 26563, 26602, 26571, 27432, 27522, 27524, 27574, 27606, 27608, 27616, { f: 2, c: 27680 }, 27944, 27956, 27949, 27935, 27964, 27967, 27922, 27914, 27866, 27955, 27908, 27929, 27962, 27930, 27921, 27904, 27933, 27970, 27905, 27928, 27959, 27907, 27919, 27968, 27911, 27936, 27948, 27912, 27938, 27913, 27920, 28855, 28831, 28862, 28849, 28848, 28833, { f: 2, c: 28852 }, 28841, 29249, { f: 2, c: 29257 }, 29292, 29296, 29299, 29294, 29386, 29412, 29416, 29419, 29407, 29418, 29414, 29411, 29573, 29644, 29634, 29640, 29637, 29625, 29622, 29621, 29620, 29675, 29631, 29639, 29630, 29635, 29638, 29624, 29643, 29932, 29934, 29998, { f: 2, c: 30023 }, 30119, 30122, 30329, 30404, 30472, { f: 3, c: 30467 }, 30474, 30455, 30459, 30458, { f: 2, c: 30695 }, 30726, { f: 2, c: 30737 }, 30725, 30736, 30735, 30734, [30729, 58095], 30723, 30739, 31050, 31052, 31051, 31045, 31044, 31189, 31181, 31183, 31190, 31182, 31360, 31358, 31441, { f: 2, c: 31488 }, 31866, { f: 2, c: 31864 }, { f: 3, c: 31871 }, 32003, 32008, 32001, 32600, 32657, 32653, 32702, 32775, { f: 2, c: 32782 }, 32788, 32823, 32984, 32967, 32992, 32977, 32968, 32962, 32976, 32965, 32995, 32985, 32988, 32970, 32981, 32969, 32975, 32983, 32998, 32973, 33279, 33313, 33428, 33497, 33534, 33529, 33543, 33512, 33536, 33493, 33594, 33515, 33494, 33524, 33516, 33505, 33522, 33525, 33548, 33531, 33526, 33520, 33514, 33508, 33504, 33530, 33523, 33517, 34423, 34420, 34428, 34419, 34881, 34894, 34919, 34922, 34921, 35283, 35332, 35335, 36210, 36835, 36833, 36846, 36832, 37105, 37053, 37055, 37077, 37061, 37054, 37063, 37067, 37064, [37332, 60294], 37331, 38484, 38479, 38481, 38483, 38474, 38478, 20510, 20485, 20487, 20499, 20514, 20528, 20507, 20469, 20468, 20531, 20535, 20524, { f: 2, c: 20470 }, 20503, 20508, 20512, 20519, 20533, 20527, 20529, 20494, 20826, 20884, 20883, 20938, { f: 2, c: 20932 }, 20936, 20942, 21089, 21082, 21074, { f: 2, c: 21086 }, 21077, 21090, 21197, 21262, 21406, 21798, 21730, 21783, 21778, 21735, 21747, 21732, 21786, 21759, 21764, 21768, 21739, 21777, 21765, 21745, 21770, 21755, { f: 2, c: 21751 }, 21728, 21774, 21763, 21771, { f: 2, c: 22273 }, 22476, 22578, 22485, 22482, 22458, 22470, 22461, 22460, 22456, 22454, 22463, 22471, 22480, 22457, 22465, 22798, 22858, 23065, 23062, { f: 2, c: 23085 }, 23061, 23055, 23063, 23050, 23070, 23091, 23404, 23463, 23469, 23468, 23555, 23638, 23636, 23788, 23807, 23790, 23793, 23799, 23808, 23801, 24105, 24104, 24232, 24238, 24234, 24236, 24371, 24368, 24423, 24669, 24666, 24679, 24641, 24738, 24712, 24704, 24722, 24705, 24733, 24707, 24725, 24731, 24727, 24711, 24732, 24718, 25113, 25158, 25330, 25360, 25430, 25388, { f: 2, c: 25412 }, 25398, 25411, 25572, 25401, 25419, 25418, 25404, 25385, 25409, 25396, 25432, 25428, 25433, 25389, 25415, 25395, 25434, 25425, 25400, 25431, 25408, 25416, 25930, 25926, 26054, { f: 2, c: 26051 }, 26050, 26186, 26207, 26183, 26193, { f: 2, c: 26386 }, 26655, 26650, 26697, { f: 2, c: 26674 }, 26683, 26699, 26703, 26646, 26673, 26652, 26677, 26667, 26669, 26671, 26702, 26692, 26676, 26653, 26642, 26644, 26662, 26664, 26670, 26701, 26682, 26661, 26656, 27436, 27439, 27437, 27441, 27444, 27501, 32898, 27528, 27622, 27620, 27624, 27619, 27618, 27623, 27685, 28026, { f: 2, c: 28003 }, 28022, 27917, 28001, 28050, 27992, 28002, 28013, 28015, 28049, 28045, 28143, 28031, 28038, 27998, [28007, 59078], 28e3, 28055, 28016, 28028, 27999, 28034, 28056, 27951, 28008, 28043, 28030, 28032, 28036, 27926, 28035, 28027, 28029, 28021, 28048, 28892, 28883, 28881, 28893, 28875, 32569, 28898, 28887, 28882, 28894, 28896, 28884, 28877, { f: 3, c: 28869 }, 28890, 28878, 28897, 29250, 29304, 29303, 29302, 29440, 29434, 29428, 29438, 29430, 29427, 29435, 29441, 29651, 29657, 29669, 29654, 29628, 29671, 29667, 29673, 29660, 29650, 29659, 29652, 29661, 29658, { f: 2, c: 29655 }, 29672, { f: 2, c: 29918 }, { f: 2, c: 29940 }, 29985, 30043, 30047, 30128, 30145, 30139, 30148, 30144, 30143, 30134, 30138, 30346, 30409, 30493, 30491, 30480, 30483, 30482, 30499, 30481, 30485, { f: 2, c: 30489 }, 30498, 30503, 30755, 30764, 30754, 30773, 30767, 30760, 30766, 30763, 30753, 30761, 30771, 30762, 30769, 31060, 31067, 31055, 31068, 31059, 31058, 31057, { f: 2, c: 31211 }, 31200, 31214, 31213, 31210, 31196, 31198, 31197, 31366, 31369, 31365, { f: 2, c: 31371 }, 31370, 31367, 31448, 31504, 31492, 31507, 31493, 31503, 31496, 31498, 31502, 31497, 31506, 31876, 31889, 31882, 31884, 31880, 31885, 31877, 32030, 32029, 32017, 32014, 32024, 32022, 32019, 32031, 32018, 32015, 32012, 32604, 32609, 32606, 32608, 32605, 32603, 32662, 32658, 32707, 32706, 32704, 32790, 32830, 32825, 33018, 33010, 33017, 33013, 33025, 33019, 33024, 33281, 33327, 33317, 33587, 33581, 33604, 33561, 33617, 33573, 33622, 33599, 33601, 33574, 33564, 33570, 33602, 33614, 33563, 33578, 33544, 33596, 33613, 33558, 33572, 33568, 33591, 33583, 33577, 33607, 33605, 33612, 33619, 33566, 33580, 33611, 33575, 33608, 34387, 34386, 34466, 34472, 34454, 34445, 34449, 34462, 34439, 34455, 34438, 34443, 34458, 34437, 34469, 34457, 34465, 34471, 34453, 34456, 34446, 34461, 34448, 34452, { f: 2, c: 34883 }, 34925, { f: 2, c: 34933 }, 34930, 34944, 34929, 34943, 34927, 34947, 34942, 34932, 34940, 35346, 35911, 35927, 35963, 36004, 36003, 36214, 36216, 36277, 36279, 36278, 36561, 36563, 36862, 36853, 36866, 36863, 36859, 36868, 36860, 36854, 37078, 37088, { f: 2, c: 37081 }, 37091, 37087, 37093, 37080, 37083, 37079, 37084, 37092, 37200, { f: 2, c: 37198 }, 37333, 37346, 37338, 38492, 38495, 38588, 39139, [12221, 39647], [12223, 39727], 20095, 20592, 20586, 20577, 20574, 20576, 20563, 20555, 20573, 20594, 20552, 20557, 20545, 20571, 20554, 20578, 20501, 20549, 20575, 20585, 20587, { f: 2, c: 20579 }, 20550, 20544, 20590, 20595, 20567, 20561, 20944, 21099, 21101, 21100, 21102, 21206, 21203, 21293, 21404, { f: 2, c: 21877 }, 21820, 21837, 21840, 21812, 21802, 21841, 21858, 21814, 21813, 21808, 21842, 21829, 21772, 21810, 21861, 21838, 21817, 21832, 21805, 21819, 21824, 21835, 22282, 22279, 22523, 22548, 22498, 22518, 22492, 22516, 22528, 22509, 22525, 22536, 22520, 22539, 22515, 22479, 22535, 22510, 22499, 22514, 22501, 22508, 22497, 22542, 22524, 22544, 22503, 22529, 22540, 22513, 22505, 22512, 22541, 22532, 22876, 23136, 23128, 23125, [23143, 60437], 23134, 23096, 23093, 23149, 23120, 23135, 23141, 23148, 23123, 23140, 23127, 23107, 23133, 23122, 23108, 23131, 23112, 23182, 23102, 23117, 23097, 23116, 23152, 23145, 23111, 23121, 23126, 23106, 23132, 23410, 23406, 23489, 23488, 23641, 23838, 23819, 23837, 23834, 23840, 23820, 23848, 23821, 23846, 23845, 23823, 23856, 23826, 23843, 23839, 23854, 24126, 24116, 24241, 24244, 24249, { f: 2, c: 24242 }, 24374, 24376, 24475, 24470, 24479, 24714, 24720, 24710, 24766, 24752, 24762, { f: 2, c: 24787 }, 24783, 24804, 24793, 24797, 24776, 24753, 24795, 24759, 24778, 24767, 24771, 24781, 24768, 25394, 25445, 25482, 25474, 25469, 25533, 25502, 25517, 25501, 25495, 25515, 25486, 25455, 25479, 25488, 25454, 25519, 25461, 25500, 25453, 25518, 25468, 25508, 25403, 25503, 25464, 25477, 25473, 25489, 25485, 25456, 25939, 26061, 26213, 26209, 26203, 26201, 26204, 26210, 26392, 26745, 26759, 26768, 26780, { f: 2, c: 26733 }, 26798, 26795, 26966, 26735, 26787, 26796, 26793, 26741, 26740, 26802, 26767, 26743, 26770, 26748, 26731, 26738, 26794, 26752, 26737, 26750, 26779, 26774, 26763, 26784, 26761, 26788, 26744, 26747, 26769, 26764, 26762, 26749, 27446, 27443, { f: 2, c: 27447 }, 27537, 27535, { f: 2, c: 27533 }, 27532, 27690, 28096, 28075, 28084, 28083, 28276, 28076, 28137, 28130, 28087, 28150, 28116, 28160, 28104, 28128, 28127, 28118, 28094, 28133, { f: 2, c: 28124 }, 28123, 28148, 28106, 28093, 28141, 28144, 28090, 28117, 28098, 28111, 28105, 28112, 28146, 28115, 28157, 28119, 28109, 28131, 28091, 28922, 28941, 28919, 28951, 28916, 28940, 28912, 28932, 28915, 28944, 28924, 28927, 28934, 28947, 28928, 28920, 28918, 28939, 28930, 28942, 29310, { f: 2, c: 29307 }, 29311, 29469, 29463, 29447, 29457, 29464, 29450, 29448, 29439, 29455, 29470, 29576, 29686, 29688, 29685, 29700, 29697, 29693, 29703, 29696, 29690, 29692, 29695, 29708, 29707, 29684, 29704, 30052, 30051, 30158, 30162, 30159, { f: 2, c: 30155 }, 30161, 30160, 30351, 30345, 30419, 30521, 30511, 30509, { f: 2, c: 30513 }, 30516, 30515, 30525, 30501, 30523, 30517, 30792, 30802, 30793, 30797, 30794, 30796, 30758, 30789, 30800, 31076, 31079, { f: 2, c: 31081 }, 31075, 31083, 31073, 31163, 31226, 31224, { f: 2, c: 31222 }, 31375, 31380, 31376, 31541, 31547, 31540, 31525, 31536, 31522, 31524, 31539, 31512, 31530, 31517, 31537, 31531, 31533, 31535, 31538, 31544, 31514, 31523, 31892, 31896, 31894, 31907, 32053, 32061, 32056, 32054, 32058, 32069, 32044, 32041, 32065, 32071, { f: 2, c: 32062 }, 32074, 32059, 32040, 32611, 32661, { f: 2, c: 32668 }, 32667, { f: 2, c: 32714 }, 32717, { f: 2, c: 32720 }, 32711, 32719, 32713, 32799, 32798, 32795, 32839, 32835, 32840, 33048, 33061, 33049, 33051, 33069, 33055, 33068, 33054, 33057, 33045, 33063, 33053, 33058, 33297, 33336, 33331, 33338, 33332, 33330, 33396, 33680, 33699, 33704, 33677, 33658, 33651, 33700, 33652, 33679, 33665, 33685, 33689, 33653, 33684, 33705, 33661, 33667, 33676, 33693, 33691, 33706, 33675, 33662, 33701, 33711, 33672, 33687, 33712, 33663, 33702, 33671, 33710, 33654, 34393, 34390, 34495, 34487, 34498, 34497, 34501, 34490, 34480, 34504, 34489, 34483, 34488, 34508, 34484, { f: 2, c: 34491 }, 34499, { f: 2, c: 34493 }, 34898, 34953, 34965, 34984, 34978, 34986, 34970, 34961, 34977, 34975, 34968, 34983, 34969, 34971, 34967, 34980, 34988, 34956, 34963, 34958, 35202, 35286, 35289, 35285, 35376, 35367, 35372, 35358, 35897, 35899, { f: 2, c: 35932 }, 35965, 36005, 36221, 36219, 36217, 36284, 36290, 36281, 36287, 36289, 36568, 36574, 36573, 36572, 36567, { f: 2, c: 36576 }, 36900, 36875, 36881, 36892, 36876, 36897, 37103, 37098, 37104, 37108, { f: 2, c: 37106 }, 37076, { f: 2, c: 37099 }, 37097, 37206, 37208, 37210, 37203, 37205, 37356, 37364, 37361, 37363, 37368, 37348, 37369, { f: 2, c: 37354 }, 37367, 37352, 37358, 38266, 38278, 38280, 38524, 38509, 38507, 38513, 38511, 38591, 38762, 38916, 39141, 39319, 20635, 20629, 20628, 20638, 20619, 20643, 20611, 20620, 20622, 20637, 20584, 20636, 20626, 20610, 20615, 20831, 20948, 21266, 21265, 21412, 21415, 21905, 21928, 21925, 21933, 21879, 22085, 21922, 21907, 21896, 21903, 21941, 21889, 21923, 21906, 21924, 21885, 21900, 21926, 21887, 21909, 21921, 21902, 22284, 22569, 22583, 22553, 22558, 22567, 22563, 22568, 22517, 22600, 22565, 22556, 22555, 22579, 22591, 22582, 22574, 22585, 22584, 22573, 22572, 22587, 22881, 23215, 23188, 23199, 23162, 23202, 23198, 23160, 23206, 23164, 23205, 23212, 23189, 23214, 23095, 23172, 23178, 23191, 23171, 23179, 23209, 23163, 23165, 23180, 23196, 23183, 23187, 23197, 23530, 23501, 23499, 23508, 23505, 23498, 23502, 23564, 23600, 23863, 23875, 23915, 23873, 23883, 23871, 23861, 23889, 23886, 23893, 23859, 23866, 23890, 23869, 23857, 23897, 23874, 23865, 23881, 23864, 23868, 23858, 23862, 23872, 23877, 24132, 24129, [24408, 57673], 24486, 24485, 24491, 24777, 24761, 24780, 24802, 24782, 24772, 24852, 24818, 24842, 24854, 24837, 24821, 24851, 24824, 24828, 24830, 24769, 24835, 24856, 24861, 24848, 24831, 24836, 24843, 25162, 25492, 25521, 25520, 25550, 25573, 25576, 25583, 25539, 25757, 25587, 25546, 25568, 25590, 25557, 25586, 25589, 25697, 25567, 25534, 25565, 25564, 25540, 25560, 25555, 25538, 25543, 25548, 25547, 25544, 25584, 25559, 25561, 25906, 25959, 25962, 25956, 25948, 25960, 25957, 25996, { f: 2, c: 26013 }, 26030, 26064, 26066, 26236, 26220, 26235, 26240, 26225, 26233, 26218, 26226, 26369, 26892, 26835, 26884, 26844, 26922, 26860, 26858, 26865, 26895, 26838, 26871, 26859, 26852, 26870, 26899, 26896, 26867, 26849, 26887, 26828, 26888, 26992, 26804, 26897, 26863, 26822, 26900, 26872, 26832, 26877, 26876, 26856, 26891, 26890, 26903, 26830, 26824, { f: 2, c: 26845 }, 26854, 26868, 26833, 26886, 26836, 26857, 26901, 26917, 26823, 27449, 27451, 27455, 27452, 27540, 27543, 27545, 27541, 27581, 27632, { f: 2, c: 27634 }, 27696, 28156, { f: 2, c: 28230 }, 28191, 28233, 28296, { f: 2, c: 28220 }, 28229, 28258, 28203, 28223, 28225, 28253, 28275, 28188, 28211, 28235, 28224, 28241, 28219, 28163, 28206, 28254, 28264, 28252, 28257, 28209, 28200, 28256, 28273, 28267, 28217, 28194, 28208, 28243, 28261, 28199, 28280, 28260, 28279, 28245, 28281, 28242, 28262, { f: 2, c: 28213 }, 28250, 28960, 28958, 28975, 28923, 28974, 28977, 28963, 28965, 28962, 28978, 28959, 28968, 28986, 28955, 29259, 29274, { f: 2, c: 29320 }, 29318, 29317, 29323, 29458, 29451, 29488, 29474, 29489, 29491, 29479, 29490, 29485, 29478, 29475, 29493, 29452, 29742, 29740, 29744, 29739, 29718, 29722, 29729, 29741, 29745, 29732, 29731, 29725, 29737, 29728, 29746, 29947, 29999, 30063, 30060, 30183, 30170, 30177, 30182, 30173, 30175, 30180, 30167, 30357, 30354, 30426, { f: 2, c: 30534 }, 30532, 30541, 30533, 30538, 30542, { f: 2, c: 30539 }, 30686, 30700, 30816, { f: 2, c: 30820 }, 30812, 30829, 30833, 30826, 30830, 30832, 30825, 30824, 30814, 30818, 31092, 31091, 31090, 31088, 31234, 31242, 31235, 31244, 31236, 31385, 31462, 31460, 31562, 31559, 31556, 31560, 31564, 31566, 31552, 31576, 31557, 31906, 31902, 31912, 31905, 32088, 32111, 32099, 32083, 32086, 32103, 32106, 32079, 32109, 32092, 32107, 32082, 32084, 32105, 32081, 32095, 32078, { f: 2, c: 32574 }, { f: 2, c: 32613 }, 32674, { f: 2, c: 32672 }, 32727, 32849, { f: 2, c: 32847 }, 33022, 32980, 33091, 33098, 33106, 33103, 33095, 33085, 33101, 33082, 33254, 33262, { f: 3, c: 33271 }, 33284, { f: 2, c: 33340 }, 33343, 33397, 33595, [33743, 60382], 33785, 33827, 33728, 33768, 33810, 33767, 33764, 33788, 33782, 33808, 33734, 33736, 33771, 33763, 33727, 33793, 33757, 33765, 33752, 33791, 33761, 33739, 33742, 33750, 33781, 33737, 33801, [33807, 58332], 33758, 33809, 33798, 33730, 33779, 33749, 33786, 33735, 33745, 33770, 33811, 33690, 33731, 33772, 33774, 33732, 33787, 33751, 33762, 33819, 33755, 33790, 34520, 34530, 34534, 34515, 34531, 34522, 34538, 34525, 34539, 34524, 34540, 34537, 34519, 34536, 34513, 34888, 34902, 34901, 35002, 35031, 35001, 35e3, 35008, 35006, 34998, 35004, 34999, 35005, 34994, 35073, 35017, 35221, 35224, 35223, 35293, { f: 2, c: 35290 }, 35406, 35405, 35385, 35417, 35392, { f: 2, c: 35415 }, { f: 2, c: 35396 }, 35410, 35400, 35409, 35402, 35404, 35407, 35935, 35969, 35968, 36026, 36030, 36016, 36025, 36021, 36228, 36224, 36233, 36312, 36307, 36301, 36295, 36310, 36316, 36303, 36309, 36313, 36296, 36311, 36293, 36591, 36599, 36602, 36601, 36582, 36590, 36581, 36597, { f: 2, c: 36583 }, 36598, 36587, 36593, 36588, 36596, 36585, 36909, 36916, 36911, 37126, 37164, [37124, 60367], 37119, 37116, 37128, 37113, 37115, 37121, 37120, 37127, 37125, 37123, 37217, 37220, 37215, 37218, 37216, 37377, 37386, 37413, 37379, 37402, 37414, 37391, 37388, 37376, 37394, 37375, 37373, 37382, 37380, 37415, 37378, 37404, 37412, 37401, 37399, 37381, 37398, 38267, 38285, 38284, 38288, 38535, 38526, { f: 2, c: 38536 }, 38531, 38528, 38594, 38600, 38595, 38641, 38640, 38764, 38768, 38766, 38919, 39081, 39147, 40166, [12235, 40697], { f: 2, c: 20099 }, 20150, 20669, 20671, 20678, 20654, 20676, 20682, 20660, 20680, 20674, 20656, 20673, 20666, 20657, 20683, 20681, 20662, 20664, 20951, 21114, 21112, { f: 2, c: 21115 }, 21955, 21979, 21964, 21968, 21963, 21962, 21981, [21952, 64013], 21972, 21956, 21993, 21951, 21970, 21901, 21967, 21973, 21986, 21974, 21960, 22002, 21965, 21977, 21954, 22292, 22611, 22632, 22628, 22607, 22605, 22601, 22639, 22613, 22606, 22621, 22617, 22629, 22619, 22589, 22627, 22641, 22780, 23239, 23236, 23243, 23226, 23224, 23217, 23221, 23216, 23231, 23240, 23227, 23238, 23223, 23232, 23242, 23220, 23222, 23245, 23225, 23184, 23510, { f: 2, c: 23512 }, 23583, 23603, 23921, 23907, 23882, 23909, 23922, 23916, 23902, 23912, 23911, 23906, 24048, 24143, 24142, 24138, 24141, 24139, 24261, 24268, 24262, 24267, 24263, 24384, 24495, 24493, 24823, { f: 2, c: 24905 }, 24875, 24901, 24886, 24882, 24878, 24902, 24879, 24911, 24873, 24896, 25120, 37224, 25123, 25125, 25124, 25541, 25585, 25579, 25616, 25618, 25609, 25632, 25636, 25651, 25667, 25631, 25621, 25624, 25657, 25655, { f: 2, c: 25634 }, 25612, 25638, 25648, 25640, 25665, 25653, 25647, 25610, 25626, 25664, 25637, 25639, 25611, 25575, 25627, 25646, 25633, 25614, 25967, 26002, 26067, 26246, 26252, 26261, 26256, 26251, 26250, 26265, 26260, 26232, 26400, 26982, 26975, 26936, 26958, 26978, 26993, 26943, 26949, 26986, 26937, 26946, 26967, 26969, 27002, { f: 2, c: 26952 }, 26933, 26988, 26931, 26941, 26981, 26864, 27e3, 26932, 26985, 26944, 26991, 26948, 26998, 26968, 26945, 26996, 26956, 26939, 26955, 26935, 26972, 26959, 26961, 26930, 26962, 26927, 27003, 26940, 27462, 27461, 27459, 27458, 27464, 27457, 27547, { f: 2, c: 27643 }, 27641, { f: 2, c: 27639 }, 28315, 28374, 28360, 28303, 28352, 28319, { f: 2, c: 28307 }, 28320, 28337, 28345, 28358, 28370, 28349, 28353, 28318, 28361, 28343, 28336, 28365, 28326, 28367, 28338, 28350, 28355, 28380, 28376, 28313, 28306, 28302, 28301, 28324, 28321, 28351, 28339, 28368, 28362, 28311, 28334, 28323, 28999, 29012, 29010, 29027, 29024, 28993, 29021, [29026, 61080], 29042, 29048, 29034, 29025, 28994, 29016, 28995, 29003, 29040, 29023, 29008, 29011, 28996, 29005, 29018, 29263, 29325, 29324, 29329, 29328, 29326, 29500, 29506, 29499, 29498, 29504, 29514, 29513, 29764, { f: 2, c: 29770 }, 29778, 29777, 29783, 29760, { f: 2, c: 29775 }, 29774, 29762, 29766, 29773, 29780, 29921, 29951, 29950, 29949, 29981, 30073, 30071, 27011, 30191, 30223, 30211, 30199, 30206, 30204, [30201, 60782], 30200, 30224, 30203, 30198, 30189, 30197, 30205, 30361, 30389, 30429, 30549, { f: 2, c: 30559 }, 30546, 30550, 30554, 30569, 30567, 30548, 30553, 30573, 30688, 30855, 30874, 30868, 30863, 30852, 30869, { f: 2, c: 30853 }, 30881, 30851, 30841, 30873, 30848, 30870, 30843, 31100, 31106, 31101, 31097, 31249, { f: 2, c: 31256 }, 31250, 31255, 31253, 31266, 31251, 31259, 31248, 31395, 31394, 31390, 31467, 31590, 31588, 31597, 31604, 31593, 31602, 31589, 31603, 31601, 31600, 31585, 31608, 31606, 31587, 31922, 31924, 31919, 32136, 32134, 32128, 32141, 32127, 32133, 32122, 32142, 32123, 32131, 32124, 32140, 32148, 32132, 32125, 32146, 32621, 32619, { f: 2, c: 32615 }, 32620, 32678, 32677, 32679, { f: 2, c: 32731 }, 32801, 33124, 33120, 33143, 33116, 33129, 33115, 33122, 33138, 26401, 33118, 33142, 33127, 33135, 33092, 33121, 33309, 33353, 33348, 33344, 33346, 33349, 34033, 33855, 33878, 33910, 33913, 33935, 33933, 33893, 33873, 33856, 33926, 33895, 33840, 33869, 33917, 33882, 33881, 33908, 33907, 33885, 34055, 33886, 33847, 33850, 33844, 33914, 33859, 33912, 33842, 33861, 33833, 33753, 33867, 33839, 33858, 33837, 33887, 33904, 33849, 33870, 33868, 33874, 33903, 33989, 33934, 33851, 33863, 33846, 33843, 33896, 33918, 33860, 33835, 33888, 33876, 33902, 33872, 34571, 34564, 34551, 34572, 34554, 34518, 34549, 34637, 34552, 34574, 34569, 34561, 34550, 34573, 34565, 35030, 35019, { f: 2, c: 35021 }, 35038, 35035, 35034, 35020, 35024, 35205, 35227, 35295, 35301, 35300, 35297, 35296, 35298, 35292, 35302, 35446, 35462, 35455, 35425, 35391, 35447, 35458, 35460, 35445, 35459, 35457, 35444, 35450, 35900, 35915, 35914, 35941, 35940, 35942, 35974, { f: 2, c: 35972 }, 36044, { f: 2, c: 36200 }, 36241, 36236, { f: 2, c: 36238 }, 36237, { f: 2, c: 36243 }, 36240, 36242, 36336, 36320, 36332, 36337, 36334, 36304, 36329, 36323, 36322, 36327, 36338, 36331, 36340, 36614, 36607, 36609, 36608, 36613, { f: 2, c: 36615 }, 36610, [36619, 60507], 36946, 36927, 36932, 36937, 36925, 37136, 37133, 37135, 37137, 37142, 37140, 37131, 37134, { f: 2, c: 37230 }, 37448, 37458, 37424, 37434, 37478, 37427, 37477, 37470, 37507, 37422, 37450, 37446, 37485, 37484, 37455, 37472, 37479, 37487, 37430, 37473, 37488, 37425, 37460, 37475, 37456, 37490, 37454, 37459, 37452, 37462, 37426, 38303, 38300, 38302, 38299, { f: 2, c: 38546 }, 38545, 38551, 38606, 38650, 38653, 38648, 38645, 38771, { f: 2, c: 38775 }, 38770, 38927, { f: 2, c: 38925 }, 39084, 39158, 39161, 39343, 39346, 39344, 39349, 39597, 39595, 39771, 40170, 40173, 40167, 40576, [12236, 40701], 20710, 20692, 20695, 20712, 20723, 20699, 20714, 20701, 20708, 20691, 20716, 20720, 20719, 20707, 20704, 20952, { f: 2, c: 21120 }, 21225, 21227, 21296, 21420, 22055, 22037, 22028, 22034, 22012, 22031, 22044, 22017, 22035, 22018, 22010, 22045, 22020, 22015, 22009, 22665, 22652, 22672, 22680, 22662, 22657, 22655, 22644, 22667, 22650, 22663, 22673, 22670, 22646, 22658, 22664, 22651, 22676, 22671, 22782, 22891, 23260, 23278, 23269, 23253, 23274, 23258, 23277, 23275, 23283, 23266, 23264, 23259, 23276, 23262, 23261, 23257, 23272, 23263, 23415, 23520, 23523, 23651, 23938, 23936, 23933, 23942, 23930, 23937, 23927, 23946, 23945, 23944, 23934, 23932, 23949, 23929, 23935, { f: 2, c: 24152 }, 24147, 24280, 24273, 24279, 24270, 24284, 24277, 24281, 24274, 24276, 24388, 24387, 24431, 24502, 24876, 24872, 24897, 24926, 24945, 24947, { f: 2, c: 24914 }, 24946, 24940, 24960, 24948, 24916, 24954, 24923, 24933, 24891, 24938, 24929, 24918, 25129, 25127, 25131, 25643, 25677, 25691, 25693, 25716, 25718, { f: 2, c: 25714 }, 25725, 25717, 25702, 25766, 25678, 25730, 25694, 25692, 25675, 25683, 25696, 25680, 25727, 25663, 25708, 25707, 25689, 25701, 25719, 25971, 26016, 26273, 26272, 26271, 26373, 26372, 26402, 27057, 27062, 27081, 27040, 27086, 27030, 27056, 27052, 27068, 27025, 27033, 27022, 27047, 27021, 27049, 27070, 27055, 27071, 27076, 27069, 27044, 27092, 27065, 27082, 27034, 27087, 27059, 27027, 27050, 27041, 27038, 27097, 27031, 27024, 27074, 27061, 27045, 27078, 27466, 27469, 27467, { f: 3, c: 27550 }, { f: 2, c: 27587 }, 27646, 28366, 28405, 28401, 28419, 28453, 28408, 28471, 28411, 28462, 28425, 28494, { f: 2, c: 28441 }, 28455, 28440, 28475, 28434, 28397, 28426, 28470, 28531, 28409, 28398, 28461, 28480, 28464, 28476, 28469, 28395, 28423, 28430, 28483, 28421, 28413, 28406, 28473, 28444, 28412, 28474, 28447, 28429, 28446, 28424, 28449, 29063, 29072, 29065, 29056, 29061, 29058, 29071, 29051, 29062, 29057, 29079, 29252, 29267, 29335, 29333, 29331, 29507, 29517, 29521, 29516, 29794, 29811, 29809, 29813, 29810, 29799, 29806, 29952, { f: 2, c: 29954 }, 30077, 30096, 30230, 30216, 30220, 30229, 30225, 30218, 30228, 30392, 30593, 30588, 30597, 30594, 30574, 30592, 30575, 30590, 30595, 30898, 30890, 30900, 30893, 30888, 30846, 30891, 30878, 30885, 30880, 30892, 30882, 30884, 31128, { f: 2, c: 31114 }, 31126, 31125, 31124, 31123, 31127, 31112, 31122, 31120, 31275, 31306, 31280, 31279, 31272, 31270, 31400, { f: 2, c: 31403 }, 31470, 31624, 31644, 31626, 31633, 31632, 31638, 31629, 31628, 31643, 31630, 31621, 31640, 21124, 31641, 31652, 31618, 31931, 31935, 31932, 31930, 32167, 32183, 32194, 32163, 32170, 32193, 32192, 32197, 32157, 32206, 32196, 32198, { f: 2, c: 32203 }, 32175, 32185, 32150, 32188, 32159, 32166, 32174, 32169, 32161, 32201, 32627, { f: 2, c: 32738 }, 32741, 32734, 32804, 32861, 32860, 33161, 33158, 33155, 33159, 33165, 33164, 33163, 33301, 33943, 33956, 33953, 33951, 33978, 33998, 33986, 33964, 33966, 33963, 33977, 33972, 33985, 33997, 33962, 33946, 33969, 34e3, 33949, 33959, 33979, 33954, 33940, 33991, 33996, 33947, 33961, 33967, [33960, 58327], 34006, 33944, 33974, 33999, 33952, 34007, 34004, 34002, 34011, 33968, 33937, 34401, 34611, 34595, 34600, 34667, 34624, 34606, 34590, 34593, 34585, 34587, 34627, 34604, 34625, 34622, 34630, 34592, 34610, 34602, 34605, 34620, 34578, 34618, 34609, 34613, 34626, { f: 2, c: 34598 }, 34616, 34596, 34586, 34608, 34577, 35063, 35047, { f: 2, c: 35057 }, 35066, 35070, 35054, 35068, 35062, 35067, 35056, 35052, 35051, 35229, 35233, 35231, 35230, 35305, 35307, 35304, 35499, 35481, 35467, 35474, 35471, 35478, 35901, { f: 2, c: 35944 }, 36053, 36047, 36055, 36246, 36361, 36354, 36351, 36365, 36349, 36362, 36355, 36359, 36358, 36357, 36350, 36352, 36356, { f: 2, c: 36624 }, 36622, 36621, 37155, 37148, 37152, 37154, 37151, 37149, 37146, 37156, 37153, 37147, 37242, 37234, 37241, 37235, 37541, 37540, 37494, 37531, 37498, 37536, 37524, 37546, 37517, 37542, 37530, 37547, 37497, 37527, 37503, 37539, 37614, 37518, 37506, 37525, 37538, 37501, 37512, 37537, 37514, 37510, 37516, 37529, 37543, 37502, 37511, 37545, 37533, 37515, 37421, 38558, 38561, 38655, 38744, 38781, 38778, 38782, 38787, 38784, 38786, 38779, 38788, 38785, 38783, 38862, 38861, 38934, { f: 2, c: 39085 }, 39170, 39168, 39175, 39325, 39324, 39363, 39353, 39355, 39354, 39362, 39357, 39367, 39601, 39651, 39655, { f: 2, c: 39742 }, { f: 2, c: 39776 }, 39775, { f: 2, c: 40177 }, 40181, 40615, 20735, 20739, 20784, 20728, { f: 2, c: 20742 }, 20726, 20734, { f: 2, c: 20747 }, 20733, 20746, { f: 2, c: 21131 }, 21233, 21231, 22088, 22082, 22092, 22069, 22081, 22090, 22089, 22086, 22104, 22106, 22080, 22067, 22077, 22060, 22078, 22072, 22058, 22074, 22298, 22699, 22685, 22705, 22688, 22691, 22703, 22700, 22693, 22689, 22783, 23295, 23284, 23293, 23287, 23286, 23299, 23288, 23298, 23289, 23297, 23303, 23301, 23311, 23655, 23961, 23959, 23967, 23954, 23970, 23955, 23957, 23968, 23964, 23969, 23962, 23966, 24169, 24157, 24160, 24156, 32243, 24283, 24286, 24289, 24393, 24498, 24971, 24963, 24953, 25009, 25008, 24994, 24969, 24987, 24979, 25007, 25005, 24991, 24978, 25002, 24993, 24973, 24934, 25011, 25133, 25710, 25712, 25750, 25760, 25733, 25751, 25756, 25743, 25739, 25738, 25740, 25763, 25759, 25704, 25777, 25752, 25974, 25978, 25977, 25979, { f: 2, c: 26034 }, 26293, 26288, 26281, 26290, 26295, 26282, 26287, 27136, 27142, 27159, 27109, 27128, 27157, 27121, 27108, 27168, 27135, 27116, 27106, 27163, 27165, 27134, 27175, 27122, 27118, 27156, 27127, 27111, 27200, 27144, 27110, 27131, 27149, 27132, 27115, 27145, 27140, 27160, 27173, 27151, 27126, 27174, 27143, 27124, 27158, 27473, 27557, 27555, 27554, 27558, 27649, 27648, 27647, 27650, 28481, 28454, 28542, 28551, 28614, 28562, 28557, 28553, 28556, 28514, 28495, 28549, 28506, 28566, 28534, 28524, 28546, 28501, 28530, 28498, 28496, 28503, 28564, 28563, 28509, 28416, 28513, 28523, 28541, 28519, 28560, 28499, 28555, 28521, 28543, 28565, 28515, 28535, 28522, 28539, 29106, 29103, 29083, 29104, 29088, 29082, 29097, 29109, 29085, 29093, 29086, 29092, 29089, 29098, 29084, 29095, 29107, 29336, 29338, 29528, 29522, { f: 3, c: 29534 }, 29533, 29531, 29537, 29530, 29529, 29538, 29831, { f: 2, c: 29833 }, 29830, 29825, 29821, 29829, 29832, 29820, [29817, 58868], 29960, 29959, 30078, 30245, 30238, 30233, 30237, 30236, 30243, 30234, 30248, 30235, { f: 3, c: 30364 }, 30363, 30605, 30607, 30601, 30600, 30925, 30907, 30927, 30924, 30929, 30926, 30932, 30920, { f: 2, c: 30915 }, 30921, 31130, 31137, 31136, 31132, 31138, [31131, 59175], 27510, 31289, 31410, 31412, 31411, 31671, 31691, 31678, 31660, 31694, 31663, 31673, 31690, 31669, 31941, 31944, 31948, 31947, 32247, 32219, 32234, 32231, 32215, 32225, 32259, 32250, 32230, 32246, 32241, 32240, 32238, 32223, 32630, 32684, 32688, 32685, 32749, 32747, 32746, 32748, 32742, 32744, 32868, 32871, 33187, 33183, 33182, 33173, 33186, 33177, 33175, 33302, 33359, 33363, 33362, 33360, 33358, 33361, 34084, 34107, 34063, 34048, 34089, 34062, 34057, 34061, 34079, 34058, 34087, 34076, 34043, 34091, 34042, 34056, 34060, 34036, 34090, 34034, 34069, 34039, 34027, 34035, 34044, 34066, 34026, 34025, 34070, 34046, 34088, 34077, 34094, 34050, 34045, 34078, 34038, 34097, 34086, { f: 2, c: 34023 }, 34032, 34031, 34041, 34072, 34080, 34096, 34059, 34073, 34095, 34402, 34646, { f: 2, c: 34659 }, 34679, 34785, 34675, 34648, 34644, 34651, 34642, 34657, 34650, 34641, 34654, 34669, 34666, 34640, 34638, 34655, 34653, 34671, 34668, 34682, 34670, 34652, 34661, 34639, 34683, 34677, 34658, 34663, 34665, 34906, 35077, 35084, 35092, 35083, { f: 3, c: 35095 }, 35078, 35094, 35089, 35086, 35081, 35234, 35236, 35235, 35309, 35312, 35308, 35535, 35526, 35512, 35539, 35537, { f: 2, c: 35540 }, 35515, 35543, 35518, 35520, 35525, 35544, 35523, 35514, 35517, 35545, 35902, 35917, 35983, 36069, 36063, 36057, 36072, 36058, 36061, 36071, 36256, 36252, 36257, 36251, 36384, 36387, 36389, 36388, 36398, 36373, 36379, 36374, 36369, 36377, { f: 2, c: 36390 }, 36372, 36370, 36376, 36371, 36380, 36375, 36378, 36652, 36644, 36632, 36634, 36640, 36643, { f: 2, c: 36630 }, 36979, 36976, 36975, 36967, 36971, 37167, 37163, { f: 2, c: 37161 }, 37170, 37158, 37166, { f: 2, c: 37253 }, 37258, { f: 2, c: 37249 }, 37252, 37248, 37584, { f: 2, c: 37571 }, 37568, 37593, 37558, 37583, 37617, 37599, 37592, 37609, 37591, 37597, 37580, 37615, 37570, 37608, 37578, 37576, 37582, 37606, 37581, 37589, 37577, 37600, 37598, 37607, 37585, 37587, 37557, 37601, 37669, 37574, 37556, 38268, 38316, 38315, 38318, 38320, 38564, 38562, 38611, 38661, 38664, 38658, 38746, 38794, 38798, 38792, 38864, 38863, 38942, 38941, 38950, 38953, 38952, 38944, 38939, 38951, 39090, 39176, 39162, 39185, 39188, { f: 2, c: 39190 }, 39189, 39388, 39373, 39375, { f: 2, c: 39379 }, 39374, 39369, [39382, 60270], 39384, 39371, 39383, 39372, 39603, 39660, 39659, 39667, 39666, 39665, 39750, 39747, 39783, 39796, 39793, 39782, 39798, 39797, 39792, 39784, 39780, 39788, 40188, 40186, 40189, 40191, 40183, 40199, 40192, 40185, 40187, 40200, 40197, 40196, 40579, 40659, { f: 2, c: 40719 }, 20764, 20755, 20759, 20762, 20753, 20958, 21300, 21473, 22128, 22112, 22126, 22131, 22118, 22115, 22125, 22130, 22110, 22135, 22300, 22299, 22728, 22717, 22729, 22719, 22714, 22722, 22716, 22726, 23319, 23321, 23323, 23329, 23316, 23315, 23312, 23318, [23336, 59539], 23322, 23328, 23326, 23535, 23980, 23985, 23977, 23975, 23989, 23984, 23982, 23978, 23976, 23986, 23981, 23983, 23988, { f: 2, c: 24167 }, 24166, 24175, 24297, 24295, 24294, 24296, 24293, 24395, 24508, 24507, 24989, 25e3, 24982, 25029, 25012, 25030, 25025, 25036, 25018, 25023, 25016, 24972, 25815, 25814, 25808, 25807, 25801, 25789, 25737, 25795, 25819, 25843, 25817, 25907, 25983, 25980, 26018, 26312, 26302, 26304, { f: 2, c: 26314 }, 26319, 26301, 26299, 26298, 26316, 26403, 27188, 27238, 27209, 27239, 27186, 27240, 27198, 27229, 27245, 27254, 27227, 27217, 27176, 27226, 27195, 27199, 27201, 27242, 27236, 27216, 27215, 27220, 27247, 27241, 27232, 27196, 27230, 27222, 27221, { f: 2, c: 27213 }, 27206, 27477, 27476, 27478, 27559, { f: 2, c: 27562 }, 27592, 27591, 27652, 27651, 27654, 28589, 28619, 28579, 28615, 28604, 28622, 28616, 28510, 28612, 28605, 28574, 28618, 28584, 28676, 28581, 28590, 28602, 28588, 28586, 28623, 28607, 28600, 28578, 28617, 28587, 28621, 28591, 28594, 28592, 29125, 29122, 29119, 29112, 29142, { f: 2, c: 29120 }, 29131, 29140, 29130, 29127, 29135, 29117, 29144, 29116, 29126, { f: 2, c: 29146 }, { f: 2, c: 29341 }, 29545, { f: 2, c: 29542 }, 29548, 29541, 29547, 29546, 29823, 29850, 29856, 29844, 29842, 29845, 29857, 29963, 30080, 30255, 30253, 30257, 30269, 30259, 30268, 30261, 30258, 30256, 30395, 30438, 30618, 30621, 30625, 30620, 30619, { f: 2, c: 30626 }, 30613, 30617, 30615, 30941, 30953, 30949, 30954, 30942, 30947, 30939, { f: 2, c: 30945 }, 30957, { f: 2, c: 30943 }, 31140, 31300, 31304, 31303, 31414, 31416, 31413, 31409, 31415, 31710, 31715, 31719, 31709, 31701, 31717, 31706, 31720, 31737, 31700, 31722, 31714, 31708, 31723, 31704, 31711, 31954, 31956, 31959, { f: 2, c: 31952 }, 32274, 32289, 32279, 32268, { f: 2, c: 32287 }, 32275, 32270, 32284, 32277, 32282, 32290, 32267, 32271, 32278, 32269, 32276, 32293, 32292, 32579, { f: 2, c: 32635 }, 32634, 32689, 32751, 32810, 32809, 32876, 33201, 33190, 33198, 33209, 33205, 33195, 33200, 33196, 33204, 33202, 33207, 33191, 33266, { f: 3, c: 33365 }, 34134, 34117, 34155, 34125, 34131, 34145, 34136, 34112, 34118, 34148, 34113, 34146, 34116, 34129, 34119, 34147, 34110, 34139, 34161, 34126, 34158, 34165, 34133, 34151, 34144, 34188, 34150, 34141, 34132, 34149, 34156, 34403, 34405, 34404, 34724, 34715, 34703, 34711, 34707, 34706, 34696, 34689, 34710, 34712, 34681, 34695, 34723, 34693, { f: 2, c: 34704 }, 34717, 34692, 34708, 34716, 34714, 34697, 35102, 35110, 35120, { f: 2, c: 35117 }, 35111, 35121, 35106, 35113, 35107, 35119, 35116, 35103, 35313, 35552, 35554, 35570, { f: 2, c: 35572 }, 35549, 35604, 35556, 35551, 35568, 35528, 35550, 35553, 35560, 35583, 35567, 35579, { f: 2, c: 35985 }, 35984, 36085, 36078, 36081, 36080, 36083, 36204, 36206, 36261, 36263, 36403, 36414, 36408, 36416, 36421, 36406, { f: 2, c: 36412 }, 36417, 36400, 36415, 36541, [36662, 60329], 36654, 36661, 36658, 36665, 36663, 36660, 36982, 36985, 36987, 36998, 37114, 37171, { f: 2, c: 37173 }, 37267, { f: 2, c: 37264 }, 37261, 37263, 37671, 37662, 37640, 37663, 37638, 37647, 37754, 37688, 37692, 37659, 37667, 37650, 37633, 37702, 37677, 37646, 37645, 37579, 37661, 37626, 37651, 37625, 37623, 37684, 37634, 37668, 37631, 37673, 37689, 37685, 37674, 37652, 37644, 37643, 37630, 37641, 37632, 37627, 37654, 38332, 38349, 38334, { f: 2, c: 38329 }, 38326, 38335, 38325, 38333, 38569, 38612, 38667, 38674, 38672, 38809, 38807, 38804, 38896, 38904, 38965, 38959, 38962, 39204, 39199, 39207, 39209, 39326, 39406, 39404, 39397, 39396, 39408, 39395, 39402, 39401, 39399, 39609, 39615, 39604, 39611, 39670, 39674, 39673, 39671, 39731, 39808, 39813, 39815, 39804, 39806, 39803, 39810, 39827, 39826, 39824, 39802, 39829, 39805, 39816, 40229, 40215, 40224, 40222, 40212, 40233, 40221, 40216, 40226, 40208, 40217, 40223, 40584, { f: 2, c: 40582 }, 40622, 40621, { f: 2, c: 40661 }, 40698, 40722, 40765, 20774, 20773, 20770, 20772, 20768, 20777, 21236, 22163, { f: 2, c: 22156 }, 22150, 22148, 22147, 22142, 22146, 22143, 22145, 22742, 22740, 22735, 22738, 23341, 23333, 23346, 23331, 23340, 23335, 23334, 23343, 23342, 23419, { f: 2, c: 23537 }, 23991, 24172, 24170, 24510, 25027, 25013, 25020, 25063, 25056, 25061, 25060, 25064, 25054, 25839, 25833, 25827, 25835, 25828, 25832, 25985, 25984, 26038, 26074, 26322, 27277, 27286, 27265, 27301, 27273, 27295, 27291, 27297, 27294, 27271, 27283, 27278, 27285, 27267, 27304, 27300, 27281, 27263, 27302, 27290, 27269, 27276, 27282, 27483, 27565, 27657, 28620, 28585, 28660, 28628, 28643, 28636, 28653, 28647, 28646, 28638, 28658, 28637, 28642, 28648, 29153, 29169, 29160, 29170, 29156, 29168, 29154, 29555, { f: 2, c: 29550 }, 29847, 29874, 29867, 29840, 29866, 29869, 29873, 29861, 29871, { f: 3, c: 29968 }, 29967, 30084, 30275, { f: 2, c: 30280 }, 30279, 30372, 30441, 30645, 30635, 30642, 30647, 30646, 30644, 30641, 30632, 30704, 30963, 30973, 30978, { f: 2, c: 30971 }, 30975, 30962, 30981, 30969, 30974, 30980, 31147, 31144, 31324, 31323, 31318, 31320, 31316, 31322, 31422, { f: 2, c: 31424 }, 31749, 31759, 31730, 31744, 31743, 31739, 31758, 31732, 31755, 31731, 31746, 31753, 31747, 31745, 31736, 31741, [31750, 58176], { f: 2, c: 31728 }, 31760, 31754, 31976, 32301, 32316, 32322, 32307, 38984, 32312, 32298, 32329, 32320, 32327, 32297, 32332, 32304, 32315, 32310, 32324, 32314, 32581, 32639, 32638, 32637, 32756, 32754, 32812, 33211, 33220, 33228, 33226, 33221, 33223, 33212, 33257, 33371, 33370, 33372, 34179, 34176, 34191, 34215, 34197, 34208, 34187, 34211, 34171, 34212, 34202, 34206, 34167, 34172, 34185, 34209, 34170, 34168, 34135, 34190, 34198, 34182, 34189, 34201, 34205, 34177, 34210, 34178, 34184, 34181, 34169, 34166, 34200, 34192, 34207, 34408, 34750, 34730, 34733, 34757, 34736, 34732, 34745, 34741, 34748, 34734, 34761, 34755, 34754, 34764, 34743, 34735, 34756, 34762, 34740, 34742, 34751, 34744, 34749, 34782, 34738, 35125, 35123, 35132, 35134, 35137, 35154, 35127, 35138, 35245, 35247, 35246, { f: 2, c: 35314 }, 35614, 35608, 35606, 35601, 35589, 35595, 35618, 35599, 35602, 35605, 35591, 35597, 35592, 35590, 35612, 35603, 35610, 35919, 35952, 35954, 35953, 35951, 35989, 35988, 36089, 36207, 36430, 36429, 36435, 36432, 36428, 36423, 36675, 36672, 36997, 36990, 37176, 37274, 37282, 37275, 37273, 37279, 37281, 37277, 37280, 37793, 37763, 37807, 37732, 37718, 37703, 37756, 37720, 37724, 37750, 37705, { f: 2, c: 37712 }, 37728, 37741, 37775, 37708, 37738, 37753, 37719, 37717, 37714, 37711, 37745, 37751, 37755, 37729, 37726, 37731, 37735, 37710, 37721, 38343, 38336, 38345, 38339, 38341, 38327, 38574, 38576, 38572, 38688, 38687, 38680, 38685, 38681, 38810, 38817, 38812, 38814, 38813, 38869, 38868, 38897, 38977, 38980, 38986, 38985, 38981, 38979, 39205, { f: 2, c: 39211 }, 39210, 39219, 39218, 39215, 39213, 39217, 39216, 39320, 39331, 39329, 39426, 39418, 39412, 39415, 39417, 39416, 39414, 39419, { f: 2, c: 39421 }, 39420, 39427, 39614, 39678, 39677, 39681, 39676, 39752, 39834, 39848, 39838, 39835, 39846, 39841, 39845, 39844, 39814, 39842, 39840, 39855, 40243, 40257, 40295, 40246, { f: 2, c: 40238 }, 40241, 40248, 40240, 40261, { f: 2, c: 40258 }, 40254, 40247, 40256, 40253, 32757, 40237, 40586, 40585, 40589, 40624, 40648, 40666, 40699, 40703, 40740, 40739, 40738, 40788, [12245, 40864], 20785, { f: 2, c: 20781 }, 22168, 22172, 22167, 22170, 22173, 22169, 22896, 23356, { f: 2, c: 23657 }, 24e3, { f: 2, c: 24173 }, 25048, 25055, { f: 2, c: 25069 }, 25073, 25066, 25072, 25067, 25046, 25065, 25855, 25860, 25853, 25848, 25857, 25859, 25852, 26004, 26075, { f: 2, c: 26330 }, 26328, 27333, 27321, 27325, 27361, 27334, 27322, { f: 2, c: 27318 }, 27335, 27316, 27309, 27486, 27593, 27659, 28679, { f: 2, c: 28684 }, 28673, 28677, 28692, 28686, { f: 2, c: 28671 }, 28667, 28710, 28668, 28663, 28682, [29185, 60224], 29183, 29177, 29187, 29181, 29558, 29880, 29888, 29877, 29889, 29886, 29878, 29883, 29890, 29972, 29971, 30300, 30308, 30297, 30288, 30291, 30295, 30298, 30374, 30397, 30444, 30658, 30650, 30988, { f: 2, c: 30995 }, 30985, 30992, 30994, 30993, 31149, 31148, 31327, 31772, 31785, 31769, 31776, 31775, 31789, 31773, 31782, 31784, 31778, 31781, 31792, 32348, 32336, 32342, 32355, 32344, 32354, 32351, 32337, 32352, 32343, 32339, 32693, 32691, { f: 2, c: 32759 }, 32885, { f: 2, c: 33233 }, 33232, 33375, 33374, 34228, 34246, 34240, 34243, 34242, 34227, 34229, 34237, 34247, 34244, 34239, 34251, 34254, 34248, 34245, 34225, 34230, 34258, 34340, 34232, 34231, 34238, 34409, 34791, 34790, 34786, 34779, 34795, 34794, 34789, 34783, 34803, 34788, 34772, 34780, 34771, 34797, 34776, 34787, 34775, 34777, 34817, 34804, 34792, 34781, 35155, 35147, 35151, 35148, 35142, { f: 2, c: 35152 }, 35145, 35626, 35623, 35619, 35635, 35632, 35637, 35655, 35631, 35644, 35646, 35633, 35621, 35639, 35622, 35638, 35630, 35620, 35643, 35645, 35642, 35906, 35957, 35993, 35992, 35991, 36094, 36100, 36098, 36096, 36444, 36450, 36448, 36439, 36438, 36446, 36453, 36455, 36443, 36442, 36449, 36445, 36457, 36436, { f: 3, c: 36678 }, 36683, 37160, { f: 2, c: 37178 }, 37182, 37288, 37285, 37287, 37295, 37290, 37813, 37772, 37778, 37815, 37787, 37789, 37769, 37799, 37774, 37802, 37790, 37798, 37781, 37768, 37785, 37791, 37760, 37773, 37809, 37777, 37810, 37796, 37800, 37812, 37795, { f: 2, c: 38354 }, 38353, 38579, 38615, 38618, 24002, 38623, 38616, 38621, 38691, 38690, 38693, 38828, 38830, 38824, 38827, 38820, 38826, 38818, 38821, 38871, 38873, 38870, 38872, 38906, { f: 3, c: 38992 }, 39096, 39233, 39228, 39226, 39439, 39435, 39433, 39437, 39428, 39441, 39434, 39429, 39431, 39430, 39616, 39644, 39688, { f: 2, c: 39684 }, 39721, 39733, 39754, 39756, 39755, 39879, 39878, 39875, 39871, 39873, 39861, 39864, 39891, 39862, 39876, 39865, 39869, 40284, 40275, 40271, 40266, 40283, 40267, 40281, 40278, 40268, 40279, 40274, 40276, 40287, 40280, 40282, 40590, 40588, 40671, 40705, 40704, [40726, 58693], 40741, 40747, 40746, 40745, 40744, 40780, 40789, { f: 2, c: 20788 }, 21142, 21239, 21428, 22187, 22189, { f: 2, c: 22182 }, 22186, 22188, 22746, 22749, 22747, 22802, { f: 3, c: 23357 }, 24003, 24176, 24511, 25083, 25863, 25872, 25869, 25865, 25868, 25870, 25988, 26078, 26077, 26334, 27367, 27360, 27340, 27345, 27353, 27339, 27359, 27356, 27344, 27371, 27343, 27341, 27358, 27488, 27568, 27660, 28697, 28711, 28704, 28694, 28715, { f: 3, c: 28705 }, 28713, 28695, 28708, 28700, 29196, 29194, 29191, 29186, 29189, { f: 2, c: 29349 }, 29348, 29347, 29345, 29899, 29893, 29879, 29891, 29974, 30304, { f: 2, c: 30665 }, 30660, 30705, 31005, 31003, 31009, 31004, 30999, 31006, 31152, { f: 2, c: 31335 }, 31795, 31804, 31801, 31788, 31803, 31980, 31978, 32374, 32373, 32376, 32368, 32375, 32367, 32378, 32370, 32372, 32360, 32587, 32586, 32643, 32646, 32695, { f: 2, c: 32765 }, 32888, 33239, 33237, 33291, 33380, 33377, 33379, 34283, 34289, 34285, 34265, 34273, 34280, 34266, 34263, 34284, 34290, 34296, 34264, 34271, 34275, 34268, 34257, 34288, 34278, 34287, 34270, 34274, 34816, 34810, 34819, { f: 2, c: 34806 }, 34825, 34828, 34827, 34822, 34812, 34824, 34815, 34826, 34818, 35170, { f: 2, c: 35162 }, 35159, 35169, 35164, 35160, 35165, 35161, 35208, 35255, 35254, 35318, 35664, 35656, 35658, 35648, 35667, 35670, 35668, 35659, 35669, 35665, 35650, 35666, 35671, 35907, 35959, 35958, 35994, { f: 2, c: 36102 }, 36105, 36268, 36266, 36269, 36267, 36461, 36472, 36467, 36458, 36463, 36475, 36546, 36690, 36689, { f: 2, c: 36687 }, 36691, 36788, 37184, 37183, 37296, 37293, 37854, 37831, 37839, 37826, 37850, 37840, 37881, 37868, 37836, 37849, 37801, 37862, 37834, 37844, 37870, 37859, 37845, 37828, 37838, 37824, 37842, 37797, 37863, 38269, { f: 2, c: 38362 }, 38625, 38697, { f: 2, c: 38699 }, 38696, 38694, 38835, 38839, 38838, { f: 3, c: 38877 }, 39004, 39001, 39005, 38999, 39103, 39101, 39099, 39102, 39240, 39239, 39235, { f: 2, c: 39334 }, 39450, 39445, 39461, 39453, 39460, 39451, 39458, 39456, 39463, 39459, 39454, 39452, 39444, 39618, 39691, 39690, 39694, 39692, 39735, { f: 2, c: 39914 }, 39904, 39902, 39908, 39910, 39906, 39920, 39892, 39895, 39916, 39900, 39897, 39909, 39893, 39905, 39898, 40311, 40321, 40330, 40324, 40328, 40305, 40320, 40312, 40326, { f: 2, c: 40331 }, 40317, 40299, { f: 2, c: 40308 }, 40304, 40297, 40325, 40307, 40315, 40322, 40303, 40313, 40319, 40327, 40296, 40596, 40593, 40640, 40700, 40749, { f: 2, c: 40768 }, 40781, { f: 3, c: 40790 }, 21303, 22194, 22197, 22195, 22755, 23365, { f: 2, c: 24006 }, { f: 2, c: 24302 }, { f: 2, c: 24512 }, 25081, 25879, 25878, 25877, 25875, 26079, 26344, { f: 2, c: 26339 }, 27379, 27376, 27370, 27368, 27385, 27377, { f: 2, c: 27374 }, 28732, 28725, 28719, 28727, 28724, 28721, 28738, 28728, 28735, 28730, 28729, 28714, 28736, 28731, 28723, 28737, { f: 2, c: 29203 }, 29352, 29565, 29564, 29882, 30379, 30378, 30398, 30445, 30668, { f: 2, c: 30670 }, 30669, 30706, 31013, 31011, { f: 2, c: 31015 }, 31012, 31017, 31154, 31342, { f: 2, c: 31340 }, 31479, 31817, 31816, 31818, 31815, 31813, 31982, 32379, 32382, 32385, 32384, 32698, 32767, 32889, 33243, 33241, { f: 2, c: 33384 }, 34338, 34303, 34305, 34302, 34331, 34304, 34294, 34308, 34313, 34309, 34316, 34301, 34841, { f: 2, c: 34832 }, 34839, 34835, 34838, 35171, 35174, 35257, 35319, 35680, 35690, 35677, 35688, 35683, 35685, 35687, 35693, 36270, 36486, 36488, 36484, 36697, { f: 2, c: 36694 }, 36693, 36696, 36698, 37005, 37187, 37185, 37303, 37301, { f: 2, c: 37298 }, 37899, 37907, 37883, 37920, 37903, 37908, 37886, 37909, 37904, 37928, 37913, 37901, 37877, 37888, 37879, 37895, 37902, 37910, 37906, 37882, 37897, 37880, 37948, 37898, 37887, 37884, 37900, 37878, 37905, 37894, 38366, 38368, 38367, { f: 2, c: 38702 }, 38841, 38843, { f: 2, c: 38909 }, 39008, { f: 2, c: 39010 }, 39007, { f: 2, c: 39105 }, 39248, 39246, 39257, 39244, 39243, 39251, 39474, 39476, 39473, 39468, 39466, 39478, 39465, 39470, 39480, 39469, 39623, 39626, 39622, 39696, 39698, 39697, 39947, 39944, 39927, 39941, 39954, 39928, 4e4, 39943, 39950, 39942, 39959, 39956, 39945, 40351, 40345, 40356, 40349, 40338, 40344, 40336, 40347, 40352, 40340, 40348, 40362, 40343, 40353, 40346, 40354, 40360, 40350, 40355, 40383, 40361, 40342, { f: 2, c: 40358 }, 40601, 40603, 40602, 40677, 40676, 40679, 40678, 40752, 40750, 40795, 40800, 40798, 40797, 40793, 40849, 20794, 20793, 21144, 21143, 22211, { f: 2, c: 22205 }, 23368, 23367, 24011, 24015, 24305, 25085, 25883, 27394, 27388, 27395, 27384, 27392, { f: 2, c: 28739 }, 28746, { f: 2, c: 28744 }, { f: 2, c: 28741 }, 29213, 29210, 29209, 29566, 29975, 30314, 30672, 31021, 31025, 31023, 31828, 31827, 31986, 32394, [32391, 60229], 32392, 32395, 32390, 32397, 32589, 32699, 32816, 33245, 34328, 34346, 34342, 34335, 34339, 34332, 34329, 34343, 34350, 34337, 34336, 34345, 34334, 34341, 34857, 34845, 34843, 34848, 34852, 34844, 34859, 34890, 35181, 35177, 35182, 35179, 35322, 35705, 35704, 35653, { f: 2, c: 35706 }, 36112, 36116, 36271, 36494, 36492, 36702, 36699, 36701, 37190, { f: 2, c: 37188 }, 37305, 37951, 37947, 37942, 37929, 37949, 37936, 37945, 37930, 37943, 37932, 37952, 37937, 38373, 38372, 38371, 38709, 38714, 38847, 38881, 39012, 39113, 39110, 39104, 39256, 39254, 39481, 39485, 39494, 39492, 39490, 39489, 39482, 39487, 39629, 39701, { f: 2, c: 39703 }, 39702, 39738, 39762, 39979, 39965, 39964, 39980, 39971, { f: 2, c: 39976 }, 39972, 39969, 40375, 40374, 40380, 40385, 40391, 40394, 40399, 40382, 40389, 40387, 40379, 40373, 40398, { f: 2, c: 40377 }, 40364, 40392, 40369, 40365, 40396, 40371, 40397, 40370, 40570, 40604, 40683, 40686, 40685, 40731, 40728, 40730, 40753, 40782, 40805, 40804, 40850, 20153, 22214, 22213, 22219, 22897, { f: 2, c: 23371 }, 24021, 24017, 24306, 25889, 25888, 25894, 25890, 27403, { f: 2, c: 27400 }, 27661, { f: 3, c: 28757 }, 28754, { f: 2, c: 29214 }, 29353, 29567, 29912, 29909, 29913, 29911, 30317, 30381, 31029, 31156, { f: 2, c: 31344 }, 31831, 31836, 31833, 31835, 31834, 31988, 31985, 32401, 32591, 32647, 33246, 33387, { f: 2, c: 34356 }, 34355, 34348, 34354, 34358, 34860, 34856, 34854, 34858, 34853, 35185, 35263, 35262, 35323, 35710, 35716, 35714, 35718, 35717, 35711, 36117, 36501, 36500, 36506, 36498, 36496, { f: 2, c: 36502 }, 36704, 36706, 37191, 37964, 37968, { f: 2, c: 37962 }, 37967, 37959, 37957, { f: 2, c: 37960 }, 37958, 38719, 38883, 39018, 39017, 39115, 39252, 39259, 39502, { f: 2, c: 39507 }, 39500, 39503, 39496, 39498, 39497, 39506, 39504, 39632, 39705, 39723, 39739, 39766, 39765, 40006, 40008, 39999, 40004, 39993, 39987, 40001, 39996, 39991, 39988, 39986, 39997, 39990, 40411, 40402, 40414, 40410, 40395, 40400, 40412, 40401, 40415, 40425, 40409, 40408, 40406, 40437, 40405, 40413, 40630, 40688, 40757, 40755, 40754, 40770, 40811, 40853, 40866, 20797, 21145, 22760, 22759, 22898, 23373, 24024, 34863, 24399, 25089, { f: 2, c: 25091 }, 25897, 25893, 26006, 26347, { f: 2, c: 27409 }, 27407, 27594, 28763, 28762, 29218, 29570, 29569, 29571, 30320, 30676, 31847, 31846, 32405, 33388, 34362, 34368, 34361, 34364, 34353, 34363, 34366, 34864, 34866, 34862, 34867, 35190, 35188, 35187, 35326, 35724, 35726, 35723, 35720, 35909, 36121, 36504, 36708, 36707, 37308, 37986, 37973, 37981, 37975, 37982, { f: 2, c: 38852 }, 38912, 39510, 39513, { f: 3, c: 39710 }, 40018, 40024, 40016, 40010, 40013, 40011, 40021, 40025, 40012, 40014, 40443, 40439, 40431, 40419, 40427, 40440, 40420, 40438, 40417, 40430, 40422, 40434, [40432, 60370], 40418, 40428, 40436, 40435, 40424, 40429, 40642, 40656, { f: 2, c: 40690 }, 40710, 40732, 40760, 40759, 40758, 40771, 40783, 40817, 40816, { f: 2, c: 40814 }, 22227, 22221, 23374, 23661, 25901, { f: 2, c: 26349 }, 27411, 28767, 28769, 28765, 28768, 29219, 29915, 29925, 30677, 31032, 31159, 31158, 31850, 32407, 32649, 33389, 34371, 34872, 34871, 34869, 34891, { f: 2, c: 35732 }, { f: 3, c: 36510 }, 36509, 37310, 37309, 37314, 37995, { f: 2, c: 37992 }, 38629, 38726, 38723, 38727, 38855, 38885, 39518, 39637, 39769, 40035, 40039, 40038, 40034, 40030, 40032, 40450, 40446, 40455, 40451, 40454, 40453, { f: 2, c: 40448 }, 40457, 40447, 40445, 40452, 40608, 40734, 40774, { f: 3, c: 40820 }, 22228, 25902, 26040, { f: 2, c: 27416 }, 27415, 27418, 28770, 29222, 29354, { f: 2, c: 30680 }, 31033, 31849, 31851, 31990, 32410, 32408, 32411, 32409, { f: 2, c: 33248 }, { f: 3, c: 34374 }, { f: 2, c: 35193 }, 35196, 35195, 35327, { f: 2, c: 35736 }, 36517, 36516, 36515, 37998, 37997, 37999, 38001, 38003, 38729, 39026, 39263, 40040, 40046, 40045, 40459, 40461, 40464, 40463, 40466, 40465, 40609, 40693, 40713, 40775, 40824, 40827, 40826, 40825, 22302, 28774, 31855, 34876, 36274, 36518, 37315, 38004, 38008, 38006, 38005, 39520, [39726, 60830], 40052, 40051, 40049, 40053, 40468, 40467, 40694, 40714, 40868, 28776, 28773, 31991, 34410, 34878, 34877, 34879, 35742, 35996, 36521, 36553, 38731, { f: 2, c: 39027 }, 39116, 39265, 39339, 39524, { f: 2, c: 39526 }, 39716, 40469, 40471, 40776, 25095, 27422, 29223, 34380, 36520, 38018, { f: 2, c: 38016 }, 39529, 39528, 40473, 34379, 35743, 38019, 40057, 40631, 30325, 39531, 40058, 40477, { f: 2, c: 28777 }, 29225, 40612, 40830, 40777, 40856, { s: 97 }, 65075, 0, 65076, 65103, [168, 776, 63208], [710, 63209, 65342], [12541, 63210], [12542, 63211], [12445, 63212], [12446, 63213], 0, [12293, 63216], [12294, 63217], [12295, 63218], [12540, 63219], [63220, 65339], [63221, 65341], [10045, 63222], [12353, 63223], [12354, 63224], [12355, 63225], [12356, 63226], [12357, 63227], [12358, 63228], [12359, 63229], [12360, 63230], [12361, 63231], [12362, 63232], [12363, 63233], [12364, 63234], [12365, 63235], [12366, 63236], [12367, 63237], [12368, 63238], [12369, 63239], [12370, 63240], [12371, 63241], [12372, 63242], [12373, 63243], [12374, 63244], [12375, 63245], [12376, 63246], [12377, 63247], [12378, 63248], [12379, 63249], [12380, 63250], [12381, 63251], [12382, 63252], [12383, 63253], [12384, 63254], [12385, 63255], [12386, 63256], [12387, 63257], [12388, 63258], [12389, 63259], [12390, 63260], [12391, 63261], [12392, 63262], [12393, 63263], [12394, 63264], [12395, 63265], [12396, 63266], [12397, 63267], [12398, 63268], [12399, 63269], [12400, 63270], [12401, 63271], [12402, 63272], [12403, 63273], [12404, 63274], [12405, 63275], [12406, 63276], [12407, 63277], [12408, 63278], [12409, 63279], [12410, 63280], [12411, 63281], [12412, 63282], [12413, 63283], [12414, 63284], [12415, 63285], [12416, 63286], [12417, 63287], [12418, 63288], [12419, 63289], [12420, 63290], [12421, 63291], [12422, 63292], [12423, 63293], [12424, 63294], [12425, 63295], [12426, 63296], [12427, 63297], [12428, 63298], [12429, 63299], [12430, 63300], [12431, 63301], [12432, 63302], [12433, 63303], [12434, 63304], [12435, 63305], [12449, 63306], [12450, 63307], [12451, 63308], [12452, 63309], [12453, 63310], [12454, 63311], [12455, 63312], [12456, 63313], [12457, 63314], [12458, 63315], [12459, 63316], [12460, 63317], [12461, 63318], [12462, 63319], [12463, 63320], [12464, 63321], [12465, 63322], [12466, 63323], [12467, 63324], [12468, 63325], [12469, 63326], [12470, 63327], [12471, 63328], [12472, 63329], [12473, 63330], [12474, 63331], [12475, 63332], [12476, 63333], [12477, 63334], [12478, 63335], [12479, 63336], [12480, 63337], [12481, 63338], [12482, 63339], [12483, 63340], [12484, 63341], [12485, 63342], [12486, 63343], [12487, 63344], [12488, 63345], [12489, 63346], [12490, 63347], [12491, 63348], [12492, 63349], [12493, 63350], [12494, 63351], [12495, 63352], [12496, 63353], [12497, 63354], [12498, 63355], [12499, 63356], [12500, 63357], [12501, 63358], [12502, 63359], [12503, 63360], [12504, 63361], [12505, 63362], [12506, 63363], [12507, 63364], [12508, 63365], [12509, 63366], [12510, 63367], [12511, 63368], [12512, 63369], [12513, 63370], [12514, 63371], [12515, 63372], [12516, 63373], [12517, 63374], [12518, 63375], [12519, 63376], [12520, 63377], [12521, 63378], [12522, 63379], [12523, 63380], [12524, 63381], [12525, 63382], [12526, 63383], [12527, 63384], [12528, 63385], [12529, 63386], [12530, 63387], [12531, 63388], [12532, 63389], [12533, 63390], [12534, 63391], [1040, 63392], [1041, 63393], [1042, 63394], [1043, 63395], [1044, 63396], [1045, 63397], [1025, 63398], [1046, 63399], [1047, 63400], [1048, 63401], [1049, 63402], [1050, 63403], [1051, 63404], [1052, 63405], [1053, 63406], [1054, 63407], [1055, 63408], [1056, 63409], [1057, 63410], [1058, 63411], [1059, 63412], [1060, 63413], [1061, 63414], [1062, 63415], [1063, 63416], [1064, 63417], [1065, 63418], [1066, 63419], [1067, 63420], [1068, 63421], [1069, 63422], [1070, 63423], [1071, 63424], [1072, 63425], [1073, 63426], [1074, 63427], [1075, 63428], [1076, 63429], [1077, 63430], [1105, 63431], [1078, 63432], [1079, 63433], [1080, 63434], [1081, 63435], [1082, 63436], [1083, 63437], [1084, 63438], [1085, 63439], [1086, 63440], [1087, 63441], [1088, 63442], [1089, 63443], [1090, 63444], [1091, 63445], [1092, 63446], [1093, 63447], [1094, 63448], [1095, 63449], [1096, 63450], [1097, 63451], [1098, 63452], [1099, 63453], [1100, 63454], [1101, 63455], [1102, 63456], [1103, 63457], [8679, 63458], [8632, 63459], [8633, 63460], [20033, 63461], [63462, 131276], [20058, 63463], [63464, 131210], [20994, 63465], [17553, 63466], 63467, [20872, 63468], [13853, 63469], [63470, 161287], { s: 40 }, [172, 63511, 65506], [63512, 65508], [63513, 65287], [63514, 65282], [12849, 63515], [8470, 63516], [8481, 63517], 30849, [37561, 58501], 35023, 22715, 24658, 31911, 23290, 9556, 9574, 9559, 9568, 9580, 9571, 9562, 9577, 9565, 9554, 9572, 9557, { s: 3 }, 9560, 9575, 9563, 9555, 9573, 9558, 9567, 9579, 9570, 9561, 9576, 9564, 9553, { s: 5 }, 9619, { s: 26 }, [58129, 147159], [22462, 58130], [58131, 159443], [28990, 58132], [58133, 153568], [27042, 58135], [58136, 166889], [23412, 58137], [31305, 58138], [58139, 153825], [58140, 169177], [31333, 58141], [31357, 58142], [58143, 154028], [31419, 58144], [31408, 58145], [31426, 58146], [31427, 58147], [29137, 58148], [58149, 156813], [16842, 58150], [31450, 58151], [31453, 58152], [31466, 58153], [16879, 58154], [21682, 58155], [58156, 154625], [31499, 58157], [31573, 58158], [31529, 58159], [58160, 152334], [58161, 154878], [31650, 58162], [31599, 58163], [33692, 58164], [58165, 154548], [58166, 158847], [31696, 58167], [33825, 58168], [31634, 58169], 0, [58171, 154912], 0, [33938, 58174], [31738, 58175], 0, [31797, 58177], [58178, 154817], [31812, 58179], [31875, 58180], [58181, 149634], [31910, 58182], [58184, 148856], [31945, 58185], [31943, 58186], [31974, 58187], 0, [31987, 58189], [31989, 58190], [32359, 58192], [17693, 58193], [58194, 159300], [32093, 58195], [58196, 159446], [32137, 58198], [32171, 58199], [28981, 58200], [32179, 58201], 32214, [58203, 147543], [58204, 155689], [32228, 58205], [15635, 58206], [32245, 58207], [58208, 137209], [32229, 58209], [58210, 164717], 0, [58212, 155937], [58213, 155994], [32366, 58214], 0, [17195, 58216], [37996, 58217], [32295, 58218], [32576, 58219], [32577, 58220], [32583, 58221], [31030, 58222], [58223, 156368], [39393, 58224], [32663, 58225], [58226, 156497], [32675, 58227], [58228, 136801], [58229, 131176], [17756, 58230], [58231, 145254], [58233, 164666], [32762, 58234], [58235, 156809], 0, [32776, 58237], [32797, 58238], 0, [32815, 58240], [58241, 172167], [58242, 158915], [32827, 58243], [32828, 58244], [32865, 58245], [58246, 141076], [18825, 58247], [58248, 157222], [58249, 146915], [58250, 157416], [26405, 58251], [32935, 58252], [58253, 166472], [33031, 58254], [33050, 58255], [22704, 58256], [58257, 141046], [27775, 58258], [58259, 156824], [25831, 58261], [58262, 136330], [33304, 58263], [58264, 137310], [27219, 58265], [58266, 150117], [58267, 150165], [17530, 58268], [33321, 58269], [58271, 158290], [58272, 146814], [20473, 58273], [58274, 136445], [34018, 58275], [33634, 58276], 0, [58278, 149927], [58279, 144688], [58280, 137075], [58281, 146936], [33450, 58282], [26907, 58283], [58284, 194964], [16859, 58285], [34123, 58286], [33488, 58287], [33562, 58288], [58289, 134678], [58290, 137140], [14017, 58291], [58292, 143741], [58293, 144730], [33403, 58294], [33506, 58295], [33560, 58296], [58297, 147083], [58298, 159139], [58299, 158469], [58300, 158615], [58301, 144846], [15807, 58302], [33565, 58303], [21996, 58304], [33669, 58305], [17675, 58306], [58307, 159141], [33708, 58308], 0, [33747, 58310], [58312, 159444], [27223, 58313], [34138, 58314], [13462, 58315], [58316, 159298], [33880, 58318], [58319, 154596], [33905, 58320], [15827, 58321], [17636, 58322], [27303, 58323], [33866, 58324], [31064, 58326], 0, [58328, 158614], [58329, 159351], [58330, 159299], [34014, 58331], 0, [33681, 58333], [17568, 58334], [33939, 58335], [34020, 58336], [58337, 154769], [16960, 58338], [58339, 154816], [17731, 58340], [34100, 58341], [23282, 58342], 0, [17703, 58344], [34163, 58345], [17686, 58346], [26559, 58347], [34326, 58348], [58349, 165413], [58350, 165435], [34241, 58351], [58352, 159880], [34306, 58353], [58354, 136578], [58355, 159949], [58356, 194994], [17770, 58357], [34344, 58358], [13896, 58359], [58360, 137378], [21495, 58361], [58362, 160666], [34430, 58363], 0, [58365, 172280], [34798, 58366], [58367, 142375], [34737, 58368], [34778, 58369], [34831, 58370, 60990], [22113, 58371], [34412, 58372], [26710, 58373], [17935, 58374], [34885, 58375], [34886, 58376], [58377, 161248], [58378, 146873], [58379, 161252], [34910, 58380], [34972, 58381], [18011, 58382], [34996, 58383], [34997, 58384], [35013, 58386], [58388, 161551], [35207, 58389], { s: 3 }, [35239, 58393], [35260, 58394], [58395, 166437], [35303, 58396], [58397, 162084], [58398, 162493], [35484, 58399], [30611, 58400], [37374, 58401], [35472, 58402], [58403, 162393], [31465, 58404], [58405, 162618], [18195, 58407], [58408, 162616], [29052, 58409], [35596, 58410], [35615, 58411], [58412, 152624], [58413, 152933], [35647, 58414], 0, [35661, 58416], [35497, 58417], [58418, 150138], [35728, 58419], [35739, 58420], [35503, 58421], [58422, 136927], [17941, 58423], [34895, 58424], [35995, 58425], [58426, 163156], [58427, 163215], [58428, 195028], [14117, 58429], [58430, 163155], [36054, 58431], [58432, 163224], [58433, 163261], [36114, 58434], [36099, 58435], [58436, 137488], [36059, 58437], [28764, 58438], [36113, 58439], [16080, 58441], 0, [36265, 58443], [58444, 163842], [58445, 135188], [58446, 149898], [15228, 58447], [58448, 164284], [58449, 160012], [31463, 58450], [36525, 58451], [36534, 58452], [36547, 58453], [37588, 58454], [36633, 58455], [36653, 58456], [58457, 164709], [58458, 164882], [36773, 58459], [37635, 58460], [58461, 172703], [58462, 133712], [36787, 58463], 0, [58465, 166366], [58466, 165181], [58467, 146875], [24312, 58468], [58469, 143970], [36857, 58470], 0, [58474, 140069], [14720, 58475], [58476, 159447], [36919, 58477], [58478, 165180], [58479, 162494], [36961, 58480], [58481, 165228], [58482, 165387], [37032, 58483], [58484, 165651], [37060, 58485], [58486, 165606], [37038, 58487], 0, [37223, 58489], [37289, 58491], [37316, 58492], [31916, 58493], [58494, 166195], [58495, 138889], [37390, 58496], [27807, 58497], [37441, 58498], [37474, 58499], [58500, 153017], [58502, 166598], [58503, 146587], [58504, 166668], [58505, 153051], [58506, 134449], [37676, 58507], [37739, 58508], [58509, 166625], [58510, 166891], [23235, 58512], [58513, 166626], [58514, 166629], [18789, 58515], [37444, 58516], [58517, 166892], [58518, 166969], [58519, 166911], [37747, 58520], [37979, 58521], [36540, 58522], [38277, 58523], [38310, 58524], [37926, 58525], [38304, 58526], [28662, 58527], [17081, 58528], [58530, 165592], [58531, 135804], [58532, 146990], [18911, 58533], [27676, 58534], [38523, 58535], [38550, 58536], [16748, 58537], [38563, 58538], [58539, 159445], [25050, 58540], 58541, [30965, 58542], [58543, 166624], [38589, 58544], [21452, 58545], [18849, 58546], [58547, 158904], [58548, 131700], [58549, 156688], [58550, 168111], [58551, 168165], [58552, 150225], [58553, 137493], [58554, 144138], [38705, 58555], [34370, 58556], [38710, 58557], [18959, 58558], [17725, 58559], [17797, 58560], [58561, 150249], [28789, 58562], [23361, 58563], [38683, 58564], 0, [58566, 168405], [38743, 58567], [23370, 58568], [58569, 168427], [38751, 58570], [37925, 58571], [20688, 58572], [58573, 143543], [58574, 143548], [38793, 58575], [38815, 58576], [38833, 58577], [38846, 58578], [38848, 58579], [38866, 58580], [38880, 58581], [58582, 152684], [38894, 58583], [29724, 58584], [58585, 169011], 0, [38901, 58587], [58588, 168989], [58589, 162170], [19153, 58590], [38964, 58591], [38963, 58592], [38987, 58593], [39014, 58594], [15118, 58595], [58596, 160117], [15697, 58597], [58598, 132656], [58599, 147804], [58600, 153350], [39114, 58601], [39095, 58602], [39112, 58603], [39111, 58604], [19199, 58605], [58606, 159015], [58607, 136915], [21936, 58608], [39137, 58609], [39142, 58610], [39148, 58611], [37752, 58612], [39225, 58613], [58614, 150057], [19314, 58615], [58616, 170071], [58617, 170245], [39413, 58618], [39436, 58619], [39483, 58620], [39440, 58621], [39512, 58622], [58623, 153381], [14020, 58624], [58625, 168113], [58626, 170965], [39648, 58627], [39650, 58628], [58629, 170757], [39668, 58630], [19470, 58631], [39700, 58632], [39725, 58633], [58634, 165376], [20532, 58635], [39732, 58636], [14531, 58638], [58639, 143485], [39760, 58640], [39744, 58641], [58642, 171326], [23109, 58643], [58644, 137315], [39822, 58645], [39938, 58647], [39935, 58648], [39948, 58649], [58650, 171624], [40404, 58651], [58652, 171959], [58653, 172434], [58654, 172459], [58655, 172257], [58656, 172323], [58657, 172511], [40318, 58658], [40323, 58659], [58660, 172340], [40462, 58661], [40388, 58663], [58665, 172435], [58666, 172576], [58667, 137531], [58668, 172595], [40249, 58669], [58670, 172217], [58671, 172724], [40592, 58672], [40597, 58673], [40606, 58674], [40610, 58675], [19764, 58676], [40618, 58677], [40623, 58678], [58679, 148324], [40641, 58680], [15200, 58681], [14821, 58682], [15645, 58683], [20274, 58684], [14270, 58685], [58686, 166955], [40706, 58687], [40712, 58688], [19350, 58689], [37924, 58690], [58691, 159138], [40727, 58692, 60836], 0, [40761, 58694], [22175, 58695], [22154, 58696], [40773, 58697], [39352, 58698], [58699, 168075], [38898, 58700], [33919, 58701], 0, [40809, 58703], [31452, 58704], [40846, 58705], [29206, 58706], [19390, 58707], [58708, 149877], [58709, 149947], [29047, 58710], [58711, 150008], [58712, 148296], [58713, 150097], [29598, 58714], [58715, 166874], [58716, 137466], [31135, 58717], [58718, 166270], [58719, 167478], [37737, 58720], [37875, 58721], [58722, 166468], [37612, 58723], [37761, 58724], [37835, 58725], [58726, 166252], [58727, 148665], [29207, 58728], [16107, 58729], [30578, 58730], [31299, 58731], [28880, 58732], [58733, 148595], [58734, 148472], [29054, 58735], [58736, 137199], [28835, 58737], [58738, 137406], [58739, 144793], [16071, 58740], [58741, 137349], [58742, 152623], [58743, 137208], [14114, 58744], [58745, 136955], [58746, 137273], [14049, 58747], [58748, 137076], [58749, 137425], [58750, 155467], [14115, 58751], [58752, 136896], [22363, 58753], [58754, 150053], [58755, 136190], [58756, 135848], [58757, 136134], [58758, 136374], [34051, 58759, 58761], [58760, 145062], 0, [33877, 58762], [58763, 149908], [58764, 160101], [58765, 146993], [58766, 152924], [58767, 147195], [58768, 159826], [17652, 58769], [58770, 145134], [58771, 170397], [58772, 159526], [26617, 58773], [14131, 58774], [15381, 58775], [15847, 58776], [22636, 58777], [58778, 137506], [26640, 58779], [16471, 58780], [58781, 145215], [58782, 147681], [58783, 147595], [58784, 147727], [58785, 158753], [21707, 58786], [22174, 58787], [58788, 157361], [22162, 58789], [58790, 135135], [58791, 134056], [58792, 134669], 0, [58794, 166675], [37788, 58795], [20216, 58796], [20779, 58797], [14361, 58798], [58799, 148534], [20156, 58800], [58801, 132197], 0, [20299, 58803], [20362, 58804], [58805, 153169], [23144, 58806], [58807, 131499], [58808, 132043], [14745, 58809], [58810, 131850], [58811, 132116], [13365, 58812], [20265, 58813], [58814, 131776], [58815, 167603], [58816, 131701], [35546, 58817], [58818, 131596], [20120, 58819], [20685, 58820], [20749, 58821], [20386, 58822], [20227, 58823], [58824, 150030], [58825, 147082], [20290, 58826], [20526, 58827], [20588, 58828], [20609, 58829], [20428, 58830], [20453, 58831], [20568, 58832], [20732, 58833], [28278, 58838], [58839, 144789], [58840, 147001], [58841, 147135], [28018, 58842], [58843, 137348], [58844, 147081], [20904, 58845], [20931, 58846], [58847, 132576], [17629, 58848], [58849, 132259], [58850, 132242], [58851, 132241], [36218, 58852], [58853, 166556], [58854, 132878], [21081, 58855], [21156, 58856], [58857, 133235], [21217, 58858], 0, [18042, 58860], [29068, 58861], [58862, 148364], [58863, 134176], [58864, 149932], [58865, 135396], [27089, 58866], [58867, 134685], 0, [16094, 58869], [29849, 58870], [29716, 58871], [29782, 58872], [29592, 58873], [19342, 58874], [58875, 150204], [58876, 147597], [21456, 58877], [13700, 58878], [29199, 58879], [58880, 147657], [21940, 58881], [58882, 131909], [21709, 58883], [58884, 134086], [22301, 58885], [37469, 58886], [38644, 58887], [22493, 58889], [22413, 58890], [22399, 58891], [13886, 58892], [22731, 58893], [23193, 58894], [58895, 166470], [58896, 136954], [58897, 137071], [58898, 136976], [23084, 58899], [22968, 58900], [23166, 58902], [23247, 58903], [23058, 58904], [58905, 153926], [58906, 137715], [58907, 137313], [58908, 148117], [14069, 58909], [27909, 58910], [29763, 58911], [23073, 58912], [58913, 155267], [23169, 58914], [58915, 166871], [58916, 132115], [37856, 58917], [29836, 58918], [58919, 135939], [28933, 58920], [18802, 58921], [37896, 58922], [58923, 166395], [37821, 58924], [14240, 58925], [23582, 58926], [23710, 58927], [24158, 58928], [24136, 58929], [58930, 137622], [58931, 137596], [58932, 146158], [24269, 58933], [23375, 58934], [58935, 137475], [58936, 137476], [14081, 58937], [58938, 137376], [14045, 58939], [58940, 136958], [14035, 58941], [33066, 58942], [58943, 166471], [58944, 138682], [58945, 144498], [58946, 166312], [24332, 58947, 60916], [24334, 58948], [58949, 137511], [58950, 137131], [23147, 58951], [58952, 137019], [23364, 58953], [58955, 161277], [34912, 58956], [24702, 58957], [58958, 141408], [58959, 140843], [24539, 58960], [16056, 58961], [58962, 140719], [58963, 140734], [58964, 168072], [58965, 159603], [25024, 58966], [58967, 131134], [58968, 131142], [58969, 140827], [24985, 58970], [24984, 58971], [24693, 58972], [58973, 142491], [58974, 142599], [58975, 149204], [58976, 168269], [25713, 58977], [58978, 149093], [58979, 142186], [14889, 58980], [58981, 142114], [58982, 144464], [58983, 170218], [58984, 142968], [25399, 58985], [25782, 58987], [25393, 58988], [25553, 58989], [58990, 149987], [58991, 142695], [25252, 58992], [58993, 142497], [25659, 58994], [25963, 58995], [26994, 58996], [15348, 58997], [58998, 143502], [58999, 144045], [59e3, 149897], [59001, 144043], [21773, 59002], [59003, 144096], [59004, 137433], [59005, 169023], [26318, 59006], [59007, 144009], [59008, 143795], [15072, 59009], [59011, 152964], [59012, 166690], [59013, 152975], [59014, 136956], [59015, 152923], [59016, 152613], [30958, 59017], [59018, 143619], [59019, 137258], [59020, 143924], [13412, 59021], [59022, 143887], [59023, 143746], [59024, 148169], [26254, 59025], [59026, 159012], [26219, 59027], [19347, 59028], [26160, 59029], [59030, 161904], [59031, 138731], [26211, 59032], [59033, 144082], [59034, 144097], [26142, 59035], [59036, 153714], [14545, 59037], [59038, 145466], [59039, 145340], [15257, 59040], [59041, 145314], [59042, 144382], [29904, 59043], [15254, 59044], [59046, 149034], [26806, 59047], 0, [15300, 59049], [27326, 59050], [59052, 145365], [59053, 148615], [27187, 59054], [27218, 59055], [27337, 59056], [27397, 59057], [59058, 137490], [25873, 59059], [26776, 59060], [27212, 59061], [15319, 59062], [27258, 59063], [27479, 59064], [59065, 147392], [59066, 146586], [37792, 59067], [37618, 59068], [59069, 166890], [59070, 166603], [37513, 59071], [59072, 163870], [59073, 166364], [37991, 59074], [28069, 59075], [28427, 59076], 0, [59079, 147327], [15759, 59080], [28164, 59081], [59082, 147516], [23101, 59083], [28170, 59084], [22599, 59085], [27940, 59086], [30786, 59087], [28987, 59088], [59089, 148250], [59090, 148086], [28913, 59091], [29264, 59092, 61085], [29319, 59093], [29332, 59094], [59095, 149391], [59096, 149285], [20857, 59097], [59098, 150180], [59099, 132587], [29818, 59100], [59101, 147192], [59102, 144991], [59103, 150090], [59104, 149783], [59105, 155617], [16134, 59106], [16049, 59107], [59108, 150239], [59109, 166947], [59110, 147253], [24743, 59111], [16115, 59112], [29900, 59113], [29756, 59114], [37767, 59115], [29751, 59116], [17567, 59117], [59118, 159210], [17745, 59119], [30083, 59120], [16227, 59121], [59122, 150745], [59123, 150790], [16216, 59124], [30037, 59125], [30323, 59126], [59127, 173510], 0, [29800, 59129, 61070], [59130, 166604], [59131, 149931], [59132, 149902], [15099, 59133], [15821, 59134], [59135, 150094], [16127, 59136], [59137, 149957], [59138, 149747], [37370, 59139], [22322, 59140], [37698, 59141], [59142, 166627], [59143, 137316], [20703, 59144], [59145, 152097], [59146, 152039], [30584, 59147], [59148, 143922], [30478, 59149], [30479, 59150], [30587, 59151], [59152, 149143], [59153, 145281], [14942, 59154], [59155, 149744], [29752, 59156], [29851, 59157], [16063, 59158], [59159, 150202], [59160, 150215], [16584, 59161], [59162, 150166], [59163, 156078], [37639, 59164], [59165, 152961], [30750, 59166], [30861, 59167], [30856, 59168], [30930, 59169], [29648, 59170], [31065, 59171], [59172, 161601], [59173, 153315], [16654, 59174], 0, 0, [31141, 59177], [27181, 59178], [59179, 147194], [31290, 59180], [31220, 59181], [16750, 59182], [59183, 136934], [16690, 59184], [37429, 59185], [31217, 59186], [59187, 134476], [59188, 149900], [59189, 131737], [59190, 146874], [59191, 137070], [13719, 59192], [21867, 59193], [13680, 59194], [13994, 59195], [59196, 131540], [59197, 134157], [31458, 59198], [23129, 59199], [59200, 141045], [59201, 154287], [59202, 154268], [23053, 59203], [59204, 131675], [30960, 59205], [23082, 59206], [59207, 154566], [31486, 59208], [16889, 59209], [31837, 59210], [31853, 59211], [16913, 59212], [59213, 154547], [59214, 155324], [59215, 155302], [31949, 59216], [59217, 150009], [59218, 137136], [31886, 59219], [31868, 59220], [31918, 59221], [27314, 59222], [32220, 59223], [32263, 59224], [32211, 59225], [32590, 59226], [59227, 156257], [59228, 155996], [59229, 162632], [32151, 59230], [59231, 155266], [17002, 59232], [59233, 158581], [59234, 133398], [26582, 59235], [59236, 131150], [59237, 144847], [22468, 59238], [59239, 156690], [59240, 156664], [32733, 59242], [31527, 59243], [59244, 133164], [59245, 154345], [59246, 154947], [31500, 59247], [59248, 155150], [39398, 59249], [34373, 59250], [39523, 59251], [27164, 59252], [59253, 144447], [59255, 150007], [59256, 157101], [39455, 59257], [59258, 157088], 0, [59260, 160039], [59261, 158929], [17642, 59262], [33079, 59263], [17410, 59264], [32966, 59265], [33033, 59266], [33090, 59267], [59268, 157620], [39107, 59269], [59270, 158274], [33378, 59271], [33381, 59272], [59273, 158289], [33875, 59274], [59275, 159143], [34320, 59276], [59277, 160283], [23174, 59278], [16767, 59279], [59280, 137280], [23339, 59281], [59282, 137377], [23268, 59283], [59284, 137432], [34464, 59285], [59286, 195004], [59287, 146831], [34861, 59288], [59289, 160802], [23042, 59290], [34926, 59291], [20293, 59292], [34951, 59293], [35007, 59294], [35046, 59295], [35173, 59296], [35149, 59297], [59298, 153219], [35156, 59299], [59300, 161669], [59301, 161668], [59302, 166901], [59303, 166873], [59304, 166812], [59305, 166393], [16045, 59306], [33955, 59307], [18165, 59308], [18127, 59309], [14322, 59310], [35389, 59311], [35356, 59312], [59313, 169032], [24397, 59314], [37419, 59315], [59316, 148100], [26068, 59317], [28969, 59318], [28868, 59319], [59320, 137285], [40301, 59321], [35999, 59322], [36073, 59323], [59324, 163292], [22938, 59325], [30659, 59326], [23024, 59327], [14036, 59329], [36394, 59330], [36519, 59331], [59332, 150537], [36656, 59333], [36682, 59334], [17140, 59335], [27736, 59336], [28603, 59337], [59338, 140065], [18587, 59339], [28537, 59340], [28299, 59341], [59342, 137178], [39913, 59343], [14005, 59344], [59345, 149807], [37051, 59346], 0, [21873, 59348], [18694, 59349], [37307, 59350], [37892, 59351], [59352, 166475], [16482, 59353], [59354, 166652], [37927, 59355], [59356, 166941], [59357, 166971], [34021, 59358], [35371, 59359], [38297, 59360], [38311, 59361], [38295, 59362], [38294, 59363], [59364, 167220], [29765, 59365], [16066, 59366], [59367, 149759], [59368, 150082], [59369, 148458], [16103, 59370], [59371, 143909], [38543, 59372], [59373, 167655], [59374, 167526], [59375, 167525], [16076, 59376], [59377, 149997], [59378, 150136], [59379, 147438], [29714, 59380], [29803, 59381], [16124, 59382], [38721, 59383], [59384, 168112], [26695, 59385], [18973, 59386], [59387, 168083], [59388, 153567], 0, [37736, 59390], [59391, 166281], [59392, 166950], [59393, 166703], [59394, 156606], [37562, 59395], [23313, 59396], [35689, 59397], [18748, 59398], [29689, 59399], [59400, 147995], [38811, 59401], 0, [39224, 59403], [59404, 134950], [24001, 59405], [59406, 166853], [59407, 150194], [38943, 59408], [59409, 169178], [37622, 59410], [59411, 169431], [37349, 59412], [17600, 59413], [59414, 166736], [59415, 150119], [59416, 166756], [39132, 59417], [59418, 166469], [16128, 59419], [37418, 59420], [18725, 59421], [33812, 59422], [39227, 59423], [39245, 59424], [59425, 162566], [15869, 59426], 0, [19311, 59428], [39338, 59429], [39516, 59430], [59431, 166757], [59432, 153800], [27279, 59433], [39457, 59434], [23294, 59435], [39471, 59436], [59437, 170225], [19344, 59438], [59439, 170312], [39356, 59440], [19389, 59441], [19351, 59442], [37757, 59443], [22642, 59444], [59445, 135938], [22562, 59446], [59447, 149944], [59448, 136424], [30788, 59449], [59450, 141087], [59451, 146872], [26821, 59452], [15741, 59453], [37976, 59454], [14631, 59455], [24912, 59456], [59457, 141185], [59458, 141675], [24839, 59459], [40015, 59460], [40019, 59461], [40059, 59462], [39989, 59463], [39952, 59464], [39807, 59465], [39887, 59466], [59467, 171565], [39839, 59468], [59469, 172533], [59470, 172286], [40225, 59471], [19630, 59472], [59473, 147716], [40472, 59474], [19632, 59475], [40204, 59476], [59477, 172468], [59478, 172269], [59479, 172275], [59480, 170287], [40357, 59481], [33981, 59482], [59483, 159250], [59484, 159711], [59485, 158594], [34300, 59486], [17715, 59487], [59488, 159140], [59489, 159364], [59490, 159216], [33824, 59491], [34286, 59492], [59493, 159232], [59494, 145367], [59495, 155748], [31202, 59496], [59497, 144796], [59498, 144960], [59500, 149982], [15714, 59501], [37851, 59502], [37566, 59503], [37704, 59504], [59505, 131775], [30905, 59506], [37495, 59507], [37965, 59508], [20452, 59509], [13376, 59510], [36964, 59511], [59512, 152925], [30781, 59513], [30804, 59514], [30902, 59515], [30795, 59516], [59517, 137047], [59518, 143817], [59519, 149825], [13978, 59520], [20338, 59521], [28634, 59522], [28633, 59523], 0, [28702, 59524, 59525], [21524, 59526], [59527, 147893], [22459, 59528], [22771, 59529], [22410, 59530], [40214, 59531], [22487, 59532], [28980, 59533], [13487, 59534], [59535, 147884], [29163, 59536], [59537, 158784], [59538, 151447], 0, [59540, 137141], [59541, 166473], [24844, 59542], [23246, 59543], [23051, 59544], [17084, 59545], [59546, 148616], [14124, 59547], [19323, 59548], [59549, 166396], [37819, 59550], [37816, 59551], [59552, 137430], [59553, 134941], [33906, 59554], [59555, 158912], [59556, 136211], [59557, 148218], [59558, 142374], [59559, 148417], [22932, 59560], [59561, 146871], [59562, 157505], [32168, 59563], [59564, 155995], [59565, 155812], [59566, 149945], [59567, 149899], [59568, 166394], [37605, 59569], [29666, 59570], [16105, 59571], [29876, 59572], [59573, 166755], [59574, 137375], [16097, 59575], [59576, 150195], [27352, 59577], [29683, 59578], [29691, 59579], [16086, 59580], [59581, 150078], [59582, 150164], [59583, 137177], [59584, 150118], [59585, 132007], [59586, 136228], [59587, 149989], [29768, 59588], [59589, 149782], [28837, 59590], [59591, 149878], [37508, 59592], [29670, 59593], [37727, 59594], [59595, 132350], [37681, 59596], [59597, 166606], [59598, 166422], [37766, 59599], [59600, 166887], [59601, 153045], [18741, 59602], [59603, 166530], [29035, 59604], [59605, 149827], [59606, 134399], [22180, 59607], [59608, 132634], [59609, 134123], [59610, 134328], [21762, 59611], [31172, 59612], [59613, 137210], [32254, 59614], [59615, 136898], [59616, 150096], [59617, 137298], [17710, 59618], [37889, 59619], [14090, 59620], [59621, 166592], [59622, 149933], [22960, 59623], [59624, 137407], [59625, 137347], [59626, 160900], [23201, 59627], [14050, 59628], [59629, 146779], [14e3, 59630], [37471, 59631], [23161, 59632], [59633, 166529], [59634, 137314], [37748, 59635], [15565, 59636], [59637, 133812], [19094, 59638], [14730, 59639], [20724, 59640], [15721, 59641], [15692, 59642], [59643, 136092], [29045, 59644], [17147, 59645], [59646, 164376], [28175, 59647], [59648, 168164], [17643, 59649], [27991, 59650], [59651, 163407], [28775, 59652], [27823, 59653], [15574, 59654], [59655, 147437], [59656, 146989], [28162, 59657], [28428, 59658], [15727, 59659], [59660, 132085], [30033, 59661], [14012, 59662], [13512, 59663], [18048, 59664], [16090, 59665], [18545, 59666], [22980, 59667], [37486, 59668], [18750, 59669], [36673, 59670], [59671, 166940], [59672, 158656], [22546, 59673], [22472, 59674], [14038, 59675], [59676, 136274], [28926, 59677], [59678, 148322], [59679, 150129], [59680, 143331], [59681, 135856], [59682, 140221], [26809, 59683], [26983, 59684], [59685, 136088], [59686, 144613], [59687, 162804], [59688, 145119], [59689, 166531], [59690, 145366], [59691, 144378], [59692, 150687], [27162, 59693], [59694, 145069], [59695, 158903], [33854, 59696], [17631, 59697], [17614, 59698], [59699, 159014], [59700, 159057], [59701, 158850], [59702, 159710], 0, 0, [33597, 59705], [59706, 137018], [33773, 59707], [59708, 158848], [59709, 159827], [59710, 137179], [22921, 59711], [23170, 59712], [59713, 137139], [23137, 59714], [23153, 59715], [59716, 137477], [59717, 147964], [14125, 59718], [23023, 59719], [59720, 137020], [14023, 59721], [29070, 59722], [37776, 59723], [26266, 59724], [59725, 148133], [23150, 59726], [23083, 59727], [59728, 148115], [27179, 59729], [59730, 147193], [59731, 161590], [59732, 148571], [59733, 148170], [28957, 59734], [59735, 148057], [59736, 166369], [20400, 59737], [59738, 159016], [23746, 59739], [59740, 148686], [59741, 163405], [59742, 148413], [27148, 59743], [59744, 148054], [59745, 135940], 0, [28979, 59747], [59748, 148457], [15781, 59749], [27871, 59750], [59751, 194597], [23019, 59754], [24412, 59757], [59764, 144128], [31955, 59776], [59783, 162548], [59786, 153334], [59790, 162584], [36972, 59791], [33270, 59795], [30476, 59797], [27810, 59799], [22269, 59800], [22633, 59828], [26465, 59832], [23646, 59838], [22770, 59841], [28857, 59843], [26627, 59853], [36795, 59859], [36796, 59861], [20001, 59871], [31545, 59898], [15820, 59902], [29482, 57990, 59909], [30048, 59912], [22586, 59920], [33446, 59932], [27018, 59940], [24803, 59944], [20206, 59984], [39364, 60002], [40639, 60023], [21249, 60025], [26528, 60038], [24808, 60046], [20916, 60053], [31363, 60064], [39994, 60075], [31432, 60093], [26906, 60098], [22956, 60100], [22592, 60102], [21610, 60114], [24807, 60123], [22138, 60125], [26965, 60132], [39983, 60133], [34725, 60134], [23584, 60141], [24075, 60143], [26398, 60147], [33965, 60157], [35713, 60161], [20088, 60166], [25283, 60176], [26709, 60180], 0, [33533, 60190], [35237, 60194], [36768, 60196], [38840, 60198], [38983, 60200], [39613, 60201], [24497, 60218], [26184, 60219], [26303, 60220], [60221, 162425], 0, [60225, 149946], 0, 0, [60230, 131910], [26382, 60232], [26904, 60233], [60235, 161367], [60236, 155618], [60239, 161278], [60240, 139418], [18640, 60241], [19128, 60242], [60244, 166554], [60247, 147515], [60250, 150085], [60251, 132554], [20946, 60252], [60253, 132625], [22943, 60254], [60255, 138920], [15294, 60256], [60257, 146687], [14747, 60262], [60264, 165352], [60265, 170441], [14178, 60266], [60267, 139715], [35678, 60268], [60269, 166734], 0, [29193, 60274], [60276, 134264], [60280, 132985], [36570, 60281], [21135, 60283], [29041, 60285], [60288, 147274], [60289, 150183], [21948, 60290], [60293, 158546], [13427, 60295], [60297, 161330], [18200, 60299], [60303, 149823], [20582, 60305], [13563, 60306], [60307, 144332], 0, [18300, 60310], [60311, 166216], [60315, 138640], 0, [60320, 162834], [36950, 60321], [60323, 151450], [35682, 60324], [23899, 60327], [60328, 158711], 0, [60331, 137500], [35562, 60332], [60333, 150006], [60335, 147439], [19392, 60337], [60340, 141083], [37989, 60341], [60342, 153569], [24981, 60343], [23079, 60344], [60345, 194765], 0, [60348, 148769], [20074, 60350], [60351, 149812], [38486, 60352], [28047, 60353], [60354, 158909], [35191, 60356], [60359, 156689], 0, [31554, 60363], [60364, 168128], [60365, 133649], 0, [31301, 60369], [39462, 60372], [13919, 60374], [60375, 156777], [60376, 131105], [31107, 60377], [23852, 60380], [60381, 144665], 0, [18128, 60384], [30011, 60386], [34917, 60387], [22710, 60389], [14108, 60390], [60391, 140685], [15444, 60394], [37505, 60397], [60398, 139642], [37680, 60400], [60402, 149968], [27705, 60403], [60406, 134904], [34855, 60407], [35061, 60408], [60409, 141606], [60410, 164979], [60411, 137137], [28344, 60412], [60413, 150058], [60414, 137248], [14756, 60415], 0, 0, [17727, 60419], [26294, 60420], [60421, 171181], [60422, 170148], [35139, 60423], [16607, 60427], [60428, 136714], [14753, 60429], [60430, 145199], [60431, 164072], [60432, 136133], [29101, 60433], [33638, 60434], [60436, 168360], 0, [19639, 60438], [60439, 159919], [60440, 166315], [60445, 147834], [31555, 60446], [31102, 60447], [28597, 60449], [60450, 172767], [27139, 60451], [60452, 164632], [21410, 60453], [60454, 159239], [37823, 60455], [26678, 60456], [38749, 59389, 60457], [60458, 164207], [60460, 158133], [60461, 136173], [60462, 143919], [23941, 60464], [60465, 166960], [22293, 60467], [38947, 60468], [60469, 166217], [23979, 60470], [60471, 149896], [26046, 60472], [27093, 60473], [21458, 60474], [60475, 150181], [60476, 147329], [15377, 60477], [26422, 60478], [60482, 139169], [13770, 60490], [18682, 60493], 0, [30728, 60496], [37461, 60497], [17394, 60499], [17375, 60501], [23032, 60505], 0, [22155, 60518], [60520, 169449], [36882, 60541], [21953, 60546], [17673, 60551], [32383, 60552], [28502, 60553], [27313, 60554], [13540, 60556], [60558, 161949], [14138, 60559], 0, [60562, 163876], [60565, 162366], [15851, 60567], [60569, 146615], [60574, 156248], [22207, 60575], [36366, 60577], [23405, 60578], [25566, 60581], 0, [25904, 60585], [22061, 60586], [21530, 60588], [60591, 171416], [19581, 60592], [22050, 60593], [22046, 60594], [32585, 60595], [22901, 60597], [60598, 146752], [34672, 60599], [33047, 60604], [40286, 60605], [36120, 60606], [30267, 60607], [40005, 60608], [30286, 60609], [30649, 60610], [37701, 60611], [21554, 60612], [33096, 60613], [33527, 60614], [22053, 60615], [33074, 60616], [33816, 60617], [32957, 60618], [21994, 60619], [31074, 60620], [22083, 60621], [21526, 60622], [60623, 134813], [13774, 60624], [22021, 57509, 60625], [22001, 60626], [26353, 60627], [60628, 164578], [13869, 60629], [30004, 60630], [22e3, 60631], [21946, 60632], [21655, 60633], [21874, 60634], [60635, 134209], [60636, 134294], [24272, 57652, 60637], [60639, 134774], [60640, 142434], [60641, 134818], [40619, 60642], [32090, 60643], 0, [60645, 135285], [25245, 60646], [38765, 60647], [21652, 60648], [36045, 60649], [29174, 60650], [37238, 60651], [25596, 60652], [25529, 60653], [25598, 60654], [21865, 60655], [60656, 142147], [40050, 60657], [60658, 143027], [20890, 60659], [13535, 60660], [60661, 134567], [20903, 60662], [21581, 60663], [21790, 60664], [21779, 60665], [30310, 60666], [36397, 60667], [60668, 157834], [30129, 60669], [32950, 60670], [34820, 60671], 0, [35015, 60673], [33206, 60674], [33820, 60675], [17644, 60677], [29444, 60678], [33547, 60681], [22139, 60683], [37232, 60690], [37384, 60692], [60696, 134905], [29286, 60697], [18254, 60699], [60701, 163833], [16634, 60703], [40029, 60704], [25887, 60705], [18675, 60707], [60708, 149472], [60709, 171388], 0, [60713, 161187], 60715, [60716, 155720], [29091, 60718], [32398, 60719], [40272, 60720], [13687, 60723], [27826, 60725], [21351, 60726], [14812, 60728], [60731, 149016], [33325, 60734], [21579, 60735], 60739, [14930, 60740], [29556, 60742], [60743, 171692], [19721, 60744], [39917, 60745], 0, [19547, 60748], [60751, 171998], [33884, 60752], [60754, 160434], [25390, 60757], [32037, 60758], [14890, 60761], [36872, 60762], [21196, 60763], [15988, 60764], [13946, 60765], [17897, 60766], [60767, 132238], [30272, 60768], [23280, 60769], [60770, 134838], [30842, 60771], [18358, 60772], [22695, 60773], [16575, 60774], [22140, 60775], [39819, 60776], [23924, 60777], [30292, 60778], [60779, 173108], [40581, 60780], [19681, 60781], 0, [14331, 60783], [24857, 60784], [60786, 148466], 60787, [22109, 60788], [60792, 171526], [21044, 60793], [13741, 60795], 0, [40316, 60797], [31830, 60798], [39737, 60799], [22494, 60800], [23635, 60802], [25811, 60803], [60804, 169168], [60805, 156469], [34477, 60807], [60808, 134440], [60811, 134513], 60812, [20990, 60813], [60814, 139023], [23950, 60815], [38659, 60816], [60817, 138705], [40577, 60818], [36940, 60819], [31519, 60820], [39682, 60821], [23761, 60822], [31651, 60823], [25192, 60824], [25397, 60825], [39679, 60826], [31695, 60827], [39722, 60828], [31870, 60829], 0, [31810, 60831], [31878, 60832], [39957, 60833], [31740, 60834], [39689, 60835], 0, 39982, [40794, 60839], [21875, 60840], [23491, 60841], [20477, 60842], [40600, 60843], [20466, 60844], [21088, 60845], [21201, 60847], [22375, 60848], [20566, 60849], [22967, 60850], [24082, 60851], [38856, 60852], [40363, 60853], [36700, 60854], [21609, 60855], [38836, 60856], [39232, 60857], [38842, 60858], [21292, 60859], [24880, 60860], [26924, 60861], [21466, 60862], [39946, 60863], [40194, 60864], [19515, 60865], [38465, 60866], [27008, 60867], [20646, 60868], [30022, 60869], [60870, 137069], [39386, 60871], [21107, 60872], 60873, [37209, 60874], [38529, 60875], [37212, 60876], 60877, [37201, 60878], [60879, 167575], [25471, 60880], [27338, 60882], [22033, 60883], [37262, 60884], [30074, 60885], [25221, 60886], [29519, 60888], [31856, 60889], [60890, 154657], 60892, [30422, 60894], [39837, 60895], [20010, 60896], [60897, 134356], [33726, 60898], [34882, 60899], 60900, [23626, 60901], [27072, 60902], 0, 0, [21023, 60905], [24053, 60906], [20174, 60907], [27697, 60908], [60909, 131570], [20281, 60910], [21660, 60911], 0, [21146, 60913], [36226, 60914], [13822, 60915], 0, [13811, 60917], 60918, [27474, 60919], [37244, 60920], [40869, 60921], [39831, 60922], [38958, 60923], [39092, 60924], [39610, 60925], [40616, 60926], [40580, 60927], [31508, 60929], 60930, [27642, 60931], [34840, 60932], [32632, 60933], 60934, [22048, 60935], [60936, 173642], [36471, 60937], [40787, 60938], 60939, [36308, 60940], [36431, 60941], [40476, 60942], [36353, 60943], [25218, 60944], [60945, 164733], [36392, 60946], [36469, 60947], [31443, 60948], [31294, 60950], [30936, 60951], [27882, 60952], [35431, 60953], [30215, 60954], [40742, 60956], [27854, 60957], [34774, 60958], [30147, 60959], [60960, 172722], [30803, 60961], [36108, 60963], [29410, 60964], [29553, 60965], [35629, 60966], [29442, 60967], [29937, 60968], [36075, 60969], [60970, 150203], [34351, 60971], [24506, 60972], [34976, 60973], [17591, 60974], 60975, [60977, 159237], 60978, [35454, 60979], [60980, 140571], 60981, [24829, 60982], [30311, 60983], [39639, 60984], [40260, 60985], [37742, 58859, 60986], [39823, 60987], [34805, 60988], 60989, 0, [36087, 60991], [29484, 60992], [38689, 60993], [39856, 60994], [13782, 60995], [29362, 60996], [19463, 60997], [31825, 60998], [39242, 60999], [24921, 61001], [19460, 61002], [40598, 61003], [24957, 61004], 61005, [22367, 61006], [24943, 61007], [25254, 61008], [25145, 61009], 0, [14940, 61011], [25058, 61012], [21418, 61013], [25444, 61015], [26626, 61016], [13778, 61017], [23895, 61018], [36826, 61020], [61021, 167481], 61022, [20697, 61023], [30982, 61025], [21298, 61026], [38456, 61027], [61028, 134971], [16485, 61029], 61030, [30718, 61031], 61032, [31938, 61033], [61034, 155418], [31962, 61035], [31277, 61036], [32870, 61037], [32867, 61038], [32077, 61039], [29957, 61040], [29938, 61041], [35220, 61042], [33306, 61043], [26380, 61044], [32866, 61045], [61046, 160902], [32859, 61047], [29936, 61048], [33027, 61049], [30500, 61050], [35209, 61051], [61052, 157644], [30035, 61053], [34729, 61055], [34766, 61056], [33224, 61057], [34700, 61058], [35401, 61059], [36013, 61060], [35651, 61061], [30507, 61062], [29944, 61063], [34010, 61064], [27058, 61066], [36262, 61067], 61068, [35241, 58392, 61069], 0, [28089, 61071], [34753, 61072], [61073, 147473], [29927, 61074], [15835, 61075], [29046, 61076], [24740, 57702, 61077], [24988, 61078], [15569, 61079], 0, [24695, 61081], 61082, [32625, 61083], 0, [24809, 61086], [19326, 61087], [57344, 132423], [37595, 57345], [57346, 132575], [57347, 147397], [34124, 57348], [17077, 57349], [29679, 57350], [20917, 57351], [13897, 57352], [57353, 149826], [57354, 166372], [37700, 57355], [57356, 137691], [33518, 57357], [57358, 146632], [30780, 57359], [26436, 57360], [25311, 57361], [57362, 149811], [57363, 166314], [57364, 131744], [57365, 158643], [57366, 135941], [20395, 57367], [57368, 140525], [20488, 57369], [57370, 159017], [57371, 162436], [57372, 144896], [57373, 150193], [57374, 140563], 0, [57376, 131966], [24484, 57377], [57378, 131968], [57379, 131911], [28379, 57380], [57381, 132127], 20702, [20737, 57383], [13434, 57384], [20750, 57385], [39020, 57386], [14147, 57387], [33814, 57388], [57389, 149924], [57390, 132231], [20832, 57391], [57392, 144308], [20842, 57393], [57394, 134143], [57395, 139516], [57396, 131813], [57397, 140592], [57398, 132494], [57399, 143923], [57400, 137603], [23426, 57401], [34685, 57402], [57403, 132531], [57404, 146585], [20914, 57405], [20920, 57406], [40244, 57407], [20937, 57408], [20943, 57409], [20945, 57410], [15580, 57411], [20947, 57412], [57413, 150182], [20915, 57414], 0, 0, [20973, 57417], [33741, 57418], [26942, 57419], [57420, 145197], [24443, 57421], [21003, 57422], [21030, 57423], [21052, 57424], [21173, 57425], [21079, 57426], [21140, 57427], [21177, 57428], [21189, 57429], [31765, 57430], [34114, 57431], [21216, 57432], [34317, 57433], [57434, 158483], 0, [57436, 166622], [21833, 57437], [28377, 57438], [57439, 147328], [57440, 133460], [57441, 147436], [21299, 57442], 0, [57444, 134114], [27851, 57445], [57446, 136998], [26651, 57447], [29653, 57448], [24650, 57449], [16042, 57450], [14540, 57451], [57452, 136936], [29149, 57453], [17570, 57454], [21357, 57455], [21364, 57456], [57457, 165547], [21374, 57458], 0, [57460, 136598], [57461, 136723], [30694, 57462], [21395, 57463], [57464, 166555], [21408, 57465], [21419, 57466], [21422, 57467], [29607, 57468], [57469, 153458], [16217, 57470], [29596, 57471], [21441, 57472], [21445, 57473], [27721, 57474], [20041, 57475], [22526, 57476], [21465, 57477], [15019, 57478], [57479, 134031], [21472, 57480], [57481, 147435], [57482, 142755], [21494, 57483], [57484, 134263], [21523, 57485], [28793, 57486], [21803, 57487], [26199, 57488], [27995, 57489], [21613, 57490], [57491, 158547], [57492, 134516], [21853, 57493], [21647, 57494], [21668, 57495], [18342, 57496], [57497, 136973], [57498, 134877], [15796, 57499], [57500, 134477], [57501, 166332], [57502, 140952], [21831, 57503], [19693, 57504], [21551, 57505], [29719, 57506], [21894, 57507], [21929, 57508], 0, [57510, 137431], [57511, 147514], [17746, 57512], [57513, 148533], [26291, 57514], [57515, 135348], [22071, 57516], [26317, 57517], [57518, 144010], [26276, 57519], 0, [22093, 57521], [22095, 57522], [30961, 57523], [22257, 57524], [38791, 57525], [21502, 57526], [22272, 57527], [22255, 57528], [22253, 57529], [57530, 166758], [13859, 57531], [57532, 135759], [22342, 57533], [57534, 147877], [27758, 57535], [28811, 57536], [22338, 57537], [14001, 57538], [57539, 158846], [22502, 57540], [57541, 136214], [22531, 57542], [57543, 136276], [57544, 148323], [22566, 57545], [57546, 150517], 0, [22698, 57548], [13665, 57549], [22752, 57550], [22748, 57551], [57552, 135740], [22779, 57553], [23551, 57554], [22339, 57555], [57556, 172368], [57557, 148088], [37843, 57558], [13729, 57559], [22815, 57560], [26790, 57561], [14019, 57562], [28249, 57563], [57564, 136766], [23076, 57565], 0, [57567, 136850], [34053, 57568], [22985, 57569], [57570, 134478], [57571, 158849], [57572, 159018], [57573, 137180], [23001, 57574], [57575, 137211], [57576, 137138], [57577, 159142], [28017, 57578], [57579, 137256], [57580, 136917], [23033, 57581], [57582, 159301], [23211, 57583], [23139, 57584], [14054, 57585], [57586, 149929], 0, [14088, 57588], [23190, 57589], [29797, 57590], [23251, 57591], [57592, 159649], [57593, 140628], [57595, 137489], [14130, 57596], [57597, 136888], [24195, 57598], [21200, 57599], [23414, 57600], [25992, 57601], [23420, 57602], [57603, 162318], [16388, 57604], [18525, 57605], [57606, 131588], [23509, 57607], [57609, 137780], [57610, 154060], [57611, 132517], [23539, 57612], [23453, 57613], [19728, 57614], [23557, 57615], [57616, 138052], [23571, 57617], [29646, 57618], [23572, 57619], [57620, 138405], [57621, 158504], [23625, 57622], [18653, 57623], [23685, 57624], [23785, 57625], [23791, 57626], [23947, 57627], [57628, 138745], [57629, 138807], [23824, 57630], [23832, 57631], [23878, 57632], [57633, 138916], [23738, 57634], [24023, 57635], [33532, 57636], [14381, 57637], [57638, 149761], [57639, 139337], [57640, 139635], [33415, 57641], [14390, 57642], [15298, 57643], [24110, 57644], [27274, 57645], 0, 57647, [57648, 148668], [57649, 134355], [21414, 57650], [20151, 57651], 0, [21416, 57653], [57654, 137073], [24073, 57655], 57656, [57657, 164994], [24313, 57658], [24315, 57659], [14496, 57660], [24316, 57661], [26686, 57662], [37915, 57663], [24333, 57664], [57665, 131521], [57666, 194708], [15070, 57667], [57669, 135994], [24378, 57670], [57671, 157832], [57672, 140240], [57674, 140401], [24419, 57675], [57677, 159342], [24434, 57678], [37696, 57679], [57680, 166454], [24487, 57681], [23990, 57682], [15711, 57683], [57684, 152144], [57685, 139114], [57686, 159992], [57687, 140904], [37334, 57688], [57689, 131742], [57690, 166441], [24625, 57691], [26245, 57692], [14691, 57694], [15815, 57695], [13881, 57696], [22416, 57697], [57698, 141236], [31089, 57699], [15936, 57700], [24734, 57701], 0, 0, [57704, 149890], [57705, 149903], [57706, 162387], [29860, 57707], [20705, 57708], [23200, 57709], [24932, 57710], [24898, 57712], [57713, 194726], [57714, 159442], [24961, 57715], [20980, 57716], [57717, 132694], [24967, 57718], [23466, 57719], [57720, 147383], [57721, 141407], [25043, 57722], [57723, 166813], [57724, 170333], [25040, 57725], [14642, 57726], [57727, 141696], [57728, 141505], [24611, 57729], [24924, 57730], [25886, 57731], [25483, 57732], [57733, 131352], [25285, 57734], [57735, 137072], [25301, 57736], [57737, 142861], [25452, 57738], [57739, 149983], [14871, 57740], [25656, 57741], [25592, 57742], [57743, 136078], [57744, 137212], [28554, 57746], [57747, 142902], 0, [57750, 153373], [25825, 57751], [25829, 57752], [38011, 57753], [14950, 57754], [25658, 57755], [14935, 57756], [25933, 57757], [28438, 57758], [57759, 150056], [57760, 150051], [25989, 57761], [25965, 57762], [25951, 57763], 0, [26037, 57765], [57766, 149824], [19255, 57767], [26065, 57768], [16600, 57769], [57770, 137257], 57771, [26083, 57772], [24543, 57773], [57774, 144384], [26136, 57775], [57776, 143863], [57777, 143864], [26180, 57778], [57779, 143780], [57780, 143781], [26187, 57781], [57782, 134773], [26215, 57783], [57784, 152038], [26227, 57785], 0, [57788, 143921], [57789, 165364], [57790, 143816], [57791, 152339], [30661, 57792], [57793, 141559], [39332, 57794], [26370, 57795], [57796, 148380], [57797, 150049], [27130, 57799], [57800, 145346], 0, [26471, 57802], [26466, 57803], [57804, 147917], [57805, 168173], [26583, 57806], [17641, 57807], [26658, 57808], [28240, 57809], [37436, 57810], [26625, 57811], [57812, 144358], [57813, 159136], [26717, 57814], [57815, 144495], [27105, 57816], [27147, 57817], [57818, 166623], [26995, 57819], [26819, 57820], [57821, 144845], [26881, 57822], [26880, 57823], [14849, 57825], [57826, 144956], [15232, 57827], [26540, 57828], [26977, 57829], [57830, 166474], [17148, 57831], [26934, 57832], [27032, 57833], [15265, 57834], [57835, 132041], [33635, 57836], [20624, 57837], [27129, 57838], [57839, 144985], [57840, 139562], [27205, 57841], [57842, 145155], [27293, 57843], [15347, 57844], [26545, 57845], [27336, 57846], [57847, 168348], [15373, 57848], [27421, 57849], [57850, 133411], [24798, 57851, 60308], [27445, 57852], [27508, 57853], [57854, 141261], [28341, 57855], [57856, 146139], 0, [57858, 137560], [14144, 57859], [21537, 57860], [57861, 146266], [27617, 57862], [57863, 147196], [27612, 57864], [27703, 57865], [57866, 140427], [57867, 149745], [57868, 158545], [27738, 57869], [33318, 57870], [27769, 57871], [57872, 146876], [17605, 57873], [57874, 146877], [57875, 147876], [57876, 149772], [57877, 149760], [57878, 146633], [14053, 57879], [15595, 57880], [57881, 134450], [39811, 57882], [57883, 143865], [57884, 140433], [32655, 57885], [26679, 57886], [57887, 159013], [57888, 159137], [57889, 159211], [28054, 57890], [27996, 57891], [28284, 57892], [28420, 57893], [57894, 149887], [57895, 147589], [57896, 159346], [34099, 57897], [57898, 159604], [20935, 57899], 0, 0, [33838, 57902], [57903, 166689], 0, [57905, 146991], [29779, 57906], [57907, 147330], [31180, 57908], [28239, 57909], [23185, 57910], [57911, 143435], [28664, 57912], [14093, 57913], [28573, 57914], [57915, 146992], [28410, 57916], [57917, 136343], [57918, 147517], [17749, 57919], [37872, 57920], [28484, 57921], [28508, 57922], [15694, 57923], [28532, 57924], [57925, 168304], [15675, 57926], [28575, 57927], [57928, 147780], [28627, 57929], [57930, 147601], [57931, 147797], [57932, 147513], [57933, 147440], [57934, 147380], [57935, 147775], [20959, 57936], [57937, 147798], [57938, 147799], [57939, 147776], [57940, 156125], [28747, 57941], [28798, 57942], [28839, 57943], 0, [28876, 57945], [28885, 57946], [28886, 57947], [28895, 57948], [16644, 57949], [15848, 57950], [29108, 57951], [29078, 57952], [57953, 148087], [28971, 57954], [28997, 57955], [23176, 57956], [29002, 57957], 0, [57960, 148325], [29007, 57961], [37730, 57962], [57963, 148161], [28972, 57964], [57965, 148570], [57966, 150055], [57967, 150050], [29114, 57968], [57969, 166888], [28861, 57970], [29198, 57971], [37954, 57972], [29205, 57973], [22801, 57974], [37955, 57975], [29220, 57976], [37697, 57977], [57978, 153093], [29230, 57979], [29248, 57980], [57981, 149876], [26813, 57982], [29269, 57983], [29271, 57984], [15957, 57985], [57986, 143428], [26637, 57987], [28477, 57988], [29314, 57989], 0, [29483, 57991], [57992, 149539], [57993, 165931], [18669, 57994], [57995, 165892], [29480, 57996], [29486, 57997], [29647, 57998], [29610, 57999], [58e3, 134202], [58001, 158254], [29641, 58002], [29769, 58003], [58004, 147938], [58005, 136935], [58006, 150052], [26147, 58007], [14021, 58008], [58009, 149943], [58010, 149901], [58011, 150011], [29687, 58012], [29717, 58013], [26883, 58014], [58015, 150054], [29753, 58016], [16087, 58018], 0, [58020, 141485], [29792, 58021], [58022, 167602], [29767, 58023], [29668, 58024], [29814, 58025], [33721, 58026], [29804, 58027], [29812, 58029], [37873, 58030], [27180, 58031], [29826, 58032], [18771, 58033], [58034, 150156], [58035, 147807], [58036, 150137], [58037, 166799], [23366, 58038], [58039, 166915], [58040, 137374], [29896, 58041], [58042, 137608], [29966, 58043], [29982, 58045], [58046, 167641], [58047, 137803], [23511, 58048], [58049, 167596], [37765, 58050], [30029, 58051], [30026, 58052], [30055, 58053], [30062, 58054], [58055, 151426], [16132, 58056], [58057, 150803], [30094, 58058], [29789, 58059], [30110, 58060], [30132, 58061], [30210, 58062], [30252, 58063], [30289, 58064], [30287, 58065], [30319, 58066], 58067, [58068, 156661], [30352, 58069], [33263, 58070], [14328, 58071], [58072, 157969], [58073, 157966], [30369, 58074], [30373, 58075], [30391, 58076], [30412, 58077], [58078, 159647], [33890, 58079], [58080, 151709], [58081, 151933], [58082, 138780], [30494, 58083], [30502, 58084], [30528, 58085], [25775, 58086], [58087, 152096], [30552, 58088], [58089, 144044], [30639, 58090], [58091, 166244], [58092, 166248], [58093, 136897], [30708, 58094], 0, [26826, 58098], [30895, 58099], [30919, 58100], [30931, 58101], [38565, 58102], [31022, 58103], [58104, 153056], [30935, 58105], [31028, 58106], [30897, 58107], [58108, 161292], [36792, 58109], [34948, 58110], [58113, 140828], [31110, 58114], [35072, 58115], [26882, 58116], [31104, 58117], [58118, 153687], [31133, 58119], [58120, 162617], [31036, 58121], [31145, 58122], [28202, 58123], [58124, 160038], [16040, 58125], [31174, 58126], [58127, 168205], [31188, 58128], 0, [21797, 62526], 0, [62528, 134210], [62529, 134421], [62530, 151851], [21904, 62531], [62532, 142534], [14828, 62533], [62534, 131905], [36422, 62535], [62536, 150968], [62537, 169189], 0, [62539, 164030], [30586, 62540], [62541, 142392], [14900, 62542], [18389, 62543], [62544, 164189], [62545, 158194], [62546, 151018], [25821, 62547], [62548, 134524], [62549, 135092], [62550, 134357], 0, [25741, 62552], [36478, 62553], [62554, 134806], 0, [62556, 135012], [62557, 142505], [62558, 164438], [62559, 148691], 0, [62561, 134470], [62562, 170573], [62563, 164073], [18420, 62564], [62565, 151207], [62566, 142530], [39602, 62567], [14951, 62568], [62569, 169460], [16365, 62570], [13574, 62571], [62572, 152263], [62573, 169940], 0, [62575, 142660], [40302, 62576], [38933, 62577], 0, [17369, 62579], 0, [25780, 62581], [21731, 62582], 0, [62584, 142282], 0, [14843, 62586], 0, [62588, 157402], [62589, 157462], [62590, 162208], [25834, 62591], [62592, 151634], [62593, 134211], [36456, 62594], 0, [62596, 166732], [62597, 132913], 0, [18443, 62599], [62600, 131497], [16378, 62601], [22643, 62602], [62603, 142733], 0, [62605, 148936], [62606, 132348], [62607, 155799], [62608, 134988], 0, [21881, 62610], 0, [17338, 62612], 0, [19124, 62614], [62615, 141926], [62616, 135325], [33194, 62617], [39157, 62618], [62619, 134556], [25465, 62620], [14846, 62621], [62622, 141173], [36288, 62623], [22177, 62624], [25724, 62625], [15939, 62626], 0, [62628, 173569], [62629, 134665], [62630, 142031], 0, 0, [62633, 135368], [62634, 145858], [14738, 62635], [14854, 62636], [62637, 164507], [13688, 62638], [62639, 155209], [62640, 139463], 0, 0, [62643, 142514], [62644, 169760], [13500, 62645], [27709, 62646], [62647, 151099], 0, 0, [62650, 161140], [62651, 142987], [62652, 139784], [62653, 173659], [62654, 167117], [62655, 134778], [62656, 134196], [62683, 161337], [62684, 142286], [62687, 142417], [14872, 62689], [62691, 135367], [62693, 173618], [62695, 167122], [62696, 167321], [62697, 167114], [38314, 62698], 0, [62706, 161630], [28992, 62708], 0, [20822, 62385], 0, [20616, 62487], 0, [13459, 62489], [20870, 62491], [24130, 63037], [20997, 62495], [21031, 62436], [21113, 62497], 0, [13651, 62504], [21442, 62505], [21343, 62715], 0, [21823, 62520], 0, [21976, 59986], [13789, 62722], [22049, 63067], 0, [22100, 60044], [60148, 135291], 0, [60153, 135379], 0, [61095, 135934], 0, 0, [14265, 60104], [23745, 61099], [23829, 63066], [23894, 63030], [14392, 63036], [20097, 62477], [24253, 63038], [14612, 63042], [25017, 63050], [25232, 63054], [25368, 63056], [25690, 63063], [25745, 62381], [33133, 62709], [33156, 59922], [33171, 59924], [26624, 63080], [15292, 63093], [29327, 60517], [29389, 59781], 0, [29497, 59785], [30018, 59811], [30172, 59817], [16320, 59818], [60278, 151205], [16343, 59820], 0, 30336, [30348, 59824, 151388], [16552, 59845], [30777, 59846], [16643, 59855], [31377, 59863], [31771, 59876], [31981, 59884], [32659, 62658], [32686, 59892], 0, [33535, 59936], [22623, 59981], [34482, 59960], 0, [34699, 59963], [35143, 59969], 0, [35369, 59972], 0, [36465, 59988], [60484, 164233], [36528, 59990], 0, [37214, 62443], [37260, 62441], [39182, 60051], [39196, 60054], 0, 0, [39809, 60066], [40384, 60080], [40339, 60078], [40620, 60085], [19857, 60540], 0, 37818, [40571, 60084], [28809, 63148], [29512, 59788], 0, [31129, 59858], [36791, 59997], 0, [39234, 60056], { s: 193 }, 8364, { s: 4 }, [12443, 63518], [12444, 63519], [11904, 63520], { f: 5, c: 62211 }, [62216, 131340], 62217, [62218, 131281], [62219, 131277], { f: 2, c: 62220 }, [62222, 131275], [62223, 139240], 62224, [62225, 131274], { f: 4, c: 62226 }, [62230, 131342], { f: 2, c: 62231 }, { f: 2, c: 62776 }, [62778, 138177], [62779, 194680], [12205, 38737, 62780], [62781, 131206], [20059, 62782], [20155, 62783], [13630, 62784], [23587, 62785], [24401, 62786], [24516, 62787], [14586, 62788], [25164, 62789], [25909, 62790], [27514, 62791], [27701, 62792], [27706, 62793], [28780, 62794], [29227, 62795], [20012, 62796], [29357, 62797], [62798, 149737], [32594, 62799], [31035, 62800], [31993, 62801], [32595, 62802], [62803, 156266], [13505, 62804], [62806, 156491], [32770, 62807], [32896, 62808], [62809, 157202], [62810, 158033], [21341, 62811], [34916, 62812], [35265, 62813], [62814, 161970], [35744, 62815], [36125, 62816], [38021, 62817], [38264, 62818], [38271, 62819], [38376, 62820], [62821, 167439], [38886, 62822], [39029, 62823], [39118, 62824], [39134, 62825], [39267, 62826], [62827, 17e4], [40060, 62828], [40479, 62829], [40644, 62830], [27503, 62831], [62832, 63751], [20023, 62833], [62834, 131207], [38429, 62835], [25143, 62836], [38050, 62837], [11908, 63521], [11910, 63522], [11911, 63523], [11912, 63524], [11914, 63525], [11916, 63526], [11917, 63527], [11925, 63528], [11932, 63529], [11941, 63531], [11943, 63532], [11946, 63533], [11948, 63534], [11950, 63535], [11958, 63536], [11964, 63537], [11966, 63538], [11978, 63540], [11980, 63541], [11981, 63542], [11983, 63543], [11990, 63544], [11991, 63545], [11998, 63546], [62368, 172969], [62369, 135493], [25866, 62371], [20029, 62374], [28381, 62375], [40270, 62376], [37343, 62377], [62380, 161589], [20250, 62382], [20264, 62383], [20392, 62384], [20852, 62386], [20892, 62387], [20964, 62388], [21153, 62389], [21160, 62390], [21307, 62391], [21326, 62392], [21457, 62393], [21464, 62394], [22242, 62395], [22768, 62396], [22788, 62397], [22791, 62398], [22834, 62399], [22836, 62400], [23398, 62401], [23454, 62402], [23455, 62403], [23706, 62404], [24198, 62405], [24635, 62406], [25993, 62407], [26622, 62408], [26628, 62409], [26725, 62410], [27982, 62411], [28860, 62412], [30005, 62413], [32420, 62414], [32428, 62415], [32442, 62416], [32455, 62417], [32463, 62418], [32479, 62419], [32518, 62420], [32567, 62421], [33402, 62422], [33487, 62423], [33647, 62424], [35270, 62425], [35774, 62426], [35810, 62427], [36710, 62428], [36711, 62429], [36718, 62430], [29713, 62431], [31996, 62432], [32205, 62433], [26950, 62434], [31433, 62435], [30904, 62442], [32956, 62444], [36107, 62446], [33014, 62447], [62448, 133607], [32927, 62451], [40647, 62452], [19661, 62453], [40393, 62454], [40460, 62455], [19518, 62456], [62457, 171510], [62458, 159758], [40458, 62459], [62460, 172339], [13761, 62461], [28314, 62463], [33342, 62464], [29977, 62465], [18705, 62467], [39532, 62468], [39567, 62469], [40857, 62470], [31111, 62471], [62472, 164972], [62473, 138698], [62474, 132560], [62475, 142054], [20004, 62476], [20096, 62478], [20103, 62479], [20159, 62480], [20203, 62481], [20279, 62482], [13388, 62483], [20413, 62484], [15944, 62485], [20483, 62486], [13437, 62488], [13477, 62490], [22789, 62492], [20955, 62493], [20988, 62494], [20105, 62496], [21136, 62498], [21287, 62499], [13767, 62500], [21417, 62501], [13649, 62502], [21424, 62503], [21539, 62506], [13677, 62507], [13682, 62508], [13953, 62509], [21651, 62510], [21667, 62511], [21684, 62512], [21689, 62513], [21712, 62514], [21743, 62515], [21784, 62516], [21795, 62517], [21800, 62518], [13720, 62519], [13733, 62521], [13759, 62522], [21975, 62523], [13765, 62524], [62525, 163204], [16467, 62538], [62551, 135412], [62555, 134155], [62574, 161992], [62580, 155813], [62583, 142668], [62585, 135287], [62587, 135279], [62595, 139681], [62609, 134550], [16571, 62611], [62631, 142537], [22098, 62641], [62642, 134961], [62657, 157724], [62659, 135375], [62660, 141315], [62661, 141625], [13819, 62662], [62663, 152035], [62664, 134796], [62665, 135053], [62666, 134826], [16275, 62667], [62668, 134960], [62669, 134471], [62670, 135503], [62671, 134732], [62673, 134827], [62674, 134057], [62675, 134472], [62676, 135360], [62677, 135485], [16377, 62678], [62679, 140950], [25650, 62680], [62681, 135085], [62682, 144372], [62685, 134526], [62686, 134527], [62688, 142421], [62690, 134808], [62692, 134958], [62694, 158544], [21708, 62699], [33476, 62700], [21945, 62701], [62703, 171715], [39974, 62704], [39606, 62705], [62707, 142830], [33004, 62710], [23580, 62711], [62712, 157042], [33076, 62713], [14231, 62714], [62716, 164029], [37302, 62717], [62718, 134906], [62719, 134671], [62720, 134775], [62721, 134907], [62723, 151019], [13833, 62724], [62725, 134358], [22191, 62726], [62727, 141237], [62728, 135369], [62729, 134672], [62730, 134776], [62731, 135288], [62732, 135496], [62733, 164359], [62734, 136277], [62735, 134777], [62736, 151120], [62737, 142756], [23124, 62738], [62739, 135197], [62740, 135198], [62741, 135413], [62742, 135414], [22428, 62743], [62744, 134673], [62745, 161428], [62746, 164557], [62747, 135093], [62748, 134779], [62749, 151934], [14083, 62750], [62751, 135094], [62752, 135552], [62753, 152280], [62754, 172733], [62755, 149978], [62756, 137274], [62757, 147831], [62758, 164476], [22681, 62759], [21096, 62760], [13850, 62761], [62762, 153405], [31666, 62763], [23400, 62764], [18432, 62765], [19244, 62766], [40743, 62767], [18919, 62768], [39967, 62769], [39821, 62770], [62771, 154484], [62772, 143677], [22011, 62773], [13810, 62774], [22153, 62775], [23870, 63028], [23880, 63029], [15868, 63031], [14351, 63032], [23972, 63033], [23993, 63034], [14368, 63035], [24357, 63039], [24451, 63040], [14600, 63041], [14655, 63043], [14669, 63044], [24791, 63045], [24893, 63046], [23781, 63047], [14729, 63048], [25015, 63049], [25039, 63051], [14776, 63052], [25132, 63053], [25317, 63055], [14840, 63057], [22193, 63058], [14851, 63059], [25570, 63060], [25595, 63061], [25607, 63062], [14923, 63064], [25792, 63065], [40863, 63068], [14999, 63069], [25990, 63070], [15037, 63071], [26111, 63072], [26195, 63073], [15090, 63074], [26258, 63075], [15138, 63076], [26390, 63077], [15170, 63078], [26532, 63079], [15192, 63081], [26698, 63082], [26756, 63083], [15218, 63084], [15217, 63085], [15227, 63086], [26889, 63087], [26947, 63088], [29276, 63089], [26980, 63090], [27039, 63091], [27013, 63092], [27094, 63094], [15325, 63095], [27237, 63096], [27252, 63097], [27249, 63098], [27266, 63099], [15340, 63100], [27289, 63101], [15346, 63102], [27307, 63103], [27317, 63104], [27348, 63105], [27382, 63106], [27521, 63107], [27585, 63108], [27626, 63109], [27765, 63110], [27818, 63111], [15563, 63112], [27906, 63113], [27910, 63114], [27942, 63115], [28033, 63116], [15599, 63117], [28068, 63118], [28081, 63119], [28181, 63120], [28184, 63121], [28201, 63122], [28294, 63123], [63124, 166336], [28347, 63125], [28386, 63126], [28378, 63127], [40831, 63128], [28392, 63129], [28393, 63130], [28452, 63131], [28468, 63132], [15686, 63133], [63134, 147265], [28545, 63135], [28606, 63136], [15722, 63137], [15733, 63138], [29111, 63139], [23705, 63140], [15754, 63141], [28716, 63142], [15761, 63143], [28752, 63144], [28756, 63145], [28783, 63146], [28799, 63147], [63149, 131877], [17345, 63150], [13809, 63151], [63152, 134872], [13902, 58134], [15789, 58172], [58173, 154725], [26237, 58183], [31860, 58188], [29837, 58197], [32402, 58215], [17667, 58232], [58260, 151480], [58270, 133901], [58277, 158474], [13438, 58311], [58317, 143087], [58325, 146613], [58343, 159385], [34673, 58364], [25537, 58385], [30583, 58387], [35210, 58390], [58406, 147343], [35660, 58415], [58440, 150729], [18730, 58464], [58471, 172052], [58472, 165564], [58473, 165121], [15088, 58490], [28815, 58511], [58529, 140922], [58637, 158120], [58646, 148043], [26760, 58662], [58664, 139611], [40802, 58702], [37830, 58793], [58802, 131967], [37734, 58888], [37519, 58901], [34324, 58954], [58986, 173147], [16784, 59010], [26511, 59045], [26654, 59048], [14435, 59051], [59077, 149996], [15129, 59128], [33942, 59176], [59241, 149858], [14818, 59254], [33920, 59259], [17262, 59328], [38769, 59402], [39323, 59427], [18733, 59499], [28439, 59703], [59704, 160009], [28838, 59746], [59752, 150095], [32357, 59753], [23855, 59755], [15859, 59756], [59758, 150109], [59759, 137183], [32164, 59760], [33830, 59761], [21637, 59762], [59763, 146170], [59765, 131604], [22398, 59766], [59767, 133333], [59768, 132633], [16357, 59769], [59770, 139166], [59771, 172726], [28675, 59772], [59773, 168283], [23920, 59774], [29583, 59775], [59777, 166489], [59778, 168992], [20424, 59779], [32743, 59780], [29456, 59782], [29496, 59784], [29505, 59787], [16041, 59789], [29173, 59792], [59793, 149746], [29665, 59794], [16074, 59796], [16081, 59798], [29721, 59801], [29726, 59802], [29727, 59803], [16098, 59804], [16112, 59805], [16116, 59806], [16122, 59807], [29907, 59808], [16142, 59809], [16211, 59810], [30061, 59812], [30066, 59813], [30093, 59814], [16252, 59815], [30152, 59816], [30285, 59819], [30324, 59821], [16348, 59822], [30330, 59823], [29064, 59825], [22051, 59826], [35200, 59827], [16413, 59829], [30531, 59830], [16441, 59831], [16453, 59833], [13787, 59834], [30616, 59835], [16490, 59836], [16495, 59837], [30654, 59839], [30667, 59840], [30744, 59842], [30748, 59844], [30791, 59847], [30801, 59848], [30822, 59849], [33864, 59850], [59851, 152885], [31027, 59852], [31026, 59854], [16649, 59856], [31121, 59857], [31238, 59860], [16743, 59862], [16818, 59864], [31420, 59865], [33401, 59866], [16836, 59867], [31439, 59868], [31451, 59869], [16847, 59870], [31586, 59872], [31596, 59873], [31611, 59874], [31762, 59875], [16992, 59877], [17018, 59878], [31867, 59879], [31900, 59880], [17036, 59881], [31928, 59882], [17044, 59883], [36755, 59885], [28864, 59886], [59887, 134351], [32207, 59888], [32212, 59889], [32208, 59890], [32253, 59891], [32692, 59893], [29343, 59894], [17303, 59895], [32800, 59896], [32805, 59897], [32814, 59899], [32817, 59900], [32852, 59901], [22452, 59903], [28832, 59904], [32951, 59905], [33001, 59906], [17389, 59907], [33036, 59908], [33038, 59910], [33042, 59911], [33044, 59913], [17409, 59914], [15161, 59915], [33110, 59916], [33113, 59917], [33114, 59918], [17427, 59919], [33148, 59921], [17445, 59923], [17453, 59925], [33189, 59926], [22511, 59927], [33217, 59928], [33252, 59929], [33364, 59930], [17551, 59931], [33398, 59933], [33482, 59934], [33496, 59935], [17584, 59937], [33623, 59938], [38505, 59939], [33797, 59941], [28917, 59942], [33892, 59943], [33928, 59945], [17668, 59946], [33982, 59947], [34017, 59948], [34040, 59949], [34064, 59950], [34104, 59951], [34130, 59952], [17723, 59953], [34159, 59954], [34160, 59955], [34272, 59956], [17783, 59957], [34418, 59958], [34450, 59959], [34543, 59961], [38469, 59962], [17926, 59964], [17943, 59965], [34990, 59966], [35071, 59967], [35108, 59968], [35217, 59970], [59971, 162151], [35384, 59973], [35476, 59974], [35508, 59975], [35921, 59976], [36052, 59977], [36082, 59978], [36124, 59979], [18328, 59980], [36291, 59982], [18413, 59983], [36410, 59985], [22356, 59987], [22005, 59989], [18487, 59991], [36558, 59992], [36578, 59993], [36580, 59994], [36589, 59995], [36594, 59996], [36801, 59998], [36810, 59999], [36812, 6e4], [36915, 60001], [18605, 60003], [39136, 60004], [37395, 60005], [18718, 60006], [37416, 60007], [37464, 60008], [37483, 60009], [37553, 60010], [37550, 60011], [37567, 60012], [37603, 60013], [37611, 60014], [37619, 60015], [37620, 60016], [37629, 60017], [37699, 60018], [37764, 60019], [37805, 60020], [18757, 60021], [18769, 60022], [37911, 60024], [37917, 60026], [37933, 60027], [37950, 60028], [18794, 60029], [37972, 60030], [38009, 60031], [38189, 60032], [38306, 60033], [18855, 60034], [38388, 60035], [38451, 60036], [18917, 60037], [18980, 60039], [38720, 60040], [18997, 60041], [38834, 60042], [38850, 60043], [19172, 60045], [39097, 60047], [19225, 60048], [39153, 60049], [22596, 60050], [39193, 60052], [39223, 60055], [39261, 60057], [39266, 60058], [19312, 60059], [39365, 60060], [19357, 60061], [39484, 60062], [39695, 60063], [39785, 60065], [39901, 60067], [39921, 60068], [39924, 60069], [19565, 60070], [39968, 60071], [14191, 60072], [60073, 138178], [40265, 60074], [40702, 60076], [22096, 60077], [40381, 60079], [40444, 60081], [38134, 60082], [36790, 60083], [40625, 60086], [40637, 60087], [40646, 60088], [38108, 60089], [40674, 60090], [40689, 60091], [40696, 60092], [40772, 60094], [60095, 131220], [60096, 131767], [60097, 132e3], [38083, 60099], [60101, 132311], [38081, 60103], [60105, 132565], [60106, 132629], [60107, 132726], [60108, 136890], [22359, 60109], [29043, 60110], [60111, 133826], [60112, 133837], [60113, 134079], [60115, 194619], [60116, 134091], [21662, 60117], [60118, 134139], [60119, 134203], [60120, 134227], [60121, 134245], [60122, 134268], [60124, 134285], [60126, 134325], [60127, 134365], [60128, 134381], [60129, 134511], [60130, 134578], [60131, 134600], [60135, 134660], [60136, 134670], [60137, 134871], [60138, 135056], [60139, 134957], [60140, 134771], [60142, 135100], [60144, 135260], [60145, 135247], [60146, 135286], [60149, 135304], [60150, 135318], [13895, 60151], [60152, 135359], [60154, 135471], [60155, 135483], [21348, 60156], [60158, 135907], [60159, 136053], [60160, 135990], [60162, 136567], [60163, 136729], [60164, 137155], [60165, 137159], [28859, 60167], [60168, 137261], [60169, 137578], [60170, 137773], [60171, 137797], [60172, 138282], [60173, 138352], [60174, 138412], [60175, 138952], [60177, 138965], [60178, 139029], [29080, 60179], [60181, 139333], [27113, 60182], [14024, 60183], [60184, 139900], [60185, 140247], [60186, 140282], [60187, 141098], [60188, 141425], [60189, 141647], [60191, 141671], [60192, 141715], [60193, 142037], [60195, 142056], [60197, 142094], [60199, 142143], [60202, 142412], [60204, 142472], [60205, 142519], [60206, 154600], [60207, 142600], [60208, 142610], [60209, 142775], [60210, 142741], [60211, 142914], [60212, 143220], [60213, 143308], [60214, 143411], [60215, 143462], [60216, 144159], [60217, 144350], [60222, 144743], [60223, 144883], [60227, 144922], [60228, 145174], [22709, 60231], [60234, 146087], [60237, 146961], [60238, 147129], [60243, 147737], [60245, 148206], [60246, 148237], [60248, 148276], [60249, 148374], [60258, 148484], [60259, 148694], [22408, 60260], [60261, 149108], [60263, 149295], [60271, 149522], [60272, 149755], [60273, 150037], [60275, 150208], [22885, 60277], [60279, 151430], [60282, 151596], [22335, 60284], [60286, 152217], [60287, 152601], [60291, 152646], [60292, 152686], [60296, 152895], [60298, 152926], [60300, 152930], [60301, 152934], [60302, 153543], [60304, 153693], [60309, 153859], [60312, 154286], [60313, 154505], [60314, 154630], [22433, 60316], [29009, 60317], [60319, 155906], [60322, 156082], [60325, 156674], [60326, 156746], [60330, 156804], [60334, 156808], [60336, 156946], [60338, 157119], [60339, 157365], [22201, 60347], [60349, 157436], [13848, 60355], [60357, 157593], [60358, 157806], [60360, 157790], [60362, 157895], [60366, 157990], [60368, 158009], [60371, 158202], [60373, 158253], [60378, 158260], [60379, 158555], [60383, 158621], [60385, 158884], [60388, 159150], [60392, 159819], [60393, 160205], [60395, 160384], [60396, 160389], [60399, 160395], [60401, 160486], [38047, 60404], [60405, 160848], [14009, 60416], [60424, 161740], [60425, 161880], [22230, 60426], [60435, 162269], [60441, 162301], [60442, 162314], [60443, 162571], [60444, 163174], [60448, 163849], [60459, 163875], [60463, 163912], [60466, 163971], [60479, 163984], [60480, 164084], [60481, 164142], [60483, 164175], [60485, 164271], [60486, 164378], [60487, 164614], [60488, 164655], [60489, 164746], [60491, 164968], [60492, 165546], [25574, 60494], [60495, 166230], [60498, 166328], [60500, 166375], [60502, 166376], [60503, 166726], [60504, 166868], [60506, 166921], [60508, 167877], [60509, 168172], [60511, 168208], [60512, 168252], [15863, 60513], [60514, 168286], [60515, 150218], [36816, 60516], [60519, 169191], [60521, 169392], [60522, 169400], [60523, 169778], [60524, 170193], [60525, 170313], [60526, 170346], [60527, 170435], [60528, 170536], [60529, 170766], [60530, 171354], [60531, 171419], [32415, 60532], [60533, 171768], [60534, 171811], [19620, 60535], [38215, 60536], [60537, 172691], [29090, 60538], [60539, 172799], [60542, 173515], [19868, 60543], [60544, 134300], [36798, 60545], [36794, 60547], [60548, 140464], [36793, 60549], [60550, 150163], [20202, 60555], [60557, 166700], [36480, 60560], [60561, 137205], [60563, 166764], [60564, 166809], [60566, 157359], [60568, 161365], [60570, 153141], [60571, 153942], [20122, 60572], [60573, 155265], [60576, 134765], [60579, 147080], [60580, 150686], [60583, 137206], [60584, 137339], [60587, 154698], [60589, 152337], [15814, 60590], [60596, 155352], [19996, 60600], [60601, 135146], [60602, 134473], [60603, 145082], [60638, 151880], [21982, 60644], [34694, 60672], [60676, 135361], [60679, 149254], [23440, 60680], [60682, 157843], [60684, 141044], [60685, 163119], [60686, 147875], [60687, 163187], [60688, 159440], [60689, 160438], [60691, 135641], [60693, 146684], [60694, 173737], [60695, 134828], [60698, 138402], [60700, 151490], [60702, 135147], [60706, 142752], [60710, 135148], [60711, 134666], [60714, 135149], [60717, 135559], [19994, 60721], [19972, 60722], [23309, 60724], [13996, 60727], [21373, 60729], [13989, 60730], [22682, 60732], [60733, 150382], [22442, 60736], [60737, 154261], [60738, 133497], [60741, 140389], [60746, 146686], [60747, 171824], [60749, 151465], [60750, 169374], [60753, 146870], [60755, 157619], [60756, 145184], [60759, 147191], [60760, 146988], [60785, 143578], [60789, 135849], [22439, 60790], [60791, 149859], [60794, 159918], [60801, 137068], [60806, 160100], [60809, 159010], [60810, 150242], [39963, 60837], [60838, 149822], [15878, 60846], [60881, 159011], [60887, 132092], [60891, 146685], [60893, 149785], [22394, 60904], [21722, 60912], [29050, 60928], [60949, 150135], [60955, 166490], [60962, 194624], [60976, 137275], [61e3, 155993], [61014, 144373], [61019, 166850], [61024, 138566], [61054, 159441], [13877, 61065], [61084, 166701], [21024, 61088], [15384, 61089], [61090, 146631], [61091, 155351], [61092, 161366], [61093, 152881], [61094, 137540], [61096, 170243], [61097, 159196], [61098, 159917], [61100, 156077], [61101, 166415], [61102, 145015], [61103, 131310], [61104, 157766], [61105, 151310], [17762, 61106], [23327, 61107], [61108, 156492], [40784, 61109], [40614, 61110], [61111, 156267], [20962, 57415], [21314, 57416], [26285, 57520], [22620, 57547], [21843, 57566], [15749, 57594], [24928, 57608], [18606, 57668], [38845, 57676], [57693, 137335], [24755, 57703], [33828, 57711], [38932, 57748], [57749, 147596], [57764, 143486], [57787, 138813], [15147, 57798], [15666, 57824], [57857, 132021], [28801, 57944], [23708, 57959], [58017, 132547], [14128, 58028], [58096, 136054], [58097, 150034], [58111, 166699], [58112, 155779], [256, 62233], [193, 62234], [461, 62235], [192, 62236], [274, 62237], [201, 62238], [282, 62239], [200, 62240], [332, 62241], [211, 62242], [465, 62243], [210, 62244], 62245, [7870, 62246], 62247, [7872, 62248], [202, 62249], [257, 62250], [225, 62251], [462, 62252], [224, 62253], [593, 62254], [275, 62255], [233, 62256], [283, 62257], [232, 62258], [299, 62259], [237, 62260], [464, 62261], [236, 62262], [333, 62263], [243, 62264], [466, 62265], [242, 62266], [363, 62267], [250, 62268], [468, 62269], [249, 62270], [470, 62271], [472, 62272], [474, 62273], [476, 62274], [252, 62275], 62276, [7871, 62277], 62278, [7873, 62279], [234, 62280], [609, 62281], [643, 63551], [592, 63552], [603, 63553], [596, 63554], [629, 63555], [339, 63556], [248, 63557], [331, 63558], [650, 63559], [618, 63560], { f: 2, c: 62282 }, [11933, 63530], [11974, 63539], [12003, 63547], 20539, 28158, [62841, 171123], 62842, [15817, 62843], 34959, [62845, 147790], 28791, 23797, [19232, 62848], [62849, 152013], [13657, 62850], [62851, 154928], 24866, [62853, 166450], 36775, 37366, 29073, 26393, 29626, [62859, 144001], [62860, 172295], [15499, 62861], [62862, 137600], [19216, 62863], 30948, 29698, 20910, [62867, 165647], [16393, 62868], 27235, [62870, 172730], [16931, 62871], 34319, 31274, [62875, 170311], [62876, 166634], 38741, 28749, 21284, [62880, 139390], 37876, 30425, [62883, 166371], 62884, 30685, 20131, 20464, 20668, 20015, 20247, 62891, 21556, 32139, 22674, 22736, [62896, 138678], 24210, 24217, 24514, [62900, 141074], 25995, [62902, 144377], 26905, 27203, [62905, 146531], 27903, 29184, [62909, 148741], 29580, [16091, 62911], [62912, 150035], 23317, 29881, 35715, [62916, 154788], [62917, 153237], 31379, 31724, 31939, 32364, 33528, 34199, 62924, 34960, 62926, 36537, 62928, 36815, 34143, 39392, 37409, 62933, [62934, 167353], [62935, 136255], [16497, 62936], [17058, 62937], 23066, 39016, 26475, [17014, 62944], 22333, 34262, [62948, 149883], 33471, [62950, 160013], [19585, 62951], [62952, 159092], 23931, [62954, 158485], [62955, 159678], { f: 2, c: 62956 }, 23446, 62959, 32347], "Adobe-GB1": [{ f: 95, c: 32 }, { f: 3, c: 12288 }, [183, 12539], 713, 711, 168, 12291, 12293, 8212, 65374, 8214, [8230, 8943], { f: 2, c: 8216 }, { f: 2, c: 8220 }, { f: 2, c: 12308 }, { f: 8, c: 12296 }, { f: 2, c: 12310 }, { f: 2, c: 12304 }, 177, 215, 247, 8758, { f: 2, c: 8743 }, 8721, 8719, 8746, 8745, 8712, 8759, 8730, 8869, 8741, 8736, 8978, 8857, 8747, 8750, 8801, 8780, 8776, 8765, 8733, 8800, { f: 2, c: 8814 }, { f: 2, c: 8804 }, 8734, 8757, 8756, 9794, 9792, 176, { f: 2, c: 8242 }, 8451, 65284, 164, { f: 2, c: 65504 }, 8240, 167, 8470, 9734, 9733, 9675, 9679, 9678, 9671, 9670, 9633, 9632, 9651, 9650, 8251, 8594, { f: 2, c: 8592 }, 8595, 12307, { f: 20, c: 9352 }, { f: 20, c: 9332 }, { f: 10, c: 9312 }, { f: 10, c: 12832 }, { f: 12, c: 8544 }, { f: 3, c: 65281 }, 65509, { f: 89, c: 65285 }, 65507, { f: 83, c: 12353 }, { f: 86, c: 12449 }, { f: 17, c: 913 }, { f: 7, c: 931 }, { f: 17, c: 945 }, { f: 7, c: 963 }, { f: 7, c: 59277 }, { f: 2, c: 65077 }, { f: 2, c: 65081 }, { f: 2, c: 65087 }, { f: 2, c: 65085 }, { f: 4, c: 65089 }, { f: 2, c: 59284 }, { f: 2, c: 65083 }, { f: 2, c: 65079 }, 65073, 59286, { f: 2, c: 65075 }, { f: 6, c: 1040 }, 1025, { f: 32, c: 1046 }, 1105, { f: 26, c: 1078 }, 257, 225, 462, 224, 275, 233, 283, 232, 299, 237, 464, 236, 333, 243, 466, 242, 363, 250, 468, 249, 470, 472, 474, 476, 252, 234, 593, 7743, 324, 328, 505, 609, { f: 37, c: 12549 }, 0, { f: 76, c: 9472 }, { s: 126 }, 21834, 38463, 22467, 25384, 21710, 21769, 21696, 30353, 30284, 34108, 30702, 33406, 30861, 29233, 38552, 38797, 27688, 23433, 20474, 25353, 26263, 23736, 33018, 26696, 32942, 26114, 30414, 20985, 25942, 29100, 32753, 34948, 20658, 22885, 25034, 28595, 33453, 25420, 25170, 21485, 21543, 31494, [12043, 20843], 30116, 24052, 25300, 36299, 38774, 25226, 32793, 22365, 38712, 32610, 29240, [12137, 30333], 26575, 30334, 25670, 20336, 36133, 25308, 31255, 26001, 29677, 25644, 25203, 33324, 39041, 26495, 29256, 25198, 25292, 20276, 29923, 21322, 21150, 32458, 37030, 24110, 26758, 27036, 33152, 32465, 26834, 30917, 34444, 38225, 20621, 35876, 33502, 32990, 21253, 35090, 21093, 34180, 38649, 20445, 22561, 39281, 23453, 25265, 25253, 26292, 35961, 40077, 29190, 26479, 30865, 24754, 21329, 21271, 36744, 32972, 36125, 38049, 20493, 29384, 22791, 24811, 28953, 34987, 22868, 33519, 26412, 31528, 23849, 32503, 29997, 27893, 36454, 36856, 36924, [12240, 40763], [12112, 27604], 37145, 31508, 24444, 30887, 34006, 34109, 27605, 27609, 27606, 24065, 24199, 30201, 38381, 25949, 24330, 24517, 36767, 22721, 33218, 36991, 38491, 38829, 36793, 32534, 36140, 25153, 20415, 21464, 21342, { f: 2, c: 36776 }, 36779, 36941, 26631, 24426, 33176, 34920, 40150, 24971, 21035, 30250, 24428, 25996, 28626, 28392, 23486, 25672, 20853, 20912, 26564, 19993, 31177, 39292, 28851, 30149, 24182, 29627, 33760, 25773, 25320, 38069, 27874, 21338, 21187, 25615, 38082, 31636, 20271, 24091, 33334, 33046, 33162, 28196, 27850, 39539, 25429, [12056, 21340], 21754, 34917, 22496, 19981, 24067, 27493, 31807, 37096, 24598, 25830, 29468, 35009, 26448, 25165, 36130, 30572, 36393, 37319, 24425, 33756, 34081, 39184, 21442, 34453, 27531, 24813, 24808, 28799, 33485, 33329, 20179, 27815, 34255, 25805, 31961, 27133, 26361, 33609, 21397, 31574, 20391, 20876, 27979, 23618, 36461, 25554, 21449, 33580, 33590, 26597, 30900, 25661, 23519, 23700, 24046, 35815, 25286, 26612, 35962, 25600, 25530, 34633, 39307, 35863, 32544, 38130, 20135, 38416, 39076, 26124, 29462, 22330, 23581, 24120, 38271, 20607, 32928, [12058, 21378], 25950, 30021, 21809, 20513, 36229, 25220, 38046, 26397, 22066, 28526, 24034, 21557, 28818, 36710, 25199, 25764, 25507, 24443, 28552, 37108, [12162, 33251], [12192, 36784], 23576, 26216, 24561, 27785, 38472, 36225, 34924, 25745, 31216, 22478, 27225, 25104, 21576, 20056, 31243, 24809, 28548, 35802, 25215, 36894, 39563, 31204, 21507, 30196, 25345, 21273, 27744, 36831, 24347, 39536, 32827, 40831, 20360, 23610, [12186, 36196], 32709, 26021, 28861, 20805, 20914, [12173, 34411], 23815, 23456, 25277, 37228, 30068, 36364, 31264, 24833, 31609, 20167, 32504, 30597, 19985, 33261, 21021, 20986, 27249, 21416, 36487, 38148, 38607, 28353, 38500, 26970, 30784, 20648, 30679, 25616, 35302, 22788, 25571, 24029, 31359, 26941, 20256, 33337, 21912, 20018, 30126, 31383, 24162, 24202, 38383, 21019, 21561, 28810, 25462, 38180, 22402, 26149, 26943, 37255, 21767, 28147, 32431, 34850, 25139, 32496, 30133, 33576, 30913, 38604, 36766, 24904, 29943, 35789, 27492, 21050, 36176, 27425, 32874, 33905, 22257, 21254, 20174, 19995, 20945, 31895, 37259, 31751, 20419, 36479, 31713, 31388, 25703, 23828, 20652, 33030, 30209, 31929, 28140, 32736, 26449, 23384, [12072, 23544], 30923, 25774, 25619, 25514, 25387, 38169, 25645, 36798, 31572, 30249, 25171, [12068, 22823], 21574, [12109, 27513], 20643, 25140, 24102, 27526, 20195, 36151, 34955, 24453, 36910, 24608, 32829, 25285, 20025, 21333, 37112, 25528, 32966, 26086, 27694, 20294, 24814, 28129, 35806, 24377, 34507, 24403, 25377, 20826, 33633, 26723, [12049, 20992], 25443, 36424, 20498, 23707, 31095, 23548, 21040, 31291, 24764, 36947, 30423, 24503, 24471, 30340, 36460, 28783, 30331, 31561, 30634, 20979, 37011, 22564, 20302, 28404, 36842, 25932, 31515, 29380, 28068, 32735, 23265, 25269, 24213, 22320, 33922, 31532, 24093, 24351, 36882, 32532, 39072, 25474, 28359, 30872, 28857, 20856, 38747, 22443, 30005, 20291, 30008, 24215, 24806, 22880, 28096, 27583, 30857, 21500, 38613, 20939, 20993, 25481, 21514, 38035, 35843, 36300, 29241, 30879, 34678, 36845, 35853, 21472, 19969, 30447, 21486, 38025, 39030, [12237, 40718], 38189, 23450, 35746, 20002, 19996, 20908, 33891, 25026, 21160, 26635, 20375, 24683, 20923, 27934, 20828, 25238, [12099, 26007], 38497, [12182, 35910], 36887, 30168, 37117, 30563, 27602, 29322, 29420, 35835, 22581, 30585, 36172, 26460, 38208, 32922, 24230, 28193, 22930, 31471, 30701, 38203, 27573, 26029, 32526, 22534, 20817, 38431, 23545, 22697, 21544, 36466, 25958, 39039, 22244, 38045, 30462, 36929, 25479, 21702, 22810, 22842, 22427, 36530, 26421, 36346, 33333, 21057, 24816, 22549, 34558, 23784, 40517, 20420, 39069, 35769, 23077, 24694, 21380, 25212, 36943, 37122, 39295, 24681, [12157, 32780], [12041, 20799], [12159, 32819], 23572, 39285, 27953, [12038, 20108], 36144, 21457, 32602, 31567, 20240, 20047, 38400, 27861, 29648, 34281, 24070, 30058, 32763, 27146, 30718, 38034, 32321, 20961, 28902, 21453, 36820, 33539, 36137, 29359, 39277, 27867, 22346, 33459, [12101, 26041], 32938, 25151, 38450, 22952, 20223, 35775, 32442, 25918, 33778, [12206, 38750], 21857, 39134, 32933, 21290, 35837, 21536, 32954, 24223, 27832, 36153, 33452, 37210, 21545, 27675, 20998, 32439, 22367, 28954, 27774, 31881, 22859, 20221, 24575, 24868, 31914, 20016, 23553, 26539, 34562, 23792, 38155, 39118, 30127, 28925, 36898, 20911, 32541, 35773, 22857, 20964, 20315, 21542, 22827, 25975, 32932, 23413, 25206, 25282, 36752, 24133, 27679, 31526, 20239, 20440, 26381, 28014, 28074, 31119, 34993, 24343, 29995, 25242, 36741, 20463, 37340, 26023, 33071, 33105, 24220, 33104, 36212, 21103, 35206, 36171, 22797, 20613, 20184, [12201, 38428], [12119, 29238], 33145, 36127, 23500, 35747, 38468, 22919, 32538, 21648, 22134, 22030, 35813, 25913, 27010, 38041, 30422, 28297, [12082, 24178], [12130, 29976], 26438, 26577, 31487, 32925, 36214, 24863, 31174, 25954, 36195, 20872, 21018, 38050, 32568, 32923, 32434, 23703, 28207, 26464, 31705, 30347, [12220, 39640], 33167, 32660, 31957, 25630, 38224, 31295, 21578, 21733, 27468, 25601, [12093, 25096], 40509, 33011, 30105, 21106, [12208, 38761], 33883, 26684, 34532, 38401, 38548, 38124, 20010, 21508, 32473, 26681, 36319, 32789, 26356, 24218, 32697, 22466, 32831, 26775, [12079, 24037], 25915, 21151, 24685, 40858, 20379, 36524, 20844, 23467, [12088, 24339], 24041, 27742, 25329, 36129, 20849, 38057, 21246, 27807, 33503, 29399, 22434, 26500, 36141, 22815, 36764, 33735, 21653, 31629, 20272, 27837, 23396, 22993, [12238, 40723], 21476, 34506, [12219, 39592], [12181, 35895], 32929, 25925, 39038, 22266, 38599, 21038, [12128, 29916], 21072, 23521, 25346, 35074, 20054, 25296, 24618, 26874, 20851, 23448, 20896, 35266, 31649, 39302, 32592, 24815, 28748, 36143, 20809, [12084, 24191], 36891, 29808, 35268, 22317, 30789, 24402, 40863, 38394, 36712, [12225, 39740], 35809, 30328, 26690, 26588, 36330, 36149, 21053, 36746, 28378, 26829, 38149, 37101, 22269, 26524, 35065, 36807, 21704, 39608, 23401, 28023, 27686, 20133, 23475, 39559, 37219, 25e3, 37039, 38889, 21547, 28085, 23506, 20989, 21898, 32597, 32752, 25788, 25421, 26097, 25022, 24717, 28938, 27735, 27721, 22831, 26477, 33322, 22741, 22158, 35946, 27627, 37085, 22909, 32791, 21495, 28009, 21621, 21917, 33655, 33743, 26680, [12146, 31166], 21644, 20309, 21512, 30418, 35977, 38402, 27827, 28088, 36203, 35088, 40548, 36154, 22079, [12234, 40657], 30165, 24456, 29408, 24680, 21756, 20136, 27178, 34913, 24658, 36720, 21700, 28888, 34425, 40511, 27946, 23439, 24344, 32418, 21897, 20399, 29492, 21564, 21402, 20505, 21518, 21628, 20046, 24573, 29786, 22774, 33899, 32993, 34676, 29392, 31946, 28246, 24359, 34382, 21804, 25252, 20114, 27818, 25143, 33457, 21719, 21326, 29502, 28369, 30011, 21010, 21270, 35805, 27088, 24458, 24576, 28142, 22351, 27426, 29615, 26707, 36824, 32531, 25442, 24739, 21796, 30186, 35938, 28949, 28067, 23462, 24187, 33618, 24908, 40644, 30970, 34647, 31783, 30343, 20976, 24822, 29004, 26179, 24140, 24653, 35854, 28784, 25381, 36745, 24509, 24674, 34516, 22238, 27585, 24724, 24935, 21321, 24800, 26214, 36159, 31229, 20250, 28905, 27719, 35763, 35826, 32472, 33636, 26127, 23130, 39746, 27985, 28151, 35905, 27963, 20249, [12117, 28779], 33719, 25110, 24785, 38669, 36135, 31096, 20987, 22334, 22522, 26426, 30072, 31293, 31215, 31637, 32908, 39269, 36857, 28608, 35749, 40481, 23020, 32489, 32521, 21513, 26497, 26840, 36753, 31821, 38598, 21450, 24613, 30142, 27762, 21363, 23241, 32423, 25380, [12047, 20960], 33034, [12080, 24049], 34015, 25216, 20864, 23395, 20238, 31085, 21058, 24760, 27982, 23492, 23490, 35745, 35760, 26082, 24524, 38469, 22931, 32487, 32426, 22025, 26551, 22841, 20339, 23478, 21152, 33626, 39050, 36158, 30002, 38078, 20551, 31292, 20215, 26550, 39550, 23233, 27516, 30417, 22362, 23574, 31546, 38388, 29006, 20860, 32937, 33392, 22904, 32516, 33575, 26816, 26604, 30897, 30839, 25315, 25441, 31616, 20461, 21098, 20943, 33616, 27099, 37492, 36341, 36145, 35265, 38190, 31661, 20214, 20581, 33328, 21073, 39279, 28176, 28293, 28071, 24314, 20725, 23004, 23558, 27974, 27743, 30086, 33931, 26728, 22870, 35762, 21280, 37233, 38477, 34121, 26898, 30977, 28966, 33014, 20132, 37066, 27975, 39556, 23047, 22204, 25605, 38128, 30699, 20389, 33050, 29409, [12179, 35282], 39290, 32564, 32478, 21119, 25945, 37237, 36735, 36739, 21483, 31382, 25581, 25509, 30342, 31224, 34903, 38454, 25130, 21163, 33410, 26708, 26480, 25463, 30571, 31469, 27905, 32467, 35299, 22992, 25106, 34249, 33445, 30028, 20511, 20171, 30117, 35819, 23626, [12081, 24062], 31563, [12100, 26020], [12198, 37329], 20170, 27941, 35167, 32039, 38182, 20165, 35880, 36827, 38771, 26187, 31105, 36817, 28908, 28024, 23613, 21170, 33606, 20834, 33550, 30555, 26230, 40120, 20140, 24778, 31934, 31923, 32463, 20117, 35686, 26223, 39048, 38745, 22659, 25964, 38236, 24452, 30153, 38742, 31455, 31454, 20928, 28847, 31384, 25578, 31350, 32416, 29590, [12210, 38893], 20037, 28792, 20061, 37202, 21417, 25937, 26087, [12165, 33276], 33285, 21646, 23601, 30106, 38816, 25304, 29401, 30141, 23621, 39545, 33738, 23616, 21632, 30697, 20030, 27822, 32858, 25298, 25454, 24040, 20855, 36317, 36382, 38191, 20465, 21477, 24807, 28844, 21095, 25424, 40515, 23071, 20518, 30519, 21367, 32482, 25733, 25899, 25225, 25496, 20500, 29237, 35273, 20915, 35776, 32477, 22343, 33740, 38055, 20891, 21531, 23803, 20426, 31459, 27994, 37089, 39567, 21888, 21654, 21345, 21679, 24320, 25577, 26999, 20975, 24936, 21002, 22570, 21208, 22350, 30733, 30475, 24247, 24951, 31968, 25179, 25239, 20130, 28821, 32771, 25335, 28900, 38752, 22391, 33499, 26607, 26869, 30933, 39063, 31185, 22771, 21683, 21487, 28212, 20811, 21051, 23458, 35838, 32943, 21827, 22438, 24691, 22353, 21549, 31354, 24656, 23380, 25511, 25248, [12061, 21475], 25187, 23495, 26543, 21741, 31391, 33510, 37239, 24211, 35044, 22840, 22446, 25358, 36328, 33007, 22359, 31607, 20393, 24555, 23485, 27454, 21281, 31568, 29378, 26694, 30719, 30518, 26103, 20917, 20111, 30420, 23743, 31397, 33909, 22862, 39745, 20608, 39304, 24871, 28291, 22372, 26118, 25414, 22256, 25324, 25193, 24275, 38420, 22403, 25289, 21895, 34593, 33098, 36771, 21862, 33713, 26469, 36182, 34013, 23146, 26639, 25318, 31726, 38417, 20848, 28572, 35888, 25597, 35272, 25042, 32518, 28866, 28389, 29701, 27028, 29436, 24266, 37070, 26391, 28010, 25438, 21171, 29282, [12156, 32769], 20332, 23013, 37226, 28889, 28061, 21202, 20048, 38647, 38253, 34174, 30922, 32047, 20769, 22418, 25794, 32907, 31867, 27882, 26865, 26974, 20919, 21400, 26792, 29313, 40654, 31729, 29432, 31163, 28435, 29702, 26446, [12197, 37324], 40100, 31036, 33673, 33620, 21519, 26647, 20029, 21385, 21169, 30782, 21382, 21033, 20616, 20363, 20432, 30178, [12148, 31435], 31890, 27813, [12202, 38582], [12050, 21147], 29827, 21737, 20457, 32852, 33714, 36830, 38256, 24265, 24604, 28063, 24088, 25947, 33080, 38142, 24651, 28860, 32451, 31918, 20937, 26753, 31921, 33391, 20004, 36742, 37327, 26238, 20142, 35845, 25769, 32842, 20698, 30103, 29134, 23525, 36797, 28518, 20102, 25730, 38243, 24278, 26009, 21015, 35010, 28872, 21155, 29454, 29747, 26519, 30967, 38678, 20020, 37051, 40158, 28107, 20955, 36161, 21533, 25294, 29618, 33777, 38646, 40836, 38083, 20278, 32666, 20940, 28789, 38517, 23725, 39046, 21478, 20196, 28316, 29705, 27060, 30827, 39311, 30041, 21016, 30244, 27969, 26611, 20845, 40857, 32843, 21657, 31548, 31423, 38534, 22404, 25314, 38471, 27004, 23044, 25602, 31699, 28431, 38475, 33446, 21346, 39045, 24208, 28809, 25523, 21348, 34383, 40065, 40595, 30860, 38706, 36335, 36162, [12229, 40575], 28510, 31108, 24405, 38470, 25134, 39540, 21525, 38109, 20387, 26053, 23653, 23649, 32533, 34385, 27695, 24459, 29575, 28388, 32511, 23782, 25371, 23402, 28390, 21365, 20081, 25504, 30053, 25249, 36718, 20262, 20177, 27814, 32438, 35770, 33821, 34746, 32599, 36923, 38179, 31657, 39585, 35064, 33853, 27931, 39558, 32476, 22920, [12231, 40635], 29595, 30721, 34434, 39532, 39554, 22043, 21527, 22475, 20080, 40614, 21334, 36808, 33033, 30610, 39314, 34542, 28385, 34067, 26364, 24930, 28459, 35881, 33426, 33579, 30450, 27667, 24537, 33725, 29483, 33541, 38170, [12113, 27611], [12141, 30683], 38086, 21359, 33538, 20882, 24125, 35980, 36152, 20040, 29611, 26522, 26757, 37238, 38665, 29028, 27809, 30473, 23186, 38209, 27599, 32654, 26151, 23504, 22969, 23194, 38376, 38391, 20204, 33804, 33945, 27308, 30431, 38192, 29467, 26790, 23391, 30511, 37274, 38753, 31964, 36855, 35868, 24357, [12150, 31859], 31192, 35269, 27852, 34588, 23494, 24130, 26825, 30496, 32501, 20885, 20813, 21193, 23081, 32517, [12207, 38754], 33495, 25551, 30596, 34256, 31186, 28218, 24217, 22937, 34065, 28781, 27665, 25279, [12139, 30399], 25935, 24751, 38397, 26126, 34719, 40483, 38125, 21517, 21629, 35884, { f: 2, c: 25720 }, 34321, 27169, 33180, 30952, 25705, 39764, 25273, 26411, 33707, 22696, 40664, 27819, 28448, 23518, 38476, 35851, 29279, 26576, 25287, 29281, 20137, 22982, 27597, 22675, 26286, 24149, 21215, 24917, [12106, 26408], [12140, 30446], 30566, 29287, 31302, 25343, 21738, 21584, 38048, 37027, 23068, 32435, 27670, 20035, 22902, 32784, 22856, 21335, 30007, 38590, 22218, 25376, 33041, 24700, 38393, 28118, 21602, 39297, 20869, 23273, 33021, 22958, 38675, 20522, 27877, 23612, 25311, 20320, 21311, 33147, 36870, 28346, 34091, 25288, 24180, 30910, 25781, 25467, 24565, 23064, 37247, 40479, 23615, 25423, 32834, 23421, 21870, 38218, 38221, 28037, 24744, 26592, 29406, 20957, 23425, 25319, 27870, [12124, 29275], 25197, 38062, 32445, 33043, 27987, 20892, 24324, 22900, 21162, 24594, [12069, 22899], 26262, 34384, 30111, 25386, 25062, 31983, 35834, 21734, 27431, 40485, 27572, 34261, 21589, 20598, 27812, 21866, 36276, 29228, 24085, 24597, 29750, 25293, 25490, 29260, 24472, 28227, 27966, 25856, 28504, 30424, 30928, 30460, 30036, 21028, 21467, 20051, 24222, 26049, 32810, 32982, 25243, 21638, 21032, 28846, 34957, 36305, 27873, 21624, 32986, 22521, 35060, 36180, 38506, 37197, 20329, 27803, 21943, 30406, 30768, 25256, 28921, 28558, 24429, 34028, 26842, 30844, 31735, 33192, 26379, 40527, 25447, 30896, 22383, 30738, 38713, 25209, 25259, 21128, 29749, 27607, 21860, 33086, 30130, [12138, 30382], 21305, 30174, 20731, 23617, 35692, 31687, 20559, [12122, 29255], 39575, 39128, 28418, 29922, 31080, 25735, 30629, 25340, 39057, 36139, 21697, 32856, 20050, 22378, 33529, 33805, 24179, 20973, 29942, 35780, 23631, 22369, 27900, 39047, 23110, 30772, 39748, 36843, 31893, 21078, 25169, 38138, 20166, 33670, 33889, 33769, 33970, 22484, 26420, 22275, 26222, 28006, 35889, 26333, 28689, 26399, 27450, 26646, 25114, 22971, 19971, 20932, 28422, 26578, 27791, 20854, 26827, 22855, 27495, 30054, 23822, 33040, 40784, 26071, 31048, 31041, 39569, 36215, 23682, 20062, 20225, 21551, 22865, 30732, 22120, [12115, 27668], 36804, 24323, 27773, 27875, 35755, 25488, 24688, 27965, 29301, 25190, 38030, 38085, 21315, 36801, 31614, 20191, 35878, 20094, 40660, 38065, 38067, 21069, 28508, 36963, 27973, 35892, 22545, 23884, [12107, 27424], 27465, 26538, 21595, 33108, 32652, 22681, 34103, 24378, 25250, 27207, 38201, 25970, 24708, 26725, 30631, 20052, 20392, 24039, 38808, 25772, 32728, 23789, 20431, 31373, 20999, 33540, 19988, 24623, 31363, 38054, 20405, 20146, 31206, 29748, 21220, 33465, 25810, 31165, 23517, 27777, 38738, 36731, 27682, 20542, 21375, 28165, 25806, 26228, 27696, 24773, 39031, 35831, 24198, 29756, 31351, 31179, 19992, 37041, 29699, 27714, 22234, 37195, 27845, 36235, 21306, 34502, 26354, 36527, 23624, 39537, 28192, 21462, 23094, 40843, 36259, 21435, 22280, 39079, 26435, 37275, 27849, 20840, 30154, 25331, [12125, 29356], 21048, 21149, 32570, 28820, 30264, 21364, 40522, 27063, 30830, 38592, 35033, 32676, 28982, 29123, 20873, 26579, 29924, 22756, 25880, 22199, 35753, 39286, 25200, 32469, 24825, 28909, 22764, 20161, [12040, 20154], 24525, 38887, 20219, 35748, 20995, 22922, 32427, 25172, 20173, [12103, 26085], 25102, 33592, 33993, 33635, 34701, 29076, 28342, 23481, 32466, 20887, 25545, 26580, [12161, 32905], 33593, 34837, 20754, 23418, 22914, 36785, 20083, 27741, [12042, 20837], 35109, 36719, 38446, 34122, 29790, 38160, 38384, 28070, 33509, 24369, 25746, 27922, 33832, 33134, 40131, 22622, 36187, 19977, 21441, 20254, 25955, 26705, 21971, 20007, 25620, 39578, 25195, 23234, 29791, [12170, 33394], 28073, 26862, 20711, 33678, 30722, 26432, 21049, 27801, 32433, 20667, 21861, 29022, 31579, 26194, 29642, 33515, 26441, [12077, 23665], 21024, 29053, 34923, 38378, 38485, 25797, 36193, 33203, 21892, 27733, 25159, 32558, 22674, 20260, 21830, 36175, 26188, 19978, 23578, 35059, 26786, 25422, 31245, 28903, 33421, 21242, 38902, 23569, 21736, 37045, 32461, 22882, 36170, 34503, [12166, 33292], 33293, 36198, 25668, 23556, 24913, 28041, 31038, 35774, 30775, 30003, 21627, 20280, [12189, 36523], 28145, 23072, 32453, 31070, 27784, 23457, 23158, 29978, 32958, 24910, 28183, 22768, [12131, 29983], 29989, 29298, 21319, 32499, 30465, 30427, 21097, 32988, 22307, 24072, 22833, 29422, 26045, 28287, 35799, [12075, 23608], 34417, [12055, 21313], [12143, 30707], 25342, 26102, 20160, [12215, 39135], 34432, 23454, 35782, 21490, [12142, 30690], 20351, 23630, 39542, 22987, 24335, [12144, 31034], [12064, 22763], 19990, 26623, 20107, 25325, 35475, 36893, 21183, 26159, 21980, 22124, 36866, 20181, 20365, 37322, 39280, [12114, 27663], 24066, 24643, 23460, 35270, 35797, 25910, [12095, 25163], [12216, 39318], 23432, 23551, 25480, 21806, 21463, 30246, 20861, 34092, 26530, 26803, 27530, 25234, 36755, 21460, 33298, 28113, 30095, 20070, 36174, 23408, 29087, 34223, 26257, 26329, 32626, 34560, [12233, 40653], [12239, 40736], 23646, 26415, 36848, 26641, 26463, 25101, 31446, 22661, 24246, 25968, 28465, 24661, 21047, 32781, 25684, 34928, 29993, 24069, 26643, 25332, 38684, 21452, 29245, 35841, [12116, 27700], 30561, 31246, 21550, 30636, 39034, 33308, 35828, 30805, 26388, 28865, 26031, 25749, 22070, 24605, 31169, 21496, 19997, 27515, 32902, 23546, 21987, 22235, 20282, 20284, 39282, 24051, 26494, 32824, 24578, 39042, 36865, 23435, 35772, 35829, 25628, 33368, 25822, 22013, 33487, 37221, 20439, 32032, 36895, 31903, 20723, 22609, 28335, 23487, 35785, 32899, 37240, 33948, 31639, 34429, 38539, 38543, 32485, 39635, 30862, 23681, 31319, 36930, 38567, 31071, 23385, 25439, 31499, 34001, 26797, 21766, 32553, 29712, 32034, 38145, 25152, 22604, 20182, 23427, 22905, 22612, 29549, 25374, 36427, 36367, 32974, 33492, 25260, 21488, 27888, 37214, 22826, 24577, 27760, 22349, 25674, 36138, 30251, 28393, 22363, 27264, 30192, 28525, 35885, 35848, 22374, 27631, 34962, 30899, 25506, 21497, 28845, 27748, 22616, 25642, 22530, 26848, 33179, 21776, 31958, 20504, 36538, 28108, 36255, 28907, 25487, 28059, 28372, 32486, 33796, 26691, 36867, 28120, 38518, 35752, 22871, 29305, 34276, 33150, 30140, 35466, 26799, 21076, 36386, 38161, 25552, 39064, 36420, 21884, 20307, 26367, 22159, 24789, 28053, 21059, 23625, 22825, 28155, 22635, [12133, 3e4], 29980, 24684, 33300, 33094, 25361, 26465, 36834, 30522, 36339, 36148, 38081, 24086, 21381, 21548, 28867, 27712, 24311, 20572, 20141, 24237, 25402, 33351, 36890, 26704, 37230, 30643, 21516, 38108, 24420, 31461, 26742, 25413, 31570, 32479, 30171, 20599, 25237, 22836, 36879, 20984, 31171, 31361, 22270, 24466, 36884, 28034, 23648, [12063, 22303], 21520, 20820, 28237, 22242, 25512, 39059, 33151, 34581, 35114, 36864, 21534, 23663, 33216, 25302, 25176, 33073, 40501, 38464, 39534, 39548, 26925, 22949, 25299, 21822, 25366, 21703, 34521, 27964, 23043, [12129, 29926], 34972, 27498, 22806, 35916, 24367, 28286, 29609, 39037, 20024, 28919, 23436, 30871, 25405, 26202, 30358, 24779, 23451, 23113, 19975, 33109, 27754, 29579, 20129, 26505, [12153, 32593], 24448, 26106, 26395, 24536, 22916, 23041, 24013, 24494, 21361, 38886, 36829, 26693, 22260, 21807, 24799, 20026, 28493, 32500, 33479, 33806, 22996, 20255, 20266, 23614, 32428, 26410, 34074, 21619, 30031, 32963, 21890, 39759, 20301, 28205, 35859, 23561, 24944, 21355, 30239, 28201, 34442, [12098, 25991], 38395, 32441, 21563, 31283, 32010, 38382, 21985, 32705, 29934, 25373, 34583, 28065, 31389, 25105, 26017, 21351, 25569, 27779, 24043, 21596, 38056, 20044, 27745, 35820, 23627, [12102, 26080], 33436, 26791, 21566, 21556, [12111, 27595], 27494, 20116, 25410, 21320, 33310, 20237, 20398, 22366, 25098, 38654, 26212, 29289, 21247, 21153, 24735, 35823, 26132, 29081, 26512, 35199, 30802, 30717, 26224, 22075, 21560, 38177, 29306, 31232, 24687, 24076, 24713, 33181, [12067, 22805], 24796, 29060, 28911, 28330, 27728, 29312, 27268, 34989, 24109, 20064, 23219, 21916, 38115, 27927, 31995, 38553, 25103, 32454, 30606, 34430, 21283, 38686, 36758, 26247, 23777, 20384, 29421, 19979, 21414, 22799, 21523, 25472, 38184, 20808, 20185, 40092, 32420, 21688, 36132, 34900, 33335, 38386, 28046, 24358, 23244, 26174, 38505, 29616, 29486, 21439, 33146, 39301, 32673, 23466, 38519, 38480, 32447, 30456, 21410, 38262, [12217, 39321], 31665, 35140, 28248, 20065, 32724, 31077, 35814, 24819, 21709, 20139, 39033, 24055, 27233, 20687, 21521, 35937, 33831, 30813, 38660, 21066, 21742, 22179, 38144, 28040, 23477, 28102, 26195, [12073, 23567], 23389, 26657, 32918, 21880, 31505, 25928, 26964, 20123, 27463, 34638, 38795, 21327, 25375, 25658, 37034, 26012, 32961, 35856, 20889, 26800, 21368, 34809, 25032, 27844, 27899, 35874, 23633, 34218, 33455, 38156, 27427, [12191, 36763], 26032, 24571, [12092, 24515], 20449, 34885, 26143, 33125, 29481, 24826, 20852, 21009, 22411, 24418, 37026, [12175, 34892], 37266, 24184, 26447, 24615, 22995, 20804, 20982, 33016, 21256, 27769, 38596, 29066, 20241, 20462, 32670, 26429, 21957, 38152, 31168, 34966, 32483, 22687, 25100, 38656, 34394, 22040, 39035, 24464, 35768, 33988, 37207, 21465, 26093, 24207, 30044, 24676, 32110, 23167, 32490, 32493, 36713, 21927, 23459, 24748, 26059, [12126, 29572], 36873, 30307, 30505, 32474, 38772, 34203, 23398, [12147, 31348], 38634, [12174, 34880], 21195, 29071, 24490, 26092, 35810, 23547, 39535, 24033, 27529, 27739, 35757, 35759, 36874, 36805, 21387, 25276, 40486, 40493, 21568, 20011, 33469, [12123, 29273], 34460, 23830, 34905, 28079, 38597, 21713, 20122, 35766, 28937, 21693, 38409, 28895, 28153, 30416, 20005, 30740, 34578, 23721, 24310, [12180, 35328], 39068, 38414, 28814, 27839, 22852, 25513, 30524, 34893, 28436, 33395, 22576, 29141, 21388, 30746, 38593, 21761, 24422, 28976, 23476, 35866, 39564, 27523, 22830, 40495, 31207, 26472, 25196, 20335, 30113, [12154, 32650], 27915, 38451, 27687, 20208, 30162, 20859, 26679, 28478, 36992, 33136, 22934, 29814, 25671, 23591, 36965, 31377, 35875, 23002, 21676, 33280, 33647, 35201, 32768, 26928, 22094, 32822, 29239, 37326, 20918, 20063, 39029, 25494, 19994, 21494, 26355, 33099, 22812, 28082, [12032, 19968], 22777, 21307, 25558, 38129, 20381, 20234, [12176, 34915], 39056, 22839, 36951, 31227, 20202, 33008, 30097, 27778, 23452, 23016, 24413, 26885, 34433, 20506, 24050, [12036, 20057], 30691, 20197, 33402, 25233, 26131, [12194, 37009], 23673, 20159, 24441, 33222, 36920, 32900, 30123, 20134, 35028, 24847, 27589, 24518, 20041, 30410, 28322, 35811, 35758, 35850, 35793, 24322, 32764, 32716, 32462, 33589, 33643, 22240, 27575, [12211, 38899], 38452, 23035, 21535, 38134, 28139, 23493, 39278, 23609, 24341, 38544, 21360, 33521, 27185, 23156, 40560, 24212, 32552, 33721, { f: 2, c: 33828 }, 33639, 34631, 36814, 36194, 30408, 24433, 39062, 30828, 26144, 21727, 25317, 20323, 33219, 30152, 24248, 38605, 36362, 34553, 21647, 27891, 28044, 27704, 24703, 21191, [12132, 29992], 24189, 20248, 24736, 24551, 23588, 30001, 37038, 38080, 29369, 27833, 28216, [12195, 37193], 26377, 21451, 21491, 20305, 37321, 35825, [12060, 21448], 24188, 36802, 28132, 20110, 30402, 27014, 34398, 24858, 33286, 20313, 20446, 36926, 40060, 24841, 28189, 28180, 38533, 20104, 23089, [12204, 38632], 19982, 23679, 31161, 23431, 35821, [12155, 32701], [12127, 29577], 22495, 33419, 37057, 21505, 36935, 21947, 23786, 24481, 24840, 27442, 29425, 32946, 35465, 28020, 23507, 35029, 39044, 35947, 39533, 40499, 28170, 20900, 20803, 22435, 34945, 21407, 25588, 36757, 22253, 21592, 22278, 29503, 28304, 32536, 36828, 33489, 24895, 24616, 38498, [12104, 26352], 32422, 36234, 36291, 38053, 23731, 31908, [12105, 26376], 24742, 38405, 32792, 20113, 37095, 21248, 38504, 20801, 36816, 34164, 37213, 26197, 38901, 23381, 21277, 30776, 26434, 26685, 21705, 28798, 23472, 36733, 20877, 22312, 21681, 25874, 26242, 36190, 36163, 33039, 33900, 36973, 31967, 20991, 34299, 26531, 26089, 28577, 34468, 36481, 22122, 36896, 30338, 28790, 29157, 36131, 25321, 21017, 27901, 36156, 24590, 22686, 24974, 26366, 36192, 25166, 21939, 28195, 26413, 36711, 38113, 38392, 30504, 26629, 27048, 21643, 20045, 28856, 35784, 25688, 25995, 23429, 31364, 20538, 23528, 30651, 27617, 35449, 31896, 27838, 30415, 26025, 36759, 23853, 23637, 34360, 26632, 21344, 25112, 31449, 28251, 32509, 27167, 31456, 24432, 28467, 24352, 25484, 28072, 26454, 19976, 24080, 36134, 20183, 32960, 30260, 38556, 25307, 26157, 25214, 27836, 36213, 29031, 32617, 20806, 32903, 21484, 36974, 25240, 21746, 34544, 36761, 32773, 38167, 34071, 36825, 27993, 29645, 26015, 30495, 29956, 30759, 33275, 36126, 38024, 20390, 26517, 30137, 35786, 38663, 25391, 38215, 38453, 33976, 25379, 30529, 24449, 29424, 20105, 24596, 25972, 25327, 27491, 25919, 24103, 30151, 37073, 35777, 33437, 26525, [12096, 25903], 21553, 34584, 30693, 32930, 33026, 27713, 20043, 32455, 32844, 30452, 26893, 27542, 25191, 20540, 20356, 22336, 25351, [12108, 27490], 36286, 21482, 26088, 32440, 24535, 25370, 25527, [12164, 33267], 33268, 32622, 24092, 23769, 21046, 26234, 31209, 31258, 36136, 28825, 30164, 28382, 27835, 31378, 20013, 30405, 24544, 38047, 34935, 32456, 31181, 32959, 37325, 20210, 20247, [12168, 33311], 21608, 24030, 27954, 35788, 31909, 36724, 32920, 24090, 21650, 30385, 23449, 26172, 39588, 29664, 26666, 34523, 26417, 29482, 35832, 35803, 36880, [12149, 31481], 28891, 29038, 25284, 30633, 22065, 20027, 33879, 26609, 21161, 34496, 36142, 38136, 31569, 20303, 27880, 31069, 39547, 25235, [12118, 29226], 25341, 19987, 30742, 36716, 25776, 36186, 31686, 26729, 24196, 35013, 22918, 25758, 22766, 29366, 26894, 38181, 36861, 36184, 22368, 32512, 35846, 20934, 25417, 25305, 21331, 26700, 29730, 33537, 37196, 21828, 30528, 28796, 27978, 20857, 21672, 36164, 23039, 28363, 28100, 23388, 32043, 20180, 31869, 28371, [12070, 23376], [12163, 33258], 28173, 23383, 39683, 26837, 36394, 23447, 32508, 24635, 32437, 37049, [12187, 36208], 22863, 25549, 31199, [12188, 36275], 21330, 26063, 31062, 35781, 38459, 32452, 38075, 32386, 22068, 37257, 26368, 32618, 23562, 36981, 26152, 24038, 20304, 26590, 20570, 20316, 22352, 24231, 20109, 19980, 20800, 19984, 24319, 21317, 19989, 20120, 19998, [12224, 39730], 23404, 22121, [12033, 20008], 31162, [12035, 20031], [12052, 21269], 20039, 22829, [12120, 29243], 21358, 27664, 22239, 32996, 39319, 27603, 30590, 40727, [12034, 20022], 20127, 40720, 20060, 20073, 20115, 33416, 23387, 21868, 22031, 20164, 21389, 21405, 21411, 21413, 21422, 38757, 36189, [12053, 21274], 21493, 21286, 21294, 21310, 36188, 21350, 21347, 20994, 21e3, 21006, 21037, 21043, { f: 2, c: 21055 }, 21068, 21086, 21089, 21084, 33967, 21117, 21122, 21121, 21136, 21139, [12044, 20866], 32596, 20155, 20163, 20169, 20162, 20200, 20193, 20203, 20190, 20251, 20211, 20258, 20324, 20213, 20261, 20263, 20233, 20267, 20318, 20327, 25912, 20314, 20317, 20319, 20311, 20274, 20285, 20342, 20340, 20369, 20361, 20355, 20367, 20350, 20347, 20394, 20348, 20396, 20372, 20454, 20456, 20458, 20421, 20442, 20451, 20444, 20433, 20447, 20472, 20521, 20556, 20467, 20524, 20495, 20526, 20525, 20478, 20508, 20492, 20517, 20520, 20606, 20547, 20565, 20552, 20558, 20588, 20603, 20645, 20647, 20649, 20666, 20694, 20742, 20717, 20716, 20710, 20718, 20743, 20747, 20189, 27709, 20312, 20325, 20430, [12245, 40864], 27718, 31860, 20846, 24061, 40649, 39320, 20865, 22804, [12051, 21241], 21261, 35335, 21264, 20971, 22809, 20821, [12039, 20128], 20822, 20147, 34926, 34980, 20149, 33044, 35026, 31104, 23348, 34819, 32696, [12046, 20907], 20913, 20925, 20924, 20935, [12045, 20886], 20898, 20901, 35744, { f: 2, c: 35750 }, 35754, { f: 2, c: 35764 }, 35767, { f: 2, c: 35778 }, 35787, 35791, 35790, { f: 3, c: 35794 }, 35798, { f: 2, c: 35800 }, 35804, { f: 2, c: 35807 }, 35812, { f: 2, c: 35816 }, 35822, 35824, 35827, 35830, 35833, 35836, { f: 2, c: 35839 }, 35842, 35844, 35847, 35852, 35855, { f: 2, c: 35857 }, { f: 3, c: 35860 }, 35865, 35867, 35864, 35869, { f: 3, c: 35871 }, 35877, 35879, { f: 2, c: 35882 }, { f: 2, c: 35886 }, { f: 2, c: 35890 }, { f: 2, c: 35893 }, [12057, 21353], 21370, 38429, 38434, 38433, 38449, 38442, 38461, 38460, 38466, 38473, 38484, 38495, 38503, 38508, 38514, 38516, 38536, 38541, 38551, 38576, 37015, 37019, 37021, 37017, 37036, 37025, 37044, 37043, 37046, 37050, 37048, 37040, 37071, 37061, 37054, 37072, 37060, 37063, 37075, 37094, 37090, 37084, 37079, 37083, 37099, 37103, 37118, 37124, 37154, 37150, 37155, 37169, 37167, 37177, 37187, 37190, 21005, 22850, 21154, { f: 2, c: 21164 }, 21182, 21759, 21200, 21206, 21232, 21471, 29166, 30669, [12085, 24308], [12048, 20981], 20988, [12223, 39727], [12059, 21430], 24321, 30042, 24047, 22348, 22441, 22433, 22654, 22716, 22725, 22737, 22313, 22316, 22314, 22323, 22329, { f: 2, c: 22318 }, 22364, 22331, 22338, 22377, 22405, 22379, 22406, 22396, 22395, 22376, 22381, 22390, 22387, 22445, 22436, 22412, 22450, 22479, 22439, 22452, 22419, 22432, 22485, 22488, 22490, 22489, 22482, 22456, 22516, 22511, 22520, 22500, 22493, 22539, 22541, 22525, 22509, 22528, 22558, 22553, 22596, 22560, 22629, 22636, 22657, 22665, 22682, 22656, 39336, 40729, 25087, 33401, 33405, 33407, 33423, 33418, 33448, 33412, 33422, 33425, 33431, 33433, 33451, 33464, 33470, 33456, 33480, 33482, 33507, 33432, 33463, 33454, { f: 2, c: 33483 }, 33473, 33449, 33460, 33441, 33450, 33439, 33476, 33486, 33444, 33505, 33545, 33527, 33508, 33551, 33543, 33500, 33524, 33490, 33496, 33548, 33531, 33491, 33553, 33562, 33542, { f: 2, c: 33556 }, 33504, 33493, 33564, 33617, { f: 2, c: 33627 }, 33544, 33682, 33596, 33588, 33585, 33691, 33630, 33583, 33615, 33607, 33603, 33631, 33600, 33559, 33632, 33581, 33594, 33587, 33638, 33637, 33640, 33563, 33641, 33644, 33642, { f: 2, c: 33645 }, 33712, 33656, { f: 2, c: 33715 }, 33696, 33706, 33683, 33692, 33669, 33660, 33718, 33705, 33661, 33720, 33659, 33688, 33694, 33704, 33722, 33724, 33729, 33793, 33765, 33752, 22535, 33816, 33803, 33757, 33789, 33750, 33820, 33848, 33809, 33798, 33748, 33759, 33807, 33795, { f: 2, c: 33784 }, 33770, 33733, 33728, 33830, 33776, 33761, 33884, 33873, 33882, 33881, 33907, { f: 2, c: 33927 }, 33914, 33929, 33912, 33852, 33862, 33897, 33910, 33932, 33934, 33841, 33901, 33985, 33997, 34e3, 34022, 33981, 34003, 33994, 33983, 33978, 34016, 33953, 33977, 33972, 33943, 34021, 34019, 34060, 29965, 34104, 34032, 34105, 34079, 34106, 34134, 34107, 34047, 34044, 34137, 34120, 34152, 34148, 34142, 34170, 30626, 34115, 34162, 34171, 34212, 34216, 34183, 34191, 34169, 34222, 34204, 34181, 34233, 34231, 34224, 34259, 34241, 34268, 34303, 34343, 34309, 34345, 34326, 34364, [12086, 24318], 24328, 22844, 22849, 32823, 22869, 22874, 22872, 21263, [12074, 23586], 23589, 23596, 23604, 25164, 25194, 25247, 25275, 25290, 25306, 25303, 25326, 25378, 25334, 25401, 25419, 25411, 25517, 25590, 25457, 25466, 25486, 25524, 25453, 25516, 25482, 25449, 25518, 25532, 25586, 25592, 25568, 25599, 25540, 25566, 25550, 25682, 25542, 25534, 25669, 25665, 25611, 25627, 25632, 25612, 25638, 25633, 25694, 25732, 25709, 25750, 25722, { f: 2, c: 25783 }, 25753, 25786, 25792, 25808, 25815, 25828, 25826, 25865, 25893, 25902, [12087, 24331], 24530, 29977, 24337, 21343, 21489, 21501, 21481, 21480, 21499, 21522, 21526, 21510, 21579, { f: 3, c: 21586 }, 21590, 21571, 21537, 21591, 21593, 21539, 21554, 21634, 21652, 21623, 21617, 21604, { f: 2, c: 21658 }, 21636, 21622, 21606, 21661, 21712, 21677, 21698, 21684, 21714, 21671, 21670, { f: 2, c: 21715 }, 21618, 21667, 21717, 21691, 21695, 21708, { f: 2, c: 21721 }, 21724, { f: 2, c: 21673 }, 21668, 21725, 21711, 21726, 21787, 21735, 21792, 21757, 21780, 21747, { f: 2, c: 21794 }, 21775, 21777, 21799, 21802, 21863, 21903, 21941, 21833, 21869, 21825, 21845, 21823, 21840, 21820, 21815, 21846, { f: 3, c: 21877 }, 21811, 21808, 21852, 21899, 21970, 21891, 21937, 21945, 21896, 21889, 21919, 21886, 21974, 21905, 21883, 21983, { f: 2, c: 21949 }, 21908, 21913, 21994, 22007, 21961, 22047, 21969, { f: 2, c: 21995 }, 21972, 21990, 21981, 21956, 21999, 21989, { f: 2, c: 22002 }, { f: 2, c: 21964 }, 21992, 22005, 21988, 36756, 22046, 22024, 22028, 22017, 22052, 22051, 22014, 22016, 22055, 22061, 22104, 22073, 22103, 22060, 22093, 22114, 22105, 22108, 22092, 22100, 22150, 22116, 22129, 22123, { f: 2, c: 22139 }, 22149, 22163, 22191, 22228, [12062, 22231], 22237, 22241, 22261, 22251, 22265, 22271, 22276, 22282, 22281, 22300, 24079, 24089, 24084, 24081, 24113, { f: 2, c: 24123 }, 24119, 24132, 24148, 24155, 24158, 24161, 23692, 23674, 23693, 23696, 23702, 23688, { f: 2, c: 23704 }, 23697, 23706, 23708, 23733, 23714, 23741, 23724, 23723, 23729, 23715, 23745, 23735, 23748, 23762, 23780, 23755, 23781, { f: 2, c: 23810 }, 23847, 23846, 23854, 23844, 23838, 23814, 23835, 23896, 23870, 23860, 23869, 23916, 23899, 23919, 23901, 23915, 23883, 23882, 23913, 23924, 23938, 23961, 23965, 35955, 23991, 24005, [12091, 24435], 24439, 24450, 24455, 24457, 24460, 24469, 24473, 24476, 24488, 24493, 24501, 24508, 34914, [12090, 24417], 29357, 29360, 29364, { f: 2, c: 29367 }, 29379, 29377, 29390, 29389, 29394, 29416, 29423, 29417, 29426, 29428, 29431, 29441, 29427, 29443, { f: 2, c: 29434 }, 29463, 29459, 29473, 29450, 29470, 29469, 29461, 29474, 29497, 29477, 29484, 29496, 29489, 29520, 29517, 29527, 29536, 29548, 29551, 29566, [12167, 33307], 22821, 39143, 22820, [12065, 22786], 39267, { f: 6, c: 39271 }, 39284, 39287, 39293, 39296, 39300, 39303, 39306, 39309, { f: 2, c: 39312 }, { f: 3, c: 39315 }, 24192, 24209, 24203, 24214, 24229, 24224, 24249, 24245, 24254, 24243, 36179, 24274, 24273, 24283, 24296, 24298, 33210, 24516, 24521, 24534, 24527, 24579, 24558, 24580, 24545, 24548, 24574, { f: 2, c: 24581 }, 24554, 24557, 24568, 24601, 24629, 24614, 24603, 24591, 24589, 24617, 24619, 24586, 24639, 24609, { f: 2, c: 24696 }, 24699, 24698, 24642, 24682, 24701, 24726, 24730, 24749, 24733, 24707, 24722, 24716, 24731, 24812, 24763, 24753, 24797, 24792, 24774, 24794, 24756, 24864, 24870, 24853, 24867, 24820, 24832, 24846, 24875, 24906, 24949, 25004, 24980, 24999, 25015, 25044, 25077, 24541, 38579, 38377, 38379, 38385, 38387, { f: 2, c: 38389 }, 38396, 38398, { f: 2, c: 38403 }, 38406, 38408, { f: 4, c: 38410 }, 38415, 38418, { f: 3, c: 38421 }, { f: 2, c: 38425 }, 20012, [12121, 29247], 25109, 27701, 27732, 27740, 27722, 27811, 27781, 27792, 27796, 27788, { f: 2, c: 27752 }, 27764, 27766, 27782, 27817, 27856, 27860, 27821, { f: 2, c: 27895 }, 27889, 27863, 27826, 27872, 27862, 27898, 27883, 27886, 27825, 27859, 27887, 27902, 27961, 27943, 27916, 27971, 27976, 27911, 27908, 27929, 27918, 27947, 27981, 27950, 27957, 27930, 27983, 27986, 27988, 27955, 28049, 28015, 28062, 28064, 27998, { f: 2, c: 28051 }, 27996, 28e3, 28028, 28003, 28186, 28103, 28101, 28126, 28174, 28095, 28128, 28177, 28134, 28125, 28121, 28182, 28075, 28172, 28078, 28203, 28270, 28238, 28267, 28338, 28255, 28294, { f: 2, c: 28243 }, 28210, 28197, 28228, 28383, 28337, 28312, 28384, 28461, 28386, 28325, 28327, 28349, 28347, 28343, 28375, 28340, 28367, 28303, 28354, 28319, 28514, { f: 2, c: 28486 }, 28452, 28437, 28409, 28463, 28470, 28491, 28532, 28458, 28425, 28457, 28553, 28557, 28556, 28536, 28530, 28540, 28538, 28625, 28617, 28583, 28601, 28598, 28610, 28641, 28654, 28638, 28640, 28655, 28698, 28707, 28699, 28729, 28725, 28751, 28766, [12071, 23424], 23428, 23445, 23443, 23461, 23480, 29999, 39582, 25652, 23524, 23534, 35120, 23536, 36423, 35591, 36790, 36819, 36821, 36837, 36846, 36836, 36841, 36838, 36851, 36840, 36869, 36868, 36875, 36902, 36881, 36877, 36886, 36897, { f: 2, c: 36917 }, 36909, 36911, 36932, { f: 2, c: 36945 }, 36944, 36968, 36952, 36962, 36955, 26297, 36980, 36989, 36994, 37e3, 36995, 37003, [12089, 24400], 24407, 24406, 24408, 23611, 21675, 23632, 23641, 23409, 23651, 23654, 32700, 24362, 24361, 24365, 33396, 24380, 39739, [12076, 23662], 22913, 22915, 22925, { f: 2, c: 22953 }, 22947, 22935, 22986, 22955, 22942, 22948, 22994, 22962, 22959, 22999, 22974, { f: 2, c: 23045 }, 23005, 23048, 23011, 23e3, 23033, 23052, 23049, 23090, 23092, 23057, 23075, 23059, 23104, 23143, 23114, 23125, 23100, 23138, 23157, 33004, 23210, 23195, 23159, 23162, 23230, 23275, 23218, 23250, 23252, 23224, 23264, 23267, 23281, 23254, 23270, 23256, 23260, 23305, 23319, 23318, 23346, 23351, 23360, 23573, 23580, 23386, 23397, 23411, 23377, 23379, 23394, 39541, { f: 2, c: 39543 }, 39546, 39551, 39549, { f: 2, c: 39552 }, 39557, 39560, 39562, 39568, { f: 2, c: 39570 }, 39574, 39576, { f: 3, c: 39579 }, { f: 2, c: 39583 }, { f: 2, c: 39586 }, 39589, 39591, 32415, 32417, 32419, 32421, { f: 2, c: 32424 }, 32429, 32432, 32446, { f: 3, c: 32448 }, 32457, { f: 2, c: 32459 }, 32464, 32468, 32471, 32475, { f: 2, c: 32480 }, 32488, 32491, { f: 2, c: 32494 }, { f: 2, c: 32497 }, 32525, 32502, { f: 2, c: 32506 }, 32510, { f: 3, c: 32513 }, { f: 2, c: 32519 }, { f: 2, c: 32523 }, 32527, { f: 2, c: 32529 }, 32535, 32537, 32540, 32539, 32543, { f: 7, c: 32545 }, { f: 4, c: 32554 }, { f: 5, c: 32559 }, 32565, [12083, 24186], 30079, [12078, 24027], 30014, 37013, 29582, 29585, 29614, 29602, 29599, 29647, 29634, 29649, 29623, 29619, 29632, 29641, 29640, 29669, 29657, 39036, 29706, 29673, 29671, 29662, 29626, 29682, 29711, 29738, 29787, 29734, 29733, 29736, 29744, 29742, 29740, 29723, 29722, 29761, 29788, 29783, 29781, 29785, 29815, 29805, 29822, 29852, 29838, { f: 2, c: 29824 }, 29831, 29835, 29854, { f: 2, c: 29864 }, 29840, 29863, 29906, 29882, { f: 3, c: 38890 }, 26444, 26451, 26462, 26440, 26473, 26533, 26503, 26474, 26483, 26520, 26535, 26485, 26536, 26526, 26541, 26507, 26487, 26492, 26608, 26633, 26584, 26634, 26601, 26544, 26636, 26585, 26549, 26586, 26547, 26589, 26624, 26563, 26552, 26594, 26638, 26561, 26621, { f: 2, c: 26674 }, { f: 2, c: 26720 }, 26702, 26722, 26692, 26724, 26755, 26653, 26709, 26726, 26689, 26727, 26688, 26686, 26698, 26697, 26665, 26805, 26767, 26740, 26743, 26771, 26731, 26818, 26990, 26876, { f: 2, c: 26911 }, 26873, 26916, 26864, 26891, 26881, 26967, 26851, 26896, 26993, 26937, 26976, 26946, 26973, 27012, 26987, 27008, 27032, 27e3, 26932, 27084, { f: 2, c: 27015 }, 27086, 27017, 26982, 26979, 27001, 27035, 27047, 27067, 27051, 27053, 27092, 27057, 27073, 27082, 27103, 27029, 27104, 27021, 27135, 27183, 27117, { f: 2, c: 27159 }, 27237, 27122, 27204, 27198, 27296, 27216, 27227, 27189, 27278, 27257, 27197, 27176, 27224, 27260, 27281, 27280, 27305, 27287, 27307, 29495, 29522, { f: 2, c: 27521 }, 27527, 27524, { f: 2, c: 27538 }, 27533, { f: 2, c: 27546 }, 27553, 27562, 36715, 36717, { f: 3, c: 36721 }, { f: 2, c: 36725 }, 36728, 36727, { f: 2, c: 36729 }, 36732, 36734, { f: 2, c: 36737 }, 36740, 36743, 36747, { f: 3, c: 36749 }, 36760, 36762, 36558, 25099, 25111, 25115, 25119, 25122, 25121, 25125, 25124, 25132, 33255, 29935, 29940, 29951, 29967, 29969, 29971, [12097, 25908], { f: 3, c: 26094 }, 26122, 26137, 26482, 26115, 26133, 26112, 28805, 26359, 26141, 26164, 26161, 26166, 26165, 32774, 26207, 26196, 26177, 26191, 26198, 26209, 26199, 26231, 26244, 26252, 26279, 26269, 26302, { f: 2, c: 26331 }, 26342, 26345, { f: 2, c: 36146 }, 36150, 36155, 36157, 36160, { f: 2, c: 36165 }, { f: 2, c: 36168 }, 36167, 36173, 36181, 36185, 35271, { f: 3, c: 35274 }, { f: 4, c: 35278 }, 29294, 29343, 29277, 29286, 29295, { f: 2, c: 29310 }, 29316, 29323, 29325, 29327, 29330, 25352, 25394, 25520, 25663, 25816, 32772, 27626, 27635, 27645, 27637, 27641, 27653, 27655, 27654, 27661, 27669, { f: 3, c: 27672 }, 27681, 27689, 27684, 27690, 27698, 25909, 25941, 25963, 29261, 29266, 29270, 29232, 34402, 21014, 32927, 32924, 32915, 32956, 26378, 32957, 32945, 32939, 32941, 32948, 32951, { f: 4, c: 32999 }, 32987, 32962, 32964, 32985, 32973, 32983, 26384, 32989, 33003, 33009, 33012, 33005, { f: 2, c: 33037 }, 33010, 33020, 26389, 33042, 35930, 33078, 33054, 33068, 33048, 33074, 33096, 33100, 33107, 33140, { f: 2, c: 33113 }, 33137, 33120, 33129, { f: 2, c: 33148 }, 33133, 33127, 22605, 23221, 33160, 33154, 33169, 28373, 33187, 33194, 33228, 26406, 33226, 33211, 33217, 33190, 27428, 27447, 27449, 27459, 27462, 27481, { f: 3, c: 39121 }, 39125, { f: 2, c: 39129 }, [12110, 27571], 24384, 27586, 35315, 26e3, 40785, 26003, 26044, 26054, 26052, 26051, 26060, 26062, 26066, 26070, 28800, 28828, 28822, 28829, 28859, 28864, 28855, 28843, 28849, 28904, 28874, 28944, 28947, 28950, 28975, 28977, 29043, 29020, 29032, 28997, 29042, 29002, 29048, 29050, 29080, 29107, 29109, 29096, 29088, 29152, 29140, 29159, 29177, 29213, 29224, 28780, 28952, 29030, 29113, 25150, 25149, 25155, { f: 2, c: 25160 }, 31035, 31040, 31046, 31049, { f: 2, c: 31067 }, 31059, 31066, 31074, 31063, 31072, 31087, 31079, 31098, 31109, 31114, 31130, 31143, 31155, 24529, 24528, 24636, 24669, 24666, 24679, 24641, 24665, 24675, 24747, 24838, 24845, 24925, 25001, 24989, 25035, 25041, 25094, 32896, [12160, 32895], 27795, 27894, 28156, 30710, 30712, 30720, 30729, { f: 2, c: 30743 }, 30737, 26027, 30765, { f: 2, c: 30748 }, { f: 3, c: 30777 }, 30751, 30780, 30757, 30764, 30755, 30761, 30798, 30829, { f: 2, c: 30806 }, 30758, 30800, 30791, 30796, 30826, 30875, 30867, 30874, 30855, 30876, 30881, 30883, 30898, 30905, 30885, 30932, 30937, 30921, 30956, 30962, 30981, 30964, 30995, 31012, 31006, 31028, 40859, [12235, 40697], { f: 2, c: 40699 }, 30449, 30468, 30477, 30457, { f: 2, c: 30471 }, 30490, 30498, 30489, 30509, 30502, 30517, 30520, { f: 2, c: 30544 }, 30535, 30531, 30554, 30568, 30562, 30565, 30591, 30605, 30589, 30592, 30604, 30609, { f: 2, c: 30623 }, 30640, 30645, 30653, 30010, 30016, 30030, 30027, 30024, 30043, 30066, 30073, 30083, 32600, 32609, 32607, 35400, 32616, 32628, 32625, 32633, 32641, 32638, 30413, 30437, 34866, { f: 3, c: 38021 }, 38027, 38026, { f: 2, c: 38028 }, { f: 2, c: 38031 }, 38036, 38039, 38037, { f: 3, c: 38042 }, { f: 2, c: 38051 }, 38059, 38058, 38061, 38060, { f: 2, c: 38063 }, 38066, 38068, { f: 5, c: 38070 }, { f: 2, c: 38076 }, 38079, 38084, { f: 7, c: 38088 }, { f: 3, c: 38096 }, { f: 3, c: 38101 }, 38105, 38104, 38107, { f: 3, c: 38110 }, 38114, { f: 2, c: 38116 }, { f: 2, c: 38119 }, 38122, 38121, 38123, { f: 2, c: 38126 }, { f: 3, c: 38131 }, 38135, 38137, { f: 2, c: 38140 }, 38143, 38147, 38146, { f: 2, c: 38150 }, { f: 2, c: 38153 }, { f: 3, c: 38157 }, { f: 5, c: 38162 }, 38168, 38171, { f: 3, c: 38173 }, 38178, { f: 2, c: 38186 }, 38185, 38188, { f: 2, c: 38193 }, 38196, { f: 3, c: 38198 }, 38204, { f: 2, c: 38206 }, 38210, 38197, { f: 3, c: 38212 }, 38217, 38220, { f: 2, c: 38222 }, { f: 3, c: 38226 }, { f: 4, c: 38230 }, 38235, { f: 2, c: 38238 }, 38237, { f: 2, c: 38241 }, { f: 9, c: 38244 }, 38255, { f: 3, c: 38257 }, 38202, 30695, 30700, 38601, 31189, 31213, 31203, 31211, 31238, 23879, 31235, 31234, 31262, 31252, 31289, 31287, 31313, 40655, 39333, 31344, 30344, 30350, 30355, 30361, 30372, 29918, 29920, 29996, 40480, 40482, { f: 5, c: 40488 }, 40498, 40497, 40502, 40504, 40503, { f: 2, c: 40505 }, 40510, { f: 2, c: 40513 }, 40516, { f: 4, c: 40518 }, { f: 2, c: 40523 }, 40526, 40529, 40533, 40535, { f: 3, c: 40538 }, 40542, 40547, { f: 7, c: 40550 }, 40561, 40557, 40563, [12135, 30098], 30100, 30102, 30112, 30109, 30124, 30115, { f: 2, c: 30131 }, 30136, 30148, 30129, 30128, 30147, 30146, 30166, 30157, 30179, 30184, 30182, 30180, 30187, 30183, 30211, 30193, 30204, 30207, 30224, 30208, 30213, 30220, 30231, 30218, 30245, 30232, 30229, 30233, 30235, 30268, 30242, 30240, 30272, 30253, 30256, 30271, 30261, 30275, 30270, 30259, 30285, 30302, 30292, 30300, 30294, 30315, 30319, 32714, 31462, { f: 2, c: 31352 }, 31360, 31366, 31368, 31381, 31398, 31392, 31404, 31400, 31405, 31411, 34916, 34921, 34930, 34941, 34943, 34946, 34978, 35014, 34999, 35004, 35017, 35042, 35022, 35043, 35045, 35057, 35098, 35068, 35048, 35070, 35056, 35105, 35097, 35091, 35099, 35082, 35124, 35115, 35126, 35137, 35174, 35195, [12134, 30091], 32997, 30386, 30388, 30684, [12158, 32786], 32788, 32790, 32796, 32800, 32802, { f: 3, c: 32805 }, 32809, 32808, 32817, 32779, 32821, 32835, 32838, 32845, 32850, 32873, 32881, 35203, 39032, 39040, 39043, 39049, { f: 2, c: 39052 }, 39055, 39060, { f: 2, c: 39066 }, { f: 2, c: 39070 }, { f: 2, c: 39073 }, { f: 2, c: 39077 }, [12172, 34381], 34388, 34412, 34414, 34431, 34426, 34428, 34427, 34472, 34445, 34443, 34476, 34461, 34471, 34467, 34474, 34451, 34473, 34486, 34500, 34485, 34510, 34480, 34490, 34481, 34479, 34505, 34511, 34484, 34537, { f: 2, c: 34545 }, 34541, 34547, 34512, 34579, 34526, 34548, 34527, 34520, 34513, 34563, 34567, 34552, 34568, 34570, 34573, 34569, 34595, 34619, 34590, 34597, 34606, 34586, 34622, 34632, 34612, 34609, 34601, 34615, 34623, 34690, 34594, { f: 2, c: 34685 }, 34683, 34656, 34672, 34636, 34670, 34699, 34643, 34659, 34684, 34660, 34649, 34661, 34707, 34735, 34728, 34770, 34758, 34696, 34693, 34733, 34711, 34691, 34731, 34789, 34732, 34741, 34739, 34763, 34771, 34749, 34769, 34752, 34762, 34779, 34794, 34784, 34798, 34838, 34835, 34814, 34826, 34843, 34849, 34873, 34876, [12152, 32566], 32578, { f: 2, c: 32580 }, 33296, 31482, 31485, 31496, { f: 2, c: 31491 }, 31509, 31498, 31531, 31503, 31559, 31544, 31530, 31513, 31534, 31537, 31520, 31525, 31524, 31539, 31550, 31518, 31576, 31578, 31557, 31605, 31564, 31581, 31584, 31598, 31611, 31586, 31602, 31601, 31632, { f: 2, c: 31654 }, 31672, 31660, 31645, 31656, 31621, 31658, 31644, 31650, 31659, 31668, 31697, 31681, 31692, 31709, 31706, { f: 2, c: 31717 }, 31722, 31756, 31742, 31740, 31759, 31766, 31755, 31775, 31786, 31782, 31800, 31809, 31808, 33278, { f: 2, c: 33281 }, 33284, 33260, 34884, { f: 3, c: 33313 }, 33325, 33327, 33320, 33323, 33336, 33339, { f: 2, c: 33331 }, 33342, 33348, 33353, 33355, 33359, 33370, 33375, 33384, 34942, 34949, 34952, 35032, 35039, 35166, 32669, 32671, 32679, { f: 2, c: 32687 }, 32690, 31868, 25929, 31889, 31901, 31900, 31902, 31906, 31922, { f: 2, c: 31932 }, 31937, 31943, { f: 2, c: 31948 }, 31944, 31941, 31959, 31976, [12169, 33390], 26280, 32703, 32718, 32725, 32741, 32737, 32742, 32745, 32750, 32755, [12151, 31992], 32119, 32166, 32174, 32327, 32411, 40632, 40628, 36211, 36228, 36244, 36241, 36273, 36199, 36205, 35911, 35913, 37194, 37200, { f: 2, c: 37198 }, 37220, 37218, 37217, 37232, 37225, 37231, { f: 2, c: 37245 }, 37234, 37236, 37241, 37260, 37253, 37264, 37261, 37265, { f: 2, c: 37282 }, 37290, { f: 3, c: 37293 }, 37301, 37300, 37306, [12183, 35925], 40574, 36280, 36331, 36357, 36441, 36457, 36277, 36287, 36284, 36282, 36292, { f: 2, c: 36310 }, 36314, 36318, { f: 2, c: 36302 }, 36315, 36294, 36332, { f: 2, c: 36343 }, 36323, 36345, 36347, 36324, 36361, 36349, 36372, 36381, 36383, 36396, 36398, 36387, 36399, 36410, 36416, 36409, 36405, 36413, 36401, 36425, { f: 2, c: 36417 }, { f: 2, c: 36433 }, 36426, 36464, 36470, 36476, 36463, 36468, 36485, 36495, 36500, 36496, 36508, 36510, [12184, 35960], 35970, 35978, 35973, 35992, 35988, 26011, 35286, 35294, 35290, 35292, 35301, 35307, 35311, 35390, 35622, 38739, 38633, 38643, 38639, 38662, 38657, 38664, 38671, 38670, 38698, 38701, 38704, 38718, 40832, 40835, { f: 6, c: 40837 }, 40844, 40702, 40715, 40717, [12203, 38585], { f: 2, c: 38588 }, 38606, 38610, 30655, 38624, 37518, 37550, 37576, 37694, 37738, 37834, 37775, 37950, 37995, 40063, 40066, { f: 4, c: 40069 }, 31267, 40075, 40078, { f: 3, c: 40080 }, { f: 2, c: 40084 }, { f: 2, c: 40090 }, { f: 6, c: 40094 }, { f: 5, c: 40101 }, 40107, { f: 2, c: 40109 }, { f: 8, c: 40112 }, { f: 4, c: 40122 }, { f: 4, c: 40132 }, { f: 7, c: 40138 }, { f: 3, c: 40147 }, { f: 3, c: 40151 }, { f: 2, c: 40156 }, 40159, 40162, 38780, 38789, { f: 2, c: 38801 }, 38804, 38831, 38827, 38819, 38834, 38836, 39601, 39600, 39607, 40536, 39606, 39610, 39612, 39617, 39616, 39621, 39618, { f: 2, c: 39627 }, 39633, 39749, 39747, 39751, 39753, 39752, 39757, 39761, 39144, 39181, 39214, 39253, 39252, [12221, 39647], 39649, 39654, 39663, 39659, 39675, 39661, 39673, 39688, 39695, 39699, 39711, 39715, { f: 2, c: 40637 }, 32315, 40578, { f: 2, c: 40583 }, 40587, 40594, 37846, 40605, 40607, { f: 3, c: 40667 }, 40672, 40671, 40674, 40681, 40679, 40677, 40682, 40687, 40738, 40748, 40751, 40761, 40759, { f: 2, c: 40765 }, 40772, 12295, { s: 13 }, 30362, 34297, 31001, 24859, 39599, 35158, 22761, 32631, 25850, 25943, 38930, 36774, 32070, 24171, 32129, 37770, 35607, 39165, 23542, 22577, 39825, 36649, [12185, 35997], 37575, 29437, 20633, 24970, 32179, 31558, 30050, 25987, 24163, 38281, 37002, 32232, 36022, 35722, 36783, 36782, 27161, 40009, 30303, 28693, 28657, 36051, 25839, 39173, 25765, 37474, 37457, 39361, 35036, 36001, 21443, 34870, 27544, 24922, 24920, 29158, 33980, 33369, 20489, 28356, 21408, 20596, 28204, 23652, 35435, 25881, 25723, 34796, 39262, 35730, 32399, 37855, 29987, 38369, 39019, 22580, 22039, [12199, 38263], 20767, 33144, 24288, 26274, 37396, [12190, 36554], 24505, 22645, 38515, 35183, 31281, 25074, 35488, 39425, 36978, 39347, [12242, 40786], 29118, 34909, 34802, 23541, 30087, 36490, 31820, 32162, 37276, 37604, 38619, 30990, 20786, 35320, 34389, 20659, 30241, 38358, 21109, 37656, 32020, 32189, 36781, 35422, 36060, 32880, 24478, 21474, 36517, 31428, 37679, 36948, 24118, 36024, 25812, 21934, 37170, 25763, 33213, 24986, 35477, 24392, 30070, 25803, 40680, 34153, 27284, 25623, 23798, 31153, 23566, 29128, 37159, 25973, 28364, 36958, 32224, 39003, 40670, 22666, 38651, 28593, 37347, 35519, 35548, 37336, 38914, 37664, 35330, 26481, 21205, 26847, 20941, [12222, 39717], 29346, 29544, 35712, 36077, 37709, 37723, 26039, 32222, 38538, 23565, 22136, 38931, 37389, 22890, 22702, 40285, 38989, 35355, 24801, 39187, 20818, 29246, 39180, 36019, 30332, 32624, 38309, 31020, 37353, 29033, 31684, 36009, 39151, 35370, 32033, [12214, 39131], 35513, 24290, 36027, 32027, 22707, 22894, 24996, 31966, 35920, 26963, 37586, [12213, 39080], 30219, 39342, 32299, 35575, 40179, 33178, 36667, 25771, 36628, 36070, 24489, 36e3, 35331, 23142, 32283, 35442, 37411, 33995, 24185, 36245, 36123, 23713, 21083, 37628, 32177, 23831, 37804, 25841, 40255, 38307, 37499, 20491, 32102, 40852, 38799, 36002, 37390, 28317, 27083, 36092, 34865, 39015, 21102, 38364, 35264, 39208, 24931, 36011, 24291, 35215, 27512, [12244, 40860], 38312, 36556, 35437, 27331, 36020, 21130, 36645, 37707, 22283, 36942, 39405, 38867, 28450, 34399, 38305, 40372, 36032, 36703, 40251, 32005, 22778, 35703, 28396, 22057, 33775, 30059, 21123, 35441, 25079, 22750, 27489, 29872, 36996, 32233, 35594, 25582, 36637, 36036, 31330, 26371, 29172, 21295, 35569, 35496, 32362, 33911, 28222, 29554, 36008, 31117, 25802, 27231, 31309, 39249, 35663, 40388, 32318, 32221, 26997, 36655, 32026, 25824, 24190, 34186, 21137, 28639, 35336, 35352, 38555, 32380, 32e3, 22846, 33698, 38960, 36040, 37440, 20729, 39381, 27570, 30435, 22533, 31627, 38291, 33393, 32216, 32365, 27298, 40572, 25536, 25791, 31777, 20745, 34214, 27323, 37970, 36368, 36068, [12178, 35211], 37749, 33382, 21133, 39198, 28472, 28666, 28567, 23559, 28479, 34083, 27123, 22892, 35611, 37292, 33184, 28550, 39509, 23308, 25898, 37496, 30703, 20709, 39171, 32371, 32094, 36686, 36611, 38542, 31680, 28500, 32080, 35489, 32202, 37670, 20677, 35641, 36914, 29180, 30433, 21185, 33686, 39912, 39514, 32147, 38968, 37857, 24465, 30169, 31478, 31998, 33290, 39378, 33289, 25818, 37624, 25084, 21127, 40273, 32121, 35258, 35363, 32118, 37406, 36557, 39423, 38283, 20977, 38982, 27579, 35506, 22718, 25031, 25715, 24235, 35122, 35463, 22602, 20744, 23532, 31014, 26336, 34407, 24011, 31418, 39243, 28528, 25844, 38346, 34847, 33240, 33802, 20358, 36084, 34253, 27396, 25876, 31811, 38348, 34349, 28734, 35733, 25900, 35261, 25078, 32412, 29211, 28651, 25736, 21214, 28551, 27138, 37939, 22744, 39006, 31852, 38626, 28757, 35023, 39881, 31150, 40599, 21426, 21237, 31019, 27511, 28701, 38584, 20486, 32879, 34030, 36899, 37934, 24976, 28451, 31806, 25986, 33225, 37832, 25088, 29001, 32244, 31975, 20841, 36635, 35538, 30274, 36988, 37904, 29557, 33256, 37168, 40023, 36035, 40801, 37428, 38728, 23994, 38936, 39230, 21129, [12243, 40845], 32894, 22184, 31840, 22751, 25871, 38580, 27155, 23105, 25695, 31757, 34310, 30439, 39025, 24300, 29200, 25796, 28407, 34396, 39791, 36034, 37682, 38520, 39522, 37569, 23650, 32311, 24942, 28670, 32209, 24018, 25891, 23423, 28772, 20098, 25476, 36650, 20523, 20374, 28138, 32184, 35542, 34367, 32645, 37007, 38012, 31854, 39486, 39409, 32097, 23229, 29802, 30908, 34718, [12218, 39340], 39393, 21966, 36023, [12230, 40613], 36067, 36993, 30622, 39237, 34875, 28415, 35646, 37672, 37466, 36031, 37762, [12200, 38272], 24758, 20497, 37683, 22818, 35598, 24396, 35219, 32191, 32236, 24287, 28357, 25003, 38313, 40180, 37528, 35628, 35584, 30045, 37385, 32013, 38627, 25747, 33126, 24817, 39719, 39186, 25836, 33193, 25862, 37312, [12227, 40165], 32886, 22169, 38007, 37811, 27320, 29552, 23527, 25840, 28632, 37397, 32016, 33215, 28611, 36786, 30247, 35582, 27472, 40407, 27590, 22036, 28442, 30436, 40848, 36064, 22132, 40300, 39449, 39108, 38971, 36007, 34315, 24977, 35413, 28497, 38935, 25778, 37610, 20693, 27192, 35676, 33229, [12241, 40778], 39438, 35912, 21843, 27683, 35350, 29309, 37370, 37467, 36983, 31805, 35609, 37666, 37463, 28154, 35700, 22649, 27085, 21958, 22715, 34196, 25654, 37740, 27211, 21932, 20689, 32761, 31429, 31434, 27453, 35242, 23522, 36629, 27691, 20670, 38915, 35531, 24950, 29898, 31406, 36264, 21312, 36544, 39493, 40818, 39028, 27402, 21240, 40306, 30906, 35731, 39250, 25854, 32350, 29105, 38860, 35469, 32009, 27054, 32104, 36575, 37613, 38287, 28516, 28753, 34217, 39955, 36093, 20632, 21930, 39479, 25475, 28544, 27578, 32023, 31721, 26348, 38275, 38493, 36109, 32341, 20663, 36062, 29138, 32057, 36050, 25448, 25885, 25086, 35373, 32051, 23529, 23352, 33102, 28402, 32882, 32361, 21213, 32854, 24107, 29509, 28629, 35433, 26178, 34645, 23526, 35672, 39387, 21218, 36969, 37323, 39166, 35222, 35430, 22781, 29560, 27166, 36664, 26360, 36118, 23660, 34899, 27193, 31466, 25976, 24101, 38617, 35504, 38918, 35500, 30889, 29197, 32114, 39164, 39686, 32883, 24939, 38924, 35359, 35494, 25851, 34311, 35380, 32901, 38614, 38568, 32143, 27506, 23403, 25613, 32302, 29795, 37782, 29562, 25787, 33274, 24907, 25892, 36010, 30321, 28760, 22727, 35674, 35527, 22022, 28271, 29145, 28644, 32295, 35342, 39472, 35588, 37563, 38988, 39636, 26781, 36028, 37941, 24307, 32893, 28916, 37509, 32113, 38957, 22294, 22615, 22296, 38973, 40213, 39345, 39389, 27234, 31402, 35178, 24398, 28771, 38929, 33836, 32178, [12209, 38859], 36949, 22285, 29234, 28656, 32173, 33894, 20553, 20702, 32239, 35586, 34907, 32862, 32011, 31337, 21839, 25790, 34680, 28198, 31401, 21978, 37794, 28879, 35491, 28961, 34154, 22626, 38695, 21209, 35492, 37675, 29351, 35186, 32722, 37521, 25138, 32048, 34662, 36676, 23805, 20448, 29433, 22151, 37697, 39854, 32406, 36066, 37532, 38289, 39023, 38570, 29694, 29563, 32291, 39201, 25010, 32171, 38002, 37129, 35443, 38911, 38917, 34157, 22210, 37559, 26313, 22063, 21332, 25406, 33029, 35559, 23531, 28681, 35613, 37573, 37313, 33288, 37561, 32137, 38920, 35377, 32210, 32396, 36562, 25080, 36984, 30316, 32098, 23416, 21211, 35426, 23563, 39348, 35347, 35338, 36956, 22739, 40201, 40232, 21854, 20126, 35357, 38329, 40573, 22196, 38996, 38331, 33399, 21421, 30831, 35578, 39511, 40230, 26954, 25562, 30221, 38525, 30306, 39178, 27171, 22575, 35617, 34277, 29242, [12212, 38913], 26989, 33865, 37291, 37541, 38948, 36986, 20736, 34811, 34269, 20740, 25014, 32681, 35427, 35696, 35516, 35695, 32377, 34093, 38512, 37504, 39154, 38577, 27387, 23344, 40441, 25033, 32403, 29801, 34722, 29151, 29074, 34821, 36111, 31310, 21938, 25793, 20653, 30320, 36404, 20778, 24962, 37109, 37438, 29494, 35480, 36671, 39192, [12226, 39770], 28417, 33287, 23996, 35486, 39729, 29508, 35709, 38928, 39341, 40219, 28149, 36677, 22290, 21729, 22291, 32227, 36960, 39e3, 32004, 36493, 38e3, 38322, 38642, 37142, 38549, 36939, 34292, 37270, 26248, 38620, 36617, 25890, 26283, 36106, 36124, 33247, 38015, 26839, 31432, 36012, 25799, 21063, 28580, 36042, 36104, 36555, 37720, 38296, 35408, 40779, 20661, 27656, 30430, 26028, 36670, 23940, 26855, 25136, 32187, 24373, 28466, 24115, 36076, 33081, 36249, 34756, 36685, 37754, 36889, 35998, 37341, 20597, 35386, 37806, 38499, 24128, 30309, 37165, 35657, 32340, 32887, 22519, 34937, 32025, 25711, 25842, 24159, 36074, 28399, 37912, 32066, 31278, 33131, 34886, 35589, 36600, 30394, 26205, 39519, 35576, 35461, 29165, 30682, 22225, 36015, 37956, 31689, 39376, 23560, 30938, 36681, 36090, 27137, 33674, 35037, 22941, 22767, 29376, 37648, 36101, 22684, 32180, 35524, 28310, 28609, 36039, 28460, 32156, 32317, 32305, 37138, 35419, 32068, 38013, 21959, 21401, 21428, 38760, 36107, 21293, 21297, 36094, 21060, 21132, 21108, 20660, 20480, 20630, 20757, 20738, 20756, 20796, 20791, 20712, 20674, 20795, 20752, 20794, 20681, 31988, 40652, 22213, 40172, 35131, 33248, 35329, 35344, 35340, 35349, 35635, 35406, 35365, 35393, 35382, 35398, 35412, 35416, 35410, 35462, 35460, 35455, 35440, 35452, 35445, 35436, 35438, 35533, 35554, 35425, 35482, 35493, { f: 2, c: 35473 }, 35535, 35537, 35529, 35547, 35543, 35522, 35510, 35574, 35563, 35604, 35585, 35556, 35565, 35580, 35571, 35558, 35566, 35550, 35624, 35740, 35606, 35610, 35600, 35627, 35629, 35670, 35673, 35662, 35742, 35691, 35734, 38488, 37178, 37140, 37172, 37087, 37174, 37126, 37192, 33467, 21233, 24048, 22538, 22745, 22754, 22752, 22746, 22497, 22607, 22550, 22610, 22557, 22628, 34188, 34131, 34294, 33703, 33799, 34031, 33511, 34338, 34086, 22603, 29026, 34136, 34045, 34126, 34184, 34234, 29334, 28366, 34113, 34254, 34130, 33984, 33874, 33892, 33940, 33845, 34207, 34133, 40367, 33939, 32264, 34118, 34146, 34078, 39488, 34362, 37795, 34167, 34334, 34298, 34308, 34282, 34330, 22889, 23607, 25451, 25718, 25759, 25681, 25692, 25779, 25860, 25878, 25847, 25852, 25883, 22064, 22072, 22216, 22182, 21764, 21692, 22144, 22109, 22112, 22069, 22006, 22118, 22130, 22156, 22117, 22044, 22062, 21993, 22038, 22208, 22029, 22195, 22209, 22127, 36705, 22198, 22165, 22279, 24131, 24172, 24152, 24151, 23943, 23796, 23888, 23852, 23975, 23968, 23959, 23821, 23992, 23937, 24020, 24480, 29559, 29505, 29546, 29499, 29547, 29568, 29564, 39136, 39219, 39145, 39228, { f: 2, c: 39146 }, 39149, 39156, 39177, 39185, 39195, 39223, 39231, 39235, { f: 3, c: 39240 }, 39244, 39266, 24289, 36065, 25082, 25006, 24938, 24894, 24757, 24884, 25036, 24927, 25064, 24827, 24887, 24818, 24947, 24860, 24978, 38274, 38278, 38344, 38286, 38292, 38284, 38373, 38317, 38315, 39726, 38316, 38334, 38326, 39721, 38335, 38333, 38332, 38339, 38347, 38356, 38352, 38357, 38366, 28739, 28505, 28711, 28696, 28668, 28039, 28025, 28254, 28590, 28687, 28408, 28527, 28150, 28543, 28678, 28576, 28683, 28775, 28740, 28677, 28535, 28704, 28703, 28722, 28712, 28765, 39467, 36999, 36885, 37008, 23656, 24371, 23285, 23255, 23296, 23149, 23304, 23372, 23207, 23291, 23307, 23329, 23338, 23321, 39380, 39391, 39385, 39478, 39515, 39377, 39384, 39501, 39498, 39394, 39530, 39439, 39437, 39429, 39490, 39469, 39446, 39489, 39470, 39480, { f: 2, c: 39491 }, 39503, 39525, 39524, 31993, 32006, 32002, { f: 2, c: 32007 }, 32394, 32028, 32021, 32019, 32058, 32050, 32049, 32272, 32060, 32064, 32063, 32093, 32078, 32115, 32134, 32131, 32136, 32190, 32186, 32203, 32212, 32196, 32158, 32172, 32185, 32163, 32176, 32199, 32217, 32215, 32249, 32242, 32354, 32230, 32246, 32241, 32267, 32225, 32265, 32285, 32287, 32286, 32301, 32266, 32273, 32381, 32313, 32309, 32306, 32326, 32325, 32392, 32346, 32338, 32366, 32382, 32368, 32367, 32408, 29859, 29771, 29903, 38922, 29885, 29759, 29833, 29862, 29908, 29914, 38873, 38878, 38876, 27050, 27370, 26776, 26838, 27141, 26783, 27355, 27379, 27368, 27359, 27273, 26895, 27208, 26984, 27071, 27194, 27292, 27410, 27422, 27357, 27111, 27407, 27414, 27372, 27354, 27384, 27315, 27367, 27299, 27347, 27358, 27556, 27550, 27566, 27563, 27567, 36564, 36571, 36594, 36603, 36708, 36601, 36604, 36587, 36580, 36706, 36602, 36606, 36618, 36615, 36613, 36626, 36646, { f: 2, c: 36638 }, 36636, 36659, 36678, 36692, 25108, 25127, 29964, 26311, 26308, 26249, 26326, 36033, 36016, 36026, 36029, 36100, 36018, 36037, 36112, 36049, 36058, 36053, 36075, 36071, 36091, 35224, 35244, 35233, 35263, 35238, 35247, 35250, 35255, 27647, 27660, 27692, 29272, 26407, 33110, 33242, 33051, 33214, 33121, 33231, 27487, { f: 2, c: 39086 }, 39094, 39100, 39110, 39112, 36674, 40783, 26005, 29036, 29010, 29079, 29121, 29148, 29182, 31152, 31118, 31146, 25055, 24932, 25059, 25095, 28585, 30959, 30893, 30824, 30904, 31018, 31025, 30820, 30973, 30951, 30947, 40853, 30616, 30558, 30652, 32646, 32648, { f: 3, c: 37330 }, 37337, 37335, 37333, 37367, 37351, 37348, 37702, 37365, 37369, 37384, 37414, 37445, 37393, 37392, 37377, 37415, 37380, 37413, 37376, 37434, 37478, 37431, 37427, 37461, 37437, 37432, 37470, { f: 2, c: 37484 }, 37439, 37984, 37424, 37449, 37448, 37453, 37422, 37433, 37944, 37548, 37536, 37498, 37546, 37614, 37583, 37891, 37603, 37946, 37553, 37542, 37799, 37526, 37580, 37545, 37877, 37523, 37503, 37801, 37530, 37658, 37547, 37507, 37899, 37544, 37539, 37906, 37688, 37617, 37847, 37605, 37616, 37615, 37608, 37564, 37597, 37622, { f: 2, c: 37926 }, 37571, 37599, 37606, 37650, 37638, 37737, 37659, 37696, 37633, 37653, 37678, 37699, { f: 2, c: 37639 }, 37663, 37657, 37733, 37703, 37750, 37716, 37732, 37802, 37744, 37764, 37860, 37848, 37928, 37767, 37836, 37784, 37816, 37823, 37798, 37808, 37813, 37964, 37858, { f: 2, c: 37852 }, 37837, 37854, 37827, 37831, 37841, 37908, 37917, 37879, 37989, 37907, 37997, 37920, 38009, 37881, 37913, 37962, 37938, 37951, 37972, 37987, 37758, 31329, 40169, 40182, 40199, 40198, 40227, 40327, 40469, 40221, 40223, 40421, 40239, 40409, 40240, 40258, 40478, 40275, 40477, 40288, 40274, 40435, 40284, 40289, 40339, 40298, 40303, 40329, 40344, 40346, 40384, 40357, 40361, 40386, 40380, 40474, 40403, 40410, 40431, 40422, 40434, 40440, 40460, 40442, 40475, 30308, 30296, 30311, 30210, { f: 2, c: 30278 }, 30281, 30238, 30267, { f: 2, c: 30317 }, 30313, 30322, 31431, 31414, 35168, 35123, 35165, 35143, 35128, 35172, 30392, 32814, 32812, 32889, 32885, 38919, { f: 2, c: 38926 }, 38945, 38940, 28481, 38950, 38967, 38990, 38995, 39027, 39010, 39001, 39013, 39020, 39024, 34787, 34822, 34566, 34851, 34806, 34554, 34799, 34692, 34832, 34760, 34833, 34747, 34766, 32588, 31716, 31591, 31849, 31731, 31744, 31691, 31836, 31774, 31787, 31779, 31850, 31839, 33380, 33387, 35018, 32677, 31986, 31990, 31965, 32310, 40617, 36274, 37317, 37315, 40570, 36489, 36428, 36498, 36474, 36437, 36506, 36491, 36499, 36497, 36513, 36451, 36522, 36518, 35316, 35318, 38746, 38722, 38717, 38724, 40788, 40799, 40793, 40800, 40796, 40806, 40812, 40810, 40823, [12236, 40701], 40703, 40713, 35726, 38014, 37864, 39799, 39796, 39809, 39811, 39822, 40056, 31308, 39826, 40031, 39824, 39853, 39834, 39850, 39838, 40045, 39851, 39837, 40024, 39873, 40058, 39985, 39993, 39971, 39991, 39872, 39882, 39879, 39933, 39894, { f: 2, c: 39914 }, 39905, 39908, 39911, 39901, 39906, 39920, 39899, 39924, 39892, 40029, 39944, 39952, 39949, 39954, 39945, 39935, 39968, 39986, 39981, 39976, 39973, 39977, 39987, 39998, 40008, 39995, 39989, 40005, 40022, 40020, 40018, 40039, 38851, 38845, 38857, 40379, 39631, 39638, 39637, 39768, 39758, 39255, 39260, 39714, 40695, 40690, 35180, 38342, 37686, 24390, 34068, 32404, 40803, 22137, 40725, 22081, 39662, 35079, 31296, 39091, 38308, 39693, 36852, 24409, 31339, 39138, 20642, 34193, 20760, 25458, 21067, 30543, 32397, 26310, 30637, [12228, 40565], 22217, 40692, 28635, 25054, 30663, 28720, 40629, 34890, 38370, 38854, 31844, 32308, 38822, 40623, 22220, 39089, 27311, 32590, 31984, 20418, 32363, 40569, 22190, 39706, 33903, 31142, 31858, 39634, 38587, 32251, 35069, 30787, { f: 10, c: 8560 }, { f: 2, c: 714 }, 729, 8211, 8213, 8229, 8245, 8453, 8457, { f: 4, c: 8598 }, 8725, 8735, 8739, 8786, { f: 2, c: 8806 }, 8895, { f: 36, c: 9552 }, { f: 15, c: 9601 }, { f: 3, c: 9619 }, { f: 2, c: 9660 }, { f: 4, c: 9698 }, 9737, 8853, 12306, { f: 2, c: 12317 }, { f: 9, c: 12321 }, 12963, { f: 2, c: 13198 }, { f: 3, c: 13212 }, 13217, 13252, 13262, { f: 2, c: 13265 }, 13269, 65072, 65506, 65508, 8481, 12849, 8208, 12540, { f: 2, c: 12443 }, { f: 2, c: 12541 }, 12294, { f: 2, c: 12445 }, { f: 10, c: 65097 }, { f: 4, c: 65108 }, { f: 14, c: 65113 }, { f: 4, c: 65128 }, 12350, { f: 12, c: 12272 }, 19970, { f: 3, c: 19972 }, 19983, 19986, 19991, { f: 3, c: 19999 }, 20003, 20006, 20009, { f: 2, c: 20014 }, 20017, 20019, 20021, 20023, 20028, { f: 3, c: 20032 }, 20036, 20038, 20042, 20049, 20053, 20055, { f: 2, c: 20058 }, { f: 4, c: 20066 }, { f: 2, c: 20071 }, { f: 6, c: 20074 }, 20082, { f: 10, c: 20084 }, { f: 3, c: 20095 }, { f: 2, c: 20099 }, [12037, 20101], 20103, 20106, 20112, { f: 2, c: 20118 }, 20121, { f: 2, c: 20124 }, 20131, 20138, { f: 3, c: 20143 }, 20148, { f: 4, c: 20150 }, { f: 3, c: 20156 }, 20168, 20172, { f: 2, c: 20175 }, 20178, { f: 3, c: 20186 }, 20192, 20194, { f: 2, c: 20198 }, 20201, { f: 3, c: 20205 }, 20209, 20212, { f: 3, c: 20216 }, 20220, 20222, 20224, { f: 7, c: 20226 }, { f: 2, c: 20235 }, { f: 5, c: 20242 }, { f: 2, c: 20252 }, 20257, 20259, { f: 2, c: 20264 }, { f: 3, c: 20268 }, 20273, 20275, 20277, 20279, 20281, 20283, { f: 5, c: 20286 }, { f: 2, c: 20292 }, { f: 6, c: 20295 }, 20306, 20308, 20310, { f: 2, c: 20321 }, 20326, 20328, { f: 2, c: 20330 }, { f: 2, c: 20333 }, { f: 2, c: 20337 }, 20341, { f: 4, c: 20343 }, 20349, { f: 3, c: 20352 }, 20357, 20359, 20362, 20364, 20366, 20368, { f: 2, c: 20370 }, 20373, { f: 3, c: 20376 }, 20380, { f: 2, c: 20382 }, { f: 2, c: 20385 }, 20388, 20395, 20397, { f: 5, c: 20400 }, { f: 9, c: 20406 }, { f: 2, c: 20416 }, { f: 4, c: 20422 }, { f: 3, c: 20427 }, { f: 5, c: 20434 }, 20441, 20443, 20450, { f: 2, c: 20452 }, 20455, { f: 2, c: 20459 }, 20464, 20466, { f: 4, c: 20468 }, 20473, { f: 3, c: 20475 }, 20479, { f: 5, c: 20481 }, { f: 2, c: 20487 }, 20490, 20494, 20496, 20499, { f: 3, c: 20501 }, 20507, { f: 2, c: 20509 }, 20512, { f: 3, c: 20514 }, 20519, { f: 11, c: 20527 }, 20539, 20541, { f: 4, c: 20543 }, { f: 3, c: 20548 }, { f: 2, c: 20554 }, 20557, { f: 5, c: 20560 }, { f: 4, c: 20566 }, 20571, { f: 8, c: 20573 }, { f: 6, c: 20582 }, { f: 7, c: 20589 }, { f: 3, c: 20600 }, { f: 2, c: 20604 }, { f: 4, c: 20609 }, { f: 2, c: 20614 }, { f: 4, c: 20617 }, { f: 8, c: 20622 }, 20631, { f: 8, c: 20634 }, 20644, 20646, { f: 2, c: 20650 }, { f: 4, c: 20654 }, 20662, { f: 2, c: 20664 }, { f: 2, c: 20668 }, { f: 3, c: 20671 }, { f: 2, c: 20675 }, { f: 3, c: 20678 }, { f: 5, c: 20682 }, 20688, { f: 3, c: 20690 }, { f: 3, c: 20695 }, { f: 3, c: 20699 }, { f: 6, c: 20703 }, { f: 3, c: 20713 }, { f: 4, c: 20719 }, 20724, { f: 3, c: 20726 }, 20730, { f: 4, c: 20732 }, 20737, 20739, 20741, 20746, { f: 4, c: 20748 }, 20753, 20755, { f: 2, c: 20758 }, { f: 6, c: 20761 }, 20768, { f: 8, c: 20770 }, { f: 7, c: 20779 }, { f: 4, c: 20787 }, { f: 2, c: 20792 }, { f: 2, c: 20797 }, 20802, 20807, 20810, 20812, { f: 3, c: 20814 }, 20819, { f: 3, c: 20823 }, 20827, { f: 5, c: 20829 }, { f: 2, c: 20835 }, { f: 2, c: 20838 }, 20842, 20847, 20850, 20858, { f: 2, c: 20862 }, { f: 2, c: 20867 }, { f: 2, c: 20870 }, { f: 2, c: 20874 }, { f: 4, c: 20878 }, { f: 2, c: 20883 }, 20888, 20890, { f: 3, c: 20893 }, 20897, 20899, { f: 5, c: 20902 }, { f: 2, c: 20909 }, 20916, { f: 3, c: 20920 }, { f: 2, c: 20926 }, { f: 3, c: 20929 }, 20933, 20936, 20938, 20942, 20944, { f: 9, c: 20946 }, 20956, { f: 2, c: 20958 }, { f: 2, c: 20962 }, { f: 6, c: 20965 }, 20972, 20974, 20978, 20980, 20983, 20990, { f: 2, c: 20996 }, 21001, { f: 2, c: 21003 }, { f: 2, c: 21007 }, { f: 3, c: 21011 }, 21020, { f: 2, c: 21022 }, { f: 3, c: 21025 }, { f: 3, c: 21029 }, 21034, 21036, 21039, { f: 2, c: 21041 }, { f: 2, c: 21044 }, 21052, 21054, { f: 2, c: 21061 }, { f: 2, c: 21064 }, { f: 2, c: 21070 }, { f: 2, c: 21074 }, 21077, { f: 4, c: 21079 }, 21085, { f: 2, c: 21087 }, { f: 3, c: 21090 }, 21094, 21096, { f: 3, c: 21099 }, { f: 2, c: 21104 }, 21107, { f: 7, c: 21110 }, 21118, 21120, { f: 3, c: 21124 }, 21131, { f: 2, c: 21134 }, 21138, { f: 7, c: 21140 }, 21148, { f: 4, c: 21156 }, { f: 3, c: 21166 }, { f: 10, c: 21172 }, 21184, 21186, { f: 3, c: 21188 }, 21192, 21194, { f: 4, c: 21196 }, 21201, { f: 2, c: 21203 }, 21207, 21210, 21212, { f: 2, c: 21216 }, 21219, { f: 11, c: 21221 }, { f: 3, c: 21234 }, { f: 2, c: 21238 }, { f: 3, c: 21243 }, { f: 4, c: 21249 }, 21255, { f: 4, c: 21257 }, 21262, { f: 4, c: 21265 }, 21272, { f: 2, c: 21275 }, { f: 2, c: 21278 }, 21282, { f: 2, c: 21284 }, { f: 3, c: 21287 }, { f: 2, c: 21291 }, 21296, { f: 6, c: 21298 }, [12054, 21304], { f: 2, c: 21308 }, 21314, 21316, 21318, { f: 3, c: 21323 }, 21328, { f: 2, c: 21336 }, 21339, 21341, 21349, 21352, 21354, { f: 2, c: 21356 }, 21362, 21366, 21369, { f: 4, c: 21371 }, { f: 2, c: 21376 }, 21379, { f: 2, c: 21383 }, 21386, { f: 7, c: 21390 }, { f: 2, c: 21398 }, { f: 2, c: 21403 }, 21406, 21409, 21412, 21415, { f: 3, c: 21418 }, { f: 3, c: 21423 }, 21427, 21429, { f: 4, c: 21431 }, { f: 3, c: 21436 }, 21440, { f: 4, c: 21444 }, { f: 3, c: 21454 }, { f: 2, c: 21458 }, 21461, 21466, { f: 3, c: 21468 }, 21473, 21479, 21492, 21498, { f: 3, c: 21502 }, 21506, 21509, 21511, 21515, 21524, { f: 3, c: 21528 }, 21532, 21538, { f: 2, c: 21540 }, 21546, 21552, 21555, { f: 2, c: 21558 }, 21562, 21565, 21567, { f: 2, c: 21569 }, { f: 2, c: 21572 }, 21575, 21577, { f: 4, c: 21580 }, 21585, 21594, { f: 5, c: 21597 }, 21603, 21605, 21607, { f: 8, c: 21609 }, 21620, { f: 2, c: 21625 }, { f: 2, c: 21630 }, 21633, 21635, 21637, { f: 4, c: 21639 }, 21645, 21649, 21651, { f: 2, c: 21655 }, 21660, { f: 5, c: 21662 }, 21669, 21678, 21680, 21682, { f: 3, c: 21685 }, { f: 2, c: 21689 }, 21694, 21699, 21701, { f: 2, c: 21706 }, 21718, 21720, 21723, 21728, { f: 3, c: 21730 }, { f: 2, c: 21739 }, { f: 3, c: 21743 }, { f: 6, c: 21748 }, 21755, 21758, 21760, { f: 2, c: 21762 }, 21765, 21768, { f: 5, c: 21770 }, { f: 2, c: 21778 }, { f: 6, c: 21781 }, { f: 4, c: 21788 }, 21793, { f: 2, c: 21797 }, { f: 2, c: 21800 }, 21803, 21805, 21810, { f: 3, c: 21812 }, { f: 4, c: 21816 }, 21821, 21824, 21826, 21829, { f: 2, c: 21831 }, { f: 4, c: 21835 }, { f: 2, c: 21841 }, 21844, { f: 5, c: 21847 }, 21853, { f: 2, c: 21855 }, { f: 2, c: 21858 }, { f: 2, c: 21864 }, 21867, { f: 6, c: 21871 }, { f: 2, c: 21881 }, 21885, 21887, { f: 2, c: 21893 }, { f: 3, c: 21900 }, 21904, { f: 2, c: 21906 }, { f: 3, c: 21909 }, { f: 2, c: 21914 }, 21918, { f: 7, c: 21920 }, { f: 2, c: 21928 }, 21931, 21933, { f: 2, c: 21935 }, 21940, 21942, 21944, 21946, 21948, { f: 5, c: 21951 }, 21960, { f: 2, c: 21962 }, { f: 2, c: 21967 }, 21973, { f: 3, c: 21975 }, 21979, 21982, 21984, 21986, 21991, { f: 2, c: 21997 }, { f: 2, c: 22e3 }, 22004, { f: 5, c: 22008 }, 22015, { f: 4, c: 22018 }, 22023, { f: 2, c: 22026 }, { f: 4, c: 22032 }, 22037, { f: 2, c: 22041 }, 22045, { f: 3, c: 22048 }, { f: 2, c: 22053 }, 22056, { f: 2, c: 22058 }, 22067, 22071, 22074, { f: 3, c: 22076 }, 22080, { f: 10, c: 22082 }, { f: 5, c: 22095 }, { f: 2, c: 22101 }, { f: 2, c: 22106 }, { f: 2, c: 22110 }, 22113, 22115, 22119, { f: 2, c: 22125 }, 22128, 22131, 22133, 22135, 22138, { f: 3, c: 22141 }, { f: 4, c: 22145 }, { f: 4, c: 22152 }, 22157, { f: 3, c: 22160 }, 22164, { f: 3, c: 22166 }, { f: 9, c: 22170 }, { f: 2, c: 22180 }, 22183, { f: 5, c: 22185 }, { f: 3, c: 22192 }, 22197, { f: 4, c: 22200 }, { f: 3, c: 22205 }, { f: 2, c: 22211 }, { f: 2, c: 22214 }, 22219, { f: 4, c: 22221 }, { f: 2, c: 22226 }, { f: 2, c: 22229 }, { f: 2, c: 22232 }, 22236, 22243, { f: 6, c: 22245 }, 22252, { f: 2, c: 22254 }, { f: 2, c: 22258 }, { f: 3, c: 22262 }, { f: 2, c: 22267 }, { f: 3, c: 22272 }, 22277, 22284, { f: 4, c: 22286 }, { f: 2, c: 22292 }, 22295, { f: 3, c: 22297 }, { f: 2, c: 22301 }, { f: 3, c: 22304 }, { f: 4, c: 22308 }, 22315, { f: 2, c: 22321 }, { f: 5, c: 22324 }, { f: 2, c: 22332 }, 22335, 22337, { f: 4, c: 22339 }, { f: 2, c: 22344 }, 22347, { f: 5, c: 22354 }, { f: 2, c: 22360 }, { f: 2, c: 22370 }, 22373, 22375, 22380, 22382, { f: 3, c: 22384 }, { f: 2, c: 22388 }, { f: 3, c: 22392 }, { f: 5, c: 22397 }, { f: 4, c: 22407 }, { f: 5, c: 22413 }, { f: 7, c: 22420 }, { f: 4, c: 22428 }, 22437, 22440, 22442, 22444, { f: 3, c: 22447 }, 22451, { f: 3, c: 22453 }, { f: 9, c: 22457 }, { f: 7, c: 22468 }, { f: 2, c: 22476 }, { f: 2, c: 22480 }, 22483, { f: 2, c: 22486 }, { f: 2, c: 22491 }, 22494, { f: 2, c: 22498 }, { f: 8, c: 22501 }, 22510, { f: 4, c: 22512 }, { f: 2, c: 22517 }, { f: 2, c: 22523 }, { f: 2, c: 22526 }, 22529, { f: 2, c: 22531 }, { f: 2, c: 22536 }, 22540, { f: 3, c: 22542 }, { f: 3, c: 22546 }, { f: 2, c: 22551 }, { f: 3, c: 22554 }, 22559, { f: 2, c: 22562 }, { f: 5, c: 22565 }, { f: 4, c: 22571 }, { f: 2, c: 22578 }, { f: 14, c: 22582 }, { f: 5, c: 22597 }, 22606, 22608, 22611, { f: 2, c: 22613 }, { f: 5, c: 22617 }, { f: 3, c: 22623 }, 22627, { f: 5, c: 22630 }, { f: 8, c: 22637 }, { f: 3, c: 22646 }, { f: 4, c: 22650 }, 22655, 22658, 22660, { f: 3, c: 22662 }, { f: 7, c: 22667 }, { f: 5, c: 22676 }, 22683, 22685, { f: 8, c: 22688 }, { f: 4, c: 22698 }, { f: 4, c: 22703 }, { f: 7, c: 22708 }, 22717, { f: 2, c: 22719 }, { f: 3, c: 22722 }, 22726, { f: 9, c: 22728 }, 22738, 22740, { f: 2, c: 22742 }, { f: 3, c: 22747 }, 22753, 22755, { f: 4, c: 22757 }, 22762, 22765, { f: 2, c: 22769 }, { f: 2, c: 22772 }, { f: 2, c: 22775 }, { f: 2, c: 22779 }, { f: 4, c: 22782 }, 22787, { f: 2, c: 22789 }, { f: 2, c: 22792 }, [12066, 22794], { f: 2, c: 22795 }, 22798, { f: 4, c: 22800 }, { f: 2, c: 22807 }, 22811, { f: 2, c: 22813 }, { f: 2, c: 22816 }, 22819, 22822, 22824, 22828, 22832, { f: 2, c: 22834 }, { f: 2, c: 22837 }, 22843, 22845, { f: 2, c: 22847 }, 22851, { f: 2, c: 22853 }, 22858, { f: 2, c: 22860 }, 22864, { f: 2, c: 22866 }, 22873, { f: 5, c: 22875 }, 22881, { f: 2, c: 22883 }, { f: 3, c: 22886 }, 22891, 22893, { f: 4, c: 22895 }, 22901, 22903, { f: 3, c: 22906 }, { f: 3, c: 22910 }, 22917, 22921, { f: 2, c: 22923 }, { f: 4, c: 22926 }, { f: 2, c: 22932 }, 22936, { f: 3, c: 22938 }, { f: 4, c: 22943 }, { f: 2, c: 22950 }, { f: 2, c: 22956 }, { f: 2, c: 22960 }, { f: 6, c: 22963 }, 22970, { f: 2, c: 22972 }, { f: 7, c: 22975 }, { f: 3, c: 22983 }, { f: 4, c: 22988 }, { f: 2, c: 22997 }, 23001, 23003, { f: 5, c: 23006 }, 23012, { f: 2, c: 23014 }, { f: 3, c: 23017 }, { f: 12, c: 23021 }, 23034, { f: 3, c: 23036 }, 23040, 23042, { f: 2, c: 23050 }, { f: 4, c: 23053 }, 23058, { f: 4, c: 23060 }, { f: 3, c: 23065 }, { f: 2, c: 23069 }, { f: 2, c: 23073 }, 23076, { f: 3, c: 23078 }, { f: 7, c: 23082 }, 23091, 23093, { f: 5, c: 23095 }, { f: 3, c: 23101 }, { f: 4, c: 23106 }, { f: 2, c: 23111 }, { f: 10, c: 23115 }, { f: 4, c: 23126 }, { f: 7, c: 23131 }, { f: 3, c: 23139 }, { f: 2, c: 23144 }, { f: 2, c: 23147 }, { f: 6, c: 23150 }, { f: 2, c: 23160 }, { f: 4, c: 23163 }, { f: 18, c: 23168 }, { f: 7, c: 23187 }, { f: 11, c: 23196 }, { f: 2, c: 23208 }, { f: 7, c: 23211 }, 23220, { f: 2, c: 23222 }, { f: 4, c: 23225 }, { f: 2, c: 23231 }, { f: 6, c: 23235 }, { f: 2, c: 23242 }, { f: 5, c: 23245 }, 23251, 23253, { f: 3, c: 23257 }, { f: 3, c: 23261 }, 23266, { f: 2, c: 23268 }, { f: 2, c: 23271 }, 23274, { f: 5, c: 23276 }, { f: 3, c: 23282 }, { f: 5, c: 23286 }, { f: 4, c: 23292 }, { f: 7, c: 23297 }, 23306, { f: 9, c: 23309 }, 23320, { f: 7, c: 23322 }, { f: 8, c: 23330 }, { f: 5, c: 23339 }, 23345, 23347, { f: 2, c: 23349 }, { f: 7, c: 23353 }, { f: 11, c: 23361 }, { f: 3, c: 23373 }, 23378, 23382, 23390, { f: 2, c: 23392 }, { f: 2, c: 23399 }, { f: 3, c: 23405 }, 23410, 23412, { f: 2, c: 23414 }, 23417, { f: 2, c: 23419 }, 23422, 23426, 23430, 23434, { f: 2, c: 23437 }, { f: 3, c: 23440 }, 23444, 23446, 23455, { f: 3, c: 23463 }, { f: 4, c: 23468 }, { f: 2, c: 23473 }, 23479, { f: 3, c: 23482 }, { f: 2, c: 23488 }, 23491, { f: 4, c: 23496 }, { f: 3, c: 23501 }, 23505, { f: 9, c: 23508 }, 23520, 23523, 23530, 23533, 23535, { f: 4, c: 23537 }, 23543, { f: 2, c: 23549 }, 23552, { f: 2, c: 23554 }, 23557, 23564, 23568, { f: 2, c: 23570 }, 23575, 23577, 23579, { f: 4, c: 23582 }, 23587, 23590, { f: 4, c: 23592 }, { f: 4, c: 23597 }, { f: 2, c: 23602 }, { f: 2, c: 23605 }, { f: 2, c: 23619 }, { f: 2, c: 23622 }, { f: 2, c: 23628 }, { f: 3, c: 23634 }, { f: 3, c: 23638 }, { f: 4, c: 23642 }, 23647, 23655, { f: 3, c: 23657 }, 23661, 23664, { f: 7, c: 23666 }, { f: 4, c: 23675 }, 23680, { f: 5, c: 23683 }, { f: 3, c: 23689 }, { f: 2, c: 23694 }, { f: 2, c: 23698 }, 23701, { f: 4, c: 23709 }, { f: 5, c: 23716 }, 23722, { f: 3, c: 23726 }, 23730, 23732, 23734, { f: 4, c: 23737 }, 23742, 23744, { f: 2, c: 23746 }, { f: 6, c: 23749 }, { f: 6, c: 23756 }, { f: 6, c: 23763 }, { f: 7, c: 23770 }, { f: 2, c: 23778 }, 23783, 23785, { f: 2, c: 23787 }, { f: 2, c: 23790 }, { f: 3, c: 23793 }, 23797, { f: 4, c: 23799 }, 23804, { f: 4, c: 23806 }, { f: 2, c: 23812 }, { f: 5, c: 23816 }, { f: 5, c: 23823 }, 23829, { f: 3, c: 23832 }, { f: 2, c: 23836 }, { f: 5, c: 23839 }, 23845, 23848, { f: 2, c: 23850 }, { f: 5, c: 23855 }, { f: 8, c: 23861 }, { f: 8, c: 23871 }, { f: 2, c: 23880 }, { f: 3, c: 23885 }, { f: 7, c: 23889 }, { f: 2, c: 23897 }, 23900, { f: 11, c: 23902 }, 23914, { f: 2, c: 23917 }, { f: 4, c: 23920 }, { f: 12, c: 23925 }, 23939, { f: 2, c: 23941 }, { f: 15, c: 23944 }, 23960, { f: 3, c: 23962 }, { f: 2, c: 23966 }, { f: 6, c: 23969 }, { f: 15, c: 23976 }, 23993, 23995, { f: 8, c: 23997 }, { f: 5, c: 24006 }, 24012, { f: 4, c: 24014 }, 24019, { f: 6, c: 24021 }, 24028, { f: 2, c: 24031 }, { f: 2, c: 24035 }, 24042, { f: 2, c: 24044 }, { f: 2, c: 24053 }, { f: 5, c: 24056 }, { f: 2, c: 24063 }, 24068, 24071, { f: 3, c: 24073 }, { f: 2, c: 24077 }, { f: 2, c: 24082 }, 24087, { f: 7, c: 24094 }, { f: 3, c: 24104 }, 24108, { f: 2, c: 24111 }, 24114, { f: 2, c: 24116 }, { f: 2, c: 24121 }, { f: 2, c: 24126 }, 24129, { f: 6, c: 24134 }, { f: 7, c: 24141 }, 24150, { f: 2, c: 24153 }, { f: 2, c: 24156 }, 24160, { f: 7, c: 24164 }, { f: 5, c: 24173 }, 24181, 24183, { f: 3, c: 24193 }, 24197, { f: 2, c: 24200 }, { f: 3, c: 24204 }, 24210, 24216, 24219, 24221, { f: 4, c: 24225 }, { f: 3, c: 24232 }, 24236, { f: 5, c: 24238 }, 24244, { f: 4, c: 24250 }, { f: 10, c: 24255 }, { f: 6, c: 24267 }, { f: 2, c: 24276 }, { f: 4, c: 24279 }, { f: 3, c: 24284 }, { f: 4, c: 24292 }, 24297, 24299, { f: 6, c: 24301 }, 24309, { f: 2, c: 24312 }, { f: 3, c: 24315 }, { f: 3, c: 24325 }, 24329, { f: 3, c: 24332 }, 24336, 24338, 24340, 24342, { f: 2, c: 24345 }, { f: 3, c: 24348 }, { f: 4, c: 24353 }, 24360, { f: 2, c: 24363 }, 24366, 24368, 24370, 24372, { f: 3, c: 24374 }, 24379, { f: 3, c: 24381 }, { f: 5, c: 24385 }, 24391, { f: 3, c: 24393 }, 24397, 24399, 24401, 24404, { f: 3, c: 24410 }, { f: 3, c: 24414 }, 24419, 24421, { f: 2, c: 24423 }, 24427, { f: 2, c: 24430 }, 24434, { f: 3, c: 24436 }, 24440, 24442, { f: 3, c: 24445 }, 24451, 24454, { f: 3, c: 24461 }, { f: 2, c: 24467 }, 24470, { f: 2, c: 24474 }, 24477, 24479, { f: 6, c: 24482 }, { f: 2, c: 24491 }, { f: 6, c: 24495 }, 24502, 24504, { f: 2, c: 24506 }, { f: 5, c: 24510 }, { f: 2, c: 24519 }, { f: 2, c: 24522 }, 24526, { f: 3, c: 24531 }, { f: 3, c: 24538 }, { f: 2, c: 24542 }, { f: 2, c: 24546 }, { f: 2, c: 24549 }, { f: 2, c: 24552 }, 24556, { f: 2, c: 24559 }, { f: 3, c: 24562 }, { f: 2, c: 24566 }, { f: 2, c: 24569 }, 24572, { f: 3, c: 24583 }, { f: 2, c: 24587 }, { f: 2, c: 24592 }, 24595, { f: 2, c: 24599 }, 24602, { f: 2, c: 24606 }, { f: 3, c: 24610 }, { f: 3, c: 24620 }, { f: 5, c: 24624 }, { f: 5, c: 24630 }, { f: 2, c: 24637 }, 24640, { f: 7, c: 24644 }, 24652, { f: 2, c: 24654 }, 24657, { f: 2, c: 24659 }, { f: 3, c: 24662 }, { f: 2, c: 24667 }, { f: 4, c: 24670 }, { f: 2, c: 24677 }, 24686, { f: 2, c: 24689 }, { f: 2, c: 24692 }, 24695, 24702, { f: 3, c: 24704 }, { f: 4, c: 24709 }, { f: 2, c: 24714 }, { f: 4, c: 24718 }, 24723, 24725, { f: 3, c: 24727 }, 24732, 24734, { f: 2, c: 24737 }, { f: 2, c: 24740 }, 24743, { f: 2, c: 24745 }, 24750, 24752, 24755, 24759, { f: 2, c: 24761 }, { f: 8, c: 24765 }, { f: 3, c: 24775 }, { f: 5, c: 24780 }, { f: 3, c: 24786 }, { f: 2, c: 24790 }, 24793, 24795, 24798, { f: 4, c: 24802 }, 24810, 24821, { f: 2, c: 24823 }, { f: 4, c: 24828 }, { f: 4, c: 24834 }, 24839, { f: 3, c: 24842 }, { f: 5, c: 24848 }, { f: 4, c: 24854 }, { f: 2, c: 24861 }, { f: 2, c: 24865 }, 24869, { f: 3, c: 24872 }, { f: 8, c: 24876 }, { f: 2, c: 24885 }, { f: 6, c: 24888 }, { f: 8, c: 24896 }, 24905, 24909, { f: 2, c: 24911 }, { f: 3, c: 24914 }, { f: 2, c: 24918 }, 24921, { f: 2, c: 24923 }, 24926, { f: 2, c: 24928 }, { f: 2, c: 24933 }, 24937, { f: 2, c: 24940 }, 24943, { f: 2, c: 24945 }, 24948, { f: 10, c: 24952 }, { f: 7, c: 24963 }, { f: 2, c: 24972 }, 24975, 24979, { f: 5, c: 24981 }, { f: 2, c: 24987 }, { f: 6, c: 24990 }, { f: 2, c: 24997 }, 25002, 25005, { f: 3, c: 25007 }, { f: 3, c: 25011 }, { f: 6, c: 25016 }, { f: 3, c: 25023 }, { f: 4, c: 25027 }, { f: 4, c: 25037 }, 25043, { f: 9, c: 25045 }, { f: 3, c: 25056 }, { f: 2, c: 25060 }, 25063, { f: 9, c: 25065 }, { f: 2, c: 25075 }, 25081, 25083, 25085, { f: 5, c: 25089 }, 25097, 25107, 25113, { f: 3, c: 25116 }, 25120, 25123, 25126, { f: 2, c: 25128 }, 25131, 25133, 25135, 25137, 25141, [12094, 25142], { f: 5, c: 25144 }, 25154, { f: 3, c: 25156 }, 25162, { f: 2, c: 25167 }, { f: 3, c: 25173 }, { f: 2, c: 25177 }, { f: 7, c: 25180 }, { f: 2, c: 25188 }, 25192, { f: 2, c: 25201 }, { f: 2, c: 25204 }, { f: 2, c: 25207 }, { f: 2, c: 25210 }, 25213, { f: 3, c: 25217 }, { f: 4, c: 25221 }, { f: 6, c: 25227 }, 25236, 25241, { f: 3, c: 25244 }, 25251, { f: 2, c: 25254 }, { f: 2, c: 25257 }, { f: 4, c: 25261 }, { f: 3, c: 25266 }, { f: 3, c: 25270 }, 25274, 25278, { f: 2, c: 25280 }, 25283, 25291, 25295, 25297, 25301, { f: 2, c: 25309 }, { f: 2, c: 25312 }, 25316, { f: 2, c: 25322 }, 25328, 25330, 25333, { f: 4, c: 25336 }, 25344, { f: 4, c: 25347 }, { f: 4, c: 25354 }, { f: 2, c: 25359 }, { f: 4, c: 25362 }, { f: 3, c: 25367 }, 25372, { f: 2, c: 25382 }, 25385, { f: 3, c: 25388 }, { f: 2, c: 25392 }, { f: 6, c: 25395 }, { f: 2, c: 25403 }, { f: 3, c: 25407 }, 25412, { f: 2, c: 25415 }, 25418, { f: 4, c: 25425 }, { f: 8, c: 25430 }, 25440, { f: 3, c: 25444 }, 25450, 25452, { f: 2, c: 25455 }, { f: 3, c: 25459 }, { f: 2, c: 25464 }, { f: 4, c: 25468 }, 25473, { f: 2, c: 25477 }, 25483, 25485, 25489, { f: 3, c: 25491 }, 25495, { f: 7, c: 25497 }, 25505, 25508, 25510, 25515, 25519, { f: 2, c: 25521 }, { f: 2, c: 25525 }, 25529, 25531, 25533, 25535, { f: 3, c: 25537 }, 25541, { f: 2, c: 25543 }, { f: 3, c: 25546 }, 25553, { f: 3, c: 25555 }, { f: 3, c: 25559 }, { f: 3, c: 25563 }, 25567, 25570, { f: 5, c: 25572 }, { f: 2, c: 25579 }, { f: 3, c: 25583 }, 25587, 25589, 25591, { f: 4, c: 25593 }, 25598, { f: 2, c: 25603 }, { f: 5, c: 25606 }, 25614, { f: 2, c: 25617 }, { f: 2, c: 25621 }, { f: 3, c: 25624 }, 25629, 25631, { f: 4, c: 25634 }, { f: 3, c: 25639 }, 25643, { f: 6, c: 25646 }, 25653, { f: 3, c: 25655 }, { f: 2, c: 25659 }, 25662, 25664, { f: 2, c: 25666 }, 25673, { f: 6, c: 25675 }, 25683, { f: 3, c: 25685 }, { f: 3, c: 25689 }, 25693, { f: 7, c: 25696 }, 25704, { f: 3, c: 25706 }, 25710, { f: 3, c: 25712 }, { f: 2, c: 25716 }, 25719, { f: 6, c: 25724 }, 25731, 25734, { f: 8, c: 25737 }, 25748, { f: 2, c: 25751 }, { f: 4, c: 25754 }, { f: 3, c: 25760 }, { f: 3, c: 25766 }, 25770, 25775, 25777, 25780, 25782, 25785, 25789, 25795, 25798, { f: 2, c: 25800 }, 25804, 25807, 25809, 25811, { f: 2, c: 25813 }, 25817, { f: 3, c: 25819 }, 25823, 25825, 25827, 25829, { f: 5, c: 25831 }, { f: 2, c: 25837 }, 25843, { f: 2, c: 25845 }, { f: 2, c: 25848 }, 25853, 25855, { f: 3, c: 25857 }, 25861, { f: 2, c: 25863 }, { f: 5, c: 25866 }, { f: 2, c: 25872 }, 25875, 25877, 25879, 25882, 25884, { f: 4, c: 25886 }, { f: 4, c: 25894 }, 25901, { f: 4, c: 25904 }, 25911, 25914, { f: 2, c: 25916 }, { f: 5, c: 25920 }, { f: 2, c: 25926 }, { f: 2, c: 25930 }, { f: 2, c: 25933 }, 25936, { f: 3, c: 25938 }, 25944, 25946, 25948, { f: 3, c: 25951 }, { f: 2, c: 25956 }, { f: 4, c: 25959 }, { f: 3, c: 25965 }, 25969, 25971, 25974, { f: 9, c: 25977 }, { f: 3, c: 25988 }, { f: 3, c: 25992 }, { f: 3, c: 25997 }, 26002, 26004, 26006, 26008, 26010, { f: 2, c: 26013 }, 26016, { f: 2, c: 26018 }, 26022, 26024, 26026, 26030, { f: 6, c: 26033 }, 26040, { f: 2, c: 26042 }, { f: 3, c: 26046 }, 26050, { f: 4, c: 26055 }, 26061, { f: 2, c: 26064 }, { f: 3, c: 26067 }, { f: 8, c: 26072 }, 26081, { f: 2, c: 26083 }, { f: 2, c: 26090 }, { f: 4, c: 26098 }, { f: 2, c: 26104 }, { f: 5, c: 26107 }, 26113, { f: 2, c: 26116 }, { f: 3, c: 26119 }, 26123, 26125, { f: 3, c: 26128 }, { f: 3, c: 26134 }, { f: 3, c: 26138 }, 26142, { f: 4, c: 26145 }, 26150, { f: 4, c: 26153 }, 26158, 26160, { f: 2, c: 26162 }, { f: 5, c: 26167 }, 26173, { f: 2, c: 26175 }, { f: 7, c: 26180 }, { f: 2, c: 26189 }, { f: 2, c: 26192 }, { f: 2, c: 26200 }, { f: 2, c: 26203 }, 26206, 26208, { f: 2, c: 26210 }, 26213, 26215, { f: 5, c: 26217 }, { f: 3, c: 26225 }, 26229, { f: 2, c: 26232 }, { f: 3, c: 26235 }, { f: 3, c: 26239 }, 26243, { f: 2, c: 26245 }, { f: 2, c: 26250 }, { f: 4, c: 26253 }, { f: 4, c: 26258 }, { f: 5, c: 26264 }, { f: 4, c: 26270 }, { f: 4, c: 26275 }, { f: 2, c: 26281 }, { f: 2, c: 26284 }, { f: 5, c: 26287 }, { f: 4, c: 26293 }, { f: 4, c: 26298 }, { f: 5, c: 26303 }, 26309, 26312, { f: 12, c: 26314 }, { f: 2, c: 26327 }, 26330, { f: 2, c: 26334 }, { f: 5, c: 26337 }, { f: 2, c: 26343 }, { f: 2, c: 26346 }, { f: 3, c: 26349 }, 26353, { f: 2, c: 26357 }, { f: 2, c: 26362 }, 26365, { f: 2, c: 26369 }, { f: 4, c: 26372 }, 26380, { f: 2, c: 26382 }, { f: 3, c: 26385 }, 26390, { f: 3, c: 26392 }, 26396, 26398, { f: 6, c: 26400 }, 26409, 26414, 26416, { f: 2, c: 26418 }, { f: 4, c: 26422 }, { f: 2, c: 26427 }, { f: 2, c: 26430 }, 26433, { f: 2, c: 26436 }, 26439, { f: 2, c: 26442 }, 26445, 26450, { f: 2, c: 26452 }, { f: 5, c: 26455 }, 26461, { f: 3, c: 26466 }, { f: 2, c: 26470 }, { f: 2, c: 26475 }, 26478, 26484, 26486, { f: 4, c: 26488 }, 26493, 26496, { f: 2, c: 26498 }, { f: 2, c: 26501 }, 26504, 26506, { f: 4, c: 26508 }, { f: 4, c: 26513 }, 26518, 26521, 26523, { f: 3, c: 26527 }, 26532, 26534, 26537, 26540, 26542, { f: 2, c: 26545 }, 26548, { f: 8, c: 26553 }, 26562, { f: 10, c: 26565 }, { f: 3, c: 26581 }, 26587, 26591, 26593, { f: 2, c: 26595 }, { f: 3, c: 26598 }, { f: 2, c: 26602 }, { f: 2, c: 26605 }, 26610, { f: 8, c: 26613 }, 26622, { f: 4, c: 26625 }, 26630, 26637, 26640, 26642, { f: 2, c: 26644 }, { f: 5, c: 26648 }, { f: 3, c: 26654 }, { f: 7, c: 26658 }, { f: 7, c: 26667 }, { f: 3, c: 26676 }, { f: 2, c: 26682 }, 26687, 26695, 26699, 26701, 26703, 26706, { f: 10, c: 26710 }, 26730, { f: 8, c: 26732 }, 26741, { f: 9, c: 26744 }, 26754, 26756, { f: 8, c: 26759 }, { f: 3, c: 26768 }, { f: 3, c: 26772 }, { f: 4, c: 26777 }, 26782, { f: 2, c: 26784 }, { f: 3, c: 26787 }, { f: 4, c: 26793 }, 26798, { f: 2, c: 26801 }, 26804, { f: 10, c: 26806 }, 26817, { f: 6, c: 26819 }, 26826, 26828, { f: 4, c: 26830 }, { f: 2, c: 26835 }, 26841, { f: 4, c: 26843 }, { f: 2, c: 26849 }, { f: 3, c: 26852 }, { f: 6, c: 26856 }, 26863, { f: 3, c: 26866 }, { f: 3, c: 26870 }, 26875, { f: 4, c: 26877 }, { f: 3, c: 26882 }, { f: 5, c: 26886 }, 26892, 26897, { f: 12, c: 26899 }, { f: 3, c: 26913 }, { f: 8, c: 26917 }, { f: 2, c: 26926 }, { f: 3, c: 26929 }, { f: 4, c: 26933 }, { f: 3, c: 26938 }, 26942, { f: 2, c: 26944 }, { f: 7, c: 26947 }, { f: 8, c: 26955 }, { f: 2, c: 26965 }, { f: 2, c: 26968 }, { f: 2, c: 26971 }, 26975, { f: 2, c: 26977 }, { f: 2, c: 26980 }, 26983, { f: 2, c: 26985 }, 26988, { f: 2, c: 26991 }, { f: 3, c: 26994 }, 26998, { f: 2, c: 27002 }, { f: 3, c: 27005 }, 27009, 27011, 27013, { f: 3, c: 27018 }, { f: 6, c: 27022 }, { f: 2, c: 27030 }, { f: 2, c: 27033 }, { f: 10, c: 27037 }, 27049, 27052, { f: 2, c: 27055 }, { f: 2, c: 27058 }, { f: 2, c: 27061 }, { f: 3, c: 27064 }, { f: 3, c: 27068 }, 27072, { f: 8, c: 27074 }, 27087, { f: 3, c: 27089 }, { f: 6, c: 27093 }, { f: 3, c: 27100 }, { f: 6, c: 27105 }, { f: 5, c: 27112 }, { f: 4, c: 27118 }, { f: 9, c: 27124 }, 27134, 27136, { f: 2, c: 27139 }, { f: 4, c: 27142 }, { f: 8, c: 27147 }, { f: 3, c: 27156 }, { f: 4, c: 27162 }, 27168, 27170, { f: 4, c: 27172 }, 27177, { f: 4, c: 27179 }, 27184, { f: 3, c: 27186 }, { f: 2, c: 27190 }, { f: 2, c: 27195 }, { f: 5, c: 27199 }, { f: 2, c: 27205 }, { f: 2, c: 27209 }, { f: 4, c: 27212 }, { f: 7, c: 27217 }, 27226, { f: 3, c: 27228 }, 27232, { f: 2, c: 27235 }, { f: 11, c: 27238 }, { f: 7, c: 27250 }, { f: 2, c: 27258 }, { f: 3, c: 27261 }, { f: 3, c: 27265 }, { f: 4, c: 27269 }, { f: 4, c: 27274 }, 27279, { f: 2, c: 27282 }, { f: 2, c: 27285 }, { f: 4, c: 27288 }, { f: 3, c: 27293 }, 27297, { f: 5, c: 27300 }, 27306, { f: 2, c: 27309 }, { f: 3, c: 27312 }, { f: 4, c: 27316 }, { f: 2, c: 27321 }, { f: 7, c: 27324 }, { f: 15, c: 27332 }, { f: 6, c: 27348 }, 27356, { f: 7, c: 27360 }, 27369, 27371, { f: 6, c: 27373 }, { f: 4, c: 27380 }, { f: 2, c: 27385 }, { f: 8, c: 27388 }, { f: 5, c: 27397 }, { f: 4, c: 27403 }, { f: 2, c: 27408 }, { f: 3, c: 27411 }, { f: 7, c: 27415 }, 27423, { f: 2, c: 27429 }, { f: 10, c: 27432 }, { f: 4, c: 27443 }, 27448, { f: 2, c: 27451 }, { f: 4, c: 27455 }, { f: 2, c: 27460 }, 27464, { f: 2, c: 27466 }, { f: 3, c: 27469 }, { f: 8, c: 27473 }, { f: 5, c: 27482 }, 27488, { f: 2, c: 27496 }, { f: 7, c: 27499 }, { f: 4, c: 27507 }, 27514, { f: 4, c: 27517 }, 27525, 27528, 27532, { f: 4, c: 27534 }, { f: 2, c: 27540 }, 27543, 27545, { f: 2, c: 27548 }, { f: 2, c: 27551 }, { f: 2, c: 27554 }, { f: 5, c: 27557 }, { f: 2, c: 27564 }, { f: 2, c: 27568 }, 27574, { f: 2, c: 27576 }, { f: 3, c: 27580 }, 27584, { f: 2, c: 27587 }, { f: 4, c: 27591 }, 27596, 27598, { f: 2, c: 27600 }, 27608, 27610, { f: 5, c: 27612 }, { f: 8, c: 27618 }, { f: 3, c: 27628 }, { f: 3, c: 27632 }, 27636, { f: 3, c: 27638 }, { f: 3, c: 27642 }, 27646, { f: 5, c: 27648 }, { f: 3, c: 27657 }, 27662, 27666, 27671, { f: 3, c: 27676 }, 27680, 27685, 27693, 27697, 27699, { f: 2, c: 27702 }, { f: 4, c: 27705 }, { f: 2, c: 27710 }, { f: 3, c: 27715 }, 27720, { f: 5, c: 27723 }, { f: 3, c: 27729 }, 27734, { f: 3, c: 27736 }, { f: 2, c: 27746 }, { f: 3, c: 27749 }, { f: 5, c: 27755 }, 27761, 27763, 27765, { f: 2, c: 27767 }, { f: 3, c: 27770 }, { f: 2, c: 27775 }, 27780, 27783, { f: 2, c: 27786 }, { f: 2, c: 27789 }, { f: 2, c: 27793 }, { f: 4, c: 27797 }, 27802, { f: 3, c: 27804 }, 27808, 27810, 27816, 27820, { f: 2, c: 27823 }, { f: 4, c: 27828 }, 27834, { f: 4, c: 27840 }, { f: 3, c: 27846 }, 27851, { f: 3, c: 27853 }, { f: 2, c: 27857 }, { f: 3, c: 27864 }, { f: 2, c: 27868 }, 27871, 27876, { f: 2, c: 27878 }, 27881, { f: 2, c: 27884 }, 27890, 27892, 27897, { f: 2, c: 27903 }, { f: 2, c: 27906 }, { f: 2, c: 27909 }, { f: 3, c: 27912 }, 27917, { f: 3, c: 27919 }, { f: 4, c: 27923 }, 27928, { f: 2, c: 27932 }, { f: 6, c: 27935 }, 27942, { f: 2, c: 27944 }, { f: 2, c: 27948 }, { f: 2, c: 27951 }, 27956, { f: 3, c: 27958 }, 27962, { f: 2, c: 27967 }, 27970, 27972, 27977, 27980, 27984, { f: 4, c: 27989 }, 27995, 27997, 27999, { f: 2, c: 28001 }, { f: 2, c: 28004 }, { f: 2, c: 28007 }, { f: 3, c: 28011 }, { f: 4, c: 28016 }, { f: 2, c: 28021 }, { f: 2, c: 28026 }, { f: 5, c: 28029 }, { f: 2, c: 28035 }, 28038, { f: 2, c: 28042 }, 28045, { f: 2, c: 28047 }, 28050, { f: 5, c: 28054 }, 28060, 28066, 28069, { f: 2, c: 28076 }, { f: 2, c: 28080 }, { f: 2, c: 28083 }, { f: 2, c: 28086 }, { f: 6, c: 28089 }, { f: 3, c: 28097 }, { f: 3, c: 28104 }, { f: 4, c: 28109 }, { f: 4, c: 28114 }, 28119, { f: 3, c: 28122 }, 28127, { f: 2, c: 28130 }, 28133, { f: 3, c: 28135 }, 28141, { f: 2, c: 28143 }, 28146, 28148, 28152, { f: 8, c: 28157 }, { f: 4, c: 28166 }, 28171, 28175, { f: 2, c: 28178 }, 28181, { f: 2, c: 28184 }, { f: 2, c: 28187 }, { f: 2, c: 28190 }, 28194, { f: 2, c: 28199 }, 28202, 28206, { f: 2, c: 28208 }, 28211, { f: 3, c: 28213 }, 28217, { f: 3, c: 28219 }, { f: 4, c: 28223 }, { f: 8, c: 28229 }, { f: 4, c: 28239 }, 28245, 28247, { f: 2, c: 28249 }, { f: 2, c: 28252 }, { f: 11, c: 28256 }, { f: 2, c: 28268 }, { f: 14, c: 28272 }, { f: 3, c: 28288 }, 28292, { f: 2, c: 28295 }, { f: 5, c: 28298 }, { f: 5, c: 28305 }, 28311, { f: 3, c: 28313 }, 28318, { f: 2, c: 28320 }, { f: 2, c: 28323 }, 28326, { f: 2, c: 28328 }, { f: 4, c: 28331 }, 28336, 28339, 28341, { f: 2, c: 28344 }, 28348, { f: 3, c: 28350 }, 28355, 28358, { f: 3, c: 28360 }, 28365, 28368, 28370, 28374, { f: 2, c: 28376 }, { f: 3, c: 28379 }, 28387, 28391, { f: 2, c: 28394 }, { f: 2, c: 28397 }, { f: 2, c: 28400 }, 28403, { f: 2, c: 28405 }, { f: 5, c: 28410 }, 28416, { f: 3, c: 28419 }, { f: 2, c: 28423 }, { f: 5, c: 28426 }, { f: 3, c: 28432 }, { f: 4, c: 28438 }, { f: 5, c: 28443 }, 28449, { f: 4, c: 28453 }, 28462, 28464, { f: 2, c: 28468 }, 28471, { f: 5, c: 28473 }, 28480, { f: 4, c: 28482 }, { f: 3, c: 28488 }, 28492, { f: 3, c: 28494 }, { f: 2, c: 28498 }, { f: 3, c: 28501 }, { f: 2, c: 28506 }, 28509, { f: 3, c: 28511 }, 28515, 28517, { f: 6, c: 28519 }, 28529, 28531, { f: 2, c: 28533 }, 28537, 28539, { f: 2, c: 28541 }, { f: 3, c: 28545 }, 28549, { f: 2, c: 28554 }, { f: 8, c: 28559 }, { f: 4, c: 28568 }, { f: 3, c: 28573 }, { f: 2, c: 28578 }, { f: 2, c: 28581 }, 28584, { f: 4, c: 28586 }, { f: 2, c: 28591 }, 28594, { f: 2, c: 28596 }, { f: 2, c: 28599 }, { f: 6, c: 28602 }, { f: 5, c: 28612 }, { f: 7, c: 28618 }, { f: 2, c: 28627 }, { f: 2, c: 28630 }, { f: 2, c: 28633 }, { f: 2, c: 28636 }, { f: 2, c: 28642 }, { f: 6, c: 28645 }, { f: 2, c: 28652 }, { f: 8, c: 28658 }, 28667, 28669, { f: 6, c: 28671 }, { f: 2, c: 28679 }, 28682, { f: 3, c: 28684 }, 28688, { f: 3, c: 28690 }, { f: 2, c: 28694 }, 28697, 28700, 28702, { f: 2, c: 28705 }, { f: 3, c: 28708 }, { f: 7, c: 28713 }, 28721, { f: 2, c: 28723 }, { f: 3, c: 28726 }, { f: 4, c: 28730 }, { f: 4, c: 28735 }, { f: 7, c: 28741 }, { f: 2, c: 28749 }, 28752, { f: 3, c: 28754 }, { f: 2, c: 28758 }, { f: 4, c: 28761 }, { f: 4, c: 28767 }, { f: 2, c: 28773 }, { f: 3, c: 28776 }, 28782, { f: 4, c: 28785 }, 28791, { f: 3, c: 28793 }, 28797, { f: 4, c: 28801 }, { f: 3, c: 28806 }, { f: 3, c: 28811 }, { f: 3, c: 28815 }, 28819, { f: 2, c: 28823 }, { f: 2, c: 28826 }, { f: 13, c: 28830 }, 28848, 28850, { f: 3, c: 28852 }, 28858, { f: 2, c: 28862 }, { f: 4, c: 28868 }, 28873, { f: 4, c: 28875 }, { f: 8, c: 28880 }, 28890, { f: 3, c: 28892 }, { f: 4, c: 28896 }, 28901, 28906, 28910, { f: 4, c: 28912 }, { f: 2, c: 28917 }, 28920, { f: 3, c: 28922 }, { f: 11, c: 28926 }, { f: 5, c: 28939 }, { f: 2, c: 28945 }, 28948, 28951, { f: 6, c: 28955 }, { f: 4, c: 28962 }, { f: 8, c: 28967 }, { f: 4, c: 28978 }, { f: 14, c: 28983 }, { f: 3, c: 28998 }, 29003, 29005, { f: 3, c: 29007 }, { f: 9, c: 29011 }, 29021, { f: 3, c: 29023 }, 29027, 29029, { f: 2, c: 29034 }, 29037, { f: 3, c: 29039 }, { f: 4, c: 29044 }, 29049, { f: 2, c: 29051 }, { f: 6, c: 29054 }, { f: 5, c: 29061 }, { f: 4, c: 29067 }, { f: 2, c: 29072 }, 29075, { f: 2, c: 29077 }, { f: 5, c: 29082 }, { f: 7, c: 29089 }, { f: 3, c: 29097 }, { f: 4, c: 29101 }, 29106, 29108, { f: 3, c: 29110 }, { f: 4, c: 29114 }, { f: 2, c: 29119 }, 29122, { f: 4, c: 29124 }, { f: 5, c: 29129 }, { f: 3, c: 29135 }, 29139, { f: 3, c: 29142 }, { f: 2, c: 29146 }, { f: 2, c: 29149 }, { f: 4, c: 29153 }, { f: 5, c: 29160 }, { f: 5, c: 29167 }, { f: 4, c: 29173 }, { f: 2, c: 29178 }, 29181, { f: 7, c: 29183 }, { f: 6, c: 29191 }, { f: 2, c: 29198 }, { f: 10, c: 29201 }, 29212, { f: 10, c: 29214 }, 29225, 29227, { f: 3, c: 29229 }, { f: 2, c: 29235 }, 29244, { f: 7, c: 29248 }, { f: 3, c: 29257 }, { f: 4, c: 29262 }, { f: 3, c: 29267 }, 29271, 29274, 29276, 29278, 29280, { f: 3, c: 29283 }, 29288, { f: 4, c: 29290 }, { f: 2, c: 29296 }, { f: 2, c: 29299 }, { f: 3, c: 29302 }, { f: 2, c: 29307 }, { f: 2, c: 29314 }, { f: 5, c: 29317 }, 29324, 29326, { f: 2, c: 29328 }, { f: 3, c: 29331 }, { f: 8, c: 29335 }, { f: 2, c: 29344 }, { f: 4, c: 29347 }, { f: 4, c: 29352 }, 29358, { f: 3, c: 29361 }, 29365, { f: 6, c: 29370 }, { f: 3, c: 29381 }, { f: 4, c: 29385 }, 29391, 29393, { f: 4, c: 29395 }, 29400, { f: 4, c: 29402 }, 29407, { f: 6, c: 29410 }, { f: 2, c: 29418 }, { f: 2, c: 29429 }, { f: 3, c: 29438 }, 29442, { f: 6, c: 29444 }, { f: 3, c: 29451 }, { f: 4, c: 29455 }, 29460, { f: 3, c: 29464 }, { f: 2, c: 29471 }, { f: 2, c: 29475 }, { f: 3, c: 29478 }, 29485, { f: 2, c: 29487 }, { f: 2, c: 29490 }, 29493, 29498, { f: 2, c: 29500 }, 29504, { f: 2, c: 29506 }, { f: 7, c: 29510 }, { f: 2, c: 29518 }, 29521, { f: 4, c: 29523 }, { f: 8, c: 29528 }, { f: 7, c: 29537 }, 29545, 29550, 29553, { f: 2, c: 29555 }, 29558, 29561, 29565, 29567, { f: 3, c: 29569 }, { f: 2, c: 29573 }, 29576, 29578, { f: 2, c: 29580 }, { f: 2, c: 29583 }, { f: 4, c: 29586 }, { f: 4, c: 29591 }, { f: 3, c: 29596 }, { f: 2, c: 29600 }, { f: 6, c: 29603 }, 29610, { f: 2, c: 29612 }, 29617, { f: 3, c: 29620 }, { f: 2, c: 29624 }, { f: 4, c: 29628 }, 29633, { f: 5, c: 29635 }, { f: 2, c: 29643 }, 29646, { f: 7, c: 29650 }, { f: 4, c: 29658 }, 29663, { f: 4, c: 29665 }, 29670, 29672, { f: 3, c: 29674 }, { f: 4, c: 29678 }, { f: 11, c: 29683 }, { f: 4, c: 29695 }, 29700, { f: 2, c: 29703 }, { f: 4, c: 29707 }, { f: 9, c: 29713 }, { f: 6, c: 29724 }, { f: 2, c: 29731 }, 29735, 29737, 29739, 29741, 29743, { f: 2, c: 29745 }, { f: 5, c: 29751 }, { f: 2, c: 29757 }, 29760, { f: 9, c: 29762 }, { f: 9, c: 29772 }, 29782, 29784, 29789, { f: 3, c: 29792 }, { f: 5, c: 29796 }, { f: 2, c: 29803 }, { f: 2, c: 29806 }, { f: 5, c: 29809 }, { f: 6, c: 29816 }, 29823, 29826, { f: 3, c: 29828 }, 29832, 29834, { f: 2, c: 29836 }, 29839, { f: 11, c: 29841 }, 29853, { f: 4, c: 29855 }, { f: 2, c: 29860 }, { f: 6, c: 29866 }, { f: 9, c: 29873 }, { f: 2, c: 29883 }, { f: 12, c: 29886 }, { f: 4, c: 29899 }, { f: 2, c: 29904 }, 29907, { f: 5, c: 29909 }, 29915, 29917, 29919, 29921, 29925, { f: 7, c: 29927 }, { f: 4, c: 29936 }, 29941, { f: 7, c: 29944 }, { f: 4, c: 29952 }, { f: 7, c: 29957 }, 29966, 29968, 29970, { f: 4, c: 29972 }, 29979, { f: 2, c: 29981 }, { f: 3, c: 29984 }, 29988, { f: 2, c: 29990 }, 29994, 29998, 30004, 30006, 30009, { f: 2, c: 30012 }, 30015, { f: 4, c: 30017 }, { f: 2, c: 30022 }, { f: 2, c: 30025 }, 30029, { f: 4, c: 30032 }, { f: 4, c: 30037 }, { f: 4, c: 30046 }, { f: 2, c: 30051 }, { f: 3, c: 30055 }, { f: 6, c: 30060 }, 30067, 30069, 30071, { f: 5, c: 30074 }, { f: 3, c: 30080 }, { f: 2, c: 30084 }, { f: 3, c: 30088 }, { f: 3, c: 30092 }, 30096, 30099, 30101, 30104, { f: 2, c: 30107 }, 30110, 30114, { f: 5, c: 30118 }, 30125, { f: 2, c: 30134 }, { f: 2, c: 30138 }, { f: 3, c: 30143 }, 30150, { f: 2, c: 30155 }, { f: 4, c: 30158 }, 30163, 30167, 30170, { f: 2, c: 30172 }, { f: 3, c: 30175 }, 30181, 30185, { f: 4, c: 30188 }, { f: 2, c: 30194 }, { f: 4, c: 30197 }, { f: 2, c: 30202 }, { f: 2, c: 30205 }, 30212, { f: 4, c: 30214 }, { f: 2, c: 30222 }, { f: 4, c: 30225 }, 30230, 30234, { f: 2, c: 30236 }, 30243, 30248, 30252, { f: 2, c: 30254 }, { f: 2, c: 30257 }, { f: 2, c: 30262 }, { f: 2, c: 30265 }, 30269, 30273, { f: 2, c: 30276 }, 30280, { f: 2, c: 30282 }, { f: 6, c: 30286 }, 30293, 30295, { f: 3, c: 30297 }, 30301, { f: 2, c: 30304 }, 30310, 30312, 30314, { f: 3, c: 30323 }, [12136, 30326], 30327, { f: 2, c: 30329 }, { f: 3, c: 30335 }, 30339, 30341, { f: 2, c: 30345 }, { f: 2, c: 30348 }, { f: 2, c: 30351 }, 30354, { f: 2, c: 30356 }, { f: 2, c: 30359 }, { f: 9, c: 30363 }, { f: 9, c: 30373 }, { f: 2, c: 30383 }, 30387, { f: 3, c: 30389 }, 30393, { f: 4, c: 30395 }, { f: 2, c: 30400 }, { f: 2, c: 30403 }, 30407, 30409, { f: 2, c: 30411 }, 30419, 30421, { f: 2, c: 30425 }, { f: 2, c: 30428 }, 30432, 30434, 30438, { f: 6, c: 30440 }, 30448, 30451, { f: 3, c: 30453 }, { f: 2, c: 30458 }, 30461, { f: 2, c: 30463 }, { f: 2, c: 30466 }, { f: 2, c: 30469 }, 30474, 30476, { f: 11, c: 30478 }, { f: 4, c: 30491 }, 30497, { f: 3, c: 30499 }, 30503, { f: 3, c: 30506 }, 30510, { f: 5, c: 30512 }, 30521, 30523, { f: 3, c: 30525 }, 30530, { f: 3, c: 30532 }, { f: 7, c: 30536 }, { f: 8, c: 30546 }, { f: 2, c: 30556 }, { f: 2, c: 30559 }, 30564, 30567, { f: 2, c: 30569 }, { f: 12, c: 30573 }, { f: 3, c: 30586 }, { f: 3, c: 30593 }, { f: 6, c: 30598 }, { f: 2, c: 30607 }, { f: 5, c: 30611 }, { f: 5, c: 30617 }, 30625, { f: 2, c: 30627 }, 30630, 30632, 30635, { f: 2, c: 30638 }, { f: 2, c: 30641 }, 30644, { f: 5, c: 30646 }, 30654, { f: 7, c: 30656 }, { f: 5, c: 30664 }, { f: 9, c: 30670 }, { f: 2, c: 30680 }, { f: 5, c: 30685 }, 30692, 30694, 30696, 30698, { f: 3, c: 30704 }, { f: 2, c: 30708 }, 30711, { f: 4, c: 30713 }, { f: 6, c: 30723 }, { f: 2, c: 30730 }, { f: 3, c: 30734 }, 30739, 30741, 30745, 30747, 30750, { f: 3, c: 30752 }, 30756, 30760, { f: 2, c: 30762 }, { f: 2, c: 30766 }, { f: 3, c: 30769 }, { f: 2, c: 30773 }, 30781, 30783, { f: 2, c: 30785 }, 30788, 30790, { f: 4, c: 30792 }, 30797, 30799, 30801, { f: 2, c: 30803 }, { f: 5, c: 30808 }, { f: 6, c: 30814 }, { f: 3, c: 30821 }, 30825, { f: 7, c: 30832 }, { f: 4, c: 30840 }, { f: 10, c: 30845 }, 30856, { f: 2, c: 30858 }, { f: 2, c: 30863 }, 30866, { f: 3, c: 30868 }, 30873, { f: 2, c: 30877 }, 30880, 30882, 30884, 30886, 30888, { f: 3, c: 30890 }, { f: 2, c: 30894 }, { f: 3, c: 30901 }, 30907, 30909, { f: 2, c: 30911 }, { f: 3, c: 30914 }, { f: 3, c: 30918 }, { f: 4, c: 30924 }, { f: 3, c: 30929 }, { f: 3, c: 30934 }, { f: 8, c: 30939 }, { f: 3, c: 30948 }, { f: 3, c: 30953 }, { f: 2, c: 30957 }, { f: 2, c: 30960 }, 30963, { f: 2, c: 30965 }, { f: 2, c: 30968 }, { f: 2, c: 30971 }, { f: 3, c: 30974 }, { f: 3, c: 30978 }, { f: 8, c: 30982 }, { f: 4, c: 30991 }, { f: 5, c: 30996 }, { f: 4, c: 31002 }, { f: 5, c: 31007 }, 31013, { f: 3, c: 31015 }, { f: 4, c: 31021 }, { f: 2, c: 31026 }, { f: 5, c: 31029 }, 31037, 31039, { f: 4, c: 31042 }, 31047, { f: 9, c: 31050 }, { f: 2, c: 31060 }, { f: 2, c: 31064 }, 31073, { f: 2, c: 31075 }, 31078, { f: 4, c: 31081 }, 31086, { f: 7, c: 31088 }, 31097, { f: 5, c: 31099 }, { f: 2, c: 31106 }, { f: 4, c: 31110 }, { f: 2, c: 31115 }, { f: 10, c: 31120 }, { f: 11, c: 31131 }, { f: 2, c: 31144 }, { f: 3, c: 31147 }, 31151, 31154, { f: 4, c: 31156 }, [12145, 31160], 31164, 31167, 31170, { f: 2, c: 31172 }, { f: 2, c: 31175 }, 31178, 31180, { f: 3, c: 31182 }, { f: 2, c: 31187 }, { f: 2, c: 31190 }, { f: 6, c: 31193 }, { f: 3, c: 31200 }, 31205, 31208, 31210, 31212, 31214, { f: 7, c: 31217 }, { f: 2, c: 31225 }, 31228, { f: 2, c: 31230 }, 31233, { f: 2, c: 31236 }, { f: 4, c: 31239 }, 31244, { f: 5, c: 31247 }, { f: 2, c: 31253 }, { f: 2, c: 31256 }, { f: 3, c: 31259 }, 31263, { f: 2, c: 31265 }, { f: 10, c: 31268 }, { f: 2, c: 31279 }, 31282, { f: 3, c: 31284 }, 31288, 31290, 31294, { f: 5, c: 31297 }, { f: 5, c: 31303 }, { f: 2, c: 31311 }, { f: 5, c: 31314 }, { f: 9, c: 31320 }, { f: 6, c: 31331 }, 31338, { f: 4, c: 31340 }, { f: 3, c: 31345 }, 31349, { f: 4, c: 31355 }, 31362, 31365, 31367, { f: 4, c: 31369 }, { f: 3, c: 31374 }, { f: 2, c: 31379 }, { f: 3, c: 31385 }, 31390, { f: 4, c: 31393 }, 31399, 31403, { f: 4, c: 31407 }, { f: 2, c: 31412 }, { f: 3, c: 31415 }, { f: 4, c: 31419 }, { f: 4, c: 31424 }, 31430, 31433, { f: 10, c: 31436 }, { f: 2, c: 31447 }, { f: 4, c: 31450 }, { f: 2, c: 31457 }, 31460, { f: 3, c: 31463 }, { f: 2, c: 31467 }, 31470, { f: 6, c: 31472 }, { f: 2, c: 31479 }, { f: 2, c: 31483 }, 31486, { f: 3, c: 31488 }, 31493, 31495, 31497, { f: 3, c: 31500 }, 31504, { f: 2, c: 31506 }, { f: 3, c: 31510 }, 31514, { f: 2, c: 31516 }, 31519, { f: 3, c: 31521 }, 31527, 31529, 31533, { f: 2, c: 31535 }, 31538, { f: 4, c: 31540 }, 31545, 31547, 31549, { f: 6, c: 31551 }, 31560, 31562, { f: 2, c: 31565 }, 31571, 31573, 31575, 31577, 31580, { f: 2, c: 31582 }, 31585, { f: 4, c: 31587 }, { f: 6, c: 31592 }, { f: 2, c: 31599 }, { f: 2, c: 31603 }, 31606, 31608, 31610, { f: 2, c: 31612 }, 31615, { f: 4, c: 31617 }, { f: 5, c: 31622 }, 31628, { f: 2, c: 31630 }, { f: 3, c: 31633 }, 31638, { f: 4, c: 31640 }, { f: 3, c: 31646 }, { f: 3, c: 31651 }, { f: 3, c: 31662 }, { f: 2, c: 31666 }, { f: 3, c: 31669 }, { f: 7, c: 31673 }, { f: 2, c: 31682 }, 31685, 31688, 31690, { f: 4, c: 31693 }, 31698, { f: 5, c: 31700 }, { f: 2, c: 31707 }, { f: 3, c: 31710 }, { f: 2, c: 31714 }, { f: 2, c: 31719 }, { f: 3, c: 31723 }, { f: 2, c: 31727 }, 31730, { f: 3, c: 31732 }, { f: 4, c: 31736 }, 31741, 31743, { f: 6, c: 31745 }, { f: 3, c: 31752 }, 31758, { f: 6, c: 31760 }, { f: 7, c: 31767 }, 31776, 31778, { f: 2, c: 31780 }, { f: 2, c: 31784 }, { f: 12, c: 31788 }, { f: 4, c: 31801 }, 31810, { f: 8, c: 31812 }, { f: 14, c: 31822 }, { f: 2, c: 31837 }, { f: 3, c: 31841 }, { f: 4, c: 31845 }, 31851, 31853, { f: 3, c: 31855 }, { f: 6, c: 31861 }, { f: 11, c: 31870 }, { f: 7, c: 31882 }, { f: 2, c: 31891 }, 31894, { f: 3, c: 31897 }, { f: 2, c: 31904 }, 31907, { f: 4, c: 31910 }, { f: 3, c: 31915 }, { f: 2, c: 31919 }, { f: 5, c: 31924 }, { f: 2, c: 31930 }, { f: 2, c: 31935 }, { f: 3, c: 31938 }, 31942, 31945, 31947, { f: 7, c: 31950 }, 31960, { f: 2, c: 31962 }, { f: 6, c: 31969 }, { f: 6, c: 31977 }, 31985, 31987, 31989, 31991, 31994, { f: 2, c: 31996 }, 31999, 32001, 32003, 32012, { f: 2, c: 32014 }, { f: 2, c: 32017 }, 32022, 32024, { f: 3, c: 32029 }, { f: 4, c: 32035 }, { f: 3, c: 32040 }, { f: 3, c: 32044 }, { f: 5, c: 32052 }, 32059, { f: 2, c: 32061 }, 32065, 32067, 32069, { f: 7, c: 32071 }, 32079, { f: 12, c: 32081 }, { f: 2, c: 32095 }, { f: 3, c: 32099 }, 32103, { f: 5, c: 32105 }, { f: 2, c: 32111 }, { f: 2, c: 32116 }, 32120, { f: 7, c: 32122 }, 32130, { f: 2, c: 32132 }, 32135, { f: 5, c: 32138 }, { f: 3, c: 32144 }, { f: 8, c: 32148 }, 32157, { f: 3, c: 32159 }, { f: 2, c: 32164 }, { f: 4, c: 32167 }, 32175, { f: 3, c: 32181 }, 32188, { f: 4, c: 32192 }, { f: 2, c: 32197 }, { f: 2, c: 32200 }, { f: 5, c: 32204 }, 32211, { f: 2, c: 32213 }, { f: 3, c: 32218 }, 32223, 32226, { f: 2, c: 32228 }, 32231, { f: 2, c: 32234 }, { f: 2, c: 32237 }, 32240, 32243, 32245, { f: 2, c: 32247 }, 32250, { f: 12, c: 32252 }, { f: 4, c: 32268 }, { f: 9, c: 32274 }, 32284, { f: 3, c: 32288 }, { f: 3, c: 32292 }, { f: 3, c: 32296 }, 32300, { f: 2, c: 32303 }, 32307, 32312, 32314, 32316, { f: 2, c: 32319 }, { f: 3, c: 32322 }, { f: 10, c: 32328 }, 32339, { f: 4, c: 32342 }, { f: 3, c: 32347 }, { f: 3, c: 32351 }, { f: 6, c: 32355 }, 32364, { f: 2, c: 32369 }, { f: 5, c: 32372 }, { f: 2, c: 32378 }, { f: 3, c: 32383 }, { f: 5, c: 32387 }, 32393, 32395, 32398, { f: 3, c: 32400 }, 32405, 32407, { f: 2, c: 32409 }, { f: 2, c: 32413 }, 32430, 32436, { f: 2, c: 32443 }, 32470, 32484, 32492, 32505, 32522, 32528, 32542, 32567, 32569, { f: 7, c: 32571 }, 32579, { f: 6, c: 32582 }, 32589, 32591, { f: 2, c: 32594 }, 32598, 32601, { f: 4, c: 32603 }, 32608, { f: 5, c: 32611 }, { f: 3, c: 32619 }, 32623, 32627, { f: 2, c: 32629 }, 32632, { f: 4, c: 32634 }, { f: 2, c: 32639 }, { f: 3, c: 32642 }, 32647, 32649, 32651, 32653, { f: 5, c: 32655 }, { f: 5, c: 32661 }, { f: 2, c: 32667 }, 32672, { f: 2, c: 32674 }, 32678, 32680, { f: 5, c: 32682 }, 32689, { f: 5, c: 32691 }, { f: 2, c: 32698 }, 32702, 32704, { f: 3, c: 32706 }, { f: 4, c: 32710 }, 32715, 32717, { f: 3, c: 32719 }, 32723, { f: 2, c: 32726 }, { f: 6, c: 32729 }, { f: 3, c: 32738 }, { f: 2, c: 32743 }, { f: 4, c: 32746 }, 32751, 32754, { f: 5, c: 32756 }, 32762, { f: 3, c: 32765 }, 32770, { f: 4, c: 32775 }, { f: 2, c: 32782 }, 32785, 32787, { f: 2, c: 32794 }, { f: 3, c: 32797 }, 32801, { f: 2, c: 32803 }, 32811, 32813, { f: 2, c: 32815 }, 32818, 32820, { f: 2, c: 32825 }, 32828, 32830, { f: 2, c: 32832 }, { f: 2, c: 32836 }, { f: 3, c: 32839 }, { f: 4, c: 32846 }, 32851, 32853, 32855, 32857, { f: 3, c: 32859 }, { f: 10, c: 32863 }, { f: 4, c: 32875 }, 32884, 32888, { f: 3, c: 32890 }, { f: 2, c: 32897 }, 32904, 32906, { f: 6, c: 32909 }, { f: 2, c: 32916 }, 32919, 32921, 32926, 32931, { f: 3, c: 32934 }, 32940, 32944, 32947, { f: 2, c: 32949 }, { f: 2, c: 32952 }, 32955, 32965, { f: 5, c: 32967 }, { f: 7, c: 32975 }, 32984, { f: 2, c: 32991 }, { f: 2, c: 32994 }, 32998, 33006, 33013, 33015, 33017, 33019, { f: 4, c: 33022 }, { f: 2, c: 33027 }, { f: 2, c: 33031 }, { f: 2, c: 33035 }, 33045, 33047, 33049, { f: 2, c: 33052 }, { f: 13, c: 33055 }, { f: 2, c: 33069 }, 33072, { f: 3, c: 33075 }, 33079, { f: 4, c: 33082 }, { f: 7, c: 33087 }, 33095, 33097, 33101, 33103, 33106, { f: 2, c: 33111 }, { f: 5, c: 33115 }, { f: 3, c: 33122 }, 33128, 33130, 33132, 33135, { f: 2, c: 33138 }, { f: 3, c: 33141 }, 33153, { f: 5, c: 33155 }, 33161, { f: 4, c: 33163 }, 33168, { f: 6, c: 33170 }, 33177, { f: 2, c: 33182 }, { f: 2, c: 33185 }, { f: 2, c: 33188 }, 33191, { f: 8, c: 33195 }, { f: 6, c: 33204 }, 33212, { f: 2, c: 33220 }, { f: 2, c: 33223 }, 33227, 33230, { f: 8, c: 33232 }, 33241, { f: 4, c: 33243 }, { f: 2, c: 33249 }, { f: 3, c: 33252 }, 33257, 33259, { f: 5, c: 33262 }, { f: 5, c: 33269 }, 33277, 33279, 33283, 33291, { f: 2, c: 33294 }, 33297, 33299, { f: 6, c: 33301 }, 33309, 33312, { f: 4, c: 33316 }, 33321, 33326, 33330, 33338, { f: 2, c: 33340 }, { f: 5, c: 33343 }, { f: 2, c: 33349 }, 33352, 33354, { f: 3, c: 33356 }, { f: 8, c: 33360 }, { f: 4, c: 33371 }, { f: 4, c: 33376 }, 33381, 33383, { f: 2, c: 33385 }, { f: 2, c: 33388 }, { f: 2, c: 33397 }, [12171, 33400], { f: 2, c: 33403 }, { f: 2, c: 33408 }, 33411, { f: 3, c: 33413 }, 33417, 33420, 33424, { f: 4, c: 33427 }, { f: 2, c: 33434 }, 33438, 33440, { f: 2, c: 33442 }, 33447, 33458, { f: 2, c: 33461 }, 33466, 33468, { f: 2, c: 33471 }, { f: 2, c: 33474 }, { f: 2, c: 33477 }, 33481, 33488, 33494, { f: 2, c: 33497 }, 33501, 33506, { f: 3, c: 33512 }, { f: 3, c: 33516 }, 33520, { f: 2, c: 33522 }, { f: 2, c: 33525 }, 33528, 33530, { f: 5, c: 33532 }, { f: 2, c: 33546 }, 33549, 33552, { f: 2, c: 33554 }, 33558, { f: 2, c: 33560 }, { f: 10, c: 33565 }, { f: 2, c: 33577 }, 33582, 33584, 33586, 33591, 33595, { f: 3, c: 33597 }, { f: 2, c: 33601 }, { f: 2, c: 33604 }, 33608, { f: 5, c: 33610 }, 33619, { f: 5, c: 33621 }, 33629, 33634, { f: 7, c: 33648 }, { f: 2, c: 33657 }, { f: 7, c: 33662 }, { f: 2, c: 33671 }, { f: 3, c: 33675 }, { f: 3, c: 33679 }, { f: 2, c: 33684 }, 33687, { f: 2, c: 33689 }, 33693, 33695, 33697, { f: 4, c: 33699 }, { f: 4, c: 33708 }, 33717, 33723, { f: 2, c: 33726 }, { f: 3, c: 33730 }, 33734, { f: 2, c: 33736 }, 33739, { f: 2, c: 33741 }, { f: 4, c: 33744 }, 33749, 33751, { f: 3, c: 33753 }, 33758, { f: 3, c: 33762 }, { f: 3, c: 33766 }, { f: 4, c: 33771 }, { f: 5, c: 33779 }, { f: 3, c: 33786 }, { f: 3, c: 33790 }, 33794, 33797, { f: 2, c: 33800 }, 33808, { f: 6, c: 33810 }, { f: 3, c: 33817 }, { f: 6, c: 33822 }, { f: 3, c: 33833 }, { f: 4, c: 33837 }, { f: 3, c: 33842 }, { f: 2, c: 33846 }, { f: 3, c: 33849 }, { f: 8, c: 33854 }, { f: 2, c: 33863 }, { f: 7, c: 33866 }, { f: 4, c: 33875 }, 33880, { f: 4, c: 33885 }, 33890, 33893, { f: 2, c: 33895 }, 33898, 33902, 33904, 33906, 33908, 33913, { f: 7, c: 33915 }, { f: 4, c: 33923 }, 33930, 33933, { f: 4, c: 33935 }, { f: 2, c: 33941 }, 33944, { f: 2, c: 33946 }, { f: 4, c: 33949 }, { f: 13, c: 33954 }, { f: 2, c: 33968 }, 33971, { f: 3, c: 33973 }, 33979, 33982, { f: 2, c: 33986 }, { f: 4, c: 33989 }, 33996, { f: 2, c: 33998 }, 34002, { f: 2, c: 34004 }, { f: 6, c: 34007 }, 34014, { f: 2, c: 34017 }, 34020, { f: 5, c: 34023 }, 34029, { f: 11, c: 34033 }, 34046, { f: 12, c: 34048 }, { f: 4, c: 34061 }, 34066, { f: 2, c: 34069 }, { f: 2, c: 34072 }, { f: 3, c: 34075 }, 34080, 34082, { f: 2, c: 34084 }, { f: 4, c: 34087 }, { f: 9, c: 34094 }, { f: 3, c: 34110 }, 34114, { f: 2, c: 34116 }, 34119, { f: 3, c: 34123 }, { f: 3, c: 34127 }, 34132, 34135, { f: 4, c: 34138 }, { f: 3, c: 34143 }, 34147, { f: 3, c: 34149 }, { f: 2, c: 34155 }, { f: 4, c: 34158 }, 34163, { f: 2, c: 34165 }, 34168, { f: 2, c: 34172 }, { f: 5, c: 34175 }, 34182, 34185, 34187, { f: 2, c: 34189 }, 34192, { f: 2, c: 34194 }, { f: 6, c: 34197 }, { f: 2, c: 34205 }, { f: 4, c: 34208 }, 34213, 34215, { f: 3, c: 34219 }, { f: 6, c: 34225 }, 34232, { f: 6, c: 34235 }, { f: 7, c: 34242 }, { f: 3, c: 34250 }, { f: 2, c: 34257 }, 34260, { f: 6, c: 34262 }, { f: 6, c: 34270 }, { f: 3, c: 34278 }, { f: 9, c: 34283 }, 34293, { f: 2, c: 34295 }, { f: 3, c: 34300 }, { f: 4, c: 34304 }, { f: 3, c: 34312 }, { f: 5, c: 34316 }, { f: 4, c: 34322 }, { f: 3, c: 34327 }, { f: 3, c: 34331 }, { f: 3, c: 34335 }, { f: 4, c: 34339 }, 34344, { f: 3, c: 34346 }, { f: 10, c: 34350 }, 34361, 34363, { f: 2, c: 34365 }, { f: 13, c: 34368 }, { f: 2, c: 34386 }, { f: 4, c: 34390 }, 34395, 34397, { f: 2, c: 34400 }, { f: 4, c: 34403 }, { f: 3, c: 34408 }, 34413, { f: 2, c: 34415 }, { f: 7, c: 34418 }, { f: 7, c: 34435 }, { f: 5, c: 34446 }, 34452, { f: 6, c: 34454 }, { f: 5, c: 34462 }, { f: 2, c: 34469 }, 34475, { f: 2, c: 34477 }, { f: 2, c: 34482 }, { f: 3, c: 34487 }, { f: 5, c: 34491 }, { f: 3, c: 34497 }, 34501, 34504, { f: 2, c: 34508 }, { f: 2, c: 34514 }, { f: 3, c: 34517 }, 34522, { f: 2, c: 34524 }, { f: 4, c: 34528 }, { f: 4, c: 34533 }, { f: 3, c: 34538 }, 34543, { f: 3, c: 34549 }, { f: 3, c: 34555 }, 34559, 34561, { f: 2, c: 34564 }, { f: 2, c: 34571 }, { f: 4, c: 34574 }, 34580, 34582, 34585, 34587, 34589, { f: 2, c: 34591 }, 34596, { f: 3, c: 34598 }, { f: 4, c: 34602 }, { f: 2, c: 34607 }, { f: 2, c: 34610 }, { f: 2, c: 34613 }, { f: 3, c: 34616 }, { f: 2, c: 34620 }, { f: 7, c: 34624 }, { f: 2, c: 34634 }, 34637, { f: 4, c: 34639 }, 34644, 34646, 34648, { f: 6, c: 34650 }, { f: 2, c: 34657 }, { f: 7, c: 34663 }, 34671, { f: 3, c: 34673 }, 34677, 34679, { f: 2, c: 34681 }, { f: 3, c: 34687 }, { f: 2, c: 34694 }, { f: 2, c: 34697 }, 34700, { f: 5, c: 34702 }, { f: 3, c: 34708 }, { f: 6, c: 34712 }, { f: 2, c: 34720 }, { f: 5, c: 34723 }, { f: 2, c: 34729 }, 34734, { f: 3, c: 34736 }, 34740, { f: 4, c: 34742 }, 34748, { f: 2, c: 34750 }, { f: 3, c: 34753 }, 34757, 34759, 34761, { f: 2, c: 34764 }, { f: 2, c: 34767 }, { f: 7, c: 34772 }, { f: 4, c: 34780 }, { f: 2, c: 34785 }, 34788, { f: 4, c: 34790 }, 34795, 34797, { f: 2, c: 34800 }, { f: 3, c: 34803 }, { f: 2, c: 34807 }, 34810, { f: 2, c: 34812 }, { f: 4, c: 34815 }, 34820, { f: 3, c: 34823 }, { f: 5, c: 34827 }, 34834, 34836, { f: 4, c: 34839 }, { f: 3, c: 34844 }, 34848, { f: 13, c: 34852 }, { f: 3, c: 34867 }, { f: 2, c: 34871 }, 34874, { f: 3, c: 34877 }, { f: 3, c: 34881 }, { f: 3, c: 34887 }, 34891, { f: 5, c: 34894 }, { f: 2, c: 34901 }, 34904, 34906, 34908, { f: 3, c: 34910 }, { f: 2, c: 34918 }, 34922, 34925, 34927, 34929, { f: 4, c: 34931 }, 34936, { f: 3, c: 34938 }, 34944, 34947, { f: 2, c: 34950 }, { f: 2, c: 34953 }, 34956, { f: 4, c: 34958 }, { f: 3, c: 34963 }, { f: 5, c: 34967 }, { f: 5, c: 34973 }, 34979, { f: 6, c: 34981 }, 34988, { f: 3, c: 34990 }, { f: 5, c: 34994 }, { f: 4, c: 35e3 }, { f: 4, c: 35005 }, { f: 2, c: 35011 }, { f: 2, c: 35015 }, { f: 3, c: 35019 }, { f: 2, c: 35024 }, 35027, { f: 2, c: 35030 }, { f: 2, c: 35034 }, 35038, { f: 2, c: 35040 }, { f: 2, c: 35046 }, { f: 7, c: 35049 }, 35058, { f: 3, c: 35061 }, { f: 2, c: 35066 }, { f: 3, c: 35071 }, { f: 4, c: 35075 }, { f: 2, c: 35080 }, { f: 5, c: 35083 }, 35089, { f: 5, c: 35092 }, { f: 5, c: 35100 }, { f: 3, c: 35106 }, { f: 4, c: 35110 }, { f: 4, c: 35116 }, 35121, 35125, 35127, { f: 2, c: 35129 }, { f: 5, c: 35132 }, { f: 2, c: 35138 }, { f: 2, c: 35141 }, { f: 14, c: 35144 }, { f: 6, c: 35159 }, { f: 3, c: 35169 }, 35173, { f: 3, c: 35175 }, 35179, { f: 2, c: 35181 }, { f: 2, c: 35184 }, { f: 8, c: 35187 }, { f: 2, c: 35196 }, [12177, 35198], 35200, 35202, { f: 2, c: 35204 }, { f: 4, c: 35207 }, { f: 3, c: 35212 }, { f: 3, c: 35216 }, { f: 2, c: 35220 }, 35223, { f: 8, c: 35225 }, { f: 4, c: 35234 }, { f: 3, c: 35239 }, 35243, { f: 2, c: 35245 }, { f: 2, c: 35248 }, { f: 4, c: 35251 }, { f: 2, c: 35256 }, { f: 2, c: 35259 }, 35262, 35267, 35277, { f: 3, c: 35283 }, { f: 3, c: 35287 }, 35291, 35293, { f: 4, c: 35295 }, 35300, { f: 4, c: 35303 }, { f: 3, c: 35308 }, { f: 3, c: 35312 }, 35317, 35319, { f: 7, c: 35321 }, { f: 3, c: 35332 }, 35337, 35339, 35341, 35343, { f: 2, c: 35345 }, 35348, 35351, { f: 2, c: 35353 }, 35356, 35358, { f: 3, c: 35360 }, 35364, { f: 4, c: 35366 }, { f: 2, c: 35371 }, { f: 3, c: 35374 }, { f: 2, c: 35378 }, 35381, { f: 3, c: 35383 }, { f: 3, c: 35387 }, { f: 2, c: 35391 }, { f: 4, c: 35394 }, 35399, { f: 5, c: 35401 }, 35407, 35409, 35411, { f: 2, c: 35414 }, { f: 2, c: 35417 }, { f: 2, c: 35420 }, { f: 2, c: 35423 }, { f: 2, c: 35428 }, { f: 2, c: 35431 }, 35434, 35439, 35444, { f: 3, c: 35446 }, { f: 2, c: 35450 }, { f: 2, c: 35453 }, { f: 4, c: 35456 }, 35464, { f: 2, c: 35467 }, { f: 3, c: 35470 }, 35476, { f: 2, c: 35478 }, 35481, { f: 3, c: 35483 }, 35487, 35490, 35495, { f: 3, c: 35497 }, { f: 3, c: 35501 }, 35505, { f: 3, c: 35507 }, { f: 2, c: 35511 }, { f: 2, c: 35514 }, { f: 2, c: 35517 }, { f: 2, c: 35520 }, 35523, { f: 2, c: 35525 }, 35528, 35530, 35532, 35534, 35536, { f: 3, c: 35539 }, { f: 3, c: 35544 }, 35549, { f: 3, c: 35551 }, 35555, 35557, { f: 3, c: 35560 }, 35564, { f: 2, c: 35567 }, 35570, { f: 2, c: 35572 }, 35577, 35579, 35581, 35583, 35587, 35590, { f: 2, c: 35592 }, { f: 3, c: 35595 }, 35599, { f: 3, c: 35601 }, 35605, 35608, 35612, { f: 3, c: 35614 }, { f: 4, c: 35618 }, 35623, { f: 2, c: 35625 }, { f: 5, c: 35630 }, { f: 5, c: 35636 }, { f: 4, c: 35642 }, { f: 10, c: 35647 }, { f: 4, c: 35658 }, { f: 6, c: 35664 }, 35671, 35675, { f: 9, c: 35677 }, { f: 4, c: 35687 }, { f: 2, c: 35693 }, { f: 3, c: 35697 }, { f: 2, c: 35701 }, { f: 5, c: 35704 }, { f: 2, c: 35710 }, { f: 9, c: 35713 }, { f: 3, c: 35723 }, { f: 3, c: 35727 }, 35732, { f: 5, c: 35735 }, 35741, 35743, 35756, 35761, 35771, 35783, 35792, 35818, 35849, 35870, { f: 9, c: 35896 }, { f: 4, c: 35906 }, { f: 2, c: 35914 }, { f: 3, c: 35917 }, { f: 4, c: 35921 }, { f: 4, c: 35926 }, { f: 6, c: 35931 }, { f: 7, c: 35939 }, { f: 7, c: 35948 }, { f: 4, c: 35956 }, { f: 7, c: 35963 }, { f: 2, c: 35971 }, { f: 3, c: 35974 }, 35979, { f: 7, c: 35981 }, { f: 3, c: 35989 }, { f: 4, c: 35993 }, 35999, { f: 4, c: 36003 }, { f: 2, c: 36013 }, 36017, 36021, 36025, 36030, 36038, 36041, { f: 6, c: 36043 }, 36052, { f: 4, c: 36054 }, 36059, 36061, 36063, 36069, { f: 2, c: 36072 }, { f: 6, c: 36078 }, { f: 5, c: 36085 }, { f: 5, c: 36095 }, { f: 2, c: 36102 }, 36105, 36108, 36110, { f: 5, c: 36113 }, { f: 4, c: 36119 }, 36128, { f: 2, c: 36177 }, 36183, 36191, 36197, { f: 3, c: 36200 }, 36204, { f: 2, c: 36206 }, { f: 2, c: 36209 }, { f: 9, c: 36216 }, { f: 2, c: 36226 }, { f: 4, c: 36230 }, { f: 5, c: 36236 }, { f: 2, c: 36242 }, { f: 3, c: 36246 }, { f: 5, c: 36250 }, { f: 3, c: 36256 }, { f: 4, c: 36260 }, { f: 8, c: 36265 }, { f: 2, c: 36278 }, 36281, 36283, 36285, { f: 3, c: 36288 }, 36293, { f: 4, c: 36295 }, 36301, 36304, { f: 4, c: 36306 }, { f: 2, c: 36312 }, 36316, { f: 3, c: 36320 }, { f: 3, c: 36325 }, 36329, { f: 2, c: 36333 }, { f: 3, c: 36336 }, 36340, 36342, 36348, { f: 7, c: 36350 }, { f: 3, c: 36358 }, 36363, { f: 2, c: 36365 }, { f: 3, c: 36369 }, { f: 8, c: 36373 }, { f: 2, c: 36384 }, { f: 5, c: 36388 }, 36395, 36397, 36400, { f: 2, c: 36402 }, { f: 3, c: 36406 }, { f: 2, c: 36411 }, { f: 2, c: 36414 }, 36419, { f: 2, c: 36421 }, { f: 4, c: 36429 }, { f: 2, c: 36435 }, { f: 3, c: 36438 }, { f: 9, c: 36442 }, { f: 2, c: 36452 }, { f: 2, c: 36455 }, { f: 2, c: 36458 }, 36462, 36465, 36467, 36469, { f: 3, c: 36471 }, 36475, { f: 2, c: 36477 }, 36480, { f: 3, c: 36482 }, 36486, 36488, 36492, 36494, { f: 5, c: 36501 }, 36507, 36509, { f: 2, c: 36511 }, { f: 3, c: 36514 }, { f: 3, c: 36519 }, { f: 2, c: 36525 }, { f: 2, c: 36528 }, { f: 7, c: 36531 }, { f: 5, c: 36539 }, { f: 9, c: 36545 }, { f: 3, c: 36559 }, 36563, { f: 6, c: 36565 }, { f: 3, c: 36572 }, { f: 4, c: 36576 }, { f: 6, c: 36581 }, { f: 6, c: 36588 }, { f: 5, c: 36595 }, 36605, { f: 4, c: 36607 }, 36612, 36614, 36616, { f: 7, c: 36619 }, 36627, { f: 5, c: 36630 }, { f: 5, c: 36640 }, { f: 2, c: 36647 }, { f: 4, c: 36651 }, { f: 3, c: 36656 }, { f: 4, c: 36660 }, { f: 2, c: 36665 }, { f: 2, c: 36668 }, { f: 2, c: 36672 }, 36675, { f: 2, c: 36679 }, { f: 3, c: 36682 }, { f: 5, c: 36687 }, { f: 10, c: 36693 }, 36704, 36707, 36709, 36714, 36736, 36748, 36754, 36765, { f: 3, c: 36768 }, { f: 2, c: 36772 }, 36775, 36778, 36780, { f: 2, c: 36787 }, [12193, 36789], { f: 2, c: 36791 }, { f: 3, c: 36794 }, { f: 2, c: 36799 }, 36803, 36806, { f: 5, c: 36809 }, 36815, 36818, { f: 2, c: 36822 }, 36826, { f: 2, c: 36832 }, 36835, 36839, 36844, 36847, { f: 2, c: 36849 }, { f: 2, c: 36853 }, { f: 3, c: 36858 }, { f: 2, c: 36862 }, { f: 2, c: 36871 }, 36876, 36878, 36883, 36888, 36892, { f: 2, c: 36900 }, { f: 6, c: 36903 }, { f: 2, c: 36912 }, { f: 2, c: 36915 }, 36919, { f: 2, c: 36921 }, 36925, { f: 2, c: 36927 }, 36931, { f: 2, c: 36933 }, { f: 3, c: 36936 }, 36940, 36950, { f: 2, c: 36953 }, 36957, 36959, 36961, 36964, { f: 2, c: 36966 }, { f: 3, c: 36970 }, { f: 3, c: 36975 }, 36979, 36982, 36985, 36987, 36990, { f: 2, c: 36997 }, 37001, { f: 3, c: 37004 }, 37010, 37012, 37014, 37016, 37018, 37020, { f: 3, c: 37022 }, { f: 2, c: 37028 }, { f: 3, c: 37031 }, 37035, 37037, 37042, 37047, { f: 2, c: 37052 }, { f: 2, c: 37055 }, { f: 2, c: 37058 }, 37062, { f: 2, c: 37064 }, { f: 3, c: 37067 }, 37074, { f: 3, c: 37076 }, { f: 3, c: 37080 }, 37086, 37088, { f: 3, c: 37091 }, { f: 2, c: 37097 }, 37100, 37102, { f: 4, c: 37104 }, { f: 2, c: 37110 }, { f: 4, c: 37113 }, { f: 3, c: 37119 }, 37123, 37125, { f: 2, c: 37127 }, { f: 8, c: 37130 }, 37139, 37141, { f: 2, c: 37143 }, { f: 4, c: 37146 }, { f: 3, c: 37151 }, { f: 3, c: 37156 }, { f: 5, c: 37160 }, 37166, 37171, 37173, { f: 2, c: 37175 }, { f: 8, c: 37179 }, { f: 2, c: 37188 }, 37191, 37201, { f: 4, c: 37203 }, { f: 2, c: 37208 }, { f: 2, c: 37211 }, { f: 2, c: 37215 }, { f: 3, c: 37222 }, 37227, 37229, 37235, { f: 3, c: 37242 }, { f: 5, c: 37248 }, 37254, 37256, 37258, { f: 2, c: 37262 }, { f: 3, c: 37267 }, { f: 3, c: 37271 }, { f: 5, c: 37277 }, { f: 6, c: 37284 }, { f: 4, c: 37296 }, { f: 4, c: 37302 }, { f: 5, c: 37307 }, 37314, 37316, [12196, 37318], 37320, 37328, 37334, { f: 2, c: 37338 }, { f: 5, c: 37342 }, { f: 2, c: 37349 }, 37352, { f: 11, c: 37354 }, 37366, 37368, { f: 5, c: 37371 }, { f: 2, c: 37378 }, { f: 3, c: 37381 }, { f: 3, c: 37386 }, 37391, { f: 2, c: 37394 }, { f: 8, c: 37398 }, { f: 4, c: 37407 }, 37412, { f: 6, c: 37416 }, 37423, { f: 2, c: 37425 }, { f: 2, c: 37429 }, { f: 2, c: 37435 }, { f: 4, c: 37441 }, { f: 2, c: 37446 }, { f: 3, c: 37450 }, { f: 3, c: 37454 }, { f: 3, c: 37458 }, 37462, { f: 2, c: 37464 }, { f: 2, c: 37468 }, { f: 3, c: 37471 }, { f: 3, c: 37475 }, { f: 5, c: 37479 }, { f: 6, c: 37486 }, { f: 3, c: 37493 }, 37497, { f: 3, c: 37500 }, { f: 2, c: 37505 }, 37508, { f: 8, c: 37510 }, { f: 2, c: 37519 }, 37522, { f: 2, c: 37524 }, 37527, 37529, 37531, { f: 3, c: 37533 }, { f: 2, c: 37537 }, 37540, 37543, 37549, { f: 2, c: 37551 }, { f: 5, c: 37554 }, 37560, 37562, { f: 4, c: 37565 }, 37570, 37572, 37574, { f: 3, c: 37577 }, { f: 2, c: 37581 }, { f: 2, c: 37584 }, { f: 10, c: 37587 }, 37598, { f: 3, c: 37600 }, 37607, 37609, { f: 2, c: 37611 }, { f: 4, c: 37618 }, 37623, { f: 3, c: 37625 }, { f: 4, c: 37629 }, { f: 4, c: 37634 }, { f: 7, c: 37641 }, 37649, { f: 2, c: 37651 }, { f: 2, c: 37654 }, { f: 3, c: 37660 }, 37665, { f: 3, c: 37667 }, 37671, { f: 2, c: 37673 }, { f: 2, c: 37676 }, { f: 2, c: 37680 }, { f: 2, c: 37684 }, 37687, { f: 5, c: 37689 }, 37695, 37698, { f: 2, c: 37700 }, { f: 3, c: 37704 }, 37708, { f: 6, c: 37710 }, { f: 3, c: 37717 }, { f: 2, c: 37721 }, { f: 8, c: 37724 }, { f: 3, c: 37734 }, 37739, { f: 3, c: 37741 }, { f: 4, c: 37745 }, { f: 3, c: 37751 }, { f: 3, c: 37755 }, { f: 3, c: 37759 }, 37763, { f: 2, c: 37765 }, { f: 2, c: 37768 }, { f: 4, c: 37771 }, { f: 6, c: 37776 }, 37783, { f: 9, c: 37785 }, { f: 2, c: 37796 }, 37800, 37803, 37805, 37807, { f: 2, c: 37809 }, 37812, { f: 2, c: 37814 }, { f: 6, c: 37817 }, { f: 3, c: 37824 }, { f: 3, c: 37828 }, 37833, 37835, { f: 3, c: 37838 }, { f: 4, c: 37842 }, { f: 3, c: 37849 }, 37856, 37859, { f: 3, c: 37861 }, { f: 12, c: 37865 }, 37878, 37880, { f: 9, c: 37882 }, { f: 7, c: 37892 }, { f: 4, c: 37900 }, 37905, { f: 3, c: 37909 }, { f: 3, c: 37914 }, { f: 2, c: 37918 }, { f: 5, c: 37921 }, { f: 5, c: 37929 }, { f: 3, c: 37935 }, 37940, { f: 2, c: 37942 }, 37945, { f: 3, c: 37947 }, { f: 4, c: 37952 }, { f: 5, c: 37957 }, 37963, { f: 5, c: 37965 }, 37971, { f: 11, c: 37973 }, { f: 2, c: 37985 }, 37988, { f: 5, c: 37990 }, 37996, { f: 2, c: 37998 }, 38001, { f: 4, c: 38003 }, 38008, { f: 2, c: 38010 }, { f: 5, c: 38016 }, 38033, 38038, 38040, 38087, 38095, { f: 2, c: 38099 }, 38106, 38118, 38139, 38172, 38176, 38183, 38195, 38205, 38211, 38216, 38219, 38229, 38234, 38240, 38254, { f: 2, c: 38260 }, { f: 7, c: 38264 }, 38273, { f: 2, c: 38276 }, { f: 2, c: 38279 }, 38282, 38285, 38288, 38290, { f: 3, c: 38293 }, { f: 8, c: 38297 }, 38306, { f: 2, c: 38310 }, 38314, { f: 4, c: 38318 }, { f: 3, c: 38323 }, { f: 2, c: 38327 }, 38330, { f: 3, c: 38336 }, { f: 2, c: 38340 }, 38343, 38345, { f: 3, c: 38349 }, { f: 3, c: 38353 }, { f: 5, c: 38359 }, 38365, { f: 2, c: 38367 }, { f: 2, c: 38371 }, { f: 2, c: 38374 }, 38380, 38399, 38407, 38419, 38424, 38427, 38430, 38432, { f: 7, c: 38435 }, { f: 3, c: 38443 }, { f: 2, c: 38447 }, { f: 4, c: 38455 }, 38462, 38465, 38467, 38474, { f: 2, c: 38478 }, { f: 3, c: 38481 }, { f: 2, c: 38486 }, { f: 2, c: 38489 }, 38492, 38494, 38496, { f: 2, c: 38501 }, 38507, { f: 3, c: 38509 }, 38513, { f: 4, c: 38521 }, { f: 7, c: 38526 }, 38535, 38537, 38540, { f: 3, c: 38545 }, 38550, 38554, { f: 10, c: 38557 }, 38569, { f: 5, c: 38571 }, 38578, 38581, 38583, 38586, 38591, { f: 2, c: 38594 }, 38600, { f: 2, c: 38602 }, { f: 2, c: 38608 }, { f: 2, c: 38611 }, { f: 2, c: 38615 }, 38618, { f: 3, c: 38621 }, 38625, { f: 4, c: 38628 }, { f: 4, c: 38635 }, { f: 2, c: 38640 }, { f: 2, c: 38644 }, 38648, 38650, { f: 2, c: 38652 }, 38655, { f: 2, c: 38658 }, 38661, { f: 3, c: 38666 }, { f: 3, c: 38672 }, { f: 2, c: 38676 }, { f: 5, c: 38679 }, 38685, { f: 8, c: 38687 }, { f: 2, c: 38696 }, { f: 2, c: 38699 }, { f: 2, c: 38702 }, 38705, { f: 5, c: 38707 }, { f: 3, c: 38714 }, { f: 3, c: 38719 }, 38723, { f: 3, c: 38725 }, { f: 8, c: 38729 }, [12205, 38737], { f: 2, c: 38740 }, { f: 2, c: 38743 }, { f: 2, c: 38748 }, 38751, { f: 2, c: 38755 }, { f: 2, c: 38758 }, { f: 9, c: 38762 }, 38773, { f: 5, c: 38775 }, { f: 8, c: 38781 }, { f: 5, c: 38790 }, 38796, 38798, 38800, 38803, { f: 3, c: 38805 }, { f: 7, c: 38809 }, { f: 2, c: 38817 }, { f: 2, c: 38820 }, { f: 4, c: 38823 }, 38828, 38830, { f: 2, c: 38832 }, 38835, { f: 8, c: 38837 }, { f: 5, c: 38846 }, { f: 2, c: 38852 }, { f: 2, c: 38855 }, 38858, { f: 6, c: 38861 }, { f: 5, c: 38868 }, { f: 2, c: 38874 }, 38877, { f: 7, c: 38879 }, 38888, { f: 5, c: 38894 }, 38900, { f: 8, c: 38903 }, 38912, 38916, 38921, 38923, 38925, { f: 3, c: 38932 }, { f: 3, c: 38937 }, { f: 4, c: 38941 }, { f: 2, c: 38946 }, 38949, { f: 6, c: 38951 }, { f: 2, c: 38958 }, { f: 6, c: 38961 }, { f: 2, c: 38969 }, 38972, { f: 8, c: 38974 }, { f: 5, c: 38983 }, { f: 4, c: 38991 }, { f: 3, c: 38997 }, 39002, { f: 2, c: 39004 }, { f: 3, c: 39007 }, { f: 2, c: 39011 }, 39014, { f: 3, c: 39016 }, { f: 2, c: 39021 }, 39026, 39051, 39054, 39058, 39061, 39065, 39075, { f: 5, c: 39081 }, 39088, 39090, { f: 2, c: 39092 }, { f: 5, c: 39095 }, { f: 7, c: 39101 }, 39109, 39111, { f: 5, c: 39113 }, { f: 2, c: 39119 }, 39124, { f: 2, c: 39126 }, { f: 2, c: 39132 }, 39137, { f: 4, c: 39139 }, 39148, 39150, { f: 2, c: 39152 }, 39155, { f: 7, c: 39157 }, { f: 4, c: 39167 }, 39172, { f: 3, c: 39174 }, 39179, { f: 2, c: 39182 }, { f: 4, c: 39188 }, { f: 2, c: 39193 }, { f: 2, c: 39196 }, { f: 2, c: 39199 }, { f: 6, c: 39202 }, { f: 5, c: 39209 }, { f: 4, c: 39215 }, { f: 3, c: 39220 }, { f: 4, c: 39224 }, 39229, { f: 3, c: 39232 }, 39236, { f: 2, c: 39238 }, { f: 4, c: 39245 }, 39251, 39254, { f: 4, c: 39256 }, 39261, { f: 3, c: 39263 }, 39268, 39270, 39283, { f: 2, c: 39288 }, 39291, 39294, { f: 2, c: 39298 }, 39305, 39308, 39310, { f: 11, c: 39322 }, { f: 2, c: 39334 }, { f: 3, c: 39337 }, { f: 2, c: 39343 }, 39346, { f: 12, c: 39349 }, { f: 14, c: 39362 }, 39379, { f: 2, c: 39382 }, 39386, 39388, 39390, 39392, { f: 10, c: 39395 }, { f: 3, c: 39406 }, { f: 13, c: 39410 }, 39424, { f: 3, c: 39426 }, { f: 7, c: 39430 }, { f: 6, c: 39440 }, { f: 2, c: 39447 }, { f: 17, c: 39450 }, 39468, 39471, { f: 5, c: 39473 }, { f: 5, c: 39481 }, 39487, { f: 4, c: 39494 }, { f: 2, c: 39499 }, 39502, { f: 5, c: 39504 }, 39510, { f: 2, c: 39512 }, { f: 3, c: 39516 }, { f: 2, c: 39520 }, 39523, { f: 4, c: 39526 }, 39531, 39538, 39555, 39561, { f: 2, c: 39565 }, { f: 2, c: 39572 }, 39577, 39590, { f: 6, c: 39593 }, { f: 4, c: 39602 }, 39609, 39611, { f: 3, c: 39613 }, { f: 2, c: 39619 }, { f: 5, c: 39622 }, { f: 2, c: 39629 }, 39632, 39639, { f: 6, c: 39641 }, 39648, { f: 4, c: 39650 }, { f: 4, c: 39655 }, 39660, { f: 9, c: 39664 }, 39674, { f: 7, c: 39676 }, { f: 2, c: 39684 }, 39687, { f: 4, c: 39689 }, 39694, { f: 3, c: 39696 }, { f: 6, c: 39700 }, { f: 4, c: 39707 }, { f: 2, c: 39712 }, 39716, 39718, 39720, { f: 4, c: 39722 }, 39728, { f: 8, c: 39731 }, { f: 4, c: 39741 }, 39750, { f: 3, c: 39754 }, 39760, { f: 2, c: 39762 }, { f: 3, c: 39765 }, 39769, { f: 20, c: 39771 }, { f: 4, c: 39792 }, { f: 2, c: 39797 }, { f: 9, c: 39800 }, 39810, { f: 10, c: 39812 }, 39823, { f: 7, c: 39827 }, { f: 2, c: 39835 }, { f: 11, c: 39839 }, 39852, { f: 17, c: 39855 }, { f: 5, c: 39874 }, 39880, { f: 9, c: 39883 }, 39893, { f: 4, c: 39895 }, 39900, { f: 3, c: 39902 }, 39907, { f: 2, c: 39909 }, 39913, { f: 4, c: 39916 }, { f: 3, c: 39921 }, { f: 8, c: 39925 }, 39934, { f: 8, c: 39936 }, { f: 3, c: 39946 }, { f: 2, c: 39950 }, 39953, { f: 12, c: 39956 }, { f: 2, c: 39969 }, 39972, { f: 2, c: 39974 }, { f: 3, c: 39978 }, { f: 3, c: 39982 }, 39988, 39990, 39992, 39994, { f: 2, c: 39996 }, { f: 6, c: 39999 }, { f: 2, c: 40006 }, { f: 8, c: 40010 }, 40019, 40021, { f: 4, c: 40025 }, 40030, { f: 7, c: 40032 }, { f: 5, c: 40040 }, { f: 10, c: 40046 }, 40057, 40059, { f: 2, c: 40061 }, 40064, { f: 2, c: 40067 }, { f: 2, c: 40073 }, 40076, 40079, 40083, { f: 4, c: 40086 }, 40093, 40106, 40108, 40111, 40121, { f: 5, c: 40126 }, { f: 2, c: 40136 }, { f: 2, c: 40145 }, { f: 2, c: 40154 }, { f: 2, c: 40160 }, { f: 2, c: 40163 }, { f: 3, c: 40166 }, { f: 2, c: 40170 }, { f: 6, c: 40173 }, 40181, { f: 15, c: 40183 }, 40200, { f: 11, c: 40202 }, { f: 5, c: 40214 }, 40220, 40222, { f: 3, c: 40224 }, { f: 2, c: 40228 }, 40231, { f: 6, c: 40233 }, { f: 10, c: 40241 }, { f: 3, c: 40252 }, { f: 2, c: 40256 }, { f: 14, c: 40259 }, { f: 8, c: 40276 }, { f: 2, c: 40286 }, { f: 8, c: 40290 }, 40299, { f: 2, c: 40301 }, { f: 2, c: 40304 }, { f: 20, c: 40307 }, 40328, { f: 9, c: 40330 }, { f: 4, c: 40340 }, 40345, { f: 10, c: 40347 }, { f: 3, c: 40358 }, { f: 5, c: 40362 }, { f: 4, c: 40368 }, { f: 6, c: 40373 }, { f: 3, c: 40381 }, 40385, 40387, { f: 14, c: 40389 }, { f: 3, c: 40404 }, 40408, { f: 10, c: 40411 }, { f: 8, c: 40423 }, { f: 2, c: 40432 }, { f: 4, c: 40436 }, { f: 17, c: 40443 }, { f: 8, c: 40461 }, { f: 4, c: 40470 }, 40476, 40484, 40487, 40494, 40496, 40500, { f: 2, c: 40507 }, 40512, 40525, 40528, { f: 3, c: 40530 }, 40534, 40537, 40541, { f: 4, c: 40543 }, 40549, { f: 2, c: 40558 }, 40562, 40564, { f: 3, c: 40566 }, 40571, { f: 2, c: 40576 }, { f: 4, c: 40579 }, { f: 2, c: 40585 }, { f: 6, c: 40588 }, { f: 3, c: 40596 }, { f: 5, c: 40600 }, 40606, { f: 5, c: 40608 }, { f: 2, c: 40615 }, { f: 5, c: 40618 }, { f: 4, c: 40624 }, { f: 2, c: 40630 }, { f: 2, c: 40633 }, 40636, { f: 4, c: 40639 }, [12232, 40643], { f: 4, c: 40645 }, { f: 2, c: 40650 }, 40656, { f: 2, c: 40658 }, { f: 3, c: 40661 }, { f: 2, c: 40665 }, 40673, { f: 2, c: 40675 }, 40678, { f: 4, c: 40683 }, { f: 2, c: 40688 }, 40691, { f: 2, c: 40693 }, 40696, 40698, { f: 9, c: 40704 }, 40714, 40716, 40719, { f: 2, c: 40721 }, 40724, 40726, 40728, { f: 6, c: 40730 }, 40737, { f: 9, c: 40739 }, { f: 2, c: 40749 }, { f: 7, c: 40752 }, 40760, 40762, 40764, { f: 5, c: 40767 }, { f: 5, c: 40773 }, { f: 3, c: 40780 }, 40787, { f: 4, c: 40789 }, { f: 2, c: 40794 }, { f: 2, c: 40797 }, 40802, { f: 2, c: 40804 }, { f: 3, c: 40807 }, 40811, { f: 5, c: 40813 }, { f: 4, c: 40819 }, { f: 7, c: 40824 }, { f: 2, c: 40833 }, { f: 2, c: 40846 }, { f: 3, c: 40849 }, { f: 3, c: 40854 }, { f: 2, c: 40861 }, { f: 5, c: 40865 }, 63788, { f: 3, c: 64013 }, 64017, { f: 2, c: 64019 }, 64024, { f: 3, c: 64031 }, { f: 2, c: 64035 }, { f: 3, c: 64039 }, 11905, [59414, 131207], [59415, 131209], [59416, 131276], 11908, 13427, 13383, 11912, 11915, 59422, 13726, 13850, 13838, 11916, 11927, 14702, 14616, 59430, 14799, 14815, 14963, 14800, { f: 2, c: 59435 }, 15182, 15470, 15584, 11943, [59441, 136663], 59442, 11946, 16470, 16735, 11950, 17207, 11955, { f: 2, c: 11958 }, [59451, 141711], 17329, 17324, 11963, 17373, 17622, 18017, 17996, [59459, 132361], 18211, 18217, 18300, 18317, 11978, 18759, 18810, 18813, { f: 2, c: 18818 }, { f: 2, c: 18821 }, 18847, 18843, 18871, 18870, [59476, 133533], [59477, 147966], 19619, { f: 3, c: 19615 }, 19575, 19618, { f: 7, c: 19731 }, 19886, 59492, { s: 226 }, 8364, 165, 0, 0, 12351, { s: 17 }, 12436, { s: 14 }, 12535, 12537, 12536, 12538, 0, { f: 3, c: 12339 }, { f: 3, c: 12344 }, { f: 3, c: 12586 }, { f: 24, c: 12704 }, 11904, { f: 2, c: 11906 }, { f: 3, c: 11909 }, { f: 2, c: 11913 }, { f: 10, c: 11917 }, { f: 2, c: 11928 }, { f: 12, c: 11931 }, { f: 2, c: 11944 }, { f: 3, c: 11947 }, { f: 4, c: 11951 }, { f: 2, c: 11956 }, { f: 3, c: 11960 }, { f: 14, c: 11964 }, { f: 41, c: 11979 }, { f: 71, c: 13312 }, { f: 43, c: 13384 }, { f: 298, c: 13428 }, { f: 111, c: 13727 }, { f: 11, c: 13839 }, { f: 765, c: 13851 }, { f: 85, c: 14617 }, { f: 96, c: 14703 }, { f: 14, c: 14801 }, { f: 147, c: 14816 }, { f: 218, c: 14964 }, { f: 287, c: 15183 }, { f: 113, c: 15471 }, { f: 885, c: 15585 }, { f: 264, c: 16471 }, { f: 471, c: 16736 }, { f: 116, c: 17208 }, { f: 4, c: 17325 }, { f: 43, c: 17330 }, { f: 248, c: 17374 }, { f: 373, c: 17623 }, { f: 20, c: 17997 }, { f: 193, c: 18018 }, { f: 5, c: 18212 }, { f: 82, c: 18218 }, { f: 16, c: 18301 }, { f: 441, c: 18318 }, { f: 50, c: 18760 }, { f: 2, c: 18811 }, { f: 4, c: 18814 }, 18820, { f: 20, c: 18823 }, { f: 3, c: 18844 }, { f: 22, c: 18848 }, { f: 703, c: 18872 }, { f: 39, c: 19576 }, { f: 111, c: 19620 }, { f: 148, c: 19738 }, { f: 7, c: 19887 }] };
function Yr(e3) {
  e3.mozCurrentTransform || (e3._scaleX = e3._scaleX || 1, e3._scaleY = e3._scaleY || 1, e3._originalSave = e3.save, e3._originalRestore = e3.restore, e3._originalRotate = e3.rotate, e3._originalScale = e3.scale, e3._originalTranslate = e3.translate, e3._originalTransform = e3.transform, e3._originalSetTransform = e3.setTransform, e3._transformMatrix = [e3._scaleX, 0, 0, e3._scaleY, 0, 0], e3._transformStack = [], Object.defineProperty(e3, "mozCurrentTransform", { get: function() {
    return this._transformMatrix;
  } }), Object.defineProperty(e3, "mozCurrentTransformInverse", { get: function() {
    var e4 = this._transformMatrix, t3 = e4[0], a2 = e4[1], r3 = e4[2], i3 = e4[3], n3 = e4[4], c3 = e4[5], s3 = t3 * i3 - a2 * r3, o3 = a2 * r3 - t3 * i3;
    return [i3 / s3, a2 / o3, r3 / o3, t3 / s3, (i3 * n3 - r3 * c3) / o3, (a2 * n3 - t3 * c3) / s3];
  } }), e3.save = function() {
    var e4 = this._transformMatrix;
    this._transformStack.push(e4), this._transformMatrix = e4.slice(0, 6), this._originalSave();
  }, e3.restore = function() {
    var e4 = this._transformStack.pop();
    e4 && (this._transformMatrix = e4, this._originalRestore());
  }, e3.translate = function(e4, t3) {
    var a2 = this._transformMatrix;
    a2[4] = a2[0] * e4 + a2[2] * t3 + a2[4], a2[5] = a2[1] * e4 + a2[3] * t3 + a2[5], this._originalTranslate(e4, t3);
  }, e3.scale = function(e4, t3) {
    var a2 = this._transformMatrix;
    a2[0] = a2[0] * e4, a2[1] = a2[1] * e4, a2[2] = a2[2] * t3, a2[3] = a2[3] * t3, this._originalScale(e4, t3);
  }, e3.transform = function(t3, a2, r3, i3, n3, c3) {
    var s3 = this._transformMatrix;
    this._transformMatrix = [s3[0] * t3 + s3[2] * a2, s3[1] * t3 + s3[3] * a2, s3[0] * r3 + s3[2] * i3, s3[1] * r3 + s3[3] * i3, s3[0] * n3 + s3[2] * c3 + s3[4], s3[1] * n3 + s3[3] * c3 + s3[5]], e3._originalTransform(t3, a2, r3, i3, n3, c3);
  }, e3.setTransform = function(t3, a2, r3, i3, n3, c3) {
    this._transformMatrix = [t3, a2, r3, i3, n3, c3], e3._originalSetTransform(t3, a2, r3, i3, n3, c3);
  }, e3.rotate = function(e4) {
    var t3 = Math.cos(e4), a2 = Math.sin(e4), r3 = this._transformMatrix;
    this._transformMatrix = [r3[0] * t3 + r3[2] * a2, r3[1] * t3 + r3[3] * a2, r3[0] * -a2 + r3[2] * t3, r3[1] * -a2 + r3[3] * t3, r3[4], r3[5]], this._originalRotate(e4);
  });
}
var Jr;
var Kr = (Jr = {}, { getCanvas: function(e3, t3, a2, r3) {
  var i3;
  if (e3 in Jr) (i3 = Jr[e3]).canvas.width = t3, i3.canvas.height = a2, i3.context.setTransform(1, 0, 0, 1, 0, 0);
  else {
    var n3 = ue(t3, a2), c3 = n3.getContext("2d");
    r3 && Yr(c3), Jr[e3] = i3 = { canvas: n3, context: c3 };
  }
  return i3;
}, clear: function() {
  Jr = {};
} });
var Zr = function() {
  function e3(e4) {
    this.alphaIsShape = false, this.fontSize = 0, this.fontSizeScale = 1, this.textMatrix = Ze, this.fontMatrix = Ae, this.leading = 0, this.x = 0, this.y = 0, this.lineX = 0, this.lineY = 0, this.charSpacing = 0, this.wordSpacing = 0, this.textHScale = 1, this.textRenderingMode = we, this.textRise = 0, this.fillColorSpace = bt.singletons.gray, this.fillColorSpaceObj = null, this.strokeColorSpace = bt.singletons.gray, this.strokeColorSpaceObj = null, this.fillColorObj = null, this.strokeColorObj = null, this.fillColor = "#000000", this.strokeColor = "#000000", this.fillAlpha = 1, this.strokeAlpha = 1, this.lineWidth = 1, this.paintFormXObjectDepth = 0, this.old = e4;
  }
  return e3.prototype = { clone: function() {
    return Object.create(this);
  }, setCurrentPoint: function(e4, t3) {
    this.x = e4, this.y = t3;
  } }, e3;
}();
var Qr = function() {
  function e3(e4, t4, a3, r4, i4) {
    this.ctx = e4, this.current = new Zr(), this.stateStack = [], this.pendingClip = null, this.pendingEOFill = false, this.res = null, this.xobjs = null, this.commonObjs = t4, this.objs = a3, this.textLayer = r4, this.imageLayer = i4, this.groupStack = [], this.processingType3 = null, this.baseTransform = null, this.baseTransformStack = [], this.groupLevel = 0, this.opMode = true, this.noOpStartIdx = -1, e4 && Yr(e4);
  }
  function t3(e4, t4) {
    if ("undefined" != typeof ImageData && t4 instanceof ImageData) e4.putImageData(t4, 0, 0);
    else {
      var a3 = e4.createImageData(t4.width, t4.height), r4 = t4.data, i4 = a3.data;
      if ("set" in i4) i4.set(r4);
      else for (var n4 = 0, c4 = i4.length; n4 < c4; n4++) i4[n4] = r4[n4];
      e4.putImageData(a3, 0, 0);
    }
  }
  var a2 = ["butt", "round", "square"], r3 = ["miter", "round", "bevel"], i3 = {}, n3 = {};
  for (var c3 in e3.prototype = { beginDrawing: function(e4, t4) {
    var a3 = this.ctx.canvas.width, r4 = this.ctx.canvas.height;
    t4 ? this.ctx.clearRect(0, 0, a3, r4) : (this.ctx.mozOpaque = true, this.ctx.save(), this.ctx.fillStyle = "rgb(255, 255, 255)", this.ctx.fillRect(0, 0, a3, r4), this.ctx.restore());
    var i4 = e4.transform;
    this.baseTransform = i4.slice(), this.ctx.save(), this.ctx.transform.apply(this.ctx, i4), this.textLayer && this.textLayer.beginLayout(), this.imageLayer && this.imageLayer.beginLayout();
  }, executeOperatorList: function(e4, t4, a3, r4) {
    var i4 = e4.argsArray, n4 = e4.fnArray, c4 = t4 || 0, s3 = i4.length;
    if (s3 == c4) return c4;
    for (var o3, f2 = Date.now() + 15, l2 = this.commonObjs, h3 = this.objs, u3 = -1; ; ) {
      if (r4 && c4 === r4.nextBreakPoint) return r4.breakIt(c4, a3), c4;
      if ((o3 = n4[c4]) !== Be.dependency) u3 = Le.indexOf(o3), this.opMode ? u3 >= 0 ? (this.opMode = false, this.noOpStartIdx = u3, Pe("NO_OP Begin: " + this[o3].name + " - " + c4)) : Te.indexOf(o3) < 0 && this[o3].apply(this, i4[c4]) : u3 >= 0 && u3 === this.noOpStartIdx + 1 && (this.opMode = true, this.noOpStartIdx = -1, Pe("NO_OP End: " + this[o3].name + " - " + c4));
      else for (var d3 = i4[c4], g2 = 0, m3 = d3.length; g2 < m3; g2++) {
        var p3 = d3[g2], b3 = "g_" == p3.substring(0, 2);
        if (!b3 && !h3.isResolved(p3)) return h3.get(p3, a3), c4;
        if (b3 && !l2.isResolved(p3)) return l2.get(p3, a3), c4;
      }
      if (++c4 == s3) return c4;
      if (a3 && Date.now() > f2) return setTimeout(a3, 0), c4;
    }
  }, endDrawing: function() {
    this.ctx.restore(), Kr.clear(), this.textLayer && this.textLayer.endLayout(), this.imageLayer && this.imageLayer.endLayout();
  }, setLineWidth: function(e4) {
    this.current.lineWidth = e4, this.ctx.lineWidth = e4;
  }, setLineCap: function(e4) {
    this.ctx.lineCap = a2[e4];
  }, setLineJoin: function(e4) {
    this.ctx.lineJoin = r3[e4];
  }, setMiterLimit: function(e4) {
    this.ctx.miterLimit = e4;
  }, setDash: function(e4, t4) {
    var a3 = this.ctx;
    "setLineDash" in a3 ? (a3.setLineDash(e4), a3.lineDashOffset = t4) : (a3.mozDash = e4, a3.mozDashOffset = t4);
  }, setRenderingIntent: function(e4) {
  }, setFlatness: function(e4) {
  }, setGState: function(e4) {
    for (var t4 = 0, a3 = e4.length; t4 < a3; t4++) {
      var r4 = e4[t4], i4 = r4[0], n4 = r4[1];
      switch (i4) {
        case "LW":
          this.setLineWidth(n4);
          break;
        case "LC":
          this.setLineCap(n4);
          break;
        case "LJ":
          this.setLineJoin(n4);
          break;
        case "ML":
          this.setMiterLimit(n4);
          break;
        case "D":
          this.setDash(n4[0], n4[1]);
          break;
        case "RI":
          this.setRenderingIntent(n4);
          break;
        case "FL":
          this.setFlatness(n4);
          break;
        case "Font":
          this.setFont(n4[0], n4[1]);
          break;
        case "CA":
          this.current.strokeAlpha = r4[1];
          break;
        case "ca":
          this.current.fillAlpha = r4[1], this.ctx.globalAlpha = r4[1];
          break;
        case "BM":
          if (n4 && n4.name && "Normal" !== n4.name) {
            var c4 = n4.name.replace(/([A-Z])/g, function(e5) {
              return "-" + e5.toLowerCase();
            }).substring(1);
            this.ctx.globalCompositeOperation = c4, this.ctx.globalCompositeOperation !== c4 && Re('globalCompositeOperation "' + c4 + '" is not supported');
          } else this.ctx.globalCompositeOperation = "source-over";
      }
    }
  }, save: function() {
    this.ctx.save();
    var e4 = this.current;
    this.stateStack.push(e4), this.current = e4.clone();
  }, restore: function() {
    var e4 = this.stateStack.pop();
    e4 && (this.current = e4, this.ctx.restore());
  }, transform: function(e4, t4, a3, r4, i4, n4) {
    this.ctx.transform(e4, t4, a3, r4, i4, n4);
  }, moveTo: function(e4, t4) {
    this.ctx.moveTo(e4, t4), this.current.setCurrentPoint(e4, t4);
  }, lineTo: function(e4, t4) {
    this.ctx.lineTo(e4, t4), this.current.setCurrentPoint(e4, t4);
  }, curveTo: function(e4, t4, a3, r4, i4, n4) {
    this.ctx.bezierCurveTo(e4, t4, a3, r4, i4, n4), this.current.setCurrentPoint(i4, n4);
  }, curveTo2: function(e4, t4, a3, r4) {
    var i4 = this.current;
    this.ctx.bezierCurveTo(i4.x, i4.y, e4, t4, a3, r4), i4.setCurrentPoint(a3, r4);
  }, curveTo3: function(e4, t4, a3, r4) {
    this.curveTo(e4, t4, a3, r4, a3, r4), this.current.setCurrentPoint(a3, r4);
  }, closePath: function() {
    this.ctx.closePath();
  }, rectangle: function(e4, t4, a3, r4) {
    this.ctx.rect(e4, t4, a3, r4);
  }, stroke: function(e4) {
    e4 = void 0 === e4 || e4;
    var t4 = this.ctx, a3 = this.current.strokeColor;
    0 === this.current.lineWidth && (t4.lineWidth = this.getSinglePixelWidth()), t4.globalAlpha = this.current.strokeAlpha, a3 && a3.hasOwnProperty("type") && "Pattern" === a3.type ? (t4.save(), t4.strokeStyle = a3.getPattern(t4, this), t4.stroke(), t4.restore()) : t4.stroke(), e4 && this.consumePath(), t4.globalAlpha = this.current.fillAlpha;
  }, closeStroke: function() {
    this.closePath(), this.stroke();
  }, fill: function(e4) {
    e4 = void 0 === e4 || e4;
    var t4 = this.ctx, a3 = this.current.fillColor, r4 = false;
    if (a3 && a3.hasOwnProperty("type") && "Pattern" === a3.type && (t4.save(), t4.fillStyle = a3.getPattern(t4, this), r4 = true), this.pendingEOFill) {
      if ("mozFillRule" in this.ctx) this.ctx.mozFillRule = "evenodd", this.ctx.fill(), this.ctx.mozFillRule = "nonzero";
      else try {
        this.ctx.fill("evenodd");
      } catch (e5) {
        this.ctx.fill();
      }
      this.pendingEOFill = false;
    } else this.ctx.fill();
    r4 && t4.restore(), e4 && this.consumePath();
  }, eoFill: function() {
    this.pendingEOFill = true, this.fill();
  }, fillStroke: function() {
    this.fill(false), this.stroke(false), this.consumePath();
  }, eoFillStroke: function() {
    this.pendingEOFill = true, this.fillStroke();
  }, closeFillStroke: function() {
    this.closePath(), this.fillStroke();
  }, closeEOFillStroke: function() {
    this.pendingEOFill = true, this.closePath(), this.fillStroke();
  }, endPath: function() {
    this.consumePath();
  }, clip: function() {
    this.pendingClip = i3;
  }, eoClip: function() {
    this.pendingClip = n3;
  }, beginText: function() {
    this.current.textMatrix = Ze, this.current.x = this.current.lineX = 0, this.current.y = this.current.lineY = 0;
  }, endText: function() {
    if ("pendingTextPaths" in this) {
      var e4 = this.pendingTextPaths, t4 = this.ctx;
      t4.save(), t4.beginPath();
      for (var a3 = 0; a3 < e4.length; a3++) {
        var r4 = e4[a3];
        t4.setTransform.apply(t4, r4.transform), t4.translate(r4.x, r4.y), r4.addToPath(t4, r4.fontSize);
      }
      t4.restore(), t4.clip(), t4.beginPath(), delete this.pendingTextPaths;
    } else this.ctx.beginPath();
  }, setCharSpacing: function(e4) {
    this.current.charSpacing = e4;
  }, setWordSpacing: function(e4) {
    this.current.wordSpacing = e4;
  }, setHScale: function(e4) {
    this.current.textHScale = e4 / 100;
  }, setLeading: function(e4) {
    this.current.leading = -e4;
  }, setFont: function(e4, t4) {
    var a3 = this.commonObjs.get(e4), r4 = this.current;
    if (a3 || Oe("Can't find font for " + e4), r4.fontMatrix = a3.fontMatrix ? a3.fontMatrix : Ae, 0 !== r4.fontMatrix[0] && 0 !== r4.fontMatrix[3] || Re("Invalid font matrix for font " + e4), t4 < 0 ? (t4 = -t4, r4.fontDirection = -1) : r4.fontDirection = 1, this.current.font = a3, this.current.fontSize = t4, !a3.coded) {
      var i4 = a3.loadedName || "sans-serif", n4 = a3.black ? a3.bold ? "bolder" : "bold" : a3.bold ? "bold" : "normal", c4 = a3.italic ? "italic" : "normal", s3 = '"' + i4 + '", ' + a3.fallbackName, o3 = t4 >= 16 ? t4 : 16;
      this.current.fontSizeScale = 16 != o3 ? 1 : t4 / 16;
      var f2 = c4 + " " + n4 + " " + o3 + "px " + s3;
      this.ctx.font = f2, this.ctx.setFont(a3);
    }
  }, setTextRenderingMode: function(e4) {
    this.current.textRenderingMode = e4;
  }, setTextRise: function(e4) {
    this.current.textRise = e4;
  }, moveText: function(e4, t4) {
    this.current.x = this.current.lineX += e4, this.current.y = this.current.lineY += t4;
  }, setLeadingMoveText: function(e4, t4) {
    this.setLeading(-t4), this.moveText(e4, t4);
  }, setTextMatrix: function(e4, t4, a3, r4, i4, n4) {
    this.current.textMatrix = [e4, t4, a3, r4, i4, n4], this.current.x = this.current.lineX = 0, this.current.y = this.current.lineY = 0;
  }, nextLine: function() {
    this.moveText(0, this.current.leading);
  }, applyTextTransforms: function() {
    var e4 = this.ctx, t4 = this.current;
    e4.transform.apply(e4, t4.textMatrix), e4.translate(t4.x, t4.y + t4.textRise), t4.fontDirection > 0 ? e4.scale(t4.textHScale, -1) : e4.scale(-t4.textHScale, 1);
  }, createTextGeometry: function() {
    var e4 = {}, t4 = this.ctx, a3 = this.current.font, r4 = t4.mozCurrentTransform, i4 = r4[0], n4 = r4[1], c4 = r4[2], s3 = r4[3], o3 = r4[4], f2 = r4[5], l2 = i4 >= 0 ? Math.sqrt(i4 * i4 + n4 * n4) : -Math.sqrt(i4 * i4 + n4 * n4), h3 = s3 >= 0 ? Math.sqrt(c4 * c4 + s3 * s3) : -Math.sqrt(c4 * c4 + s3 * s3), u3 = Math.atan2(n4, i4), d3 = o3, g2 = f2;
    return e4.x = d3, e4.y = g2, e4.hScale = l2, e4.vScale = h3, e4.angle = u3, e4.spaceWidth = a3.spaceWidth, e4.fontName = a3.loadedName, e4.fontFamily = a3.fallbackName, e4.fontSize = this.current.fontSize, e4;
  }, paintChar: function(e4, t4, a3) {
    var r4, i4 = this.ctx, n4 = this.current, c4 = n4.font, s3 = n4.fontSize / n4.fontSizeScale, o3 = n4.textRenderingMode, f2 = o3 & Ce, l2 = !!(o3 & Ie);
    ((c4.disableFontFace || l2) && (r4 = c4.getPathGenerator(this.commonObjs, e4)), c4.disableFontFace ? (i4.save(), i4.translate(t4, a3), i4.beginPath(), r4(i4, s3), f2 !== we && f2 !== Se || i4.fill(), f2 !== xe && f2 !== Se || i4.stroke(), i4.restore()) : (f2 !== we && f2 !== Se || i4.fillText(e4, t4, a3), f2 !== xe && f2 !== Se || i4.strokeText(e4, t4, a3)), l2) && (this.pendingTextPaths || (this.pendingTextPaths = [])).push({ transform: i4.mozCurrentTransform, x: t4, y: a3, fontSize: s3, addToPath: r4 });
  }, showText: function(e4, t4) {
    var a3, r4 = this.ctx, i4 = this.current, n4 = i4.font || {}, c4 = i4.fontSize, s3 = i4.fontSizeScale, o3 = i4.charSpacing, f2 = i4.wordSpacing, l2 = i4.textHScale * i4.fontDirection, h3 = i4.fontMatrix || Ae, u3 = e4.length, d3 = !(!this.textLayer || t4), g2 = 0, m3 = n4.vertical, p3 = n4.defaultVMetrics;
    if (n4.coded) {
      r4.save(), r4.transform.apply(r4, i4.textMatrix), r4.translate(i4.x, i4.y), r4.scale(l2, 1), d3 && (this.save(), r4.scale(1, -1), a3 = this.createTextGeometry(), this.restore());
      for (var b3 = 0; b3 < u3; ++b3) {
        if (null !== (B3 = e4[b3])) {
          this.processingType3 = B3, this.save(), r4.scale(c4, c4), r4.transform.apply(r4, h3), this.executeOperatorList(B3.operatorList), this.restore();
          var v3 = (Qe.applyTransform([B3.width, 0], h3)[0] * c4 + o3) * i4.fontDirection;
          r4.translate(v3, 0), i4.x += v3 * l2, g2 += v3;
        } else this.ctx.translate(f2, 0), i4.x += f2 * l2;
      }
      r4.restore(), this.processingType3 = null;
    } else {
      r4.save();
      var y3 = 0;
      if (0 !== f2) {
        var k3 = e4.filter((e5) => e5 && ("fontChar" in e5 || "unicode" in e5))[0];
        !k3 || " " !== k3.fontChar && " " !== k3.unicode || (y3 = f2 * c4 * l2);
      }
      i4.x += y3, this.applyTextTransforms(), i4.x -= y3;
      var A3 = i4.lineWidth, w3 = i4.textMatrix[0], x3 = i4.textMatrix[1], S3 = Math.sqrt(w3 * w3 + x3 * x3);
      0 === S3 || 0 === A3 ? A3 = this.getSinglePixelWidth() : A3 /= S3, d3 && (a3 = this.createTextGeometry()), 1 != s3 && (r4.scale(s3, s3), A3 /= s3), r4.lineWidth = A3;
      var C2 = "", I3 = 0;
      for (b3 = 0; b3 < u3; ++b3) {
        var B3;
        if (null !== (B3 = e4[b3])) {
          var T3 = false, L2 = B3.fontChar, F2 = B3.vmetric || p3;
          if (m3) {
            var P3 = B3.vmetric ? F2[1] : 0.5 * B3.width;
            P3 = -P3 * c4 * i4.fontMatrix[0];
            var R2 = F2[2] * c4 * i4.fontMatrix[0];
          }
          var O2, M2, D2 = (v3 = F2 ? -F2[0] : B3.width) * c4 * i4.fontMatrix[0] + o3 * i4.fontDirection, q2 = B3.accent;
          if (!B3.disabled) {
            if (m3 ? (O2 = P3 / s3, M2 = (I3 + R2) / s3) : (O2 = I3 / s3, M2 = 0), n4.remeasure && v3 > 0) {
              var E3 = v3 / (1e3 * r4.measureText(L2).width / i4.fontSize * i4.fontSizeScale);
              T3 = true, r4.save(), r4.scale(E3, 1), O2 /= E3, q2 && E3;
            }
            C2 += B3.unicode || L2, q2 && (O2 + q2.offset.x / s3, M2 - q2.offset.y / s3);
          }
          I3 += D2, g2 += D2, T3 && r4.restore();
        } else I3 += i4.fontDirection * f2;
      }
      if (m3 ? i4.y -= I3 * l2 : i4.x += I3 * l2, C2 && !n4.disableFontFace) {
        var N2 = c4 * S3 * l2 + 3;
        switch (i4.textRenderingMode) {
          case we:
            r4.fillText(C2, 0, 0, g2, N2);
            break;
          case xe:
            r4.strokeText(C2, 0, 0, g2, N2);
            break;
          case Se:
            r4.fillText(C2, 0, 0, g2, N2);
        }
      }
      r4.restore();
    }
    if (d3) {
      if (a3.canvasWidth = g2, m3) {
        var j3 = Math.PI / 2;
        a3.angle += j3;
      }
      this.textLayer.appendText(a3);
    }
    return g2;
  }, showSpacedText: function(e4) {
    var t4, a3 = this.ctx, r4 = this.current, i4 = r4.font, n4 = r4.fontSize, c4 = 1e-3 * r4.textHScale * r4.fontDirection, s3 = e4.length, o3 = 0, f2 = !!this.textLayer, l2 = i4.vertical;
    f2 && (a3.save(), this.applyTextTransforms(), t4 = this.createTextGeometry(), a3.restore());
    var h3 = [], u3 = i4.spaceWidth;
    if (!i4.spaceWidth) {
      var d3 = ft(i4.toFontChar) ? i4.toFontChar.indexOf(32) : -1;
      u3 = d3 >= 0 && ft(i4.widths) ? i4.widths[d3] : 250;
    }
    for (var g2 = 0; g2 < s3; ++g2) {
      var m3 = e4[g2];
      if (it(m3)) {
        var p3 = -m3 * n4 * c4;
        0 === h3.length ? l2 ? r4.y += p3 : r4.x += p3 : Math.abs(m3) >= u3 && (l2 ? r4.y += p3 : (this.showText(h3, true), h3 = [], r4.x += p3)), f2 && p3;
      } else h3 = h3.concat(m3);
    }
    if (h3.length) {
      var b3 = this.showText(h3, true);
      f2 && (o3 += b3);
    }
    if (f2) {
      if (t4.canvasWidth = o3, l2) {
        var v3 = Math.PI / 2;
        t4.angle += v3;
      }
      this.textLayer.appendText(t4);
    }
  }, nextLineShowText: function(e4) {
    this.nextLine(), this.showText(e4);
  }, nextLineSetSpacingShowText: function(e4, t4, a3) {
    this.setWordSpacing(e4), this.setCharSpacing(t4), this.nextLineShowText(a3);
  }, setCharWidth: function(e4, t4) {
  }, setCharWidthAndBounds: function(e4, t4, a3, r4, i4, n4) {
    this.rectangle(a3, r4, i4 - a3, n4 - r4), this.clip(), this.endPath();
  }, setStrokeColorSpace: function(e4) {
    this.current.strokeColorSpace = bt.fromIR(e4);
  }, setFillColorSpace: function(e4) {
    this.current.fillColorSpace = bt.fromIR(e4);
  }, setStrokeColor: function() {
    var e4 = this.current.strokeColorSpace.getRgb(arguments, 0), t4 = Qe.makeCssRgb(e4);
    this.ctx.strokeStyle = t4, this.current.strokeColor = t4;
  }, getColorN_Pattern: function(e4, t4) {
    if ("TilingPattern" == e4[0]) {
      var a3, r4 = e4[1], i4 = t4.base;
      if (i4) {
        i4.numComps;
        a3 = i4.getRgb(r4, 0);
      }
      var n4 = new Ft(e4, a3, this.ctx, this.objs, this.commonObjs, this.baseTransform);
    } else if ("RadialAxial" == e4[0] || "Dummy" == e4[0]) n4 = Tt.shadingFromIR(e4);
    else Oe("Unkown IR type " + e4[0]);
    return n4;
  }, setStrokeColorN: function() {
    var e4 = this.current.strokeColorSpace;
    "Pattern" == e4.name ? this.current.strokeColor = this.getColorN_Pattern(arguments, e4) : this.setStrokeColor.apply(this, arguments);
  }, setFillColor: function() {
    var e4 = this.current.fillColorSpace.getRgb(arguments, 0), t4 = Qe.makeCssRgb(e4);
    this.ctx.fillStyle = t4, this.current.fillColor = t4;
  }, setFillColorN: function() {
    var e4 = this.current.fillColorSpace;
    "Pattern" == e4.name ? this.current.fillColor = this.getColorN_Pattern(arguments, e4) : this.setFillColor.apply(this, arguments);
  }, setStrokeGray: function(e4) {
    this.current.strokeColorSpace = bt.singletons.gray;
    var t4 = this.current.strokeColorSpace.getRgb(arguments, 0), a3 = Qe.makeCssRgb(t4);
    this.ctx.strokeStyle = a3, this.current.strokeColor = a3;
  }, setFillGray: function(e4) {
    this.current.fillColorSpace = bt.singletons.gray;
    var t4 = this.current.fillColorSpace.getRgb(arguments, 0), a3 = Qe.makeCssRgb(t4);
    this.ctx.fillStyle = a3, this.current.fillColor = a3;
  }, setStrokeRGBColor: function(e4, t4, a3) {
    this.current.strokeColorSpace = bt.singletons.rgb;
    var r4 = this.current.strokeColorSpace.getRgb(arguments, 0), i4 = Qe.makeCssRgb(r4);
    this.ctx.strokeStyle = i4, this.current.strokeColor = i4;
  }, setFillRGBColor: function(e4, t4, a3) {
    this.current.fillColorSpace = bt.singletons.rgb;
    var r4 = this.current.fillColorSpace.getRgb(arguments, 0), i4 = Qe.makeCssRgb(r4);
    this.ctx.fillStyle = i4, this.current.fillColor = i4;
  }, setStrokeCMYKColor: function(e4, t4, a3, r4) {
    this.current.strokeColorSpace = bt.singletons.cmyk;
    var i4 = Qe.makeCssCmyk(arguments);
    this.ctx.strokeStyle = i4, this.current.strokeColor = i4;
  }, setFillCMYKColor: function(e4, t4, a3, r4) {
    this.current.fillColorSpace = bt.singletons.cmyk;
    var i4 = Qe.makeCssCmyk(arguments);
    this.ctx.fillStyle = i4, this.current.fillColor = i4;
  }, shadingFill: function(e4) {
    var t4 = this.ctx;
    this.save();
    var a3 = Tt.shadingFromIR(e4);
    t4.fillStyle = a3.getPattern(t4, this);
    var r4 = t4.mozCurrentTransformInverse;
    if (r4) {
      var i4 = t4.canvas, n4 = i4.width, c4 = i4.height, s3 = Qe.applyTransform([0, 0], r4), o3 = Qe.applyTransform([0, c4], r4), f2 = Qe.applyTransform([n4, 0], r4), l2 = Qe.applyTransform([n4, c4], r4), h3 = Math.min(s3[0], o3[0], f2[0], l2[0]), u3 = Math.min(s3[1], o3[1], f2[1], l2[1]), d3 = Math.max(s3[0], o3[0], f2[0], l2[0]), g2 = Math.max(s3[1], o3[1], f2[1], l2[1]);
      this.ctx.fillRect(h3, u3, d3 - h3, g2 - u3);
    } else this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);
    this.restore();
  }, beginInlineImage: function() {
    Oe("Should not call beginInlineImage");
  }, beginImageData: function() {
    Oe("Should not call beginImageData");
  }, paintFormXObjectBegin: function(e4, t4) {
    if (this.save(), this.current.paintFormXObjectDepth++, this.baseTransformStack.push(this.baseTransform), e4 && ft(e4) && 6 == e4.length && this.transform.apply(this, e4), this.baseTransform = this.ctx.mozCurrentTransform, t4 && ft(t4) && 4 == t4.length) {
      var a3 = t4[2] - t4[0], r4 = t4[3] - t4[1];
      this.rectangle(t4[0], t4[1], a3, r4), this.clip(), this.endPath();
    }
  }, paintFormXObjectEnd: function() {
    var e4 = this.current.paintFormXObjectDepth;
    do {
      this.restore(), this.current.paintFormXObjectDepth--;
    } while (this.current.paintFormXObjectDepth >= e4);
    this.baseTransform = this.baseTransformStack.pop();
  }, beginGroup: function(e4) {
    this.save();
    var t4 = this.ctx;
    e4.isolated || Pe("TODO: Support non-isolated groups."), e4.knockout && Me("Support knockout groups.");
    var a3 = t4.mozCurrentTransform;
    e4.matrix && t4.transform.apply(t4, e4.matrix), De(e4.bbox, "Bounding box is required.");
    var r4 = Qe.getAxialAlignedBoundingBox(e4.bbox, t4.mozCurrentTransform), i4 = [0, 0, t4.canvas.width, t4.canvas.height];
    r4 = Qe.intersect(r4, i4) || [0, 0, 0, 0];
    var n4 = Math.max(Math.ceil(r4[2] - r4[0]), 1), c4 = Math.max(Math.ceil(r4[3] - r4[1]), 1), s3 = Kr.getCanvas("groupAt" + this.groupLevel, n4, c4, true).context, o3 = r4[0], f2 = r4[1];
    s3.translate(-o3, -f2), s3.transform.apply(s3, a3), t4.setTransform(1, 0, 0, 1, 0, 0), t4.translate(o3, f2), function(e5, t5) {
      for (var a4 = ["strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineWidth", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "font"], r5 = 0, i5 = a4.length; r5 < i5; r5++) {
        var n5 = a4[r5];
        n5 in e5 && (t5[n5] = e5[n5]);
      }
      "setLineDash" in e5 ? (t5.setLineDash(e5.getLineDash()), t5.lineDashOffset = e5.lineDashOffset) : "mozDash" in e5 && (t5.mozDash = e5.mozDash, t5.mozDashOffset = e5.mozDashOffset);
    }(t4, s3), this.ctx = s3, this.setGState([["SMask", "None"], ["BM", "Normal"], ["ca", 1], ["CA", 1]]), this.groupStack.push(t4), this.groupLevel++;
  }, endGroup: function(e4) {
    0 == this.groupLevel && this.beginGroup(e4), this.groupLevel--;
    var t4 = this.ctx;
    this.ctx = this.groupStack.pop(), "imageSmoothingEnabled" in this.ctx ? this.ctx.imageSmoothingEnabled = false : this.ctx.mozImageSmoothingEnabled = false, this.ctx.drawImage(t4.canvas, 0, 0), this.restore();
  }, beginAnnotations: function() {
    this.save(), this.current = new Zr();
  }, endAnnotations: function() {
    this.restore();
  }, beginAnnotation: function(e4, t4, a3) {
    if (this.save(), e4 && ft(e4) && 4 == e4.length) {
      var r4 = e4[2] - e4[0], i4 = e4[3] - e4[1];
      this.rectangle(e4[0], e4[1], r4, i4), this.clip(), this.endPath();
    }
    this.transform.apply(this, t4), this.transform.apply(this, a3);
  }, endAnnotation: function() {
    this.restore();
  }, paintJpegXObject: function(e4, t4, a3) {
    var r4 = this.objs.get(e4);
    r4 || Oe("Dependent image isn't ready yet"), this.save();
    var i4 = this.ctx;
    if (i4.scale(1 / t4, -1 / a3), i4.drawImage(r4, 0, 0, r4.width, r4.height, 0, -a3, t4, a3), this.imageLayer) {
      var n4 = i4.mozCurrentTransformInverse, c4 = this.getCanvasPosition(0, 0);
      this.imageLayer.appendImage({ objId: e4, left: c4[0], top: c4[1], width: t4 / n4[0], height: a3 / n4[3] });
    }
    this.restore();
  }, paintImageMaskXObject: function(e4) {
    var a3 = this.ctx, r4 = e4.width, i4 = e4.height, n4 = this.processingType3;
    if (n4 && !("compiled" in n4)) {
      n4.compiled = r4 <= 1e3 && i4 <= 1e3 ? function(e5) {
        var t4, a4, r5, i5 = e5.width, n5 = e5.height, c5 = i5 + 1, s4 = new Uint8Array(c5 * (n5 + 1)), o4 = new Uint8Array([0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0]), f2 = 3, l2 = e5.data, h3 = 4 * i5, u3 = 0;
        for (0 !== l2[3] && (s4[0] = 1, ++u3), a4 = 1; a4 < i5; a4++) l2[f2] !== l2[f2 + 4] && (s4[a4] = l2[f2] ? 2 : 1, ++u3), f2 += 4;
        for (0 !== l2[f2] && (s4[a4] = 2, ++u3), f2 += 4, t4 = 1; t4 < n5; t4++) {
          r5 = t4 * c5, l2[f2 - h3] !== l2[f2] && (s4[r5] = l2[f2] ? 1 : 8, ++u3);
          var d3 = (l2[f2] ? 4 : 0) + (l2[f2 - h3] ? 8 : 0);
          for (a4 = 1; a4 < i5; a4++) o4[d3 = (d3 >> 2) + (l2[f2 + 4] ? 4 : 0) + (l2[f2 - h3 + 4] ? 8 : 0)] && (s4[r5 + a4] = o4[d3], ++u3), f2 += 4;
          if (l2[f2 - h3] !== l2[f2] && (s4[r5 + a4] = l2[f2] ? 2 : 4, ++u3), f2 += 4, u3 > 1e3) return null;
        }
        for (r5 = t4 * c5, 0 !== l2[f2 -= h3] && (s4[r5] = 8, ++u3), a4 = 1; a4 < i5; a4++) l2[f2] !== l2[f2 + 4] && (s4[r5 + a4] = l2[f2] ? 4 : 8, ++u3), f2 += 4;
        if (0 !== l2[f2] && (s4[r5 + a4] = 4, ++u3), u3 > 1e3) return null;
        var g2 = new Int32Array([0, c5, -1, 0, -c5, 0, 0, 0, 1]), m3 = [];
        for (t4 = 0; u3 && t4 <= n5; t4++) {
          for (var p3 = t4 * c5, b3 = p3 + i5; p3 < b3 && !s4[p3]; ) p3++;
          if (p3 !== b3) {
            var v3, y3 = [p3 % c5, t4], k3 = s4[p3], A3 = p3;
            do {
              var w3 = g2[k3];
              do {
                p3 += w3;
              } while (!s4[p3]);
              5 !== (v3 = s4[p3]) && 10 !== v3 ? (k3 = v3, s4[p3] = 0) : (k3 = v3 & 51 * k3 >> 4, s4[p3] &= k3 >> 2 | k3 << 2), y3.push(p3 % c5), y3.push(p3 / c5 | 0), --u3;
            } while (A3 !== p3);
            m3.push(y3), --t4;
          }
        }
        return function(e6) {
          e6.save(), e6.scale(1 / i5, -1 / n5), e6.translate(0, -n5), e6.beginPath();
          for (var t5 = 0, a5 = m3.length; t5 < a5; t5++) {
            var r6 = m3[t5];
            e6.moveTo(r6[0], r6[1]);
            for (var c6 = 2, s5 = r6.length; c6 < s5; c6 += 2) e6.lineTo(r6[c6], r6[c6 + 1]);
          }
          e6.fill(), e6.beginPath(), e6.restore();
        };
      }({ data: e4.data, width: r4, height: i4 }) : null;
    }
    if (n4 && n4.compiled) n4.compiled(a3);
    else {
      var c4 = Kr.getCanvas("maskCanvas", r4, i4), s3 = c4.context;
      s3.save(), t3(s3, e4), s3.globalCompositeOperation = "source-in";
      var o3 = this.current.fillColor;
      s3.fillStyle = o3 && o3.hasOwnProperty("type") && "Pattern" === o3.type ? o3.getPattern(s3, this) : o3, s3.fillRect(0, 0, r4, i4), s3.restore(), this.paintInlineImageXObject(c4.canvas);
    }
  }, paintImageMaskXObjectGroup: function(e4) {
    for (var a3 = this.ctx, r4 = 0, i4 = e4.length; r4 < i4; r4++) {
      var n4 = e4[r4], c4 = n4.width, s3 = n4.height, o3 = Kr.getCanvas("maskCanvas", c4, s3), f2 = o3.context;
      f2.save(), t3(f2, n4), f2.globalCompositeOperation = "source-in";
      var l2 = this.current.fillColor;
      f2.fillStyle = l2 && l2.hasOwnProperty("type") && "Pattern" === l2.type ? l2.getPattern(f2, this) : l2, f2.fillRect(0, 0, c4, s3), f2.restore(), a3.save(), a3.transform.apply(a3, n4.transform), a3.scale(1, -1), a3.drawImage(o3.canvas, 0, 0, c4, s3, 0, -1, 1, 1), a3.restore();
    }
  }, paintImageXObject: function(e4) {
    var t4 = this.objs.get(e4);
    t4 || Oe("Dependent image isn't ready yet"), this.paintInlineImageXObject(t4);
  }, paintInlineImageXObject: function(e4) {
    var a3 = e4.width, r4 = e4.height, i4 = this.ctx;
    this.save(), i4.scale(1 / a3, -1 / r4);
    var n4, c4 = i4.mozCurrentTransformInverse, s3 = c4[0], o3 = c4[1], f2 = Math.max(Math.sqrt(s3 * s3 + o3 * o3), 1), l2 = c4[2], h3 = c4[3], u3 = Math.max(Math.sqrt(l2 * l2 + h3 * h3), 1);
    if (e4 instanceof HTMLElement || !e4.data) n4 = e4;
    else {
      var d3 = (b3 = Kr.getCanvas("inlineImage", a3, r4)).context;
      t3(d3, e4), n4 = b3.canvas;
    }
    for (var g2 = a3, m3 = r4, p3 = "prescale1"; f2 > 2 && g2 > 1 || u3 > 2 && m3 > 1; ) {
      var b3, v3 = g2, y3 = m3;
      f2 > 2 && g2 > 1 && (f2 /= g2 / (v3 = Math.ceil(g2 / 2))), u3 > 2 && m3 > 1 && (u3 /= m3 / (y3 = Math.ceil(m3 / 2))), (d3 = (b3 = Kr.getCanvas(p3, v3, y3)).context).clearRect(0, 0, v3, y3), d3.drawImage(n4, 0, 0, g2, m3, 0, 0, v3, y3), n4 = b3.canvas, g2 = v3, m3 = y3, p3 = "prescale1" === p3 ? "prescale2" : "prescale1";
    }
    if (i4.drawImage(n4, 0, 0, g2, m3, 0, -r4, a3, r4), this.imageLayer) {
      var k3 = this.getCanvasPosition(0, -r4);
      this.imageLayer.appendImage({ imgData: e4, left: k3[0], top: k3[1], width: a3 / c4[0], height: r4 / c4[3] });
    }
    this.restore();
  }, paintInlineImageXObjectGroup: function(e4, a3) {
    var r4 = this.ctx, i4 = e4.width, n4 = e4.height, c4 = Kr.getCanvas("inlineImage", i4, n4);
    t3(c4.context, e4);
    for (var s3 = 0, o3 = a3.length; s3 < o3; s3++) {
      var f2 = a3[s3];
      if (r4.save(), r4.transform.apply(r4, f2.transform), r4.scale(1, -1), r4.drawImage(c4.canvas, f2.x, f2.y, f2.w, f2.h, 0, -1, 1, 1), this.imageLayer) {
        var l2 = this.getCanvasPosition(f2.x, f2.y);
        this.imageLayer.appendImage({ imgData: e4, left: l2[0], top: l2[1], width: i4, height: n4 });
      }
      r4.restore();
    }
  }, markPoint: function(e4) {
  }, markPointProps: function(e4, t4) {
  }, beginMarkedContent: function(e4) {
  }, beginMarkedContentProps: function(e4, t4) {
  }, endMarkedContent: function() {
  }, beginCompat: function() {
  }, endCompat: function() {
  }, consumePath: function() {
    if (this.pendingClip) {
      if (this.pendingClip == n3) if ("mozFillRule" in this.ctx) this.ctx.mozFillRule = "evenodd", this.ctx.clip(), this.ctx.mozFillRule = "nonzero";
      else try {
        this.ctx.clip("evenodd");
      } catch (e4) {
        this.ctx.clip();
      }
      else this.ctx.clip();
      this.pendingClip = null;
    }
    this.ctx.beginPath();
  }, getSinglePixelWidth: function(e4) {
    var t4 = this.ctx.mozCurrentTransformInverse;
    return Math.sqrt(Math.max(t4[0] * t4[0] + t4[1] * t4[1], t4[2] * t4[2] + t4[3] * t4[3]));
  }, getCanvasPosition: function(e4, t4) {
    var a3 = this.ctx.mozCurrentTransform;
    return [a3[0] * e4 + a3[2] * t4 + a3[4], a3[1] * e4 + a3[3] * t4 + a3[5]];
  } }, Be) e3.prototype[Be[c3]] = e3.prototype[c3];
  return e3;
}();
be.disableFontFace = false;
var $r = { insertRule: function(e3) {
  var t3 = document.getElementById("PDFJS_FONT_STYLE_TAG");
  t3 || ((t3 = document.createElement("style")).id = "PDFJS_FONT_STYLE_TAG", document.documentElement.getElementsByTagName("head")[0].appendChild(t3));
  var a2 = t3.sheet;
  a2.insertRule(e3, a2.cssRules.length);
}, clear: function() {
  var e3 = document.getElementById("PDFJS_FONT_STYLE_TAG");
  e3 && e3.parentNode.removeChild(e3);
}, get loadTestFont() {
  return Ue(this, "loadTestFont", atob("T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQAFQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAAALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgAAAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACMAooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4DIP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAAAAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUAAQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgABAAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABYAAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAAAC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAAAAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQACAQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTjFQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA=="));
}, loadTestFontId: 0, loadingContext: { requests: [], nextRequestId: 0 }, isSyncFontLoadingSupported: function() {
  if (ye) return false;
  var e3 = window.navigator.userAgent, t3 = /Mozilla\/5.0.*?rv:(\d+).*? Gecko/.exec(e3);
  return !!(t3 && t3[1] >= 14);
}(), bind: function(e3, t3) {
  De(!ye, "bind() shall be called from main thread");
  for (var a2 = [], r3 = [], i3 = 0, n3 = e3.length; i3 < n3; i3++) {
    var c3 = e3[i3];
    if (!c3.attached && false !== c3.loading) {
      c3.attached = true;
      var s3 = c3.bindDOM();
      s3 && (a2.push(s3), r3.push(c3));
    }
  }
  var o3 = $r.queueLoadingCallback(t3);
  a2.length > 0 && !this.isSyncFontLoadingSupported ? $r.prepareFontLoadEvent(a2, r3, o3) : o3.complete();
}, queueLoadingCallback: function(e3) {
  var t3 = $r.loadingContext, a2 = { id: "pdfjs-font-loading-" + t3.nextRequestId++, complete: function() {
    for (De(!a2.end, "completeRequest() cannot be called twice"), a2.end = Date.now(); t3.requests.length > 0 && t3.requests[0].end; ) {
      var e4 = t3.requests.shift();
      setTimeout(e4.callback, 0);
    }
  }, callback: e3, started: Date.now() };
  return t3.requests.push(a2), a2;
}, prepareFontLoadEvent: function(e3, t3, a2) {
  function r3(e4, t4) {
    return e4.charCodeAt(t4) << 24 | e4.charCodeAt(t4 + 1) << 16 | e4.charCodeAt(t4 + 2) << 8 | 255 & e4.charCodeAt(t4 + 3);
  }
  function i3(e4, t4, a3, r4) {
    return u3.substring(0, t4) + r4 + u3.substring(t4 + a3);
  }
  var n3, c3, s3 = document.createElement("canvas");
  s3.width = 1, s3.height = 1;
  var o3 = s3.getContext("2d"), f2 = 0;
  var l2, h3 = "lt" + Date.now() + this.loadTestFontId++, u3 = this.loadTestFont, d3 = 1482184792, g2 = r3(u3 = i3(0, 976, h3.length, h3), 16);
  for (n3 = 0, c3 = h3.length - 3; n3 < c3; n3 += 4) g2 = g2 - d3 + r3(h3, n3) | 0;
  n3 < h3.length && (g2 = g2 - d3 + r3(h3 + "XXX", n3) | 0), u3 = i3(0, 16, 4, (l2 = g2, String.fromCharCode(l2 >> 24 & 255) + String.fromCharCode(l2 >> 16 & 255) + String.fromCharCode(l2 >> 8 & 255) + String.fromCharCode(255 & l2)));
  var m3 = '@font-face { font-family:"' + h3 + '";src:' + ("url(data:font/opentype;base64," + btoa(u3) + ");") + "}";
  $r.insertRule(m3);
  var p3 = [];
  for (n3 = 0, c3 = t3.length; n3 < c3; n3++) p3.push(t3[n3].loadedName);
  p3.push(h3);
  var b3 = document.createElement("div");
  for (b3.setAttribute("style", "visibility: hidden;width: 10px; height: 10px;position: absolute; top: 0px; left: 0px;"), n3 = 0, c3 = p3.length; n3 < c3; ++n3) {
    var v3 = document.createElement("span");
    v3.textContent = "Hi", v3.style.fontFamily = p3[n3], b3.appendChild(v3);
  }
  document.body.appendChild(b3), function e4(t4, a3) {
    if (++f2 > 30) return Re("Load test font never loaded."), void a3();
    o3.font = "30px " + t4, o3.fillText(".", 0, 20), o3.getImageData(0, 0, 1, 1).data[3] > 0 ? a3() : setTimeout(e4.bind(null, t4, a3));
  }(h3, function() {
    document.body.removeChild(b3), a2.complete();
  });
} };
var ei = function() {
  function e3(e4, t3, a2) {
    if (this.compiledGlyphs = {}, 1 !== arguments.length) ;
    else {
      var r3 = arguments[0];
      for (var i3 in r3) this[i3] = r3[i3];
    }
  }
  return e3.prototype = { bindDOM: function() {
    if (!this.data) return null;
    if (be.disableFontFace) return this.disableFontFace = true, null;
    var e4 = Je(this.data), t3 = this.loadedName, a2 = "url(data:" + this.mimetype + ";base64," + window.btoa(e4) + ");", r3 = '@font-face { font-family:"' + t3 + '";src:' + a2 + "}";
    return $r.insertRule(r3), be.pdfBug && "FontInspector" in ve && ve.FontInspector.enabled && ve.FontInspector.fontAdded(this, a2), r3;
  }, getPathGenerator: function(e4, t3) {
    if (!(t3 in this.compiledGlyphs)) {
      var a2 = e4.get(this.loadedName + "_path_" + t3);
      this.compiledGlyphs[t3] = new Function("c", "size", a2);
    }
    return this.compiledGlyphs[t3];
  } }, e3;
}();
be.Metadata = function() {
  function e3(e4) {
    (this.metadata = {}, "string" == typeof e4) && ((e4 = (e4 = function(e5) {
      return e5.replace(/>\\376\\377([^<]+)/g, function(e6, t3) {
        for (var a2 = t3.replace(/\\([0-3])([0-7])([0-7])/g, function(e7, t4, a3, r4) {
          return String.fromCharCode(64 * t4 + 8 * a3 + 1 * r4);
        }), r3 = "", i3 = 0; i3 < a2.length; i3 += 2) {
          r3 += "&#x" + (65536 + (256 * a2.charCodeAt(i3) + a2.charCodeAt(i3 + 1))).toString(16).substring(1) + ";";
        }
        return ">" + r3;
      });
    }(e4)).trim()).startsWith("<") && e4.endsWith(">") && (e4 = new import_xmldom.DOMParser().parseFromString(e4, "application/xml"), this.metaDocument = e4, this.parse()));
  }
  return e3.prototype = { parse: function() {
    var e4 = this.metaDocument.documentElement;
    if (e4 && "rdf:rdf" !== e4.nodeName.toLowerCase()) for (e4 = e4.firstChild; e4 && "rdf:rdf" !== e4.nodeName.toLowerCase(); ) e4 = e4.nextSibling;
    var t3 = e4 ? e4.nodeName.toLowerCase() : null;
    if (e4 && "rdf:rdf" === t3 && e4.hasChildNodes()) {
      var a2, r3, i3, n3, c3, s3, o3, f2 = e4.childNodes;
      for (n3 = 0, s3 = f2.length; n3 < s3; n3++) if ("rdf:description" === (a2 = f2[n3]).nodeName.toLowerCase()) for (c3 = 0, o3 = a2.childNodes.length; c3 < o3; c3++) "#text" !== a2.childNodes[c3].nodeName.toLowerCase() && (i3 = (r3 = a2.childNodes[c3]).nodeName.toLowerCase(), this.metadata[i3] = r3.textContent.trim());
    }
  }, get: function(e4) {
    return this.metadata[e4] || null;
  }, has: function(e4) {
    return void 0 !== this.metadata[e4];
  } }, e3;
}();
be.maxImageSize = void 0 === be.maxImageSize ? -1 : be.maxImageSize, be.disableFontFace = void 0 !== be.disableFontFace && be.disableFontFace, be.imageResourcesPath = void 0 === be.imageResourcesPath ? "" : be.imageResourcesPath, be.disableWorker = void 0 !== be.disableWorker && be.disableWorker, be.workerSrc = void 0 === be.workerSrc ? null : be.workerSrc, be.disableRange = void 0 !== be.disableRange && be.disableRange, be.disableAutoFetch = void 0 !== be.disableAutoFetch && be.disableAutoFetch, be.pdfBug = void 0 !== be.pdfBug && be.pdfBug, be.postMessageTransfers = void 0 === be.postMessageTransfers || be.postMessageTransfers, be.getDocument = function(e3, t3, a2, r3) {
  var i3, n3, c3;
  "string" == typeof e3 ? e3 = { url: e3 } : ht(e3) ? e3 = { data: e3 } : "object" != typeof e3 && Oe("Invalid parameter in getDocument, need either Uint8Array, string or a parameter object"), e3.url || e3.data || Oe("Invalid parameter array, need either .data or .url");
  var s3 = {};
  for (var o3 in e3) "url" !== o3 || "undefined" == typeof window ? s3[o3] = e3[o3] : s3[o3] = qe(window.location.href, e3[o3]);
  return i3 = new be.Promise(), n3 = new be.Promise(), c3 = new ri(i3, n3, t3, r3), i3.then(function() {
    c3.passwordCallback = a2, c3.fetchDocument(s3);
  }), n3;
};
var ti = function() {
  function e3(e4, t3) {
    this.pdfInfo = e4, this.transport = t3;
  }
  return e3.prototype = { get numPages() {
    return this.pdfInfo.numPages;
  }, get fingerprint() {
    return this.pdfInfo.fingerprint;
  }, get embeddedFontsUsed() {
    return this.transport.embeddedFontsUsed;
  }, getPage: function(e4) {
    return this.transport.getPage(e4);
  }, getPageIndex: function(e4) {
    return this.transport.getPageIndex(e4);
  }, getDestinations: function() {
    return this.transport.getDestinations();
  }, getJavaScript: function() {
    var e4 = new be.Promise(), t3 = this.pdfInfo.javaScript;
    return e4.resolve(t3), e4;
  }, getOutline: function() {
    var e4 = new be.Promise(), t3 = this.pdfInfo.outline;
    return e4.resolve(t3), e4;
  }, getMetadata: function() {
    var e4 = new be.Promise(), t3 = this.pdfInfo.info, a2 = this.pdfInfo.metadata;
    return e4.resolve({ info: t3, metadata: a2 ? new be.Metadata(a2) : null }), e4;
  }, isEncrypted: function() {
    var e4 = new be.Promise();
    return e4.resolve(this.pdfInfo.encrypted), e4;
  }, getData: function() {
    var e4 = new be.Promise();
    return this.transport.getData(e4), e4;
  }, dataLoaded: function() {
    return this.transport.dataLoaded();
  }, cleanup: function() {
    this.transport.startCleanup();
  }, destroy: function() {
    this.transport.destroy();
  } }, e3;
}();
var ai = function() {
  function e3(e4, t3) {
    this.pageInfo = e4, this.transport = t3, this.stats = new mt(), this.stats.enabled = !!ve.PDFJS.enableStats, this.commonObjs = t3.commonObjs, this.objs = new ii(), this.receivingOperatorList = false, this.cleanupAfterRender = false, this.pendingDestroy = false, this.renderTasks = [];
  }
  return e3.prototype = { get pageNumber() {
    return this.pageInfo.pageIndex + 1;
  }, get rotate() {
    return this.pageInfo.rotate;
  }, get ref() {
    return this.pageInfo.ref;
  }, get view() {
    return this.pageInfo.view;
  }, getViewport: function(e4, t3) {
    return arguments.length < 2 && (t3 = this.rotate), new be.PageViewport(this.view, e4, t3, 0, 0);
  }, getAnnotations: function() {
    if (this.annotationsPromise) return this.annotationsPromise;
    var e4 = new be.Promise();
    return this.annotationsPromise = e4, this.transport.getAnnotations(this.pageInfo.pageIndex), e4;
  }, render: function(e4) {
    var t3 = this.stats;
    t3.time("Overall"), this.pendingDestroy = false, this.displayReadyPromise || (this.receivingOperatorList = true, this.displayReadyPromise = new gt(), this.operatorList = { fnArray: [], argsArray: [], lastChunk: false }, this.stats.time("Page Request"), this.transport.messageHandler.send("RenderPageRequest", { pageIndex: this.pageNumber - 1 }));
    var a2 = new ci(n3, e4, this.objs, this.commonObjs, this.operatorList, this.pageNumber);
    this.renderTasks.push(a2);
    var r3 = new ni(a2), i3 = this;
    function n3(e5) {
      var n4 = i3.renderTasks.indexOf(a2);
      n4 >= 0 && i3.renderTasks.splice(n4, 1), i3.cleanupAfterRender && (i3.pendingDestroy = true), i3._tryDestroy(), e5 ? r3.reject(e5) : r3.resolve(), t3.timeEnd("Rendering"), t3.timeEnd("Overall");
    }
    return this.displayReadyPromise.then(function(e5) {
      if (i3.pendingDestroy) n3();
      else {
        t3.time("Rendering");
        try {
          a2.initalizeGraphics(e5), a2.operatorListChanged();
        } catch (e6) {
          n3(e6);
        }
      }
    }, function(e5) {
      n3(e5);
    }), r3;
  }, getTextContent: function() {
    var e4 = new be.Promise();
    return this.transport.messageHandler.send("GetTextContent", { pageIndex: this.pageNumber - 1 }, function(t3) {
      e4.resolve(t3);
    }), e4;
  }, getOperationList: function() {
    var e4 = new be.Promise();
    return e4.resolve({ dependencyFontsID: null, operatorList: null }), e4;
  }, destroy: function() {
    this.pendingDestroy = true, this._tryDestroy();
  }, _tryDestroy: function() {
    this.pendingDestroy && 0 === this.renderTasks.length && !this.receivingOperatorList && (delete this.operatorList, delete this.displayReadyPromise, this.objs.clear(), this.pendingDestroy = false);
  }, _startRenderPage: function(e4) {
    this.displayReadyPromise.resolve(e4);
  }, _renderPageChunk: function(e4) {
    for (var t3 = 0, a2 = e4.length; t3 < a2; t3++) this.operatorList.fnArray.push(e4.fnArray[t3]), this.operatorList.argsArray.push(e4.argsArray[t3]);
    this.operatorList.lastChunk = e4.lastChunk;
    for (t3 = 0; t3 < this.renderTasks.length; t3++) this.renderTasks[t3].operatorListChanged();
    e4.lastChunk && (this.receivingOperatorList = false, this._tryDestroy());
  } }, e3;
}();
var ri = function() {
  function e3(e4, t3, a2, r3) {
    if (this.pdfDataRangeTransport = a2, this.workerReadyPromise = t3, this.progressCallback = r3, this.commonObjs = new ii(), this.pageCache = [], this.pagePromises = [], this.embeddedFontsUsed = false, this.passwordCallback = null, !ve.PDFJS.disableWorker && "undefined" != typeof Worker) {
      var i3 = be.workerSrc;
      i3 || Oe("No PDFJS.workerSrc specified");
      try {
        var n3 = new Worker(i3), c3 = new pt("main", n3);
        this.messageHandler = c3, c3.on("test", function(t4) {
          t4 && t4.supportTypedArray ? (this.worker = n3, t4.supportTransfers || (be.postMessageTransfers = false), this.setupMessageHandler(c3), e4.resolve()) : (ve.PDFJS.disableWorker = true, this.loadFakeWorkerFiles().then(function() {
            this.setupFakeWorker(), e4.resolve();
          }.bind(this)));
        }.bind(this));
        var s3 = new Uint8Array([be.postMessageTransfers ? 255 : 0]);
        try {
          c3.send("test", s3, null, [s3.buffer]);
        } catch (e5) {
          Pe("Cannot use postMessage transfers"), s3[0] = 0, c3.send("test", s3);
        }
        return;
      } catch (e5) {
        Pe("The worker has been disabled.");
      }
    }
    ve.PDFJS.disableWorker = true, this.loadFakeWorkerFiles().then(function() {
      this.setupFakeWorker(), e4.resolve();
    }.bind(this));
  }
  return e3.prototype = { destroy: function() {
    this.pageCache = [], this.pagePromises = [];
    var e4 = this;
    this.messageHandler.send("Terminate", null, function() {
      e4.worker && e4.worker.terminate();
    });
  }, loadFakeWorkerFiles: function() {
    return be.fakeWorkerFilesLoadedPromise || (be.fakeWorkerFilesLoadedPromise = new gt(), ve.PDFJS.disableWorker ? be.fakeWorkerFilesLoadedPromise.resolve() : Qe.loadScript(be.workerSrc)), be.fakeWorkerFilesLoadedPromise;
  }, setupFakeWorker: function() {
    Re("Setting up fake worker.");
    var e4 = { postMessage: function(t4) {
      e4.onmessage({ data: t4 });
    }, terminate: function() {
    } }, t3 = new pt("main", e4);
    this.setupMessageHandler(t3), be.WorkerMessageHandler.setup(t3);
  }, setupMessageHandler: function(e4) {
    function t3(t4) {
      e4.send("UpdatePassword", t4);
    }
    this.messageHandler = e4;
    var a2 = this.pdfDataRangeTransport;
    a2 && (a2.addRangeListener(function(t4, a3) {
      e4.send("OnDataRange", { begin: t4, chunk: a3 });
    }), a2.addProgressListener(function(t4) {
      e4.send("OnDataProgress", { loaded: t4 });
    }), e4.on("RequestDataRange", function(e5) {
      a2.requestDataRange(e5.begin, e5.end);
    }, this)), e4.on("GetDoc", function(e5) {
      var t4 = e5.pdfInfo, a3 = new ti(t4, this);
      this.pdfDocument = a3, this.workerReadyPromise.resolve(a3);
    }, this), e4.on("NeedPassword", function(e5) {
      if (this.passwordCallback) return this.passwordCallback(t3, ze.NEED_PASSWORD);
      this.workerReadyPromise.reject(e5.exception.message, e5.exception);
    }, this), e4.on("IncorrectPassword", function(e5) {
      if (this.passwordCallback) return this.passwordCallback(t3, ze.INCORRECT_PASSWORD);
      this.workerReadyPromise.reject(e5.exception.message, e5.exception);
    }, this), e4.on("InvalidPDF", function(e5) {
      this.workerReadyPromise.reject(e5.exception.name, e5.exception);
    }, this), e4.on("MissingPDF", function(e5) {
      this.workerReadyPromise.reject(e5.exception.message, e5.exception);
    }, this), e4.on("UnknownError", function(e5) {
      this.workerReadyPromise.reject(e5.exception.message, e5.exception);
    }, this), e4.on("GetPage", function(e5) {
      var t4 = e5.pageInfo, a3 = new ai(t4, this);
      this.pageCache[t4.pageIndex] = a3, this.pagePromises[t4.pageIndex].resolve(a3);
    }, this), e4.on("GetAnnotations", function(e5) {
      var t4 = e5.annotations;
      this.pageCache[e5.pageIndex].annotationsPromise.resolve(t4);
    }, this), e4.on("StartRenderPage", function(e5) {
      var t4 = this.pageCache[e5.pageIndex];
      t4.stats.timeEnd("Page Request"), t4._startRenderPage(e5.transparency);
    }, this), e4.on("RenderPageChunk", function(e5) {
      this.pageCache[e5.pageIndex]._renderPageChunk(e5.operatorList);
    }, this), e4.on("commonobj", function(e5) {
      var t4 = e5[0], a3 = e5[1];
      if (!this.commonObjs.hasData(t4)) switch (a3) {
        case "Font":
          var r3, i3 = e5[2];
          if ("error" in i3) {
            var n3 = i3.error;
            this.commonObjs.resolve(t4, n3);
            break;
          }
          r3 = new ei(i3), this.commonObjs.resolve(t4, r3);
          break;
        case "FontPath":
          this.commonObjs.resolve(t4, e5[2]);
          break;
        default:
          n3("Got unknown common object type " + a3);
      }
    }, this), e4.on("obj", function(e5) {
      var t4 = e5[0], a3 = e5[1], r3 = e5[2], i3 = this.pageCache[a3];
      if (!i3.objs.hasData(t4)) switch (r3) {
        case "JpegStream":
          !function(e6, t5, a4) {
            var r4 = new pe();
            r4.onload = function() {
              a4.resolve(e6, r4);
            }, r4.src = "data:image/jpeg;base64," + r4.btoa(t5);
          }(t4, n3 = e5[3], i3.objs);
          break;
        case "Image":
          var n3 = e5[3];
          i3.objs.resolve(t4, n3);
          "data" in n3 && n3.data.length > 8e6 && (i3.cleanupAfterRender = true);
          break;
        default:
          Oe("Got unknown object type " + r3);
      }
    }, this), e4.on("DocProgress", function(e5) {
      this.progressCallback && this.progressCallback({ loaded: e5.loaded, total: e5.total });
    }, this), e4.on("DocError", function(e5) {
      this.workerReadyPromise.reject(e5);
    }, this), e4.on("PageError", function(e5) {
      var t4 = this.pageCache[e5.pageNum - 1];
      t4.displayReadyPromise ? t4.displayReadyPromise.reject(e5.error) : Oe(e5.error);
    }, this), e4.on("JpegDecode", function(e5, t4) {
      var a3 = e5[0], r3 = e5[1];
      3 != r3 && 1 != r3 && Oe("Only 3 component or 1 component can be returned");
      var i3 = new pe();
      i3.onload = function() {
        var e6 = i3.width, a4 = i3.height, n3 = e6 * a4, c3 = 4 * n3, s3 = new Uint8Array(n3 * r3), o3 = ue(e6, a4).getContext("2d");
        o3.drawImage(i3, 0, 0);
        var f2 = o3.getImageData(0, 0, e6, a4).data;
        if (3 == r3) for (var l2 = 0, h3 = 0; l2 < c3; l2 += 4, h3 += 3) s3[h3] = f2[l2], s3[h3 + 1] = f2[l2 + 1], s3[h3 + 2] = f2[l2 + 2];
        else if (1 == r3) for (l2 = 0, h3 = 0; l2 < c3; l2 += 4, h3++) s3[h3] = f2[l2];
        t4.resolve({ data: s3, width: e6, height: a4 });
      }.bind(this), i3.src = "data:image/jpeg;base64," + i3.btoa(a3);
    });
  }, fetchDocument: function(e4) {
    e4.disableAutoFetch = be.disableAutoFetch, e4.chunkedViewerLoading = !!this.pdfDataRangeTransport, this.messageHandler.send("GetDocRequest", { source: e4, disableRange: be.disableRange, maxImageSize: be.maxImageSize, disableFontFace: be.disableFontFace });
  }, getData: function(e4) {
    this.messageHandler.send("GetData", null, function(t3) {
      e4.resolve(t3);
    });
  }, dataLoaded: function() {
    var e4 = new be.Promise();
    return this.messageHandler.send("DataLoaded", null, function(t3) {
      e4.resolve(t3);
    }), e4;
  }, getPage: function(e4, t3) {
    var a2 = e4 - 1;
    if (a2 in this.pagePromises) return this.pagePromises[a2];
    t3 = new be.Promise("Page " + e4);
    return this.pagePromises[a2] = t3, this.messageHandler.send("GetPageRequest", { pageIndex: a2 }), t3;
  }, getPageIndex: function(e4) {
    var t3 = new be.Promise();
    return this.messageHandler.send("GetPageIndex", { ref: e4 }, function(e5) {
      t3.resolve(e5);
    }), t3;
  }, getAnnotations: function(e4) {
    this.messageHandler.send("GetAnnotationsRequest", { pageIndex: e4 });
  }, getDestinations: function() {
    var e4 = new be.Promise();
    return this.messageHandler.send("GetDestinations", null, function(t3) {
      e4.resolve(t3);
    }), e4;
  }, startCleanup: function() {
    this.messageHandler.send("Cleanup", null, function() {
      for (var e4 = 0, t3 = this.pageCache.length; e4 < t3; e4++) {
        var a2 = this.pageCache[e4];
        a2 && a2.destroy();
      }
      this.commonObjs.clear();
    }.bind(this));
  } }, e3;
}();
var ii = function() {
  function e3() {
    this.objs = {};
  }
  return e3.prototype = { ensureObj: function(e4) {
    if (this.objs[e4]) return this.objs[e4];
    var t3 = { promise: new gt(e4), data: null, resolved: false };
    return this.objs[e4] = t3, t3;
  }, get: function(e4, t3) {
    if (t3) return this.ensureObj(e4).promise.then(t3), null;
    var a2 = this.objs[e4];
    return a2 && a2.resolved ? a2.data : (Re("Requesting object that isn't resolved yet " + e4), null);
  }, resolve: function(e4, t3) {
    var a2 = this.ensureObj(e4);
    a2.resolved = true, a2.data = t3, a2.promise.resolve(t3);
  }, isResolved: function(e4) {
    var t3 = this.objs;
    return !!t3[e4] && t3[e4].resolved;
  }, hasData: function(e4) {
    return this.isResolved(e4);
  }, getData: function(e4) {
    var t3 = this.objs;
    return t3[e4] && t3[e4].resolved ? t3[e4].data : null;
  }, clear: function() {
    this.objs = {};
  } }, e3;
}();
var ni = function() {
  function e3(e4) {
    this.internalRenderTask = e4, gt.call(this);
  }
  return e3.prototype = Object.create(gt.prototype), e3.prototype.cancel = function() {
    this.internalRenderTask.cancel();
  }, e3;
}();
var ci = function() {
  function e3(e4, t3, a2, r3, i3, n3) {
    this.callback = e4, this.params = t3, this.objs = a2, this.commonObjs = r3, this.operatorListIdx = null, this.operatorList = i3, this.pageNumber = n3, this.running = false, this.graphicsReadyCallback = null, this.graphicsReady = false, this.cancelled = false;
  }
  return e3.prototype = { initalizeGraphics: function(e4) {
    if (!this.cancelled) {
      be.pdfBug && "StepperManager" in ve && ve.StepperManager.enabled && (this.stepper = ve.StepperManager.create(this.pageNumber - 1), this.stepper.init(this.operatorList), this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint());
      var t3 = this.params;
      this.gfx = new Qr(t3.canvasContext, this.commonObjs, this.objs, t3.textLayer, t3.imageLayer), this.gfx.beginDrawing(t3.viewport, e4), this.operatorListIdx = 0, this.graphicsReady = true, this.graphicsReadyCallback && this.graphicsReadyCallback();
    }
  }, cancel: function() {
    this.running = false, this.cancelled = true, this.callback("cancelled");
  }, operatorListChanged: function() {
    this.graphicsReady ? (this.stepper && this.stepper.updateOperatorList(this.operatorList), this.running || this._continue()) : this.graphicsReadyCallback || (this.graphicsReadyCallback = this._continue.bind(this));
  }, _continue: function() {
    this.running = true, this.cancelled || (this.params.continueCallback ? this.params.continueCallback(this._next.bind(this)) : this._next());
  }, _next: function() {
    this.cancelled || (this.operatorListIdx = this.gfx.executeOperatorList(this.operatorList, this.operatorListIdx, this._continue.bind(this), this.stepper), this.operatorListIdx === this.operatorList.argsArray.length && (this.running = false, this.operatorList.lastChunk && (this.gfx.endDrawing(), this.callback())));
  } }, e3;
}();
var si = class _si {
  static RenderingStates = { INITIAL: 0, RUNNING: 1, PAUSED: 2, FINISHED: 3 };
  id = -1;
  pdfPage = null;
  ptiParser = null;
  scale = 0;
  viewport = null;
  renderingState = -1;
  Fields = null;
  Boxsets = null;
  ctxCanvas = null;
  #x(e3) {
    if (!_2.isFormElement(e3)) return void t2.p2jwarn("NOT valid form element", e3);
    new _2(e3, this.viewport, this.Fields, this.Boxsets).processField();
  }
  constructor(e3, t3, a2, r3) {
    this.id = t3, this.pdfPage = e3, this.ptiParser = r3, this.scale = a2 || 1, this.viewport = this.pdfPage.getViewport(this.scale), this.renderingState = _si.RenderingStates.INITIAL, this.Fields = [], this.Boxsets = [], this.ctxCanvas = {};
  }
  get width() {
    return G.toFormX(this.viewport.width);
  }
  get height() {
    return G.toFormY(this.viewport.height);
  }
  get HLines() {
    return this.ctxCanvas.HLines;
  }
  get VLines() {
    return this.ctxCanvas.VLines;
  }
  get Fills() {
    return this.ctxCanvas.Fills;
  }
  get Texts() {
    return this.ctxCanvas.Texts;
  }
  destroy() {
    this.pdfPage.destroy(), this.pdfPage = null, this.ptiParser = null, this.Fields = null, this.Boxsets = null, this.ctxCanvas = null;
  }
  getPagePoint(e3, t3) {
    return this.viewport.convertToPdfPoint(e3, t3);
  }
  parsePage(e3, a2) {
    if (this.renderingState !== _si.RenderingStates.INITIAL) return void a2("Must be in new state before drawing");
    this.renderingState = _si.RenderingStates.RUNNING;
    const r3 = ue(1, 1).getContext("2d"), i3 = this.#x.bind(this);
    function n3(n4) {
      if (this.renderingState = _si.RenderingStates.FINISHED, n4) s2.error(n4), a2(`Error: Page ${this.id + 1}: ${n4.message}`);
      else {
        if (this.ptiParser) {
          this.ptiParser.getFields(parseInt(this.id) + 1).forEach((e4) => i3(e4));
        }
        this.ctxCanvas = r3.canvas, this.stats = this.pdfPage.stats, t2.p2jinfo(`Success: Page ${this.id + 1}`), e3();
      }
    }
    const c3 = { canvasContext: r3, viewport: this.viewport };
    this.pdfPage.render(c3).then((e4) => {
      this.pdfPage.getAnnotations().then((e5) => {
        e5.forEach((e6) => this.#x(e6)), n3.call(this, null);
      }, (e5) => a2(`pdfPage.getAnnotations error:${e5}`));
    }, (e4) => n3.call(this, e4));
  }
};
var oi = class extends r2 {
  pdfDocument = null;
  pages = null;
  rawTextContents = null;
  needRawText = null;
  constructor(e3) {
    super(), this.pdfDocument = null, this.pages = [], this.rawTextContents = [], this.needRawText = e3;
  }
  raiseErrorEvent(e3) {
    return s2.error(e3), c2.nextTick(() => this.emit("pdfjs_parseDataError", e3)), e3;
  }
  raiseReadyEvent(e3) {
    return c2.nextTick(() => this.emit("pdfjs_parseDataReady", e3)), e3;
  }
  parsePDFData(e3, t3) {
    this.pdfDocument = null;
    const a2 = { password: t3, data: e3 };
    be.getDocument(a2).then((e4) => this.load(e4, 1), (e4) => this.raiseErrorEvent(e4));
  }
  tryLoadFieldInfoXML(a2) {
    const r3 = "_fieldInfo.xml", i3 = a2.replace(".pdf", r3);
    i3.indexOf(r3) < 1 || !e2.existsSync(i3) || (t2.p2jinfo(`About to load fieldInfo XML : ${i3}`), this.ptiParser = new J(), this.ptiParser.parseXml(i3, (e3) => {
      e3 ? (t2.p2jwarn(`fieldInfo XML Error: ${JSON.stringify(e3)}`), this.ptiParser = null) : t2.p2jinfo("fieldInfo XML loaded.");
    }));
  }
  load(e3, t3) {
    return this.pdfDocument = e3, this.loadMetaData().then(() => this.loadPages(), (e4) => this.raiseErrorEvent(`loadMetaData error: ${e4}`));
  }
  loadMetaData() {
    return this.pdfDocument.getMetadata().then((e3) => {
      this.documentInfo = e3.info, this.metadata = e3.metadata?.metadata ?? {}, this.parseMetaData();
    }, (e3) => this.raiseErrorEvent(`pdfDocument.getMetadata error: ${e3}`));
  }
  parseMetaData() {
    const e3 = { Transcoder: N, Meta: { ...this.documentInfo, Metadata: this.metadata } };
    this.raiseReadyEvent(e3), this.emit("readable", e3);
  }
  loadPages() {
    const e3 = this.pdfDocument.numPages, a2 = [];
    for (let t3 = 1; t3 <= e3; t3++) a2.push(this.pdfDocument.getPage(t3));
    const r3 = be.Promise.all(a2);
    return t2.p2jinfo(`PDF loaded. pagesCount = ${e3}`), r3.then((e4) => this.parsePage(e4, 0, 1.5), (e4) => this.raiseErrorEvent(`pagesPromise error: ${e4}`));
  }
  parsePage(e3, a2, r3) {
    t2.p2jinfo(`start to parse page:${a2 + 1}`);
    const i3 = e3[a2], n3 = new si(i3, a2, r3, this.ptiParser);
    function s3() {
      t2.p2jinfo(`complete parsing page:${a2 + 1}`), a2 === this.pdfDocument.numPages - 1 ? (this.raiseReadyEvent({ Pages: this.pages }), c2.nextTick(() => this.raiseReadyEvent(null)), this.emit("data", null)) : c2.nextTick(() => this.parsePage(e3, ++a2, r3));
    }
    n3.parsePage((e4) => {
      const r4 = { Width: n3.width, Height: n3.height, HLines: n3.HLines, VLines: n3.VLines, Fills: n3.Fills, Texts: n3.Texts, Fields: n3.Fields, Boxsets: n3.Boxsets };
      this.pages.push(r4), this.emit("data", r4), this.needRawText ? i3.getTextContent().then((e5) => {
        this.rawTextContents.push(e5), t2.p2jinfo(`complete parsing raw text content:${a2 + 1}`), s3.call(this);
      }, (e5) => this.raiseErrorEvent(`pdfPage.getTextContent error: ${e5}`)) : s3.call(this);
    }, (e4) => this.raiseErrorEvent(e4));
  }
  getRawTextContent() {
    let e3 = "";
    return this.needRawText ? (this.rawTextContents.forEach((t3, a2) => {
      let r3 = null;
      t3.bidiTexts.forEach((t4, a3) => {
        r3 ? Math.abs(t4.y - r3.y) <= 9 ? r3.str += t4.str : (e3 += `${r3.str}\r
`, r3 = t4) : r3 = t4;
      }), r3 && (e3 += r3.str), e3 += `\r
----------------Page (${a2}) Break----------------\r
`;
    }), e3) : e3;
  }
  getAllFieldsTypes() {
    return _2.getAllFieldsTypes({ Pages: this.pages || [] });
  }
  getMergedTextBlocksIfNeeded() {
    for (let e3 = 0; e3 < this.pages.length; e3++) {
      let a2 = null;
      const r3 = this.pages[e3];
      r3.Texts.sort(Y.compareBlockPos), r3.Texts = r3.Texts.filter((e4, a3) => {
        const i3 = a3 > 0 && Y.areDuplicateBlocks(r3.Texts[a3 - 1], e4);
        return i3 && t2.p2jinfo(`skipped: dup text block: ${decodeURIComponent(e4.R[0].T)}`), !i3;
      });
      for (let e4 = 0; e4 < r3.Texts.length; e4++) {
        const i3 = r3.Texts[e4];
        if (a2) if (Y.areAdjacentBlocks(a2, i3) && Y.haveSameStyle(a2, i3)) {
          const e5 = decodeURIComponent(a2.R[0].T), r4 = decodeURIComponent(i3.R[0].T);
          a2.R[0].T += i3.R[0].T, a2.w += i3.w, i3.merged = true;
          const n3 = decodeURIComponent(a2.R[0].T);
          t2.p2jinfo(`merged text block: ${e5} + ${r4} => ${n3}`), a2 = null;
        } else a2 = i3;
        else a2 = i3;
      }
      r3.Texts = r3.Texts.filter((e4) => !e4.merged);
    }
    return { Pages: this.pages };
  }
  destroy() {
    this.removeAllListeners(), this.pdfDocument && this.pdfDocument.destroy(), this.pdfDocument = null, this.pages = null, this.rawTextContents = null;
  }
};
var fi = class extends f {
  static createContentStream(e3) {
    const t3 = new l({ objectMode: true });
    return t3.push(e3), t3.push(null), t3;
  }
  static createOutputStream(t3, a2, r3) {
    const i3 = e2.createWriteStream(t3);
    return i3.on("finish", () => a2(t3)), i3.on("error", (e3) => r3(e3)), i3;
  }
  #S = null;
  #C = [];
  #I = { Pages: [] };
  #B = null;
  constructor(e3, t3) {
    super(t3), this.#S = e3, this.#C = [], this.#S.on("readable", (e4) => this.#I = { ...e4, Pages: [] }), this.#S.on("data", (e4) => {
      e4 ? this.#I.Pages.push(e4) : (this.push(this.#I), this.#B());
    });
  }
  _transform(e3, t3, a2) {
    this.#C.push(i2.isBuffer(e3) ? e3 : i2.from(e3, t3)), a2();
  }
  _flush(e3) {
    this.#B = e3, this.#S.parseBuffer(i2.concat(this.#C));
  }
  _destroy() {
    super.removeAllListeners(), this.#S = null, this.#C = [];
  }
};
var li = class extends f {
  constructor(e3) {
    super(e3), this._readableState.objectMode = false, this._writableState.objectMode = true;
  }
  _transform(e3, t3, a2) {
    this.push(JSON.stringify(e3)), a2();
  }
};
var hi = class _hi extends r2 {
  static get colorDict() {
    return j2;
  }
  static get fontFaceDict() {
    return U;
  }
  static get fontStyleDict() {
    return z3;
  }
  static get PDFUnit() {
    return G;
  }
  static get ParserStream() {
    return fi;
  }
  static get StringifyStream() {
    return li;
  }
  static get pkInfo() {
    return E2;
  }
  static get _PARSER_SIG() {
    return N;
  }
  static #T = 10;
  static #L = {};
  #F = "";
  #P = null;
  #R = null;
  #O = null;
  #M = null;
  #D = null;
  #q = false;
  constructor(e3, t3, a2) {
    super(), this.#P = e3, this.#R = null, this.#O = null, this.#M = null, this.#q = false, this.#D = new oi(t3), this.#F = a2;
  }
  #E(e3) {
    e3 ? this.#M = { ...this.#M, ...e3 } : (t2.p2jinfo("PDF parsing completed."), this.emit("pdfParser_dataReady", this.#M));
  }
  #N(e3) {
    this.#M = null, this.emit("pdfParser_dataError", { parserError: e3 });
  }
  #j(e3) {
    this.#M = {}, this.#D.on("pdfjs_parseDataReady", (e4) => this.#E(e4)), this.#D.on("pdfjs_parseDataError", (e4) => this.#N(e4)), this.#D.on("readable", (e4) => this.emit("readable", e4)), this.#D.on("data", (e4) => this.emit("data", e4)), this.#D.on("error", (e4) => this.#N(e4)), this.#D.parsePDFData(e3 || _hi.#L[this.binBufferKey], this.#F);
  }
  #U() {
    if (this.binBufferKey in _hi.#L) return this.#j(), true;
    const e3 = Object.keys(_hi.#L);
    if (e3.length > _hi.#T) {
      const a2 = e3[this.id % _hi.#T];
      _hi.#L[a2] = null, delete _hi.#L[a2], t2.p2jinfo(`re-cycled cache for ${a2}`);
    }
    return false;
  }
  get data() {
    return this.#M;
  }
  get binBufferKey() {
    return this.#R + this.#O;
  }
  createParserStream() {
    return new fi(this, { objectMode: true, bufferSize: 65536 });
  }
  async loadPDF(r3, i3) {
    t2.verbosity(i3 || 0), t2.p2jinfo(`about to load PDF file ${r3}`), this.#R = r3;
    try {
      if (this.#O = e2.statSync(r3).mtimeMs, this.#q && this.#D.tryLoadFieldInfoXML(r3), this.#U()) return;
      _hi.#L[this.binBufferKey] = await a(r3), t2.p2jinfo(`Load OK: ${r3}`), this.#j();
    } catch (e3) {
      t2.p2jerror(`Load Failed: ${r3} - ${e3}`), this.emit("pdfParser_dataError", e3);
    }
  }
  parseBuffer(e3, a2) {
    if (t2.verbosity(a2), !e3?.length || !e3.buffer) return void t2.p2jerror("Error: empty PDF buffer, nothing to parse.");
    let r3 = e3;
    r3.buffer.byteLength !== r3.length && (r3 = i2.from(r3.buffer, 0, r3.byteLength)), this.#j(r3);
  }
  getRawTextContent() {
    return this.#D.getRawTextContent();
  }
  getRawTextContentStream() {
    return fi.createContentStream(this.getRawTextContent());
  }
  getAllFieldsTypes() {
    return this.#D.getAllFieldsTypes();
  }
  getAllFieldsTypesStream() {
    return fi.createContentStream(this.getAllFieldsTypes());
  }
  getMergedTextBlocksIfNeeded() {
    return this.#D.getMergedTextBlocksIfNeeded();
  }
  getMergedTextBlocksStream() {
    return fi.createContentStream(this.getMergedTextBlocksIfNeeded());
  }
  destroy() {
    super.removeAllListeners(), this.#P && (this.#P.destroy(), this.#P = null), this.#R = null, this.#O = null, this.#M = null, this.#q = false, this.#D.destroy(), this.#D = null;
  }
};

// services/textparser.ts
var xlsx = __toESM(require_xlsx());
var xml2js = __toESM(require_xml2js());
import { Readable } from "stream";
var isScannedPDF = async (buffer) => {
  return new Promise((resolve, reject) => {
    const pdfParser = new hi();
    pdfParser.on("pdfParser_dataError", (err) => reject(err));
    pdfParser.on("pdfParser_dataReady", (pdfData) => {
      let hasText = false;
      pdfData.Pages.forEach((page) => {
        if (page.Texts.length > 0) {
          hasText = true;
        }
      });
      resolve(!hasText);
    });
    pdfParser.parseBuffer(buffer);
  });
};
var extractTextFromScannedPDF = async (fileUrl) => {
  try {
    const response = await fetch("https://aws-textract.onrender.com/extract-text", {
      method: "POST",
      headers: {
        "Content-Type": "application/json"
        // 🔹 Asegura que FastAPI reciba JSON correctamente
      },
      body: JSON.stringify({ url: fileUrl })
    });
    if (!response.ok) {
      throw new Error(`Error HTTP: ${response.status} - ${response.statusText}`);
    }
    const json = await response.json();
    console.log("✅ Respuesta de la API:", json);
    return json.extracted_text || "No se extrajo texto.";
  } catch (error) {
    console.error("❌ Error al obtener datos:", error);
    return "Error al procesar el PDF.";
  }
};
var extractTextFromPDF = async (buffer) => {
  return new Promise((resolve, reject) => {
    const pdfParser = new hi();
    pdfParser.on("pdfParser_dataError", (err) => reject(err));
    pdfParser.on("pdfParser_dataReady", (pdfData) => {
      let text = "";
      pdfData.Pages.forEach((page) => {
        page.Texts.forEach((textObj) => {
          text += decodeURIComponent(textObj.R[0].T) + " ";
        });
      });
      resolve(text.trim());
    });
    pdfParser.parseBuffer(buffer);
  });
};
var extractTextFromCSV = async (buffer) => {
  return new Promise((resolve) => {
    const results = [];
    Readable.from(buffer.toString()).pipe((0, import_csv_parser.default)()).on("data", (row) => results.push(JSON.stringify(row))).on("end", () => resolve(results.join("\n")));
  });
};
var extractTextFromExcel = (buffer) => {
  const workbook = xlsx.read(buffer, { type: "buffer" });
  const sheetName = workbook.SheetNames[0];
  const sheet = workbook.Sheets[sheetName];
  return xlsx.utils.sheet_to_csv(sheet);
};
var extractTextFromXML = async (buffer) => {
  return new Promise((resolve, reject) => {
    xml2js.parseString(buffer.toString(), (err, result) => {
      if (err) reject(err);
      resolve(JSON.stringify(result, null, 2));
    });
  });
};
var extractText = async (fileKey, buffer, fileUrl) => {
  const extension = fileKey.split(".").pop()?.toLowerCase();
  console.log("Extensión del archivo:", extension);
  try {
    switch (extension) {
      case "pdf": {
        if (!buffer) {
          if (!fileUrl) return "Error: Se necesita un buffer o una URL.";
          return await extractTextFromScannedPDF(fileUrl);
        }
        const scanned = await isScannedPDF(buffer);
        if (scanned) {
          if (!fileUrl) return "Error: Se necesita una URL para procesar el PDF escaneado.";
          return await extractTextFromScannedPDF(fileUrl);
        } else {
          return await extractTextFromPDF(buffer);
        }
      }
      case "csv":
        if (!buffer) return "Error: Se necesita un buffer para procesar el CSV.";
        return await extractTextFromCSV(buffer);
      case "xls":
      case "xlsx":
        if (!buffer) return "Error: Se necesita un buffer para procesar el Excel.";
        return extractTextFromExcel(buffer);
      case "xml":
        if (!buffer) return "Error: Se necesita un buffer para procesar el XML.";
        return await extractTextFromXML(buffer);
      default:
        return "Formato no soportado.";
    }
  } catch (error) {
    console.error("Error al extraer texto:", error);
    return null;
  }
};

// trigger/example.ts
var extractBodyContractTask = task({
  id: "extract-body-contract",
  // Set an optional maxDuration to prevent tasks from running indefinitely
  // Stop executing after 300 secs (5 mins) of compute
  run: async (payload) => {
    const documentId = payload.documentId;
    try {
      const decryptedId = payload.documentId;
      const teamId = payload.teamId;
      const userId = payload.userId;
      console.log(`🔹 Workspace ID: ${decryptedId} y ${payload.documentId}`);
      if (!decryptedId) {
        console.log(`⚠️ No se pudo desencriptar el ID: ${payload.documentId}`);
        return null;
      }
      let teamMemberRole = null;
      if (teamId !== void 0) {
        try {
          const team = await prisma.team.findFirstOrThrow({
            where: {
              id: teamId,
              members: {
                some: {
                  userId
                }
              }
            },
            include: {
              members: {
                where: {
                  userId
                },
                select: {
                  role: true
                }
              }
            }
          });
          teamMemberRole = team.members[0].role;
        } catch (error) {
          console.error("Error finding team:", error);
          return null;
        }
      }
      const visibilityFilters = z2(teamMemberRole).with(TeamMemberRole.ADMIN, () => ({
        visibility: {
          in: [
            DocumentVisibility.EVERYONE,
            DocumentVisibility.MANAGER_AND_ABOVE,
            DocumentVisibility.ADMIN
          ]
        }
      })).with(TeamMemberRole.MANAGER, () => ({
        visibility: {
          in: [DocumentVisibility.EVERYONE, DocumentVisibility.MANAGER_AND_ABOVE]
        }
      })).otherwise(() => ({ visibility: DocumentVisibility.EVERYONE }));
      console.log("visibilityFilters", visibilityFilters);
      const documentWhereClause = {
        id: documentId,
        ...teamId ? {
          OR: [
            { teamId, ...visibilityFilters },
            { userId, teamId }
          ]
        } : { userId, teamId: null }
      };
      const documentBody = await prisma.documentBodyExtracted.create({
        data: { body: "En proceso", status: "PENDING", documentId }
      });
      console.log("documentBody", documentBody);
      console.log("documentWhereClause", documentWhereClause);
      const document2 = await prisma.document.findFirst({
        where: documentWhereClause
      });
      console.log("document", document2);
      const results = [];
      const pdfUrl = payload.urlDocument;
      console.log(`🔹 Descargando PDF desde: ${pdfUrl}`);
      const response = await fetch2(pdfUrl);
      if (!response.ok) {
        console.log(`⚠️ Error al obtener ${pdfUrl}, código HTTP: ${response.status}`);
        throw new Error(`Error al obtener ${pdfUrl}, código HTTP: ${response.status}`);
      }
      const buffer = Buffer.from(await response.arrayBuffer());
      console.log(`✅ PDF descargado con éxito, tamaño: ${buffer.length} bytes`);
      const fileName = document2?.title;
      const extractedText = await extractText(fileName ?? "archivo_desconocido", buffer, pdfUrl);
      if (!extractedText) {
        console.log(`⚠️ No se pudo extraer el texto del PDF: ${fileName}`);
        await prisma.document.update({
          where: { id: documentId },
          data: { status: "ERROR" }
        });
        return;
      }
      if (extractedText === "Error al procesar el PDF.") {
        console.log(`⚠️ No se pudo extraer el texto del PDF: ${fileName}`);
        await prisma.document.update({
          where: { id: documentId },
          data: { status: "ERROR" }
        });
        return;
      }
      console.log(`✅ texto extraido con éxito`);
      console.log("extractedText", extractedText);
      if (extractedText) {
        await prisma.documentBodyExtracted.update({
          where: { id: documentBody.id },
          data: { status: "COMPLETE", body: extractedText }
        });
        await prisma.document.update({
          where: { id: documentId },
          data: { status: "COMPLETED" }
        });
      }
    } catch (error) {
      await prisma.document.update({
        where: { id: documentId },
        data: { status: "ERROR" }
      });
    }
  }
});

export {
  extractBodyContractTask
};
/*! Bundled license information:

xlsx/dist/cpexcel.js:
  (*! cpexcel.js (C) 2013-present SheetJS -- http://sheetjs.com *)
  (*! cputils.js (C) 2013-present SheetJS -- http://sheetjs.com *)

xlsx/xlsx.js:
  (*! xlsx.js (C) 2013-present SheetJS -- http://sheetjs.com *)
  (*! sheetjs (C) 2013-present SheetJS -- http://sheetjs.com *)

sax/lib/sax.js:
  (*! http://mths.be/fromcodepoint v0.1.0 by @mathias *)
*/
//# sourceMappingURL=chunk-C6URBZOY.mjs.map
